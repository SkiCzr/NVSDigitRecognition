
STM32F746G_DISCO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002ceb4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00015e40  0802d088  0802d088  0002e088  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontSearchFlashSection 000016c4  08042ec8  08042ec8  00043ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0804458c  0804458c  0020adbc  2**0
                  CONTENTS
  5 .ARM          00000008  0804458c  0804458c  0004558c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08044594  08044594  0020adbc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000020  08044594  08044594  00045594  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000010  080445b4  080445b4  000455b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00007cfc  20000000  080445c4  00046000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00022e14  20007d00  0804c2c0  0004dd00  2**5
                  ALLOC
 11 ._user_heap_stack 00001404  2002ab14  0804c2c0  0004eb14  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0020adbc  2**0
                  CONTENTS, READONLY
 13 BufferSection 00193c00  c0000000  c0000000  0020b000  2**2
                  ALLOC
 14 ExtFlashSection 001683c0  90000000  90000000  0004e000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 FontFlashSection 000545c0  901683c0  901683c0  001b63c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 TextFlashSection 0000043c  901bc980  901bc980  0020a980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 17 .debug_info   0017f4b4  00000000  00000000  0020adec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 00027943  00000000  00000000  0038a2a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loclists 00027f22  00000000  00000000  003b1be3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_aranges 000045d8  00000000  00000000  003d9b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_rnglists 00005bf7  00000000  00000000  003de0e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_macro  0004feac  00000000  00000000  003e3cd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line   00090e25  00000000  00000000  00433b83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_str    001aef68  00000000  00000000  004c49a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .comment      000000c2  00000000  00000000  00673910  2**0
                  CONTENTS, READONLY
 26 .debug_frame  0000bc44  00000000  00000000  006739d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_line_str 00000096  00000000  00000000  0067f618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20007d00 	.word	0x20007d00
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0802d06c 	.word	0x0802d06c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20007d04 	.word	0x20007d04
 800020c:	0802d06c 	.word	0x0802d06c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_uldivmod>:
 8000c28:	b953      	cbnz	r3, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2a:	b94a      	cbnz	r2, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2c:	2900      	cmp	r1, #0
 8000c2e:	bf08      	it	eq
 8000c30:	2800      	cmpeq	r0, #0
 8000c32:	bf1c      	itt	ne
 8000c34:	f04f 31ff 	movne.w	r1, #4294967295
 8000c38:	f04f 30ff 	movne.w	r0, #4294967295
 8000c3c:	f000 b96a 	b.w	8000f14 <__aeabi_idiv0>
 8000c40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c48:	f000 f806 	bl	8000c58 <__udivmoddi4>
 8000c4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c54:	b004      	add	sp, #16
 8000c56:	4770      	bx	lr

08000c58 <__udivmoddi4>:
 8000c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c5c:	9d08      	ldr	r5, [sp, #32]
 8000c5e:	460c      	mov	r4, r1
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d14e      	bne.n	8000d02 <__udivmoddi4+0xaa>
 8000c64:	4694      	mov	ip, r2
 8000c66:	458c      	cmp	ip, r1
 8000c68:	4686      	mov	lr, r0
 8000c6a:	fab2 f282 	clz	r2, r2
 8000c6e:	d962      	bls.n	8000d36 <__udivmoddi4+0xde>
 8000c70:	b14a      	cbz	r2, 8000c86 <__udivmoddi4+0x2e>
 8000c72:	f1c2 0320 	rsb	r3, r2, #32
 8000c76:	4091      	lsls	r1, r2
 8000c78:	fa20 f303 	lsr.w	r3, r0, r3
 8000c7c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c80:	4319      	orrs	r1, r3
 8000c82:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c86:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c8a:	fa1f f68c 	uxth.w	r6, ip
 8000c8e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c92:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c96:	fb07 1114 	mls	r1, r7, r4, r1
 8000c9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c9e:	fb04 f106 	mul.w	r1, r4, r6
 8000ca2:	4299      	cmp	r1, r3
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x64>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cae:	f080 8112 	bcs.w	8000ed6 <__udivmoddi4+0x27e>
 8000cb2:	4299      	cmp	r1, r3
 8000cb4:	f240 810f 	bls.w	8000ed6 <__udivmoddi4+0x27e>
 8000cb8:	3c02      	subs	r4, #2
 8000cba:	4463      	add	r3, ip
 8000cbc:	1a59      	subs	r1, r3, r1
 8000cbe:	fa1f f38e 	uxth.w	r3, lr
 8000cc2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cc6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb00 f606 	mul.w	r6, r0, r6
 8000cd2:	429e      	cmp	r6, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x94>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cde:	f080 80fc 	bcs.w	8000eda <__udivmoddi4+0x282>
 8000ce2:	429e      	cmp	r6, r3
 8000ce4:	f240 80f9 	bls.w	8000eda <__udivmoddi4+0x282>
 8000ce8:	4463      	add	r3, ip
 8000cea:	3802      	subs	r0, #2
 8000cec:	1b9b      	subs	r3, r3, r6
 8000cee:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	b11d      	cbz	r5, 8000cfe <__udivmoddi4+0xa6>
 8000cf6:	40d3      	lsrs	r3, r2
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	e9c5 3200 	strd	r3, r2, [r5]
 8000cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d02:	428b      	cmp	r3, r1
 8000d04:	d905      	bls.n	8000d12 <__udivmoddi4+0xba>
 8000d06:	b10d      	cbz	r5, 8000d0c <__udivmoddi4+0xb4>
 8000d08:	e9c5 0100 	strd	r0, r1, [r5]
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	4608      	mov	r0, r1
 8000d10:	e7f5      	b.n	8000cfe <__udivmoddi4+0xa6>
 8000d12:	fab3 f183 	clz	r1, r3
 8000d16:	2900      	cmp	r1, #0
 8000d18:	d146      	bne.n	8000da8 <__udivmoddi4+0x150>
 8000d1a:	42a3      	cmp	r3, r4
 8000d1c:	d302      	bcc.n	8000d24 <__udivmoddi4+0xcc>
 8000d1e:	4290      	cmp	r0, r2
 8000d20:	f0c0 80f0 	bcc.w	8000f04 <__udivmoddi4+0x2ac>
 8000d24:	1a86      	subs	r6, r0, r2
 8000d26:	eb64 0303 	sbc.w	r3, r4, r3
 8000d2a:	2001      	movs	r0, #1
 8000d2c:	2d00      	cmp	r5, #0
 8000d2e:	d0e6      	beq.n	8000cfe <__udivmoddi4+0xa6>
 8000d30:	e9c5 6300 	strd	r6, r3, [r5]
 8000d34:	e7e3      	b.n	8000cfe <__udivmoddi4+0xa6>
 8000d36:	2a00      	cmp	r2, #0
 8000d38:	f040 8090 	bne.w	8000e5c <__udivmoddi4+0x204>
 8000d3c:	eba1 040c 	sub.w	r4, r1, ip
 8000d40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d44:	fa1f f78c 	uxth.w	r7, ip
 8000d48:	2101      	movs	r1, #1
 8000d4a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d4e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d52:	fb08 4416 	mls	r4, r8, r6, r4
 8000d56:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d5a:	fb07 f006 	mul.w	r0, r7, r6
 8000d5e:	4298      	cmp	r0, r3
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0x11c>
 8000d62:	eb1c 0303 	adds.w	r3, ip, r3
 8000d66:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d6a:	d202      	bcs.n	8000d72 <__udivmoddi4+0x11a>
 8000d6c:	4298      	cmp	r0, r3
 8000d6e:	f200 80cd 	bhi.w	8000f0c <__udivmoddi4+0x2b4>
 8000d72:	4626      	mov	r6, r4
 8000d74:	1a1c      	subs	r4, r3, r0
 8000d76:	fa1f f38e 	uxth.w	r3, lr
 8000d7a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d7e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d82:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d86:	fb00 f707 	mul.w	r7, r0, r7
 8000d8a:	429f      	cmp	r7, r3
 8000d8c:	d908      	bls.n	8000da0 <__udivmoddi4+0x148>
 8000d8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d92:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d96:	d202      	bcs.n	8000d9e <__udivmoddi4+0x146>
 8000d98:	429f      	cmp	r7, r3
 8000d9a:	f200 80b0 	bhi.w	8000efe <__udivmoddi4+0x2a6>
 8000d9e:	4620      	mov	r0, r4
 8000da0:	1bdb      	subs	r3, r3, r7
 8000da2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000da6:	e7a5      	b.n	8000cf4 <__udivmoddi4+0x9c>
 8000da8:	f1c1 0620 	rsb	r6, r1, #32
 8000dac:	408b      	lsls	r3, r1
 8000dae:	fa22 f706 	lsr.w	r7, r2, r6
 8000db2:	431f      	orrs	r7, r3
 8000db4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000db8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dbc:	ea43 030c 	orr.w	r3, r3, ip
 8000dc0:	40f4      	lsrs	r4, r6
 8000dc2:	fa00 f801 	lsl.w	r8, r0, r1
 8000dc6:	0c38      	lsrs	r0, r7, #16
 8000dc8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dcc:	fbb4 fef0 	udiv	lr, r4, r0
 8000dd0:	fa1f fc87 	uxth.w	ip, r7
 8000dd4:	fb00 441e 	mls	r4, r0, lr, r4
 8000dd8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ddc:	fb0e f90c 	mul.w	r9, lr, ip
 8000de0:	45a1      	cmp	r9, r4
 8000de2:	fa02 f201 	lsl.w	r2, r2, r1
 8000de6:	d90a      	bls.n	8000dfe <__udivmoddi4+0x1a6>
 8000de8:	193c      	adds	r4, r7, r4
 8000dea:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dee:	f080 8084 	bcs.w	8000efa <__udivmoddi4+0x2a2>
 8000df2:	45a1      	cmp	r9, r4
 8000df4:	f240 8081 	bls.w	8000efa <__udivmoddi4+0x2a2>
 8000df8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dfc:	443c      	add	r4, r7
 8000dfe:	eba4 0409 	sub.w	r4, r4, r9
 8000e02:	fa1f f983 	uxth.w	r9, r3
 8000e06:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e0a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e0e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e12:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e16:	45a4      	cmp	ip, r4
 8000e18:	d907      	bls.n	8000e2a <__udivmoddi4+0x1d2>
 8000e1a:	193c      	adds	r4, r7, r4
 8000e1c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e20:	d267      	bcs.n	8000ef2 <__udivmoddi4+0x29a>
 8000e22:	45a4      	cmp	ip, r4
 8000e24:	d965      	bls.n	8000ef2 <__udivmoddi4+0x29a>
 8000e26:	3b02      	subs	r3, #2
 8000e28:	443c      	add	r4, r7
 8000e2a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e2e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e32:	eba4 040c 	sub.w	r4, r4, ip
 8000e36:	429c      	cmp	r4, r3
 8000e38:	46ce      	mov	lr, r9
 8000e3a:	469c      	mov	ip, r3
 8000e3c:	d351      	bcc.n	8000ee2 <__udivmoddi4+0x28a>
 8000e3e:	d04e      	beq.n	8000ede <__udivmoddi4+0x286>
 8000e40:	b155      	cbz	r5, 8000e58 <__udivmoddi4+0x200>
 8000e42:	ebb8 030e 	subs.w	r3, r8, lr
 8000e46:	eb64 040c 	sbc.w	r4, r4, ip
 8000e4a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e4e:	40cb      	lsrs	r3, r1
 8000e50:	431e      	orrs	r6, r3
 8000e52:	40cc      	lsrs	r4, r1
 8000e54:	e9c5 6400 	strd	r6, r4, [r5]
 8000e58:	2100      	movs	r1, #0
 8000e5a:	e750      	b.n	8000cfe <__udivmoddi4+0xa6>
 8000e5c:	f1c2 0320 	rsb	r3, r2, #32
 8000e60:	fa20 f103 	lsr.w	r1, r0, r3
 8000e64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e68:	fa24 f303 	lsr.w	r3, r4, r3
 8000e6c:	4094      	lsls	r4, r2
 8000e6e:	430c      	orrs	r4, r1
 8000e70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e74:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e78:	fa1f f78c 	uxth.w	r7, ip
 8000e7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e80:	fb08 3110 	mls	r1, r8, r0, r3
 8000e84:	0c23      	lsrs	r3, r4, #16
 8000e86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e8a:	fb00 f107 	mul.w	r1, r0, r7
 8000e8e:	4299      	cmp	r1, r3
 8000e90:	d908      	bls.n	8000ea4 <__udivmoddi4+0x24c>
 8000e92:	eb1c 0303 	adds.w	r3, ip, r3
 8000e96:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e9a:	d22c      	bcs.n	8000ef6 <__udivmoddi4+0x29e>
 8000e9c:	4299      	cmp	r1, r3
 8000e9e:	d92a      	bls.n	8000ef6 <__udivmoddi4+0x29e>
 8000ea0:	3802      	subs	r0, #2
 8000ea2:	4463      	add	r3, ip
 8000ea4:	1a5b      	subs	r3, r3, r1
 8000ea6:	b2a4      	uxth	r4, r4
 8000ea8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000eac:	fb08 3311 	mls	r3, r8, r1, r3
 8000eb0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000eb4:	fb01 f307 	mul.w	r3, r1, r7
 8000eb8:	42a3      	cmp	r3, r4
 8000eba:	d908      	bls.n	8000ece <__udivmoddi4+0x276>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ec4:	d213      	bcs.n	8000eee <__udivmoddi4+0x296>
 8000ec6:	42a3      	cmp	r3, r4
 8000ec8:	d911      	bls.n	8000eee <__udivmoddi4+0x296>
 8000eca:	3902      	subs	r1, #2
 8000ecc:	4464      	add	r4, ip
 8000ece:	1ae4      	subs	r4, r4, r3
 8000ed0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ed4:	e739      	b.n	8000d4a <__udivmoddi4+0xf2>
 8000ed6:	4604      	mov	r4, r0
 8000ed8:	e6f0      	b.n	8000cbc <__udivmoddi4+0x64>
 8000eda:	4608      	mov	r0, r1
 8000edc:	e706      	b.n	8000cec <__udivmoddi4+0x94>
 8000ede:	45c8      	cmp	r8, r9
 8000ee0:	d2ae      	bcs.n	8000e40 <__udivmoddi4+0x1e8>
 8000ee2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ee6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eea:	3801      	subs	r0, #1
 8000eec:	e7a8      	b.n	8000e40 <__udivmoddi4+0x1e8>
 8000eee:	4631      	mov	r1, r6
 8000ef0:	e7ed      	b.n	8000ece <__udivmoddi4+0x276>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	e799      	b.n	8000e2a <__udivmoddi4+0x1d2>
 8000ef6:	4630      	mov	r0, r6
 8000ef8:	e7d4      	b.n	8000ea4 <__udivmoddi4+0x24c>
 8000efa:	46d6      	mov	lr, sl
 8000efc:	e77f      	b.n	8000dfe <__udivmoddi4+0x1a6>
 8000efe:	4463      	add	r3, ip
 8000f00:	3802      	subs	r0, #2
 8000f02:	e74d      	b.n	8000da0 <__udivmoddi4+0x148>
 8000f04:	4606      	mov	r6, r0
 8000f06:	4623      	mov	r3, r4
 8000f08:	4608      	mov	r0, r1
 8000f0a:	e70f      	b.n	8000d2c <__udivmoddi4+0xd4>
 8000f0c:	3e02      	subs	r6, #2
 8000f0e:	4463      	add	r3, ip
 8000f10:	e730      	b.n	8000d74 <__udivmoddi4+0x11c>
 8000f12:	bf00      	nop

08000f14 <__aeabi_idiv0>:
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop

08000f18 <suspend_rtos_task>:

/**
 * @brief Function to suspend the RTOS task.
 * @param tsk_ctrl Pointer to task control structure
 */
static void suspend_rtos_task(task_control_t *tsk_ctrl) {
 8000f18:	b510      	push	{r4, lr}
 8000f1a:	4604      	mov	r4, r0

	/* Check if semaphore_id is NULL */
	if (tsk_ctrl->xTskSemphHdl == NULL) {
 8000f1c:	6840      	ldr	r0, [r0, #4]
 8000f1e:	b920      	cbnz	r0, 8000f2a <suspend_rtos_task+0x12>

		/* Suspend the task */
		osThreadSuspend(tsk_ctrl->xTskHdl );
 8000f20:	6820      	ldr	r0, [r4, #0]
			/* Update task state */
			tsk_ctrl->xTskState = supended;

		}
	}
}
 8000f22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		osThreadSuspend(tsk_ctrl->xTskHdl );
 8000f26:	f00e bc5b 	b.w	800f7e0 <osThreadSuspend>
		if(tsk_ctrl->xTskState == resumed) {
 8000f2a:	7a23      	ldrb	r3, [r4, #8]
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d105      	bne.n	8000f3c <suspend_rtos_task+0x24>
			osSemaphoreAcquire(tsk_ctrl->xTskSemphHdl, portMAX_DELAY);
 8000f30:	f04f 31ff 	mov.w	r1, #4294967295
 8000f34:	f00e fd26 	bl	800f984 <osSemaphoreAcquire>
			tsk_ctrl->xTskState = supended;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	7223      	strb	r3, [r4, #8]
}
 8000f3c:	bd10      	pop	{r4, pc}

08000f3e <resume_rtos_task>:
static void resume_rtos_task(task_control_t *tsk_ctrl) {
 8000f3e:	b510      	push	{r4, lr}
 8000f40:	4604      	mov	r4, r0
	if (tsk_ctrl->xTskSemphHdl == NULL) {
 8000f42:	6840      	ldr	r0, [r0, #4]
 8000f44:	b920      	cbnz	r0, 8000f50 <resume_rtos_task+0x12>
		osThreadResume(tsk_ctrl->xTskHdl );
 8000f46:	6820      	ldr	r0, [r4, #0]
}
 8000f48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		osThreadResume(tsk_ctrl->xTskHdl );
 8000f4c:	f00e bc64 	b.w	800f818 <osThreadResume>
		if(tsk_ctrl->xTskState == supended) {
 8000f50:	7a23      	ldrb	r3, [r4, #8]
 8000f52:	b91b      	cbnz	r3, 8000f5c <resume_rtos_task+0x1e>
			osSemaphoreRelease(tsk_ctrl->xTskSemphHdl);
 8000f54:	f00e fd52 	bl	800f9fc <osSemaphoreRelease>
			tsk_ctrl->xTskState = resumed;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	7223      	strb	r3, [r4, #8]
}
 8000f5c:	bd10      	pop	{r4, pc}
	...

08000f60 <enter_view>:

/**
 * @brief Configuration function for Streaming mode screen.
 */
void enter_view()
{
 8000f60:	b510      	push	{r4, lr}
	/* Enable and Update the transparency for the layer 2*/
	enable_lcd_layer_event(&hltdc, LAYER_TWO, frame_buffer_l1_default);
 8000f62:	4a3a      	ldr	r2, [pc, #232]	@ (800104c <enter_view+0xec>)
 8000f64:	2101      	movs	r1, #1
 8000f66:	483a      	ldr	r0, [pc, #232]	@ (8001050 <enter_view+0xf0>)
 8000f68:	f000 f9e6 	bl	8001338 <enable_lcd_layer_event>

	xSemaphoreGive(tskCtlUpdateFbHandle);
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	4839      	ldr	r0, [pc, #228]	@ (8001054 <enter_view+0xf4>)

	if(init_done == FALSE) {
 8000f70:	4c39      	ldr	r4, [pc, #228]	@ (8001058 <enter_view+0xf8>)
	xSemaphoreGive(tskCtlUpdateFbHandle);
 8000f72:	461a      	mov	r2, r3
 8000f74:	4619      	mov	r1, r3
 8000f76:	6800      	ldr	r0, [r0, #0]
 8000f78:	f00f fabf 	bl	80104fa <xQueueGenericSend>
	if(init_done == FALSE) {
 8000f7c:	7823      	ldrb	r3, [r4, #0]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d13e      	bne.n	8001000 <enter_view+0xa0>

		/* Initialize all task control structures */
		init_task_control(&esp_lpw_tsk_ctrl, ESP_LPWHandle, ESP_LPW_SemphHandle);
 8000f82:	4b36      	ldr	r3, [pc, #216]	@ (800105c <enter_view+0xfc>)
 8000f84:	4a36      	ldr	r2, [pc, #216]	@ (8001060 <enter_view+0x100>)
 8000f86:	6818      	ldr	r0, [r3, #0]
	tsk_ctrl->xTskHdl = tsk_hdl;
 8000f88:	6812      	ldr	r2, [r2, #0]
 8000f8a:	4b36      	ldr	r3, [pc, #216]	@ (8001064 <enter_view+0x104>)
	tsk_ctrl->xTskSemphHdl = tsk_semph_hdl;
 8000f8c:	e9c3 2000 	strd	r2, r0, [r3]
	tsk_ctrl->xTskState = resumed;
 8000f90:	2201      	movs	r2, #1
 8000f92:	721a      	strb	r2, [r3, #8]
	if(tsk_semph_hdl != NULL) {
 8000f94:	b108      	cbz	r0, 8000f9a <enter_view+0x3a>
		osSemaphoreRelease(tsk_ctrl->xTskSemphHdl);
 8000f96:	f00e fd31 	bl	800f9fc <osSemaphoreRelease>
		init_task_control(&led_tsk_ctrl, Led_TrackingHandle, Led_Tracking_SemphHandle);
 8000f9a:	4b33      	ldr	r3, [pc, #204]	@ (8001068 <enter_view+0x108>)
 8000f9c:	4a33      	ldr	r2, [pc, #204]	@ (800106c <enter_view+0x10c>)
 8000f9e:	6818      	ldr	r0, [r3, #0]
	tsk_ctrl->xTskHdl = tsk_hdl;
 8000fa0:	6812      	ldr	r2, [r2, #0]
 8000fa2:	4b33      	ldr	r3, [pc, #204]	@ (8001070 <enter_view+0x110>)
	tsk_ctrl->xTskSemphHdl = tsk_semph_hdl;
 8000fa4:	e9c3 2000 	strd	r2, r0, [r3]
	tsk_ctrl->xTskState = resumed;
 8000fa8:	2201      	movs	r2, #1
 8000faa:	721a      	strb	r2, [r3, #8]
	if(tsk_semph_hdl != NULL) {
 8000fac:	b108      	cbz	r0, 8000fb2 <enter_view+0x52>
		osSemaphoreRelease(tsk_ctrl->xTskSemphHdl);
 8000fae:	f00e fd25 	bl	800f9fc <osSemaphoreRelease>
		init_task_control(&statistics_tsk_ctrl, StatisticsHandle, Statistics_SemphHandle);
 8000fb2:	4b30      	ldr	r3, [pc, #192]	@ (8001074 <enter_view+0x114>)
 8000fb4:	4a30      	ldr	r2, [pc, #192]	@ (8001078 <enter_view+0x118>)
 8000fb6:	6818      	ldr	r0, [r3, #0]
	tsk_ctrl->xTskHdl = tsk_hdl;
 8000fb8:	6812      	ldr	r2, [r2, #0]
 8000fba:	4b30      	ldr	r3, [pc, #192]	@ (800107c <enter_view+0x11c>)
	tsk_ctrl->xTskSemphHdl = tsk_semph_hdl;
 8000fbc:	e9c3 2000 	strd	r2, r0, [r3]
	tsk_ctrl->xTskState = resumed;
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	721a      	strb	r2, [r3, #8]
	if(tsk_semph_hdl != NULL) {
 8000fc4:	b108      	cbz	r0, 8000fca <enter_view+0x6a>
		osSemaphoreRelease(tsk_ctrl->xTskSemphHdl);
 8000fc6:	f00e fd19 	bl	800f9fc <osSemaphoreRelease>
		init_task_control(&activity_map_tsk_ctrl, Activity_MapHandle, Activity_Map_SemphHandle);
 8000fca:	4b2d      	ldr	r3, [pc, #180]	@ (8001080 <enter_view+0x120>)
 8000fcc:	4a2d      	ldr	r2, [pc, #180]	@ (8001084 <enter_view+0x124>)
 8000fce:	6818      	ldr	r0, [r3, #0]
	tsk_ctrl->xTskHdl = tsk_hdl;
 8000fd0:	6812      	ldr	r2, [r2, #0]
 8000fd2:	4b2d      	ldr	r3, [pc, #180]	@ (8001088 <enter_view+0x128>)
	tsk_ctrl->xTskSemphHdl = tsk_semph_hdl;
 8000fd4:	e9c3 2000 	strd	r2, r0, [r3]
	tsk_ctrl->xTskState = resumed;
 8000fd8:	2201      	movs	r2, #1
 8000fda:	721a      	strb	r2, [r3, #8]
	if(tsk_semph_hdl != NULL) {
 8000fdc:	b108      	cbz	r0, 8000fe2 <enter_view+0x82>
		osSemaphoreRelease(tsk_ctrl->xTskSemphHdl);
 8000fde:	f00e fd0d 	bl	800f9fc <osSemaphoreRelease>
		init_task_control(&event_decoding_tsk_ctrl, Event_DecodingHandle, NULL);
 8000fe2:	4b2a      	ldr	r3, [pc, #168]	@ (800108c <enter_view+0x12c>)
	tsk_ctrl->xTskSemphHdl = tsk_semph_hdl;
 8000fe4:	2100      	movs	r1, #0
	tsk_ctrl->xTskHdl = tsk_hdl;
 8000fe6:	4a2a      	ldr	r2, [pc, #168]	@ (8001090 <enter_view+0x130>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
		init_task_control(&update_fb_tsk_ctrl, Update_FbHandle, NULL);
 8000fea:	482a      	ldr	r0, [pc, #168]	@ (8001094 <enter_view+0x134>)
	tsk_ctrl->xTskHdl = tsk_hdl;
 8000fec:	6013      	str	r3, [r2, #0]
	tsk_ctrl->xTskState = resumed;
 8000fee:	2301      	movs	r3, #1
	tsk_ctrl->xTskSemphHdl = tsk_semph_hdl;
 8000ff0:	6051      	str	r1, [r2, #4]
	tsk_ctrl->xTskState = resumed;
 8000ff2:	7213      	strb	r3, [r2, #8]
	tsk_ctrl->xTskHdl = tsk_hdl;
 8000ff4:	6800      	ldr	r0, [r0, #0]
 8000ff6:	4a28      	ldr	r2, [pc, #160]	@ (8001098 <enter_view+0x138>)

		init_done = TRUE;
 8000ff8:	7023      	strb	r3, [r4, #0]
	tsk_ctrl->xTskState = resumed;
 8000ffa:	7213      	strb	r3, [r2, #8]
	tsk_ctrl->xTskSemphHdl = tsk_semph_hdl;
 8000ffc:	e9c2 0100 	strd	r0, r1, [r2]
	}

	/* Resume the RTOS tasks that are required for this Screen */
	resume_rtos_task(&event_decoding_tsk_ctrl);
 8001000:	4823      	ldr	r0, [pc, #140]	@ (8001090 <enter_view+0x130>)
 8001002:	f7ff ff9c 	bl	8000f3e <resume_rtos_task>
	resume_rtos_task(&update_fb_tsk_ctrl);
 8001006:	4824      	ldr	r0, [pc, #144]	@ (8001098 <enter_view+0x138>)
 8001008:	f7ff ff99 	bl	8000f3e <resume_rtos_task>

	/* Suspend the RTOS tasks that are not required for this Screen */
	suspend_rtos_task(&activity_map_tsk_ctrl);
 800100c:	481e      	ldr	r0, [pc, #120]	@ (8001088 <enter_view+0x128>)
 800100e:	f7ff ff83 	bl	8000f18 <suspend_rtos_task>
	suspend_rtos_task(&statistics_tsk_ctrl);
 8001012:	481a      	ldr	r0, [pc, #104]	@ (800107c <enter_view+0x11c>)
 8001014:	f7ff ff80 	bl	8000f18 <suspend_rtos_task>
	suspend_rtos_task(&esp_lpw_tsk_ctrl);
 8001018:	4812      	ldr	r0, [pc, #72]	@ (8001064 <enter_view+0x104>)
 800101a:	f7ff ff7d 	bl	8000f18 <suspend_rtos_task>

	/* Configure the Activity map */
	psee_configure_activity_map();

	/* Reset the RISC-V Firmware */
	if (active_firmware != NULL) {
 800101e:	4c1f      	ldr	r4, [pc, #124]	@ (800109c <enter_view+0x13c>)
	suspend_rtos_task(&led_tsk_ctrl);
 8001020:	4813      	ldr	r0, [pc, #76]	@ (8001070 <enter_view+0x110>)
 8001022:	f7ff ff79 	bl	8000f18 <suspend_rtos_task>
	psee_disable_afk();
 8001026:	f00e fb45 	bl	800f6b4 <psee_disable_afk>
	psee_PM3C_config();
 800102a:	f00e f91d 	bl	800f268 <psee_PM3C_config>
	psee_set_default_XY_borders(&genx320mp_default_am_borders);
 800102e:	481c      	ldr	r0, [pc, #112]	@ (80010a0 <enter_view+0x140>)
 8001030:	f00e fa9c 	bl	800f56c <psee_set_default_XY_borders>
	psee_configure_activity_map();
 8001034:	f00e fa88 	bl	800f548 <psee_configure_activity_map>
	if (active_firmware != NULL) {
 8001038:	6823      	ldr	r3, [r4, #0]
 800103a:	b12b      	cbz	r3, 8001048 <enter_view+0xe8>

		psee_reset_firmware(genx320_boot_mode);
 800103c:	4b19      	ldr	r3, [pc, #100]	@ (80010a4 <enter_view+0x144>)
 800103e:	7818      	ldrb	r0, [r3, #0]
 8001040:	f00e f99f 	bl	800f382 <psee_reset_firmware>
		active_firmware = NULL;
 8001044:	2300      	movs	r3, #0
 8001046:	6023      	str	r3, [r4, #0]

	}

}
 8001048:	bd10      	pop	{r4, pc}
 800104a:	bf00      	nop
 800104c:	c013ec00 	.word	0xc013ec00
 8001050:	20008420 	.word	0x20008420
 8001054:	20008200 	.word	0x20008200
 8001058:	20007d64 	.word	0x20007d64
 800105c:	200081a8 	.word	0x200081a8
 8001060:	2000821c 	.word	0x2000821c
 8001064:	20007d58 	.word	0x20007d58
 8001068:	2000819c 	.word	0x2000819c
 800106c:	20008204 	.word	0x20008204
 8001070:	20007d4c 	.word	0x20007d4c
 8001074:	200081a0 	.word	0x200081a0
 8001078:	20008208 	.word	0x20008208
 800107c:	20007d40 	.word	0x20007d40
 8001080:	200081a4 	.word	0x200081a4
 8001084:	2000820c 	.word	0x2000820c
 8001088:	20007d34 	.word	0x20007d34
 800108c:	20008210 	.word	0x20008210
 8001090:	20007d28 	.word	0x20007d28
 8001094:	20008214 	.word	0x20008214
 8001098:	20007d1c 	.word	0x20007d1c
 800109c:	20007d68 	.word	0x20007d68
 80010a0:	20007a98 	.word	0x20007a98
 80010a4:	20016be0 	.word	0x20016be0

080010a8 <enter_statistics_view>:

/**
 * @brief Configuration function for Statistics screen.
 */
void enter_statistics_view()
{
 80010a8:	b508      	push	{r3, lr}
	/* Update the transparency for the layer 2 */
	set_layer_transparency(ALPHA_0, LAYER_TWO);
 80010aa:	2101      	movs	r1, #1
 80010ac:	2000      	movs	r0, #0
 80010ae:	f000 f93b 	bl	8001328 <set_layer_transparency>

	/* Resume the RTOS tasks that are required for this Screen */
	resume_rtos_task(&statistics_tsk_ctrl);
 80010b2:	480d      	ldr	r0, [pc, #52]	@ (80010e8 <enter_statistics_view+0x40>)
 80010b4:	f7ff ff43 	bl	8000f3e <resume_rtos_task>

	/* Suspend the RTOS tasks that are not required for this Screen */
	suspend_rtos_task(&event_decoding_tsk_ctrl);
 80010b8:	480c      	ldr	r0, [pc, #48]	@ (80010ec <enter_statistics_view+0x44>)
 80010ba:	f7ff ff2d 	bl	8000f18 <suspend_rtos_task>
	suspend_rtos_task(&update_fb_tsk_ctrl);
 80010be:	480c      	ldr	r0, [pc, #48]	@ (80010f0 <enter_statistics_view+0x48>)
 80010c0:	f7ff ff2a 	bl	8000f18 <suspend_rtos_task>
	suspend_rtos_task(&activity_map_tsk_ctrl);
 80010c4:	480b      	ldr	r0, [pc, #44]	@ (80010f4 <enter_statistics_view+0x4c>)
 80010c6:	f7ff ff27 	bl	8000f18 <suspend_rtos_task>
	suspend_rtos_task(&esp_lpw_tsk_ctrl);
 80010ca:	480b      	ldr	r0, [pc, #44]	@ (80010f8 <enter_statistics_view+0x50>)
 80010cc:	f7ff ff24 	bl	8000f18 <suspend_rtos_task>
	suspend_rtos_task(&led_tsk_ctrl);
 80010d0:	480a      	ldr	r0, [pc, #40]	@ (80010fc <enter_statistics_view+0x54>)
 80010d2:	f7ff ff21 	bl	8000f18 <suspend_rtos_task>

	/* Enable the Anti-FlicKering filter */
	psee_enable_afk(50,200);
 80010d6:	21c8      	movs	r1, #200	@ 0xc8
 80010d8:	2032      	movs	r0, #50	@ 0x32
 80010da:	f00e fa7d 	bl	800f5d8 <psee_enable_afk>

	/* Operation Mode Configuration */
	psee_PM2_config();
}
 80010de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	psee_PM2_config();
 80010e2:	f00e b8c9 	b.w	800f278 <psee_PM2_config>
 80010e6:	bf00      	nop
 80010e8:	20007d40 	.word	0x20007d40
 80010ec:	20007d28 	.word	0x20007d28
 80010f0:	20007d1c 	.word	0x20007d1c
 80010f4:	20007d34 	.word	0x20007d34
 80010f8:	20007d58 	.word	0x20007d58
 80010fc:	20007d4c 	.word	0x20007d4c

08001100 <enter_LP_statistics_view>:

/**
 * @brief Configuration function for Low power statistics screen.
 */
void enter_LP_statistics_view()
{
 8001100:	b508      	push	{r3, lr}
	/* Update the transparency for the layer 2 */
	set_layer_transparency(ALPHA_150, LAYER_TWO);
 8001102:	2101      	movs	r1, #1
 8001104:	2096      	movs	r0, #150	@ 0x96
 8001106:	f000 f90f 	bl	8001328 <set_layer_transparency>

	/* Resume the RTOS tasks that are required for this Screen */
	resume_rtos_task(&activity_map_tsk_ctrl);
 800110a:	480c      	ldr	r0, [pc, #48]	@ (800113c <enter_LP_statistics_view+0x3c>)
 800110c:	f7ff ff17 	bl	8000f3e <resume_rtos_task>
	resume_rtos_task(&event_decoding_tsk_ctrl);
 8001110:	480b      	ldr	r0, [pc, #44]	@ (8001140 <enter_LP_statistics_view+0x40>)
 8001112:	f7ff ff14 	bl	8000f3e <resume_rtos_task>
	resume_rtos_task(&update_fb_tsk_ctrl);
 8001116:	480b      	ldr	r0, [pc, #44]	@ (8001144 <enter_LP_statistics_view+0x44>)
 8001118:	f7ff ff11 	bl	8000f3e <resume_rtos_task>

	/* Suspend the RTOS tasks that are not required for this Screen */
	suspend_rtos_task(&statistics_tsk_ctrl);
 800111c:	480a      	ldr	r0, [pc, #40]	@ (8001148 <enter_LP_statistics_view+0x48>)
 800111e:	f7ff fefb 	bl	8000f18 <suspend_rtos_task>
	suspend_rtos_task(&esp_lpw_tsk_ctrl);
 8001122:	480a      	ldr	r0, [pc, #40]	@ (800114c <enter_LP_statistics_view+0x4c>)
 8001124:	f7ff fef8 	bl	8000f18 <suspend_rtos_task>
	suspend_rtos_task(&led_tsk_ctrl);
 8001128:	4809      	ldr	r0, [pc, #36]	@ (8001150 <enter_LP_statistics_view+0x50>)
 800112a:	f7ff fef5 	bl	8000f18 <suspend_rtos_task>

	/* Disable the Anti-FlicKering filter */
	psee_disable_afk();
 800112e:	f00e fac1 	bl	800f6b4 <psee_disable_afk>

	/* Operation Mode Configuration */
	psee_PM3C_config();

}
 8001132:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	psee_PM3C_config();
 8001136:	f00e b897 	b.w	800f268 <psee_PM3C_config>
 800113a:	bf00      	nop
 800113c:	20007d34 	.word	0x20007d34
 8001140:	20007d28 	.word	0x20007d28
 8001144:	20007d1c 	.word	0x20007d1c
 8001148:	20007d40 	.word	0x20007d40
 800114c:	20007d58 	.word	0x20007d58
 8001150:	20007d4c 	.word	0x20007d4c

08001154 <enter_view2>:

/**
 * @brief Configuration function for Mode selection screen.
 */
void enter_view2()
{
 8001154:	b508      	push	{r3, lr}
	/* Update the transparency for the layer 2 */
	set_layer_transparency(ALPHA_150, LAYER_TWO);
 8001156:	2101      	movs	r1, #1
 8001158:	2096      	movs	r0, #150	@ 0x96
 800115a:	f000 f8e5 	bl	8001328 <set_layer_transparency>

	/* Resume the RTOS tasks that are required for this Screen */
	resume_rtos_task(&event_decoding_tsk_ctrl);
 800115e:	480e      	ldr	r0, [pc, #56]	@ (8001198 <enter_view2+0x44>)
 8001160:	f7ff feed 	bl	8000f3e <resume_rtos_task>
	resume_rtos_task(&update_fb_tsk_ctrl);
 8001164:	480d      	ldr	r0, [pc, #52]	@ (800119c <enter_view2+0x48>)
 8001166:	f7ff feea 	bl	8000f3e <resume_rtos_task>

	/* Suspend the RTOS tasks that are not required for this Screen */
	suspend_rtos_task(&activity_map_tsk_ctrl);
 800116a:	480d      	ldr	r0, [pc, #52]	@ (80011a0 <enter_view2+0x4c>)
 800116c:	f7ff fed4 	bl	8000f18 <suspend_rtos_task>
	suspend_rtos_task(&statistics_tsk_ctrl);
 8001170:	480c      	ldr	r0, [pc, #48]	@ (80011a4 <enter_view2+0x50>)
 8001172:	f7ff fed1 	bl	8000f18 <suspend_rtos_task>
	suspend_rtos_task(&esp_lpw_tsk_ctrl);
 8001176:	480c      	ldr	r0, [pc, #48]	@ (80011a8 <enter_view2+0x54>)
 8001178:	f7ff fece 	bl	8000f18 <suspend_rtos_task>
	suspend_rtos_task(&led_tsk_ctrl);
 800117c:	480b      	ldr	r0, [pc, #44]	@ (80011ac <enter_view2+0x58>)
 800117e:	f7ff fecb 	bl	8000f18 <suspend_rtos_task>

	/* Operation Mode Configuration */
	psee_PM3C_config();
 8001182:	f00e f871 	bl	800f268 <psee_PM3C_config>

	/* Set Default Bias */
	psee_sensor_set_biases(&genx320_default_biases);
 8001186:	480a      	ldr	r0, [pc, #40]	@ (80011b0 <enter_view2+0x5c>)
 8001188:	f00d fe4d 	bl	800ee26 <psee_sensor_set_biases>

	/* Set the default border for the Activity map */
	psee_set_default_XY_borders(&genx320mp_default_am_borders);
 800118c:	4809      	ldr	r0, [pc, #36]	@ (80011b4 <enter_view2+0x60>)
}
 800118e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	psee_set_default_XY_borders(&genx320mp_default_am_borders);
 8001192:	f00e b9eb 	b.w	800f56c <psee_set_default_XY_borders>
 8001196:	bf00      	nop
 8001198:	20007d28 	.word	0x20007d28
 800119c:	20007d1c 	.word	0x20007d1c
 80011a0:	20007d34 	.word	0x20007d34
 80011a4:	20007d40 	.word	0x20007d40
 80011a8:	20007d58 	.word	0x20007d58
 80011ac:	20007d4c 	.word	0x20007d4c
 80011b0:	20016be1 	.word	0x20016be1
 80011b4:	20007a98 	.word	0x20007a98

080011b8 <enter_PM2_view>:

/**
 * @brief Configuration function for PM2 mode screen.
 */
void enter_PM2_view()
{
 80011b8:	b570      	push	{r4, r5, r6, lr}
	/* Update the transparency for the layer 2 */
	set_layer_transparency(ALPHA_0, LAYER_TWO);
 80011ba:	2101      	movs	r1, #1
 80011bc:	2000      	movs	r0, #0
 80011be:	f000 f8b3 	bl	8001328 <set_layer_transparency>

	/* Resume the RTOS tasks that are required for this Screen */
	resume_rtos_task(&esp_lpw_tsk_ctrl);
 80011c2:	4816      	ldr	r0, [pc, #88]	@ (800121c <enter_PM2_view+0x64>)
 80011c4:	f7ff febb 	bl	8000f3e <resume_rtos_task>

	/* Suspend the RTOS tasks that are not required for this Screen */
	suspend_rtos_task(&event_decoding_tsk_ctrl);
 80011c8:	4815      	ldr	r0, [pc, #84]	@ (8001220 <enter_PM2_view+0x68>)
 80011ca:	f7ff fea5 	bl	8000f18 <suspend_rtos_task>
	suspend_rtos_task(&update_fb_tsk_ctrl);
 80011ce:	4815      	ldr	r0, [pc, #84]	@ (8001224 <enter_PM2_view+0x6c>)
 80011d0:	f7ff fea2 	bl	8000f18 <suspend_rtos_task>
	suspend_rtos_task(&activity_map_tsk_ctrl);
 80011d4:	4814      	ldr	r0, [pc, #80]	@ (8001228 <enter_PM2_view+0x70>)
 80011d6:	f7ff fe9f 	bl	8000f18 <suspend_rtos_task>
	suspend_rtos_task(&statistics_tsk_ctrl);
 80011da:	4814      	ldr	r0, [pc, #80]	@ (800122c <enter_PM2_view+0x74>)
 80011dc:	f7ff fe9c 	bl	8000f18 <suspend_rtos_task>

	/* Set the default border for the Activity map */
	psee_set_default_XY_borders(&genx320mp_default_am_borders);

	/* Flash the RISC-V Firmware */
	if (active_firmware != fw_esp_wakeup) {
 80011e0:	4e13      	ldr	r6, [pc, #76]	@ (8001230 <enter_PM2_view+0x78>)
	suspend_rtos_task(&led_tsk_ctrl);
 80011e2:	4814      	ldr	r0, [pc, #80]	@ (8001234 <enter_PM2_view+0x7c>)
 80011e4:	f7ff fe98 	bl	8000f18 <suspend_rtos_task>
	psee_set_default_XY_borders(&genx320mp_default_am_borders);
 80011e8:	4813      	ldr	r0, [pc, #76]	@ (8001238 <enter_PM2_view+0x80>)
 80011ea:	f00e f9bf 	bl	800f56c <psee_set_default_XY_borders>
	if (active_firmware != fw_esp_wakeup) {
 80011ee:	4c13      	ldr	r4, [pc, #76]	@ (800123c <enter_PM2_view+0x84>)
 80011f0:	6833      	ldr	r3, [r6, #0]
 80011f2:	42a3      	cmp	r3, r4
 80011f4:	d00d      	beq.n	8001212 <enter_PM2_view+0x5a>

	    /* Reset the CPU if it is a new firmware to be flashed */
		psee_reset_firmware(genx320_boot_mode);
 80011f6:	4d12      	ldr	r5, [pc, #72]	@ (8001240 <enter_PM2_view+0x88>)
 80011f8:	7828      	ldrb	r0, [r5, #0]
 80011fa:	f00e f8c2 	bl	800f382 <psee_reset_firmware>

	    /* Flash the RISC-V Firmware */
		FW_StatusTypeDef status = psee_write_firmware(fw_esp_wakeup, fw_esp_wakeup_size);
 80011fe:	4b11      	ldr	r3, [pc, #68]	@ (8001244 <enter_PM2_view+0x8c>)
 8001200:	4620      	mov	r0, r4
 8001202:	6819      	ldr	r1, [r3, #0]
 8001204:	f00e f842 	bl	800f28c <psee_write_firmware>

		/* Update active firmware */
		active_firmware = fw_esp_wakeup;
 8001208:	6034      	str	r4, [r6, #0]

		if(status == fw_OK) {
 800120a:	b910      	cbnz	r0, 8001212 <enter_PM2_view+0x5a>
			/* Start the RISC-V Firmware */
			psee_start_firmware(genx320_boot_mode);
 800120c:	7828      	ldrb	r0, [r5, #0]
 800120e:	f00e f929 	bl	800f464 <psee_start_firmware>
	}

	/* Operation Mode Configuration */
	psee_PM2_config();

}
 8001212:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	psee_PM2_config();
 8001216:	f00e b82f 	b.w	800f278 <psee_PM2_config>
 800121a:	bf00      	nop
 800121c:	20007d58 	.word	0x20007d58
 8001220:	20007d28 	.word	0x20007d28
 8001224:	20007d1c 	.word	0x20007d1c
 8001228:	20007d34 	.word	0x20007d34
 800122c:	20007d40 	.word	0x20007d40
 8001230:	20007d68 	.word	0x20007d68
 8001234:	20007d4c 	.word	0x20007d4c
 8001238:	20007a98 	.word	0x20007a98
 800123c:	080378f8 	.word	0x080378f8
 8001240:	20016be0 	.word	0x20016be0
 8001244:	080378f4 	.word	0x080378f4

08001248 <enter_PM0_view>:

/**
 * @brief Configuration function for PM0 mode screen.
 */
void enter_PM0_view()
{
 8001248:	b510      	push	{r4, lr}

	/* Update the transparency for the layer 2 */
	set_layer_transparency(ALPHA_0, LAYER_TWO);

	/* Suspend the RTOS tasks that are not required for this Screen */
	suspend_rtos_task(&event_decoding_tsk_ctrl);
 800124a:	4c0d      	ldr	r4, [pc, #52]	@ (8001280 <enter_PM0_view+0x38>)
	set_layer_transparency(ALPHA_0, LAYER_TWO);
 800124c:	2101      	movs	r1, #1
 800124e:	2000      	movs	r0, #0
 8001250:	f000 f86a 	bl	8001328 <set_layer_transparency>
	suspend_rtos_task(&event_decoding_tsk_ctrl);
 8001254:	4620      	mov	r0, r4
 8001256:	f7ff fe5f 	bl	8000f18 <suspend_rtos_task>
	suspend_rtos_task(&update_fb_tsk_ctrl);
 800125a:	480a      	ldr	r0, [pc, #40]	@ (8001284 <enter_PM0_view+0x3c>)
 800125c:	f7ff fe5c 	bl	8000f18 <suspend_rtos_task>
	suspend_rtos_task(&activity_map_tsk_ctrl);
 8001260:	4809      	ldr	r0, [pc, #36]	@ (8001288 <enter_PM0_view+0x40>)
 8001262:	f7ff fe59 	bl	8000f18 <suspend_rtos_task>
	suspend_rtos_task(&statistics_tsk_ctrl);
 8001266:	4809      	ldr	r0, [pc, #36]	@ (800128c <enter_PM0_view+0x44>)
 8001268:	f7ff fe56 	bl	8000f18 <suspend_rtos_task>
	suspend_rtos_task(&led_tsk_ctrl);
 800126c:	4808      	ldr	r0, [pc, #32]	@ (8001290 <enter_PM0_view+0x48>)
 800126e:	f7ff fe53 	bl	8000f18 <suspend_rtos_task>
	suspend_rtos_task(&event_decoding_tsk_ctrl);
 8001272:	4620      	mov	r0, r4
 8001274:	f7ff fe50 	bl	8000f18 <suspend_rtos_task>

	/* Update active firmware */
	active_firmware = NULL;
 8001278:	4b06      	ldr	r3, [pc, #24]	@ (8001294 <enter_PM0_view+0x4c>)
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]

}
 800127e:	bd10      	pop	{r4, pc}
 8001280:	20007d28 	.word	0x20007d28
 8001284:	20007d1c 	.word	0x20007d1c
 8001288:	20007d34 	.word	0x20007d34
 800128c:	20007d40 	.word	0x20007d40
 8001290:	20007d4c 	.word	0x20007d4c
 8001294:	20007d68 	.word	0x20007d68

08001298 <enter_LT_view>:

/**
 * @brief Configuration function for LED tracking application screen.
 */
void enter_LT_view()
{
 8001298:	b570      	push	{r4, r5, r6, lr}
	/* Update the transparency for the layer 2 */
	set_layer_transparency(ALPHA_150, LAYER_TWO);
 800129a:	2101      	movs	r1, #1
 800129c:	2096      	movs	r0, #150	@ 0x96
 800129e:	f000 f843 	bl	8001328 <set_layer_transparency>

	/* Resume the RTOS tasks that are required for this Screen */
	resume_rtos_task(&event_decoding_tsk_ctrl);
 80012a2:	4817      	ldr	r0, [pc, #92]	@ (8001300 <enter_LT_view+0x68>)
 80012a4:	f7ff fe4b 	bl	8000f3e <resume_rtos_task>
	resume_rtos_task(&update_fb_tsk_ctrl);
 80012a8:	4816      	ldr	r0, [pc, #88]	@ (8001304 <enter_LT_view+0x6c>)
 80012aa:	f7ff fe48 	bl	8000f3e <resume_rtos_task>
	resume_rtos_task(&led_tsk_ctrl);
 80012ae:	4816      	ldr	r0, [pc, #88]	@ (8001308 <enter_LT_view+0x70>)
 80012b0:	f7ff fe45 	bl	8000f3e <resume_rtos_task>

	/* Suspend the RTOS tasks that are not required for this Screen */
	suspend_rtos_task(&activity_map_tsk_ctrl);
 80012b4:	4815      	ldr	r0, [pc, #84]	@ (800130c <enter_LT_view+0x74>)
 80012b6:	f7ff fe2f 	bl	8000f18 <suspend_rtos_task>

	/* Operation Mode Configuration */
	psee_PM3C_config();

	/* Flash the RISC-V Firmware */
	if (active_firmware != fw_led_tracking) {
 80012ba:	4e15      	ldr	r6, [pc, #84]	@ (8001310 <enter_LT_view+0x78>)
	suspend_rtos_task(&statistics_tsk_ctrl);
 80012bc:	4815      	ldr	r0, [pc, #84]	@ (8001314 <enter_LT_view+0x7c>)
 80012be:	f7ff fe2b 	bl	8000f18 <suspend_rtos_task>
	suspend_rtos_task(&esp_lpw_tsk_ctrl);
 80012c2:	4815      	ldr	r0, [pc, #84]	@ (8001318 <enter_LT_view+0x80>)
 80012c4:	f7ff fe28 	bl	8000f18 <suspend_rtos_task>
	if (active_firmware != fw_led_tracking) {
 80012c8:	4c14      	ldr	r4, [pc, #80]	@ (800131c <enter_LT_view+0x84>)
	psee_disable_afk();
 80012ca:	f00e f9f3 	bl	800f6b4 <psee_disable_afk>
	psee_PM3C_config();
 80012ce:	f00d ffcb 	bl	800f268 <psee_PM3C_config>
	if (active_firmware != fw_led_tracking) {
 80012d2:	6833      	ldr	r3, [r6, #0]
 80012d4:	42a3      	cmp	r3, r4
 80012d6:	d00d      	beq.n	80012f4 <enter_LT_view+0x5c>

	    /* Reset the CPU if it is a new firmware to be flashed */
		psee_reset_firmware(genx320_boot_mode);
 80012d8:	4d11      	ldr	r5, [pc, #68]	@ (8001320 <enter_LT_view+0x88>)
 80012da:	7828      	ldrb	r0, [r5, #0]
 80012dc:	f00e f851 	bl	800f382 <psee_reset_firmware>

	    /* Flash the RISC-V Firmware */
		FW_StatusTypeDef status = psee_write_firmware(fw_led_tracking, fw_led_tracking_size);
 80012e0:	4b10      	ldr	r3, [pc, #64]	@ (8001324 <enter_LT_view+0x8c>)
 80012e2:	4620      	mov	r0, r4
 80012e4:	6819      	ldr	r1, [r3, #0]
 80012e6:	f00d ffd1 	bl	800f28c <psee_write_firmware>

		/* Update active firmware */
		active_firmware = fw_led_tracking;
 80012ea:	6034      	str	r4, [r6, #0]

		if(status == fw_OK) {
 80012ec:	b910      	cbnz	r0, 80012f4 <enter_LT_view+0x5c>
			/* Start the RISC-V Firmware */
			psee_start_firmware(genx320_boot_mode);
 80012ee:	7828      	ldrb	r0, [r5, #0]
 80012f0:	f00e f8b8 	bl	800f464 <psee_start_firmware>
		}
	}

	/* Change Bias */
	psee_sensor_set_bias(HPF, 127);
 80012f4:	217f      	movs	r1, #127	@ 0x7f
 80012f6:	2003      	movs	r0, #3

}
 80012f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	psee_sensor_set_bias(HPF, 127);
 80012fc:	f00d be1a 	b.w	800ef34 <psee_sensor_set_bias>
 8001300:	20007d28 	.word	0x20007d28
 8001304:	20007d1c 	.word	0x20007d1c
 8001308:	20007d4c 	.word	0x20007d4c
 800130c:	20007d34 	.word	0x20007d34
 8001310:	20007d68 	.word	0x20007d68
 8001314:	20007d40 	.word	0x20007d40
 8001318:	20007d58 	.word	0x20007d58
 800131c:	0802dbcc 	.word	0x0802dbcc
 8001320:	20016be0 	.word	0x20016be0
 8001324:	0802dbc8 	.word	0x0802dbc8

08001328 <set_layer_transparency>:
/**
 * @brief Function to set transparency for the specified layer.
 * @param Alpha New transparency value
 * @param LayerIdx LTDC Layer index
 */
HAL_StatusTypeDef set_layer_transparency(uint32_t Alpha, uint32_t LayerIdx) {
 8001328:	460a      	mov	r2, r1

	HAL_StatusTypeDef status;
	status = HAL_LTDC_SetAlpha(&hltdc, Alpha, LayerIdx);
 800132a:	4601      	mov	r1, r0
 800132c:	4801      	ldr	r0, [pc, #4]	@ (8001334 <set_layer_transparency+0xc>)
 800132e:	f00b b9d5 	b.w	800c6dc <HAL_LTDC_SetAlpha>
 8001332:	bf00      	nop
 8001334:	20008420 	.word	0x20008420

08001338 <enable_lcd_layer_event>:
 * @param hltdc Pointer to a LTDC_HandleTypeDef structure
 * @param layer LTDC Layer index
 * @param address Pointer to the address of the frame buffer
 */
void enable_lcd_layer_event(LTDC_HandleTypeDef *hltdc, unsigned int layer, void *address)
{
 8001338:	b570      	push	{r4, r5, r6, lr}
 800133a:	b08e      	sub	sp, #56	@ 0x38
 800133c:	460c      	mov	r4, r1
 800133e:	4605      	mov	r5, r0
 8001340:	4616      	mov	r6, r2
	LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001342:	2100      	movs	r1, #0
 8001344:	222c      	movs	r2, #44	@ 0x2c
 8001346:	a803      	add	r0, sp, #12
 8001348:	f02a f8ea 	bl	802b520 <memset>
	pLayerCfg.WindowX1 = 480;
 800134c:	22a0      	movs	r2, #160	@ 0xa0
 800134e:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001352:	f44f 60c0 	mov.w	r0, #1536	@ 0x600
	HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, layer);
 8001356:	a901      	add	r1, sp, #4
	pLayerCfg.FBStartAdress = (uint32_t)address;
 8001358:	960a      	str	r6, [sp, #40]	@ 0x28
	pLayerCfg.WindowX1 = 480;
 800135a:	e9cd 2301 	strd	r2, r3, [sp, #4]
	pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_L8; //LTDC_PIXEL_FORMAT_RGB565;
 800135e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8001362:	2205      	movs	r2, #5
 8001364:	e9cd 3204 	strd	r3, r2, [sp, #16]
	pLayerCfg.Alpha = 255;
 8001368:	22ff      	movs	r2, #255	@ 0xff
 800136a:	9206      	str	r2, [sp, #24]
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800136c:	2207      	movs	r2, #7
 800136e:	e9cd 0208 	strd	r0, r2, [sp, #32]
	pLayerCfg.ImageWidth = 320;
 8001372:	f44f 72a0 	mov.w	r2, #320	@ 0x140
	HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, layer);
 8001376:	4628      	mov	r0, r5
	pLayerCfg.ImageHeight = 272;
 8001378:	e9cd 230b 	strd	r2, r3, [sp, #44]	@ 0x2c
	HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, layer);
 800137c:	4622      	mov	r2, r4
 800137e:	f00b f933 	bl	800c5e8 <HAL_LTDC_ConfigLayer>
	HAL_LTDC_ConfigCLUT(hltdc, p_lut, lut_entries, layer);
 8001382:	4623      	mov	r3, r4
 8001384:	2203      	movs	r2, #3
 8001386:	4907      	ldr	r1, [pc, #28]	@ (80013a4 <enable_lcd_layer_event+0x6c>)
 8001388:	4628      	mov	r0, r5
 800138a:	f00b f95a 	bl	800c642 <HAL_LTDC_ConfigCLUT>
	HAL_LTDC_EnableCLUT(hltdc, layer);
 800138e:	4621      	mov	r1, r4
 8001390:	4628      	mov	r0, r5
 8001392:	f00b f98c 	bl	800c6ae <HAL_LTDC_EnableCLUT>
	enable_lcd_layer(hltdc, layer, address, clut_event,  sizeof(clut_event)/sizeof(uint32_t));
	set_layer_transparency(ALPHA_150, layer);
 8001396:	4621      	mov	r1, r4
 8001398:	2096      	movs	r0, #150	@ 0x96
}
 800139a:	b00e      	add	sp, #56	@ 0x38
 800139c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	set_layer_transparency(ALPHA_150, layer);
 80013a0:	f7ff bfc2 	b.w	8001328 <set_layer_transparency>
 80013a4:	0802d108 	.word	0x0802d108

080013a8 <get_lock_sem_count>:
/**
 * @brief Function to get the Semaphore count.
 * @param xDrvI2cHdl I2c driver handle
 * @retval Semaphore count
 */
UBaseType_t get_lock_sem_count(DrvI2cHandle_t xDrvI2cHdl) {
 80013a8:	b508      	push	{r3, lr}
	UBaseType_t count;

	struct xDrvI2c *pxDrvI2c = (struct xDrvI2c *) xDrvI2cHdl;
	assert(pxDrvI2c);
 80013aa:	b928      	cbnz	r0, 80013b8 <get_lock_sem_count+0x10>
 80013ac:	4b05      	ldr	r3, [pc, #20]	@ (80013c4 <get_lock_sem_count+0x1c>)
 80013ae:	2167      	movs	r1, #103	@ 0x67
 80013b0:	4a05      	ldr	r2, [pc, #20]	@ (80013c8 <get_lock_sem_count+0x20>)
 80013b2:	4806      	ldr	r0, [pc, #24]	@ (80013cc <get_lock_sem_count+0x24>)
 80013b4:	f029 f902 	bl	802a5bc <__assert_func>

	/* Get the semaphore count of the lock */
	count = uxSemaphoreGetCount(pxDrvI2c->xMutexLockHdl);
 80013b8:	6840      	ldr	r0, [r0, #4]

	return count;
}
 80013ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	count = uxSemaphoreGetCount(pxDrvI2c->xMutexLockHdl);
 80013be:	f00f bc01 	b.w	8010bc4 <uxQueueMessagesWaiting>
 80013c2:	bf00      	nop
 80013c4:	0802d0c8 	.word	0x0802d0c8
 80013c8:	0802d0f4 	.word	0x0802d0f4
 80013cc:	0802d0d1 	.word	0x0802d0d1

080013d0 <pc_interpolate>:
 * @param x2 Maximum event rate in Mevt's
 * @param y1 Minimum power consumption in mW
 * @param y2 Maximum power consumption in mW
 * @retval Interpolated power consumption in mW
 */
uint16_t pc_interpolate(uint16_t input, uint16_t x1, uint16_t x2, uint16_t y1, uint16_t y2) {
 80013d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80013d4:	4680      	mov	r8, r0

	/* Perform linear interpolation */
	double slope = (double)(y2 - y1) / (x2 - x1);
 80013d6:	f8bd 0020 	ldrh.w	r0, [sp, #32]
uint16_t pc_interpolate(uint16_t input, uint16_t x1, uint16_t x2, uint16_t y1, uint16_t y2) {
 80013da:	4691      	mov	r9, r2
 80013dc:	460d      	mov	r5, r1
	double slope = (double)(y2 - y1) / (x2 - x1);
 80013de:	1ac0      	subs	r0, r0, r3
uint16_t pc_interpolate(uint16_t input, uint16_t x1, uint16_t x2, uint16_t y1, uint16_t y2) {
 80013e0:	461c      	mov	r4, r3
	double slope = (double)(y2 - y1) / (x2 - x1);
 80013e2:	f7ff f8bf 	bl	8000564 <__aeabi_i2d>
 80013e6:	4606      	mov	r6, r0
 80013e8:	460f      	mov	r7, r1
 80013ea:	eba9 0005 	sub.w	r0, r9, r5
 80013ee:	f7ff f8b9 	bl	8000564 <__aeabi_i2d>
 80013f2:	4602      	mov	r2, r0
 80013f4:	460b      	mov	r3, r1
 80013f6:	4630      	mov	r0, r6
 80013f8:	4639      	mov	r1, r7
 80013fa:	f7ff fa47 	bl	800088c <__aeabi_ddiv>
 80013fe:	4606      	mov	r6, r0
 8001400:	460f      	mov	r7, r1
	uint16_t output = (uint16_t)(y1 + (slope * (input - x1)));
 8001402:	eba8 0005 	sub.w	r0, r8, r5
 8001406:	f7ff f8ad 	bl	8000564 <__aeabi_i2d>
 800140a:	4602      	mov	r2, r0
 800140c:	460b      	mov	r3, r1
 800140e:	4630      	mov	r0, r6
 8001410:	4639      	mov	r1, r7
 8001412:	f7ff f911 	bl	8000638 <__aeabi_dmul>
 8001416:	4606      	mov	r6, r0
 8001418:	460f      	mov	r7, r1
 800141a:	4620      	mov	r0, r4
 800141c:	f7ff f8a2 	bl	8000564 <__aeabi_i2d>
 8001420:	4602      	mov	r2, r0
 8001422:	460b      	mov	r3, r1
 8001424:	4630      	mov	r0, r6
 8001426:	4639      	mov	r1, r7
 8001428:	f7fe ff50 	bl	80002cc <__adddf3>
 800142c:	f7ff fbdc 	bl	8000be8 <__aeabi_d2uiz>

	return output;

}
 8001430:	b280      	uxth	r0, r0
 8001432:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08001436 <color_interpolate>:
 * @param x2 Maximum event count
 * @param y1 RGB code for no activity
 * @param y2 RGB code for maximum activity
 * @retval Interpolated RGB code
 */
Display_Color color_interpolate(uint16_t input, uint16_t x1, uint16_t x2, const Display_Color color1, const Display_Color color2) {
 8001436:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800143a:	4607      	mov	r7, r0
 800143c:	460e      	mov	r6, r1
 800143e:	b086      	sub	sp, #24
 8001440:	f3c3 2a07 	ubfx	sl, r3, #8, #8

	Display_Color result;
	double slope_red = (double)(color2.red - color1.red) / (x2 - x1);
 8001444:	1a50      	subs	r0, r2, r1
 8001446:	b2dd      	uxtb	r5, r3
Display_Color color_interpolate(uint16_t input, uint16_t x1, uint16_t x2, const Display_Color color1, const Display_Color color2) {
 8001448:	f3c3 4407 	ubfx	r4, r3, #16, #8
	double slope_red = (double)(color2.red - color1.red) / (x2 - x1);
 800144c:	f7ff f88a 	bl	8000564 <__aeabi_i2d>
 8001450:	4680      	mov	r8, r0
	double slope_green = (double)(color2.green - color1.green) / (x2 - x1);
	double slope_blue = (double)(color2.blue - color1.blue) / (x2 - x1);

	result.red = (uint16_t)(color1.red + (slope_red * (input - x1)));
 8001452:	1bb8      	subs	r0, r7, r6
	double slope_red = (double)(color2.red - color1.red) / (x2 - x1);
 8001454:	4689      	mov	r9, r1
	double slope_green = (double)(color2.green - color1.green) / (x2 - x1);
 8001456:	fa5f fa8a 	uxtb.w	sl, sl
	result.red = (uint16_t)(color1.red + (slope_red * (input - x1)));
 800145a:	f7ff f883 	bl	8000564 <__aeabi_i2d>
 800145e:	4606      	mov	r6, r0
	double slope_green = (double)(color2.green - color1.green) / (x2 - x1);
 8001460:	f89d 0039 	ldrb.w	r0, [sp, #57]	@ 0x39
	result.red = (uint16_t)(color1.red + (slope_red * (input - x1)));
 8001464:	460f      	mov	r7, r1
	double slope_blue = (double)(color2.blue - color1.blue) / (x2 - x1);
 8001466:	b2e4      	uxtb	r4, r4
	double slope_green = (double)(color2.green - color1.green) / (x2 - x1);
 8001468:	eba0 000a 	sub.w	r0, r0, sl
 800146c:	f7ff f87a 	bl	8000564 <__aeabi_i2d>
 8001470:	4642      	mov	r2, r8
 8001472:	464b      	mov	r3, r9
 8001474:	f7ff fa0a 	bl	800088c <__aeabi_ddiv>
	result.green = (uint16_t)(color1.green + (slope_green * (input - x1)));
 8001478:	4632      	mov	r2, r6
 800147a:	463b      	mov	r3, r7
 800147c:	f7ff f8dc 	bl	8000638 <__aeabi_dmul>
 8001480:	e9cd 0100 	strd	r0, r1, [sp]
 8001484:	4650      	mov	r0, sl
 8001486:	f7ff f86d 	bl	8000564 <__aeabi_i2d>
 800148a:	4602      	mov	r2, r0
 800148c:	460b      	mov	r3, r1
 800148e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8001492:	f7fe ff1b 	bl	80002cc <__adddf3>
 8001496:	f7ff fba7 	bl	8000be8 <__aeabi_d2uiz>
 800149a:	fa5f fa80 	uxtb.w	sl, r0
	double slope_blue = (double)(color2.blue - color1.blue) / (x2 - x1);
 800149e:	f89d 003a 	ldrb.w	r0, [sp, #58]	@ 0x3a
 80014a2:	1b00      	subs	r0, r0, r4
 80014a4:	f7ff f85e 	bl	8000564 <__aeabi_i2d>
 80014a8:	4642      	mov	r2, r8
 80014aa:	464b      	mov	r3, r9
 80014ac:	f7ff f9ee 	bl	800088c <__aeabi_ddiv>
	result.blue = (uint16_t)(color1.blue + (slope_blue * (input - x1)));
 80014b0:	4632      	mov	r2, r6
 80014b2:	463b      	mov	r3, r7
 80014b4:	f7ff f8c0 	bl	8000638 <__aeabi_dmul>
 80014b8:	e9cd 0100 	strd	r0, r1, [sp]
 80014bc:	4620      	mov	r0, r4
 80014be:	f7ff f851 	bl	8000564 <__aeabi_i2d>
 80014c2:	4602      	mov	r2, r0
 80014c4:	460b      	mov	r3, r1
 80014c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80014ca:	f7fe feff 	bl	80002cc <__adddf3>
 80014ce:	f7ff fb8b 	bl	8000be8 <__aeabi_d2uiz>
 80014d2:	b2c4      	uxtb	r4, r0
	double slope_red = (double)(color2.red - color1.red) / (x2 - x1);
 80014d4:	f89d 0038 	ldrb.w	r0, [sp, #56]	@ 0x38
 80014d8:	1b40      	subs	r0, r0, r5
 80014da:	f7ff f843 	bl	8000564 <__aeabi_i2d>
 80014de:	4642      	mov	r2, r8
 80014e0:	464b      	mov	r3, r9
 80014e2:	f7ff f9d3 	bl	800088c <__aeabi_ddiv>
	result.red = (uint16_t)(color1.red + (slope_red * (input - x1)));
 80014e6:	4632      	mov	r2, r6
 80014e8:	463b      	mov	r3, r7
 80014ea:	f7ff f8a5 	bl	8000638 <__aeabi_dmul>
 80014ee:	4606      	mov	r6, r0
 80014f0:	460f      	mov	r7, r1
 80014f2:	4628      	mov	r0, r5
 80014f4:	f7ff f836 	bl	8000564 <__aeabi_i2d>
 80014f8:	4602      	mov	r2, r0
 80014fa:	460b      	mov	r3, r1
 80014fc:	4630      	mov	r0, r6
 80014fe:	4639      	mov	r1, r7
 8001500:	f7fe fee4 	bl	80002cc <__adddf3>
 8001504:	f7ff fb70 	bl	8000be8 <__aeabi_d2uiz>

	return result;
 8001508:	2300      	movs	r3, #0
 800150a:	b2c0      	uxtb	r0, r0
 800150c:	f360 0307 	bfi	r3, r0, #0, #8
 8001510:	f36a 230f 	bfi	r3, sl, #8, #8
 8001514:	f364 4317 	bfi	r3, r4, #16, #8

}
 8001518:	4618      	mov	r0, r3
 800151a:	b006      	add	sp, #24
 800151c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08001520 <pvStaticAllocate>:
static void* pvStaticAllocate(size_t ulSize)
{
	static size_t ulAllocated = 0;

    /* Align requested size on long boundaries. */
    unsigned ulAlign = (unsigned) ALIGN_CEIL(ulSize, long);
 8001520:	1cc3      	adds	r3, r0, #3

    /* Check the requested size do not exceed max size. */
    size_t ulRequested = ulAllocated + ulAlign;
 8001522:	4906      	ldr	r1, [pc, #24]	@ (800153c <pvStaticAllocate+0x1c>)
    unsigned ulAlign = (unsigned) ALIGN_CEIL(ulSize, long);
 8001524:	f023 0303 	bic.w	r3, r3, #3
    size_t ulRequested = ulAllocated + ulAlign;
 8001528:	680a      	ldr	r2, [r1, #0]
 800152a:	4413      	add	r3, r2
    if (STATIC_HEAP_SIZE < ulRequested)
 800152c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
        return NULL;

    /* Return the current buffer position and update the position. */
    void *pVoid = (void *) (pxStaticHeap + ulAllocated);
 8001530:	bf9d      	ittte	ls
 8001532:	4803      	ldrls	r0, [pc, #12]	@ (8001540 <pvStaticAllocate+0x20>)
    ulAllocated = ulRequested;
 8001534:	600b      	strls	r3, [r1, #0]
    void *pVoid = (void *) (pxStaticHeap + ulAllocated);
 8001536:	1880      	addls	r0, r0, r2
        return NULL;
 8001538:	2000      	movhi	r0, #0
    return pVoid;
}
 800153a:	4770      	bx	lr
 800153c:	20007d6c 	.word	0x20007d6c
 8001540:	20007d80 	.word	0x20007d80

08001544 <MX_DMA_Init>:
  */
static void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001544:	4b1e      	ldr	r3, [pc, #120]	@ (80015c0 <MX_DMA_Init+0x7c>)
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_LOW;
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_INC4;
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_INC4;
 8001546:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
  __HAL_RCC_DMA2_CLK_ENABLE();
 800154a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800154c:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
{
 8001550:	b513      	push	{r0, r1, r4, lr}
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001552:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
 8001554:	2400      	movs	r4, #0
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001556:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001558:	f44f 6280 	mov.w	r2, #1024	@ 0x400
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 800155c:	4819      	ldr	r0, [pc, #100]	@ (80015c4 <MX_DMA_Init+0x80>)
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800155e:	2104      	movs	r1, #4
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001560:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_LOW;
 8001564:	6204      	str	r4, [r0, #32]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001566:	9301      	str	r3, [sp, #4]
 8001568:	9b01      	ldr	r3, [sp, #4]
  hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
 800156a:	4b17      	ldr	r3, [pc, #92]	@ (80015c8 <MX_DMA_Init+0x84>)
 800156c:	e9c0 3400 	strd	r3, r4, [r0]
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8001570:	2380      	movs	r3, #128	@ 0x80
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_DISABLE;
 8001572:	e9c0 3402 	strd	r3, r4, [r0, #8]
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001576:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800157a:	e9c0 2304 	strd	r2, r3, [r0, #16]
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800157e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 8001582:	e9c0 3406 	strd	r3, r4, [r0, #24]
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001586:	2303      	movs	r3, #3
 8001588:	e9c0 1309 	strd	r1, r3, [r0, #36]	@ 0x24
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_INC4;
 800158c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001590:	e9c0 c30b 	strd	ip, r3, [r0, #44]	@ 0x2c
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 8001594:	f008 fbea 	bl	8009d6c <HAL_DMA_Init>
    Error_Handler( );
  }

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001598:	4622      	mov	r2, r4
 800159a:	2105      	movs	r1, #5
 800159c:	2038      	movs	r0, #56	@ 0x38
 800159e:	f008 f989 	bl	80098b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80015a2:	2038      	movs	r0, #56	@ 0x38
 80015a4:	f008 f9b8 	bl	8009918 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 80015a8:	4622      	mov	r2, r4
 80015aa:	2105      	movs	r1, #5
 80015ac:	2039      	movs	r0, #57	@ 0x39
 80015ae:	f008 f981 	bl	80098b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80015b2:	2039      	movs	r0, #57	@ 0x39

}
 80015b4:	b002      	add	sp, #8
 80015b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80015ba:	f008 b9ad 	b.w	8009918 <HAL_NVIC_EnableIRQ>
 80015be:	bf00      	nop
 80015c0:	40023800 	.word	0x40023800
 80015c4:	20008254 	.word	0x20008254
 80015c8:	40026410 	.word	0x40026410

080015cc <ESP_LPW_Task>:
/* USER CODE END Header_ESP_LPW_Task */
void ESP_LPW_Task(void *argument)
{
  /* USER CODE BEGIN 5 */

	psee_esp_lpw_task();
 80015cc:	f001 bf4a 	b.w	8003464 <psee_esp_lpw_task>

080015d0 <Task_Update_Fb>:
/* USER CODE END Header_Task_Update_Fb */
void Task_Update_Fb(void *argument)
{
  /* USER CODE BEGIN Task_Update_Fb */
	const args_update_fb_t *args = (args_update_fb_t *) argument;
	task_update_fb(args);
 80015d0:	f001 be3c 	b.w	800324c <task_update_fb>

080015d4 <Event_Decoding_Task>:
*/
/* USER CODE END Header_Event_Decoding_Task */
void Event_Decoding_Task(void *argument)
{
  /* USER CODE BEGIN Event_Decoding_Task */
	task_evt_decoder((args_evt_decoder_t *) argument);
 80015d4:	f001 bdc2 	b.w	800315c <task_evt_decoder>

080015d8 <Activity_Map_Task>:
/* USER CODE END Header_Activity_Map_Task */
void Activity_Map_Task(void *argument)
{
  /* USER CODE BEGIN Activity_Map_Task */

	psee_activity_map_task();
 80015d8:	f001 bfb6 	b.w	8003548 <psee_activity_map_task>

080015dc <Statistics_Task>:
/* USER CODE END Header_Statistics_Task */
void Statistics_Task(void *argument)
{
  /* USER CODE BEGIN Statistics_Task */

	psee_statistics_task();
 80015dc:	f001 bf68 	b.w	80034b0 <psee_statistics_task>

080015e0 <Led_Tracking_Task>:
/* USER CODE END Header_Led_Tracking_Task */
void Led_Tracking_Task(void *argument)
{
  /* USER CODE BEGIN Led_Tracking_Task */

	psee_led_tracking_task();
 80015e0:	f001 bfc8 	b.w	8003574 <psee_led_tracking_task>

080015e4 <HAL_DMA_MasterCpltCallback>:
{
 80015e4:	b508      	push	{r3, lr}
	assert(hdma == &hdma_memtomem_dma2_stream0);
 80015e6:	4b07      	ldr	r3, [pc, #28]	@ (8001604 <HAL_DMA_MasterCpltCallback+0x20>)
 80015e8:	4283      	cmp	r3, r0
 80015ea:	d005      	beq.n	80015f8 <HAL_DMA_MasterCpltCallback+0x14>
 80015ec:	4b06      	ldr	r3, [pc, #24]	@ (8001608 <HAL_DMA_MasterCpltCallback+0x24>)
 80015ee:	21fa      	movs	r1, #250	@ 0xfa
 80015f0:	4a06      	ldr	r2, [pc, #24]	@ (800160c <HAL_DMA_MasterCpltCallback+0x28>)
 80015f2:	4807      	ldr	r0, [pc, #28]	@ (8001610 <HAL_DMA_MasterCpltCallback+0x2c>)
 80015f4:	f028 ffe2 	bl	802a5bc <__assert_func>
	ucDrvDmaCallback(drv_dma);
 80015f8:	4b06      	ldr	r3, [pc, #24]	@ (8001614 <HAL_DMA_MasterCpltCallback+0x30>)
 80015fa:	6818      	ldr	r0, [r3, #0]
}
 80015fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	ucDrvDmaCallback(drv_dma);
 8001600:	f007 bd2c 	b.w	800905c <ucDrvDmaCallback>
 8001604:	20008254 	.word	0x20008254
 8001608:	0802d114 	.word	0x0802d114
 800160c:	0802d1ee 	.word	0x0802d1ee
 8001610:	0802d138 	.word	0x0802d138
 8001614:	20008184 	.word	0x20008184

08001618 <HAL_I2C_MasterTxCpltCallback>:
{
 8001618:	b508      	push	{r3, lr}
	assert(hi2c == &hi2c1);
 800161a:	4b07      	ldr	r3, [pc, #28]	@ (8001638 <HAL_I2C_MasterTxCpltCallback+0x20>)
 800161c:	4283      	cmp	r3, r0
 800161e:	d005      	beq.n	800162c <HAL_I2C_MasterTxCpltCallback+0x14>
 8001620:	4b06      	ldr	r3, [pc, #24]	@ (800163c <HAL_I2C_MasterTxCpltCallback+0x24>)
 8001622:	21e8      	movs	r1, #232	@ 0xe8
 8001624:	4a06      	ldr	r2, [pc, #24]	@ (8001640 <HAL_I2C_MasterTxCpltCallback+0x28>)
 8001626:	4807      	ldr	r0, [pc, #28]	@ (8001644 <HAL_I2C_MasterTxCpltCallback+0x2c>)
 8001628:	f028 ffc8 	bl	802a5bc <__assert_func>
	ucDrvI2cCallback(drv_i2c);
 800162c:	4b06      	ldr	r3, [pc, #24]	@ (8001648 <HAL_I2C_MasterTxCpltCallback+0x30>)
 800162e:	6818      	ldr	r0, [r3, #0]
}
 8001630:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	ucDrvI2cCallback(drv_i2c);
 8001634:	f007 be44 	b.w	80092c0 <ucDrvI2cCallback>
 8001638:	2000851c 	.word	0x2000851c
 800163c:	0802d197 	.word	0x0802d197
 8001640:	0802d226 	.word	0x0802d226
 8001644:	0802d138 	.word	0x0802d138
 8001648:	20008188 	.word	0x20008188

0800164c <HAL_I2C_MasterRxCpltCallback>:
{
 800164c:	b508      	push	{r3, lr}
	assert(hi2c == &hi2c1);
 800164e:	4b07      	ldr	r3, [pc, #28]	@ (800166c <HAL_I2C_MasterRxCpltCallback+0x20>)
 8001650:	4283      	cmp	r3, r0
 8001652:	d005      	beq.n	8001660 <HAL_I2C_MasterRxCpltCallback+0x14>
 8001654:	4b06      	ldr	r3, [pc, #24]	@ (8001670 <HAL_I2C_MasterRxCpltCallback+0x24>)
 8001656:	21f1      	movs	r1, #241	@ 0xf1
 8001658:	4a06      	ldr	r2, [pc, #24]	@ (8001674 <HAL_I2C_MasterRxCpltCallback+0x28>)
 800165a:	4807      	ldr	r0, [pc, #28]	@ (8001678 <HAL_I2C_MasterRxCpltCallback+0x2c>)
 800165c:	f028 ffae 	bl	802a5bc <__assert_func>
	ucDrvI2cCallback(drv_i2c);
 8001660:	4b06      	ldr	r3, [pc, #24]	@ (800167c <HAL_I2C_MasterRxCpltCallback+0x30>)
 8001662:	6818      	ldr	r0, [r3, #0]
}
 8001664:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	ucDrvI2cCallback(drv_i2c);
 8001668:	f007 be2a 	b.w	80092c0 <ucDrvI2cCallback>
 800166c:	2000851c 	.word	0x2000851c
 8001670:	0802d197 	.word	0x0802d197
 8001674:	0802d209 	.word	0x0802d209
 8001678:	0802d138 	.word	0x0802d138
 800167c:	20008188 	.word	0x20008188

08001680 <__io_putchar>:
{
 8001680:	b507      	push	{r0, r1, r2, lr}
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001682:	f04f 33ff 	mov.w	r3, #4294967295
{
 8001686:	9001      	str	r0, [sp, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001688:	2201      	movs	r2, #1
 800168a:	a901      	add	r1, sp, #4
 800168c:	4803      	ldr	r0, [pc, #12]	@ (800169c <__io_putchar+0x1c>)
 800168e:	f00d fa6a 	bl	800eb66 <HAL_UART_Transmit>
}
 8001692:	9801      	ldr	r0, [sp, #4]
 8001694:	b003      	add	sp, #12
 8001696:	f85d fb04 	ldr.w	pc, [sp], #4
 800169a:	bf00      	nop
 800169c:	200082b4 	.word	0x200082b4

080016a0 <HAL_LTDC_ReloadEventCallback>:
	update_fb_callback();
 80016a0:	f001 bec0 	b.w	8003424 <update_fb_callback>

080016a4 <reset_buffers>:
	memset((void *)GUI_BUF_ADD_1 , 0x0 , 0x3fc00);
 80016a4:	f44f 327f 	mov.w	r2, #261120	@ 0x3fc00
 80016a8:	2100      	movs	r1, #0
 80016aa:	f04f 4040 	mov.w	r0, #3221225472	@ 0xc0000000
void reset_buffers() {
 80016ae:	b508      	push	{r3, lr}
	memset((void *)GUI_BUF_ADD_1 , 0x0 , 0x3fc00);
 80016b0:	f029 ff36 	bl	802b520 <memset>
	memset((void *)GUI_BUF_ADD_2 , 0x0 , 0xff000);
 80016b4:	f44f 227f 	mov.w	r2, #1044480	@ 0xff000
 80016b8:	2100      	movs	r1, #0
 80016ba:	4802      	ldr	r0, [pc, #8]	@ (80016c4 <reset_buffers+0x20>)
}
 80016bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	memset((void *)GUI_BUF_ADD_2 , 0x0 , 0xff000);
 80016c0:	f029 bf2e 	b.w	802b520 <memset>
 80016c4:	c003fc00 	.word	0xc003fc00

080016c8 <ULP_standby_sequence>:
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80016c8:	2200      	movs	r2, #0
 80016ca:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80016ce:	481a      	ldr	r0, [pc, #104]	@ (8001738 <ULP_standby_sequence+0x70>)
void ULP_standby_sequence() {
 80016d0:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80016d2:	f009 fd17 	bl	800b104 <HAL_GPIO_WritePin>
	psee_sleep_us_imp(tclk_stop);
 80016d6:	2064      	movs	r0, #100	@ 0x64
 80016d8:	f00d fb9e 	bl	800ee18 <psee_sleep_us_imp>
	HAL_TIM_PWM_Stop(&htim1,TIM_CHANNEL_1);
 80016dc:	2100      	movs	r1, #0
 80016de:	4817      	ldr	r0, [pc, #92]	@ (800173c <ULP_standby_sequence+0x74>)
 80016e0:	f00c fe64 	bl	800e3ac <HAL_TIM_PWM_Stop>
	psee_sleep_us_imp(Tana_stop);
 80016e4:	2064      	movs	r0, #100	@ 0x64
 80016e6:	f00d fb97 	bl	800ee18 <psee_sleep_us_imp>
	if(HAL_GPIO_ReadPin(GPIOH, GPIO_PIN_6) != GPIO_PIN_SET) {
 80016ea:	2140      	movs	r1, #64	@ 0x40
 80016ec:	4814      	ldr	r0, [pc, #80]	@ (8001740 <ULP_standby_sequence+0x78>)
 80016ee:	f009 fd03 	bl	800b0f8 <HAL_GPIO_ReadPin>
 80016f2:	2801      	cmp	r0, #1
 80016f4:	d004      	beq.n	8001700 <ULP_standby_sequence+0x38>
		HAL_GPIO_WritePin(GPIOH, GPIO_PIN_6, GPIO_PIN_SET);
 80016f6:	2201      	movs	r2, #1
 80016f8:	2140      	movs	r1, #64	@ 0x40
 80016fa:	4811      	ldr	r0, [pc, #68]	@ (8001740 <ULP_standby_sequence+0x78>)
 80016fc:	f009 fd02 	bl	800b104 <HAL_GPIO_WritePin>
		psee_sleep_us_imp(TIO_stop);
 8001700:	2064      	movs	r0, #100	@ 0x64
 8001702:	f00d fb89 	bl	800ee18 <psee_sleep_us_imp>
	HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_RESET);
 8001706:	2200      	movs	r2, #0
 8001708:	2101      	movs	r1, #1
 800170a:	480e      	ldr	r0, [pc, #56]	@ (8001744 <ULP_standby_sequence+0x7c>)
 800170c:	f009 fcfa 	bl	800b104 <HAL_GPIO_WritePin>
	psee_sleep_us_imp(Tdig_stop);
 8001710:	2064      	movs	r0, #100	@ 0x64
 8001712:	f00d fb81 	bl	800ee18 <psee_sleep_us_imp>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, GPIO_PIN_RESET);
 8001716:	2200      	movs	r2, #0
 8001718:	2180      	movs	r1, #128	@ 0x80
 800171a:	480b      	ldr	r0, [pc, #44]	@ (8001748 <ULP_standby_sequence+0x80>)
 800171c:	f009 fcf2 	bl	800b104 <HAL_GPIO_WritePin>
	psee_sleep_us_imp(Tulp_set);
 8001720:	2064      	movs	r0, #100	@ 0x64
 8001722:	f00d fb79 	bl	800ee18 <psee_sleep_us_imp>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8, GPIO_PIN_RESET);
 8001726:	2200      	movs	r2, #0
 8001728:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800172c:	4807      	ldr	r0, [pc, #28]	@ (800174c <ULP_standby_sequence+0x84>)
}
 800172e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8, GPIO_PIN_RESET);
 8001732:	f009 bce7 	b.w	800b104 <HAL_GPIO_WritePin>
 8001736:	bf00      	nop
 8001738:	40020400 	.word	0x40020400
 800173c:	20008388 	.word	0x20008388
 8001740:	40021c00 	.word	0x40021c00
 8001744:	40022000 	.word	0x40022000
 8001748:	40021800 	.word	0x40021800
 800174c:	40021400 	.word	0x40021400

08001750 <ULP_wakeup_sequence>:
void ULP_wakeup_sequence() {
 8001750:	b510      	push	{r4, lr}
	const struct issd *current_issd = psee_open_evt();
 8001752:	f00d fe3d 	bl	800f3d0 <psee_open_evt>
 8001756:	4604      	mov	r4, r0
	psee_sensor_set_biases(&genx320_default_biases);
 8001758:	4809      	ldr	r0, [pc, #36]	@ (8001780 <ULP_wakeup_sequence+0x30>)
 800175a:	f00d fb64 	bl	800ee26 <psee_sensor_set_biases>
	psee_sensor_start(current_issd);
 800175e:	4620      	mov	r0, r4
 8001760:	f00d fb5b 	bl	800ee1a <psee_sensor_start>
	psee_sensor_set_flip(0,0);
 8001764:	2100      	movs	r1, #0
 8001766:	4608      	mov	r0, r1
 8001768:	f00d fc7a 	bl	800f060 <psee_sensor_set_flip>
	psee_configure_activity_map();
 800176c:	f00d feec 	bl	800f548 <psee_configure_activity_map>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8, GPIO_PIN_SET);
 8001770:	2201      	movs	r2, #1
 8001772:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001776:	4803      	ldr	r0, [pc, #12]	@ (8001784 <ULP_wakeup_sequence+0x34>)
}
 8001778:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8, GPIO_PIN_SET);
 800177c:	f009 bcc2 	b.w	800b104 <HAL_GPIO_WritePin>
 8001780:	20016be1 	.word	0x20016be1
 8001784:	40021400 	.word	0x40021400

08001788 <SystemClock_Config>:
{
 8001788:	b510      	push	{r4, lr}
 800178a:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800178c:	2210      	movs	r2, #16
 800178e:	2100      	movs	r1, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001790:	2402      	movs	r4, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001792:	a80a      	add	r0, sp, #40	@ 0x28
 8001794:	f029 fec4 	bl	802b520 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001798:	2214      	movs	r2, #20
 800179a:	2100      	movs	r1, #0
 800179c:	a803      	add	r0, sp, #12
 800179e:	f029 febf 	bl	802b520 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 80017a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001814 <SystemClock_Config+0x8c>)
  RCC_OscInitStruct.PLL.PLLN = 192;
 80017a4:	210c      	movs	r1, #12
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017a6:	a808      	add	r0, sp, #32
  __HAL_RCC_PWR_CLK_ENABLE();
 80017a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80017aa:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80017ae:	641a      	str	r2, [r3, #64]	@ 0x40
 80017b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017b6:	9301      	str	r3, [sp, #4]
 80017b8:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017ba:	4b17      	ldr	r3, [pc, #92]	@ (8001818 <SystemClock_Config+0x90>)
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 80017c2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017c4:	2201      	movs	r2, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80017cc:	9302      	str	r3, [sp, #8]
 80017ce:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017d0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80017d4:	e9cd 2308 	strd	r2, r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017d8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80017dc:	e9cd 430e 	strd	r4, r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLN = 192;
 80017e0:	23c0      	movs	r3, #192	@ 0xc0
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80017e2:	e9cd 4412 	strd	r4, r4, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLN = 192;
 80017e6:	e9cd 1310 	strd	r1, r3, [sp, #64]	@ 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017ea:	f00b fb2b 	bl	800ce44 <HAL_RCC_OscConfig>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80017ee:	f00a ffc7 	bl	800c780 <HAL_PWREx_EnableOverDrive>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017f2:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80017f4:	2000      	movs	r0, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80017f6:	2106      	movs	r1, #6
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017f8:	e9cd 3403 	strd	r3, r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80017fc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001800:	e9cd 0305 	strd	r0, r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001804:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001808:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800180a:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800180c:	f00b fd02 	bl	800d214 <HAL_RCC_ClockConfig>
}
 8001810:	b014      	add	sp, #80	@ 0x50
 8001812:	bd10      	pop	{r4, pc}
 8001814:	40023800 	.word	0x40023800
 8001818:	40007000 	.word	0x40007000

0800181c <main>:
{
 800181c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001820:	b0a9      	sub	sp, #164	@ 0xa4
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
  MPU_InitStruct.BaseAddress = 0x90000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8001822:	f04f 4410 	mov.w	r4, #2415919104	@ 0x90000000
	MX_DMA_Init();
 8001826:	f7ff fe8d 	bl	8001544 <MX_DMA_Init>
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800182a:	2210      	movs	r2, #16
 800182c:	2100      	movs	r1, #0
 800182e:	a81b      	add	r0, sp, #108	@ 0x6c
 8001830:	f029 fe76 	bl	802b520 <memset>
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001834:	2501      	movs	r5, #1
  HAL_MPU_Disable();
 8001836:	f008 f88f 	bl	8009958 <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 800183a:	4bc9      	ldr	r3, [pc, #804]	@ (8001b60 <main+0x344>)
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800183c:	a81b      	add	r0, sp, #108	@ 0x6c
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800183e:	f8ad 506c 	strh.w	r5, [sp, #108]	@ 0x6c
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8001842:	e9cd 431c 	strd	r4, r3, [sp, #112]	@ 0x70
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001846:	2400      	movs	r4, #0
 8001848:	941e      	str	r4, [sp, #120]	@ 0x78
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800184a:	f008 f8a3 	bl	8009994 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
  MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 800184e:	2317      	movs	r3, #23
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001850:	a81b      	add	r0, sp, #108	@ 0x6c
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8001852:	f88d 506d 	strb.w	r5, [sp, #109]	@ 0x6d
  MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 8001856:	f88d 3074 	strb.w	r3, [sp, #116]	@ 0x74
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 800185a:	f88d 507a 	strb.w	r5, [sp, #122]	@ 0x7a
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800185e:	f008 f899 	bl	8009994 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001862:	2004      	movs	r0, #4
 8001864:	f008 f886 	bl	8009974 <HAL_MPU_Enable>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001868:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800186c:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001870:	4abc      	ldr	r2, [pc, #752]	@ (8001b64 <main+0x348>)
 8001872:	f8c2 4250 	str.w	r4, [r2, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001876:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800187a:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800187e:	6953      	ldr	r3, [r2, #20]
 8001880:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001884:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001886:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800188a:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800188e:	f8c2 4084 	str.w	r4, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001892:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001896:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800189a:	f643 70e0 	movw	r0, #16352	@ 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800189e:	f3c3 01c9 	ubfx	r1, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80018a2:	f3c3 334e 	ubfx	r3, r3, #13, #15
 80018a6:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80018a8:	ea03 0500 	and.w	r5, r3, r0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80018ac:	468a      	mov	sl, r1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80018ae:	ea45 748a 	orr.w	r4, r5, sl, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80018b2:	f1ba 0a01 	subs.w	sl, sl, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80018b6:	f8c2 4260 	str.w	r4, [r2, #608]	@ 0x260
      } while (ways-- != 0U);
 80018ba:	d2f8      	bcs.n	80018ae <main+0x92>
    } while(sets-- != 0U);
 80018bc:	3b20      	subs	r3, #32
 80018be:	f113 0f20 	cmn.w	r3, #32
 80018c2:	d1f1      	bne.n	80018a8 <main+0x8c>
 80018c4:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80018c8:	6953      	ldr	r3, [r2, #20]
 80018ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018ce:	6153      	str	r3, [r2, #20]
 80018d0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80018d4:	f3bf 8f6f 	isb	sy
  HAL_Init();
 80018d8:	f007 ffa4 	bl	8009824 <HAL_Init>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018dc:	2400      	movs	r4, #0
  SystemClock_Config();
 80018de:	f7ff ff53 	bl	8001788 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e2:	2214      	movs	r2, #20
 80018e4:	2100      	movs	r1, #0
 80018e6:	a81b      	add	r0, sp, #108	@ 0x6c
 80018e8:	f029 fe1a 	bl	802b520 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80018ec:	4b9e      	ldr	r3, [pc, #632]	@ (8001b68 <main+0x34c>)
  HAL_GPIO_WritePin(GPIOB, VSYNC_FREQ_Pin|GPIO_PIN_15, GPIO_PIN_RESET);
 80018ee:	f248 0110 	movw	r1, #32784	@ 0x8010
 80018f2:	489e      	ldr	r0, [pc, #632]	@ (8001b6c <main+0x350>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80018f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f6:	2501      	movs	r5, #1
 80018f8:	2710      	movs	r7, #16
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018fa:	f04f 0903 	mov.w	r9, #3
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80018fe:	f042 0210 	orr.w	r2, r2, #16
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001902:	4e9b      	ldr	r6, [pc, #620]	@ (8001b70 <main+0x354>)
	Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8001904:	f8df b288 	ldr.w	fp, [pc, #648]	@ 8001b90 <main+0x374>
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001908:	f04f 0804 	mov.w	r8, #4
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800190c:	631a      	str	r2, [r3, #48]	@ 0x30
 800190e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001910:	f002 0210 	and.w	r2, r2, #16
 8001914:	9202      	str	r2, [sp, #8]
 8001916:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001918:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800191a:	f042 0202 	orr.w	r2, r2, #2
 800191e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001920:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001922:	f002 0202 	and.w	r2, r2, #2
 8001926:	9203      	str	r2, [sp, #12]
 8001928:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800192a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800192c:	f042 0201 	orr.w	r2, r2, #1
 8001930:	631a      	str	r2, [r3, #48]	@ 0x30
 8001932:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001934:	f002 0201 	and.w	r2, r2, #1
 8001938:	9204      	str	r2, [sp, #16]
 800193a:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800193c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800193e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001942:	631a      	str	r2, [r3, #48]	@ 0x30
 8001944:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001946:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 800194a:	9205      	str	r2, [sp, #20]
 800194c:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800194e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001950:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001954:	631a      	str	r2, [r3, #48]	@ 0x30
 8001956:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001958:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 800195c:	9206      	str	r2, [sp, #24]
 800195e:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001960:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001962:	f042 0208 	orr.w	r2, r2, #8
 8001966:	631a      	str	r2, [r3, #48]	@ 0x30
 8001968:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800196a:	f002 0208 	and.w	r2, r2, #8
 800196e:	9207      	str	r2, [sp, #28]
 8001970:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001972:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001974:	f042 0204 	orr.w	r2, r2, #4
 8001978:	631a      	str	r2, [r3, #48]	@ 0x30
 800197a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800197c:	f002 0204 	and.w	r2, r2, #4
 8001980:	9208      	str	r2, [sp, #32]
 8001982:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001984:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001986:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800198a:	631a      	str	r2, [r3, #48]	@ 0x30
 800198c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800198e:	f402 6280 	and.w	r2, r2, #1024	@ 0x400
 8001992:	9209      	str	r2, [sp, #36]	@ 0x24
 8001994:	9a09      	ldr	r2, [sp, #36]	@ 0x24
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001996:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001998:	f042 0220 	orr.w	r2, r2, #32
 800199c:	631a      	str	r2, [r3, #48]	@ 0x30
 800199e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80019a0:	f002 0220 	and.w	r2, r2, #32
 80019a4:	920a      	str	r2, [sp, #40]	@ 0x28
 80019a6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80019a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80019aa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80019ae:	631a      	str	r2, [r3, #48]	@ 0x30
 80019b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80019b2:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 80019b6:	920b      	str	r2, [sp, #44]	@ 0x2c
 80019b8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80019bc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80019c0:	631a      	str	r2, [r3, #48]	@ 0x30
  HAL_GPIO_WritePin(GPIOB, VSYNC_FREQ_Pin|GPIO_PIN_15, GPIO_PIN_RESET);
 80019c2:	2200      	movs	r2, #0
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019ca:	930c      	str	r3, [sp, #48]	@ 0x30
 80019cc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  HAL_GPIO_WritePin(GPIOB, VSYNC_FREQ_Pin|GPIO_PIN_15, GPIO_PIN_RESET);
 80019ce:	f009 fb99 	bl	800b104 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 80019d2:	2201      	movs	r2, #1
 80019d4:	2108      	movs	r1, #8
 80019d6:	4867      	ldr	r0, [pc, #412]	@ (8001b74 <main+0x358>)
 80019d8:	f009 fb94 	bl	800b104 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 80019dc:	2201      	movs	r2, #1
 80019de:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80019e2:	4865      	ldr	r0, [pc, #404]	@ (8001b78 <main+0x35c>)
 80019e4:	f009 fb8e 	bl	800b104 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOH, DCMI_PWR_EN_Pin|PSU_EN_2V5____D6_Pin, GPIO_PIN_RESET);
 80019e8:	2200      	movs	r2, #0
 80019ea:	f44f 5101 	mov.w	r1, #8256	@ 0x2040
 80019ee:	4863      	ldr	r0, [pc, #396]	@ (8001b7c <main+0x360>)
 80019f0:	f009 fb88 	bl	800b104 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PSU_EN_1V8____D5_GPIO_Port, PSU_EN_1V8____D5_Pin, GPIO_PIN_RESET);
 80019f4:	2200      	movs	r2, #0
 80019f6:	2101      	movs	r1, #1
 80019f8:	485f      	ldr	r0, [pc, #380]	@ (8001b78 <main+0x35c>)
 80019fa:	f009 fb83 	bl	800b104 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, FRAME_RATE_Pin|RENDER_TIME_Pin, GPIO_PIN_RESET);
 80019fe:	2200      	movs	r2, #0
 8001a00:	21c0      	movs	r1, #192	@ 0xc0
 8001a02:	485f      	ldr	r0, [pc, #380]	@ (8001b80 <main+0x364>)
 8001a04:	f009 fb7e 	bl	800b104 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, PSU_EN_1V1____D4_Pin|MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8001a08:	2200      	movs	r2, #0
 8001a0a:	21c0      	movs	r1, #192	@ 0xc0
 8001a0c:	485d      	ldr	r0, [pc, #372]	@ (8001b84 <main+0x368>)
 8001a0e:	f009 fb79 	bl	800b104 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOF, ULP_TH_Pin|ULP_RSTn_Pin|ULP_ENb_Pin, GPIO_PIN_SET);
 8001a12:	2201      	movs	r2, #1
 8001a14:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 8001a18:	485b      	ldr	r0, [pc, #364]	@ (8001b88 <main+0x36c>)
 8001a1a:	f009 fb73 	bl	800b104 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(VSYNC_FREQ_GPIO_Port, &GPIO_InitStruct);
 8001a1e:	a91b      	add	r1, sp, #108	@ 0x6c
 8001a20:	4852      	ldr	r0, [pc, #328]	@ (8001b6c <main+0x350>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a22:	e9cd 751b 	strd	r7, r5, [sp, #108]	@ 0x6c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a26:	e9cd 491d 	strd	r4, r9, [sp, #116]	@ 0x74
  HAL_GPIO_Init(VSYNC_FREQ_GPIO_Port, &GPIO_InitStruct);
 8001a2a:	f009 f9e7 	bl	800adfc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001a2e:	2308      	movs	r3, #8
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001a30:	a91b      	add	r1, sp, #108	@ 0x6c
 8001a32:	4850      	ldr	r0, [pc, #320]	@ (8001b74 <main+0x358>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a34:	e9cd 351b 	strd	r3, r5, [sp, #108]	@ 0x6c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a38:	e9cd 441d 	strd	r4, r4, [sp, #116]	@ 0x74
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001a3c:	f009 f9de 	bl	800adfc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_DISP_Pin|PSU_EN_1V8____D5_Pin;
 8001a40:	f241 0301 	movw	r3, #4097	@ 0x1001
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001a44:	a91b      	add	r1, sp, #108	@ 0x6c
 8001a46:	484c      	ldr	r0, [pc, #304]	@ (8001b78 <main+0x35c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a48:	e9cd 351b 	strd	r3, r5, [sp, #108]	@ 0x6c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4c:	e9cd 441d 	strd	r4, r4, [sp, #116]	@ 0x74
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001a50:	f009 f9d4 	bl	800adfc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin|PSU_EN_2V5____D6_Pin;
 8001a54:	f44f 5301 	mov.w	r3, #8256	@ 0x2040
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001a58:	a91b      	add	r1, sp, #108	@ 0x6c
 8001a5a:	4848      	ldr	r0, [pc, #288]	@ (8001b7c <main+0x360>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a5c:	e9cd 351b 	strd	r3, r5, [sp, #108]	@ 0x6c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a60:	e9cd 441d 	strd	r4, r4, [sp, #116]	@ 0x74
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001a64:	f009 f9ca 	bl	800adfc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FRAME_RATE_Pin|RENDER_TIME_Pin;
 8001a68:	23c0      	movs	r3, #192	@ 0xc0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a6a:	a91b      	add	r1, sp, #108	@ 0x6c
 8001a6c:	4844      	ldr	r0, [pc, #272]	@ (8001b80 <main+0x364>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a6e:	e9cd 351b 	strd	r3, r5, [sp, #108]	@ 0x6c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a72:	e9cd 491d 	strd	r4, r9, [sp, #116]	@ 0x74
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a76:	f009 f9c1 	bl	800adfc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = PSU_EN_1V1____D4_Pin;
 8001a7a:	2380      	movs	r3, #128	@ 0x80
  HAL_GPIO_Init(PSU_EN_1V1____D4_GPIO_Port, &GPIO_InitStruct);
 8001a7c:	a91b      	add	r1, sp, #108	@ 0x6c
 8001a7e:	4841      	ldr	r0, [pc, #260]	@ (8001b84 <main+0x368>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a80:	e9cd 351b 	strd	r3, r5, [sp, #108]	@ 0x6c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a84:	e9cd 441d 	strd	r4, r4, [sp, #116]	@ 0x74
  HAL_GPIO_Init(PSU_EN_1V1____D4_GPIO_Port, &GPIO_InitStruct);
 8001a88:	f009 f9b8 	bl	800adfc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = MCU_ACTIVE_Pin;
 8001a8c:	2340      	movs	r3, #64	@ 0x40
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 8001a8e:	a91b      	add	r1, sp, #108	@ 0x6c
 8001a90:	483c      	ldr	r0, [pc, #240]	@ (8001b84 <main+0x368>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a92:	e9cd 351b 	strd	r3, r5, [sp, #108]	@ 0x6c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a96:	e9cd 491d 	strd	r4, r9, [sp, #116]	@ 0x74
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 8001a9a:	f009 f9af 	bl	800adfc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULP_TH_Pin|ULP_RSTn_Pin|ULP_ENb_Pin;
 8001a9e:	f44f 72e0 	mov.w	r2, #448	@ 0x1c0
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001aa2:	a91b      	add	r1, sp, #108	@ 0x6c
 8001aa4:	4838      	ldr	r0, [pc, #224]	@ (8001b88 <main+0x36c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aa6:	e9cd 251b 	strd	r2, r5, [sp, #108]	@ 0x6c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aaa:	e9cd 441d 	strd	r4, r4, [sp, #116]	@ 0x74
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001aae:	f009 f9a5 	bl	800adfc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = WAKEUP_Pin;
 8001ab2:	f44f 7200 	mov.w	r2, #512	@ 0x200
  HAL_GPIO_Init(WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8001ab6:	a91b      	add	r1, sp, #108	@ 0x6c
 8001ab8:	4833      	ldr	r0, [pc, #204]	@ (8001b88 <main+0x36c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aba:	941d      	str	r4, [sp, #116]	@ 0x74
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001abc:	e9cd 241b 	strd	r2, r4, [sp, #108]	@ 0x6c
  HAL_GPIO_Init(WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8001ac0:	f009 f99c 	bl	800adfc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001ac4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ac8:	a91b      	add	r1, sp, #108	@ 0x6c
 8001aca:	4828      	ldr	r0, [pc, #160]	@ (8001b6c <main+0x350>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001acc:	e9cd 251b 	strd	r2, r5, [sp, #108]	@ 0x6c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad0:	e9cd 441d 	strd	r4, r4, [sp, #116]	@ 0x74
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ad4:	f009 f992 	bl	800adfc <HAL_GPIO_Init>
  MX_DMA_Init();
 8001ad8:	f7ff fd34 	bl	8001544 <MX_DMA_Init>
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001adc:	4a2b      	ldr	r2, [pc, #172]	@ (8001b8c <main+0x370>)
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001ade:	2340      	movs	r3, #64	@ 0x40
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001ae0:	a91b      	add	r1, sp, #108	@ 0x6c
 8001ae2:	4630      	mov	r0, r6
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001ae4:	60b4      	str	r4, [r6, #8]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001ae6:	61f4      	str	r4, [r6, #28]
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001ae8:	62b4      	str	r4, [r6, #40]	@ 0x28
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001aea:	e9c6 2400 	strd	r2, r4, [r6]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001aee:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001af2:	e9c6 3205 	strd	r3, r2, [r6, #20]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001af6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001afa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001afe:	e9c6 2308 	strd	r2, r3, [r6, #32]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001b02:	2302      	movs	r3, #2
 8001b04:	2207      	movs	r2, #7
  SdramTiming.RPDelay = 2;
 8001b06:	e9cd 931f 	strd	r9, r3, [sp, #124]	@ 0x7c
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001b0a:	e9cd 321b 	strd	r3, r2, [sp, #108]	@ 0x6c
  SdramTiming.RCDDelay = 2;
 8001b0e:	9321      	str	r3, [sp, #132]	@ 0x84
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001b10:	e9c6 8703 	strd	r8, r7, [r6, #12]
  SdramTiming.RowCycleDelay = 7;
 8001b14:	e9cd 821d 	strd	r8, r2, [sp, #116]	@ 0x74
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001b18:	f00b fee2 	bl	800d8e0 <HAL_SDRAM_Init>
	HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001b1c:	4659      	mov	r1, fp
 8001b1e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b22:	4630      	mov	r0, r6
	__IO uint32_t tmpmrd = 0;
 8001b24:	9401      	str	r4, [sp, #4]
	Command.CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK1;
 8001b26:	e9cb 5700 	strd	r5, r7, [fp]
	Command.ModeRegisterDefinition = 0;
 8001b2a:	e9cb 5402 	strd	r5, r4, [fp, #8]
	HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001b2e:	f00b fef7 	bl	800d920 <HAL_SDRAM_SendCommand>
	HAL_Delay(1);
 8001b32:	4628      	mov	r0, r5
 8001b34:	f007 fe9a 	bl	800986c <HAL_Delay>
	Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8001b38:	2302      	movs	r3, #2
	HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001b3a:	4659      	mov	r1, fp
 8001b3c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b40:	4630      	mov	r0, r6
	Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001b42:	e9cb 3700 	strd	r3, r7, [fp]
	Command.ModeRegisterDefinition = 0;
 8001b46:	e9cb 5402 	strd	r5, r4, [fp, #8]
	HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001b4a:	f00b fee9 	bl	800d920 <HAL_SDRAM_SendCommand>
	Command.AutoRefreshNumber      = 8;
 8001b4e:	2308      	movs	r3, #8
	HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001b50:	4659      	mov	r1, fp
 8001b52:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b56:	4630      	mov	r0, r6
	Command.ModeRegisterDefinition = 0;
 8001b58:	e9cb 3402 	strd	r3, r4, [fp, #8]
 8001b5c:	e01a      	b.n	8001b94 <main+0x378>
 8001b5e:	bf00      	nop
 8001b60:	0300001b 	.word	0x0300001b
 8001b64:	e000ed00 	.word	0xe000ed00
 8001b68:	40023800 	.word	0x40023800
 8001b6c:	40020400 	.word	0x40020400
 8001b70:	20008220 	.word	0x20008220
 8001b74:	40022800 	.word	0x40022800
 8001b78:	40022000 	.word	0x40022000
 8001b7c:	40021c00 	.word	0x40021c00
 8001b80:	40020800 	.word	0x40020800
 8001b84:	40021800 	.word	0x40021800
 8001b88:	40021400 	.word	0x40021400
 8001b8c:	a0000140 	.word	0xa0000140
 8001b90:	2000818c 	.word	0x2000818c
	Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001b94:	e9cb 9700 	strd	r9, r7, [fp]
	HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001b98:	f00b fec2 	bl	800d920 <HAL_SDRAM_SendCommand>
	tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1 | \
 8001b9c:	f44f 720c 	mov.w	r2, #560	@ 0x230
	HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001ba0:	4659      	mov	r1, fp
 8001ba2:	4630      	mov	r0, r6
	tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1 | \
 8001ba4:	9201      	str	r2, [sp, #4]
	Command.ModeRegisterDefinition = tmpmrd;
 8001ba6:	9a01      	ldr	r2, [sp, #4]
	Command.AutoRefreshNumber      = 1;
 8001ba8:	f8cb 5008 	str.w	r5, [fp, #8]
	Command.ModeRegisterDefinition = tmpmrd;
 8001bac:	f8cb 200c 	str.w	r2, [fp, #12]
	HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001bb0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
	Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001bb4:	e9cb 8700 	strd	r8, r7, [fp]
	HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001bb8:	f00b feb2 	bl	800d920 <HAL_SDRAM_SendCommand>
	HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT);
 8001bbc:	f240 712b 	movw	r1, #1835	@ 0x72b
 8001bc0:	4630      	mov	r0, r6
  hi2c3.Instance = I2C3;
 8001bc2:	4eca      	ldr	r6, [pc, #808]	@ (8001eec <main+0x6d0>)
	HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT);
 8001bc4:	f00b fecb 	bl	800d95e <HAL_SDRAM_ProgramRefreshRate>
	FMC_Bank1->BTCR[0] = 0x000030D2;
 8001bc8:	f243 01d2 	movw	r1, #12498	@ 0x30d2
 8001bcc:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
	HAL_Delay(100); //Delay to fix initialization issue on some boards
 8001bd0:	2064      	movs	r0, #100	@ 0x64
  hltdc.Instance = LTDC;
 8001bd2:	f8df b38c 	ldr.w	fp, [pc, #908]	@ 8001f60 <main+0x744>
	FMC_Bank1->BTCR[0] = 0x000030D2;
 8001bd6:	6011      	str	r1, [r2, #0]
	HAL_Delay(100); //Delay to fix initialization issue on some boards
 8001bd8:	f007 fe48 	bl	800986c <HAL_Delay>
  hi2c3.Init.Timing = 0x00C0EAFF;
 8001bdc:	4bc4      	ldr	r3, [pc, #784]	@ (8001ef0 <main+0x6d4>)
 8001bde:	4ac5      	ldr	r2, [pc, #788]	@ (8001ef4 <main+0x6d8>)
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001be0:	4630      	mov	r0, r6
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001be2:	6234      	str	r4, [r6, #32]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8001be4:	e9c6 3200 	strd	r3, r2, [r6]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001be8:	e9c6 4502 	strd	r4, r5, [r6, #8]
  hi2c3.Init.OwnAddress2 = 0;
 8001bec:	e9c6 4404 	strd	r4, r4, [r6, #16]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bf0:	e9c6 4406 	strd	r4, r4, [r6, #24]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001bf4:	f009 fc0b 	bl	800b40e <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001bf8:	4621      	mov	r1, r4
 8001bfa:	4630      	mov	r0, r6
 8001bfc:	f00a fb42 	bl	800c284 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001c00:	4621      	mov	r1, r4
 8001c02:	4630      	mov	r0, r6
  hi2c1.Instance = I2C1;
 8001c04:	4ebc      	ldr	r6, [pc, #752]	@ (8001ef8 <main+0x6dc>)
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001c06:	f00a fb63 	bl	800c2d0 <HAL_I2CEx_ConfigDigitalFilter>
  hqspi.Instance = QUADSPI;
 8001c0a:	48bc      	ldr	r0, [pc, #752]	@ (8001efc <main+0x6e0>)
 8001c0c:	4abc      	ldr	r2, [pc, #752]	@ (8001f00 <main+0x6e4>)
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8001c0e:	2118      	movs	r1, #24
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001c10:	6204      	str	r4, [r0, #32]
  hqspi.Init.ClockPrescaler = 1;
 8001c12:	e9c0 2500 	strd	r2, r5, [r0]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8001c16:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001c1a:	e9c0 8702 	strd	r8, r7, [r0, #8]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8001c1e:	e9c0 1204 	strd	r1, r2, [r0, #16]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001c22:	e9c0 4406 	strd	r4, r4, [r0, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001c26:	f00a fec5 	bl	800c9b4 <HAL_QSPI_Init>
	BSP_QSPI_Init();
 8001c2a:	f007 fc7b 	bl	8009524 <BSP_QSPI_Init>
	BSP_QSPI_MemoryMappedMode();
 8001c2e:	f007 fbc1 	bl	80093b4 <BSP_QSPI_EnableMemoryMappedMode>
	HAL_NVIC_DisableIRQ(QUADSPI_IRQn);
 8001c32:	205c      	movs	r0, #92	@ 0x5c
 8001c34:	f007 fe7e 	bl	8009934 <HAL_NVIC_DisableIRQ>
  hi2c1.Init.Timing = 0x0020081F;
 8001c38:	4ab2      	ldr	r2, [pc, #712]	@ (8001f04 <main+0x6e8>)
 8001c3a:	48b3      	ldr	r0, [pc, #716]	@ (8001f08 <main+0x6ec>)
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c3c:	6234      	str	r4, [r6, #32]
  hi2c1.Init.Timing = 0x0020081F;
 8001c3e:	e9c6 0200 	strd	r0, r2, [r6]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c42:	4630      	mov	r0, r6
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c44:	e9c6 4502 	strd	r4, r5, [r6, #8]
  hi2c1.Init.OwnAddress2 = 0;
 8001c48:	e9c6 4404 	strd	r4, r4, [r6, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c4c:	e9c6 4406 	strd	r4, r4, [r6, #24]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c50:	f009 fbdd 	bl	800b40e <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c54:	4621      	mov	r1, r4
 8001c56:	4630      	mov	r0, r6
 8001c58:	f00a fb14 	bl	800c284 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001c5c:	4621      	mov	r1, r4
 8001c5e:	4630      	mov	r0, r6
 8001c60:	f00a fb36 	bl	800c2d0 <HAL_I2CEx_ConfigDigitalFilter>
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8001c64:	4628      	mov	r0, r5
 8001c66:	f00a fb59 	bl	800c31c <HAL_I2CEx_EnableFastModePlus>
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_HIGH;
 8001c6a:	f04f 0c80 	mov.w	ip, #128	@ 0x80
  hdcmi.Instance = DCMI;
 8001c6e:	48a7      	ldr	r0, [pc, #668]	@ (8001f0c <main+0x6f0>)
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_HIGH;
 8001c70:	2340      	movs	r3, #64	@ 0x40
  hdcmi.Instance = DCMI;
 8001c72:	4aa7      	ldr	r2, [pc, #668]	@ (8001f10 <main+0x6f4>)
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8001c74:	6084      	str	r4, [r0, #8]
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8001c76:	6304      	str	r4, [r0, #48]	@ 0x30
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_HIGH;
 8001c78:	e9c0 c303 	strd	ip, r3, [r0, #12]
  hdcmi.Init.JPEGMode = DCMI_JPEG_ENABLE;
 8001c7c:	2308      	movs	r3, #8
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8001c7e:	e9c0 2400 	strd	r2, r4, [r0]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8001c82:	e9c0 3408 	strd	r3, r4, [r0, #32]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8001c86:	e9c0 4405 	strd	r4, r4, [r0, #20]
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8001c8a:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8001c8e:	f007 ff4b 	bl	8009b28 <HAL_DCMI_Init>
  hcrc.Instance = CRC;
 8001c92:	48a0      	ldr	r0, [pc, #640]	@ (8001f14 <main+0x6f8>)
 8001c94:	4ba0      	ldr	r3, [pc, #640]	@ (8001f18 <main+0x6fc>)
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001c96:	6205      	str	r5, [r0, #32]
  hcrc.Instance = CRC;
 8001c98:	6003      	str	r3, [r0, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001c9a:	8084      	strh	r4, [r0, #4]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001c9c:	e9c0 4405 	strd	r4, r4, [r0, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001ca0:	f007 fea4 	bl	80099ec <HAL_CRC_Init>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001ca4:	4621      	mov	r1, r4
 8001ca6:	2234      	movs	r2, #52	@ 0x34
 8001ca8:	a81b      	add	r0, sp, #108	@ 0x6c
 8001caa:	f029 fc39 	bl	802b520 <memset>
  hltdc.Instance = LTDC;
 8001cae:	4b9b      	ldr	r3, [pc, #620]	@ (8001f1c <main+0x700>)
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AH;
 8001cb0:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
  hltdc.Init.AccumulatedVBP = 13;
 8001cb4:	f04f 0e2e 	mov.w	lr, #46	@ 0x2e
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001cb8:	4658      	mov	r0, fp
  hltdc.Init.VerticalSync = 1;
 8001cba:	f8cb 5018 	str.w	r5, [fp, #24]
  hltdc.Init.Backcolor.Blue = 0;
 8001cbe:	f8ab 4034 	strh.w	r4, [fp, #52]	@ 0x34
  hltdc.Init.Backcolor.Red = 0;
 8001cc2:	f88b 4036 	strb.w	r4, [fp, #54]	@ 0x36
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001cc6:	e9cb 3400 	strd	r3, r4, [fp]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AH;
 8001cca:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001cce:	e9cb 3202 	strd	r3, r2, [fp, #8]
  hltdc.Init.AccumulatedVBP = 13;
 8001cd2:	220d      	movs	r2, #13
  hltdc.Init.TotalHeigh = 297;
 8001cd4:	f240 2316 	movw	r3, #534	@ 0x216
  hltdc.Init.AccumulatedVBP = 13;
 8001cd8:	e9cb e207 	strd	lr, r2, [fp, #28]
  hltdc.Init.HorizontalSync = 3;
 8001cdc:	e9cb 4904 	strd	r4, r9, [fp, #16]
  hltdc.Init.AccumulatedActiveH = 285;
 8001ce0:	f240 121d 	movw	r2, #285	@ 0x11d
 8001ce4:	f240 290e 	movw	r9, #526	@ 0x20e
 8001ce8:	e9cb 9209 	strd	r9, r2, [fp, #36]	@ 0x24
  hltdc.Init.TotalHeigh = 297;
 8001cec:	f240 1229 	movw	r2, #297	@ 0x129
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001cf0:	f04f 0905 	mov.w	r9, #5
  hltdc.Init.TotalHeigh = 297;
 8001cf4:	e9cb 320b 	strd	r3, r2, [fp, #44]	@ 0x2c
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001cf8:	f00a fbac 	bl	800c454 <HAL_LTDC_Init>
  pLayerCfg.Alpha = 255;
 8001cfc:	20ff      	movs	r0, #255	@ 0xff
  pLayerCfg.WindowX1 = 480;
 8001cfe:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
  pLayerCfg.WindowY1 = 272;
 8001d02:	f44f 7288 	mov.w	r2, #272	@ 0x110
  pLayerCfg.WindowX0 = 0;
 8001d06:	941b      	str	r4, [sp, #108]	@ 0x6c
  pLayerCfg.ImageHeight = 272;
 8001d08:	9226      	str	r2, [sp, #152]	@ 0x98
  pLayerCfg.Backcolor.Blue = 0;
 8001d0a:	f8ad 409c 	strh.w	r4, [sp, #156]	@ 0x9c
  pLayerCfg.Backcolor.Red = 0;
 8001d0e:	f88d 409e 	strb.w	r4, [sp, #158]	@ 0x9e
  pLayerCfg.Alpha0 = 0;
 8001d12:	e9cd 0420 	strd	r0, r4, [sp, #128]	@ 0x80
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001d16:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001d1a:	e9cd 0922 	strd	r0, r9, [sp, #136]	@ 0x88
  pLayerCfg.FBStartAdress = 0xC0000000;
 8001d1e:	f04f 4040 	mov.w	r0, #3221225472	@ 0xc0000000
  pLayerCfg.WindowY0 = 0;
 8001d22:	e9cd 141c 	strd	r1, r4, [sp, #112]	@ 0x70
  pLayerCfg.ImageWidth = 480;
 8001d26:	e9cd 0124 	strd	r0, r1, [sp, #144]	@ 0x90
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001d2a:	e9cd 241e 	strd	r2, r4, [sp, #120]	@ 0x78
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001d2e:	a91b      	add	r1, sp, #108	@ 0x6c
 8001d30:	4622      	mov	r2, r4
 8001d32:	4658      	mov	r0, fp
 8001d34:	f00a fc58 	bl	800c5e8 <HAL_LTDC_ConfigLayer>
	__HAL_LTDC_DISABLE_IT(&hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8001d38:	f8db 1000 	ldr.w	r1, [fp]
  huart1.Instance = USART1;
 8001d3c:	4878      	ldr	r0, [pc, #480]	@ (8001f20 <main+0x704>)
	__HAL_LTDC_DISABLE_IT(&hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8001d3e:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
  hdma2d.Instance = DMA2D;
 8001d40:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8001f64 <main+0x748>
	__HAL_LTDC_DISABLE_IT(&hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8001d44:	f022 0206 	bic.w	r2, r2, #6
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d48:	6104      	str	r4, [r0, #16]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d4a:	6244      	str	r4, [r0, #36]	@ 0x24
	__HAL_LTDC_DISABLE_IT(&hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8001d4c:	634a      	str	r2, [r1, #52]	@ 0x34
  huart1.Init.BaudRate = 115200;
 8001d4e:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d52:	4974      	ldr	r1, [pc, #464]	@ (8001f24 <main+0x708>)
 8001d54:	e9c0 1200 	strd	r1, r2, [r0]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d58:	220c      	movs	r2, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d5a:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d5e:	e9c0 2405 	strd	r2, r4, [r0, #20]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d62:	e9c0 4407 	strd	r4, r4, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d66:	f00c ff71 	bl	800ec4c <HAL_UART_Init>
  hdma2d.Instance = DMA2D;
 8001d6a:	4a6f      	ldr	r2, [pc, #444]	@ (8001f28 <main+0x70c>)
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001d6c:	4658      	mov	r0, fp
  hdma2d.Init.Mode = DMA2D_M2M;
 8001d6e:	e9cb 2400 	strd	r2, r4, [fp]
  hdma2d.Init.OutputOffset = 0;
 8001d72:	e9cb 4402 	strd	r4, r4, [fp, #8]
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8001d76:	e9cb 440a 	strd	r4, r4, [fp, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001d7a:	e9cb 440c 	strd	r4, r4, [fp, #48]	@ 0x30
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001d7e:	f008 f9e8 	bl	800a152 <HAL_DMA2D_Init>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001d82:	4629      	mov	r1, r5
 8001d84:	4658      	mov	r0, fp
  htim1.Instance = TIM1;
 8001d86:	f8df b1e0 	ldr.w	fp, [pc, #480]	@ 8001f68 <main+0x74c>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001d8a:	f008 fa9b 	bl	800a2c4 <HAL_DMA2D_ConfigLayer>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d8e:	463a      	mov	r2, r7
 8001d90:	4621      	mov	r1, r4
 8001d92:	a810      	add	r0, sp, #64	@ 0x40
 8001d94:	f029 fbc4 	bl	802b520 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d98:	221c      	movs	r2, #28
 8001d9a:	4621      	mov	r1, r4
 8001d9c:	a814      	add	r0, sp, #80	@ 0x50
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d9e:	940f      	str	r4, [sp, #60]	@ 0x3c
 8001da0:	e9cd 440d 	strd	r4, r4, [sp, #52]	@ 0x34
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001da4:	f029 fbbc 	bl	802b520 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001da8:	4621      	mov	r1, r4
 8001daa:	222c      	movs	r2, #44	@ 0x2c
 8001dac:	a81b      	add	r0, sp, #108	@ 0x6c
 8001dae:	f029 fbb7 	bl	802b520 <memset>
  htim1.Instance = TIM1;
 8001db2:	4a5e      	ldr	r2, [pc, #376]	@ (8001f2c <main+0x710>)
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001db4:	4658      	mov	r0, fp
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001db6:	f8cb 4008 	str.w	r4, [fp, #8]
  htim1.Init.Prescaler = 1;
 8001dba:	e9cb 2500 	strd	r2, r5, [fp]
  htim1.Init.Period = 9;
 8001dbe:	2209      	movs	r2, #9
  htim2.Instance = TIM2;
 8001dc0:	4d5b      	ldr	r5, [pc, #364]	@ (8001f30 <main+0x714>)
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dc2:	e9cb 2403 	strd	r2, r4, [fp, #12]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dc6:	e9cb 4405 	strd	r4, r4, [fp, #20]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001dca:	f00c f859 	bl	800de80 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001dd2:	a910      	add	r1, sp, #64	@ 0x40
 8001dd4:	4658      	mov	r0, fp
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dd6:	9310      	str	r3, [sp, #64]	@ 0x40
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001dd8:	f00c f970 	bl	800e0bc <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001ddc:	4658      	mov	r0, fp
 8001dde:	f00c f87f 	bl	800dee0 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001de2:	a90d      	add	r1, sp, #52	@ 0x34
 8001de4:	4658      	mov	r0, fp
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001de6:	940f      	str	r4, [sp, #60]	@ 0x3c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001de8:	e9cd 440d 	strd	r4, r4, [sp, #52]	@ 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001dec:	f00c fae0 	bl	800e3b0 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001df0:	2260      	movs	r2, #96	@ 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001df2:	a914      	add	r1, sp, #80	@ 0x50
 8001df4:	4658      	mov	r0, fp
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001df6:	941a      	str	r4, [sp, #104]	@ 0x68
  sConfigOC.Pulse = 5;
 8001df8:	e9cd 2914 	strd	r2, r9, [sp, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001dfc:	4622      	mov	r2, r4
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001dfe:	e9cd 4416 	strd	r4, r4, [sp, #88]	@ 0x58
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e02:	e9cd 8418 	strd	r8, r4, [sp, #96]	@ 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e06:	f00c f8d3 	bl	800dfb0 <HAL_TIM_PWM_ConfigChannel>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e0a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001e0e:	a91b      	add	r1, sp, #108	@ 0x6c
 8001e10:	4658      	mov	r0, fp
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e12:	941f      	str	r4, [sp, #124]	@ 0x7c
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001e14:	9422      	str	r4, [sp, #136]	@ 0x88
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e16:	9425      	str	r4, [sp, #148]	@ 0x94
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001e18:	e9cd 2420 	strd	r2, r4, [sp, #128]	@ 0x80
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001e1c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e20:	e9cd 441b 	strd	r4, r4, [sp, #108]	@ 0x6c
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001e24:	e9cd 2423 	strd	r2, r4, [sp, #140]	@ 0x8c
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e28:	e9cd 441d 	strd	r4, r4, [sp, #116]	@ 0x74
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001e2c:	f00c fb0a 	bl	800e444 <HAL_TIMEx_ConfigBreakDeadTime>
  HAL_TIM_MspPostInit(&htim1);
 8001e30:	4658      	mov	r0, fp
 8001e32:	f000 ff8b 	bl	8002d4c <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e36:	463a      	mov	r2, r7
 8001e38:	4621      	mov	r1, r4
 8001e3a:	a81b      	add	r0, sp, #108	@ 0x6c
 8001e3c:	f029 fb70 	bl	802b520 <memset>
  htim2.Init.Prescaler = 99;
 8001e40:	2363      	movs	r3, #99	@ 0x63
 8001e42:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e46:	9416      	str	r4, [sp, #88]	@ 0x58
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e48:	612c      	str	r4, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e4a:	61ac      	str	r4, [r5, #24]
  htim2.Init.Prescaler = 99;
 8001e4c:	e9c5 0300 	strd	r0, r3, [r5]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e50:	4628      	mov	r0, r5
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e52:	e9cd 4414 	strd	r4, r4, [sp, #80]	@ 0x50
  htim2.Init.Period = 4294967295;
 8001e56:	e9c5 4a02 	strd	r4, sl, [r5, #8]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e5a:	f00c f811 	bl	800de80 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e5e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e62:	a91b      	add	r1, sp, #108	@ 0x6c
 8001e64:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e66:	931b      	str	r3, [sp, #108]	@ 0x6c
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e68:	f00c f928 	bl	800e0bc <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e6c:	a914      	add	r1, sp, #80	@ 0x50
 8001e6e:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e70:	9414      	str	r4, [sp, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e72:	9416      	str	r4, [sp, #88]	@ 0x58
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e74:	f00c fa9c 	bl	800e3b0 <HAL_TIMEx_MasterConfigSynchronization>
  HAL_TIM_Base_Start(&htim2);
 8001e78:	4628      	mov	r0, r5
 8001e7a:	f00b fe6d 	bl	800db58 <HAL_TIM_Base_Start>
  MX_TouchGFX_Init();
 8001e7e:	f001 fbbd 	bl	80035fc <MX_TouchGFX_Init>
  MX_TouchGFX_PreOSInit();
 8001e82:	f001 fbba 	bl	80035fa <MX_TouchGFX_PreOSInit>
  HAL_InitTick(4);
 8001e86:	4640      	mov	r0, r8
 8001e88:	f001 f852 	bl	8002f30 <HAL_InitTick>
  reset_buffers();
 8001e8c:	f7ff fc0a 	bl	80016a4 <reset_buffers>
  reset_frame_buffers();
 8001e90:	f001 f9c2 	bl	8003218 <reset_frame_buffers>
  BaseType_t i2c_status =  xDrvI2cCreate(&hi2c1, pvStaticAllocate, &drv_i2c);
 8001e94:	4a27      	ldr	r2, [pc, #156]	@ (8001f34 <main+0x718>)
 8001e96:	4928      	ldr	r1, [pc, #160]	@ (8001f38 <main+0x71c>)
 8001e98:	4630      	mov	r0, r6
 8001e9a:	f007 f951 	bl	8009140 <xDrvI2cCreate>
  assert(i2c_status == pdTRUE);
 8001e9e:	2801      	cmp	r0, #1
 8001ea0:	d006      	beq.n	8001eb0 <main+0x694>
 8001ea2:	4b26      	ldr	r3, [pc, #152]	@ (8001f3c <main+0x720>)
 8001ea4:	f44f 71db 	mov.w	r1, #438	@ 0x1b6
 8001ea8:	4a25      	ldr	r2, [pc, #148]	@ (8001f40 <main+0x724>)
  assert(dma_status == pdTRUE);
 8001eaa:	4826      	ldr	r0, [pc, #152]	@ (8001f44 <main+0x728>)
 8001eac:	f028 fb86 	bl	802a5bc <__assert_func>
  BaseType_t dma_status =  xDrvDmaCreate(&hdma_memtomem_dma2_stream0, pvStaticAllocate, &drv_dma);
 8001eb0:	4a25      	ldr	r2, [pc, #148]	@ (8001f48 <main+0x72c>)
 8001eb2:	4921      	ldr	r1, [pc, #132]	@ (8001f38 <main+0x71c>)
 8001eb4:	4825      	ldr	r0, [pc, #148]	@ (8001f4c <main+0x730>)
 8001eb6:	f007 f84f 	bl	8008f58 <xDrvDmaCreate>
  assert(dma_status == pdTRUE);
 8001eba:	2801      	cmp	r0, #1
 8001ebc:	d004      	beq.n	8001ec8 <main+0x6ac>
 8001ebe:	4b24      	ldr	r3, [pc, #144]	@ (8001f50 <main+0x734>)
 8001ec0:	f240 11b9 	movw	r1, #441	@ 0x1b9
 8001ec4:	4a1e      	ldr	r2, [pc, #120]	@ (8001f40 <main+0x724>)
 8001ec6:	e7f0      	b.n	8001eaa <main+0x68e>
  HAL_DMA_RegisterCallback(&hdma_memtomem_dma2_stream0, HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA_MasterCpltCallback);
 8001ec8:	4a22      	ldr	r2, [pc, #136]	@ (8001f54 <main+0x738>)
 8001eca:	4621      	mov	r1, r4
 8001ecc:	481f      	ldr	r0, [pc, #124]	@ (8001f4c <main+0x730>)
 8001ece:	f008 f917 	bl	800a100 <HAL_DMA_RegisterCallback>
  BaseType_t genx320_status =  xDrvGenx320Create(pvStaticAllocate, &drv_genx320);
 8001ed2:	4921      	ldr	r1, [pc, #132]	@ (8001f58 <main+0x73c>)
 8001ed4:	4818      	ldr	r0, [pc, #96]	@ (8001f38 <main+0x71c>)
 8001ed6:	f007 f8d9 	bl	800908c <xDrvGenx320Create>
  assert(genx320_status == pdTRUE);
 8001eda:	2801      	cmp	r0, #1
  BaseType_t genx320_status =  xDrvGenx320Create(pvStaticAllocate, &drv_genx320);
 8001edc:	4605      	mov	r5, r0
  assert(genx320_status == pdTRUE);
 8001ede:	d045      	beq.n	8001f6c <main+0x750>
 8001ee0:	4b1e      	ldr	r3, [pc, #120]	@ (8001f5c <main+0x740>)
 8001ee2:	f240 11bd 	movw	r1, #445	@ 0x1bd
 8001ee6:	4a16      	ldr	r2, [pc, #88]	@ (8001f40 <main+0x724>)
 8001ee8:	e7df      	b.n	8001eaa <main+0x68e>
 8001eea:	bf00      	nop
 8001eec:	200084c8 	.word	0x200084c8
 8001ef0:	40005c00 	.word	0x40005c00
 8001ef4:	00c0eaff 	.word	0x00c0eaff
 8001ef8:	2000851c 	.word	0x2000851c
 8001efc:	200083d4 	.word	0x200083d4
 8001f00:	a0001000 	.word	0xa0001000
 8001f04:	0020081f 	.word	0x0020081f
 8001f08:	40005400 	.word	0x40005400
 8001f0c:	20008610 	.word	0x20008610
 8001f10:	50050000 	.word	0x50050000
 8001f14:	20008660 	.word	0x20008660
 8001f18:	40023000 	.word	0x40023000
 8001f1c:	40016800 	.word	0x40016800
 8001f20:	200082b4 	.word	0x200082b4
 8001f24:	40011000 	.word	0x40011000
 8001f28:	4002b000 	.word	0x4002b000
 8001f2c:	40010000 	.word	0x40010000
 8001f30:	2000833c 	.word	0x2000833c
 8001f34:	20008188 	.word	0x20008188
 8001f38:	08001521 	.word	0x08001521
 8001f3c:	0802d1a6 	.word	0x0802d1a6
 8001f40:	0802d1e9 	.word	0x0802d1e9
 8001f44:	0802d138 	.word	0x0802d138
 8001f48:	20008184 	.word	0x20008184
 8001f4c:	20008254 	.word	0x20008254
 8001f50:	0802d1bb 	.word	0x0802d1bb
 8001f54:	080015e5 	.word	0x080015e5
 8001f58:	20008180 	.word	0x20008180
 8001f5c:	0802d1d0 	.word	0x0802d1d0
 8001f60:	20008420 	.word	0x20008420
 8001f64:	20008570 	.word	0x20008570
 8001f68:	20008388 	.word	0x20008388
  HAL_InitTick(15);
 8001f6c:	200f      	movs	r0, #15
 8001f6e:	f000 ffdf 	bl	8002f30 <HAL_InitTick>
  osKernelInitialize();
 8001f72:	f00d fba7 	bl	800f6c4 <osKernelInitialize>
  tskCtlUpdateFbHandle = osMutexNew(&tskCtlUpdateFb_attributes);
 8001f76:	482e      	ldr	r0, [pc, #184]	@ (8002030 <main+0x814>)
 8001f78:	f00d fc6a 	bl	800f850 <osMutexNew>
 8001f7c:	4b2d      	ldr	r3, [pc, #180]	@ (8002034 <main+0x818>)
  Vsync_SemaphoreHandle = osSemaphoreNew(1, 0, &Vsync_Semaphore_attributes);
 8001f7e:	4a2e      	ldr	r2, [pc, #184]	@ (8002038 <main+0x81c>)
 8001f80:	4621      	mov	r1, r4
  tskCtlUpdateFbHandle = osMutexNew(&tskCtlUpdateFb_attributes);
 8001f82:	6018      	str	r0, [r3, #0]
  Vsync_SemaphoreHandle = osSemaphoreNew(1, 0, &Vsync_Semaphore_attributes);
 8001f84:	4628      	mov	r0, r5
 8001f86:	f00d fca5 	bl	800f8d4 <osSemaphoreNew>
 8001f8a:	4b2c      	ldr	r3, [pc, #176]	@ (800203c <main+0x820>)
  ESP_LPW_SemphHandle = osSemaphoreNew(1, 0, &ESP_LPW_Semph_attributes);
 8001f8c:	4a2c      	ldr	r2, [pc, #176]	@ (8002040 <main+0x824>)
 8001f8e:	4621      	mov	r1, r4
  Vsync_SemaphoreHandle = osSemaphoreNew(1, 0, &Vsync_Semaphore_attributes);
 8001f90:	6018      	str	r0, [r3, #0]
  ESP_LPW_SemphHandle = osSemaphoreNew(1, 0, &ESP_LPW_Semph_attributes);
 8001f92:	4628      	mov	r0, r5
 8001f94:	f00d fc9e 	bl	800f8d4 <osSemaphoreNew>
 8001f98:	4b2a      	ldr	r3, [pc, #168]	@ (8002044 <main+0x828>)
  Activity_Map_SemphHandle = osSemaphoreNew(1, 0, &Activity_Map_Semph_attributes);
 8001f9a:	4a2b      	ldr	r2, [pc, #172]	@ (8002048 <main+0x82c>)
 8001f9c:	4621      	mov	r1, r4
  ESP_LPW_SemphHandle = osSemaphoreNew(1, 0, &ESP_LPW_Semph_attributes);
 8001f9e:	6018      	str	r0, [r3, #0]
  Activity_Map_SemphHandle = osSemaphoreNew(1, 0, &Activity_Map_Semph_attributes);
 8001fa0:	4628      	mov	r0, r5
 8001fa2:	f00d fc97 	bl	800f8d4 <osSemaphoreNew>
 8001fa6:	4b29      	ldr	r3, [pc, #164]	@ (800204c <main+0x830>)
  Statistics_SemphHandle = osSemaphoreNew(1, 0, &Statistics_Semph_attributes);
 8001fa8:	4a29      	ldr	r2, [pc, #164]	@ (8002050 <main+0x834>)
 8001faa:	4621      	mov	r1, r4
  Activity_Map_SemphHandle = osSemaphoreNew(1, 0, &Activity_Map_Semph_attributes);
 8001fac:	6018      	str	r0, [r3, #0]
  Statistics_SemphHandle = osSemaphoreNew(1, 0, &Statistics_Semph_attributes);
 8001fae:	4628      	mov	r0, r5
 8001fb0:	f00d fc90 	bl	800f8d4 <osSemaphoreNew>
 8001fb4:	4b27      	ldr	r3, [pc, #156]	@ (8002054 <main+0x838>)
  Led_Tracking_SemphHandle = osSemaphoreNew(1, 0, &Led_Tracking_Semph_attributes);
 8001fb6:	4a28      	ldr	r2, [pc, #160]	@ (8002058 <main+0x83c>)
 8001fb8:	4621      	mov	r1, r4
  Statistics_SemphHandle = osSemaphoreNew(1, 0, &Statistics_Semph_attributes);
 8001fba:	6018      	str	r0, [r3, #0]
  Led_Tracking_SemphHandle = osSemaphoreNew(1, 0, &Led_Tracking_Semph_attributes);
 8001fbc:	4628      	mov	r0, r5
 8001fbe:	f00d fc89 	bl	800f8d4 <osSemaphoreNew>
 8001fc2:	4b26      	ldr	r3, [pc, #152]	@ (800205c <main+0x840>)
  ESP_LPWHandle = osThreadNew(ESP_LPW_Task, NULL, &ESP_LPW_attributes);
 8001fc4:	4a26      	ldr	r2, [pc, #152]	@ (8002060 <main+0x844>)
 8001fc6:	4621      	mov	r1, r4
  Led_Tracking_SemphHandle = osSemaphoreNew(1, 0, &Led_Tracking_Semph_attributes);
 8001fc8:	6018      	str	r0, [r3, #0]
  ESP_LPWHandle = osThreadNew(ESP_LPW_Task, NULL, &ESP_LPW_attributes);
 8001fca:	4826      	ldr	r0, [pc, #152]	@ (8002064 <main+0x848>)
 8001fcc:	f00d fbb4 	bl	800f738 <osThreadNew>
 8001fd0:	4b25      	ldr	r3, [pc, #148]	@ (8002068 <main+0x84c>)
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8001fd2:	4a26      	ldr	r2, [pc, #152]	@ (800206c <main+0x850>)
 8001fd4:	4621      	mov	r1, r4
  ESP_LPWHandle = osThreadNew(ESP_LPW_Task, NULL, &ESP_LPW_attributes);
 8001fd6:	6018      	str	r0, [r3, #0]
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8001fd8:	4825      	ldr	r0, [pc, #148]	@ (8002070 <main+0x854>)
 8001fda:	f00d fbad 	bl	800f738 <osThreadNew>
 8001fde:	4b25      	ldr	r3, [pc, #148]	@ (8002074 <main+0x858>)
  Update_FbHandle = osThreadNew(Task_Update_Fb, (void*) &args_update_fb, &Update_Fb_attributes);
 8001fe0:	4a25      	ldr	r2, [pc, #148]	@ (8002078 <main+0x85c>)
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8001fe2:	6018      	str	r0, [r3, #0]
  Update_FbHandle = osThreadNew(Task_Update_Fb, (void*) &args_update_fb, &Update_Fb_attributes);
 8001fe4:	4925      	ldr	r1, [pc, #148]	@ (800207c <main+0x860>)
 8001fe6:	4826      	ldr	r0, [pc, #152]	@ (8002080 <main+0x864>)
 8001fe8:	f00d fba6 	bl	800f738 <osThreadNew>
 8001fec:	4b25      	ldr	r3, [pc, #148]	@ (8002084 <main+0x868>)
  Event_DecodingHandle = osThreadNew(Event_Decoding_Task, (void*) &args_evt_decoder, &Event_Decoding_attributes);
 8001fee:	4a26      	ldr	r2, [pc, #152]	@ (8002088 <main+0x86c>)
  Update_FbHandle = osThreadNew(Task_Update_Fb, (void*) &args_update_fb, &Update_Fb_attributes);
 8001ff0:	6018      	str	r0, [r3, #0]
  Event_DecodingHandle = osThreadNew(Event_Decoding_Task, (void*) &args_evt_decoder, &Event_Decoding_attributes);
 8001ff2:	4926      	ldr	r1, [pc, #152]	@ (800208c <main+0x870>)
 8001ff4:	4826      	ldr	r0, [pc, #152]	@ (8002090 <main+0x874>)
 8001ff6:	f00d fb9f 	bl	800f738 <osThreadNew>
 8001ffa:	4b26      	ldr	r3, [pc, #152]	@ (8002094 <main+0x878>)
  Activity_MapHandle = osThreadNew(Activity_Map_Task, NULL, &Activity_Map_attributes);
 8001ffc:	4a26      	ldr	r2, [pc, #152]	@ (8002098 <main+0x87c>)
 8001ffe:	4621      	mov	r1, r4
  Event_DecodingHandle = osThreadNew(Event_Decoding_Task, (void*) &args_evt_decoder, &Event_Decoding_attributes);
 8002000:	6018      	str	r0, [r3, #0]
  Activity_MapHandle = osThreadNew(Activity_Map_Task, NULL, &Activity_Map_attributes);
 8002002:	4826      	ldr	r0, [pc, #152]	@ (800209c <main+0x880>)
 8002004:	f00d fb98 	bl	800f738 <osThreadNew>
 8002008:	4b25      	ldr	r3, [pc, #148]	@ (80020a0 <main+0x884>)
  StatisticsHandle = osThreadNew(Statistics_Task, NULL, &Statistics_attributes);
 800200a:	4a26      	ldr	r2, [pc, #152]	@ (80020a4 <main+0x888>)
 800200c:	4621      	mov	r1, r4
  Activity_MapHandle = osThreadNew(Activity_Map_Task, NULL, &Activity_Map_attributes);
 800200e:	6018      	str	r0, [r3, #0]
  StatisticsHandle = osThreadNew(Statistics_Task, NULL, &Statistics_attributes);
 8002010:	4825      	ldr	r0, [pc, #148]	@ (80020a8 <main+0x88c>)
 8002012:	f00d fb91 	bl	800f738 <osThreadNew>
 8002016:	4b25      	ldr	r3, [pc, #148]	@ (80020ac <main+0x890>)
  Led_TrackingHandle = osThreadNew(Led_Tracking_Task, NULL, &Led_Tracking_attributes);
 8002018:	4a25      	ldr	r2, [pc, #148]	@ (80020b0 <main+0x894>)
 800201a:	4621      	mov	r1, r4
  StatisticsHandle = osThreadNew(Statistics_Task, NULL, &Statistics_attributes);
 800201c:	6018      	str	r0, [r3, #0]
  Led_TrackingHandle = osThreadNew(Led_Tracking_Task, NULL, &Led_Tracking_attributes);
 800201e:	4825      	ldr	r0, [pc, #148]	@ (80020b4 <main+0x898>)
 8002020:	f00d fb8a 	bl	800f738 <osThreadNew>
 8002024:	4b24      	ldr	r3, [pc, #144]	@ (80020b8 <main+0x89c>)
 8002026:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8002028:	f00d fb66 	bl	800f6f8 <osKernelStart>
	while (1)
 800202c:	e7fe      	b.n	800202c <main+0x810>
 800202e:	bf00      	nop
 8002030:	0802d360 	.word	0x0802d360
 8002034:	20008200 	.word	0x20008200
 8002038:	0802d350 	.word	0x0802d350
 800203c:	200081ac 	.word	0x200081ac
 8002040:	0802d340 	.word	0x0802d340
 8002044:	200081a8 	.word	0x200081a8
 8002048:	0802d330 	.word	0x0802d330
 800204c:	200081a4 	.word	0x200081a4
 8002050:	0802d320 	.word	0x0802d320
 8002054:	200081a0 	.word	0x200081a0
 8002058:	0802d310 	.word	0x0802d310
 800205c:	2000819c 	.word	0x2000819c
 8002060:	0802d448 	.word	0x0802d448
 8002064:	080015cd 	.word	0x080015cd
 8002068:	2000821c 	.word	0x2000821c
 800206c:	0802d424 	.word	0x0802d424
 8002070:	0800360b 	.word	0x0800360b
 8002074:	20008218 	.word	0x20008218
 8002078:	0802d400 	.word	0x0802d400
 800207c:	0802d250 	.word	0x0802d250
 8002080:	080015d1 	.word	0x080015d1
 8002084:	20008214 	.word	0x20008214
 8002088:	0802d3dc 	.word	0x0802d3dc
 800208c:	0802d244 	.word	0x0802d244
 8002090:	080015d5 	.word	0x080015d5
 8002094:	20008210 	.word	0x20008210
 8002098:	0802d3b8 	.word	0x0802d3b8
 800209c:	080015d9 	.word	0x080015d9
 80020a0:	2000820c 	.word	0x2000820c
 80020a4:	0802d394 	.word	0x0802d394
 80020a8:	080015dd 	.word	0x080015dd
 80020ac:	20008208 	.word	0x20008208
 80020b0:	0802d370 	.word	0x0802d370
 80020b4:	080015e1 	.word	0x080015e1
 80020b8:	20008204 	.word	0x20008204

080020bc <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80020bc:	6802      	ldr	r2, [r0, #0]
 80020be:	4b03      	ldr	r3, [pc, #12]	@ (80020cc <HAL_TIM_PeriodElapsedCallback+0x10>)
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d101      	bne.n	80020c8 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 80020c4:	f007 bbc0 	b.w	8009848 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	40001000 	.word	0x40001000

080020d0 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80020d0:	4770      	bx	lr
	...

080020d4 <Conv>:
int input_index2D(int row, int col, int num_in) {
    return row*num_in+col;
}

/* Implementation of a convolution layer with given parameters. It includes by default ReLu activation */
void Conv(int kernel_size, int depth, int previous_depth, int in_rows, int in_cols, float *matrix, float *output, int16_t *kernels) {
 80020d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020d8:	b08f      	sub	sp, #60	@ 0x3c
    return (float)(quantized_weight) / scaling_factor;
 80020da:	eddf 6a43 	vldr	s13, [pc, #268]	@ 80021e8 <Conv+0x114>
void Conv(int kernel_size, int depth, int previous_depth, int in_rows, int in_cols, float *matrix, float *output, int16_t *kernels) {
 80020de:	e9cd 1204 	strd	r1, r2, [sp, #16]
    int out_rows = in_rows - kernel_size + 1;
 80020e2:	1a1a      	subs	r2, r3, r0
 80020e4:	9206      	str	r2, [sp, #24]
    int out_cols = in_cols - kernel_size + 1;
 80020e6:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80020e8:	1a12      	subs	r2, r2, r0
 80020ea:	9207      	str	r2, [sp, #28]
    int index = 0;
    int filter = 0;
    float sum = 0;

    for (int block_i = 0; block_i < out_rows; block_i += 1) {
 80020ec:	9a05      	ldr	r2, [sp, #20]
 80020ee:	4342      	muls	r2, r0
 80020f0:	4342      	muls	r2, r0
 80020f2:	9208      	str	r2, [sp, #32]
 80020f4:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80020f6:	4353      	muls	r3, r2
 80020f8:	2200      	movs	r2, #0
 80020fa:	930c      	str	r3, [sp, #48]	@ 0x30
 80020fc:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
 8002100:	4616      	mov	r6, r2
    int index = 0;
 8002102:	4617      	mov	r7, r2
 8002104:	4343      	muls	r3, r0
 8002106:	9309      	str	r3, [sp, #36]	@ 0x24
 8002108:	ea21 73e1 	bic.w	r3, r1, r1, asr #31
 800210c:	930d      	str	r3, [sp, #52]	@ 0x34
    for (int block_i = 0; block_i < out_rows; block_i += 1) {
 800210e:	9b06      	ldr	r3, [sp, #24]
 8002110:	42b3      	cmp	r3, r6
 8002112:	da61      	bge.n	80021d8 <Conv+0x104>
                sum = 0;
                index++;
            }
        }
    }
}
 8002114:	b00f      	add	sp, #60	@ 0x3c
 8002116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                for(int k = 0; k < previous_depth; k++) {
 800211a:	2400      	movs	r4, #0
                filter = filter_i * previous_depth * kernel_size * kernel_size;
 800211c:	468c      	mov	ip, r1
                for(int k = 0; k < previous_depth; k++) {
 800211e:	eddf 7a33 	vldr	s15, [pc, #204]	@ 80021ec <Conv+0x118>
 8002122:	46a0      	mov	r8, r4
 8002124:	9b05      	ldr	r3, [sp, #20]
 8002126:	4598      	cmp	r8, r3
 8002128:	da32      	bge.n	8002190 <Conv+0xbc>
                    for (int i = 0; i < kernel_size; i++) {
 800212a:	2500      	movs	r5, #0
 800212c:	eb02 0e04 	add.w	lr, r2, r4
                for(int k = 0; k < previous_depth; k++) {
 8002130:	4663      	mov	r3, ip
                    for (int i = 0; i < kernel_size; i++) {
 8002132:	9501      	str	r5, [sp, #4]
 8002134:	e015      	b.n	8002162 <Conv+0x8e>
                            sum += dequantize_weight(kernels[filter], SCALE_FACTOR) * matrix[input_index((block_i + i),
 8002136:	f939 5b02 	ldrsh.w	r5, [r9], #2
 800213a:	ee07 5a10 	vmov	s14, r5
 800213e:	9d02      	ldr	r5, [sp, #8]
    return (float)(quantized_weight) / scaling_factor;
 8002140:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                            sum += dequantize_weight(kernels[filter], SCALE_FACTOR) * matrix[input_index((block_i + i),
 8002144:	ecf5 5a01 	vldmia	r5!, {s11}
 8002148:	9502      	str	r5, [sp, #8]
    return (float)(quantized_weight) / scaling_factor;
 800214a:	ee87 6a26 	vdiv.f32	s12, s14, s13
                        for (int j = 0; j < kernel_size; j++) {
 800214e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8002150:	45a9      	cmp	r9, r5
                            sum += dequantize_weight(kernels[filter], SCALE_FACTOR) * matrix[input_index((block_i + i),
 8002152:	eee5 7a86 	vfma.f32	s15, s11, s12
                        for (int j = 0; j < kernel_size; j++) {
 8002156:	d1ee      	bne.n	8002136 <Conv+0x62>
                    for (int i = 0; i < kernel_size; i++) {
 8002158:	9d01      	ldr	r5, [sp, #4]
 800215a:	3501      	adds	r5, #1
 800215c:	9501      	str	r5, [sp, #4]
 800215e:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 8002160:	44ae      	add	lr, r5
 8002162:	9d01      	ldr	r5, [sp, #4]
 8002164:	4285      	cmp	r5, r0
 8002166:	da0c      	bge.n	8002182 <Conv+0xae>
                        for (int j = 0; j < kernel_size; j++) {
 8002168:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800216a:	eb05 0943 	add.w	r9, r5, r3, lsl #1
 800216e:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8002170:	4403      	add	r3, r0
 8002172:	eb05 058e 	add.w	r5, r5, lr, lsl #2
 8002176:	9502      	str	r5, [sp, #8]
 8002178:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800217a:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 800217e:	950b      	str	r5, [sp, #44]	@ 0x2c
 8002180:	e7d9      	b.n	8002136 <Conv+0x62>
 8002182:	9b09      	ldr	r3, [sp, #36]	@ 0x24
                for(int k = 0; k < previous_depth; k++) {
 8002184:	f108 0801 	add.w	r8, r8, #1
 8002188:	449c      	add	ip, r3
 800218a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800218c:	441c      	add	r4, r3
 800218e:	e7c9      	b.n	8002124 <Conv+0x50>
                if (sum < 0) sum = 0;
 8002190:	eef5 7ac0 	vcmpe.f32	s15, #0.0
                output[index] = sum;
 8002194:	9b03      	ldr	r3, [sp, #12]
            for(int filter_i = 0; filter_i < depth; filter_i += 1) {
 8002196:	f10a 0a01 	add.w	sl, sl, #1
                if (sum < 0) sum = 0;
 800219a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800219e:	bf48      	it	mi
 80021a0:	eddf 7a12 	vldrmi	s15, [pc, #72]	@ 80021ec <Conv+0x118>
                output[index] = sum;
 80021a4:	ece3 7a01 	vstmia	r3!, {s15}
 80021a8:	9303      	str	r3, [sp, #12]
            for(int filter_i = 0; filter_i < depth; filter_i += 1) {
 80021aa:	9b08      	ldr	r3, [sp, #32]
 80021ac:	4419      	add	r1, r3
 80021ae:	9b04      	ldr	r3, [sp, #16]
 80021b0:	459a      	cmp	sl, r3
 80021b2:	dbb2      	blt.n	800211a <Conv+0x46>
 80021b4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
        for (int block_j = 0; block_j < out_cols; block_j += 1) {
 80021b6:	f10b 0b01 	add.w	fp, fp, #1
 80021ba:	441f      	add	r7, r3
 80021bc:	9b07      	ldr	r3, [sp, #28]
 80021be:	455b      	cmp	r3, fp
 80021c0:	db0d      	blt.n	80021de <Conv+0x10a>
 80021c2:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80021c4:	2100      	movs	r1, #0
 80021c6:	eb03 0387 	add.w	r3, r3, r7, lsl #2
            for(int filter_i = 0; filter_i < depth; filter_i += 1) {
 80021ca:	468a      	mov	sl, r1
 80021cc:	9303      	str	r3, [sp, #12]
 80021ce:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80021d0:	eb03 038b 	add.w	r3, r3, fp, lsl #2
 80021d4:	930a      	str	r3, [sp, #40]	@ 0x28
 80021d6:	e7ea      	b.n	80021ae <Conv+0xda>
        for (int block_j = 0; block_j < out_cols; block_j += 1) {
 80021d8:	f04f 0b00 	mov.w	fp, #0
 80021dc:	e7ee      	b.n	80021bc <Conv+0xe8>
    for (int block_i = 0; block_i < out_rows; block_i += 1) {
 80021de:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80021e0:	3601      	adds	r6, #1
 80021e2:	441a      	add	r2, r3
 80021e4:	e793      	b.n	800210e <Conv+0x3a>
 80021e6:	bf00      	nop
 80021e8:	461c4000 	.word	0x461c4000
 80021ec:	00000000 	.word	0x00000000

080021f0 <sigmoid>:

float sigmoid(float x) {
 80021f0:	b508      	push	{r3, lr}
        float z = expf(x);
 80021f2:	f028 f8a7 	bl	802a344 <expf>
        return 1.0f / (1.0f + z);
 80021f6:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80021fa:	ee30 0a27 	vadd.f32	s0, s0, s15
}
 80021fe:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8002202:	bd08      	pop	{r3, pc}

08002204 <fullyConnectedLayer>:

// Function for a fully connected layer, includes by default sigmoid activation
void fullyConnectedLayer(int inputSize, int outputSize, float* input, float* output, int16_t* weights) {
 8002204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002208:	ed2d 8b02 	vpush	{d8}
 800220c:	4604      	mov	r4, r0
 800220e:	4690      	mov	r8, r2
 8002210:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
    int size = inputSize * outputSize;
 8002212:	fb01 f900 	mul.w	r9, r1, r0
    float temp;
    int k = 0;
    for (int i = 0; i < size;) {
 8002216:	461e      	mov	r6, r3
 8002218:	2500      	movs	r5, #0
    return (float)(quantized_weight) / scaling_factor;
 800221a:	ed9f 8a13 	vldr	s16, [pc, #76]	@ 8002268 <fullyConnectedLayer+0x64>
 800221e:	ea20 7ae0 	bic.w	sl, r0, r0, asr #31
    for (int i = 0; i < size;) {
 8002222:	454d      	cmp	r5, r9
 8002224:	da1b      	bge.n	800225e <fullyConnectedLayer+0x5a>
 8002226:	eb07 0145 	add.w	r1, r7, r5, lsl #1
 800222a:	4642      	mov	r2, r8
        temp = 0;
        for (int j = 0; j < inputSize; j++) {
 800222c:	2300      	movs	r3, #0
        temp = 0;
 800222e:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 800226c <fullyConnectedLayer+0x68>
 8002232:	e00c      	b.n	800224e <fullyConnectedLayer+0x4a>
            temp += dequantize_weight(weights[i], SCALE_FACTOR) * input[j];
 8002234:	f931 0b02 	ldrsh.w	r0, [r1], #2
        for (int j = 0; j < inputSize; j++) {
 8002238:	3301      	adds	r3, #1
            temp += dequantize_weight(weights[i], SCALE_FACTOR) * input[j];
 800223a:	ecf2 6a01 	vldmia	r2!, {s13}
 800223e:	ee07 0a90 	vmov	s15, r0
    return (float)(quantized_weight) / scaling_factor;
 8002242:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002246:	ee87 7a88 	vdiv.f32	s14, s15, s16
            temp += dequantize_weight(weights[i], SCALE_FACTOR) * input[j];
 800224a:	eea6 0a87 	vfma.f32	s0, s13, s14
        for (int j = 0; j < inputSize; j++) {
 800224e:	42a3      	cmp	r3, r4
 8002250:	dbf0      	blt.n	8002234 <fullyConnectedLayer+0x30>
            ++i;
        }

        // sigmoid
        output[k] = sigmoid(temp);
 8002252:	f7ff ffcd 	bl	80021f0 <sigmoid>
 8002256:	4455      	add	r5, sl
 8002258:	eca6 0a01 	vstmia	r6!, {s0}
        k++;
 800225c:	e7e1      	b.n	8002222 <fullyConnectedLayer+0x1e>
    }
}
 800225e:	ecbd 8b02 	vpop	{d8}
 8002262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002266:	bf00      	nop
 8002268:	461c4000 	.word	0x461c4000
 800226c:	00000000 	.word	0x00000000

08002270 <max_pooling>:

// Function implementing Max pooling for pool_size = 2 and stride = 2
// depth - depth of the input layer
// size - width or height of the input layer

void max_pooling(int depth, int size, float *input, float *output) {
 8002270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002274:	b087      	sub	sp, #28
 8002276:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800227a:	fb00 f201 	mul.w	r2, r0, r1
 800227e:	00d4      	lsls	r4, r2, #3
 8002280:	0092      	lsls	r2, r2, #2
 8002282:	9403      	str	r4, [sp, #12]
 8002284:	00c4      	lsls	r4, r0, #3
 8002286:	9201      	str	r2, [sp, #4]
 8002288:	0082      	lsls	r2, r0, #2
 800228a:	9402      	str	r4, [sp, #8]
 800228c:	1e4c      	subs	r4, r1, #1
 800228e:	9200      	str	r2, [sp, #0]
    int index = 0;
    float max = 0;

    for (int d = 0; d < depth; d++) {
 8002290:	2200      	movs	r2, #0
 8002292:	0864      	lsrs	r4, r4, #1
    int index = 0;
 8002294:	4694      	mov	ip, r2
                        }
                    }
                }
                output[index] = max;

                index++;
 8002296:	3401      	adds	r4, #1
    for (int d = 0; d < depth; d++) {
 8002298:	4282      	cmp	r2, r0
 800229a:	da3b      	bge.n	8002314 <max_pooling+0xa4>
 800229c:	9b04      	ldr	r3, [sp, #16]
        for (int block_i = 0; block_i < size; block_i += 2) {
 800229e:	2600      	movs	r6, #0
 80022a0:	eb03 0782 	add.w	r7, r3, r2, lsl #2
 80022a4:	e028      	b.n	80022f8 <max_pooling+0x88>
                for (int i = 0; i < 2; i++) {
 80022a6:	4645      	mov	r5, r8
 80022a8:	f04f 0a02 	mov.w	sl, #2
 80022ac:	eddf 7a1b 	vldr	s15, [pc, #108]	@ 800231c <max_pooling+0xac>
                        if(input[d + (ind_bi + ind_i * size + ind_bj + ind_j)] > max) {
 80022b0:	ed95 7a00 	vldr	s14, [r5]
 80022b4:	9b00      	ldr	r3, [sp, #0]
 80022b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022ba:	eb05 0b03 	add.w	fp, r5, r3
                for (int i = 0; i < 2; i++) {
 80022be:	9b01      	ldr	r3, [sp, #4]
                        if(input[d + (ind_bi + ind_i * size + ind_bj + ind_j)] > max) {
 80022c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                for (int i = 0; i < 2; i++) {
 80022c4:	441d      	add	r5, r3
                        if(input[d + (ind_bi + ind_i * size + ind_bj + ind_j)] > max) {
 80022c6:	fe37 7a27 	vselgt.f32	s14, s14, s15
 80022ca:	eddb 7a00 	vldr	s15, [fp]
 80022ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022d6:	fe77 7a87 	vselgt.f32	s15, s15, s14
                for (int i = 0; i < 2; i++) {
 80022da:	f1ba 0f01 	cmp.w	sl, #1
 80022de:	d114      	bne.n	800230a <max_pooling+0x9a>
            for (int block_j = 0; block_j < size; block_j += 2) {
 80022e0:	f10e 0e02 	add.w	lr, lr, #2
 80022e4:	9b02      	ldr	r3, [sp, #8]
                output[index] = max;
 80022e6:	ece9 7a01 	vstmia	r9!, {s15}
            for (int block_j = 0; block_j < size; block_j += 2) {
 80022ea:	4571      	cmp	r1, lr
 80022ec:	4498      	add	r8, r3
 80022ee:	dcda      	bgt.n	80022a6 <max_pooling+0x36>
 80022f0:	9b03      	ldr	r3, [sp, #12]
                index++;
 80022f2:	44a4      	add	ip, r4
        for (int block_i = 0; block_i < size; block_i += 2) {
 80022f4:	3602      	adds	r6, #2
 80022f6:	441f      	add	r7, r3
 80022f8:	428e      	cmp	r6, r1
 80022fa:	da09      	bge.n	8002310 <max_pooling+0xa0>
            for (int block_j = 0; block_j < size; block_j += 2) {
 80022fc:	9b05      	ldr	r3, [sp, #20]
        for (int block_i = 0; block_i < size; block_i += 2) {
 80022fe:	46b8      	mov	r8, r7
            for (int block_j = 0; block_j < size; block_j += 2) {
 8002300:	f04f 0e00 	mov.w	lr, #0
 8002304:	eb03 098c 	add.w	r9, r3, ip, lsl #2
 8002308:	e7cd      	b.n	80022a6 <max_pooling+0x36>
 800230a:	f04f 0a01 	mov.w	sl, #1
 800230e:	e7cf      	b.n	80022b0 <max_pooling+0x40>
    for (int d = 0; d < depth; d++) {
 8002310:	3201      	adds	r2, #1
 8002312:	e7c1      	b.n	8002298 <max_pooling+0x28>
                max = 0 ;
            }
        }
    }
}
 8002314:	b007      	add	sp, #28
 8002316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800231a:	bf00      	nop
 800231c:	00000000 	.word	0x00000000

08002320 <predict>:

int predict(float output[]) {
        int max_index = 0;
        float max_value = output[0];
 8002320:	4603      	mov	r3, r0
        for (int i = 1; i < 10; ++i) {
 8002322:	2201      	movs	r2, #1
        int max_index = 0;
 8002324:	2000      	movs	r0, #0
        float max_value = output[0];
 8002326:	ecf3 7a01 	vldmia	r3!, {s15}
           // printf(" %f ", output[i]);
            if (output[i] > max_value) {
 800232a:	ecb3 7a01 	vldmia	r3!, {s14}
 800232e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002336:	bfc8      	it	gt
 8002338:	4610      	movgt	r0, r2
        for (int i = 1; i < 10; ++i) {
 800233a:	f102 0201 	add.w	r2, r2, #1
                max_value = output[i];
 800233e:	bfc8      	it	gt
 8002340:	eef0 7a47 	vmovgt.f32	s15, s14
        for (int i = 1; i < 10; ++i) {
 8002344:	2a0a      	cmp	r2, #10
 8002346:	d1f0      	bne.n	800232a <predict+0xa>
                max_index = i;
            }
        }
        return max_index;
    }
 8002348:	4770      	bx	lr

0800234a <calculate_the_weight_of_a_9by9_block>:

int calculate_the_weight_of_a_9by9_block(uint8_t* buffer, int row, int col){
	int result = 0;

	for (int r = 0; r < 9; r++){
 800234a:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800234e:	4410      	add	r0, r2
 8002350:	4359      	muls	r1, r3
	int result = 0;
 8002352:	2300      	movs	r3, #0
int calculate_the_weight_of_a_9by9_block(uint8_t* buffer, int row, int col){
 8002354:	b570      	push	{r4, r5, r6, lr}
 8002356:	f501 6534 	add.w	r5, r1, #2880	@ 0xb40
		for (int c = 0; c < 9; c++){
 800235a:	1842      	adds	r2, r0, r1
 800235c:	2400      	movs	r4, #0
			if (buffer[( 320 * (row + r) + (col + c))] != 0) {
 800235e:	f812 6b01 	ldrb.w	r6, [r2], #1
 8002362:	b106      	cbz	r6, 8002366 <calculate_the_weight_of_a_9by9_block+0x1c>
				result += 1;
 8002364:	3301      	adds	r3, #1
		for (int c = 0; c < 9; c++){
 8002366:	3401      	adds	r4, #1
 8002368:	2c09      	cmp	r4, #9
 800236a:	d1f8      	bne.n	800235e <calculate_the_weight_of_a_9by9_block+0x14>
	for (int r = 0; r < 9; r++){
 800236c:	f501 71a0 	add.w	r1, r1, #320	@ 0x140
 8002370:	42a9      	cmp	r1, r5
 8002372:	d1f2      	bne.n	800235a <calculate_the_weight_of_a_9by9_block+0x10>
			}
		}
	}

	return result;
}
 8002374:	4618      	mov	r0, r3
 8002376:	bd70      	pop	{r4, r5, r6, pc}

08002378 <predict_main>:

int predict_main(float *img) {
 8002378:	b530      	push	{r4, r5, lr}
//    };
//



    Conv(5, 3, 1, 28, 28, img, Conv1out, weights_conv1);
 800237a:	4b1f      	ldr	r3, [pc, #124]	@ (80023f8 <predict_main+0x80>)
int predict_main(float *img) {
 800237c:	b085      	sub	sp, #20
    Conv(5, 3, 1, 28, 28, img, Conv1out, weights_conv1);
 800237e:	4d1f      	ldr	r5, [pc, #124]	@ (80023fc <predict_main+0x84>)
 8002380:	2201      	movs	r2, #1
 8002382:	9303      	str	r3, [sp, #12]
 8002384:	231c      	movs	r3, #28

	max_pooling(3, 24, Conv1out,MP1out);
 8002386:	4c1e      	ldr	r4, [pc, #120]	@ (8002400 <predict_main+0x88>)
    Conv(5, 3, 1, 28, 28, img, Conv1out, weights_conv1);
 8002388:	2103      	movs	r1, #3
 800238a:	9300      	str	r3, [sp, #0]
 800238c:	e9cd 0501 	strd	r0, r5, [sp, #4]
 8002390:	2005      	movs	r0, #5
 8002392:	f7ff fe9f 	bl	80020d4 <Conv>
	max_pooling(3, 24, Conv1out,MP1out);
 8002396:	4623      	mov	r3, r4
 8002398:	462a      	mov	r2, r5
 800239a:	2003      	movs	r0, #3
 800239c:	2118      	movs	r1, #24

    Conv(5, 6, 3, 12, 12, MP1out, Conv2out, weights_conv2);
 800239e:	4d19      	ldr	r5, [pc, #100]	@ (8002404 <predict_main+0x8c>)
	max_pooling(3, 24, Conv1out,MP1out);
 80023a0:	f7ff ff66 	bl	8002270 <max_pooling>
    Conv(5, 6, 3, 12, 12, MP1out, Conv2out, weights_conv2);
 80023a4:	4b18      	ldr	r3, [pc, #96]	@ (8002408 <predict_main+0x90>)
 80023a6:	4602      	mov	r2, r0
 80023a8:	2106      	movs	r1, #6
 80023aa:	9303      	str	r3, [sp, #12]
 80023ac:	230c      	movs	r3, #12
 80023ae:	2005      	movs	r0, #5
 80023b0:	9300      	str	r3, [sp, #0]
 80023b2:	e9cd 4501 	strd	r4, r5, [sp, #4]

    max_pooling(6, 8, Conv2out,MP2out);
 80023b6:	4c15      	ldr	r4, [pc, #84]	@ (800240c <predict_main+0x94>)
    Conv(5, 6, 3, 12, 12, MP1out, Conv2out, weights_conv2);
 80023b8:	f7ff fe8c 	bl	80020d4 <Conv>
    max_pooling(6, 8, Conv2out,MP2out);
 80023bc:	462a      	mov	r2, r5
 80023be:	2108      	movs	r1, #8
 80023c0:	4623      	mov	r3, r4
 80023c2:	2006      	movs	r0, #6
 80023c4:	f7ff ff54 	bl	8002270 <max_pooling>

    fullyConnectedLayer(96, 52, MP2out, FC1out, weights_FC1);
 80023c8:	4d11      	ldr	r5, [pc, #68]	@ (8002410 <predict_main+0x98>)
 80023ca:	4b12      	ldr	r3, [pc, #72]	@ (8002414 <predict_main+0x9c>)
 80023cc:	4622      	mov	r2, r4
 80023ce:	2134      	movs	r1, #52	@ 0x34
 80023d0:	2060      	movs	r0, #96	@ 0x60
 80023d2:	9300      	str	r3, [sp, #0]
 80023d4:	462b      	mov	r3, r5
 80023d6:	f7ff ff15 	bl	8002204 <fullyConnectedLayer>

    fullyConnectedLayer(52, 10, FC1out, FC2out, weights_FC2);
 80023da:	4c0f      	ldr	r4, [pc, #60]	@ (8002418 <predict_main+0xa0>)
 80023dc:	4b0f      	ldr	r3, [pc, #60]	@ (800241c <predict_main+0xa4>)
 80023de:	462a      	mov	r2, r5
 80023e0:	210a      	movs	r1, #10
 80023e2:	2034      	movs	r0, #52	@ 0x34
 80023e4:	9300      	str	r3, [sp, #0]
 80023e6:	4623      	mov	r3, r4
 80023e8:	f7ff ff0c 	bl	8002204 <fullyConnectedLayer>


    the_prediction = predict(FC2out);
 80023ec:	4620      	mov	r0, r4

    //printf("PREDICTED NR = %d \n", the_prediction);

    return the_prediction;
}
 80023ee:	b005      	add	sp, #20
 80023f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    the_prediction = predict(FC2out);
 80023f4:	f7ff bf94 	b.w	8002320 <predict>
 80023f8:	20007960 	.word	0x20007960
 80023fc:	200095bc 	.word	0x200095bc
 8002400:	20008efc 	.word	0x20008efc
 8002404:	200088fc 	.word	0x200088fc
 8002408:	20006f9c 	.word	0x20006f9c
 800240c:	2000877c 	.word	0x2000877c
 8002410:	200086ac 	.word	0x200086ac
 8002414:	2000069c 	.word	0x2000069c
 8002418:	20008684 	.word	0x20008684
 800241c:	2000000c 	.word	0x2000000c

08002420 <psee_sleep_us_imp>:
 * @param duration Time delay in microseconds
 */
static void psee_sleep_us_imp(uint32_t duration) {

	/* Get the current value of the counters */
	uint32_t tickstart = __HAL_TIM_GET_COUNTER(&htim2);
 8002420:	4b03      	ldr	r3, [pc, #12]	@ (8002430 <psee_sleep_us_imp+0x10>)
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	6a51      	ldr	r1, [r2, #36]	@ 0x24

	/* Get the value of the delay */
	uint32_t delay = duration;

	/* Wait for the delay */
	while ((__HAL_TIM_GET_COUNTER(&htim2) - tickstart) < delay);
 8002426:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 8002428:	1a5b      	subs	r3, r3, r1
 800242a:	4283      	cmp	r3, r0
 800242c:	d3fb      	bcc.n	8002426 <psee_sleep_us_imp+0x6>

}
 800242e:	4770      	bx	lr
 8002430:	2000833c 	.word	0x2000833c

08002434 <psee_sleep_ms_imp>:
/**
 * @brief Platform dependent sleep function for delay in ms.
 * @param duration Time delay in milliseconds
 */
void psee_sleep_ms_imp(uint32_t duration) {
	HAL_Delay(duration);
 8002434:	f007 ba1a 	b.w	800986c <HAL_Delay>

08002438 <psee_sensor_write>:
/**
 * @brief Platform dependent function to perform a single-write operation to the sensor's register.
 * @param reg Sensor's register to which the data needs to be written
 * @param data Data to be written
 */
void psee_sensor_write(uint16_t reg, uint32_t data) {
 8002438:	b507      	push	{r0, r1, r2, lr}

	/* Write reg addr */
	buf[0] = __builtin_bswap16 (reg);

	/* Write value */
	buf[1] = __builtin_bswap16 ((data >> 16));
 800243a:	0c0b      	lsrs	r3, r1, #16
	buf[0] = __builtin_bswap16 (reg);
 800243c:	ba40      	rev16	r0, r0
	buf[2] = __builtin_bswap16 ((data & 0xFFFF));
 800243e:	ba49      	rev16	r1, r1

	BaseType_t status = ucDrvI2cWriteBytes(drv_i2c, (I2C_ADDRESS << 1), (uint8_t *) buf, sizeof(buf));
 8002440:	466a      	mov	r2, sp
	buf[1] = __builtin_bswap16 ((data >> 16));
 8002442:	ba5b      	rev16	r3, r3
	buf[0] = __builtin_bswap16 (reg);
 8002444:	f8ad 0000 	strh.w	r0, [sp]
	BaseType_t status = ucDrvI2cWriteBytes(drv_i2c, (I2C_ADDRESS << 1), (uint8_t *) buf, sizeof(buf));
 8002448:	480a      	ldr	r0, [pc, #40]	@ (8002474 <psee_sensor_write+0x3c>)
	buf[1] = __builtin_bswap16 ((data >> 16));
 800244a:	f8ad 3002 	strh.w	r3, [sp, #2]
	BaseType_t status = ucDrvI2cWriteBytes(drv_i2c, (I2C_ADDRESS << 1), (uint8_t *) buf, sizeof(buf));
 800244e:	2306      	movs	r3, #6
	buf[2] = __builtin_bswap16 ((data & 0xFFFF));
 8002450:	f8ad 1004 	strh.w	r1, [sp, #4]
	BaseType_t status = ucDrvI2cWriteBytes(drv_i2c, (I2C_ADDRESS << 1), (uint8_t *) buf, sizeof(buf));
 8002454:	2178      	movs	r1, #120	@ 0x78
 8002456:	6800      	ldr	r0, [r0, #0]
 8002458:	f006 ff02 	bl	8009260 <ucDrvI2cWriteBytes>
	assert(status == pdTRUE);
 800245c:	2801      	cmp	r0, #1
 800245e:	d005      	beq.n	800246c <psee_sensor_write+0x34>
 8002460:	4b05      	ldr	r3, [pc, #20]	@ (8002478 <psee_sensor_write+0x40>)
 8002462:	215b      	movs	r1, #91	@ 0x5b
 8002464:	4a05      	ldr	r2, [pc, #20]	@ (800247c <psee_sensor_write+0x44>)
 8002466:	4806      	ldr	r0, [pc, #24]	@ (8002480 <psee_sensor_write+0x48>)
 8002468:	f028 f8a8 	bl	802a5bc <__assert_func>
}
 800246c:	b003      	add	sp, #12
 800246e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002472:	bf00      	nop
 8002474:	20008188 	.word	0x20008188
 8002478:	0802d1d8 	.word	0x0802d1d8
 800247c:	0802d4e5 	.word	0x0802d4e5
 8002480:	0802d46c 	.word	0x0802d46c

08002484 <psee_sensor_read>:
/**
 * @brief Platform dependent function to perform a single-read operation from the sensor's register.
 * @param reg Sensor's register from which the data needs to be read
 * @param data Pointer to the variable where the data needs to be stored
 */
void psee_sensor_read(uint16_t reg, uint32_t* data) {
 8002484:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint16_t recv[2] = {0};
 8002486:	2300      	movs	r3, #0

	uint16_t swap_reg = __builtin_bswap16 (reg);
 8002488:	ba42      	rev16	r2, r0
	BaseType_t status = ucDrvI2cReadBytes(drv_i2c, (I2C_ADDRESS << 1),
 800248a:	480f      	ldr	r0, [pc, #60]	@ (80024c8 <psee_sensor_read+0x44>)
void psee_sensor_read(uint16_t reg, uint32_t* data) {
 800248c:	460c      	mov	r4, r1
	uint16_t recv[2] = {0};
 800248e:	9303      	str	r3, [sp, #12]
	BaseType_t status = ucDrvI2cReadBytes(drv_i2c, (I2C_ADDRESS << 1),
 8002490:	2304      	movs	r3, #4
 8002492:	b292      	uxth	r2, r2
 8002494:	2178      	movs	r1, #120	@ 0x78
 8002496:	9300      	str	r3, [sp, #0]
 8002498:	ab03      	add	r3, sp, #12
 800249a:	6800      	ldr	r0, [r0, #0]
 800249c:	f006 fe9a 	bl	80091d4 <ucDrvI2cReadBytes>
			swap_reg, (uint8_t *)recv, sizeof(uint32_t));
	assert(status == pdTRUE);
 80024a0:	2801      	cmp	r0, #1
 80024a2:	d005      	beq.n	80024b0 <psee_sensor_read+0x2c>
 80024a4:	4b09      	ldr	r3, [pc, #36]	@ (80024cc <psee_sensor_read+0x48>)
 80024a6:	2169      	movs	r1, #105	@ 0x69
 80024a8:	4a09      	ldr	r2, [pc, #36]	@ (80024d0 <psee_sensor_read+0x4c>)
 80024aa:	480a      	ldr	r0, [pc, #40]	@ (80024d4 <psee_sensor_read+0x50>)
 80024ac:	f028 f886 	bl	802a5bc <__assert_func>

	*data = (__builtin_bswap16(recv[0]) << 16) + (__builtin_bswap16 (recv[1]));
 80024b0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80024b4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80024b8:	ba52      	rev16	r2, r2
 80024ba:	ba5b      	rev16	r3, r3
 80024bc:	0412      	lsls	r2, r2, #16
 80024be:	fa12 f383 	uxtah	r3, r2, r3
 80024c2:	6023      	str	r3, [r4, #0]
}
 80024c4:	b004      	add	sp, #16
 80024c6:	bd10      	pop	{r4, pc}
 80024c8:	20008188 	.word	0x20008188
 80024cc:	0802d1d8 	.word	0x0802d1d8
 80024d0:	0802d4d4 	.word	0x0802d4d4
 80024d4:	0802d46c 	.word	0x0802d46c

080024d8 <psee_sensor_sequential_read>:
 * @brief Platform dependent function to perform a sequential-read operation from the sensor's register.
 * @param reg Sensor's starting register address from which the data needs to be read
 * @param data Pointer to the array where the data needs to be stored
 * @param n_word Total number of bytes that needs to be read
 */
void psee_sensor_sequential_read(uint16_t reg, uint32_t* data, uint16_t n_word) {
 80024d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80024da:	4615      	mov	r5, r2

	BaseType_t status = ucDrvI2cReadBytes(drv_i2c, (I2C_ADDRESS << 1),
 80024dc:	ba42      	rev16	r2, r0
 80024de:	4813      	ldr	r0, [pc, #76]	@ (800252c <psee_sensor_sequential_read+0x54>)
void psee_sensor_sequential_read(uint16_t reg, uint32_t* data, uint16_t n_word) {
 80024e0:	460c      	mov	r4, r1
	BaseType_t status = ucDrvI2cReadBytes(drv_i2c, (I2C_ADDRESS << 1),
 80024e2:	00ab      	lsls	r3, r5, #2
 80024e4:	b292      	uxth	r2, r2
 80024e6:	9300      	str	r3, [sp, #0]
 80024e8:	460b      	mov	r3, r1
 80024ea:	6800      	ldr	r0, [r0, #0]
 80024ec:	2178      	movs	r1, #120	@ 0x78
 80024ee:	f006 fe71 	bl	80091d4 <ucDrvI2cReadBytes>
			__builtin_bswap16 (reg), (uint8_t *) data, n_word * sizeof(uint32_t));
	assert(status == pdTRUE);
 80024f2:	2801      	cmp	r0, #1
 80024f4:	d107      	bne.n	8002506 <psee_sensor_sequential_read+0x2e>
 80024f6:	4623      	mov	r3, r4

	for(uint32_t d_index = 0; d_index < n_word; d_index ++ ) {
 80024f8:	2200      	movs	r2, #0
 80024fa:	4295      	cmp	r5, r2
 80024fc:	f103 0304 	add.w	r3, r3, #4
 8002500:	d807      	bhi.n	8002512 <psee_sensor_sequential_read+0x3a>
		uint16_t *p_data = (uint16_t *) &data[d_index];
		data[d_index] = (__builtin_bswap16 (p_data[0]) << 16) + (__builtin_bswap16 (p_data[1]));
	}

}
 8002502:	b003      	add	sp, #12
 8002504:	bd30      	pop	{r4, r5, pc}
	assert(status == pdTRUE);
 8002506:	4b0a      	ldr	r3, [pc, #40]	@ (8002530 <psee_sensor_sequential_read+0x58>)
 8002508:	2178      	movs	r1, #120	@ 0x78
 800250a:	4a0a      	ldr	r2, [pc, #40]	@ (8002534 <psee_sensor_sequential_read+0x5c>)
 800250c:	480a      	ldr	r0, [pc, #40]	@ (8002538 <psee_sensor_sequential_read+0x60>)
 800250e:	f028 f855 	bl	802a5bc <__assert_func>
		data[d_index] = (__builtin_bswap16 (p_data[0]) << 16) + (__builtin_bswap16 (p_data[1]));
 8002512:	f833 0c04 	ldrh.w	r0, [r3, #-4]
	for(uint32_t d_index = 0; d_index < n_word; d_index ++ ) {
 8002516:	3201      	adds	r2, #1
		data[d_index] = (__builtin_bswap16 (p_data[0]) << 16) + (__builtin_bswap16 (p_data[1]));
 8002518:	f833 1c02 	ldrh.w	r1, [r3, #-2]
 800251c:	ba40      	rev16	r0, r0
 800251e:	ba49      	rev16	r1, r1
 8002520:	0400      	lsls	r0, r0, #16
 8002522:	fa10 f181 	uxtah	r1, r0, r1
 8002526:	f843 1c04 	str.w	r1, [r3, #-4]
	for(uint32_t d_index = 0; d_index < n_word; d_index ++ ) {
 800252a:	e7e6      	b.n	80024fa <psee_sensor_sequential_read+0x22>
 800252c:	20008188 	.word	0x20008188
 8002530:	0802d1d8 	.word	0x0802d1d8
 8002534:	0802d4b8 	.word	0x0802d4b8
 8002538:	0802d46c 	.word	0x0802d46c

0800253c <psee_sensor_sequential_write>:
/**
 * @brief Platform dependent function to perform a sequential-write operation to the sensor's register.
 * @param register_data Address of the data array that needs to be written
 * @param n_bytes Total number of bytes that needs to be written
 */
void psee_sensor_sequential_write(uint8_t *register_data, uint16_t n_bytes) {
 800253c:	4602      	mov	r2, r0

	BaseType_t status = ucDrvI2cWriteBytes(drv_i2c, (I2C_ADDRESS << 1),
 800253e:	4808      	ldr	r0, [pc, #32]	@ (8002560 <psee_sensor_sequential_write+0x24>)
void psee_sensor_sequential_write(uint8_t *register_data, uint16_t n_bytes) {
 8002540:	b508      	push	{r3, lr}
	BaseType_t status = ucDrvI2cWriteBytes(drv_i2c, (I2C_ADDRESS << 1),
 8002542:	6800      	ldr	r0, [r0, #0]
void psee_sensor_sequential_write(uint8_t *register_data, uint16_t n_bytes) {
 8002544:	460b      	mov	r3, r1
	BaseType_t status = ucDrvI2cWriteBytes(drv_i2c, (I2C_ADDRESS << 1),
 8002546:	2178      	movs	r1, #120	@ 0x78
 8002548:	f006 fe8a 	bl	8009260 <ucDrvI2cWriteBytes>
			register_data, n_bytes);
	assert(status == pdTRUE);
 800254c:	2801      	cmp	r0, #1
 800254e:	d005      	beq.n	800255c <psee_sensor_sequential_write+0x20>
 8002550:	4b04      	ldr	r3, [pc, #16]	@ (8002564 <psee_sensor_sequential_write+0x28>)
 8002552:	218a      	movs	r1, #138	@ 0x8a
 8002554:	4a04      	ldr	r2, [pc, #16]	@ (8002568 <psee_sensor_sequential_write+0x2c>)
 8002556:	4805      	ldr	r0, [pc, #20]	@ (800256c <psee_sensor_sequential_write+0x30>)
 8002558:	f028 f830 	bl	802a5bc <__assert_func>
}
 800255c:	bd08      	pop	{r3, pc}
 800255e:	bf00      	nop
 8002560:	20008188 	.word	0x20008188
 8002564:	0802d1d8 	.word	0x0802d1d8
 8002568:	0802d49b 	.word	0x0802d49b
 800256c:	0802d46c 	.word	0x0802d46c

08002570 <psee_sensor_platform_init>:

/**
 * @brief Platform dependent initialization routine.
 */
void psee_sensor_platform_init() {
 8002570:	b510      	push	{r4, lr}

	/*-------------------- Without Modified Hardware-----------------------------*/

	HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8002572:	4c20      	ldr	r4, [pc, #128]	@ (80025f4 <psee_sensor_platform_init+0x84>)
 8002574:	2200      	movs	r2, #0
 8002576:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800257a:	4620      	mov	r0, r4
 800257c:	f008 fdc2 	bl	800b104 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8002580:	2001      	movs	r0, #1
 8002582:	f007 f973 	bl	800986c <HAL_Delay>

	/* Turn on power supplies of Saphir (PSU_EN) */
	HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_SET);
 8002586:	2201      	movs	r2, #1
 8002588:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800258c:	4620      	mov	r0, r4
 800258e:	f008 fdb9 	bl	800b104 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8002592:	2001      	movs	r0, #1
 8002594:	f007 f96a 	bl	800986c <HAL_Delay>
	/*
	 * @note ULP_ENB would be already logic high.
	 */

	/* Switch ON PSU_EN_1V1 */
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, GPIO_PIN_SET);
 8002598:	2201      	movs	r2, #1
 800259a:	2180      	movs	r1, #128	@ 0x80
 800259c:	4816      	ldr	r0, [pc, #88]	@ (80025f8 <psee_sensor_platform_init+0x88>)
 800259e:	f008 fdb1 	bl	800b104 <HAL_GPIO_WritePin>
	psee_sleep_us_imp(TIO_start);
 80025a2:	2064      	movs	r0, #100	@ 0x64
 80025a4:	f7ff ff3c 	bl	8002420 <psee_sleep_us_imp>

	/* Switch ON PSU_EN_1V8 */
	HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_SET);
 80025a8:	2201      	movs	r2, #1
 80025aa:	4814      	ldr	r0, [pc, #80]	@ (80025fc <psee_sensor_platform_init+0x8c>)
 80025ac:	4611      	mov	r1, r2
 80025ae:	f008 fda9 	bl	800b104 <HAL_GPIO_WritePin>
	psee_sleep_us_imp(Tana_start);
 80025b2:	2064      	movs	r0, #100	@ 0x64
 80025b4:	f7ff ff34 	bl	8002420 <psee_sleep_us_imp>

	/* Switch ON PSU_EN_2V5 */
	HAL_GPIO_WritePin(GPIOH, GPIO_PIN_6, GPIO_PIN_SET);
 80025b8:	4620      	mov	r0, r4
 80025ba:	2201      	movs	r2, #1
 80025bc:	2140      	movs	r1, #64	@ 0x40
 80025be:	f008 fda1 	bl	800b104 <HAL_GPIO_WritePin>

	/* Toggle ON ULP_ENB */
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8, GPIO_PIN_SET);
 80025c2:	2201      	movs	r2, #1
 80025c4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80025c8:	480d      	ldr	r0, [pc, #52]	@ (8002600 <psee_sensor_platform_init+0x90>)
 80025ca:	f008 fd9b 	bl	800b104 <HAL_GPIO_WritePin>
	psee_sleep_us_imp(Tclk_start);
 80025ce:	20c8      	movs	r0, #200	@ 0xc8
 80025d0:	f7ff ff26 	bl	8002420 <psee_sleep_us_imp>

	/* Start the 10MHz PWM signal */
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 80025d4:	2100      	movs	r1, #0
 80025d6:	480b      	ldr	r0, [pc, #44]	@ (8002604 <psee_sensor_platform_init+0x94>)
 80025d8:	f00b fe9a 	bl	800e310 <HAL_TIM_PWM_Start>
	psee_sleep_us_imp(trstn_start);
 80025dc:	2064      	movs	r0, #100	@ 0x64
 80025de:	f7ff ff1f 	bl	8002420 <psee_sleep_us_imp>

	/* Toggle ON RSTN */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 80025e2:	2201      	movs	r2, #1
 80025e4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80025e8:	4807      	ldr	r0, [pc, #28]	@ (8002608 <psee_sensor_platform_init+0x98>)
}
 80025ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 80025ee:	f008 bd89 	b.w	800b104 <HAL_GPIO_WritePin>
 80025f2:	bf00      	nop
 80025f4:	40021c00 	.word	0x40021c00
 80025f8:	40021800 	.word	0x40021800
 80025fc:	40022000 	.word	0x40022000
 8002600:	40021400 	.word	0x40021400
 8002604:	20008388 	.word	0x20008388
 8002608:	40020400 	.word	0x40020400

0800260c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800260c:	4b0d      	ldr	r3, [pc, #52]	@ (8002644 <HAL_MspInit+0x38>)
{
 800260e:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002610:	210f      	movs	r1, #15
 8002612:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8002616:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002618:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800261c:	641a      	str	r2, [r3, #64]	@ 0x40
 800261e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002620:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8002624:	9200      	str	r2, [sp, #0]
 8002626:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002628:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800262a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800262e:	645a      	str	r2, [r3, #68]	@ 0x44
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002630:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002632:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002634:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002638:	9301      	str	r3, [sp, #4]
 800263a:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800263c:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800263e:	f007 b939 	b.w	80098b4 <HAL_NVIC_SetPriority>
 8002642:	bf00      	nop
 8002644:	40023800 	.word	0x40023800

08002648 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8002648:	6802      	ldr	r2, [r0, #0]
{
 800264a:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 800264c:	4b08      	ldr	r3, [pc, #32]	@ (8002670 <HAL_CRC_MspInit+0x28>)
 800264e:	429a      	cmp	r2, r3
 8002650:	d10b      	bne.n	800266a <HAL_CRC_MspInit+0x22>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002652:	f8d3 2830 	ldr.w	r2, [r3, #2096]	@ 0x830
 8002656:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800265a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800265e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002662:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002666:	9301      	str	r3, [sp, #4]
 8002668:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800266a:	b002      	add	sp, #8
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	40023000 	.word	0x40023000

08002674 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8002674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002678:	b08c      	sub	sp, #48	@ 0x30
 800267a:	4607      	mov	r7, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800267c:	2214      	movs	r2, #20
 800267e:	2100      	movs	r1, #0
 8002680:	a807      	add	r0, sp, #28
 8002682:	f028 ff4d 	bl	802b520 <memset>
  if(hdcmi->Instance==DCMI)
 8002686:	683a      	ldr	r2, [r7, #0]
 8002688:	4b51      	ldr	r3, [pc, #324]	@ (80027d0 <HAL_DCMI_MspInit+0x15c>)
 800268a:	429a      	cmp	r2, r3
 800268c:	f040 809d 	bne.w	80027ca <HAL_DCMI_MspInit+0x156>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8002690:	4b50      	ldr	r3, [pc, #320]	@ (80027d4 <HAL_DCMI_MspInit+0x160>)
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002692:	2603      	movs	r6, #3
 8002694:	240d      	movs	r4, #13
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002696:	f04f 0802 	mov.w	r8, #2
    __HAL_RCC_DCMI_CLK_ENABLE();
 800269a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800269c:	a907      	add	r1, sp, #28
 800269e:	484e      	ldr	r0, [pc, #312]	@ (80027d8 <HAL_DCMI_MspInit+0x164>)

    GPIO_InitStruct.Pin = GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a0:	2500      	movs	r5, #0
    __HAL_RCC_DCMI_CLK_ENABLE();
 80026a2:	f042 0201 	orr.w	r2, r2, #1
 80026a6:	635a      	str	r2, [r3, #52]	@ 0x34
 80026a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80026aa:	f002 0201 	and.w	r2, r2, #1
 80026ae:	9201      	str	r2, [sp, #4]
 80026b0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80026b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80026b4:	f042 0210 	orr.w	r2, r2, #16
 80026b8:	631a      	str	r2, [r3, #48]	@ 0x30
 80026ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80026bc:	f002 0210 	and.w	r2, r2, #16
 80026c0:	9202      	str	r2, [sp, #8]
 80026c2:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80026c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80026c6:	f042 0208 	orr.w	r2, r2, #8
 80026ca:	631a      	str	r2, [r3, #48]	@ 0x30
 80026cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80026ce:	f002 0208 	and.w	r2, r2, #8
 80026d2:	9203      	str	r2, [sp, #12]
 80026d4:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80026d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80026d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80026dc:	631a      	str	r2, [r3, #48]	@ 0x30
 80026de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80026e0:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 80026e4:	9204      	str	r2, [sp, #16]
 80026e6:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80026e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80026ea:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80026ee:	631a      	str	r2, [r3, #48]	@ 0x30
 80026f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80026f2:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80026f6:	9205      	str	r2, [sp, #20]
 80026f8:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80026fc:	f042 0201 	orr.w	r2, r2, #1
 8002700:	631a      	str	r2, [r3, #48]	@ 0x30
 8002702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002704:	f003 0301 	and.w	r3, r3, #1
 8002708:	9306      	str	r3, [sp, #24]
 800270a:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800270c:	2360      	movs	r3, #96	@ 0x60
 800270e:	e9cd 3807 	strd	r3, r8, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002712:	e9cd 640a 	strd	r6, r4, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002716:	f008 fb71 	bl	800adfc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800271a:	2308      	movs	r3, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800271c:	a907      	add	r1, sp, #28
 800271e:	482f      	ldr	r0, [pc, #188]	@ (80027dc <HAL_DCMI_MspInit+0x168>)
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002720:	940b      	str	r4, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002722:	e9cd 3807 	strd	r3, r8, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002726:	e9cd 5609 	strd	r5, r6, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800272a:	f008 fb67 	bl	800adfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800272e:	f44f 7300 	mov.w	r3, #512	@ 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002732:	a907      	add	r1, sp, #28
 8002734:	482a      	ldr	r0, [pc, #168]	@ (80027e0 <HAL_DCMI_MspInit+0x16c>)
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002736:	940b      	str	r4, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002738:	e9cd 3807 	strd	r3, r8, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800273c:	e9cd 5609 	strd	r5, r6, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002740:	f008 fb5c 	bl	800adfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_9|GPIO_PIN_11
 8002744:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
                          |GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002748:	a907      	add	r1, sp, #28
 800274a:	4826      	ldr	r0, [pc, #152]	@ (80027e4 <HAL_DCMI_MspInit+0x170>)
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800274c:	940b      	str	r4, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800274e:	e9cd 3807 	strd	r3, r8, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002752:	e9cd 5609 	strd	r5, r6, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002756:	f008 fb51 	bl	800adfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 800275a:	2350      	movs	r3, #80	@ 0x50
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800275c:	a907      	add	r1, sp, #28
 800275e:	4822      	ldr	r0, [pc, #136]	@ (80027e8 <HAL_DCMI_MspInit+0x174>)
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002760:	940b      	str	r4, [sp, #44]	@ 0x2c

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 8002762:	4c22      	ldr	r4, [pc, #136]	@ (80027ec <HAL_DCMI_MspInit+0x178>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002764:	e9cd 3807 	strd	r3, r8, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002768:	e9cd 5609 	strd	r5, r6, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800276c:	f008 fb46 	bl	800adfc <HAL_GPIO_Init>
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 8002770:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002774:	4a1e      	ldr	r2, [pc, #120]	@ (80027f0 <HAL_DCMI_MspInit+0x17c>)
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002776:	f44f 6180 	mov.w	r1, #1024	@ 0x400
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 800277a:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
    hdma_dcmi.Init.Priority = DMA_PRIORITY_HIGH;
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800277e:	f44f 3c00 	mov.w	ip, #131072	@ 0x20000
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002782:	62a6      	str	r6, [r4, #40]	@ 0x28
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 8002784:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002788:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800278c:	e9c4 1304 	strd	r1, r3, [r4, #16]
    hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 8002790:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002794:	e9c4 0306 	strd	r0, r3, [r4, #24]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002798:	2304      	movs	r3, #4
    hdma_dcmi.Init.MemBurst = DMA_MBURST_INC4;
    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 800279a:	4620      	mov	r0, r4
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800279c:	e9c4 c308 	strd	ip, r3, [r4, #32]
    hdma_dcmi.Init.MemBurst = DMA_MBURST_INC4;
 80027a0:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 80027a4:	e9c4 5502 	strd	r5, r5, [r4, #8]
    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80027a8:	e9c4 350b 	strd	r3, r5, [r4, #44]	@ 0x2c
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 80027ac:	f007 fade 	bl	8009d6c <HAL_DMA_Init>
 80027b0:	b108      	cbz	r0, 80027b6 <HAL_DCMI_MspInit+0x142>
    {
      Error_Handler();
 80027b2:	f7ff fc8d 	bl	80020d0 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 5, 0);
 80027b6:	204e      	movs	r0, #78	@ 0x4e
 80027b8:	2200      	movs	r2, #0
 80027ba:	2105      	movs	r1, #5
    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 80027bc:	64bc      	str	r4, [r7, #72]	@ 0x48
 80027be:	63a7      	str	r7, [r4, #56]	@ 0x38
    HAL_NVIC_SetPriority(DCMI_IRQn, 5, 0);
 80027c0:	f007 f878 	bl	80098b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 80027c4:	204e      	movs	r0, #78	@ 0x4e
 80027c6:	f007 f8a7 	bl	8009918 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 80027ca:	b00c      	add	sp, #48	@ 0x30
 80027cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80027d0:	50050000 	.word	0x50050000
 80027d4:	40023800 	.word	0x40023800
 80027d8:	40021000 	.word	0x40021000
 80027dc:	40020c00 	.word	0x40020c00
 80027e0:	40021800 	.word	0x40021800
 80027e4:	40021c00 	.word	0x40021c00
 80027e8:	40020000 	.word	0x40020000
 80027ec:	200085b0 	.word	0x200085b0
 80027f0:	40026428 	.word	0x40026428

080027f4 <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 80027f4:	4b0e      	ldr	r3, [pc, #56]	@ (8002830 <HAL_DMA2D_MspInit+0x3c>)
{
 80027f6:	b507      	push	{r0, r1, r2, lr}
  if(hdma2d->Instance==DMA2D)
 80027f8:	6802      	ldr	r2, [r0, #0]
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d115      	bne.n	800282a <HAL_DMA2D_MspInit+0x36>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80027fe:	f5a3 43f0 	sub.w	r3, r3, #30720	@ 0x7800
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8002802:	2105      	movs	r1, #5
 8002804:	205a      	movs	r0, #90	@ 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002806:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002808:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800280c:	631a      	str	r2, [r3, #48]	@ 0x30
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800280e:	2200      	movs	r2, #0
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002812:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002816:	9301      	str	r3, [sp, #4]
 8002818:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800281a:	f007 f84b 	bl	80098b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800281e:	205a      	movs	r0, #90	@ 0x5a
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8002820:	b003      	add	sp, #12
 8002822:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8002826:	f007 b877 	b.w	8009918 <HAL_NVIC_EnableIRQ>
}
 800282a:	b003      	add	sp, #12
 800282c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002830:	4002b000 	.word	0x4002b000

08002834 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002834:	b510      	push	{r4, lr}
 8002836:	b0aa      	sub	sp, #168	@ 0xa8
 8002838:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800283a:	2214      	movs	r2, #20
 800283c:	2100      	movs	r1, #0
 800283e:	a804      	add	r0, sp, #16
 8002840:	f028 fe6e 	bl	802b520 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002844:	2284      	movs	r2, #132	@ 0x84
 8002846:	2100      	movs	r1, #0
 8002848:	a809      	add	r0, sp, #36	@ 0x24
 800284a:	f028 fe69 	bl	802b520 <memset>
  if(hi2c->Instance==I2C1)
 800284e:	6823      	ldr	r3, [r4, #0]
 8002850:	4a33      	ldr	r2, [pc, #204]	@ (8002920 <HAL_I2C_MspInit+0xec>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d135      	bne.n	80028c2 <HAL_I2C_MspInit+0x8e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002856:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800285a:	a809      	add	r0, sp, #36	@ 0x24
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800285c:	9309      	str	r3, [sp, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800285e:	f00a fdb5 	bl	800d3cc <HAL_RCCEx_PeriphCLKConfig>
 8002862:	b108      	cbz	r0, 8002868 <HAL_I2C_MspInit+0x34>
    {
      Error_Handler();
 8002864:	f7ff fc34 	bl	80020d0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002868:	4c2e      	ldr	r4, [pc, #184]	@ (8002924 <HAL_I2C_MspInit+0xf0>)
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800286a:	f44f 7040 	mov.w	r0, #768	@ 0x300
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800286e:	f04f 0c01 	mov.w	ip, #1
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002872:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002874:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002876:	f043 0302 	orr.w	r3, r3, #2
 800287a:	6323      	str	r3, [r4, #48]	@ 0x30
 800287c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	9300      	str	r3, [sp, #0]
 8002884:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002886:	2312      	movs	r3, #18
 8002888:	e9cd 0304 	strd	r0, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800288c:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800288e:	4826      	ldr	r0, [pc, #152]	@ (8002928 <HAL_I2C_MspInit+0xf4>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002890:	e9cd c306 	strd	ip, r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002894:	2304      	movs	r3, #4
 8002896:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002898:	f008 fab0 	bl	800adfc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800289c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 800289e:	201f      	movs	r0, #31
 80028a0:	2200      	movs	r2, #0
 80028a2:	2105      	movs	r1, #5
    __HAL_RCC_I2C1_CLK_ENABLE();
 80028a4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80028a8:	6423      	str	r3, [r4, #64]	@ 0x40
 80028aa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80028ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028b0:	9301      	str	r3, [sp, #4]
 80028b2:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80028b4:	f006 fffe 	bl	80098b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80028b8:	201f      	movs	r0, #31
 80028ba:	f007 f82d 	bl	8009918 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80028be:	b02a      	add	sp, #168	@ 0xa8
 80028c0:	bd10      	pop	{r4, pc}
  else if(hi2c->Instance==I2C3)
 80028c2:	4a1a      	ldr	r2, [pc, #104]	@ (800292c <HAL_I2C_MspInit+0xf8>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d1fa      	bne.n	80028be <HAL_I2C_MspInit+0x8a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80028c8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028cc:	a809      	add	r0, sp, #36	@ 0x24
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80028ce:	9309      	str	r3, [sp, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028d0:	f00a fd7c 	bl	800d3cc <HAL_RCCEx_PeriphCLKConfig>
 80028d4:	b108      	cbz	r0, 80028da <HAL_I2C_MspInit+0xa6>
      Error_Handler();
 80028d6:	f7ff fbfb 	bl	80020d0 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80028da:	4c12      	ldr	r4, [pc, #72]	@ (8002924 <HAL_I2C_MspInit+0xf0>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028dc:	f44f 72c0 	mov.w	r2, #384	@ 0x180
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028e0:	2101      	movs	r1, #1
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80028e2:	4813      	ldr	r0, [pc, #76]	@ (8002930 <HAL_I2C_MspInit+0xfc>)
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80028e4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80028e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028ea:	6323      	str	r3, [r4, #48]	@ 0x30
 80028ec:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80028ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028f2:	9302      	str	r3, [sp, #8]
 80028f4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028f6:	2312      	movs	r3, #18
 80028f8:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028fc:	2303      	movs	r3, #3
 80028fe:	e9cd 1306 	strd	r1, r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002902:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002904:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002906:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002908:	f008 fa78 	bl	800adfc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800290c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800290e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002912:	6423      	str	r3, [r4, #64]	@ 0x40
 8002914:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002916:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800291a:	9303      	str	r3, [sp, #12]
 800291c:	9b03      	ldr	r3, [sp, #12]
}
 800291e:	e7ce      	b.n	80028be <HAL_I2C_MspInit+0x8a>
 8002920:	40005400 	.word	0x40005400
 8002924:	40023800 	.word	0x40023800
 8002928:	40020400 	.word	0x40020400
 800292c:	40005c00 	.word	0x40005c00
 8002930:	40021c00 	.word	0x40021c00

08002934 <HAL_I2C_MspDeInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
  if(hi2c->Instance==I2C1)
 8002934:	4a17      	ldr	r2, [pc, #92]	@ (8002994 <HAL_I2C_MspDeInit+0x60>)
{
 8002936:	b508      	push	{r3, lr}
  if(hi2c->Instance==I2C1)
 8002938:	6803      	ldr	r3, [r0, #0]
 800293a:	4293      	cmp	r3, r2
 800293c:	d114      	bne.n	8002968 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800293e:	f502 32f2 	add.w	r2, r2, #123904	@ 0x1e400

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARDUINO_SCL_D15_GPIO_Port, ARDUINO_SCL_D15_Pin);
 8002942:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002946:	4814      	ldr	r0, [pc, #80]	@ (8002998 <HAL_I2C_MspDeInit+0x64>)
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002948:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800294a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800294e:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(ARDUINO_SCL_D15_GPIO_Port, ARDUINO_SCL_D15_Pin);
 8002950:	f008 fb38 	bl	800afc4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARDUINO_SDA_D14_GPIO_Port, ARDUINO_SDA_D14_Pin);
 8002954:	4810      	ldr	r0, [pc, #64]	@ (8002998 <HAL_I2C_MspDeInit+0x64>)
 8002956:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800295a:	f008 fb33 	bl	800afc4 <HAL_GPIO_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 800295e:	201f      	movs	r0, #31
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8002960:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8002964:	f006 bfe6 	b.w	8009934 <HAL_NVIC_DisableIRQ>
  else if(hi2c->Instance==I2C3)
 8002968:	4a0c      	ldr	r2, [pc, #48]	@ (800299c <HAL_I2C_MspDeInit+0x68>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d110      	bne.n	8002990 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 800296e:	f502 32ee 	add.w	r2, r2, #121856	@ 0x1dc00
    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_7);
 8002972:	2180      	movs	r1, #128	@ 0x80
 8002974:	480a      	ldr	r0, [pc, #40]	@ (80029a0 <HAL_I2C_MspDeInit+0x6c>)
    __HAL_RCC_I2C3_CLK_DISABLE();
 8002976:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8002978:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800297c:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_7);
 800297e:	f008 fb21 	bl	800afc4 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_8);
 8002982:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002986:	4806      	ldr	r0, [pc, #24]	@ (80029a0 <HAL_I2C_MspDeInit+0x6c>)
}
 8002988:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_8);
 800298c:	f008 bb1a 	b.w	800afc4 <HAL_GPIO_DeInit>
}
 8002990:	bd08      	pop	{r3, pc}
 8002992:	bf00      	nop
 8002994:	40005400 	.word	0x40005400
 8002998:	40020400 	.word	0x40020400
 800299c:	40005c00 	.word	0x40005c00
 80029a0:	40021c00 	.word	0x40021c00

080029a4 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80029a4:	b570      	push	{r4, r5, r6, lr}
 80029a6:	b0b0      	sub	sp, #192	@ 0xc0
 80029a8:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029aa:	2214      	movs	r2, #20
 80029ac:	2100      	movs	r1, #0
 80029ae:	a80a      	add	r0, sp, #40	@ 0x28
 80029b0:	f028 fdb6 	bl	802b520 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80029b4:	2284      	movs	r2, #132	@ 0x84
 80029b6:	2100      	movs	r1, #0
 80029b8:	a80f      	add	r0, sp, #60	@ 0x3c
 80029ba:	f028 fdb1 	bl	802b520 <memset>
  if(hltdc->Instance==LTDC)
 80029be:	6822      	ldr	r2, [r4, #0]
 80029c0:	4b6e      	ldr	r3, [pc, #440]	@ (8002b7c <HAL_LTDC_MspInit+0x1d8>)
 80029c2:	429a      	cmp	r2, r3
 80029c4:	f040 80d7 	bne.w	8002b76 <HAL_LTDC_MspInit+0x1d2>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80029c8:	2308      	movs	r3, #8
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
    PeriphClkInitStruct.PLLSAIDivQ = 1;
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 80029ca:	2001      	movs	r0, #1
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80029cc:	930f      	str	r3, [sp, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 80029ce:	2332      	movs	r3, #50	@ 0x32
 80029d0:	9314      	str	r3, [sp, #80]	@ 0x50
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80029d2:	2302      	movs	r3, #2
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80029d4:	e9cd 3315 	strd	r3, r3, [sp, #84]	@ 0x54
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 80029d8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80029dc:	e9cd 0319 	strd	r0, r3, [sp, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029e0:	a80f      	add	r0, sp, #60	@ 0x3c
 80029e2:	f00a fcf3 	bl	800d3cc <HAL_RCCEx_PeriphCLKConfig>
 80029e6:	b108      	cbz	r0, 80029ec <HAL_LTDC_MspInit+0x48>
    {
      Error_Handler();
 80029e8:	f7ff fb72 	bl	80020d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80029ec:	4b64      	ldr	r3, [pc, #400]	@ (8002b80 <HAL_LTDC_MspInit+0x1dc>)
    PA2     ------> LTDC_R1
    PJ2     ------> LTDC_R3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ee:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f0:	2502      	movs	r5, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80029f2:	260e      	movs	r6, #14
    __HAL_RCC_LTDC_CLK_ENABLE();
 80029f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80029f6:	a90a      	add	r1, sp, #40	@ 0x28
 80029f8:	4862      	ldr	r0, [pc, #392]	@ (8002b84 <HAL_LTDC_MspInit+0x1e0>)
    __HAL_RCC_LTDC_CLK_ENABLE();
 80029fa:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80029fe:	645a      	str	r2, [r3, #68]	@ 0x44
 8002a00:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002a02:	f002 6280 	and.w	r2, r2, #67108864	@ 0x4000000
 8002a06:	9201      	str	r2, [sp, #4]
 8002a08:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a0a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a0c:	f042 0210 	orr.w	r2, r2, #16
 8002a10:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a12:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a14:	f002 0210 	and.w	r2, r2, #16
 8002a18:	9202      	str	r2, [sp, #8]
 8002a1a:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002a1c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a1e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002a22:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a24:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a26:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8002a2a:	9203      	str	r2, [sp, #12]
 8002a2c:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002a2e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a30:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a34:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a36:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a38:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 8002a3c:	9204      	str	r2, [sp, #16]
 8002a3e:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a40:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a42:	f042 0208 	orr.w	r2, r2, #8
 8002a46:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a48:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a4a:	f002 0208 	and.w	r2, r2, #8
 8002a4e:	9205      	str	r2, [sp, #20]
 8002a50:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a52:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a54:	f042 0204 	orr.w	r2, r2, #4
 8002a58:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a5a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a5c:	f002 0204 	and.w	r2, r2, #4
 8002a60:	9206      	str	r2, [sp, #24]
 8002a62:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002a64:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a66:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002a6a:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a6c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a6e:	f402 6280 	and.w	r2, r2, #1024	@ 0x400
 8002a72:	9207      	str	r2, [sp, #28]
 8002a74:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002a76:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a78:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a7c:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a7e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a80:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8002a84:	9208      	str	r2, [sp, #32]
 8002a86:	9a08      	ldr	r2, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a88:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a8a:	f042 0201 	orr.w	r2, r2, #1
 8002a8e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002a92:	960e      	str	r6, [sp, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a94:	f003 0301 	and.w	r3, r3, #1
 8002a98:	9309      	str	r3, [sp, #36]	@ 0x24
 8002a9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a9c:	2310      	movs	r3, #16
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a9e:	e9cd 440c 	strd	r4, r4, [sp, #48]	@ 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aa2:	e9cd 350a 	strd	r3, r5, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002aa6:	f008 f9a9 	bl	800adfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002aaa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002aae:	a90a      	add	r1, sp, #40	@ 0x28
 8002ab0:	4835      	ldr	r0, [pc, #212]	@ (8002b88 <HAL_LTDC_MspInit+0x1e4>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002ab2:	960e      	str	r6, [sp, #56]	@ 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab4:	e9cd 350a 	strd	r3, r5, [sp, #40]	@ 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ab8:	e9cd 440c 	strd	r4, r4, [sp, #48]	@ 0x30
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002abc:	f008 f99e 	bl	800adfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_11|GPIO_PIN_8
 8002ac0:	f64a 73fc 	movw	r3, #45052	@ 0xaffc
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002ac4:	a90a      	add	r1, sp, #40	@ 0x28
 8002ac6:	4831      	ldr	r0, [pc, #196]	@ (8002b8c <HAL_LTDC_MspInit+0x1e8>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002ac8:	960e      	str	r6, [sp, #56]	@ 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aca:	e9cd 350a 	strd	r3, r5, [sp, #40]	@ 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ace:	e9cd 440c 	strd	r4, r4, [sp, #48]	@ 0x30
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002ad2:	f008 f993 	bl	800adfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002ad6:	2340      	movs	r3, #64	@ 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ad8:	a90a      	add	r1, sp, #40	@ 0x28
 8002ada:	482d      	ldr	r0, [pc, #180]	@ (8002b90 <HAL_LTDC_MspInit+0x1ec>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002adc:	960e      	str	r6, [sp, #56]	@ 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ade:	e9cd 350a 	strd	r3, r5, [sp, #40]	@ 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ae2:	e9cd 440c 	strd	r4, r4, [sp, #48]	@ 0x30
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ae6:	f008 f989 	bl	800adfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002aea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002aee:	a90a      	add	r1, sp, #40	@ 0x28
 8002af0:	4828      	ldr	r0, [pc, #160]	@ (8002b94 <HAL_LTDC_MspInit+0x1f0>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002af2:	960e      	str	r6, [sp, #56]	@ 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002af4:	e9cd 350a 	strd	r3, r5, [sp, #40]	@ 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002af8:	e9cd 440c 	strd	r4, r4, [sp, #48]	@ 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002afc:	f008 f97e 	bl	800adfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
 8002b00:	23f7      	movs	r3, #247	@ 0xf7
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002b02:	a90a      	add	r1, sp, #40	@ 0x28
 8002b04:	4824      	ldr	r0, [pc, #144]	@ (8002b98 <HAL_LTDC_MspInit+0x1f4>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002b06:	960e      	str	r6, [sp, #56]	@ 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b08:	e9cd 350a 	strd	r3, r5, [sp, #40]	@ 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b0c:	e9cd 440c 	strd	r4, r4, [sp, #48]	@ 0x30
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002b10:	f008 f974 	bl	800adfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002b14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002b18:	a90a      	add	r1, sp, #40	@ 0x28
 8002b1a:	481b      	ldr	r0, [pc, #108]	@ (8002b88 <HAL_LTDC_MspInit+0x1e4>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b1c:	e9cd 350a 	strd	r3, r5, [sp, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002b20:	2309      	movs	r3, #9
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b22:	e9cd 440c 	strd	r4, r4, [sp, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002b26:	930e      	str	r3, [sp, #56]	@ 0x38
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002b28:	f008 f968 	bl	800adfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_14;
 8002b2c:	f44f 438c 	mov.w	r3, #17920	@ 0x4600
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002b30:	a90a      	add	r1, sp, #40	@ 0x28
 8002b32:	481a      	ldr	r0, [pc, #104]	@ (8002b9c <HAL_LTDC_MspInit+0x1f8>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002b34:	960e      	str	r6, [sp, #56]	@ 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b36:	e9cd 350a 	strd	r3, r5, [sp, #40]	@ 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b3a:	e9cd 440c 	strd	r4, r4, [sp, #48]	@ 0x30
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002b3e:	f008 f95d 	bl	800adfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002b42:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b44:	a90a      	add	r1, sp, #40	@ 0x28
 8002b46:	4816      	ldr	r0, [pc, #88]	@ (8002ba0 <HAL_LTDC_MspInit+0x1fc>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002b48:	960e      	str	r6, [sp, #56]	@ 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b4a:	e9cd 350a 	strd	r3, r5, [sp, #40]	@ 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b4e:	e9cd 440c 	strd	r4, r4, [sp, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b52:	f008 f953 	bl	800adfc <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8002b56:	4622      	mov	r2, r4
 8002b58:	2105      	movs	r1, #5
 8002b5a:	2058      	movs	r0, #88	@ 0x58
 8002b5c:	f006 feaa 	bl	80098b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002b60:	2058      	movs	r0, #88	@ 0x58
 8002b62:	f006 fed9 	bl	8009918 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(LTDC_ER_IRQn, 5, 0);
 8002b66:	2059      	movs	r0, #89	@ 0x59
 8002b68:	4622      	mov	r2, r4
 8002b6a:	2105      	movs	r1, #5
 8002b6c:	f006 fea2 	bl	80098b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_ER_IRQn);
 8002b70:	2059      	movs	r0, #89	@ 0x59
 8002b72:	f006 fed1 	bl	8009918 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002b76:	b030      	add	sp, #192	@ 0xc0
 8002b78:	bd70      	pop	{r4, r5, r6, pc}
 8002b7a:	bf00      	nop
 8002b7c:	40016800 	.word	0x40016800
 8002b80:	40023800 	.word	0x40023800
 8002b84:	40021000 	.word	0x40021000
 8002b88:	40021800 	.word	0x40021800
 8002b8c:	40022400 	.word	0x40022400
 8002b90:	40020c00 	.word	0x40020c00
 8002b94:	40020800 	.word	0x40020800
 8002b98:	40022800 	.word	0x40022800
 8002b9c:	40022000 	.word	0x40022000
 8002ba0:	40020000 	.word	0x40020000

08002ba4 <HAL_QSPI_MspInit>:
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ba4:	2214      	movs	r2, #20
 8002ba6:	2100      	movs	r1, #0
{
 8002ba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002bac:	b08a      	sub	sp, #40	@ 0x28
 8002bae:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bb0:	eb0d 0002 	add.w	r0, sp, r2
 8002bb4:	f028 fcb4 	bl	802b520 <memset>
  if(hqspi->Instance==QUADSPI)
 8002bb8:	6822      	ldr	r2, [r4, #0]
 8002bba:	4b2c      	ldr	r3, [pc, #176]	@ (8002c6c <HAL_QSPI_MspInit+0xc8>)
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d151      	bne.n	8002c64 <HAL_QSPI_MspInit+0xc0>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002bc0:	4b2b      	ldr	r3, [pc, #172]	@ (8002c70 <HAL_QSPI_MspInit+0xcc>)
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc2:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002bc4:	2403      	movs	r4, #3
 8002bc6:	2609      	movs	r6, #9
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002bc8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bca:	f04f 0804 	mov.w	r8, #4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002bce:	a905      	add	r1, sp, #20
 8002bd0:	4828      	ldr	r0, [pc, #160]	@ (8002c74 <HAL_QSPI_MspInit+0xd0>)
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002bd2:	f042 0202 	orr.w	r2, r2, #2

    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd6:	2700      	movs	r7, #0
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002bd8:	639a      	str	r2, [r3, #56]	@ 0x38
 8002bda:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002bdc:	f002 0202 	and.w	r2, r2, #2
 8002be0:	9201      	str	r2, [sp, #4]
 8002be2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002be4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002be6:	f042 0210 	orr.w	r2, r2, #16
 8002bea:	631a      	str	r2, [r3, #48]	@ 0x30
 8002bec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002bee:	f002 0210 	and.w	r2, r2, #16
 8002bf2:	9202      	str	r2, [sp, #8]
 8002bf4:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bf6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002bf8:	f042 0202 	orr.w	r2, r2, #2
 8002bfc:	631a      	str	r2, [r3, #48]	@ 0x30
 8002bfe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002c00:	f002 0202 	and.w	r2, r2, #2
 8002c04:	9203      	str	r2, [sp, #12]
 8002c06:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c08:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002c0a:	f042 0208 	orr.w	r2, r2, #8
 8002c0e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c12:	f003 0308 	and.w	r3, r3, #8
 8002c16:	9304      	str	r3, [sp, #16]
 8002c18:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c1a:	e9cd 8505 	strd	r8, r5, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002c1e:	e9cd 4608 	strd	r4, r6, [sp, #32]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c22:	f008 f8eb 	bl	800adfc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002c26:	2340      	movs	r3, #64	@ 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c28:	a905      	add	r1, sp, #20
 8002c2a:	4813      	ldr	r0, [pc, #76]	@ (8002c78 <HAL_QSPI_MspInit+0xd4>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c2c:	e9cd 3505 	strd	r3, r5, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002c30:	230a      	movs	r3, #10
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c32:	e9cd 7407 	strd	r7, r4, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002c36:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c38:	f008 f8e0 	bl	800adfc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c3c:	a905      	add	r1, sp, #20
 8002c3e:	480e      	ldr	r0, [pc, #56]	@ (8002c78 <HAL_QSPI_MspInit+0xd4>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002c40:	9609      	str	r6, [sp, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c42:	e9cd 8505 	strd	r8, r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c46:	e9cd 7407 	strd	r7, r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c4a:	f008 f8d7 	bl	800adfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11;
 8002c4e:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c52:	a905      	add	r1, sp, #20
 8002c54:	4809      	ldr	r0, [pc, #36]	@ (8002c7c <HAL_QSPI_MspInit+0xd8>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002c56:	9609      	str	r6, [sp, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c58:	e9cd 3505 	strd	r3, r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c5c:	e9cd 7407 	strd	r7, r4, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c60:	f008 f8cc 	bl	800adfc <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002c64:	b00a      	add	sp, #40	@ 0x28
 8002c66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002c6a:	bf00      	nop
 8002c6c:	a0001000 	.word	0xa0001000
 8002c70:	40023800 	.word	0x40023800
 8002c74:	40021000 	.word	0x40021000
 8002c78:	40020400 	.word	0x40020400
 8002c7c:	40020c00 	.word	0x40020c00

08002c80 <HAL_QSPI_MspDeInit>:
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* hqspi)
{
  if(hqspi->Instance==QUADSPI)
 8002c80:	6802      	ldr	r2, [r0, #0]
{
 8002c82:	b508      	push	{r3, lr}
  if(hqspi->Instance==QUADSPI)
 8002c84:	4b0b      	ldr	r3, [pc, #44]	@ (8002cb4 <HAL_QSPI_MspDeInit+0x34>)
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d113      	bne.n	8002cb2 <HAL_QSPI_MspDeInit+0x32>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 8002c8a:	4a0b      	ldr	r2, [pc, #44]	@ (8002cb8 <HAL_QSPI_MspDeInit+0x38>)
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_2);
 8002c8c:	2104      	movs	r1, #4
 8002c8e:	480b      	ldr	r0, [pc, #44]	@ (8002cbc <HAL_QSPI_MspDeInit+0x3c>)
    __HAL_RCC_QSPI_CLK_DISABLE();
 8002c90:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8002c92:	f023 0302 	bic.w	r3, r3, #2
 8002c96:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_2);
 8002c98:	f008 f994 	bl	800afc4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6|GPIO_PIN_2);
 8002c9c:	2144      	movs	r1, #68	@ 0x44
 8002c9e:	4808      	ldr	r0, [pc, #32]	@ (8002cc0 <HAL_QSPI_MspDeInit+0x40>)
 8002ca0:	f008 f990 	bl	800afc4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11);
 8002ca4:	f44f 5160 	mov.w	r1, #14336	@ 0x3800
 8002ca8:	4806      	ldr	r0, [pc, #24]	@ (8002cc4 <HAL_QSPI_MspDeInit+0x44>)
  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }

}
 8002caa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11);
 8002cae:	f008 b989 	b.w	800afc4 <HAL_GPIO_DeInit>
}
 8002cb2:	bd08      	pop	{r3, pc}
 8002cb4:	a0001000 	.word	0xa0001000
 8002cb8:	40023800 	.word	0x40023800
 8002cbc:	40021000 	.word	0x40021000
 8002cc0:	40020400 	.word	0x40020400
 8002cc4:	40020c00 	.word	0x40020c00

08002cc8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002cc8:	b510      	push	{r4, lr}
 8002cca:	b088      	sub	sp, #32
 8002ccc:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cce:	2214      	movs	r2, #20
 8002cd0:	2100      	movs	r1, #0
 8002cd2:	a803      	add	r0, sp, #12
 8002cd4:	f028 fc24 	bl	802b520 <memset>
  if(htim_base->Instance==TIM1)
 8002cd8:	6823      	ldr	r3, [r4, #0]
 8002cda:	4a19      	ldr	r2, [pc, #100]	@ (8002d40 <HAL_TIM_Base_MspInit+0x78>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d10b      	bne.n	8002cf8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002ce0:	4b18      	ldr	r3, [pc, #96]	@ (8002d44 <HAL_TIM_Base_MspInit+0x7c>)
 8002ce2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002ce4:	f042 0201 	orr.w	r2, r2, #1
 8002ce8:	645a      	str	r2, [r3, #68]	@ 0x44
 8002cea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cec:	f003 0301 	and.w	r3, r3, #1
 8002cf0:	9300      	str	r3, [sp, #0]
 8002cf2:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002cf4:	b008      	add	sp, #32
 8002cf6:	bd10      	pop	{r4, pc}
  else if(htim_base->Instance==TIM2)
 8002cf8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cfc:	d1fa      	bne.n	8002cf4 <HAL_TIM_Base_MspInit+0x2c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002cfe:	f503 330e 	add.w	r3, r3, #145408	@ 0x23800
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d02:	a903      	add	r1, sp, #12
 8002d04:	4810      	ldr	r0, [pc, #64]	@ (8002d48 <HAL_TIM_Base_MspInit+0x80>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d06:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d08:	f042 0201 	orr.w	r2, r2, #1
 8002d0c:	641a      	str	r2, [r3, #64]	@ 0x40
 8002d0e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d10:	f002 0201 	and.w	r2, r2, #1
 8002d14:	9201      	str	r2, [sp, #4]
 8002d16:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d18:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d1a:	f042 0201 	orr.w	r2, r2, #1
 8002d1e:	631a      	str	r2, [r3, #48]	@ 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d20:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d26:	f003 0301 	and.w	r3, r3, #1
 8002d2a:	9302      	str	r3, [sp, #8]
 8002d2c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d2e:	2302      	movs	r3, #2
 8002d30:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002d34:	2301      	movs	r3, #1
 8002d36:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d38:	f008 f860 	bl	800adfc <HAL_GPIO_Init>
}
 8002d3c:	e7da      	b.n	8002cf4 <HAL_TIM_Base_MspInit+0x2c>
 8002d3e:	bf00      	nop
 8002d40:	40010000 	.word	0x40010000
 8002d44:	40023800 	.word	0x40023800
 8002d48:	40020000 	.word	0x40020000

08002d4c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002d4c:	b510      	push	{r4, lr}
 8002d4e:	b086      	sub	sp, #24
 8002d50:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d52:	2214      	movs	r2, #20
 8002d54:	2100      	movs	r1, #0
 8002d56:	a801      	add	r0, sp, #4
 8002d58:	f028 fbe2 	bl	802b520 <memset>
  if(htim->Instance==TIM1)
 8002d5c:	6822      	ldr	r2, [r4, #0]
 8002d5e:	4b0e      	ldr	r3, [pc, #56]	@ (8002d98 <HAL_TIM_MspPostInit+0x4c>)
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d116      	bne.n	8002d92 <HAL_TIM_MspPostInit+0x46>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d64:	f503 339c 	add.w	r3, r3, #79872	@ 0x13800
    GPIO_InitStruct.Pin = GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d68:	a901      	add	r1, sp, #4
 8002d6a:	480c      	ldr	r0, [pc, #48]	@ (8002d9c <HAL_TIM_MspPostInit+0x50>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d6c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d6e:	f042 0201 	orr.w	r2, r2, #1
 8002d72:	631a      	str	r2, [r3, #48]	@ 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d74:	f44f 7280 	mov.w	r2, #256	@ 0x100
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	9300      	str	r3, [sp, #0]
 8002d80:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d82:	2302      	movs	r3, #2
 8002d84:	e9cd 2301 	strd	r2, r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d88:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d8e:	f008 f835 	bl	800adfc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002d92:	b006      	add	sp, #24
 8002d94:	bd10      	pop	{r4, pc}
 8002d96:	bf00      	nop
 8002d98:	40010000 	.word	0x40010000
 8002d9c:	40020000 	.word	0x40020000

08002da0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002da0:	b570      	push	{r4, r5, r6, lr}
 8002da2:	b0aa      	sub	sp, #168	@ 0xa8
 8002da4:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002da6:	2214      	movs	r2, #20
 8002da8:	2100      	movs	r1, #0
 8002daa:	a804      	add	r0, sp, #16
 8002dac:	f028 fbb8 	bl	802b520 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002db0:	2284      	movs	r2, #132	@ 0x84
 8002db2:	2100      	movs	r1, #0
 8002db4:	a809      	add	r0, sp, #36	@ 0x24
 8002db6:	f028 fbb3 	bl	802b520 <memset>
  if(huart->Instance==USART1)
 8002dba:	6822      	ldr	r2, [r4, #0]
 8002dbc:	4b24      	ldr	r3, [pc, #144]	@ (8002e50 <HAL_UART_MspInit+0xb0>)
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d143      	bne.n	8002e4a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002dc2:	2340      	movs	r3, #64	@ 0x40
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002dc4:	a809      	add	r0, sp, #36	@ 0x24
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002dc6:	9309      	str	r3, [sp, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002dc8:	f00a fb00 	bl	800d3cc <HAL_RCCEx_PeriphCLKConfig>
 8002dcc:	b108      	cbz	r0, 8002dd2 <HAL_UART_MspInit+0x32>
    {
      Error_Handler();
 8002dce:	f7ff f97f 	bl	80020d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002dd2:	4b20      	ldr	r3, [pc, #128]	@ (8002e54 <HAL_UART_MspInit+0xb4>)
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd4:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dd6:	2602      	movs	r6, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002dd8:	2507      	movs	r5, #7
    __HAL_RCC_USART1_CLK_ENABLE();
 8002dda:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ddc:	a904      	add	r1, sp, #16
 8002dde:	481e      	ldr	r0, [pc, #120]	@ (8002e58 <HAL_UART_MspInit+0xb8>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8002de0:	f042 0210 	orr.w	r2, r2, #16
 8002de4:	645a      	str	r2, [r3, #68]	@ 0x44
 8002de6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002de8:	f002 0210 	and.w	r2, r2, #16
 8002dec:	9201      	str	r2, [sp, #4]
 8002dee:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002df0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002df2:	f042 0202 	orr.w	r2, r2, #2
 8002df6:	631a      	str	r2, [r3, #48]	@ 0x30
 8002df8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002dfa:	f002 0202 	and.w	r2, r2, #2
 8002dfe:	9202      	str	r2, [sp, #8]
 8002e00:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e02:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e04:	f042 0201 	orr.w	r2, r2, #1
 8002e08:	631a      	str	r2, [r3, #48]	@ 0x30
 8002e0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002e0c:	9508      	str	r5, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e0e:	f003 0301 	and.w	r3, r3, #1
 8002e12:	9303      	str	r3, [sp, #12]
 8002e14:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e16:	2380      	movs	r3, #128	@ 0x80
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e18:	e9cd 4406 	strd	r4, r4, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e1c:	e9cd 3604 	strd	r3, r6, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e20:	f007 ffec 	bl	800adfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002e24:	f44f 7300 	mov.w	r3, #512	@ 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e28:	a904      	add	r1, sp, #16
 8002e2a:	480c      	ldr	r0, [pc, #48]	@ (8002e5c <HAL_UART_MspInit+0xbc>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002e2c:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e2e:	e9cd 3604 	strd	r3, r6, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e32:	e9cd 4406 	strd	r4, r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e36:	f007 ffe1 	bl	800adfc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002e3a:	2025      	movs	r0, #37	@ 0x25
 8002e3c:	4622      	mov	r2, r4
 8002e3e:	2105      	movs	r1, #5
 8002e40:	f006 fd38 	bl	80098b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002e44:	2025      	movs	r0, #37	@ 0x25
 8002e46:	f006 fd67 	bl	8009918 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002e4a:	b02a      	add	sp, #168	@ 0xa8
 8002e4c:	bd70      	pop	{r4, r5, r6, pc}
 8002e4e:	bf00      	nop
 8002e50:	40011000 	.word	0x40011000
 8002e54:	40023800 	.word	0x40023800
 8002e58:	40020400 	.word	0x40020400
 8002e5c:	40020000 	.word	0x40020000

08002e60 <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002e60:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002e62:	2300      	movs	r3, #0
void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002e64:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002e66:	9303      	str	r3, [sp, #12]
  if (FMC_Initialized) {
 8002e68:	4b29      	ldr	r3, [pc, #164]	@ (8002f10 <HAL_SDRAM_MspInit+0xb0>)
 8002e6a:	681e      	ldr	r6, [r3, #0]
 8002e6c:	2e00      	cmp	r6, #0
 8002e6e:	d14d      	bne.n	8002f0c <HAL_SDRAM_MspInit+0xac>
  FMC_Initialized = 1;
 8002e70:	2201      	movs	r2, #1
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e72:	2702      	movs	r7, #2
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002e74:	2503      	movs	r5, #3
 8002e76:	240c      	movs	r4, #12
  FMC_Initialized = 1;
 8002e78:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e7a:	a901      	add	r1, sp, #4
  __HAL_RCC_FMC_CLK_ENABLE();
 8002e7c:	4b25      	ldr	r3, [pc, #148]	@ (8002f14 <HAL_SDRAM_MspInit+0xb4>)
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e7e:	4826      	ldr	r0, [pc, #152]	@ (8002f18 <HAL_SDRAM_MspInit+0xb8>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8002e80:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e82:	f042 0201 	orr.w	r2, r2, #1
 8002e86:	639a      	str	r2, [r3, #56]	@ 0x38
 8002e88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e8a:	f003 0301 	and.w	r3, r3, #1
 8002e8e:	9300      	str	r3, [sp, #0]
 8002e90:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e92:	f64f 7383 	movw	r3, #65411	@ 0xff83
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002e96:	e9cd 5404 	strd	r5, r4, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e9a:	e9cd 3701 	strd	r3, r7, [sp, #4]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e9e:	f007 ffad 	bl	800adfc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 8002ea2:	f248 1333 	movw	r3, #33075	@ 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002ea6:	a901      	add	r1, sp, #4
 8002ea8:	481c      	ldr	r0, [pc, #112]	@ (8002f1c <HAL_SDRAM_MspInit+0xbc>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002eaa:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eac:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eb0:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002eb4:	f007 ffa2 	bl	800adfc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 8002eb8:	f24c 7303 	movw	r3, #50947	@ 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ebc:	a901      	add	r1, sp, #4
 8002ebe:	4818      	ldr	r0, [pc, #96]	@ (8002f20 <HAL_SDRAM_MspInit+0xc0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002ec0:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ec2:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ec6:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002eca:	f007 ff97 	bl	800adfc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002ece:	f64f 033f 	movw	r3, #63551	@ 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002ed2:	a901      	add	r1, sp, #4
 8002ed4:	4813      	ldr	r0, [pc, #76]	@ (8002f24 <HAL_SDRAM_MspInit+0xc4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002ed6:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ed8:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002edc:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002ee0:	f007 ff8c 	bl	800adfc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3;
 8002ee4:	2328      	movs	r3, #40	@ 0x28
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002ee6:	a901      	add	r1, sp, #4
 8002ee8:	480f      	ldr	r0, [pc, #60]	@ (8002f28 <HAL_SDRAM_MspInit+0xc8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002eea:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eec:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ef0:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002ef4:	f007 ff82 	bl	800adfc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002ef8:	2308      	movs	r3, #8
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002efa:	a901      	add	r1, sp, #4
 8002efc:	480b      	ldr	r0, [pc, #44]	@ (8002f2c <HAL_SDRAM_MspInit+0xcc>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002efe:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f00:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f04:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f08:	f007 ff78 	bl	800adfc <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002f0c:	b007      	add	sp, #28
 8002f0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f10:	2000b0bc 	.word	0x2000b0bc
 8002f14:	40023800 	.word	0x40023800
 8002f18:	40021000 	.word	0x40021000
 8002f1c:	40021800 	.word	0x40021800
 8002f20:	40020c00 	.word	0x40020c00
 8002f24:	40021400 	.word	0x40021400
 8002f28:	40021c00 	.word	0x40021c00
 8002f2c:	40020800 	.word	0x40020800

08002f30 <HAL_InitTick>:
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002f30:	4b21      	ldr	r3, [pc, #132]	@ (8002fb8 <HAL_InitTick+0x88>)
 8002f32:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f34:	f042 0210 	orr.w	r2, r2, #16
{
 8002f38:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002f3a:	641a      	str	r2, [r3, #64]	@ 0x40
{
 8002f3c:	b088      	sub	sp, #32
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
{
 8002f40:	4605      	mov	r5, r0

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002f42:	a901      	add	r1, sp, #4
 8002f44:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002f46:	f003 0310 	and.w	r3, r3, #16
 8002f4a:	9302      	str	r3, [sp, #8]
 8002f4c:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002f4e:	f00a fa1f 	bl	800d390 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002f52:	9b06      	ldr	r3, [sp, #24]
 8002f54:	bb4b      	cbnz	r3, 8002faa <HAL_InitTick+0x7a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002f56:	f00a f9fb 	bl	800d350 <HAL_RCC_GetPCLK1Freq>

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002f5a:	4e18      	ldr	r6, [pc, #96]	@ (8002fbc <HAL_InitTick+0x8c>)
 8002f5c:	4b18      	ldr	r3, [pc, #96]	@ (8002fc0 <HAL_InitTick+0x90>)
 8002f5e:	6033      	str	r3, [r6, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002f60:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8002f64:	60f3      	str	r3, [r6, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002f66:	4b17      	ldr	r3, [pc, #92]	@ (8002fc4 <HAL_InitTick+0x94>)
 8002f68:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f6c:	3b01      	subs	r3, #1
  htim6.Init.Prescaler = uwPrescalerValue;
  htim6.Init.ClockDivision = 0;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

  status = HAL_TIM_Base_Init(&htim6);
 8002f6e:	4630      	mov	r0, r6
  htim6.Init.Prescaler = uwPrescalerValue;
 8002f70:	6073      	str	r3, [r6, #4]
  htim6.Init.ClockDivision = 0;
 8002f72:	2300      	movs	r3, #0
 8002f74:	6133      	str	r3, [r6, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f76:	60b3      	str	r3, [r6, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f78:	61b3      	str	r3, [r6, #24]
  status = HAL_TIM_Base_Init(&htim6);
 8002f7a:	f00a ff81 	bl	800de80 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 8002f7e:	4604      	mov	r4, r0
 8002f80:	b980      	cbnz	r0, 8002fa4 <HAL_InitTick+0x74>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002f82:	4630      	mov	r0, r6
 8002f84:	f00a fe22 	bl	800dbcc <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 8002f88:	4604      	mov	r4, r0
 8002f8a:	b958      	cbnz	r0, 8002fa4 <HAL_InitTick+0x74>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002f8c:	2036      	movs	r0, #54	@ 0x36
 8002f8e:	f006 fcc3 	bl	8009918 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f92:	2d0f      	cmp	r5, #15
 8002f94:	d80d      	bhi.n	8002fb2 <HAL_InitTick+0x82>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002f96:	4622      	mov	r2, r4
 8002f98:	4629      	mov	r1, r5
 8002f9a:	2036      	movs	r0, #54	@ 0x36
 8002f9c:	f006 fc8a 	bl	80098b4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002fa0:	4b09      	ldr	r3, [pc, #36]	@ (8002fc8 <HAL_InitTick+0x98>)
 8002fa2:	601d      	str	r5, [r3, #0]
    }
  }

 /* Return function status */
  return status;
}
 8002fa4:	4620      	mov	r0, r4
 8002fa6:	b008      	add	sp, #32
 8002fa8:	bd70      	pop	{r4, r5, r6, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002faa:	f00a f9d1 	bl	800d350 <HAL_RCC_GetPCLK1Freq>
 8002fae:	0040      	lsls	r0, r0, #1
 8002fb0:	e7d3      	b.n	8002f5a <HAL_InitTick+0x2a>
        status = HAL_ERROR;
 8002fb2:	2401      	movs	r4, #1
 8002fb4:	e7f6      	b.n	8002fa4 <HAL_InitTick+0x74>
 8002fb6:	bf00      	nop
 8002fb8:	40023800 	.word	0x40023800
 8002fbc:	2000b0c0 	.word	0x2000b0c0
 8002fc0:	40001000 	.word	0x40001000
 8002fc4:	000f4240 	.word	0x000f4240
 8002fc8:	20007a94 	.word	0x20007a94

08002fcc <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002fcc:	4770      	bx	lr

08002fce <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002fce:	e7fe      	b.n	8002fce <HardFault_Handler>

08002fd0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002fd0:	e7fe      	b.n	8002fd0 <MemManage_Handler>

08002fd2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002fd2:	e7fe      	b.n	8002fd2 <BusFault_Handler>

08002fd4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002fd4:	e7fe      	b.n	8002fd4 <UsageFault_Handler>

08002fd6 <DebugMon_Handler>:
}

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8002fd6:	4770      	bx	lr

08002fd8 <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002fd8:	4801      	ldr	r0, [pc, #4]	@ (8002fe0 <I2C1_EV_IRQHandler+0x8>)
 8002fda:	f008 bcbf 	b.w	800b95c <HAL_I2C_EV_IRQHandler>
 8002fde:	bf00      	nop
 8002fe0:	2000851c 	.word	0x2000851c

08002fe4 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002fe4:	4801      	ldr	r0, [pc, #4]	@ (8002fec <USART1_IRQHandler+0x8>)
 8002fe6:	f00b baa7 	b.w	800e538 <HAL_UART_IRQHandler>
 8002fea:	bf00      	nop
 8002fec:	200082b4 	.word	0x200082b4

08002ff0 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002ff0:	4801      	ldr	r0, [pc, #4]	@ (8002ff8 <TIM6_DAC_IRQHandler+0x8>)
 8002ff2:	f00a be2e 	b.w	800dc52 <HAL_TIM_IRQHandler>
 8002ff6:	bf00      	nop
 8002ff8:	2000b0c0 	.word	0x2000b0c0

08002ffc <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma2_stream0);
 8002ffc:	4801      	ldr	r0, [pc, #4]	@ (8003004 <DMA2_Stream0_IRQHandler+0x8>)
 8002ffe:	f006 bfc1 	b.w	8009f84 <HAL_DMA_IRQHandler>
 8003002:	bf00      	nop
 8003004:	20008254 	.word	0x20008254

08003008 <DMA2_Stream1_IRQHandler>:
void DMA2_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8003008:	4801      	ldr	r0, [pc, #4]	@ (8003010 <DMA2_Stream1_IRQHandler+0x8>)
 800300a:	f006 bfbb 	b.w	8009f84 <HAL_DMA_IRQHandler>
 800300e:	bf00      	nop
 8003010:	200085b0 	.word	0x200085b0

08003014 <DCMI_IRQHandler>:
void DCMI_IRQHandler(void)
{
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8003014:	4801      	ldr	r0, [pc, #4]	@ (800301c <DCMI_IRQHandler+0x8>)
 8003016:	f006 be45 	b.w	8009ca4 <HAL_DCMI_IRQHandler>
 800301a:	bf00      	nop
 800301c:	20008610 	.word	0x20008610

08003020 <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003020:	4801      	ldr	r0, [pc, #4]	@ (8003028 <LTDC_IRQHandler+0x8>)
 8003022:	f009 ba84 	b.w	800c52e <HAL_LTDC_IRQHandler>
 8003026:	bf00      	nop
 8003028:	20008420 	.word	0x20008420

0800302c <LTDC_ER_IRQHandler>:
}

/**
  * @brief This function handles LTDC global error interrupt.
  */
void LTDC_ER_IRQHandler(void)
 800302c:	f7ff bff8 	b.w	8003020 <LTDC_IRQHandler>

08003030 <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8003030:	4801      	ldr	r0, [pc, #4]	@ (8003038 <DMA2D_IRQHandler+0x8>)
 8003032:	f007 b8bc 	b.w	800a1ae <HAL_DMA2D_IRQHandler>
 8003036:	bf00      	nop
 8003038:	20008570 	.word	0x20008570

0800303c <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 800303c:	2001      	movs	r0, #1
 800303e:	4770      	bx	lr

08003040 <_kill>:

int _kill(int pid, int sig)
{
 8003040:	b508      	push	{r3, lr}
	errno = EINVAL;
 8003042:	f028 fb69 	bl	802b718 <__errno>
 8003046:	2316      	movs	r3, #22
 8003048:	6003      	str	r3, [r0, #0]
	return -1;
}
 800304a:	f04f 30ff 	mov.w	r0, #4294967295
 800304e:	bd08      	pop	{r3, pc}

08003050 <_exit>:

void _exit (int status)
{
 8003050:	b508      	push	{r3, lr}
	errno = EINVAL;
 8003052:	f028 fb61 	bl	802b718 <__errno>
 8003056:	2316      	movs	r3, #22
 8003058:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 800305a:	e7fe      	b.n	800305a <_exit+0xa>

0800305c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800305c:	b570      	push	{r4, r5, r6, lr}
 800305e:	460d      	mov	r5, r1
 8003060:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003062:	460e      	mov	r6, r1
 8003064:	1b73      	subs	r3, r6, r5
 8003066:	429c      	cmp	r4, r3
 8003068:	dc01      	bgt.n	800306e <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 800306a:	4620      	mov	r0, r4
 800306c:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 800306e:	f3af 8000 	nop.w
 8003072:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003076:	e7f5      	b.n	8003064 <_read+0x8>

08003078 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003078:	b570      	push	{r4, r5, r6, lr}
 800307a:	460d      	mov	r5, r1
 800307c:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800307e:	460e      	mov	r6, r1
 8003080:	1b73      	subs	r3, r6, r5
 8003082:	429c      	cmp	r4, r3
 8003084:	dc01      	bgt.n	800308a <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8003086:	4620      	mov	r0, r4
 8003088:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 800308a:	f816 0b01 	ldrb.w	r0, [r6], #1
 800308e:	f7fe faf7 	bl	8001680 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003092:	e7f5      	b.n	8003080 <_write+0x8>

08003094 <_close>:

int _close(int file)
{
	return -1;
}
 8003094:	f04f 30ff 	mov.w	r0, #4294967295
 8003098:	4770      	bx	lr

0800309a <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800309a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
	return 0;
}
 800309e:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 80030a0:	604b      	str	r3, [r1, #4]
}
 80030a2:	4770      	bx	lr

080030a4 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80030a4:	2001      	movs	r0, #1
 80030a6:	4770      	bx	lr

080030a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80030a8:	2000      	movs	r0, #0
 80030aa:	4770      	bx	lr

080030ac <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80030ac:	4a0b      	ldr	r2, [pc, #44]	@ (80030dc <_sbrk+0x30>)
{
 80030ae:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 80030b0:	6811      	ldr	r1, [r2, #0]
{
 80030b2:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 80030b4:	b909      	cbnz	r1, 80030ba <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 80030b6:	490a      	ldr	r1, [pc, #40]	@ (80030e0 <_sbrk+0x34>)
 80030b8:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80030ba:	6810      	ldr	r0, [r2, #0]
 80030bc:	4909      	ldr	r1, [pc, #36]	@ (80030e4 <_sbrk+0x38>)
 80030be:	4c0a      	ldr	r4, [pc, #40]	@ (80030e8 <_sbrk+0x3c>)
 80030c0:	4403      	add	r3, r0
 80030c2:	1b09      	subs	r1, r1, r4
 80030c4:	428b      	cmp	r3, r1
 80030c6:	d906      	bls.n	80030d6 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 80030c8:	f028 fb26 	bl	802b718 <__errno>
 80030cc:	230c      	movs	r3, #12
 80030ce:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80030d0:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80030d4:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80030d6:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 80030d8:	e7fc      	b.n	80030d4 <_sbrk+0x28>
 80030da:	bf00      	nop
 80030dc:	2000b10c 	.word	0x2000b10c
 80030e0:	2002ab18 	.word	0x2002ab18
 80030e4:	20050000 	.word	0x20050000
 80030e8:	00000a00 	.word	0x00000a00

080030ec <decode_evt2>:
 * @param Value to be decoded
 */
static void decode_evt2(const uint32_t val) {
	static uint32_t x,y;

	switch( __EVT20_TYPE(val)) {
 80030ec:	0f01      	lsrs	r1, r0, #28
static void decode_evt2(const uint32_t val) {
 80030ee:	b510      	push	{r4, lr}
	switch( __EVT20_TYPE(val)) {
 80030f0:	d002      	beq.n	80030f8 <decode_evt2+0xc>
 80030f2:	2901      	cmp	r1, #1
 80030f4:	d017      	beq.n	8003126 <decode_evt2+0x3a>
		break;
			}
	default:
		break;
	}
}
 80030f6:	bd10      	pop	{r4, pc}
		x = __EVT20_Y(val);
 80030f8:	f3c0 020a 	ubfx	r2, r0, #0, #11
		if( x < WIDTH && y < HEIGHT) {
 80030fc:	f5b2 7fa0 	cmp.w	r2, #320	@ 0x140
 8003100:	d20c      	bcs.n	800311c <decode_evt2+0x30>
		y = __EVT20_X(val);
 8003102:	f3c0 20ca 	ubfx	r0, r0, #11, #11
		if( x < WIDTH && y < HEIGHT) {
 8003106:	f5b0 7f88 	cmp.w	r0, #272	@ 0x110
 800310a:	d207      	bcs.n	800311c <decode_evt2+0x30>
			fb_cpi[x+y*WIDTH] = COLOR_OFF;
 800310c:	4b11      	ldr	r3, [pc, #68]	@ (8003154 <decode_evt2+0x68>)
 800310e:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	fb01 3300 	mla	r3, r1, r0, r3
 8003118:	2102      	movs	r1, #2
 800311a:	5499      	strb	r1, [r3, r2]
		evt_statistics[0] ++;
 800311c:	4a0e      	ldr	r2, [pc, #56]	@ (8003158 <decode_evt2+0x6c>)
 800311e:	6813      	ldr	r3, [r2, #0]
 8003120:	3301      	adds	r3, #1
 8003122:	6013      	str	r3, [r2, #0]
		break;
 8003124:	e7e7      	b.n	80030f6 <decode_evt2+0xa>
		x =  __EVT20_Y(val);
 8003126:	f3c0 020a 	ubfx	r2, r0, #0, #11
		if( x < WIDTH && y < HEIGHT) {
 800312a:	f5b2 7fa0 	cmp.w	r2, #320	@ 0x140
 800312e:	d20b      	bcs.n	8003148 <decode_evt2+0x5c>
		y = __EVT20_X(val);
 8003130:	f3c0 20ca 	ubfx	r0, r0, #11, #11
		if( x < WIDTH && y < HEIGHT) {
 8003134:	f5b0 7f88 	cmp.w	r0, #272	@ 0x110
 8003138:	d206      	bcs.n	8003148 <decode_evt2+0x5c>
			fb_cpi[x+y*WIDTH] = COLOR_ON;
 800313a:	4b06      	ldr	r3, [pc, #24]	@ (8003154 <decode_evt2+0x68>)
 800313c:	f44f 74a0 	mov.w	r4, #320	@ 0x140
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	fb04 3300 	mla	r3, r4, r0, r3
 8003146:	5499      	strb	r1, [r3, r2]
		evt_statistics[1] ++;
 8003148:	4a03      	ldr	r2, [pc, #12]	@ (8003158 <decode_evt2+0x6c>)
 800314a:	6853      	ldr	r3, [r2, #4]
 800314c:	3301      	adds	r3, #1
 800314e:	6053      	str	r3, [r2, #4]
}
 8003150:	e7d1      	b.n	80030f6 <decode_evt2+0xa>
 8003152:	bf00      	nop
 8003154:	20000004 	.word	0x20000004
 8003158:	20013120 	.word	0x20013120

0800315c <task_evt_decoder>:

/**
 * @brief Function implementing Event decoding task.
 */
void task_evt_decoder(const args_evt_decoder_t *args) {
 800315c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	uint32_t dma_read_idx = 0;
	uint32_t now = 0, last = 0;
	uint32_t ev_processed_old = 0;
	DrvGenx320Handle_t drv_genx320 = *(args->drv_genx320);
 8003160:	6883      	ldr	r3, [r0, #8]
void task_evt_decoder(const args_evt_decoder_t *args) {
 8003162:	4607      	mov	r7, r0

	/* Initialize the sensor */
	ucDrvGenx320Init(drv_genx320);

	/* Start DCMI_DMA */
	while(HAL_DCMI_Start_DMA(args->hdcmi, DCMI_MODE_CONTINUOUS , (uint32_t)event_buffer, TX_SIZE) != HAL_OK) {
 8003164:	4d28      	ldr	r5, [pc, #160]	@ (8003208 <task_evt_decoder+0xac>)
	ucDrvGenx320Init(drv_genx320);
 8003166:	6818      	ldr	r0, [r3, #0]
 8003168:	f005 ffc6 	bl	80090f8 <ucDrvGenx320Init>
	while(HAL_DCMI_Start_DMA(args->hdcmi, DCMI_MODE_CONTINUOUS , (uint32_t)event_buffer, TX_SIZE) != HAL_OK) {
 800316c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003170:	462a      	mov	r2, r5
 8003172:	2100      	movs	r1, #0
 8003174:	6838      	ldr	r0, [r7, #0]
 8003176:	f006 fd1f 	bl	8009bb8 <HAL_DCMI_Start_DMA>
 800317a:	4604      	mov	r4, r0
 800317c:	bb20      	cbnz	r0, 80031c8 <task_evt_decoder+0x6c>
	uint32_t now = 0, last = 0;
 800317e:	4682      	mov	sl, r0
	uint32_t dma_read_idx = 0;
 8003180:	4605      	mov	r5, r0
		/* Computing Event Rate */
		now = HAL_GetTick();

		if(now - last > 50) {

			ev_processed = (evt_statistics[0] + evt_statistics[1]);
 8003182:	f8df 8090 	ldr.w	r8, [pc, #144]	@ 8003214 <task_evt_decoder+0xb8>
			continue;
		}

		if(dma_read_idx > dma_idx) {
			while (dma_read_idx < TX_SIZE) {
				decode_evt2(event_buffer[dma_read_idx++]);
 8003186:	f8df 9080 	ldr.w	r9, [pc, #128]	@ 8003208 <task_evt_decoder+0xac>
		now = HAL_GetTick();
 800318a:	f006 fb69 	bl	8009860 <HAL_GetTick>
		if(now - last > 50) {
 800318e:	eba0 020a 	sub.w	r2, r0, sl
 8003192:	2a32      	cmp	r2, #50	@ 0x32
 8003194:	d90d      	bls.n	80031b2 <task_evt_decoder+0x56>
			ev_processed = (evt_statistics[0] + evt_statistics[1]);
 8003196:	f8d8 3000 	ldr.w	r3, [r8]
			last = now;
 800319a:	4682      	mov	sl, r0
			ev_processed = (evt_statistics[0] + evt_statistics[1]);
 800319c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80031a0:	440b      	add	r3, r1
 80031a2:	491a      	ldr	r1, [pc, #104]	@ (800320c <task_evt_decoder+0xb0>)
			uint32_t nbev = ev_processed - ev_processed_old;
 80031a4:	1b1c      	subs	r4, r3, r4
			ev_processed = (evt_statistics[0] + evt_statistics[1]);
 80031a6:	600b      	str	r3, [r1, #0]
			nbev_rate = nbev/(now-last);
 80031a8:	fbb4 f4f2 	udiv	r4, r4, r2
 80031ac:	4a18      	ldr	r2, [pc, #96]	@ (8003210 <task_evt_decoder+0xb4>)
 80031ae:	6014      	str	r4, [r2, #0]
			ev_processed_old = ev_processed;
 80031b0:	461c      	mov	r4, r3
		uint32_t dma_idx = TX_SIZE - args->hdma_dcmi->Instance->NDTR;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	685e      	ldr	r6, [r3, #4]
 80031b8:	f5c6 5600 	rsb	r6, r6, #8192	@ 0x2000
		if (dma_read_idx == dma_idx) {
 80031bc:	42b5      	cmp	r5, r6
 80031be:	d107      	bne.n	80031d0 <task_evt_decoder+0x74>
			vTaskDelay( 3 / portTICK_PERIOD_MS);
 80031c0:	2003      	movs	r0, #3
 80031c2:	f00e f8d9 	bl	8011378 <vTaskDelay>
			continue;
 80031c6:	e00c      	b.n	80031e2 <task_evt_decoder+0x86>
		HAL_Delay(10);
 80031c8:	200a      	movs	r0, #10
 80031ca:	f006 fb4f 	bl	800986c <HAL_Delay>
 80031ce:	e7cd      	b.n	800316c <task_evt_decoder+0x10>
		if(dma_read_idx > dma_idx) {
 80031d0:	d80e      	bhi.n	80031f0 <task_evt_decoder+0x94>
			}
			dma_read_idx = 0;
 80031d2:	46ab      	mov	fp, r5
		}

		while (dma_read_idx < dma_idx) {
 80031d4:	455e      	cmp	r6, fp
 80031d6:	d810      	bhi.n	80031fa <task_evt_decoder+0x9e>
 80031d8:	1b73      	subs	r3, r6, r5
 80031da:	42b5      	cmp	r5, r6
 80031dc:	bf88      	it	hi
 80031de:	2300      	movhi	r3, #0
 80031e0:	18ee      	adds	r6, r5, r3
void task_evt_decoder(const args_evt_decoder_t *args) {
 80031e2:	4635      	mov	r5, r6
 80031e4:	e7d1      	b.n	800318a <task_evt_decoder+0x2e>
				decode_evt2(event_buffer[dma_read_idx++]);
 80031e6:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80031ea:	3501      	adds	r5, #1
 80031ec:	f7ff ff7e 	bl	80030ec <decode_evt2>
			while (dma_read_idx < TX_SIZE) {
 80031f0:	f5b5 5f00 	cmp.w	r5, #8192	@ 0x2000
 80031f4:	d3f7      	bcc.n	80031e6 <task_evt_decoder+0x8a>
			dma_read_idx = 0;
 80031f6:	2500      	movs	r5, #0
 80031f8:	e7eb      	b.n	80031d2 <task_evt_decoder+0x76>
			decode_evt2(event_buffer[dma_read_idx++]);
 80031fa:	f859 002b 	ldr.w	r0, [r9, fp, lsl #2]
 80031fe:	f10b 0b01 	add.w	fp, fp, #1
 8003202:	f7ff ff73 	bl	80030ec <decode_evt2>
 8003206:	e7e5      	b.n	80031d4 <task_evt_decoder+0x78>
 8003208:	2000b120 	.word	0x2000b120
 800320c:	2000b114 	.word	0x2000b114
 8003210:	2000b118 	.word	0x2000b118
 8003214:	20013120 	.word	0x20013120

08003218 <reset_frame_buffers>:

/**
 * @brief Function to Reset the frame buffer. It must be done before scheduling starts.
 * It can not be done by DMA.
 */
void reset_frame_buffers() {
 8003218:	b510      	push	{r4, lr}

	memset(frame_buffer_l1_one, 0 , sizeof(frame_buffer_l1_one));
 800321a:	f44f 34aa 	mov.w	r4, #87040	@ 0x15400
 800321e:	2100      	movs	r1, #0
 8003220:	4807      	ldr	r0, [pc, #28]	@ (8003240 <reset_frame_buffers+0x28>)
 8003222:	4622      	mov	r2, r4
 8003224:	f028 f97c 	bl	802b520 <memset>
	memset(frame_buffer_l1_two, 0 , sizeof(frame_buffer_l1_two));
 8003228:	4622      	mov	r2, r4
 800322a:	2100      	movs	r1, #0
 800322c:	4805      	ldr	r0, [pc, #20]	@ (8003244 <reset_frame_buffers+0x2c>)
 800322e:	f028 f977 	bl	802b520 <memset>
	memset(frame_buffer_l1_three, 0 , sizeof(frame_buffer_l1_three));
 8003232:	4622      	mov	r2, r4
 8003234:	2100      	movs	r1, #0
 8003236:	4804      	ldr	r0, [pc, #16]	@ (8003248 <reset_frame_buffers+0x30>)

}
 8003238:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	memset(frame_buffer_l1_three, 0 , sizeof(frame_buffer_l1_three));
 800323c:	f028 b970 	b.w	802b520 <memset>
 8003240:	c017e800 	.word	0xc017e800
 8003244:	c0169400 	.word	0xc0169400
 8003248:	c0154000 	.word	0xc0154000

0800324c <task_update_fb>:
	uint32_t start_time;
	uint32_t start_time2;
	uint8_t* fb_display = frame_buffer_l1_one;
	uint8_t* fb_reset = frame_buffer_l1_two;
	uint8_t* old_fb_cpi;
	DrvDmaHandle_t drv_dma = *(args->drv_dma);
 800324c:	6843      	ldr	r3, [r0, #4]
	BaseType_t status;
	StaticSemaphore_t xSemaphoreBuffer;

	xSemphFbUpdtHdl = xSemaphoreCreateBinaryStatic( &xSemaphoreBuffer );
 800324e:	2200      	movs	r2, #0
void task_update_fb(const args_update_fb_t *args) {
 8003250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	DrvDmaHandle_t drv_dma = *(args->drv_dma);
 8003254:	681b      	ldr	r3, [r3, #0]
	xSemphFbUpdtHdl = xSemaphoreCreateBinaryStatic( &xSemaphoreBuffer );
 8003256:	2603      	movs	r6, #3
 8003258:	f8df 81c0 	ldr.w	r8, [pc, #448]	@ 800341c <task_update_fb+0x1d0>
void task_update_fb(const args_update_fb_t *args) {
 800325c:	4604      	mov	r4, r0
	xSemphFbUpdtHdl = xSemaphoreCreateBinaryStatic( &xSemaphoreBuffer );
 800325e:	4611      	mov	r1, r2
 8003260:	2001      	movs	r0, #1
void task_update_fb(const args_update_fb_t *args) {
 8003262:	ed2d 8b02 	vpush	{d8}
 8003266:	b0a7      	sub	sp, #156	@ 0x9c
	DrvDmaHandle_t drv_dma = *(args->drv_dma);
 8003268:	9302      	str	r3, [sp, #8]
	xSemphFbUpdtHdl = xSemaphoreCreateBinaryStatic( &xSemaphoreBuffer );
 800326a:	ab12      	add	r3, sp, #72	@ 0x48
 800326c:	9600      	str	r6, [sp, #0]
 800326e:	f00d f8bf 	bl	80103f0 <xQueueGenericCreateStatic>
 8003272:	f8c8 0000 	str.w	r0, [r8]
	assert(xSemphFbUpdtHdl);
 8003276:	b928      	cbnz	r0, 8003284 <task_update_fb+0x38>
 8003278:	4b59      	ldr	r3, [pc, #356]	@ (80033e0 <task_update_fb+0x194>)
 800327a:	216e      	movs	r1, #110	@ 0x6e
 800327c:	4a59      	ldr	r2, [pc, #356]	@ (80033e4 <task_update_fb+0x198>)
		start_time2 = HAL_GetTick();
		fb_display = frame_buffer_l1_one;

		/* This semaphore is used to suspend the task. */
		status = xSemaphoreTake(tskCtlUpdateFbHandle, portMAX_DELAY  );
		assert(status == pdTRUE);
 800327e:	485a      	ldr	r0, [pc, #360]	@ (80033e8 <task_update_fb+0x19c>)
 8003280:	f027 f99c 	bl	802a5bc <__assert_func>
	LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8003284:	222c      	movs	r2, #44	@ 0x2c
 8003286:	2100      	movs	r1, #0
 8003288:	a807      	add	r0, sp, #28
	enable_layer(args->hltdc, 1, fb_display);
 800328a:	6825      	ldr	r5, [r4, #0]
	LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800328c:	f028 f948 	bl	802b520 <memset>
	pLayerCfg.WindowX1 = 480;
 8003290:	22a0      	movs	r2, #160	@ 0xa0
 8003292:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8003296:	f44f 60c0 	mov.w	r0, #1536	@ 0x600
	HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, layer);
 800329a:	a905      	add	r1, sp, #20
		status = xSemaphoreTake(tskCtlUpdateFbHandle, portMAX_DELAY  );
 800329c:	f8df 9180 	ldr.w	r9, [pc, #384]	@ 8003420 <task_update_fb+0x1d4>
	pLayerCfg.WindowX1 = 480;
 80032a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
	pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_L8; //LTDC_PIXEL_FORMAT_RGB565;
 80032a4:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80032a8:	2205      	movs	r2, #5
 80032aa:	e9cd 3208 	strd	r3, r2, [sp, #32]
	pLayerCfg.Alpha = 255;
 80032ae:	22ff      	movs	r2, #255	@ 0xff
 80032b0:	920a      	str	r2, [sp, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80032b2:	2207      	movs	r2, #7
 80032b4:	e9cd 020c 	strd	r0, r2, [sp, #48]	@ 0x30
	pLayerCfg.FBStartAdress = (uint32_t)address;
 80032b8:	4a4c      	ldr	r2, [pc, #304]	@ (80033ec <task_update_fb+0x1a0>)
	HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, layer);
 80032ba:	4628      	mov	r0, r5
	pLayerCfg.FBStartAdress = (uint32_t)address;
 80032bc:	920e      	str	r2, [sp, #56]	@ 0x38
	pLayerCfg.ImageWidth = 320;
 80032be:	f44f 72a0 	mov.w	r2, #320	@ 0x140
	pLayerCfg.ImageHeight = 272;
 80032c2:	e9cd 230f 	strd	r2, r3, [sp, #60]	@ 0x3c
	HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, layer);
 80032c6:	2201      	movs	r2, #1
 80032c8:	f009 f98e 	bl	800c5e8 <HAL_LTDC_ConfigLayer>
	HAL_LTDC_ConfigCLUT(hltdc, (uint32_t *)clut_event, sizeof(clut_event)/sizeof(uint32_t), layer);
 80032cc:	4632      	mov	r2, r6
 80032ce:	2301      	movs	r3, #1
 80032d0:	4947      	ldr	r1, [pc, #284]	@ (80033f0 <task_update_fb+0x1a4>)
 80032d2:	4628      	mov	r0, r5
		ucDrvDmaMemsetTo0(drv_dma, fb_reset, sizeof(frame_buffer_l1_one));

		vTaskDelay( 12 / portTICK_PERIOD_MS);

		// Start CNN cycle, every 30 loops, a frame is pre-processed and fed to the CNN.
		if (clock_counter % 30 == 0) {
 80032d4:	4e47      	ldr	r6, [pc, #284]	@ (80033f4 <task_update_fb+0x1a8>)
	HAL_LTDC_ConfigCLUT(hltdc, (uint32_t *)clut_event, sizeof(clut_event)/sizeof(uint32_t), layer);
 80032d6:	f009 f9b4 	bl	800c642 <HAL_LTDC_ConfigCLUT>
	HAL_LTDC_EnableCLUT(hltdc, layer);
 80032da:	4628      	mov	r0, r5
	uint8_t* fb_reset = frame_buffer_l1_two;
 80032dc:	4d46      	ldr	r5, [pc, #280]	@ (80033f8 <task_update_fb+0x1ac>)
	HAL_LTDC_EnableCLUT(hltdc, layer);
 80032de:	2101      	movs	r1, #1
 80032e0:	f009 f9e5 	bl	800c6ae <HAL_LTDC_EnableCLUT>
		start_time2 = HAL_GetTick();
 80032e4:	f006 fabc 	bl	8009860 <HAL_GetTick>
		status = xSemaphoreTake(tskCtlUpdateFbHandle, portMAX_DELAY  );
 80032e8:	f04f 31ff 	mov.w	r1, #4294967295
 80032ec:	f8d9 0000 	ldr.w	r0, [r9]
 80032f0:	f00d fb50 	bl	8010994 <xQueueSemaphoreTake>
		assert(status == pdTRUE);
 80032f4:	2801      	cmp	r0, #1
 80032f6:	d003      	beq.n	8003300 <task_update_fb+0xb4>
 80032f8:	4b40      	ldr	r3, [pc, #256]	@ (80033fc <task_update_fb+0x1b0>)
 80032fa:	217d      	movs	r1, #125	@ 0x7d
 80032fc:	4a39      	ldr	r2, [pc, #228]	@ (80033e4 <task_update_fb+0x198>)
 80032fe:	e7be      	b.n	800327e <task_update_fb+0x32>
		old_fb_cpi = fb_cpi;
 8003300:	4b3f      	ldr	r3, [pc, #252]	@ (8003400 <task_update_fb+0x1b4>)
		HAL_LTDC_Reload(args->hltdc, LTDC_RELOAD_VERTICAL_BLANKING);
 8003302:	2102      	movs	r1, #2
 8003304:	6820      	ldr	r0, [r4, #0]
		old_fb_cpi = fb_cpi;
 8003306:	681f      	ldr	r7, [r3, #0]
		fb_cpi = fb_reset;
 8003308:	601d      	str	r5, [r3, #0]
		HAL_LTDC_Reload(args->hltdc, LTDC_RELOAD_VERTICAL_BLANKING);
 800330a:	f009 fa23 	bl	800c754 <HAL_LTDC_Reload>
		LTDC_LAYER(args->hltdc, 1)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800330e:	6823      	ldr	r3, [r4, #0]
 8003310:	2500      	movs	r5, #0
		status = xSemaphoreTake( xSemphFbUpdtHdl, 50 / portTICK_PERIOD_MS );
 8003312:	2132      	movs	r1, #50	@ 0x32
 8003314:	f8d8 0000 	ldr.w	r0, [r8]
		LTDC_LAYER(args->hltdc, 1)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	f8d2 312c 	ldr.w	r3, [r2, #300]	@ 0x12c
 800331e:	f8c2 512c 	str.w	r5, [r2, #300]	@ 0x12c
		LTDC_LAYER(args->hltdc, 1)->CFBAR = (uint32_t)(fb_display);
 8003322:	f8c2 712c 	str.w	r7, [r2, #300]	@ 0x12c
		status = xSemaphoreTake( xSemphFbUpdtHdl, 50 / portTICK_PERIOD_MS );
 8003326:	f00d fb35 	bl	8010994 <xQueueSemaphoreTake>
		assert(status == pdTRUE);
 800332a:	2801      	cmp	r0, #1
 800332c:	d003      	beq.n	8003336 <task_update_fb+0xea>
 800332e:	4b33      	ldr	r3, [pc, #204]	@ (80033fc <task_update_fb+0x1b0>)
 8003330:	218e      	movs	r1, #142	@ 0x8e
 8003332:	4a2c      	ldr	r2, [pc, #176]	@ (80033e4 <task_update_fb+0x198>)
 8003334:	e7a3      	b.n	800327e <task_update_fb+0x32>
		status = xSemaphoreGive(tskCtlUpdateFbHandle);
 8003336:	462b      	mov	r3, r5
 8003338:	462a      	mov	r2, r5
 800333a:	4629      	mov	r1, r5
 800333c:	f8d9 0000 	ldr.w	r0, [r9]
 8003340:	f00d f8db 	bl	80104fa <xQueueGenericSend>
		assert(status == pdTRUE);
 8003344:	2801      	cmp	r0, #1
 8003346:	d003      	beq.n	8003350 <task_update_fb+0x104>
 8003348:	4b2c      	ldr	r3, [pc, #176]	@ (80033fc <task_update_fb+0x1b0>)
 800334a:	2191      	movs	r1, #145	@ 0x91
 800334c:	4a25      	ldr	r2, [pc, #148]	@ (80033e4 <task_update_fb+0x198>)
 800334e:	e796      	b.n	800327e <task_update_fb+0x32>
		ucDrvDmaMemsetTo0(drv_dma, fb_reset, sizeof(frame_buffer_l1_one));
 8003350:	f44f 32aa 	mov.w	r2, #87040	@ 0x15400
 8003354:	4925      	ldr	r1, [pc, #148]	@ (80033ec <task_update_fb+0x1a0>)
 8003356:	9802      	ldr	r0, [sp, #8]
 8003358:	f005 fe48 	bl	8008fec <ucDrvDmaMemsetTo0>
		vTaskDelay( 12 / portTICK_PERIOD_MS);
 800335c:	200c      	movs	r0, #12
 800335e:	f00e f80b 	bl	8011378 <vTaskDelay>
		if (clock_counter % 30 == 0) {
 8003362:	6831      	ldr	r1, [r6, #0]
 8003364:	231e      	movs	r3, #30
 8003366:	fbb1 f2f3 	udiv	r2, r1, r3
 800336a:	fb03 1b12 	mls	fp, r3, r2, r1
 800336e:	f1bb 0f00 	cmp.w	fp, #0
 8003372:	d130      	bne.n	80033d6 <task_update_fb+0x18a>
			start_time = HAL_GetTick();
			for (int8_t i = 0; i < 28; i++){ //This nested for loop takes a 252 by 252 square region from the display starting given starting_x and starting_y coordinates. It's set to start from top-left corner of the screen.
								for (int8_t j = 0; j < 28; j++){
									//starting from pixel (0,0) and going up to (251,251). We are down sizing to 28x28.
									//2nd index is 27-j instead of j, so that the image is mirrored before being processed. A threshold of 30 is applied in order to remove noise.
									buffer_number[starting_x + i][starting_y + (27-j)] = (calculate_the_weight_of_a_9by9_block(frame_buffer_l1_one, 9 * i, 9 * j) < 30) ? 0 : 1;
 8003374:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
			start_time = HAL_GetTick();
 8003378:	f006 fa72 	bl	8009860 <HAL_GetTick>
 800337c:	4f21      	ldr	r7, [pc, #132]	@ (8003404 <task_update_fb+0x1b8>)
 800337e:	4605      	mov	r5, r0
 8003380:	4659      	mov	r1, fp
									buffer_number[starting_x + i][starting_y + (27-j)] = (calculate_the_weight_of_a_9by9_block(frame_buffer_l1_one, 9 * i, 9 * j) < 30) ? 0 : 1;
 8003382:	ed9f 8a21 	vldr	s16, [pc, #132]	@ 8003408 <task_update_fb+0x1bc>
 8003386:	46bb      	mov	fp, r7
 8003388:	f04f 0a00 	mov.w	sl, #0
 800338c:	4652      	mov	r2, sl
 800338e:	4817      	ldr	r0, [pc, #92]	@ (80033ec <task_update_fb+0x1a0>)
 8003390:	9103      	str	r1, [sp, #12]
								for (int8_t j = 0; j < 28; j++){
 8003392:	f10a 0a09 	add.w	sl, sl, #9
									buffer_number[starting_x + i][starting_y + (27-j)] = (calculate_the_weight_of_a_9by9_block(frame_buffer_l1_one, 9 * i, 9 * j) < 30) ? 0 : 1;
 8003396:	f7fe ffd8 	bl	800234a <calculate_the_weight_of_a_9by9_block>
 800339a:	281d      	cmp	r0, #29
								for (int8_t j = 0; j < 28; j++){
 800339c:	9903      	ldr	r1, [sp, #12]
									buffer_number[starting_x + i][starting_y + (27-j)] = (calculate_the_weight_of_a_9by9_block(frame_buffer_l1_one, 9 * i, 9 * j) < 30) ? 0 : 1;
 800339e:	fe78 7a88 	vselgt.f32	s15, s17, s16
								for (int8_t j = 0; j < 28; j++){
 80033a2:	f1ba 0ffc 	cmp.w	sl, #252	@ 0xfc
									buffer_number[starting_x + i][starting_y + (27-j)] = (calculate_the_weight_of_a_9by9_block(frame_buffer_l1_one, 9 * i, 9 * j) < 30) ? 0 : 1;
 80033a6:	ed6b 7a01 	vstmdb	fp!, {s15}
								for (int8_t j = 0; j < 28; j++){
 80033aa:	d1ef      	bne.n	800338c <task_update_fb+0x140>
			for (int8_t i = 0; i < 28; i++){ //This nested for loop takes a 252 by 252 square region from the display starting given starting_x and starting_y coordinates. It's set to start from top-left corner of the screen.
 80033ac:	3109      	adds	r1, #9
 80033ae:	3770      	adds	r7, #112	@ 0x70
 80033b0:	29fc      	cmp	r1, #252	@ 0xfc
 80033b2:	d1e8      	bne.n	8003386 <task_update_fb+0x13a>
								}
							}
			end_time = HAL_GetTick();
 80033b4:	f006 fa54 	bl	8009860 <HAL_GetTick>
			time_taken = end_time - start_time;
			printf("Time PREPROCESSING: %lu ms \n", time_taken);
 80033b8:	1b41      	subs	r1, r0, r5
 80033ba:	4814      	ldr	r0, [pc, #80]	@ (800340c <task_update_fb+0x1c0>)
 80033bc:	f027 ffc6 	bl	802b34c <iprintf>
			prediction = predict_main(buffer_number);
 80033c0:	4813      	ldr	r0, [pc, #76]	@ (8003410 <task_update_fb+0x1c4>)
 80033c2:	f7fe ffd9 	bl	8002378 <predict_main>
 80033c6:	4b13      	ldr	r3, [pc, #76]	@ (8003414 <task_update_fb+0x1c8>)
 80033c8:	6018      	str	r0, [r3, #0]
			end_time = HAL_GetTick();
 80033ca:	f006 fa49 	bl	8009860 <HAL_GetTick>
			time_taken = end_time - start_time;
			printf("Time taken to execute: %lu ms \n", time_taken);
 80033ce:	1b41      	subs	r1, r0, r5
 80033d0:	4811      	ldr	r0, [pc, #68]	@ (8003418 <task_update_fb+0x1cc>)
 80033d2:	f027 ffbb 	bl	802b34c <iprintf>
		}
		clock_counter += 1;
 80033d6:	6833      	ldr	r3, [r6, #0]
		fb_reset = fb_display;
 80033d8:	4d04      	ldr	r5, [pc, #16]	@ (80033ec <task_update_fb+0x1a0>)
		clock_counter += 1;
 80033da:	3301      	adds	r3, #1
 80033dc:	6033      	str	r3, [r6, #0]
		start_time2 = HAL_GetTick();
 80033de:	e781      	b.n	80032e4 <task_update_fb+0x98>
 80033e0:	0802d4f7 	.word	0x0802d4f7
 80033e4:	0802d571 	.word	0x0802d571
 80033e8:	0802d507 	.word	0x0802d507
 80033ec:	c017e800 	.word	0xc017e800
 80033f0:	0802d580 	.word	0x0802d580
 80033f4:	20000008 	.word	0x20000008
 80033f8:	c0169400 	.word	0xc0169400
 80033fc:	0802d1d8 	.word	0x0802d1d8
 8003400:	20000004 	.word	0x20000004
 8003404:	200131a0 	.word	0x200131a0
 8003408:	00000000 	.word	0x00000000
 800340c:	0802d534 	.word	0x0802d534
 8003410:	20013130 	.word	0x20013130
 8003414:	2001312c 	.word	0x2001312c
 8003418:	0802d551 	.word	0x0802d551
 800341c:	20013128 	.word	0x20013128
 8003420:	20008200 	.word	0x20008200

08003424 <update_fb_callback>:
/**
 * @brief Call back function for register reload
 */
void update_fb_callback()
{
	BaseType_t xHigherPriorityTaskWoken_RR = pdFALSE;
 8003424:	2300      	movs	r3, #0
{
 8003426:	b507      	push	{r0, r1, r2, lr}
	BaseType_t xHigherPriorityTaskWoken_RR = pdFALSE;
 8003428:	9301      	str	r3, [sp, #4]
	xSemaphoreGiveFromISR( xSemphFbUpdtHdl, &xHigherPriorityTaskWoken_RR);
 800342a:	a901      	add	r1, sp, #4
 800342c:	4b09      	ldr	r3, [pc, #36]	@ (8003454 <update_fb_callback+0x30>)
 800342e:	6818      	ldr	r0, [r3, #0]
 8003430:	f00d f9b3 	bl	801079a <xQueueGiveFromISR>

	portYIELD_FROM_ISR( xHigherPriorityTaskWoken_RR );
 8003434:	9b01      	ldr	r3, [sp, #4]
 8003436:	b14b      	cbz	r3, 800344c <update_fb_callback+0x28>
 8003438:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800343c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003440:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8003444:	f3bf 8f4f 	dsb	sy
 8003448:	f3bf 8f6f 	isb	sy
}
 800344c:	b003      	add	sp, #12
 800344e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003452:	bf00      	nop
 8003454:	20013128 	.word	0x20013128

08003458 <get_prediction>:

int get_prediction() {
	return prediction;
}
 8003458:	4b01      	ldr	r3, [pc, #4]	@ (8003460 <get_prediction+0x8>)
 800345a:	6818      	ldr	r0, [r3, #0]
 800345c:	4770      	bx	lr
 800345e:	bf00      	nop
 8003460:	2001312c 	.word	0x2001312c

08003464 <psee_esp_lpw_task>:
volatile uint32_t led_coordinates[2] = {0};

/**
 * @brief Function implementing the Low power wake up task.
 */
void psee_esp_lpw_task() {
 8003464:	b538      	push	{r3, r4, r5, lr}
	/* Infinite loop */
	for(;;)
	{

		/* Acquire the Semaphore */
		osSemaphoreAcquire(ESP_LPW_SemphHandle, portMAX_DELAY);
 8003466:	4c0f      	ldr	r4, [pc, #60]	@ (80034a4 <psee_esp_lpw_task+0x40>)
 8003468:	4d0f      	ldr	r5, [pc, #60]	@ (80034a8 <psee_esp_lpw_task+0x44>)
 800346a:	f04f 31ff 	mov.w	r1, #4294967295
 800346e:	6820      	ldr	r0, [r4, #0]
 8003470:	f00c fa88 	bl	800f984 <osSemaphoreAcquire>

		uint32_t val = psee_get_mbx_misc() >> 16;
 8003474:	f00b ffa0 	bl	800f3b8 <psee_get_mbx_misc>
		if((val & 0b10) == 0b10) {
 8003478:	0382      	lsls	r2, r0, #14
		uint32_t val = psee_get_mbx_misc() >> 16;
 800347a:	ea4f 4310 	mov.w	r3, r0, lsr #16
			/* Update the device_state to sleep state */
			me_direction = 2;
		}

		/* Reset mailbox misc register */
		psee_set_mbx_misc(0);
 800347e:	f04f 0000 	mov.w	r0, #0
			me_direction = 2;
 8003482:	bf54      	ite	pl
 8003484:	2302      	movpl	r3, #2
			me_direction = (val & 0b01);
 8003486:	f003 0301 	andmi.w	r3, r3, #1
			me_direction = 2;
 800348a:	702b      	strb	r3, [r5, #0]
		psee_set_mbx_misc(0);
 800348c:	f00c f81a 	bl	800f4c4 <psee_set_mbx_misc>

		/* Update the values of the event counters */
		psee_read_ro_lp_evt_cnt((uint32_t *)lp_counter);
 8003490:	4806      	ldr	r0, [pc, #24]	@ (80034ac <psee_esp_lpw_task+0x48>)
 8003492:	f00c f81e 	bl	800f4d2 <psee_read_ro_lp_evt_cnt>

		/* Release the Semaphore */
		osSemaphoreRelease(ESP_LPW_SemphHandle);
 8003496:	6820      	ldr	r0, [r4, #0]
 8003498:	f00c fab0 	bl	800f9fc <osSemaphoreRelease>

		vTaskDelay( 15 / portTICK_PERIOD_MS);
 800349c:	200f      	movs	r0, #15
 800349e:	f00d ff6b 	bl	8011378 <vTaskDelay>
	{
 80034a2:	e7e2      	b.n	800346a <psee_esp_lpw_task+0x6>
 80034a4:	200081a8 	.word	0x200081a8
 80034a8:	20013d80 	.word	0x20013d80
 80034ac:	20013d88 	.word	0x20013d88

080034b0 <psee_statistics_task>:

	/* Infinite loop */
	for(;;)
	{
		/* Acquire the Semaphore */
		osSemaphoreAcquire(Statistics_SemphHandle, portMAX_DELAY);
 80034b0:	f8df 808c 	ldr.w	r8, [pc, #140]	@ 8003540 <psee_statistics_task+0x90>
		/********************************  AFK Statistics ********************************/
		afk_flicker_evt_cnt = psee_read_afk_flicker_evt_cnt();
		afk_total_evt_cnt = psee_read_afk_total_evt_cnt();

		/* Ratio of total flickering events and total valid events */
		flicker_ratio = ((double)afk_flicker_evt_cnt / (double)afk_total_evt_cnt) * 100 ;
 80034b4:	2400      	movs	r4, #0
		ro_evt_cd_cnt = psee_read_ro_evt_cd_cnt();
 80034b6:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 8003544 <psee_statistics_task+0x94>
		flicker_ratio = ((double)afk_flicker_evt_cnt / (double)afk_total_evt_cnt) * 100 ;
 80034ba:	4d1d      	ldr	r5, [pc, #116]	@ (8003530 <psee_statistics_task+0x80>)
void psee_statistics_task() {
 80034bc:	b580      	push	{r7, lr}
		osSemaphoreAcquire(Statistics_SemphHandle, portMAX_DELAY);
 80034be:	f04f 31ff 	mov.w	r1, #4294967295
 80034c2:	f8d8 0000 	ldr.w	r0, [r8]
 80034c6:	f00c fa5d 	bl	800f984 <osSemaphoreAcquire>
		afk_flicker_evt_cnt = psee_read_afk_flicker_evt_cnt();
 80034ca:	4e1a      	ldr	r6, [pc, #104]	@ (8003534 <psee_statistics_task+0x84>)
		ro_evt_cd_cnt = psee_read_ro_evt_cd_cnt();
 80034cc:	f00c f81e 	bl	800f50c <psee_read_ro_evt_cd_cnt>
		total_ro_evt_cd_cnt = (ro_evt_cd_cnt * 40) / 1000;
 80034d0:	2219      	movs	r2, #25
		ro_evt_cd_cnt = psee_read_ro_evt_cd_cnt();
 80034d2:	b280      	uxth	r0, r0
 80034d4:	f8a9 0000 	strh.w	r0, [r9]
		total_ro_evt_cd_cnt = (ro_evt_cd_cnt * 40) / 1000;
 80034d8:	f8b9 3000 	ldrh.w	r3, [r9]
 80034dc:	b29b      	uxth	r3, r3
 80034de:	fbb3 f3f2 	udiv	r3, r3, r2
 80034e2:	4a15      	ldr	r2, [pc, #84]	@ (8003538 <psee_statistics_task+0x88>)
 80034e4:	8013      	strh	r3, [r2, #0]
		afk_flicker_evt_cnt = psee_read_afk_flicker_evt_cnt();
 80034e6:	f00c f81b 	bl	800f520 <psee_read_afk_flicker_evt_cnt>
 80034ea:	6030      	str	r0, [r6, #0]
		afk_total_evt_cnt = psee_read_afk_total_evt_cnt();
 80034ec:	f00c f822 	bl	800f534 <psee_read_afk_total_evt_cnt>
 80034f0:	4682      	mov	sl, r0
		flicker_ratio = ((double)afk_flicker_evt_cnt / (double)afk_total_evt_cnt) * 100 ;
 80034f2:	6830      	ldr	r0, [r6, #0]
 80034f4:	f7fd f826 	bl	8000544 <__aeabi_ui2d>
 80034f8:	4606      	mov	r6, r0
 80034fa:	460f      	mov	r7, r1
 80034fc:	4650      	mov	r0, sl
 80034fe:	f7fd f821 	bl	8000544 <__aeabi_ui2d>
 8003502:	4602      	mov	r2, r0
 8003504:	460b      	mov	r3, r1
 8003506:	4630      	mov	r0, r6
 8003508:	4639      	mov	r1, r7
 800350a:	f7fd f9bf 	bl	800088c <__aeabi_ddiv>
 800350e:	4622      	mov	r2, r4
 8003510:	462b      	mov	r3, r5
 8003512:	f7fd f891 	bl	8000638 <__aeabi_dmul>
		afk_flickering_ratio = (uint32_t)flicker_ratio;
 8003516:	f7fd fb67 	bl	8000be8 <__aeabi_d2uiz>
 800351a:	4b08      	ldr	r3, [pc, #32]	@ (800353c <psee_statistics_task+0x8c>)
 800351c:	b280      	uxth	r0, r0
 800351e:	8018      	strh	r0, [r3, #0]

		/* Release the Semaphore */
		osSemaphoreRelease(Statistics_SemphHandle);
 8003520:	f8d8 0000 	ldr.w	r0, [r8]
 8003524:	f00c fa6a 	bl	800f9fc <osSemaphoreRelease>

		vTaskDelay( 15 / portTICK_PERIOD_MS);
 8003528:	200f      	movs	r0, #15
 800352a:	f00d ff25 	bl	8011378 <vTaskDelay>
	for(;;)
 800352e:	e7c6      	b.n	80034be <psee_statistics_task+0xe>
 8003530:	40590000 	.word	0x40590000
 8003534:	20013d70 	.word	0x20013d70
 8003538:	20013d84 	.word	0x20013d84
 800353c:	20013d82 	.word	0x20013d82
 8003540:	200081a0 	.word	0x200081a0
 8003544:	20013d74 	.word	0x20013d74

08003548 <psee_activity_map_task>:

	/* Infinite loop */
	for(;;)
	{
		/* Acquire the Semaphore */
		osSemaphoreAcquire(Activity_Map_SemphHandle, portMAX_DELAY);
 8003548:	4c08      	ldr	r4, [pc, #32]	@ (800356c <psee_activity_map_task+0x24>)

		/* Read the values of the 16 ro_lp_evt counters */
		psee_read_ro_lp_evt_cnt((uint32_t *)lp_counter);
 800354a:	4d09      	ldr	r5, [pc, #36]	@ (8003570 <psee_activity_map_task+0x28>)
void psee_activity_map_task() {
 800354c:	b508      	push	{r3, lr}
		osSemaphoreAcquire(Activity_Map_SemphHandle, portMAX_DELAY);
 800354e:	f04f 31ff 	mov.w	r1, #4294967295
 8003552:	6820      	ldr	r0, [r4, #0]
 8003554:	f00c fa16 	bl	800f984 <osSemaphoreAcquire>
		psee_read_ro_lp_evt_cnt((uint32_t *)lp_counter);
 8003558:	4628      	mov	r0, r5
 800355a:	f00b ffba 	bl	800f4d2 <psee_read_ro_lp_evt_cnt>

		/* Release the Semaphore */
		osSemaphoreRelease(Activity_Map_SemphHandle);
 800355e:	6820      	ldr	r0, [r4, #0]
 8003560:	f00c fa4c 	bl	800f9fc <osSemaphoreRelease>

		vTaskDelay( 15 / portTICK_PERIOD_MS);
 8003564:	200f      	movs	r0, #15
 8003566:	f00d ff07 	bl	8011378 <vTaskDelay>
	for(;;)
 800356a:	e7f0      	b.n	800354e <psee_activity_map_task+0x6>
 800356c:	200081a4 	.word	0x200081a4
 8003570:	20013d88 	.word	0x20013d88

08003574 <psee_led_tracking_task>:
}

/**
 * @brief Function implementing the Led tracking task.
 */
void psee_led_tracking_task() {
 8003574:	b538      	push	{r3, r4, r5, lr}

	/* Infinite loop */
	for(;;)
	{
		/* Acquire the Semaphore */
		osSemaphoreAcquire(Led_Tracking_SemphHandle, portMAX_DELAY);
 8003576:	4c0a      	ldr	r4, [pc, #40]	@ (80035a0 <psee_led_tracking_task+0x2c>)

		/* Read the value of the mailbox misc register */
		uint32_t mbx_value = psee_get_mbx_misc();

		/* Fetch the value of the X coordinate */
		led_coordinates[0] = mbx_value >> 16;
 8003578:	4d0a      	ldr	r5, [pc, #40]	@ (80035a4 <psee_led_tracking_task+0x30>)
		osSemaphoreAcquire(Led_Tracking_SemphHandle, portMAX_DELAY);
 800357a:	f04f 31ff 	mov.w	r1, #4294967295
 800357e:	6820      	ldr	r0, [r4, #0]
 8003580:	f00c fa00 	bl	800f984 <osSemaphoreAcquire>
		uint32_t mbx_value = psee_get_mbx_misc();
 8003584:	f00b ff18 	bl	800f3b8 <psee_get_mbx_misc>
		led_coordinates[0] = mbx_value >> 16;
 8003588:	0c03      	lsrs	r3, r0, #16

		/* Fetch the value of the Y coordinate */
		led_coordinates[1] = mbx_value & 0xFFFF;
 800358a:	b280      	uxth	r0, r0
		led_coordinates[0] = mbx_value >> 16;
 800358c:	602b      	str	r3, [r5, #0]
		led_coordinates[1] = mbx_value & 0xFFFF;
 800358e:	6068      	str	r0, [r5, #4]

		/* Release the Semaphore */
		osSemaphoreRelease(Led_Tracking_SemphHandle);
 8003590:	6820      	ldr	r0, [r4, #0]
 8003592:	f00c fa33 	bl	800f9fc <osSemaphoreRelease>

		vTaskDelay( 3 / portTICK_PERIOD_MS);
 8003596:	2003      	movs	r0, #3
 8003598:	f00d feee 	bl	8011378 <vTaskDelay>
	for(;;)
 800359c:	e7ed      	b.n	800357a <psee_led_tracking_task+0x6>
 800359e:	bf00      	nop
 80035a0:	2000819c 	.word	0x2000819c
 80035a4:	20013d78 	.word	0x20013d78

080035a8 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

   ldr   sp, =_estack      /* set stack pointer */
 80035a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80035e0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80035ac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80035ae:	e003      	b.n	80035b8 <LoopCopyDataInit>

080035b0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80035b0:	4b0c      	ldr	r3, [pc, #48]	@ (80035e4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80035b2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80035b4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80035b6:	3104      	adds	r1, #4

080035b8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80035b8:	480b      	ldr	r0, [pc, #44]	@ (80035e8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80035ba:	4b0c      	ldr	r3, [pc, #48]	@ (80035ec <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80035bc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80035be:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80035c0:	d3f6      	bcc.n	80035b0 <CopyDataInit>
  ldr  r2, =_sbss
 80035c2:	4a0b      	ldr	r2, [pc, #44]	@ (80035f0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80035c4:	e002      	b.n	80035cc <LoopFillZerobss>

080035c6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80035c6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80035c8:	f842 3b04 	str.w	r3, [r2], #4

080035cc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80035cc:	4b09      	ldr	r3, [pc, #36]	@ (80035f4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80035ce:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80035d0:	d3f9      	bcc.n	80035c6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80035d2:	f006 f83f 	bl	8009654 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80035d6:	f028 f8a5 	bl	802b724 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80035da:	f7fe f91f 	bl	800181c <main>
  bx  lr    
 80035de:	4770      	bx	lr
   ldr   sp, =_estack      /* set stack pointer */
 80035e0:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80035e4:	080445c4 	.word	0x080445c4
  ldr  r0, =_sdata
 80035e8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80035ec:	20007cfc 	.word	0x20007cfc
  ldr  r2, =_sbss
 80035f0:	20007d00 	.word	0x20007d00
  ldr  r3, = _ebss
 80035f4:	2002ab14 	.word	0x2002ab14

080035f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80035f8:	e7fe      	b.n	80035f8 <ADC_IRQHandler>

080035fa <MX_TouchGFX_PreOSInit>:
/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
}
 80035fa:	4770      	bx	lr

080035fc <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 80035fc:	b508      	push	{r3, lr}
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_components_init();
 80035fe:	f000 fd8b 	bl	8004118 <touchgfx_components_init>
  touchgfx_init();
}
 8003602:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  touchgfx_init();
 8003606:	f000 bd15 	b.w	8004034 <touchgfx_init>

0800360a <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 800360a:	f000 bd87 	b.w	800411c <touchgfx_taskEntry>

0800360e <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
 800360e:	6840      	ldr	r0, [r0, #4]
    }
 8003610:	4770      	bx	lr

08003612 <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
 8003612:	6041      	str	r1, [r0, #4]
    }
 8003614:	4770      	bx	lr
	...

08003618 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>:
    //                                    Embedded Trace Macrocell (ETM)
    //                                    Trace Port Interface Unit (TPIU).
    //                                    This enables control of power usage unless tracing is required. The application can enable this, for ITM use, or use by a debugger.

    // Enable Debug Exception and Monitor Control Register
    *((volatile unsigned int*)0xE000EDFC) |= 0x01000000;
 8003618:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 800361c:	f8d2 3dfc 	ldr.w	r3, [r2, #3580]	@ 0xdfc
 8003620:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003624:	f8c2 3dfc 	str.w	r3, [r2, #3580]	@ 0xdfc
    // Enable Lock Access Register
    *((volatile unsigned int*)0xE0001FB0) |= 0xC5ACCE55;
 8003628:	4b05      	ldr	r3, [pc, #20]	@ (8003640 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x28>)
 800362a:	4a06      	ldr	r2, [pc, #24]	@ (8003644 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x2c>)
 800362c:	f8d3 1fb0 	ldr.w	r1, [r3, #4016]	@ 0xfb0
 8003630:	430a      	orrs	r2, r1
 8003632:	f8c3 2fb0 	str.w	r2, [r3, #4016]	@ 0xfb0
    // Enable Data Watchpoint and Trace Control Register
    *((volatile unsigned int*)0xE0001000) |= 1;
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	f042 0201 	orr.w	r2, r2, #1
 800363c:	601a      	str	r2, [r3, #0]
}
 800363e:	4770      	bx	lr
 8003640:	e0001000 	.word	0xe0001000
 8003644:	c5acce55 	.word	0xc5acce55

08003648 <_ZN8touchgfx25CortexMMCUInstrumentation12getElapsedUSEjjj>:

//Board specific clockfrequency
unsigned int CortexMMCUInstrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 8003648:	1a52      	subs	r2, r2, r1
 800364a:	eb02 0253 	add.w	r2, r2, r3, lsr #1
}
 800364e:	fbb2 f0f3 	udiv	r0, r2, r3
 8003652:	4770      	bx	lr

08003654 <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv>:

unsigned int CortexMMCUInstrumentation::getCPUCycles()
{
    return *((volatile unsigned int*)0xE0001004);
 8003654:	4b01      	ldr	r3, [pc, #4]	@ (800365c <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv+0x8>)
 8003656:	6858      	ldr	r0, [r3, #4]
}
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop
 800365c:	e0001000 	.word	0xe0001000

08003660 <_ZN8touchgfx25CortexMMCUInstrumentationD1Ev>:
 *        Interface for instrumenting Cortex-M processors to measure MCU load via measured CPU
 *        cycles.
 *
 * @sa MCUInstrumentation
 */
class CortexMMCUInstrumentation : public MCUInstrumentation
 8003660:	4770      	bx	lr

08003662 <_ZN8touchgfx25CortexMMCUInstrumentationD0Ev>:
 8003662:	b510      	push	{r4, lr}
 8003664:	4604      	mov	r4, r0
 8003666:	210c      	movs	r1, #12
 8003668:	f026 fe2a 	bl	802a2c0 <_ZdlPvj>
 800366c:	4620      	mov	r0, r4
 800366e:	bd10      	pop	{r4, pc}

08003670 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb>:

void CortexMMCUInstrumentation::setMCUActive(bool active)
{
    if (active) //idle task sched out
    {
        uint32_t cc_temp = getCPUCycles() - cc_in;
 8003670:	6803      	ldr	r3, [r0, #0]
{
 8003672:	b510      	push	{r4, lr}
        uint32_t cc_temp = getCPUCycles() - cc_in;
 8003674:	691b      	ldr	r3, [r3, #16]
{
 8003676:	4604      	mov	r4, r0
    if (active) //idle task sched out
 8003678:	b131      	cbz	r1, 8003688 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x18>
        uint32_t cc_temp = getCPUCycles() - cc_in;
 800367a:	4798      	blx	r3
 800367c:	68a2      	ldr	r2, [r4, #8]
        cc_consumed += cc_temp;
 800367e:	6863      	ldr	r3, [r4, #4]
 8003680:	1a9b      	subs	r3, r3, r2
 8003682:	4403      	add	r3, r0
 8003684:	6063      	str	r3, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 8003686:	bd10      	pop	{r4, pc}
        cc_in = getCPUCycles();
 8003688:	4798      	blx	r3
 800368a:	60a0      	str	r0, [r4, #8]
}
 800368c:	e7fb      	b.n	8003686 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x16>
	...

08003690 <_ZN20STM32TouchController4initEv>:
extern I2C_HandleTypeDef hi2c3;

void STM32TouchController::init()
{
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8003690:	4b02      	ldr	r3, [pc, #8]	@ (800369c <_ZN20STM32TouchController4initEv+0xc>)

    /* Initialize the TS driver */
    tsDriver->Start(TS_I2C_ADDRESS);
 8003692:	2070      	movs	r0, #112	@ 0x70
    tsDriver = &ft5336_ts_drv;
 8003694:	4a02      	ldr	r2, [pc, #8]	@ (80036a0 <_ZN20STM32TouchController4initEv+0x10>)
 8003696:	6013      	str	r3, [r2, #0]
    tsDriver->Start(TS_I2C_ADDRESS);
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	4718      	bx	r3
 800369c:	20007a68 	.word	0x20007a68
 80036a0:	20013dc8 	.word	0x20013dc8

080036a4 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 80036a4:	4770      	bx	lr

080036a6 <_ZN20STM32TouchControllerD0Ev>:
 80036a6:	b510      	push	{r4, lr}
 80036a8:	4604      	mov	r4, r0
 80036aa:	2104      	movs	r1, #4
 80036ac:	f026 fe08 	bl	802a2c0 <_ZdlPvj>
 80036b0:	4620      	mov	r0, r4
 80036b2:	bd10      	pop	{r4, pc}

080036b4 <_ZN20STM32TouchController11sampleTouchERlS0_>:
}

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 80036b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    if (tsDriver)
 80036b6:	4e0e      	ldr	r6, [pc, #56]	@ (80036f0 <_ZN20STM32TouchController11sampleTouchERlS0_+0x3c>)
{
 80036b8:	460d      	mov	r5, r1
 80036ba:	4614      	mov	r4, r2
    if (tsDriver)
 80036bc:	6833      	ldr	r3, [r6, #0]
 80036be:	b913      	cbnz	r3, 80036c6 <_ZN20STM32TouchController11sampleTouchERlS0_+0x12>
            x = (int32_t)_x;
            y = (int32_t)_y;
            return true;
        }
    }
    return false;
 80036c0:	2000      	movs	r0, #0
}
 80036c2:	b002      	add	sp, #8
 80036c4:	bd70      	pop	{r4, r5, r6, pc}
        if (tsDriver->DetectTouch(TS_I2C_ADDRESS))
 80036c6:	691b      	ldr	r3, [r3, #16]
 80036c8:	2070      	movs	r0, #112	@ 0x70
 80036ca:	4798      	blx	r3
 80036cc:	2800      	cmp	r0, #0
 80036ce:	d0f7      	beq.n	80036c0 <_ZN20STM32TouchController11sampleTouchERlS0_+0xc>
            tsDriver->GetXY(TS_I2C_ADDRESS, &_y, &_x);
 80036d0:	6833      	ldr	r3, [r6, #0]
 80036d2:	2070      	movs	r0, #112	@ 0x70
 80036d4:	aa01      	add	r2, sp, #4
 80036d6:	f10d 0106 	add.w	r1, sp, #6
 80036da:	695b      	ldr	r3, [r3, #20]
 80036dc:	4798      	blx	r3
            x = (int32_t)_x;
 80036de:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80036e2:	2001      	movs	r0, #1
 80036e4:	602b      	str	r3, [r5, #0]
            y = (int32_t)_y;
 80036e6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80036ea:	6023      	str	r3, [r4, #0]
            return true;
 80036ec:	e7e9      	b.n	80036c2 <_ZN20STM32TouchController11sampleTouchERlS0_+0xe>
 80036ee:	bf00      	nop
 80036f0:	20013dc8 	.word	0x20013dc8

080036f4 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80036f4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80036f6:	2301      	movs	r3, #1
{
 80036f8:	f88d 2017 	strb.w	r2, [sp, #23]
    status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80036fc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003700:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003704:	f10d 0217 	add.w	r2, sp, #23
 8003708:	9200      	str	r2, [sp, #0]
 800370a:	460a      	mov	r2, r1
 800370c:	4601      	mov	r1, r0
 800370e:	4805      	ldr	r0, [pc, #20]	@ (8003724 <TS_IO_Write+0x30>)
 8003710:	f007 ff6c 	bl	800b5ec <HAL_I2C_Mem_Write>
    if (status != HAL_OK)
 8003714:	b110      	cbz	r0, 800371c <TS_IO_Write+0x28>
    HAL_I2C_DeInit(i2c_handler);
 8003716:	4803      	ldr	r0, [pc, #12]	@ (8003724 <TS_IO_Write+0x30>)
 8003718:	f007 feca 	bl	800b4b0 <HAL_I2C_DeInit>
    I2Cx_WriteMultiple(&hi2c3, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&Value, 1);
}
 800371c:	b007      	add	sp, #28
 800371e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003722:	bf00      	nop
 8003724:	200084c8 	.word	0x200084c8

08003728 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8003728:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    uint8_t read_value = 0;
 800372a:	2300      	movs	r3, #0
{
 800372c:	460a      	mov	r2, r1
    status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800372e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
    uint8_t read_value = 0;
 8003732:	f88d 3017 	strb.w	r3, [sp, #23]
    status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003736:	2301      	movs	r3, #1
 8003738:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800373c:	f10d 0117 	add.w	r1, sp, #23
 8003740:	9100      	str	r1, [sp, #0]
 8003742:	4601      	mov	r1, r0
 8003744:	4805      	ldr	r0, [pc, #20]	@ (800375c <TS_IO_Read+0x34>)
 8003746:	f008 f82b 	bl	800b7a0 <HAL_I2C_Mem_Read>
    if (status != HAL_OK)
 800374a:	b110      	cbz	r0, 8003752 <TS_IO_Read+0x2a>
    HAL_I2C_DeInit(i2c_handler);
 800374c:	4803      	ldr	r0, [pc, #12]	@ (800375c <TS_IO_Read+0x34>)
 800374e:	f007 feaf 	bl	800b4b0 <HAL_I2C_DeInit>

    I2Cx_ReadMultiple(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);

    return read_value;
}
 8003752:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8003756:	b007      	add	sp, #28
 8003758:	f85d fb04 	ldr.w	pc, [sp], #4
 800375c:	200084c8 	.word	0x200084c8

08003760 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
    switch (id)
 8003760:	2803      	cmp	r0, #3
 8003762:	d823      	bhi.n	80037ac <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x4c>
 8003764:	e8df f000 	tbb	[pc, r0]
 8003768:	1a130b02 	.word	0x1a130b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 800376c:	4b10      	ldr	r3, [pc, #64]	@ (80037b0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
 800376e:	2110      	movs	r1, #16
 8003770:	4810      	ldr	r0, [pc, #64]	@ (80037b4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	fab2 f282 	clz	r2, r2
 8003778:	0952      	lsrs	r2, r2, #5
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 800377a:	f007 bcc3 	b.w	800b104 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 800377e:	4b0c      	ldr	r3, [pc, #48]	@ (80037b0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
 8003780:	2140      	movs	r1, #64	@ 0x40
 8003782:	685a      	ldr	r2, [r3, #4]
 8003784:	fab2 f282 	clz	r2, r2
 8003788:	0952      	lsrs	r2, r2, #5
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
 800378a:	480b      	ldr	r0, [pc, #44]	@ (80037b8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
 800378c:	e7f5      	b.n	800377a <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x1a>
 800378e:	4b08      	ldr	r3, [pc, #32]	@ (80037b0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
 8003790:	2180      	movs	r1, #128	@ 0x80
 8003792:	689a      	ldr	r2, [r3, #8]
 8003794:	fab2 f282 	clz	r2, r2
 8003798:	0952      	lsrs	r2, r2, #5
 800379a:	e7f6      	b.n	800378a <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x2a>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 800379c:	4b04      	ldr	r3, [pc, #16]	@ (80037b0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
 800379e:	2140      	movs	r1, #64	@ 0x40
 80037a0:	4806      	ldr	r0, [pc, #24]	@ (80037bc <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x5c>)
 80037a2:	68da      	ldr	r2, [r3, #12]
 80037a4:	fab2 f282 	clz	r2, r2
 80037a8:	0952      	lsrs	r2, r2, #5
 80037aa:	e7e6      	b.n	800377a <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	20013dcc 	.word	0x20013dcc
 80037b4:	40020400 	.word	0x40020400
 80037b8:	40020800 	.word	0x40020800
 80037bc:	40021800 	.word	0x40021800

080037c0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
    switch (id)
 80037c0:	2803      	cmp	r0, #3
 80037c2:	d823      	bhi.n	800380c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x4c>
 80037c4:	e8df f000 	tbb	[pc, r0]
 80037c8:	1a130b02 	.word	0x1a130b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 80037cc:	4b10      	ldr	r3, [pc, #64]	@ (8003810 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
 80037ce:	2110      	movs	r1, #16
 80037d0:	4810      	ldr	r0, [pc, #64]	@ (8003814 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	3a00      	subs	r2, #0
 80037d6:	bf18      	it	ne
 80037d8:	2201      	movne	r2, #1
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 80037da:	f007 bc93 	b.w	800b104 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 80037de:	4b0c      	ldr	r3, [pc, #48]	@ (8003810 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
 80037e0:	2140      	movs	r1, #64	@ 0x40
 80037e2:	685a      	ldr	r2, [r3, #4]
 80037e4:	3a00      	subs	r2, #0
 80037e6:	bf18      	it	ne
 80037e8:	2201      	movne	r2, #1
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 80037ea:	480b      	ldr	r0, [pc, #44]	@ (8003818 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
 80037ec:	e7f5      	b.n	80037da <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x1a>
 80037ee:	4b08      	ldr	r3, [pc, #32]	@ (8003810 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
 80037f0:	2180      	movs	r1, #128	@ 0x80
 80037f2:	689a      	ldr	r2, [r3, #8]
 80037f4:	3a00      	subs	r2, #0
 80037f6:	bf18      	it	ne
 80037f8:	2201      	movne	r2, #1
 80037fa:	e7f6      	b.n	80037ea <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x2a>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 80037fc:	4b04      	ldr	r3, [pc, #16]	@ (8003810 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
 80037fe:	2140      	movs	r1, #64	@ 0x40
 8003800:	4806      	ldr	r0, [pc, #24]	@ (800381c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x5c>)
 8003802:	68da      	ldr	r2, [r3, #12]
 8003804:	3a00      	subs	r2, #0
 8003806:	bf18      	it	ne
 8003808:	2201      	movne	r2, #1
 800380a:	e7e6      	b.n	80037da <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	20013dcc 	.word	0x20013dcc
 8003814:	40020400 	.word	0x40020400
 8003818:	40020800 	.word	0x40020800
 800381c:	40021800 	.word	0x40021800

08003820 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
    switch (id)
 8003820:	2803      	cmp	r0, #3
 8003822:	d80f      	bhi.n	8003844 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x24>
 8003824:	e8df f000 	tbb	[pc, r0]
 8003828:	0b090602 	.word	0x0b090602
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 800382c:	2110      	movs	r1, #16
 800382e:	4806      	ldr	r0, [pc, #24]	@ (8003848 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x28>)
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8003830:	f007 bc6d 	b.w	800b10e <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8003834:	2140      	movs	r1, #64	@ 0x40
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8003836:	4805      	ldr	r0, [pc, #20]	@ (800384c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2c>)
 8003838:	e7fa      	b.n	8003830 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
 800383a:	2180      	movs	r1, #128	@ 0x80
 800383c:	e7fb      	b.n	8003836 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x16>
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 800383e:	2140      	movs	r1, #64	@ 0x40
 8003840:	4803      	ldr	r0, [pc, #12]	@ (8003850 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x30>)
 8003842:	e7f5      	b.n	8003830 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
#endif
        break;
    }
}
 8003844:	4770      	bx	lr
 8003846:	bf00      	nop
 8003848:	40020400 	.word	0x40020400
 800384c:	40020800 	.word	0x40020800
 8003850:	40021800 	.word	0x40021800

08003854 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>:

/*
 * Gets the state of a pin.
 */
bool GPIO::get(GPIO_ID id)
{
 8003854:	b508      	push	{r3, lr}
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
    switch (id)
 8003856:	2803      	cmp	r0, #3
 8003858:	d813      	bhi.n	8003882 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x2e>
 800385a:	e8df f000 	tbb	[pc, r0]
 800385e:	0a02      	.short	0x0a02
 8003860:	0f0d      	.short	0x0f0d
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8003862:	2110      	movs	r1, #16
 8003864:	4808      	ldr	r0, [pc, #32]	@ (8003888 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x34>)
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8003866:	f007 fc47 	bl	800b0f8 <HAL_GPIO_ReadPin>
#endif
        break;
    }
    return (bitstatus == GPIO_PIN_SET);
}
 800386a:	1e43      	subs	r3, r0, #1
 800386c:	4258      	negs	r0, r3
 800386e:	4158      	adcs	r0, r3
 8003870:	bd08      	pop	{r3, pc}
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8003872:	2140      	movs	r1, #64	@ 0x40
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8003874:	4805      	ldr	r0, [pc, #20]	@ (800388c <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x38>)
 8003876:	e7f6      	b.n	8003866 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x12>
 8003878:	2180      	movs	r1, #128	@ 0x80
 800387a:	e7fb      	b.n	8003874 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x20>
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 800387c:	2140      	movs	r1, #64	@ 0x40
 800387e:	4804      	ldr	r0, [pc, #16]	@ (8003890 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x3c>)
 8003880:	e7f1      	b.n	8003866 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x12>
    switch (id)
 8003882:	2000      	movs	r0, #0
 8003884:	e7f1      	b.n	800386a <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x16>
 8003886:	bf00      	nop
 8003888:	40020400 	.word	0x40020400
 800388c:	40020800 	.word	0x40020800
 8003890:	40021800 	.word	0x40021800

08003894 <_ZN8touchgfx4GPIO4initEv>:
{
 8003894:	b570      	push	{r4, r5, r6, lr}
 8003896:	4d08      	ldr	r5, [pc, #32]	@ (80038b8 <_ZN8touchgfx4GPIO4initEv+0x24>)
    for (int id = 0; id <= 4; id++)
 8003898:	2400      	movs	r4, #0
                GPIO_InvertedLevels[id] = 1;
 800389a:	2601      	movs	r6, #1
        if (GPIO::get(static_cast<GPIO_ID>(id)))
 800389c:	b2e0      	uxtb	r0, r4
 800389e:	f7ff ffd9 	bl	8003854 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>
 80038a2:	b118      	cbz	r0, 80038ac <_ZN8touchgfx4GPIO4initEv+0x18>
            if (GPIO_InvertedLevels[id] != 1)
 80038a4:	682b      	ldr	r3, [r5, #0]
 80038a6:	2b01      	cmp	r3, #1
                GPIO_InvertedLevels[id] = 1;
 80038a8:	bf18      	it	ne
 80038aa:	602e      	strne	r6, [r5, #0]
    for (int id = 0; id <= 4; id++)
 80038ac:	3401      	adds	r4, #1
 80038ae:	3504      	adds	r5, #4
 80038b0:	2c05      	cmp	r4, #5
 80038b2:	d1f3      	bne.n	800389c <_ZN8touchgfx4GPIO4initEv+0x8>
}
 80038b4:	bd70      	pop	{r4, r5, r6, pc}
 80038b6:	bf00      	nop
 80038b8:	20013dcc 	.word	0x20013dcc

080038bc <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
 80038bc:	2301      	movs	r3, #1
        requestedOrientation = orientation;
 80038be:	f880 1078 	strb.w	r1, [r0, #120]	@ 0x78
        displayOrientationChangeRequested = true;
 80038c2:	f880 3079 	strb.w	r3, [r0, #121]	@ 0x79
    }
 80038c6:	4770      	bx	lr

080038c8 <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
 80038c8:	2000      	movs	r0, #0
 80038ca:	4770      	bx	lr

080038cc <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 80038cc:	6441      	str	r1, [r0, #68]	@ 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 80038ce:	3900      	subs	r1, #0
 80038d0:	4b02      	ldr	r3, [pc, #8]	@ (80038dc <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
 80038d2:	bf18      	it	ne
 80038d4:	2101      	movne	r1, #1
 80038d6:	7019      	strb	r1, [r3, #0]
    }
 80038d8:	4770      	bx	lr
 80038da:	bf00      	nop
 80038dc:	20029ed7 	.word	0x20029ed7

080038e0 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 80038e0:	2000      	movs	r0, #0
 80038e2:	4770      	bx	lr

080038e4 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
 80038e4:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80038e6:	b10b      	cbz	r3, 80038ec <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
 80038e8:	4608      	mov	r0, r1
 80038ea:	4718      	bx	r3
        }
    }
 80038ec:	4770      	bx	lr

080038ee <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 80038ee:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80038f2:	4770      	bx	lr

080038f4 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
    {
        return dma.getDMAType();
 80038f4:	6840      	ldr	r0, [r0, #4]
 80038f6:	6803      	ldr	r3, [r0, #0]
 80038f8:	699b      	ldr	r3, [r3, #24]
 80038fa:	4718      	bx	r3

080038fc <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 80038fc:	4770      	bx	lr
	...

08003900 <_ZN11TouchGFXHAL10initializeEv>:

LOCATION_PRAGMA("TouchGFX_Framebuffer")
uint32_t animationBuffer[(480 * 272 * 2 + 3) / 4] LOCATION_ATTRIBUTE("TouchGFX_Framebuffer");

void TouchGFXHAL::initialize()
{
 8003900:	b538      	push	{r3, r4, r5, lr}
 8003902:	4604      	mov	r4, r0
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8003904:	f000 fcd2 	bl	80042ac <_ZN20TouchGFXGeneratedHAL10initializeEv>
    setFrameBufferStartAddresses((void*)frameBuffer0, (void*)frameBuffer1, (void*)animationBuffer);  //enable the animation storage to allow slide animations
 8003908:	6823      	ldr	r3, [r4, #0]
 800390a:	4620      	mov	r0, r4
 800390c:	f8d3 5088 	ldr.w	r5, [r3, #136]	@ 0x88
 8003910:	4b07      	ldr	r3, [pc, #28]	@ (8003930 <_ZN11TouchGFXHAL10initializeEv+0x30>)
 8003912:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	@ 0x3c
 8003916:	47a8      	blx	r5
        lockDMAToPorch = enableLock;
 8003918:	2300      	movs	r3, #0
    lockDMAToFrontPorch(false);
    instrumentation.init();
 800391a:	4d06      	ldr	r5, [pc, #24]	@ (8003934 <_ZN11TouchGFXHAL10initializeEv+0x34>)
 800391c:	f884 304a 	strb.w	r3, [r4, #74]	@ 0x4a
 8003920:	4628      	mov	r0, r5
 8003922:	f7ff fe79 	bl	8003618 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>
        updateMCULoad = enabled;
 8003926:	2301      	movs	r3, #1
        mcuInstrumentation = mcuInstr;
 8003928:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
 800392a:	f884 3070 	strb.w	r3, [r4, #112]	@ 0x70
    setMCUInstrumentation(&instrumentation);
    enableMCULoadCalculation(true);
}
 800392e:	bd38      	pop	{r3, r4, r5, pc}
 8003930:	c0000000 	.word	0xc0000000
 8003934:	20013ddc 	.word	0x20013ddc

08003938 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8003938:	f000 bc82 	b.w	8004240 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>

0800393c <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 800393c:	f000 bc86 	b.w	800424c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>

08003940 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8003940:	b570      	push	{r4, r5, r6, lr}
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8003942:	f000 fcd1 	bl	80042e8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8003946:	4910      	ldr	r1, [pc, #64]	@ (8003988 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x48>)
 8003948:	2300      	movs	r3, #0
 800394a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800394e:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8003952:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003956:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800395a:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800395e:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8003962:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003964:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003968:	4602      	mov	r2, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800396a:	ea46 7582 	orr.w	r5, r6, r2, lsl #30
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800396e:	3a01      	subs	r2, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003970:	f8c1 5274 	str.w	r5, [r1, #628]	@ 0x274
      } while (ways-- != 0U);
 8003974:	d2f9      	bcs.n	800396a <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x2a>
    } while(sets-- != 0U);
 8003976:	3b20      	subs	r3, #32
 8003978:	f113 0f20 	cmn.w	r3, #32
 800397c:	d1f2      	bne.n	8003964 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x24>
 800397e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003982:	f3bf 8f6f 	isb	sy
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    SCB_CleanInvalidateDCache();
}
 8003986:	bd70      	pop	{r4, r5, r6, pc}
 8003988:	e000ed00 	.word	0xe000ed00

0800398c <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 800398c:	f000 bcae 	b.w	80042ec <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>

08003990 <_ZN11TouchGFXHAL19configureInterruptsEv>:
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8003990:	f000 bc32 	b.w	80041f8 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

08003994 <_ZN11TouchGFXHAL16enableInterruptsEv>:
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8003994:	f000 bcac 	b.w	80042f0 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>

08003998 <_ZN11TouchGFXHAL17disableInterruptsEv>:
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8003998:	f000 bcb4 	b.w	8004304 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>

0800399c <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 800399c:	f000 bc36 	b.w	800420c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>

080039a0 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 80039a0:	b510      	push	{r4, lr}
 80039a2:	4604      	mov	r4, r0
        swapFrameBuffers();
 80039a4:	f00f fd32 	bl	801340c <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 80039a8:	6823      	ldr	r3, [r4, #0]
 80039aa:	4620      	mov	r0, r4
 80039ac:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
    }
 80039b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
 80039b4:	4718      	bx	r3

080039b6 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
 80039b6:	f00e bf87 	b.w	80128c8 <_ZN8touchgfx3HAL16flushFrameBufferEv>

080039ba <_ZN11TouchGFXHALD0Ev>:
 80039ba:	b510      	push	{r4, lr}
 80039bc:	4604      	mov	r4, r0
 80039be:	217c      	movs	r1, #124	@ 0x7c
 80039c0:	f026 fc7e 	bl	802a2c0 <_ZdlPvj>
 80039c4:	4620      	mov	r0, r4
 80039c6:	bd10      	pop	{r4, pc}

080039c8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
    {
        if (requestedOrientation != nativeDisplayOrientation)
 80039c8:	f890 1034 	ldrb.w	r1, [r0, #52]	@ 0x34
        {
            if (DISPLAY_ROTATION == rotate0)
 80039cc:	4b0d      	ldr	r3, [pc, #52]	@ (8003a04 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
    virtual void performDisplayOrientationChange()
 80039ce:	b510      	push	{r4, lr}
        if (requestedOrientation != nativeDisplayOrientation)
 80039d0:	f890 4078 	ldrb.w	r4, [r0, #120]	@ 0x78
            if (DISPLAY_ROTATION == rotate0)
 80039d4:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
 80039d6:	428c      	cmp	r4, r1
 80039d8:	d009      	beq.n	80039ee <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            if (DISPLAY_ROTATION == rotate0)
 80039da:	b93a      	cbnz	r2, 80039ec <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 80039dc:	490a      	ldr	r1, [pc, #40]	@ (8003a08 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80039de:	4a0b      	ldr	r2, [pc, #44]	@ (8003a0c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
                const uint16_t tmp = DISPLAY_HEIGHT;
 80039e0:	8808      	ldrh	r0, [r1, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80039e2:	8814      	ldrh	r4, [r2, #0]
                DISPLAY_WIDTH = tmp;
 80039e4:	8010      	strh	r0, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 80039e6:	2201      	movs	r2, #1
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80039e8:	800c      	strh	r4, [r1, #0]
        else if (DISPLAY_ROTATION != rotate0)
        {
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
 80039ea:	701a      	strb	r2, [r3, #0]
        }
    }
 80039ec:	bd10      	pop	{r4, pc}
        else if (DISPLAY_ROTATION != rotate0)
 80039ee:	2a00      	cmp	r2, #0
 80039f0:	d0fc      	beq.n	80039ec <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80039f2:	4a06      	ldr	r2, [pc, #24]	@ (8003a0c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
            const uint16_t tmp = DISPLAY_HEIGHT;
 80039f4:	4904      	ldr	r1, [pc, #16]	@ (8003a08 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80039f6:	8814      	ldrh	r4, [r2, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
 80039f8:	8808      	ldrh	r0, [r1, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80039fa:	800c      	strh	r4, [r1, #0]
            DISPLAY_WIDTH = tmp;
 80039fc:	8010      	strh	r0, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 80039fe:	2200      	movs	r2, #0
 8003a00:	e7f3      	b.n	80039ea <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x22>
 8003a02:	bf00      	nop
 8003a04:	20029ed0 	.word	0x20029ed0
 8003a08:	20029ece 	.word	0x20029ece
 8003a0c:	20029ecc 	.word	0x20029ecc

08003a10 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8003a10:	b570      	push	{r4, r5, r6, lr}
 8003a12:	460d      	mov	r5, r1
 8003a14:	4619      	mov	r1, r3
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8003a16:	b935      	cbnz	r5, 8003a26 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x16>
 8003a18:	4b09      	ldr	r3, [pc, #36]	@ (8003a40 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x30>)
 8003a1a:	f240 21d2 	movw	r1, #722	@ 0x2d2
 8003a1e:	4a09      	ldr	r2, [pc, #36]	@ (8003a44 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x34>)
 8003a20:	4809      	ldr	r0, [pc, #36]	@ (8003a48 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x38>)
 8003a22:	f026 fdcb 	bl	802a5bc <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8003a26:	e9c0 520f 	strd	r5, r2, [r0, #60]	@ 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8003a2a:	3a00      	subs	r2, #0
 8003a2c:	4b07      	ldr	r3, [pc, #28]	@ (8003a4c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x3c>)
 8003a2e:	bf18      	it	ne
 8003a30:	2201      	movne	r2, #1
 8003a32:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 8003a34:	6803      	ldr	r3, [r0, #0]
    }
 8003a36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setAnimationStorage(animationStorage);
 8003a3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a3e:	4718      	bx	r3
 8003a40:	0802d5cc 	.word	0x0802d5cc
 8003a44:	0802d604 	.word	0x0802d604
 8003a48:	0802d652 	.word	0x0802d652
 8003a4c:	20029ed6 	.word	0x20029ed6

08003a50 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8003a50:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8003a52:	4b09      	ldr	r3, [pc, #36]	@ (8003a78 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 8003a54:	881b      	ldrh	r3, [r3, #0]
 8003a56:	428b      	cmp	r3, r1
 8003a58:	d803      	bhi.n	8003a62 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x12>
 8003a5a:	4b08      	ldr	r3, [pc, #32]	@ (8003a7c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 8003a5c:	881b      	ldrh	r3, [r3, #0]
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d905      	bls.n	8003a6e <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1e>
 8003a62:	4b07      	ldr	r3, [pc, #28]	@ (8003a80 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 8003a64:	219e      	movs	r1, #158	@ 0x9e
 8003a66:	4a07      	ldr	r2, [pc, #28]	@ (8003a84 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 8003a68:	4807      	ldr	r0, [pc, #28]	@ (8003a88 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 8003a6a:	f026 fda7 	bl	802a5bc <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8003a6e:	4b07      	ldr	r3, [pc, #28]	@ (8003a8c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 8003a70:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 8003a72:	4b07      	ldr	r3, [pc, #28]	@ (8003a90 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 8003a74:	801a      	strh	r2, [r3, #0]
    }
 8003a76:	bd08      	pop	{r3, pc}
 8003a78:	20029ecc 	.word	0x20029ecc
 8003a7c:	20029ece 	.word	0x20029ece
 8003a80:	0802d697 	.word	0x0802d697
 8003a84:	0802d6fa 	.word	0x0802d6fa
 8003a88:	0802d652 	.word	0x0802d652
 8003a8c:	20029ed2 	.word	0x20029ed2
 8003a90:	20029ed4 	.word	0x20029ed4

08003a94 <_ZN8touchgfx3HAL11getBlitCapsEv>:
    virtual BlitOperations getBlitCaps()
 8003a94:	4603      	mov	r3, r0
        if (useDMAAcceleration)
 8003a96:	f890 007a 	ldrb.w	r0, [r0, #122]	@ 0x7a
 8003a9a:	b118      	cbz	r0, 8003aa4 <_ZN8touchgfx3HAL11getBlitCapsEv+0x10>
 8003a9c:	6858      	ldr	r0, [r3, #4]
            return dma.getBlitCaps();
 8003a9e:	6803      	ldr	r3, [r0, #0]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4718      	bx	r3
    }
 8003aa4:	4770      	bx	lr
	...

08003aa8 <_GLOBAL__sub_I_instrumentation>:
        : cc_consumed(0),
 8003aa8:	4b03      	ldr	r3, [pc, #12]	@ (8003ab8 <_GLOBAL__sub_I_instrumentation+0x10>)
 8003aaa:	2200      	movs	r2, #0
 8003aac:	605a      	str	r2, [r3, #4]
          cc_in(0)
 8003aae:	609a      	str	r2, [r3, #8]
 8003ab0:	4a02      	ldr	r2, [pc, #8]	@ (8003abc <_GLOBAL__sub_I_instrumentation+0x14>)
 8003ab2:	601a      	str	r2, [r3, #0]
        {
            touchgfx::HAL::getInstance()->setMCUActive(false);
        }
        return pdTRUE;
    }
}
 8003ab4:	4770      	bx	lr
 8003ab6:	bf00      	nop
 8003ab8:	20013ddc 	.word	0x20013ddc
 8003abc:	0802d594 	.word	0x0802d594

08003ac0 <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8003ac0:	2101      	movs	r1, #1
 8003ac2:	2200      	movs	r2, #0
{
 8003ac4:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8003ac6:	4608      	mov	r0, r1
 8003ac8:	f00b ff04 	bl	800f8d4 <osSemaphoreNew>
 8003acc:	4b0a      	ldr	r3, [pc, #40]	@ (8003af8 <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 8003ace:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8003ad0:	b928      	cbnz	r0, 8003ade <_ZN8touchgfx10OSWrappers10initializeEv+0x1e>
 8003ad2:	4b0a      	ldr	r3, [pc, #40]	@ (8003afc <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 8003ad4:	2128      	movs	r1, #40	@ 0x28
 8003ad6:	4a0a      	ldr	r2, [pc, #40]	@ (8003b00 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8003ad8:	480a      	ldr	r0, [pc, #40]	@ (8003b04 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8003ada:	f026 fd6f 	bl	802a5bc <__assert_func>
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8003ade:	2200      	movs	r2, #0
 8003ae0:	2104      	movs	r1, #4
 8003ae2:	2001      	movs	r0, #1
 8003ae4:	f00b ffc0 	bl	800fa68 <osMessageQueueNew>
 8003ae8:	4b07      	ldr	r3, [pc, #28]	@ (8003b08 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 8003aea:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8003aec:	b918      	cbnz	r0, 8003af6 <_ZN8touchgfx10OSWrappers10initializeEv+0x36>
 8003aee:	4b07      	ldr	r3, [pc, #28]	@ (8003b0c <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 8003af0:	212c      	movs	r1, #44	@ 0x2c
 8003af2:	4a03      	ldr	r2, [pc, #12]	@ (8003b00 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8003af4:	e7f0      	b.n	8003ad8 <_ZN8touchgfx10OSWrappers10initializeEv+0x18>
}
 8003af6:	bd08      	pop	{r3, pc}
 8003af8:	20013dec 	.word	0x20013dec
 8003afc:	0802d818 	.word	0x0802d818
 8003b00:	0802d861 	.word	0x0802d861
 8003b04:	0802d890 	.word	0x0802d890
 8003b08:	20013de8 	.word	0x20013de8
 8003b0c:	0802d908 	.word	0x0802d908

08003b10 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8003b10:	4b02      	ldr	r3, [pc, #8]	@ (8003b1c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
 8003b12:	f04f 31ff 	mov.w	r1, #4294967295
 8003b16:	6818      	ldr	r0, [r3, #0]
 8003b18:	f00b bf34 	b.w	800f984 <osSemaphoreAcquire>
 8003b1c:	20013dec 	.word	0x20013dec

08003b20 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
 8003b20:	4b01      	ldr	r3, [pc, #4]	@ (8003b28 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
 8003b22:	6818      	ldr	r0, [r3, #0]
 8003b24:	f00b bf6a 	b.w	800f9fc <osSemaphoreRelease>
 8003b28:	20013dec 	.word	0x20013dec

08003b2c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8003b2c:	4b02      	ldr	r3, [pc, #8]	@ (8003b38 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
 8003b2e:	2100      	movs	r1, #0
 8003b30:	6818      	ldr	r0, [r3, #0]
 8003b32:	f00b bf27 	b.w	800f984 <osSemaphoreAcquire>
 8003b36:	bf00      	nop
 8003b38:	20013dec 	.word	0x20013dec

08003b3c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 * from ISR.
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
 8003b3c:	f7ff bff0 	b.w	8003b20 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08003b40 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8003b40:	2300      	movs	r3, #0
 8003b42:	4803      	ldr	r0, [pc, #12]	@ (8003b50 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
 8003b44:	4903      	ldr	r1, [pc, #12]	@ (8003b54 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 8003b46:	461a      	mov	r2, r3
 8003b48:	6800      	ldr	r0, [r0, #0]
 8003b4a:	f00b bfd3 	b.w	800faf4 <osMessageQueuePut>
 8003b4e:	bf00      	nop
 8003b50:	20013de8 	.word	0x20013de8
 8003b54:	20007a5c 	.word	0x20007a5c

08003b58 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8003b58:	b513      	push	{r0, r1, r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	4c07      	ldr	r4, [pc, #28]	@ (8003b7c <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8003b5e:	a901      	add	r1, sp, #4
 8003b60:	461a      	mov	r2, r3
 8003b62:	6820      	ldr	r0, [r4, #0]
 8003b64:	f00c f808 	bl	800fb78 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8003b68:	f04f 33ff 	mov.w	r3, #4294967295
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	a901      	add	r1, sp, #4
 8003b70:	6820      	ldr	r0, [r4, #0]
 8003b72:	f00c f801 	bl	800fb78 <osMessageQueueGet>
}
 8003b76:	b002      	add	sp, #8
 8003b78:	bd10      	pop	{r4, pc}
 8003b7a:	bf00      	nop
 8003b7c:	20013de8 	.word	0x20013de8

08003b80 <_ZN8touchgfx13DMA_Interface5flushEv>:
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
    {
        waitForFrameBufferSemaphore();
 8003b80:	6803      	ldr	r3, [r0, #0]
 8003b82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b84:	4718      	bx	r3

08003b86 <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 8003b86:	2001      	movs	r0, #1
 8003b88:	4770      	bx	lr

08003b8a <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
    {
        executeCompleted();
 8003b8a:	6803      	ldr	r3, [r0, #0]
 8003b8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b8e:	4718      	bx	r3

08003b90 <_ZN8STM32DMA10initializeEv>:
}

void STM32DMA::initialize()
{
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8003b90:	4b0d      	ldr	r3, [pc, #52]	@ (8003bc8 <_ZN8STM32DMA10initializeEv+0x38>)
{
 8003b92:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8003b94:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b96:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8003b9a:	631a      	str	r2, [r3, #48]	@ 0x30
 8003b9c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b9e:	f402 0200 	and.w	r2, r2, #8388608	@ 0x800000
 8003ba2:	9201      	str	r2, [sp, #4]
 8003ba4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8003ba6:	691a      	ldr	r2, [r3, #16]
 8003ba8:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8003bac:	611a      	str	r2, [r3, #16]
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8003bae:	691a      	ldr	r2, [r3, #16]
 8003bb0:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
 8003bb4:	611a      	str	r2, [r3, #16]

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8003bb6:	4b05      	ldr	r3, [pc, #20]	@ (8003bcc <_ZN8STM32DMA10initializeEv+0x3c>)
 8003bb8:	4a05      	ldr	r2, [pc, #20]	@ (8003bd0 <_ZN8STM32DMA10initializeEv+0x40>)
 8003bba:	611a      	str	r2, [r3, #16]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bbc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003bc0:	4b04      	ldr	r3, [pc, #16]	@ (8003bd4 <_ZN8STM32DMA10initializeEv+0x44>)
 8003bc2:	609a      	str	r2, [r3, #8]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
}
 8003bc4:	b002      	add	sp, #8
 8003bc6:	4770      	bx	lr
 8003bc8:	40023800 	.word	0x40023800
 8003bcc:	20008570 	.word	0x20008570
 8003bd0:	08003ec5 	.word	0x08003ec5
 8003bd4:	e000e100 	.word	0xe000e100

08003bd8 <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8003bd8:	f640 70ef 	movw	r0, #4079	@ 0xfef
 8003bdc:	4770      	bx	lr
	...

08003be0 <_ZN8STM32DMAD1Ev>:
STM32DMA::~STM32DMA()
 8003be0:	4b05      	ldr	r3, [pc, #20]	@ (8003bf8 <_ZN8STM32DMAD1Ev+0x18>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003be2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003be6:	6003      	str	r3, [r0, #0]
 8003be8:	4b04      	ldr	r3, [pc, #16]	@ (8003bfc <_ZN8STM32DMAD1Ev+0x1c>)
 8003bea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8003bee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003bf2:	f3bf 8f6f 	isb	sy
}
 8003bf6:	4770      	bx	lr
 8003bf8:	0802dad0 	.word	0x0802dad0
 8003bfc:	e000e100 	.word	0xe000e100

08003c00 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8003c00:	b510      	push	{r4, lr}
 8003c02:	4604      	mov	r4, r0
}
 8003c04:	f44f 615a 	mov.w	r1, #3488	@ 0xda0
 8003c08:	f7ff ffea 	bl	8003be0 <_ZN8STM32DMAD1Ev>
 8003c0c:	4620      	mov	r0, r4
 8003c0e:	f026 fb57 	bl	802a2c0 <_ZdlPvj>
 8003c12:	4620      	mov	r0, r4
 8003c14:	bd10      	pop	{r4, pc}
	...

08003c18 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
 8003c18:	b508      	push	{r3, lr}
    switch (format)
 8003c1a:	280a      	cmp	r0, #10
 8003c1c:	d809      	bhi.n	8003c32 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1a>
 8003c1e:	e8df f000 	tbb	[pc, r0]
 8003c22:	1006      	.short	0x1006
 8003c24:	0808080e 	.word	0x0808080e
 8003c28:	10101008 	.word	0x10101008
 8003c2c:	10          	.byte	0x10
 8003c2d:	00          	.byte	0x00
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8003c2e:	2002      	movs	r0, #2
}
 8003c30:	bd08      	pop	{r3, pc}
        assert(0 && "Unsupported Format!");
 8003c32:	4b05      	ldr	r3, [pc, #20]	@ (8003c48 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x30>)
 8003c34:	2186      	movs	r1, #134	@ 0x86
 8003c36:	4a05      	ldr	r2, [pc, #20]	@ (8003c4c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8003c38:	4805      	ldr	r0, [pc, #20]	@ (8003c50 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 8003c3a:	f026 fcbf 	bl	802a5bc <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8003c3e:	2000      	movs	r0, #0
 8003c40:	e7f6      	b.n	8003c30 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
    switch (format)
 8003c42:	2001      	movs	r0, #1
    return dma2dColorMode;
 8003c44:	e7f4      	b.n	8003c30 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 8003c46:	bf00      	nop
 8003c48:	0802d94a 	.word	0x0802d94a
 8003c4c:	0802d965 	.word	0x0802d965
 8003c50:	0802d9b0 	.word	0x0802d9b0

08003c54 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * BLIT_OP_FILL
 * BLIT_OP_FILL_16BIT
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8003c54:	b570      	push	{r4, r5, r6, lr}
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8003c56:	7f8d      	ldrb	r5, [r1, #30]
{
 8003c58:	460c      	mov	r4, r1
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8003c5a:	4628      	mov	r0, r5
 8003c5c:	f7ff ffdc 	bl	8003c18 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8003c60:	8aa6      	ldrh	r6, [r4, #20]
 8003c62:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8003c64:	4b1a      	ldr	r3, [pc, #104]	@ (8003cd0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x7c>)
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8003c66:	ea42 4206 	orr.w	r2, r2, r6, lsl #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003c6a:	6921      	ldr	r1, [r4, #16]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8003c6c:	6358      	str	r0, [r3, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8003c6e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8003c70:	8b62      	ldrh	r2, [r4, #26]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003c72:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8003c74:	1b92      	subs	r2, r2, r6
 8003c76:	641a      	str	r2, [r3, #64]	@ 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8003c78:	6826      	ldr	r6, [r4, #0]
 8003c7a:	2e08      	cmp	r6, #8
 8003c7c:	d117      	bne.n	8003cae <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x5a>
    {
        /* DMA2D BGOR register configuration -*/
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8003c7e:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration -*/
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8003c80:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        if (blitOp.replaceBgAlpha)
 8003c82:	7fe2      	ldrb	r2, [r4, #31]
 8003c84:	b11a      	cbz	r2, 8003c8e <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x3a>
        {
            WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((0xFFUL << DMA2D_BGPFCCR_ALPHA_Pos) & DMA2D_BGPFCCR_ALPHA));
 8003c86:	f040 407f 	orr.w	r0, r0, #4278190080	@ 0xff000000
 8003c8a:	f440 3080 	orr.w	r0, r0, #65536	@ 0x10000
        }
        else
        {
            WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8003c8e:	6258      	str	r0, [r3, #36]	@ 0x24
        }

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << DMA2D_FGPFCCR_ALPHA_Pos) & DMA2D_FGPFCCR_ALPHA));
 8003c90:	4a10      	ldr	r2, [pc, #64]	@ (8003cd4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x80>)
 8003c92:	7f23      	ldrb	r3, [r4, #28]
 8003c94:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 8003c98:	4b0d      	ldr	r3, [pc, #52]	@ (8003cd0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x7c>)
 8003c9a:	61da      	str	r2, [r3, #28]

        /* DMA2D FGCOLR register configuration -*/
        WRITE_REG(DMA2D->FGCOLR, blitOp.color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 8003c9c:	68e2      	ldr	r2, [r4, #12]
 8003c9e:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8003ca2:	621a      	str	r2, [r3, #32]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8003ca4:	4a0c      	ldr	r2, [pc, #48]	@ (8003cd8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x84>)
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003ca6:	6159      	str	r1, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003ca8:	60d9      	str	r1, [r3, #12]
            /* Set color */
            WRITE_REG(DMA2D->OCOLR, ((blitOp.alpha << 24) & DMA2D_OCOLR_ALPHA_1) | ((blitOp.color) & (DMA2D_OCOLR_BLUE_1 | DMA2D_OCOLR_GREEN_1 | DMA2D_OCOLR_RED_1)));
        }

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8003caa:	601a      	str	r2, [r3, #0]
    }
}
 8003cac:	bd70      	pop	{r4, r5, r6, pc}
        WRITE_REG(DMA2D->FGOR, 0);
 8003cae:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8003cb0:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8003cb2:	611a      	str	r2, [r3, #16]
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
    {
        return color;
 8003cb4:	68e2      	ldr	r2, [r4, #12]
        if (blitOp.dstFormat == Bitmap::RGB565)
 8003cb6:	b925      	cbnz	r5, 8003cc2 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x6e>
            WRITE_REG(DMA2D->OCOLR, blitOp.color & (DMA2D_OCOLR_BLUE_2 | DMA2D_OCOLR_GREEN_2 | DMA2D_OCOLR_RED_2));
 8003cb8:	b292      	uxth	r2, r2
            WRITE_REG(DMA2D->OCOLR, ((blitOp.alpha << 24) & DMA2D_OCOLR_ALPHA_1) | ((blitOp.color) & (DMA2D_OCOLR_BLUE_1 | DMA2D_OCOLR_GREEN_1 | DMA2D_OCOLR_RED_1)));
 8003cba:	639a      	str	r2, [r3, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8003cbc:	4b04      	ldr	r3, [pc, #16]	@ (8003cd0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x7c>)
 8003cbe:	4a07      	ldr	r2, [pc, #28]	@ (8003cdc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x88>)
 8003cc0:	e7f3      	b.n	8003caa <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x56>
            WRITE_REG(DMA2D->OCOLR, ((blitOp.alpha << 24) & DMA2D_OCOLR_ALPHA_1) | ((blitOp.color) & (DMA2D_OCOLR_BLUE_1 | DMA2D_OCOLR_GREEN_1 | DMA2D_OCOLR_RED_1)));
 8003cc2:	7f21      	ldrb	r1, [r4, #28]
 8003cc4:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8003cc8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003ccc:	e7f5      	b.n	8003cba <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x66>
 8003cce:	bf00      	nop
 8003cd0:	4002b000 	.word	0x4002b000
 8003cd4:	00010009 	.word	0x00010009
 8003cd8:	00020201 	.word	0x00020201
 8003cdc:	00030201 	.word	0x00030201

08003ce0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
 8003ce0:	b508      	push	{r3, lr}
    switch (format)
 8003ce2:	280b      	cmp	r0, #11
 8003ce4:	d80b      	bhi.n	8003cfe <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1e>
 8003ce6:	e8df f000 	tbb	[pc, r0]
 8003cea:	1206      	.short	0x1206
 8003cec:	0a0a0a10 	.word	0x0a0a0a10
 8003cf0:	0808080a 	.word	0x0808080a
 8003cf4:	0808      	.short	0x0808
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8003cf6:	2002      	movs	r0, #2
}
 8003cf8:	bd08      	pop	{r3, pc}
        dma2dColorMode = DMA2D_INPUT_L8;
 8003cfa:	2005      	movs	r0, #5
        break;
 8003cfc:	e7fc      	b.n	8003cf8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
        assert(0 && "Unsupported Format!");
 8003cfe:	4b05      	ldr	r3, [pc, #20]	@ (8003d14 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8003d00:	2165      	movs	r1, #101	@ 0x65
 8003d02:	4a05      	ldr	r2, [pc, #20]	@ (8003d18 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 8003d04:	4805      	ldr	r0, [pc, #20]	@ (8003d1c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x3c>)
 8003d06:	f026 fc59 	bl	802a5bc <__assert_func>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8003d0a:	2000      	movs	r0, #0
 8003d0c:	e7f4      	b.n	8003cf8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
    switch (format)
 8003d0e:	2001      	movs	r0, #1
    return dma2dColorMode;
 8003d10:	e7f2      	b.n	8003cf8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 8003d12:	bf00      	nop
 8003d14:	0802d94a 	.word	0x0802d94a
 8003d18:	0802da26 	.word	0x0802da26
 8003d1c:	0802d9b0 	.word	0x0802d9b0

08003d20 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
{
 8003d20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8003d24:	f891 801d 	ldrb.w	r8, [r1, #29]
{
 8003d28:	460d      	mov	r5, r1
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8003d2a:	4640      	mov	r0, r8
 8003d2c:	f7ff ffd8 	bl	8003ce0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8003d30:	7faf      	ldrb	r7, [r5, #30]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8003d32:	4606      	mov	r6, r0
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8003d34:	4638      	mov	r0, r7
 8003d36:	f7ff ffd3 	bl	8003ce0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
 8003d3a:	4604      	mov	r4, r0
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8003d3c:	4638      	mov	r0, r7
 8003d3e:	f7ff ff6b 	bl	8003c18 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8003d42:	8aa9      	ldrh	r1, [r5, #20]
 8003d44:	8b6a      	ldrh	r2, [r5, #26]
 8003d46:	4b57      	ldr	r3, [pc, #348]	@ (8003ea4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x184>)
 8003d48:	1a52      	subs	r2, r2, r1
 8003d4a:	641a      	str	r2, [r3, #64]	@ 0x40
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8003d4c:	619a      	str	r2, [r3, #24]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8003d4e:	8b2a      	ldrh	r2, [r5, #24]
 8003d50:	1a52      	subs	r2, r2, r1
 8003d52:	611a      	str	r2, [r3, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8003d54:	8aea      	ldrh	r2, [r5, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8003d56:	6358      	str	r0, [r3, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8003d58:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8003d5c:	6869      	ldr	r1, [r5, #4]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8003d5e:	645a      	str	r2, [r3, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003d60:	692a      	ldr	r2, [r5, #16]
 8003d62:	63da      	str	r2, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8003d64:	60d9      	str	r1, [r3, #12]
    switch (blitOp.operation)
 8003d66:	6829      	ldr	r1, [r5, #0]
 8003d68:	2980      	cmp	r1, #128	@ 0x80
 8003d6a:	d032      	beq.n	8003dd2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xb2>
 8003d6c:	d816      	bhi.n	8003d9c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7c>
 8003d6e:	2920      	cmp	r1, #32
 8003d70:	d078      	beq.n	8003e64 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>
 8003d72:	2940      	cmp	r1, #64	@ 0x40
 8003d74:	f000 808b 	beq.w	8003e8e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x16e>
 8003d78:	2904      	cmp	r1, #4
 8003d7a:	f000 8088 	beq.w	8003e8e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x16e>
        if (blitOp.replaceFgAlpha)
 8003d7e:	f895 1020 	ldrb.w	r1, [r5, #32]
 8003d82:	4b48      	ldr	r3, [pc, #288]	@ (8003ea4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x184>)
 8003d84:	b119      	cbz	r1, 8003d8e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x6e>
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((0xFFUL << DMA2D_BGPFCCR_ALPHA_Pos) & DMA2D_BGPFCCR_ALPHA));
 8003d86:	f046 467f 	orr.w	r6, r6, #4278190080	@ 0xff000000
 8003d8a:	f446 3680 	orr.w	r6, r6, #65536	@ 0x10000
        if (blitOp.srcFormat != blitOp.dstFormat)
 8003d8e:	45b8      	cmp	r8, r7
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8003d90:	61de      	str	r6, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 8003d92:	f000 8083 	beq.w	8003e9c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x17c>
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003d96:	615a      	str	r2, [r3, #20]
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8003d98:	4a43      	ldr	r2, [pc, #268]	@ (8003ea8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x188>)
 8003d9a:	e04f      	b.n	8003e3c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x11c>
    switch (blitOp.operation)
 8003d9c:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8003da0:	d005      	beq.n	8003dae <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8e>
 8003da2:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8003da6:	d1ea      	bne.n	8003d7e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x5e>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << DMA2D_FGPFCCR_ALPHA_Pos) & DMA2D_FGPFCCR_ALPHA));
 8003da8:	7f28      	ldrb	r0, [r5, #28]
 8003daa:	4940      	ldr	r1, [pc, #256]	@ (8003eac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x18c>)
 8003dac:	e001      	b.n	8003db2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x92>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << DMA2D_FGPFCCR_ALPHA_Pos) & DMA2D_FGPFCCR_ALPHA));
 8003dae:	7f28      	ldrb	r0, [r5, #28]
 8003db0:	493f      	ldr	r1, [pc, #252]	@ (8003eb0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x190>)
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << DMA2D_FGPFCCR_ALPHA_Pos) & DMA2D_FGPFCCR_ALPHA));
 8003db2:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
 8003db6:	61d9      	str	r1, [r3, #28]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 8003db8:	68e9      	ldr	r1, [r5, #12]
 8003dba:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8003dbe:	6219      	str	r1, [r3, #32]
        if (blitOp.replaceBgAlpha)
 8003dc0:	7fe9      	ldrb	r1, [r5, #31]
 8003dc2:	b119      	cbz	r1, 8003dcc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((0xFFUL << DMA2D_BGPFCCR_ALPHA_Pos) & DMA2D_BGPFCCR_ALPHA));
 8003dc4:	f044 447f 	orr.w	r4, r4, #4278190080	@ 0xff000000
 8003dc8:	f444 3480 	orr.w	r4, r4, #65536	@ 0x10000
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8003dcc:	625c      	str	r4, [r3, #36]	@ 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003dce:	4b35      	ldr	r3, [pc, #212]	@ (8003ea4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x184>)
 8003dd0:	e059      	b.n	8003e86 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x166>
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8003dd2:	68af      	ldr	r7, [r5, #8]
            if (blitOp.replaceBgAlpha)
 8003dd4:	7fe8      	ldrb	r0, [r5, #31]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8003dd6:	1d39      	adds	r1, r7, #4
 8003dd8:	62d9      	str	r1, [r3, #44]	@ 0x2c
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << DMA2D_FGPFCCR_ALPHA_Pos) & DMA2D_FGPFCCR_ALPHA));
 8003dda:	7f29      	ldrb	r1, [r5, #28]
 8003ddc:	ea46 6601 	orr.w	r6, r6, r1, lsl #24
 8003de0:	f446 3600 	orr.w	r6, r6, #131072	@ 0x20000
 8003de4:	61de      	str	r6, [r3, #28]
            if (blitOp.replaceBgAlpha)
 8003de6:	b118      	cbz	r0, 8003df0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
                WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((0xFFUL << DMA2D_BGPFCCR_ALPHA_Pos) & DMA2D_BGPFCCR_ALPHA));
 8003de8:	f044 447f 	orr.w	r4, r4, #4278190080	@ 0xff000000
 8003dec:	f444 3480 	orr.w	r4, r4, #65536	@ 0x10000
                WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8003df0:	625c      	str	r4, [r3, #36]	@ 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003df2:	482c      	ldr	r0, [pc, #176]	@ (8003ea4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x184>)
            switch ((Bitmap::ClutFormat)palette->format)
 8003df4:	783b      	ldrb	r3, [r7, #0]
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003df6:	6142      	str	r2, [r0, #20]
            switch ((Bitmap::ClutFormat)palette->format)
 8003df8:	b143      	cbz	r3, 8003e0c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xec>
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d021      	beq.n	8003e42 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x122>
                    assert(0 && "Unsupported format");
 8003dfe:	4b2d      	ldr	r3, [pc, #180]	@ (8003eb4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x194>)
 8003e00:	f44f 7197 	mov.w	r1, #302	@ 0x12e
 8003e04:	4a2c      	ldr	r2, [pc, #176]	@ (8003eb8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x198>)
 8003e06:	482d      	ldr	r0, [pc, #180]	@ (8003ebc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x19c>)
 8003e08:	f026 fbd8 	bl	802a5bc <__assert_func>
                    MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8003e0c:	69c3      	ldr	r3, [r0, #28]
 8003e0e:	887a      	ldrh	r2, [r7, #2]
 8003e10:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003e14:	3a01      	subs	r2, #1
 8003e16:	f023 0310 	bic.w	r3, r3, #16
 8003e1a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
            bool blend = true;
 8003e1e:	2201      	movs	r2, #1
                    MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8003e20:	61c3      	str	r3, [r0, #28]
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8003e22:	4b20      	ldr	r3, [pc, #128]	@ (8003ea4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x184>)
 8003e24:	69d9      	ldr	r1, [r3, #28]
 8003e26:	f041 0120 	orr.w	r1, r1, #32
 8003e2a:	61d9      	str	r1, [r3, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8003e2c:	69d9      	ldr	r1, [r3, #28]
 8003e2e:	0689      	lsls	r1, r1, #26
 8003e30:	d4fc      	bmi.n	8003e2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x10c>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8003e32:	2110      	movs	r1, #16
 8003e34:	6099      	str	r1, [r3, #8]
            if (blend)
 8003e36:	2a00      	cmp	r2, #0
 8003e38:	d0ae      	beq.n	8003d98 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x78>
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8003e3a:	4a21      	ldr	r2, [pc, #132]	@ (8003ec0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a0>)
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8003e3c:	601a      	str	r2, [r3, #0]
}
 8003e3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8003e42:	69c3      	ldr	r3, [r0, #28]
                    if (blitOp.alpha == 255)
 8003e44:	f1b1 02ff 	subs.w	r2, r1, #255	@ 0xff
                    MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8003e48:	8879      	ldrh	r1, [r7, #2]
 8003e4a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
                    if (blitOp.alpha == 255)
 8003e4e:	bf18      	it	ne
 8003e50:	2201      	movne	r2, #1
                    MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8003e52:	3901      	subs	r1, #1
 8003e54:	f023 0310 	bic.w	r3, r3, #16
 8003e58:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003e5c:	f043 0310 	orr.w	r3, r3, #16
 8003e60:	61c3      	str	r3, [r0, #28]
                    break;
 8003e62:	e7de      	b.n	8003e22 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x102>
        if (blitOp.replaceFgAlpha)
 8003e64:	f895 1020 	ldrb.w	r1, [r5, #32]
 8003e68:	b179      	cbz	r1, 8003e8a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x16a>
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << DMA2D_FGPFCCR_ALPHA_Pos) & DMA2D_FGPFCCR_ALPHA));
 8003e6a:	7f29      	ldrb	r1, [r5, #28]
 8003e6c:	ea46 6101 	orr.w	r1, r6, r1, lsl #24
 8003e70:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 8003e74:	61d9      	str	r1, [r3, #28]
        if (blitOp.replaceBgAlpha)
 8003e76:	7fe9      	ldrb	r1, [r5, #31]
 8003e78:	4b0a      	ldr	r3, [pc, #40]	@ (8003ea4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x184>)
 8003e7a:	b119      	cbz	r1, 8003e84 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x164>
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((0xFFUL << DMA2D_BGPFCCR_ALPHA_Pos) & DMA2D_BGPFCCR_ALPHA));
 8003e7c:	f044 447f 	orr.w	r4, r4, #4278190080	@ 0xff000000
 8003e80:	f444 3480 	orr.w	r4, r4, #65536	@ 0x10000
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8003e84:	625c      	str	r4, [r3, #36]	@ 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003e86:	615a      	str	r2, [r3, #20]
 8003e88:	e7d7      	b.n	8003e3a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x11a>
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8003e8a:	61de      	str	r6, [r3, #28]
 8003e8c:	e7f3      	b.n	8003e76 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x156>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << DMA2D_FGPFCCR_ALPHA_Pos) & DMA2D_FGPFCCR_ALPHA));
 8003e8e:	7f29      	ldrb	r1, [r5, #28]
 8003e90:	ea46 6101 	orr.w	r1, r6, r1, lsl #24
 8003e94:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8003e98:	61d9      	str	r1, [r3, #28]
 8003e9a:	e791      	b.n	8003dc0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa0>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8003e9c:	f240 2201 	movw	r2, #513	@ 0x201
 8003ea0:	e7cc      	b.n	8003e3c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x11c>
 8003ea2:	bf00      	nop
 8003ea4:	4002b000 	.word	0x4002b000
 8003ea8:	00010201 	.word	0x00010201
 8003eac:	00020009 	.word	0x00020009
 8003eb0:	0002000a 	.word	0x0002000a
 8003eb4:	0802da70 	.word	0x0802da70
 8003eb8:	0802da8a 	.word	0x0802da8a
 8003ebc:	0802d9b0 	.word	0x0802d9b0
 8003ec0:	00020201 	.word	0x00020201

08003ec4 <DMA2D_XferCpltCallback>:
        return instance;
 8003ec4:	4b02      	ldr	r3, [pc, #8]	@ (8003ed0 <DMA2D_XferCpltCallback+0xc>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	6858      	ldr	r0, [r3, #4]
        dma.signalDMAInterrupt();
 8003eca:	6803      	ldr	r3, [r0, #0]
 8003ecc:	695b      	ldr	r3, [r3, #20]
 8003ece:	4718      	bx	r3
 8003ed0:	20029ed8 	.word	0x20029ed8

08003ed4 <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 8003ed4:	b570      	push	{r4, r5, r6, lr}
 8003ed6:	4604      	mov	r4, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8003ed8:	4b0a      	ldr	r3, [pc, #40]	@ (8003f04 <_ZN8STM32DMAC1Ev+0x30>)
 8003eda:	300c      	adds	r0, #12
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8003edc:	2600      	movs	r6, #0
 8003ede:	4625      	mov	r5, r4
 8003ee0:	2260      	movs	r2, #96	@ 0x60
 8003ee2:	6060      	str	r0, [r4, #4]
 8003ee4:	7226      	strb	r6, [r4, #8]
 8003ee6:	7266      	strb	r6, [r4, #9]
 8003ee8:	f845 3b20 	str.w	r3, [r5], #32
 8003eec:	4629      	mov	r1, r5
 8003eee:	f00f fbe5 	bl	80136bc <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8003ef2:	f504 635a 	add.w	r3, r4, #3488	@ 0xda0
        : color(0)
 8003ef6:	60ee      	str	r6, [r5, #12]
 8003ef8:	3524      	adds	r5, #36	@ 0x24
 8003efa:	429d      	cmp	r5, r3
 8003efc:	d1fb      	bne.n	8003ef6 <_ZN8STM32DMAC1Ev+0x22>
}
 8003efe:	4620      	mov	r0, r4
 8003f00:	bd70      	pop	{r4, r5, r6, pc}
 8003f02:	bf00      	nop
 8003f04:	0802dad0 	.word	0x0802dad0

08003f08 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 8003f08:	2001      	movs	r0, #1
 8003f0a:	4770      	bx	lr

08003f0c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 8003f0c:	200c      	movs	r0, #12
 8003f0e:	4770      	bx	lr

08003f10 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 8003f10:	230c      	movs	r3, #12
 8003f12:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8003f16:	3008      	adds	r0, #8
 8003f18:	4770      	bx	lr

08003f1a <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 8003f1a:	230c      	movs	r3, #12
 8003f1c:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8003f20:	3008      	adds	r0, #8
 8003f22:	4770      	bx	lr

08003f24 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI23Screen_1_StatisticsViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8003f24:	2001      	movs	r0, #1
 8003f26:	4770      	bx	lr

08003f28 <_ZN8touchgfx9PartitionINS_4meta8TypeListI23Screen_1_StatisticsViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8003f28:	f641 20d8 	movw	r0, #6872	@ 0x1ad8
 8003f2c:	4770      	bx	lr

08003f2e <_ZN8touchgfx9PartitionINS_4meta8TypeListI23Screen_1_StatisticsViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8003f2e:	f641 23d8 	movw	r3, #6872	@ 0x1ad8
 8003f32:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8003f36:	3008      	adds	r0, #8
 8003f38:	4770      	bx	lr

08003f3a <_ZNK8touchgfx9PartitionINS_4meta8TypeListI23Screen_1_StatisticsViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8003f3a:	f641 23d8 	movw	r3, #6872	@ 0x1ad8
 8003f3e:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8003f42:	3008      	adds	r0, #8
 8003f44:	4770      	bx	lr

08003f46 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI20Screen_3_LTPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8003f46:	2001      	movs	r0, #1
 8003f48:	4770      	bx	lr

08003f4a <_ZN8touchgfx9PartitionINS_4meta8TypeListI20Screen_3_LTPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8003f4a:	2010      	movs	r0, #16
 8003f4c:	4770      	bx	lr

08003f4e <_ZN8touchgfx9PartitionINS_4meta8TypeListI20Screen_3_LTPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8003f4e:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8003f52:	3008      	adds	r0, #8
 8003f54:	4770      	bx	lr

08003f56 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI20Screen_3_LTPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8003f56:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8003f5a:	3008      	adds	r0, #8
 8003f5c:	4770      	bx	lr

08003f5e <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoScreen_1ScreenNoTransition();
 8003f5e:	4608      	mov	r0, r1
 8003f60:	f000 bb2e 	b.w	80045c0 <_ZN23FrontendApplicationBase30gotoScreen_1ScreenNoTransitionEv>

08003f64 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 8003f64:	4b03      	ldr	r3, [pc, #12]	@ (8003f74 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8003f66:	b510      	push	{r4, lr}
 8003f68:	4604      	mov	r4, r0
 8003f6a:	6003      	str	r3, [r0, #0]
 8003f6c:	f00d ff0d 	bl	8011d8a <_ZN8touchgfx17AbstractPartitionD1Ev>
 8003f70:	4620      	mov	r0, r4
 8003f72:	bd10      	pop	{r4, pc}
 8003f74:	0802db88 	.word	0x0802db88

08003f78 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8003f78:	b510      	push	{r4, lr}
 8003f7a:	4604      	mov	r4, r0
 8003f7c:	f7ff fff2 	bl	8003f64 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003f80:	2114      	movs	r1, #20
 8003f82:	4620      	mov	r0, r4
 8003f84:	f026 f99c 	bl	802a2c0 <_ZdlPvj>
 8003f88:	4620      	mov	r0, r4
 8003f8a:	bd10      	pop	{r4, pc}

08003f8c <_ZN8touchgfx9PartitionINS_4meta8TypeListI23Screen_1_StatisticsViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8003f8c:	4b03      	ldr	r3, [pc, #12]	@ (8003f9c <_ZN8touchgfx9PartitionINS_4meta8TypeListI23Screen_1_StatisticsViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8003f8e:	b510      	push	{r4, lr}
 8003f90:	4604      	mov	r4, r0
 8003f92:	6003      	str	r3, [r0, #0]
 8003f94:	f00d fef9 	bl	8011d8a <_ZN8touchgfx17AbstractPartitionD1Ev>
 8003f98:	4620      	mov	r0, r4
 8003f9a:	bd10      	pop	{r4, pc}
 8003f9c:	0802db54 	.word	0x0802db54

08003fa0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI23Screen_1_StatisticsViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8003fa0:	b510      	push	{r4, lr}
 8003fa2:	4604      	mov	r4, r0
 8003fa4:	f7ff fff2 	bl	8003f8c <_ZN8touchgfx9PartitionINS_4meta8TypeListI23Screen_1_StatisticsViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003fa8:	f44f 51d7 	mov.w	r1, #6880	@ 0x1ae0
 8003fac:	4620      	mov	r0, r4
 8003fae:	f026 f987 	bl	802a2c0 <_ZdlPvj>
 8003fb2:	4620      	mov	r0, r4
 8003fb4:	bd10      	pop	{r4, pc}
	...

08003fb8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI20Screen_3_LTPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8003fb8:	4b03      	ldr	r3, [pc, #12]	@ (8003fc8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI20Screen_3_LTPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8003fba:	b510      	push	{r4, lr}
 8003fbc:	4604      	mov	r4, r0
 8003fbe:	6003      	str	r3, [r0, #0]
 8003fc0:	f00d fee3 	bl	8011d8a <_ZN8touchgfx17AbstractPartitionD1Ev>
 8003fc4:	4620      	mov	r0, r4
 8003fc6:	bd10      	pop	{r4, pc}
 8003fc8:	0802db20 	.word	0x0802db20

08003fcc <_ZN8touchgfx9PartitionINS_4meta8TypeListI20Screen_3_LTPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8003fcc:	b510      	push	{r4, lr}
 8003fce:	4604      	mov	r4, r0
 8003fd0:	f7ff fff2 	bl	8003fb8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI20Screen_3_LTPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003fd4:	2118      	movs	r1, #24
 8003fd6:	4620      	mov	r0, r4
 8003fd8:	f026 f972 	bl	802a2c0 <_ZdlPvj>
 8003fdc:	4620      	mov	r0, r4
 8003fde:	bd10      	pop	{r4, pc}

08003fe0 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 8003fe0:	4b09      	ldr	r3, [pc, #36]	@ (8004008 <_ZN12FrontendHeapD1Ev+0x28>)
 8003fe2:	b510      	push	{r4, lr}
 8003fe4:	4604      	mov	r4, r0
 8003fe6:	6003      	str	r3, [r0, #0]
 8003fe8:	f500 50d8 	add.w	r0, r0, #6912	@ 0x1b00
 8003fec:	300c      	adds	r0, #12
 8003fee:	f7ff ffb9 	bl	8003f64 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003ff2:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 8003ff6:	f7ff ffc9 	bl	8003f8c <_ZN8touchgfx9PartitionINS_4meta8TypeListI23Screen_1_StatisticsViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003ffa:	f104 0014 	add.w	r0, r4, #20
 8003ffe:	f7ff ffdb 	bl	8003fb8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI20Screen_3_LTPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8004002:	4620      	mov	r0, r4
 8004004:	bd10      	pop	{r4, pc}
 8004006:	bf00      	nop
 8004008:	0802dbbc 	.word	0x0802dbbc

0800400c <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 800400c:	b508      	push	{r3, lr}
 800400e:	4802      	ldr	r0, [pc, #8]	@ (8004018 <__tcf_0+0xc>)
 8004010:	f7ff ffe6 	bl	8003fe0 <_ZN12FrontendHeapD1Ev>
 8004014:	bd08      	pop	{r3, pc}
 8004016:	bf00      	nop
 8004018:	20014c9c 	.word	0x20014c9c

0800401c <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 800401c:	b510      	push	{r4, lr}
 800401e:	4604      	mov	r4, r0
 8004020:	f7ff ffde 	bl	8003fe0 <_ZN12FrontendHeapD1Ev>
 8004024:	f44f 51e4 	mov.w	r1, #7296	@ 0x1c80
 8004028:	4620      	mov	r0, r4
 800402a:	f026 f949 	bl	802a2c0 <_ZdlPvj>
 800402e:	4620      	mov	r0, r4
 8004030:	bd10      	pop	{r4, pc}
	...

08004034 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 8004034:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8004038:	f000 f9ec 	bl	8004414 <_ZN14BitmapDatabase11getInstanceEv>
 800403c:	2400      	movs	r4, #0
 800403e:	4605      	mov	r5, r0
 8004040:	f000 f9ec 	bl	800441c <_ZN14BitmapDatabase15getInstanceSizeEv>
 8004044:	4623      	mov	r3, r4
 8004046:	4601      	mov	r1, r0
 8004048:	4622      	mov	r2, r4
 800404a:	4628      	mov	r0, r5
 800404c:	9400      	str	r4, [sp, #0]
 800404e:	f018 fcd1 	bl	801c9f4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 8004052:	4b26      	ldr	r3, [pc, #152]	@ (80040ec <touchgfx_init+0xb8>)
 8004054:	4a26      	ldr	r2, [pc, #152]	@ (80040f0 <touchgfx_init+0xbc>)
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 8004056:	4620      	mov	r0, r4
        static FrontendHeap instance;
 8004058:	4d26      	ldr	r5, [pc, #152]	@ (80040f4 <touchgfx_init+0xc0>)
 800405a:	601a      	str	r2, [r3, #0]
 800405c:	f004 f89c 	bl	8008198 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 8004060:	4825      	ldr	r0, [pc, #148]	@ (80040f8 <touchgfx_init+0xc4>)
 8004062:	f018 fb7f 	bl	801c764 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
 8004066:	682b      	ldr	r3, [r5, #0]
 8004068:	f3bf 8f5b 	dmb	ish
 800406c:	07db      	lsls	r3, r3, #31
 800406e:	d437      	bmi.n	80040e0 <touchgfx_init+0xac>
 8004070:	4628      	mov	r0, r5
 8004072:	f026 f927 	bl	802a2c4 <__cxa_guard_acquire>
 8004076:	b398      	cbz	r0, 80040e0 <touchgfx_init+0xac>
     */
    MVPHeap(AbstractPartition& pres,
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
 8004078:	4c20      	ldr	r4, [pc, #128]	@ (80040fc <touchgfx_init+0xc8>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 800407a:	4b21      	ldr	r3, [pc, #132]	@ (8004100 <touchgfx_init+0xcc>)
          screenStorage(scr),
 800407c:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
        : presenterStorage(pres),
 8004080:	f104 0014 	add.w	r0, r4, #20
 8004084:	6023      	str	r3, [r4, #0]
          transitionStorage(tra),
 8004086:	f508 57d7 	add.w	r7, r8, #6880	@ 0x1ae0
        : presenterStorage(pres),
 800408a:	6060      	str	r0, [r4, #4]
          screenStorage(scr),
 800408c:	f8c4 8008 	str.w	r8, [r4, #8]
          frontendApplication(app)
 8004090:	f107 0618 	add.w	r6, r7, #24
          transitionStorage(tra),
 8004094:	60e7      	str	r7, [r4, #12]
          frontendApplication(app)
 8004096:	6126      	str	r6, [r4, #16]
 8004098:	f00d fe78 	bl	8011d8c <_ZN8touchgfx17AbstractPartitionC1Ev>
 800409c:	4b19      	ldr	r3, [pc, #100]	@ (8004104 <touchgfx_init+0xd0>)
 800409e:	4640      	mov	r0, r8
 80040a0:	6163      	str	r3, [r4, #20]
 80040a2:	f00d fe73 	bl	8011d8c <_ZN8touchgfx17AbstractPartitionC1Ev>
 80040a6:	4b18      	ldr	r3, [pc, #96]	@ (8004108 <touchgfx_init+0xd4>)
 80040a8:	4638      	mov	r0, r7
 80040aa:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80040ac:	f00d fe6e 	bl	8011d8c <_ZN8touchgfx17AbstractPartitionC1Ev>
 80040b0:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 80040b4:	4a15      	ldr	r2, [pc, #84]	@ (800410c <touchgfx_init+0xd8>)
 80040b6:	f504 50d9 	add.w	r0, r4, #6944	@ 0x1b20
 80040ba:	f8c3 2b0c 	str.w	r2, [r3, #2828]	@ 0xb0c
 80040be:	f004 f8ff 	bl	80082c0 <_ZN5ModelC1Ev>
 80040c2:	4622      	mov	r2, r4
 80040c4:	f504 51d9 	add.w	r1, r4, #6944	@ 0x1b20
 80040c8:	4630      	mov	r0, r6
 80040ca:	f004 f8ef 	bl	80082ac <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 80040ce:	4630      	mov	r0, r6
 80040d0:	f000 fa76 	bl	80045c0 <_ZN23FrontendApplicationBase30gotoScreen_1ScreenNoTransitionEv>
        static FrontendHeap instance;
 80040d4:	480e      	ldr	r0, [pc, #56]	@ (8004110 <touchgfx_init+0xdc>)
 80040d6:	f026 fa8f 	bl	802a5f8 <atexit>
 80040da:	4628      	mov	r0, r5
 80040dc:	f026 f8fe 	bl	802a2dc <__cxa_guard_release>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 80040e0:	480c      	ldr	r0, [pc, #48]	@ (8004114 <touchgfx_init+0xe0>)
}
 80040e2:	b002      	add	sp, #8
 80040e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
 80040e8:	f7ff bc0a 	b.w	8003900 <_ZN11TouchGFXHAL10initializeEv>
 80040ec:	20029f3c 	.word	0x20029f3c
 80040f0:	20013e6c 	.word	0x20013e6c
 80040f4:	20014c98 	.word	0x20014c98
 80040f8:	20007a60 	.word	0x20007a60
 80040fc:	20014c9c 	.word	0x20014c9c
 8004100:	0802dbbc 	.word	0x0802dbbc
 8004104:	0802db20 	.word	0x0802db20
 8004108:	0802db54 	.word	0x0802db54
 800410c:	0802db88 	.word	0x0802db88
 8004110:	0800400d 	.word	0x0800400d
 8004114:	20013df0 	.word	0x20013df0

08004118 <touchgfx_components_init>:

void touchgfx_components_init()
{
}
 8004118:	4770      	bx	lr
	...

0800411c <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 800411c:	4801      	ldr	r0, [pc, #4]	@ (8004124 <touchgfx_taskEntry+0x8>)
 800411e:	f00e bc3c 	b.w	801299a <_ZN8touchgfx3HAL9taskEntryEv>
 8004122:	bf00      	nop
 8004124:	20013df0 	.word	0x20013df0

08004128 <_GLOBAL__sub_I_touchgfx_init>:
}
 8004128:	b570      	push	{r4, r5, r6, lr}
static STM32DMA dma;
 800412a:	4e22      	ldr	r6, [pc, #136]	@ (80041b4 <_GLOBAL__sub_I_touchgfx_init+0x8c>)
{
public:

    STM32TouchController() {}
 800412c:	4b22      	ldr	r3, [pc, #136]	@ (80041b8 <_GLOBAL__sub_I_touchgfx_init+0x90>)
 800412e:	4c23      	ldr	r4, [pc, #140]	@ (80041bc <_GLOBAL__sub_I_touchgfx_init+0x94>)
 8004130:	4630      	mov	r0, r6
static LCD32bpp display;
 8004132:	4d23      	ldr	r5, [pc, #140]	@ (80041c0 <_GLOBAL__sub_I_touchgfx_init+0x98>)
 8004134:	6023      	str	r3, [r4, #0]
static STM32DMA dma;
 8004136:	f7ff fecd 	bl	8003ed4 <_ZN8STM32DMAC1Ev>
static LCD32bpp display;
 800413a:	4628      	mov	r0, r5
 800413c:	f01c ff56 	bl	8020fec <_ZN8touchgfx8LCD32bppC1Ev>
        : dma(dmaInterface),
 8004140:	4b20      	ldr	r3, [pc, #128]	@ (80041c4 <_GLOBAL__sub_I_touchgfx_init+0x9c>)
          mcuInstrumentation(0),
 8004142:	2200      	movs	r2, #0
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 8004144:	f44f 7180 	mov.w	r1, #256	@ 0x100
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8004148:	481f      	ldr	r0, [pc, #124]	@ (80041c8 <_GLOBAL__sub_I_touchgfx_init+0xa0>)
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 800414a:	861a      	strh	r2, [r3, #48]	@ 0x30
          useAuxiliaryLCD(false),
 800414c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
          lastY(0),
 8004150:	665a      	str	r2, [r3, #100]	@ 0x64
          updateMCULoad(0),
 8004152:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
          cc_begin(0),
 8004156:	675a      	str	r2, [r3, #116]	@ 0x74
          touchController(touchCtrl),
 8004158:	60dc      	str	r4, [r3, #12]
          auxiliaryLCD(0),
 800415a:	e9c3 1212 	strd	r1, r2, [r3, #72]	@ 0x48
          touchSampleRate(1),
 800415e:	491b      	ldr	r1, [pc, #108]	@ (80041cc <_GLOBAL__sub_I_touchgfx_init+0xa4>)
          vSyncCompensationEnabled(false),
 8004160:	e9c3 121a 	strd	r1, r2, [r3, #104]	@ 0x68
          requestedOrientation(ORIENTATION_LANDSCAPE),
 8004164:	491a      	ldr	r1, [pc, #104]	@ (80041d0 <_GLOBAL__sub_I_touchgfx_init+0xa8>)
 8004166:	6799      	str	r1, [r3, #120]	@ 0x78
        instance = this;
 8004168:	491a      	ldr	r1, [pc, #104]	@ (80041d4 <_GLOBAL__sub_I_touchgfx_init+0xac>)
 800416a:	600b      	str	r3, [r1, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 800416c:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8004170:	8001      	strh	r1, [r0, #0]
 8004172:	4819      	ldr	r0, [pc, #100]	@ (80041d8 <_GLOBAL__sub_I_touchgfx_init+0xb0>)
 8004174:	8001      	strh	r1, [r0, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8004176:	f44f 7188 	mov.w	r1, #272	@ 0x110
 800417a:	4818      	ldr	r0, [pc, #96]	@ (80041dc <_GLOBAL__sub_I_touchgfx_init+0xb4>)
          buttonController(0),
 800417c:	e9c3 2204 	strd	r2, r2, [r3, #16]
 8004180:	e9c3 2206 	strd	r2, r2, [r3, #24]
 8004184:	e9c3 2208 	strd	r2, r2, [r3, #32]
 8004188:	e9c3 220a 	strd	r2, r2, [r3, #40]	@ 0x28
          frameBuffer0(0),
 800418c:	e9c3 220e 	strd	r2, r2, [r3, #56]	@ 0x38
          frameBuffer2(0),
 8004190:	e9c3 2210 	strd	r2, r2, [r3, #64]	@ 0x40
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
 8004194:	e9c3 2214 	strd	r2, r2, [r3, #80]	@ 0x50
          lastX(0),
 8004198:	e9c3 2217 	strd	r2, r2, [r3, #92]	@ 0x5c
          lcdRef(display),
 800419c:	e9c3 6501 	strd	r6, r5, [r3, #4]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 80041a0:	8001      	strh	r1, [r0, #0]
 80041a2:	480f      	ldr	r0, [pc, #60]	@ (80041e0 <_GLOBAL__sub_I_touchgfx_init+0xb8>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 80041a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 80041a8:	8001      	strh	r1, [r0, #0]
        DISPLAY_ROTATION = rotate0;
 80041aa:	490e      	ldr	r1, [pc, #56]	@ (80041e4 <_GLOBAL__sub_I_touchgfx_init+0xbc>)
 80041ac:	700a      	strb	r2, [r1, #0]
     * @param [in,out] display Reference to LCD interface.
     * @param [in,out] tc      Reference to Touch Controller driver.
     * @param width            Width of the display.
     * @param height           Height of the display.
     */
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 80041ae:	4a0e      	ldr	r2, [pc, #56]	@ (80041e8 <_GLOBAL__sub_I_touchgfx_init+0xc0>)
 80041b0:	601a      	str	r2, [r3, #0]
}
 80041b2:	bd70      	pop	{r4, r5, r6, pc}
 80041b4:	20013ef4 	.word	0x20013ef4
 80041b8:	0802d5bc 	.word	0x0802d5bc
 80041bc:	20014c94 	.word	0x20014c94
 80041c0:	20013e70 	.word	0x20013e70
 80041c4:	20013df0 	.word	0x20013df0
 80041c8:	20029ecc 	.word	0x20029ecc
 80041cc:	01000001 	.word	0x01000001
 80041d0:	01010000 	.word	0x01010000
 80041d4:	20029ed8 	.word	0x20029ed8
 80041d8:	20029ed2 	.word	0x20029ed2
 80041dc:	20029ece 	.word	0x20029ece
 80041e0:	20029ed4 	.word	0x20029ed4
 80041e4:	20029ed0 	.word	0x20029ed0
 80041e8:	0802d748 	.word	0x0802d748

080041ec <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
 80041ec:	4801      	ldr	r0, [pc, #4]	@ (80041f4 <_GLOBAL__sub_D_touchgfx_init+0x8>)
 80041ee:	f7ff bcf7 	b.w	8003be0 <_ZN8STM32DMAD1Ev>
 80041f2:	bf00      	nop
 80041f4:	20013ef4 	.word	0x20013ef4

080041f8 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041f8:	4b03      	ldr	r3, [pc, #12]	@ (8004208 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0x10>)
 80041fa:	2290      	movs	r2, #144	@ 0x90
 80041fc:	f883 235a 	strb.w	r2, [r3, #858]	@ 0x35a
 8004200:	f883 2358 	strb.w	r2, [r3, #856]	@ 0x358

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
    NVIC_SetPriority(LTDC_IRQn, 9);
}
 8004204:	4770      	bx	lr
 8004206:	bf00      	nop
 8004208:	e000e100 	.word	0xe000e100

0800420c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:
    NVIC_DisableIRQ(LTDC_IRQn);
}

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 800420c:	4a09      	ldr	r2, [pc, #36]	@ (8004234 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x28>)
 800420e:	490a      	ldr	r1, [pc, #40]	@ (8004238 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x2c>)
 8004210:	68d3      	ldr	r3, [r2, #12]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8004212:	480a      	ldr	r0, [pc, #40]	@ (800423c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x30>)
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8004214:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004218:	3b01      	subs	r3, #1
 800421a:	b29b      	uxth	r3, r3
 800421c:	800b      	strh	r3, [r1, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 800421e:	6911      	ldr	r1, [r2, #16]
 8004220:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8004224:	3901      	subs	r1, #1
 8004226:	8001      	strh	r1, [r0, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8004228:	6413      	str	r3, [r2, #64]	@ 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 800422a:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 800422c:	f043 0301 	orr.w	r3, r3, #1
 8004230:	6353      	str	r3, [r2, #52]	@ 0x34
}
 8004232:	4770      	bx	lr
 8004234:	40016800 	.word	0x40016800
 8004238:	2001691e 	.word	0x2001691e
 800423c:	2001691c 	.word	0x2001691c

08004240 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:
    HAL::endFrame();
}

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8004240:	4b01      	ldr	r3, [pc, #4]	@ (8004248 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x8>)
 8004242:	f8d3 00ac 	ldr.w	r0, [r3, #172]	@ 0xac
}
 8004246:	4770      	bx	lr
 8004248:	40016800 	.word	0x40016800

0800424c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 800424c:	4b02      	ldr	r3, [pc, #8]	@ (8004258 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0xc>)

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 800424e:	2201      	movs	r2, #1
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8004250:	f8c3 10ac 	str.w	r1, [r3, #172]	@ 0xac
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8004254:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8004256:	4770      	bx	lr
 8004258:	40016800 	.word	0x40016800

0800425c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
{
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 800425c:	4a12      	ldr	r2, [pc, #72]	@ (80042a8 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x4c>)
 800425e:	6953      	ldr	r3, [r2, #20]
 8004260:	03db      	lsls	r3, r3, #15
{
 8004262:	b570      	push	{r4, r5, r6, lr}
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8004264:	d51e      	bpl.n	80042a4 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8004266:	2300      	movs	r3, #0
 8004268:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800426c:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8004270:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8004274:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8004278:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800427c:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8004280:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8004282:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8004286:	4601      	mov	r1, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8004288:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
      } while (ways-- != 0U);
 800428c:	3901      	subs	r1, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800428e:	f8c2 5274 	str.w	r5, [r2, #628]	@ 0x274
      } while (ways-- != 0U);
 8004292:	d2f9      	bcs.n	8004288 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x2c>
    } while(sets-- != 0U);
 8004294:	3b20      	subs	r3, #32
 8004296:	f113 0f20 	cmn.w	r3, #32
 800429a:	d1f2      	bne.n	8004282 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x26>
 800429c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80042a0:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanInvalidateDCache();
    }
}
 80042a4:	bd70      	pop	{r4, r5, r6, pc}
 80042a6:	bf00      	nop
 80042a8:	e000ed00 	.word	0xe000ed00

080042ac <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 80042ac:	b570      	push	{r4, r5, r6, lr}
 80042ae:	4604      	mov	r4, r0
    HAL::initialize();
 80042b0:	f00e fb5f 	bl	8012972 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 80042b4:	6823      	ldr	r3, [r4, #0]
 80042b6:	6e5d      	ldr	r5, [r3, #100]	@ 0x64
 80042b8:	f014 fd22 	bl	8018d00 <_ZN8touchgfx11Application11getInstanceEv>
 80042bc:	4601      	mov	r1, r0
 80042be:	4620      	mov	r0, r4
 80042c0:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
 80042c2:	6823      	ldr	r3, [r4, #0]
 80042c4:	4a05      	ldr	r2, [pc, #20]	@ (80042dc <_ZN20TouchGFXGeneratedHAL10initializeEv+0x30>)
 80042c6:	4620      	mov	r0, r4
 80042c8:	f8d3 5088 	ldr.w	r5, [r3, #136]	@ 0x88
 80042cc:	2300      	movs	r3, #0
 80042ce:	f5a2 21ff 	sub.w	r1, r2, #522240	@ 0x7f800
 80042d2:	46ac      	mov	ip, r5
}
 80042d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
 80042d8:	4760      	bx	ip
 80042da:	bf00      	nop
 80042dc:	c00bf400 	.word	0xc00bf400

080042e0 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:
    return HAL::beginFrame();
 80042e0:	f00e bb2e 	b.w	8012940 <_ZN8touchgfx3HAL10beginFrameEv>

080042e4 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
    HAL::endFrame();
 80042e4:	f00e bb38 	b.w	8012958 <_ZN8touchgfx3HAL8endFrameEv>

080042e8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:
    HAL::flushFrameBuffer(rect);
 80042e8:	f00e baf4 	b.w	80128d4 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>

080042ec <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
    return HAL::blockCopy(dest, src, numBytes);
 80042ec:	f00e bc63 	b.w	8012bb6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

080042f0 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042f0:	4b03      	ldr	r3, [pc, #12]	@ (8004300 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0x10>)
 80042f2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80042f6:	609a      	str	r2, [r3, #8]
 80042f8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80042fc:	609a      	str	r2, [r3, #8]
}
 80042fe:	4770      	bx	lr
 8004300:	e000e100 	.word	0xe000e100

08004304 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004304:	4b08      	ldr	r3, [pc, #32]	@ (8004328 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x24>)
 8004306:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800430a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 800430e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004312:	f3bf 8f6f 	isb	sy
 8004316:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800431a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 800431e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004322:	f3bf 8f6f 	isb	sy
}
 8004326:	4770      	bx	lr
 8004328:	e000e100 	.word	0xe000e100

0800432c <HAL_LTDC_LineEventCallback>:
}

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 800432c:	b510      	push	{r4, lr}
        return instance;
 800432e:	4c14      	ldr	r4, [pc, #80]	@ (8004380 <HAL_LTDC_LineEventCallback+0x54>)
        if (!HAL::getInstance())
 8004330:	6823      	ldr	r3, [r4, #0]
 8004332:	b323      	cbz	r3, 800437e <HAL_LTDC_LineEventCallback+0x52>
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
 8004334:	4b13      	ldr	r3, [pc, #76]	@ (8004384 <HAL_LTDC_LineEventCallback+0x58>)
 8004336:	4a14      	ldr	r2, [pc, #80]	@ (8004388 <HAL_LTDC_LineEventCallback+0x5c>)
 8004338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800433a:	8811      	ldrh	r1, [r2, #0]
 800433c:	428b      	cmp	r3, r1
 800433e:	d113      	bne.n	8004368 <HAL_LTDC_LineEventCallback+0x3c>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8004340:	4b12      	ldr	r3, [pc, #72]	@ (800438c <HAL_LTDC_LineEventCallback+0x60>)
 8004342:	8819      	ldrh	r1, [r3, #0]
 8004344:	f008 f9ea 	bl	800c71c <HAL_LTDC_ProgramLineEvent>
 8004348:	6822      	ldr	r2, [r4, #0]
        vSyncCnt++;
 800434a:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 800434e:	3301      	adds	r3, #1
 8004350:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
            HAL::getInstance()->vSync();
            OSWrappers::signalVSync();
 8004354:	f7ff fbf4 	bl	8003b40 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8004358:	6820      	ldr	r0, [r4, #0]
 800435a:	f00f f857 	bl	801340c <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 800435e:	2000      	movs	r0, #0

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
            GPIO::clear(GPIO::VSYNC_FREQ);
        }
    }
 8004360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::set(GPIO::VSYNC_FREQ);
 8004364:	f7ff b9fc 	b.w	8003760 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8004368:	f008 f9d8 	bl	800c71c <HAL_LTDC_ProgramLineEvent>
        return instance;
 800436c:	6820      	ldr	r0, [r4, #0]
        allowDMATransfers();
 800436e:	6803      	ldr	r3, [r0, #0]
 8004370:	6a1b      	ldr	r3, [r3, #32]
 8004372:	4798      	blx	r3
            GPIO::clear(GPIO::VSYNC_FREQ);
 8004374:	2000      	movs	r0, #0
    }
 8004376:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
 800437a:	f7ff ba21 	b.w	80037c0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
    }
 800437e:	bd10      	pop	{r4, pc}
 8004380:	20029ed8 	.word	0x20029ed8
 8004384:	40016800 	.word	0x40016800
 8004388:	2001691e 	.word	0x2001691e
 800438c:	2001691c 	.word	0x2001691c

08004390 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId NEXA_BOLD_11 = 9; // Nexa_XBold_otf_11_4bpp
    static const touchgfx::FontId NEXA_BOLD_10 = 10; // Nexa_XBold_otf_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 11;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8004390:	4770      	bx	lr

08004392 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 8004392:	b508      	push	{r3, lr}
    switch (typography)
 8004394:	290b      	cmp	r1, #11
 8004396:	d833      	bhi.n	8004400 <_ZN23ApplicationFontProvider7getFontEt+0x6e>
 8004398:	e8df f001 	tbb	[pc, r1]
 800439c:	0e0a0e06 	.word	0x0e0a0e06
 80043a0:	1e1a1612 	.word	0x1e1a1612
 80043a4:	2e2a2622 	.word	0x2e2a2622
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 80043a8:	f003 ff42 	bl	8008230 <_ZN17TypedTextDatabase8getFontsEv>
 80043ac:	6800      	ldr	r0, [r0, #0]
        // Nexa_XBold_otf_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[10]);
    default:
        return 0;
    }
}
 80043ae:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 80043b0:	f003 ff3e 	bl	8008230 <_ZN17TypedTextDatabase8getFontsEv>
 80043b4:	6880      	ldr	r0, [r0, #8]
 80043b6:	e7fa      	b.n	80043ae <_ZN23ApplicationFontProvider7getFontEt+0x1c>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 80043b8:	f003 ff3a 	bl	8008230 <_ZN17TypedTextDatabase8getFontsEv>
 80043bc:	6840      	ldr	r0, [r0, #4]
 80043be:	e7f6      	b.n	80043ae <_ZN23ApplicationFontProvider7getFontEt+0x1c>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 80043c0:	f003 ff36 	bl	8008230 <_ZN17TypedTextDatabase8getFontsEv>
 80043c4:	68c0      	ldr	r0, [r0, #12]
 80043c6:	e7f2      	b.n	80043ae <_ZN23ApplicationFontProvider7getFontEt+0x1c>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[4]);
 80043c8:	f003 ff32 	bl	8008230 <_ZN17TypedTextDatabase8getFontsEv>
 80043cc:	6900      	ldr	r0, [r0, #16]
 80043ce:	e7ee      	b.n	80043ae <_ZN23ApplicationFontProvider7getFontEt+0x1c>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[5]);
 80043d0:	f003 ff2e 	bl	8008230 <_ZN17TypedTextDatabase8getFontsEv>
 80043d4:	6940      	ldr	r0, [r0, #20]
 80043d6:	e7ea      	b.n	80043ae <_ZN23ApplicationFontProvider7getFontEt+0x1c>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[6]);
 80043d8:	f003 ff2a 	bl	8008230 <_ZN17TypedTextDatabase8getFontsEv>
 80043dc:	6980      	ldr	r0, [r0, #24]
 80043de:	e7e6      	b.n	80043ae <_ZN23ApplicationFontProvider7getFontEt+0x1c>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[7]);
 80043e0:	f003 ff26 	bl	8008230 <_ZN17TypedTextDatabase8getFontsEv>
 80043e4:	69c0      	ldr	r0, [r0, #28]
 80043e6:	e7e2      	b.n	80043ae <_ZN23ApplicationFontProvider7getFontEt+0x1c>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[8]);
 80043e8:	f003 ff22 	bl	8008230 <_ZN17TypedTextDatabase8getFontsEv>
 80043ec:	6a00      	ldr	r0, [r0, #32]
 80043ee:	e7de      	b.n	80043ae <_ZN23ApplicationFontProvider7getFontEt+0x1c>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[9]);
 80043f0:	f003 ff1e 	bl	8008230 <_ZN17TypedTextDatabase8getFontsEv>
 80043f4:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 80043f6:	e7da      	b.n	80043ae <_ZN23ApplicationFontProvider7getFontEt+0x1c>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[10]);
 80043f8:	f003 ff1a 	bl	8008230 <_ZN17TypedTextDatabase8getFontsEv>
 80043fc:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 80043fe:	e7d6      	b.n	80043ae <_ZN23ApplicationFontProvider7getFontEt+0x1c>
    switch (typography)
 8004400:	2000      	movs	r0, #0
 8004402:	e7d4      	b.n	80043ae <_ZN23ApplicationFontProvider7getFontEt+0x1c>

08004404 <_ZN23ApplicationFontProviderD0Ev>:
 8004404:	b510      	push	{r4, lr}
 8004406:	4604      	mov	r4, r0
 8004408:	2104      	movs	r1, #4
 800440a:	f025 ff59 	bl	802a2c0 <_ZdlPvj>
 800440e:	4620      	mov	r0, r4
 8004410:	bd10      	pop	{r4, pc}
	...

08004414 <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 8004414:	4800      	ldr	r0, [pc, #0]	@ (8004418 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 8004416:	4770      	bx	lr
 8004418:	0803f84c 	.word	0x0803f84c

0800441c <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 800441c:	2011      	movs	r0, #17
 800441e:	4770      	bx	lr

08004420 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8004420:	b513      	push	{r0, r1, r4, lr}
 8004422:	2400      	movs	r4, #0
    {
        if (unicode == 0)
 8004424:	b151      	cbz	r1, 800443c <_ZNK8touchgfx4Font8getGlyphEt+0x1c>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8004426:	6803      	ldr	r3, [r0, #0]
 8004428:	aa01      	add	r2, sp, #4
        const uint8_t* dummyPixelDataPointer = 0;
 800442a:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 800442c:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8004430:	689c      	ldr	r4, [r3, #8]
 8004432:	f10d 0303 	add.w	r3, sp, #3
 8004436:	47a0      	blx	r4
        return glyph;
    }
 8004438:	b002      	add	sp, #8
 800443a:	bd10      	pop	{r4, pc}
            return 0;
 800443c:	4608      	mov	r0, r1
 800443e:	e7fb      	b.n	8004438 <_ZNK8touchgfx4Font8getGlyphEt+0x18>

08004440 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 8004440:	89c0      	ldrh	r0, [r0, #14]
 8004442:	4770      	bx	lr

08004444 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 8004444:	8a00      	ldrh	r0, [r0, #16]
 8004446:	4770      	bx	lr

08004448 <_ZNK8touchgfx4Font11getBaselineEv>:
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
    {
        return baselineHeight;
    }
 8004448:	88c0      	ldrh	r0, [r0, #6]
 800444a:	4770      	bx	lr

0800444c <_ZNK8touchgfx4Font9getHeightEv>:
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
    {
        return fontHeight;
    }
 800444c:	8880      	ldrh	r0, [r0, #4]
 800444e:	4770      	bx	lr

08004450 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 8004450:	7a80      	ldrb	r0, [r0, #10]
    }
 8004452:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8004456:	4770      	bx	lr

08004458 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 8004458:	7a80      	ldrb	r0, [r0, #10]
    }
 800445a:	09c0      	lsrs	r0, r0, #7
 800445c:	4770      	bx	lr

0800445e <_ZN8touchgfx9TypedTextD1Ev>:
    }
 800445e:	4770      	bx	lr

08004460 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 8004460:	b510      	push	{r4, lr}
 8004462:	4604      	mov	r4, r0
    }
 8004464:	2108      	movs	r1, #8
 8004466:	f025 ff2b 	bl	802a2c0 <_ZdlPvj>
 800446a:	4620      	mov	r0, r4
 800446c:	bd10      	pop	{r4, pc}

0800446e <_ZN8touchgfx11Application19changeToStartScreenEv>:
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
    {
    }
 800446e:	4770      	bx	lr

08004470 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
 8004470:	4770      	bx	lr

08004472 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 8004472:	f500 7398 	add.w	r3, r0, #304	@ 0x130
 8004476:	6808      	ldr	r0, [r1, #0]
 8004478:	6849      	ldr	r1, [r1, #4]
 800447a:	c303      	stmia	r3!, {r0, r1}
    }
 800447c:	4770      	bx	lr

0800447e <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 800447e:	4770      	bx	lr

08004480 <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 8004480:	4770      	bx	lr

08004482 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 8004482:	6041      	str	r1, [r0, #4]
    }
 8004484:	4770      	bx	lr

08004486 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8004486:	4770      	bx	lr

08004488 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8004488:	4b06      	ldr	r3, [pc, #24]	@ (80044a4 <_ZN23FrontendApplicationBase19changeToStartScreenEv+0x1c>)
 800448a:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 800448e:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8004492:	2300      	movs	r3, #0
 8004494:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
// Screen_1

void FrontendApplicationBase::gotoScreen_1ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen_1ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8004498:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 800449c:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140

    virtual void changeToStartScreen()
    {
        gotoScreen_1ScreenNoTransition();
    }
 80044a0:	4770      	bx	lr
 80044a2:	bf00      	nop
 80044a4:	08004e69 	.word	0x08004e69

080044a8 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 80044a8:	2301      	movs	r3, #1
 80044aa:	7203      	strb	r3, [r0, #8]
    }
 80044ac:	4770      	bx	lr

080044ae <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 80044ae:	4770      	bx	lr

080044b0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 80044b0:	4770      	bx	lr

080044b2 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 80044b2:	b410      	push	{r4}
    {
        (pobject->*pmemfun)();
 80044b4:	6841      	ldr	r1, [r0, #4]
    virtual void execute()
 80044b6:	4603      	mov	r3, r0
        (pobject->*pmemfun)();
 80044b8:	68c2      	ldr	r2, [r0, #12]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	1054      	asrs	r4, r2, #1
 80044be:	eb01 0062 	add.w	r0, r1, r2, asr #1
 80044c2:	07d2      	lsls	r2, r2, #31
 80044c4:	bf48      	it	mi
 80044c6:	590a      	ldrmi	r2, [r1, r4]
    }
 80044c8:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun)();
 80044cc:	bf48      	it	mi
 80044ce:	58d3      	ldrmi	r3, [r2, r3]
 80044d0:	4718      	bx	r3

080044d2 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 80044d2:	4603      	mov	r3, r0
    {
        return (pobject != 0) && (pmemfun != 0);
 80044d4:	6840      	ldr	r0, [r0, #4]
 80044d6:	b130      	cbz	r0, 80044e6 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
 80044d8:	689a      	ldr	r2, [r3, #8]
 80044da:	b91a      	cbnz	r2, 80044e4 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x12>
 80044dc:	68d8      	ldr	r0, [r3, #12]
 80044de:	f000 0001 	and.w	r0, r0, #1
 80044e2:	4770      	bx	lr
 80044e4:	2001      	movs	r0, #1
    }
 80044e6:	4770      	bx	lr

080044e8 <_ZN8touchgfx12NoTransitionD0Ev>:
 80044e8:	b510      	push	{r4, lr}
 80044ea:	4604      	mov	r4, r0
 80044ec:	210c      	movs	r1, #12
 80044ee:	f025 fee7 	bl	802a2c0 <_ZdlPvj>
 80044f2:	4620      	mov	r0, r4
 80044f4:	bd10      	pop	{r4, pc}

080044f6 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80044f6:	b510      	push	{r4, lr}
 80044f8:	4604      	mov	r4, r0
 80044fa:	2110      	movs	r1, #16
 80044fc:	f025 fee0 	bl	802a2c0 <_ZdlPvj>
 8004500:	4620      	mov	r0, r4
 8004502:	bd10      	pop	{r4, pc}

08004504 <_ZN23FrontendApplicationBaseD0Ev>:
    virtual ~FrontendApplicationBase() { }
 8004504:	b510      	push	{r4, lr}
 8004506:	4604      	mov	r4, r0
 8004508:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 800450c:	f025 fed8 	bl	802a2c0 <_ZdlPvj>
 8004510:	4620      	mov	r0, r4
 8004512:	bd10      	pop	{r4, pc}

08004514 <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 8004514:	b510      	push	{r4, lr}
        Application::getInstance()->invalidate();
 8004516:	f014 fbf3 	bl	8018d00 <_ZN8touchgfx11Application11getInstanceEv>
 800451a:	6803      	ldr	r3, [r0, #0]
    }
 800451c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Application::getInstance()->invalidate();
 8004520:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004522:	4718      	bx	r3

08004524 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8004524:	b510      	push	{r4, lr}
 8004526:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8004528:	f8d0 0140 	ldr.w	r0, [r0, #320]	@ 0x140
 800452c:	b158      	cbz	r0, 8004546 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 800452e:	6803      	ldr	r3, [r0, #0]
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	4798      	blx	r3
 8004534:	b138      	cbz	r0, 8004546 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 8004536:	f8d4 0140 	ldr.w	r0, [r4, #320]	@ 0x140
 800453a:	6803      	ldr	r3, [r0, #0]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8004540:	2300      	movs	r3, #0
 8004542:	f8c4 3140 	str.w	r3, [r4, #320]	@ 0x140
    }
 8004546:	bd10      	pop	{r4, pc}

08004548 <_ZN8touchgfx3HAL3lcdEv>:
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8004548:	4b04      	ldr	r3, [pc, #16]	@ (800455c <_ZN8touchgfx3HAL3lcdEv+0x14>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8004550:	b10a      	cbz	r2, 8004556 <_ZN8touchgfx3HAL3lcdEv+0xe>
 8004552:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8004554:	b900      	cbnz	r0, 8004558 <_ZN8touchgfx3HAL3lcdEv+0x10>
        return instance->lcdRef;
 8004556:	6898      	ldr	r0, [r3, #8]
    }
 8004558:	4770      	bx	lr
 800455a:	bf00      	nop
 800455c:	20029ed8 	.word	0x20029ed8

08004560 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8004560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004562:	4604      	mov	r4, r0
 8004564:	4617      	mov	r7, r2
 8004566:	460e      	mov	r6, r1
          pendingScreenTransitionCallback(0)
 8004568:	f014 fcda 	bl	8018f20 <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
 800456c:	4b10      	ldr	r3, [pc, #64]	@ (80045b0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x50>)
        : currentPresenter(0),
 800456e:	2500      	movs	r5, #0
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_PORTRAIT);
 8004570:	2101      	movs	r1, #1
        instance = this;
 8004572:	601c      	str	r4, [r3, #0]
      model(m)
 8004574:	4b0f      	ldr	r3, [pc, #60]	@ (80045b4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x54>)
 8004576:	6023      	str	r3, [r4, #0]
        : pobject(0), pmemfun(0)
 8004578:	4b0f      	ldr	r3, [pc, #60]	@ (80045b8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x58>)
 800457a:	e9c4 3551 	strd	r3, r5, [r4, #324]	@ 0x144
        return instance;
 800457e:	4b0f      	ldr	r3, [pc, #60]	@ (80045bc <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x5c>)
 8004580:	6818      	ldr	r0, [r3, #0]
 8004582:	e9c4 5553 	strd	r5, r5, [r4, #332]	@ 0x14c
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_PORTRAIT);
 8004586:	6803      	ldr	r3, [r0, #0]
          pendingScreenTransitionCallback(0)
 8004588:	e9c4 554f 	strd	r5, r5, [r4, #316]	@ 0x13c
 800458c:	689b      	ldr	r3, [r3, #8]
      model(m)
 800458e:	e9c4 7655 	strd	r7, r6, [r4, #340]	@ 0x154
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_PORTRAIT);
 8004592:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 8004594:	4628      	mov	r0, r5
 8004596:	f003 fdff 	bl	8008198 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD32bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800459a:	f7ff ffd5 	bl	8004548 <_ZN8touchgfx3HAL3lcdEv>
 800459e:	f01e f898 	bl	80226d2 <_ZN8touchgfx8LCD32bpp22enableTextureMapperAllEv>
    reinterpret_cast<touchgfx::LCD32bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_All();
 80045a2:	f7ff ffd1 	bl	8004548 <_ZN8touchgfx3HAL3lcdEv>
 80045a6:	f01e f913 	bl	80227d0 <_ZN8touchgfx8LCD32bpp24enableDecompressorL8_AllEv>
}
 80045aa:	4620      	mov	r0, r4
 80045ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045ae:	bf00      	nop
 80045b0:	20029f2c 	.word	0x20029f2c
 80045b4:	08040200 	.word	0x08040200
 80045b8:	080401e8 	.word	0x080401e8
 80045bc:	20029ed8 	.word	0x20029ed8

080045c0 <_ZN23FrontendApplicationBase30gotoScreen_1ScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80045c0:	4b06      	ldr	r3, [pc, #24]	@ (80045dc <_ZN23FrontendApplicationBase30gotoScreen_1ScreenNoTransitionEv+0x1c>)
 80045c2:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 80045c6:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 80045ca:	2300      	movs	r3, #0
 80045cc:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 80045d0:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 80045d4:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 80045d8:	4770      	bx	lr
 80045da:	bf00      	nop
 80045dc:	08004e69 	.word	0x08004e69

080045e0 <_ZN23FrontendApplicationBase41gotoScreen_1_StatisticsScreenNoTransitionEv>:
 80045e0:	4b06      	ldr	r3, [pc, #24]	@ (80045fc <_ZN23FrontendApplicationBase41gotoScreen_1_StatisticsScreenNoTransitionEv+0x1c>)
 80045e2:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 80045e6:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 80045ea:	2300      	movs	r3, #0
 80045ec:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
// Screen_1_Statistics

void FrontendApplicationBase::gotoScreen_1_StatisticsScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen_1_StatisticsScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 80045f0:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 80045f4:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 80045f8:	4770      	bx	lr
 80045fa:	bf00      	nop
 80045fc:	08004d1d 	.word	0x08004d1d

08004600 <_ZN23FrontendApplicationBase44gotoScreen_1_LP_StatisticsScreenNoTransitionEv>:
 8004600:	4b06      	ldr	r3, [pc, #24]	@ (800461c <_ZN23FrontendApplicationBase44gotoScreen_1_LP_StatisticsScreenNoTransitionEv+0x1c>)
 8004602:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 8004606:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 800460a:	2300      	movs	r3, #0
 800460c:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
// Screen_1_LP_Statistics

void FrontendApplicationBase::gotoScreen_1_LP_StatisticsScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen_1_LP_StatisticsScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8004610:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8004614:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 8004618:	4770      	bx	lr
 800461a:	bf00      	nop
 800461c:	08004bd1 	.word	0x08004bd1

08004620 <_ZN23FrontendApplicationBase30gotoScreen_2ScreenNoTransitionEv>:
 8004620:	4b06      	ldr	r3, [pc, #24]	@ (800463c <_ZN23FrontendApplicationBase30gotoScreen_2ScreenNoTransitionEv+0x1c>)
 8004622:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 8004626:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 800462a:	2300      	movs	r3, #0
 800462c:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
// Screen_2

void FrontendApplicationBase::gotoScreen_2ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen_2ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8004630:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8004634:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 8004638:	4770      	bx	lr
 800463a:	bf00      	nop
 800463c:	08004a89 	.word	0x08004a89

08004640 <_ZN23FrontendApplicationBase34gotoScreen_2_PM2ScreenNoTransitionEv>:
 8004640:	4b06      	ldr	r3, [pc, #24]	@ (800465c <_ZN23FrontendApplicationBase34gotoScreen_2_PM2ScreenNoTransitionEv+0x1c>)
 8004642:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 8004646:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 800464a:	2300      	movs	r3, #0
 800464c:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
// Screen_2_PM2

void FrontendApplicationBase::gotoScreen_2_PM2ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen_2_PM2ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8004650:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8004654:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 8004658:	4770      	bx	lr
 800465a:	bf00      	nop
 800465c:	0800493d 	.word	0x0800493d

08004660 <_ZN23FrontendApplicationBase34gotoScreen_2_PM0ScreenNoTransitionEv>:
 8004660:	4b06      	ldr	r3, [pc, #24]	@ (800467c <_ZN23FrontendApplicationBase34gotoScreen_2_PM0ScreenNoTransitionEv+0x1c>)
 8004662:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 8004666:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 800466a:	2300      	movs	r3, #0
 800466c:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
// Screen_2_PM0

void FrontendApplicationBase::gotoScreen_2_PM0ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen_2_PM0ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8004670:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8004674:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 8004678:	4770      	bx	lr
 800467a:	bf00      	nop
 800467c:	080047f5 	.word	0x080047f5

08004680 <_ZN23FrontendApplicationBase33gotoScreen_3_LTScreenNoTransitionEv>:
 8004680:	4b06      	ldr	r3, [pc, #24]	@ (800469c <_ZN23FrontendApplicationBase33gotoScreen_3_LTScreenNoTransitionEv+0x1c>)
 8004682:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 8004686:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 800468a:	2300      	movs	r3, #0
 800468c:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
// Screen_3_LT

void FrontendApplicationBase::gotoScreen_3_LTScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen_3_LTScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8004690:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8004694:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 8004698:	4770      	bx	lr
 800469a:	bf00      	nop
 800469c:	080046a9 	.word	0x080046a9

080046a0 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 80046a0:	6803      	ldr	r3, [r0, #0]
 80046a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046a4:	4718      	bx	r3
	...

080046a8 <_ZN23FrontendApplicationBase37gotoScreen_3_LTScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen_3_LTScreenNoTransitionImpl()
{
 80046a8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen_3_LTView, Screen_3_LTPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80046ac:	e9d0 6a55 	ldrd	r6, sl, [r0, #340]	@ 0x154
{
 80046b0:	4607      	mov	r7, r0
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80046b2:	68b0      	ldr	r0, [r6, #8]
 80046b4:	6803      	ldr	r3, [r0, #0]
 80046b6:	6a1b      	ldr	r3, [r3, #32]
 80046b8:	4798      	blx	r3
 80046ba:	f241 234f 	movw	r3, #4687	@ 0x124f
 80046be:	4298      	cmp	r0, r3
 80046c0:	d805      	bhi.n	80046ce <_ZN23FrontendApplicationBase37gotoScreen_3_LTScreenNoTransitionImplEv+0x26>
 80046c2:	4b44      	ldr	r3, [pc, #272]	@ (80047d4 <_ZN23FrontendApplicationBase37gotoScreen_3_LTScreenNoTransitionImplEv+0x12c>)
 80046c4:	21a3      	movs	r1, #163	@ 0xa3
 80046c6:	4a44      	ldr	r2, [pc, #272]	@ (80047d8 <_ZN23FrontendApplicationBase37gotoScreen_3_LTScreenNoTransitionImplEv+0x130>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80046c8:	4844      	ldr	r0, [pc, #272]	@ (80047dc <_ZN23FrontendApplicationBase37gotoScreen_3_LTScreenNoTransitionImplEv+0x134>)
 80046ca:	f025 ff77 	bl	802a5bc <__assert_func>
 80046ce:	6870      	ldr	r0, [r6, #4]
 80046d0:	6803      	ldr	r3, [r0, #0]
 80046d2:	6a1b      	ldr	r3, [r3, #32]
 80046d4:	4798      	blx	r3
 80046d6:	280f      	cmp	r0, #15
 80046d8:	d803      	bhi.n	80046e2 <_ZN23FrontendApplicationBase37gotoScreen_3_LTScreenNoTransitionImplEv+0x3a>
 80046da:	4b41      	ldr	r3, [pc, #260]	@ (80047e0 <_ZN23FrontendApplicationBase37gotoScreen_3_LTScreenNoTransitionImplEv+0x138>)
 80046dc:	21a4      	movs	r1, #164	@ 0xa4
 80046de:	4a3e      	ldr	r2, [pc, #248]	@ (80047d8 <_ZN23FrontendApplicationBase37gotoScreen_3_LTScreenNoTransitionImplEv+0x130>)
 80046e0:	e7f2      	b.n	80046c8 <_ZN23FrontendApplicationBase37gotoScreen_3_LTScreenNoTransitionImplEv+0x20>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80046e2:	68f0      	ldr	r0, [r6, #12]
 80046e4:	6803      	ldr	r3, [r0, #0]
 80046e6:	6a1b      	ldr	r3, [r3, #32]
 80046e8:	4798      	blx	r3
 80046ea:	280b      	cmp	r0, #11
 80046ec:	d803      	bhi.n	80046f6 <_ZN23FrontendApplicationBase37gotoScreen_3_LTScreenNoTransitionImplEv+0x4e>
 80046ee:	4b3d      	ldr	r3, [pc, #244]	@ (80047e4 <_ZN23FrontendApplicationBase37gotoScreen_3_LTScreenNoTransitionImplEv+0x13c>)
 80046f0:	21a5      	movs	r1, #165	@ 0xa5
 80046f2:	4a39      	ldr	r2, [pc, #228]	@ (80047d8 <_ZN23FrontendApplicationBase37gotoScreen_3_LTScreenNoTransitionImplEv+0x130>)
 80046f4:	e7e8      	b.n	80046c8 <_ZN23FrontendApplicationBase37gotoScreen_3_LTScreenNoTransitionImplEv+0x20>
    if (*currentTrans)
 80046f6:	f8df 90f4 	ldr.w	r9, [pc, #244]	@ 80047ec <_ZN23FrontendApplicationBase37gotoScreen_3_LTScreenNoTransitionImplEv+0x144>
    Application::getInstance()->clearAllTimerWidgets();
 80046fa:	f014 fb01 	bl	8018d00 <_ZN8touchgfx11Application11getInstanceEv>

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
    {
        timerWidgets.clear();
 80046fe:	3004      	adds	r0, #4
 8004700:	f014 fb3c 	bl	8018d7c <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 8004704:	f8d9 0000 	ldr.w	r0, [r9]
 8004708:	b110      	cbz	r0, 8004710 <_ZN23FrontendApplicationBase37gotoScreen_3_LTScreenNoTransitionImplEv+0x68>
        (*currentTrans)->tearDown();
 800470a:	6803      	ldr	r3, [r0, #0]
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	4798      	blx	r3
    if (*currentTrans)
 8004710:	f8d9 0000 	ldr.w	r0, [r9]
 8004714:	b110      	cbz	r0, 800471c <_ZN23FrontendApplicationBase37gotoScreen_3_LTScreenNoTransitionImplEv+0x74>
        (*currentTrans)->~Transition();
 8004716:	6803      	ldr	r3, [r0, #0]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4798      	blx	r3
    if (*currentScreen)
 800471c:	f8df 80d0 	ldr.w	r8, [pc, #208]	@ 80047f0 <_ZN23FrontendApplicationBase37gotoScreen_3_LTScreenNoTransitionImplEv+0x148>
 8004720:	f8d8 0000 	ldr.w	r0, [r8]
 8004724:	b110      	cbz	r0, 800472c <_ZN23FrontendApplicationBase37gotoScreen_3_LTScreenNoTransitionImplEv+0x84>
        (*currentScreen)->tearDownScreen();
 8004726:	6803      	ldr	r3, [r0, #0]
 8004728:	695b      	ldr	r3, [r3, #20]
 800472a:	4798      	blx	r3
    if (*currentPresenter)
 800472c:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8004730:	b110      	cbz	r0, 8004738 <_ZN23FrontendApplicationBase37gotoScreen_3_LTScreenNoTransitionImplEv+0x90>
        (*currentPresenter)->deactivate();
 8004732:	6803      	ldr	r3, [r0, #0]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	4798      	blx	r3
    if (*currentScreen)
 8004738:	f8d8 0000 	ldr.w	r0, [r8]
 800473c:	b110      	cbz	r0, 8004744 <_ZN23FrontendApplicationBase37gotoScreen_3_LTScreenNoTransitionImplEv+0x9c>
        (*currentScreen)->~Screen();
 800473e:	6803      	ldr	r3, [r0, #0]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4798      	blx	r3
    if (*currentPresenter)
 8004744:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8004748:	b110      	cbz	r0, 8004750 <_ZN23FrontendApplicationBase37gotoScreen_3_LTScreenNoTransitionImplEv+0xa8>
        (*currentPresenter)->~Presenter();
 800474a:	6803      	ldr	r3, [r0, #0]
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8004750:	2100      	movs	r1, #0
 8004752:	68f0      	ldr	r0, [r6, #12]
 8004754:	f7ff ffa4 	bl	80046a0 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
        : screenContainer(0), done(false)
 8004758:	f04f 0b00 	mov.w	fp, #0
 800475c:	4b22      	ldr	r3, [pc, #136]	@ (80047e8 <_ZN23FrontendApplicationBase37gotoScreen_3_LTScreenNoTransitionImplEv+0x140>)
 800475e:	4604      	mov	r4, r0
 8004760:	f8c0 b004 	str.w	fp, [r0, #4]
 8004764:	4659      	mov	r1, fp
 8004766:	f880 b008 	strb.w	fp, [r0, #8]
 800476a:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800476c:	68b0      	ldr	r0, [r6, #8]
 800476e:	6803      	ldr	r3, [r0, #0]
 8004770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004772:	4798      	blx	r3
 8004774:	4605      	mov	r5, r0
 8004776:	f004 fb8d 	bl	8008e94 <_ZN15Screen_3_LTViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800477a:	6870      	ldr	r0, [r6, #4]
 800477c:	4659      	mov	r1, fp
 800477e:	6803      	ldr	r3, [r0, #0]
 8004780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004782:	4798      	blx	r3
 8004784:	4606      	mov	r6, r0
 8004786:	4629      	mov	r1, r5
 8004788:	f004 fb2c 	bl	8008de4 <_ZN20Screen_3_LTPresenterC1ER15Screen_3_LTView>
    *currentTrans = newTransition;
    *currentPresenter = newPresenter;
    *currentScreen = newScreen;
    model->bind(newPresenter);
 800478c:	1d33      	adds	r3, r6, #4
    *currentPresenter = newPresenter;
 800478e:	f8c7 613c 	str.w	r6, [r7, #316]	@ 0x13c
    newScreen->setupScreen();
 8004792:	4628      	mov	r0, r5
    *currentTrans = newTransition;
 8004794:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 8004798:	f8c8 5000 	str.w	r5, [r8]
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
 800479c:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 80047a0:	682b      	ldr	r3, [r5, #0]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 80047a2:	f8c6 a008 	str.w	sl, [r6, #8]
 80047a6:	68db      	ldr	r3, [r3, #12]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
 80047a8:	63ee      	str	r6, [r5, #60]	@ 0x3c
 80047aa:	4798      	blx	r3
    newPresenter->activate();
 80047ac:	6833      	ldr	r3, [r6, #0]
 80047ae:	4630      	mov	r0, r6
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 80047b4:	4621      	mov	r1, r4
 80047b6:	4628      	mov	r0, r5
 80047b8:	f016 f864 	bl	801a884 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 80047bc:	6823      	ldr	r3, [r4, #0]
 80047be:	4620      	mov	r0, r4
 80047c0:	691b      	ldr	r3, [r3, #16]
 80047c2:	4798      	blx	r3
    newTransition->invalidate();
 80047c4:	6823      	ldr	r3, [r4, #0]
 80047c6:	4620      	mov	r0, r4
 80047c8:	695b      	ldr	r3, [r3, #20]
}
 80047ca:	b001      	add	sp, #4
 80047cc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047d0:	4718      	bx	r3
 80047d2:	bf00      	nop
 80047d4:	0803f9b0 	.word	0x0803f9b0
 80047d8:	0803fa3e 	.word	0x0803fa3e
 80047dc:	0803fb18 	.word	0x0803fb18
 80047e0:	0803fb5f 	.word	0x0803fb5f
 80047e4:	0803fc02 	.word	0x0803fc02
 80047e8:	08040254 	.word	0x08040254
 80047ec:	20029f20 	.word	0x20029f20
 80047f0:	20029f1c 	.word	0x20029f1c

080047f4 <_ZN23FrontendApplicationBase38gotoScreen_2_PM0ScreenNoTransitionImplEv>:
{
 80047f4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen_2_PM0View, Screen_2_PM0Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80047f8:	e9d0 6a55 	ldrd	r6, sl, [r0, #340]	@ 0x154
{
 80047fc:	4607      	mov	r7, r0
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80047fe:	68b0      	ldr	r0, [r6, #8]
 8004800:	6803      	ldr	r3, [r0, #0]
 8004802:	6a1b      	ldr	r3, [r3, #32]
 8004804:	4798      	blx	r3
 8004806:	f5b0 7f16 	cmp.w	r0, #600	@ 0x258
 800480a:	d205      	bcs.n	8004818 <_ZN23FrontendApplicationBase38gotoScreen_2_PM0ScreenNoTransitionImplEv+0x24>
 800480c:	4b43      	ldr	r3, [pc, #268]	@ (800491c <_ZN23FrontendApplicationBase38gotoScreen_2_PM0ScreenNoTransitionImplEv+0x128>)
 800480e:	21a3      	movs	r1, #163	@ 0xa3
 8004810:	4a43      	ldr	r2, [pc, #268]	@ (8004920 <_ZN23FrontendApplicationBase38gotoScreen_2_PM0ScreenNoTransitionImplEv+0x12c>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8004812:	4844      	ldr	r0, [pc, #272]	@ (8004924 <_ZN23FrontendApplicationBase38gotoScreen_2_PM0ScreenNoTransitionImplEv+0x130>)
 8004814:	f025 fed2 	bl	802a5bc <__assert_func>
 8004818:	6870      	ldr	r0, [r6, #4]
 800481a:	6803      	ldr	r3, [r0, #0]
 800481c:	6a1b      	ldr	r3, [r3, #32]
 800481e:	4798      	blx	r3
 8004820:	280f      	cmp	r0, #15
 8004822:	d803      	bhi.n	800482c <_ZN23FrontendApplicationBase38gotoScreen_2_PM0ScreenNoTransitionImplEv+0x38>
 8004824:	4b40      	ldr	r3, [pc, #256]	@ (8004928 <_ZN23FrontendApplicationBase38gotoScreen_2_PM0ScreenNoTransitionImplEv+0x134>)
 8004826:	21a4      	movs	r1, #164	@ 0xa4
 8004828:	4a3d      	ldr	r2, [pc, #244]	@ (8004920 <_ZN23FrontendApplicationBase38gotoScreen_2_PM0ScreenNoTransitionImplEv+0x12c>)
 800482a:	e7f2      	b.n	8004812 <_ZN23FrontendApplicationBase38gotoScreen_2_PM0ScreenNoTransitionImplEv+0x1e>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800482c:	68f0      	ldr	r0, [r6, #12]
 800482e:	6803      	ldr	r3, [r0, #0]
 8004830:	6a1b      	ldr	r3, [r3, #32]
 8004832:	4798      	blx	r3
 8004834:	280b      	cmp	r0, #11
 8004836:	d803      	bhi.n	8004840 <_ZN23FrontendApplicationBase38gotoScreen_2_PM0ScreenNoTransitionImplEv+0x4c>
 8004838:	4b3c      	ldr	r3, [pc, #240]	@ (800492c <_ZN23FrontendApplicationBase38gotoScreen_2_PM0ScreenNoTransitionImplEv+0x138>)
 800483a:	21a5      	movs	r1, #165	@ 0xa5
 800483c:	4a38      	ldr	r2, [pc, #224]	@ (8004920 <_ZN23FrontendApplicationBase38gotoScreen_2_PM0ScreenNoTransitionImplEv+0x12c>)
 800483e:	e7e8      	b.n	8004812 <_ZN23FrontendApplicationBase38gotoScreen_2_PM0ScreenNoTransitionImplEv+0x1e>
    if (*currentTrans)
 8004840:	f8df 90f0 	ldr.w	r9, [pc, #240]	@ 8004934 <_ZN23FrontendApplicationBase38gotoScreen_2_PM0ScreenNoTransitionImplEv+0x140>
    Application::getInstance()->clearAllTimerWidgets();
 8004844:	f014 fa5c 	bl	8018d00 <_ZN8touchgfx11Application11getInstanceEv>
 8004848:	3004      	adds	r0, #4
 800484a:	f014 fa97 	bl	8018d7c <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 800484e:	f8d9 0000 	ldr.w	r0, [r9]
 8004852:	b110      	cbz	r0, 800485a <_ZN23FrontendApplicationBase38gotoScreen_2_PM0ScreenNoTransitionImplEv+0x66>
        (*currentTrans)->tearDown();
 8004854:	6803      	ldr	r3, [r0, #0]
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	4798      	blx	r3
    if (*currentTrans)
 800485a:	f8d9 0000 	ldr.w	r0, [r9]
 800485e:	b110      	cbz	r0, 8004866 <_ZN23FrontendApplicationBase38gotoScreen_2_PM0ScreenNoTransitionImplEv+0x72>
        (*currentTrans)->~Transition();
 8004860:	6803      	ldr	r3, [r0, #0]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4798      	blx	r3
    if (*currentScreen)
 8004866:	f8df 80d0 	ldr.w	r8, [pc, #208]	@ 8004938 <_ZN23FrontendApplicationBase38gotoScreen_2_PM0ScreenNoTransitionImplEv+0x144>
 800486a:	f8d8 0000 	ldr.w	r0, [r8]
 800486e:	b110      	cbz	r0, 8004876 <_ZN23FrontendApplicationBase38gotoScreen_2_PM0ScreenNoTransitionImplEv+0x82>
        (*currentScreen)->tearDownScreen();
 8004870:	6803      	ldr	r3, [r0, #0]
 8004872:	695b      	ldr	r3, [r3, #20]
 8004874:	4798      	blx	r3
    if (*currentPresenter)
 8004876:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 800487a:	b110      	cbz	r0, 8004882 <_ZN23FrontendApplicationBase38gotoScreen_2_PM0ScreenNoTransitionImplEv+0x8e>
        (*currentPresenter)->deactivate();
 800487c:	6803      	ldr	r3, [r0, #0]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	4798      	blx	r3
    if (*currentScreen)
 8004882:	f8d8 0000 	ldr.w	r0, [r8]
 8004886:	b110      	cbz	r0, 800488e <_ZN23FrontendApplicationBase38gotoScreen_2_PM0ScreenNoTransitionImplEv+0x9a>
        (*currentScreen)->~Screen();
 8004888:	6803      	ldr	r3, [r0, #0]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4798      	blx	r3
    if (*currentPresenter)
 800488e:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8004892:	b110      	cbz	r0, 800489a <_ZN23FrontendApplicationBase38gotoScreen_2_PM0ScreenNoTransitionImplEv+0xa6>
        (*currentPresenter)->~Presenter();
 8004894:	6803      	ldr	r3, [r0, #0]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800489a:	2100      	movs	r1, #0
 800489c:	68f0      	ldr	r0, [r6, #12]
 800489e:	f7ff feff 	bl	80046a0 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 80048a2:	f04f 0b00 	mov.w	fp, #0
 80048a6:	4b22      	ldr	r3, [pc, #136]	@ (8004930 <_ZN23FrontendApplicationBase38gotoScreen_2_PM0ScreenNoTransitionImplEv+0x13c>)
 80048a8:	4604      	mov	r4, r0
 80048aa:	f8c0 b004 	str.w	fp, [r0, #4]
 80048ae:	4659      	mov	r1, fp
 80048b0:	f880 b008 	strb.w	fp, [r0, #8]
 80048b4:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 80048b6:	68b0      	ldr	r0, [r6, #8]
 80048b8:	6803      	ldr	r3, [r0, #0]
 80048ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048bc:	4798      	blx	r3
 80048be:	4605      	mov	r5, r0
 80048c0:	f004 f8dc 	bl	8008a7c <_ZN16Screen_2_PM0ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 80048c4:	6870      	ldr	r0, [r6, #4]
 80048c6:	4659      	mov	r1, fp
 80048c8:	6803      	ldr	r3, [r0, #0]
 80048ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048cc:	4798      	blx	r3
 80048ce:	4606      	mov	r6, r0
 80048d0:	4629      	mov	r1, r5
 80048d2:	f004 f845 	bl	8008960 <_ZN21Screen_2_PM0PresenterC1ER16Screen_2_PM0View>
    model->bind(newPresenter);
 80048d6:	1d33      	adds	r3, r6, #4
    *currentPresenter = newPresenter;
 80048d8:	f8c7 613c 	str.w	r6, [r7, #316]	@ 0x13c
    newScreen->setupScreen();
 80048dc:	4628      	mov	r0, r5
    *currentTrans = newTransition;
 80048de:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 80048e2:	f8c8 5000 	str.w	r5, [r8]
 80048e6:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 80048ea:	682b      	ldr	r3, [r5, #0]
 80048ec:	f8c6 a008 	str.w	sl, [r6, #8]
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	63ee      	str	r6, [r5, #60]	@ 0x3c
 80048f4:	4798      	blx	r3
    newPresenter->activate();
 80048f6:	6833      	ldr	r3, [r6, #0]
 80048f8:	4630      	mov	r0, r6
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 80048fe:	4621      	mov	r1, r4
 8004900:	4628      	mov	r0, r5
 8004902:	f015 ffbf 	bl	801a884 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8004906:	6823      	ldr	r3, [r4, #0]
 8004908:	4620      	mov	r0, r4
 800490a:	691b      	ldr	r3, [r3, #16]
 800490c:	4798      	blx	r3
    newTransition->invalidate();
 800490e:	6823      	ldr	r3, [r4, #0]
 8004910:	4620      	mov	r0, r4
 8004912:	695b      	ldr	r3, [r3, #20]
}
 8004914:	b001      	add	sp, #4
 8004916:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800491a:	4718      	bx	r3
 800491c:	0803f9b0 	.word	0x0803f9b0
 8004920:	0803fca5 	.word	0x0803fca5
 8004924:	0803fb18 	.word	0x0803fb18
 8004928:	0803fb5f 	.word	0x0803fb5f
 800492c:	0803fc02 	.word	0x0803fc02
 8004930:	08040254 	.word	0x08040254
 8004934:	20029f20 	.word	0x20029f20
 8004938:	20029f1c 	.word	0x20029f1c

0800493c <_ZN23FrontendApplicationBase38gotoScreen_2_PM2ScreenNoTransitionImplEv>:
{
 800493c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen_2_PM2View, Screen_2_PM2Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8004940:	e9d0 6a55 	ldrd	r6, sl, [r0, #340]	@ 0x154
{
 8004944:	4607      	mov	r7, r0
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8004946:	68b0      	ldr	r0, [r6, #8]
 8004948:	6803      	ldr	r3, [r0, #0]
 800494a:	6a1b      	ldr	r3, [r3, #32]
 800494c:	4798      	blx	r3
 800494e:	f240 537b 	movw	r3, #1403	@ 0x57b
 8004952:	4298      	cmp	r0, r3
 8004954:	d805      	bhi.n	8004962 <_ZN23FrontendApplicationBase38gotoScreen_2_PM2ScreenNoTransitionImplEv+0x26>
 8004956:	4b44      	ldr	r3, [pc, #272]	@ (8004a68 <_ZN23FrontendApplicationBase38gotoScreen_2_PM2ScreenNoTransitionImplEv+0x12c>)
 8004958:	21a3      	movs	r1, #163	@ 0xa3
 800495a:	4a44      	ldr	r2, [pc, #272]	@ (8004a6c <_ZN23FrontendApplicationBase38gotoScreen_2_PM2ScreenNoTransitionImplEv+0x130>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800495c:	4844      	ldr	r0, [pc, #272]	@ (8004a70 <_ZN23FrontendApplicationBase38gotoScreen_2_PM2ScreenNoTransitionImplEv+0x134>)
 800495e:	f025 fe2d 	bl	802a5bc <__assert_func>
 8004962:	6870      	ldr	r0, [r6, #4]
 8004964:	6803      	ldr	r3, [r0, #0]
 8004966:	6a1b      	ldr	r3, [r3, #32]
 8004968:	4798      	blx	r3
 800496a:	280f      	cmp	r0, #15
 800496c:	d803      	bhi.n	8004976 <_ZN23FrontendApplicationBase38gotoScreen_2_PM2ScreenNoTransitionImplEv+0x3a>
 800496e:	4b41      	ldr	r3, [pc, #260]	@ (8004a74 <_ZN23FrontendApplicationBase38gotoScreen_2_PM2ScreenNoTransitionImplEv+0x138>)
 8004970:	21a4      	movs	r1, #164	@ 0xa4
 8004972:	4a3e      	ldr	r2, [pc, #248]	@ (8004a6c <_ZN23FrontendApplicationBase38gotoScreen_2_PM2ScreenNoTransitionImplEv+0x130>)
 8004974:	e7f2      	b.n	800495c <_ZN23FrontendApplicationBase38gotoScreen_2_PM2ScreenNoTransitionImplEv+0x20>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8004976:	68f0      	ldr	r0, [r6, #12]
 8004978:	6803      	ldr	r3, [r0, #0]
 800497a:	6a1b      	ldr	r3, [r3, #32]
 800497c:	4798      	blx	r3
 800497e:	280b      	cmp	r0, #11
 8004980:	d803      	bhi.n	800498a <_ZN23FrontendApplicationBase38gotoScreen_2_PM2ScreenNoTransitionImplEv+0x4e>
 8004982:	4b3d      	ldr	r3, [pc, #244]	@ (8004a78 <_ZN23FrontendApplicationBase38gotoScreen_2_PM2ScreenNoTransitionImplEv+0x13c>)
 8004984:	21a5      	movs	r1, #165	@ 0xa5
 8004986:	4a39      	ldr	r2, [pc, #228]	@ (8004a6c <_ZN23FrontendApplicationBase38gotoScreen_2_PM2ScreenNoTransitionImplEv+0x130>)
 8004988:	e7e8      	b.n	800495c <_ZN23FrontendApplicationBase38gotoScreen_2_PM2ScreenNoTransitionImplEv+0x20>
    if (*currentTrans)
 800498a:	f8df 90f4 	ldr.w	r9, [pc, #244]	@ 8004a80 <_ZN23FrontendApplicationBase38gotoScreen_2_PM2ScreenNoTransitionImplEv+0x144>
    Application::getInstance()->clearAllTimerWidgets();
 800498e:	f014 f9b7 	bl	8018d00 <_ZN8touchgfx11Application11getInstanceEv>
 8004992:	3004      	adds	r0, #4
 8004994:	f014 f9f2 	bl	8018d7c <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 8004998:	f8d9 0000 	ldr.w	r0, [r9]
 800499c:	b110      	cbz	r0, 80049a4 <_ZN23FrontendApplicationBase38gotoScreen_2_PM2ScreenNoTransitionImplEv+0x68>
        (*currentTrans)->tearDown();
 800499e:	6803      	ldr	r3, [r0, #0]
 80049a0:	68db      	ldr	r3, [r3, #12]
 80049a2:	4798      	blx	r3
    if (*currentTrans)
 80049a4:	f8d9 0000 	ldr.w	r0, [r9]
 80049a8:	b110      	cbz	r0, 80049b0 <_ZN23FrontendApplicationBase38gotoScreen_2_PM2ScreenNoTransitionImplEv+0x74>
        (*currentTrans)->~Transition();
 80049aa:	6803      	ldr	r3, [r0, #0]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4798      	blx	r3
    if (*currentScreen)
 80049b0:	f8df 80d0 	ldr.w	r8, [pc, #208]	@ 8004a84 <_ZN23FrontendApplicationBase38gotoScreen_2_PM2ScreenNoTransitionImplEv+0x148>
 80049b4:	f8d8 0000 	ldr.w	r0, [r8]
 80049b8:	b110      	cbz	r0, 80049c0 <_ZN23FrontendApplicationBase38gotoScreen_2_PM2ScreenNoTransitionImplEv+0x84>
        (*currentScreen)->tearDownScreen();
 80049ba:	6803      	ldr	r3, [r0, #0]
 80049bc:	695b      	ldr	r3, [r3, #20]
 80049be:	4798      	blx	r3
    if (*currentPresenter)
 80049c0:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80049c4:	b110      	cbz	r0, 80049cc <_ZN23FrontendApplicationBase38gotoScreen_2_PM2ScreenNoTransitionImplEv+0x90>
        (*currentPresenter)->deactivate();
 80049c6:	6803      	ldr	r3, [r0, #0]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	4798      	blx	r3
    if (*currentScreen)
 80049cc:	f8d8 0000 	ldr.w	r0, [r8]
 80049d0:	b110      	cbz	r0, 80049d8 <_ZN23FrontendApplicationBase38gotoScreen_2_PM2ScreenNoTransitionImplEv+0x9c>
        (*currentScreen)->~Screen();
 80049d2:	6803      	ldr	r3, [r0, #0]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4798      	blx	r3
    if (*currentPresenter)
 80049d8:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80049dc:	b110      	cbz	r0, 80049e4 <_ZN23FrontendApplicationBase38gotoScreen_2_PM2ScreenNoTransitionImplEv+0xa8>
        (*currentPresenter)->~Presenter();
 80049de:	6803      	ldr	r3, [r0, #0]
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 80049e4:	2100      	movs	r1, #0
 80049e6:	68f0      	ldr	r0, [r6, #12]
 80049e8:	f7ff fe5a 	bl	80046a0 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 80049ec:	f04f 0b00 	mov.w	fp, #0
 80049f0:	4b22      	ldr	r3, [pc, #136]	@ (8004a7c <_ZN23FrontendApplicationBase38gotoScreen_2_PM2ScreenNoTransitionImplEv+0x140>)
 80049f2:	4604      	mov	r4, r0
 80049f4:	f8c0 b004 	str.w	fp, [r0, #4]
 80049f8:	4659      	mov	r1, fp
 80049fa:	f880 b008 	strb.w	fp, [r0, #8]
 80049fe:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8004a00:	68b0      	ldr	r0, [r6, #8]
 8004a02:	6803      	ldr	r3, [r0, #0]
 8004a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a06:	4798      	blx	r3
 8004a08:	4605      	mov	r5, r0
 8004a0a:	f004 f8ed 	bl	8008be8 <_ZN16Screen_2_PM2ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8004a0e:	6870      	ldr	r0, [r6, #4]
 8004a10:	4659      	mov	r1, fp
 8004a12:	6803      	ldr	r3, [r0, #0]
 8004a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a16:	4798      	blx	r3
 8004a18:	4606      	mov	r6, r0
 8004a1a:	4629      	mov	r1, r5
 8004a1c:	f004 f84e 	bl	8008abc <_ZN21Screen_2_PM2PresenterC1ER16Screen_2_PM2View>
    model->bind(newPresenter);
 8004a20:	1d33      	adds	r3, r6, #4
    *currentPresenter = newPresenter;
 8004a22:	f8c7 613c 	str.w	r6, [r7, #316]	@ 0x13c
    newScreen->setupScreen();
 8004a26:	4628      	mov	r0, r5
    *currentTrans = newTransition;
 8004a28:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 8004a2c:	f8c8 5000 	str.w	r5, [r8]
 8004a30:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 8004a34:	682b      	ldr	r3, [r5, #0]
 8004a36:	f8c6 a008 	str.w	sl, [r6, #8]
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	63ee      	str	r6, [r5, #60]	@ 0x3c
 8004a3e:	4798      	blx	r3
    newPresenter->activate();
 8004a40:	6833      	ldr	r3, [r6, #0]
 8004a42:	4630      	mov	r0, r6
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8004a48:	4621      	mov	r1, r4
 8004a4a:	4628      	mov	r0, r5
 8004a4c:	f015 ff1a 	bl	801a884 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8004a50:	6823      	ldr	r3, [r4, #0]
 8004a52:	4620      	mov	r0, r4
 8004a54:	691b      	ldr	r3, [r3, #16]
 8004a56:	4798      	blx	r3
    newTransition->invalidate();
 8004a58:	6823      	ldr	r3, [r4, #0]
 8004a5a:	4620      	mov	r0, r4
 8004a5c:	695b      	ldr	r3, [r3, #20]
}
 8004a5e:	b001      	add	sp, #4
 8004a60:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a64:	4718      	bx	r3
 8004a66:	bf00      	nop
 8004a68:	0803f9b0 	.word	0x0803f9b0
 8004a6c:	0803fd81 	.word	0x0803fd81
 8004a70:	0803fb18 	.word	0x0803fb18
 8004a74:	0803fb5f 	.word	0x0803fb5f
 8004a78:	0803fc02 	.word	0x0803fc02
 8004a7c:	08040254 	.word	0x08040254
 8004a80:	20029f20 	.word	0x20029f20
 8004a84:	20029f1c 	.word	0x20029f1c

08004a88 <_ZN23FrontendApplicationBase34gotoScreen_2ScreenNoTransitionImplEv>:
{
 8004a88:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen_2View, Screen_2Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8004a8c:	e9d0 6a55 	ldrd	r6, sl, [r0, #340]	@ 0x154
{
 8004a90:	4607      	mov	r7, r0
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8004a92:	68b0      	ldr	r0, [r6, #8]
 8004a94:	6803      	ldr	r3, [r0, #0]
 8004a96:	6a1b      	ldr	r3, [r3, #32]
 8004a98:	4798      	blx	r3
 8004a9a:	f5b0 7f04 	cmp.w	r0, #528	@ 0x210
 8004a9e:	d205      	bcs.n	8004aac <_ZN23FrontendApplicationBase34gotoScreen_2ScreenNoTransitionImplEv+0x24>
 8004aa0:	4b43      	ldr	r3, [pc, #268]	@ (8004bb0 <_ZN23FrontendApplicationBase34gotoScreen_2ScreenNoTransitionImplEv+0x128>)
 8004aa2:	21a3      	movs	r1, #163	@ 0xa3
 8004aa4:	4a43      	ldr	r2, [pc, #268]	@ (8004bb4 <_ZN23FrontendApplicationBase34gotoScreen_2ScreenNoTransitionImplEv+0x12c>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8004aa6:	4844      	ldr	r0, [pc, #272]	@ (8004bb8 <_ZN23FrontendApplicationBase34gotoScreen_2ScreenNoTransitionImplEv+0x130>)
 8004aa8:	f025 fd88 	bl	802a5bc <__assert_func>
 8004aac:	6870      	ldr	r0, [r6, #4]
 8004aae:	6803      	ldr	r3, [r0, #0]
 8004ab0:	6a1b      	ldr	r3, [r3, #32]
 8004ab2:	4798      	blx	r3
 8004ab4:	280f      	cmp	r0, #15
 8004ab6:	d803      	bhi.n	8004ac0 <_ZN23FrontendApplicationBase34gotoScreen_2ScreenNoTransitionImplEv+0x38>
 8004ab8:	4b40      	ldr	r3, [pc, #256]	@ (8004bbc <_ZN23FrontendApplicationBase34gotoScreen_2ScreenNoTransitionImplEv+0x134>)
 8004aba:	21a4      	movs	r1, #164	@ 0xa4
 8004abc:	4a3d      	ldr	r2, [pc, #244]	@ (8004bb4 <_ZN23FrontendApplicationBase34gotoScreen_2ScreenNoTransitionImplEv+0x12c>)
 8004abe:	e7f2      	b.n	8004aa6 <_ZN23FrontendApplicationBase34gotoScreen_2ScreenNoTransitionImplEv+0x1e>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8004ac0:	68f0      	ldr	r0, [r6, #12]
 8004ac2:	6803      	ldr	r3, [r0, #0]
 8004ac4:	6a1b      	ldr	r3, [r3, #32]
 8004ac6:	4798      	blx	r3
 8004ac8:	280b      	cmp	r0, #11
 8004aca:	d803      	bhi.n	8004ad4 <_ZN23FrontendApplicationBase34gotoScreen_2ScreenNoTransitionImplEv+0x4c>
 8004acc:	4b3c      	ldr	r3, [pc, #240]	@ (8004bc0 <_ZN23FrontendApplicationBase34gotoScreen_2ScreenNoTransitionImplEv+0x138>)
 8004ace:	21a5      	movs	r1, #165	@ 0xa5
 8004ad0:	4a38      	ldr	r2, [pc, #224]	@ (8004bb4 <_ZN23FrontendApplicationBase34gotoScreen_2ScreenNoTransitionImplEv+0x12c>)
 8004ad2:	e7e8      	b.n	8004aa6 <_ZN23FrontendApplicationBase34gotoScreen_2ScreenNoTransitionImplEv+0x1e>
    if (*currentTrans)
 8004ad4:	f8df 90f0 	ldr.w	r9, [pc, #240]	@ 8004bc8 <_ZN23FrontendApplicationBase34gotoScreen_2ScreenNoTransitionImplEv+0x140>
    Application::getInstance()->clearAllTimerWidgets();
 8004ad8:	f014 f912 	bl	8018d00 <_ZN8touchgfx11Application11getInstanceEv>
 8004adc:	3004      	adds	r0, #4
 8004ade:	f014 f94d 	bl	8018d7c <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 8004ae2:	f8d9 0000 	ldr.w	r0, [r9]
 8004ae6:	b110      	cbz	r0, 8004aee <_ZN23FrontendApplicationBase34gotoScreen_2ScreenNoTransitionImplEv+0x66>
        (*currentTrans)->tearDown();
 8004ae8:	6803      	ldr	r3, [r0, #0]
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	4798      	blx	r3
    if (*currentTrans)
 8004aee:	f8d9 0000 	ldr.w	r0, [r9]
 8004af2:	b110      	cbz	r0, 8004afa <_ZN23FrontendApplicationBase34gotoScreen_2ScreenNoTransitionImplEv+0x72>
        (*currentTrans)->~Transition();
 8004af4:	6803      	ldr	r3, [r0, #0]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4798      	blx	r3
    if (*currentScreen)
 8004afa:	f8df 80d0 	ldr.w	r8, [pc, #208]	@ 8004bcc <_ZN23FrontendApplicationBase34gotoScreen_2ScreenNoTransitionImplEv+0x144>
 8004afe:	f8d8 0000 	ldr.w	r0, [r8]
 8004b02:	b110      	cbz	r0, 8004b0a <_ZN23FrontendApplicationBase34gotoScreen_2ScreenNoTransitionImplEv+0x82>
        (*currentScreen)->tearDownScreen();
 8004b04:	6803      	ldr	r3, [r0, #0]
 8004b06:	695b      	ldr	r3, [r3, #20]
 8004b08:	4798      	blx	r3
    if (*currentPresenter)
 8004b0a:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8004b0e:	b110      	cbz	r0, 8004b16 <_ZN23FrontendApplicationBase34gotoScreen_2ScreenNoTransitionImplEv+0x8e>
        (*currentPresenter)->deactivate();
 8004b10:	6803      	ldr	r3, [r0, #0]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	4798      	blx	r3
    if (*currentScreen)
 8004b16:	f8d8 0000 	ldr.w	r0, [r8]
 8004b1a:	b110      	cbz	r0, 8004b22 <_ZN23FrontendApplicationBase34gotoScreen_2ScreenNoTransitionImplEv+0x9a>
        (*currentScreen)->~Screen();
 8004b1c:	6803      	ldr	r3, [r0, #0]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4798      	blx	r3
    if (*currentPresenter)
 8004b22:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8004b26:	b110      	cbz	r0, 8004b2e <_ZN23FrontendApplicationBase34gotoScreen_2ScreenNoTransitionImplEv+0xa6>
        (*currentPresenter)->~Presenter();
 8004b28:	6803      	ldr	r3, [r0, #0]
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8004b2e:	2100      	movs	r1, #0
 8004b30:	68f0      	ldr	r0, [r6, #12]
 8004b32:	f7ff fdb5 	bl	80046a0 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 8004b36:	f04f 0b00 	mov.w	fp, #0
 8004b3a:	4b22      	ldr	r3, [pc, #136]	@ (8004bc4 <_ZN23FrontendApplicationBase34gotoScreen_2ScreenNoTransitionImplEv+0x13c>)
 8004b3c:	4604      	mov	r4, r0
 8004b3e:	f8c0 b004 	str.w	fp, [r0, #4]
 8004b42:	4659      	mov	r1, fp
 8004b44:	f880 b008 	strb.w	fp, [r0, #8]
 8004b48:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8004b4a:	68b0      	ldr	r0, [r6, #8]
 8004b4c:	6803      	ldr	r3, [r0, #0]
 8004b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b50:	4798      	blx	r3
 8004b52:	4605      	mov	r5, r0
 8004b54:	f003 fee4 	bl	8008920 <_ZN12Screen_2ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8004b58:	6870      	ldr	r0, [r6, #4]
 8004b5a:	4659      	mov	r1, fp
 8004b5c:	6803      	ldr	r3, [r0, #0]
 8004b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b60:	4798      	blx	r3
 8004b62:	4606      	mov	r6, r0
 8004b64:	4629      	mov	r1, r5
 8004b66:	f003 fe59 	bl	800881c <_ZN17Screen_2PresenterC1ER12Screen_2View>
    model->bind(newPresenter);
 8004b6a:	1d33      	adds	r3, r6, #4
    *currentPresenter = newPresenter;
 8004b6c:	f8c7 613c 	str.w	r6, [r7, #316]	@ 0x13c
    newScreen->setupScreen();
 8004b70:	4628      	mov	r0, r5
    *currentTrans = newTransition;
 8004b72:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 8004b76:	f8c8 5000 	str.w	r5, [r8]
 8004b7a:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 8004b7e:	682b      	ldr	r3, [r5, #0]
 8004b80:	f8c6 a008 	str.w	sl, [r6, #8]
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	63ee      	str	r6, [r5, #60]	@ 0x3c
 8004b88:	4798      	blx	r3
    newPresenter->activate();
 8004b8a:	6833      	ldr	r3, [r6, #0]
 8004b8c:	4630      	mov	r0, r6
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8004b92:	4621      	mov	r1, r4
 8004b94:	4628      	mov	r0, r5
 8004b96:	f015 fe75 	bl	801a884 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8004b9a:	6823      	ldr	r3, [r4, #0]
 8004b9c:	4620      	mov	r0, r4
 8004b9e:	691b      	ldr	r3, [r3, #16]
 8004ba0:	4798      	blx	r3
    newTransition->invalidate();
 8004ba2:	6823      	ldr	r3, [r4, #0]
 8004ba4:	4620      	mov	r0, r4
 8004ba6:	695b      	ldr	r3, [r3, #20]
}
 8004ba8:	b001      	add	sp, #4
 8004baa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bae:	4718      	bx	r3
 8004bb0:	0803f9b0 	.word	0x0803f9b0
 8004bb4:	0803fe5d 	.word	0x0803fe5d
 8004bb8:	0803fb18 	.word	0x0803fb18
 8004bbc:	0803fb5f 	.word	0x0803fb5f
 8004bc0:	0803fc02 	.word	0x0803fc02
 8004bc4:	08040254 	.word	0x08040254
 8004bc8:	20029f20 	.word	0x20029f20
 8004bcc:	20029f1c 	.word	0x20029f1c

08004bd0 <_ZN23FrontendApplicationBase48gotoScreen_1_LP_StatisticsScreenNoTransitionImplEv>:
{
 8004bd0:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen_1_LP_StatisticsView, Screen_1_LP_StatisticsPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8004bd4:	e9d0 6a55 	ldrd	r6, sl, [r0, #340]	@ 0x154
{
 8004bd8:	4607      	mov	r7, r0
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8004bda:	68b0      	ldr	r0, [r6, #8]
 8004bdc:	6803      	ldr	r3, [r0, #0]
 8004bde:	6a1b      	ldr	r3, [r3, #32]
 8004be0:	4798      	blx	r3
 8004be2:	f240 439b 	movw	r3, #1179	@ 0x49b
 8004be6:	4298      	cmp	r0, r3
 8004be8:	d805      	bhi.n	8004bf6 <_ZN23FrontendApplicationBase48gotoScreen_1_LP_StatisticsScreenNoTransitionImplEv+0x26>
 8004bea:	4b44      	ldr	r3, [pc, #272]	@ (8004cfc <_ZN23FrontendApplicationBase48gotoScreen_1_LP_StatisticsScreenNoTransitionImplEv+0x12c>)
 8004bec:	21a3      	movs	r1, #163	@ 0xa3
 8004bee:	4a44      	ldr	r2, [pc, #272]	@ (8004d00 <_ZN23FrontendApplicationBase48gotoScreen_1_LP_StatisticsScreenNoTransitionImplEv+0x130>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8004bf0:	4844      	ldr	r0, [pc, #272]	@ (8004d04 <_ZN23FrontendApplicationBase48gotoScreen_1_LP_StatisticsScreenNoTransitionImplEv+0x134>)
 8004bf2:	f025 fce3 	bl	802a5bc <__assert_func>
 8004bf6:	6870      	ldr	r0, [r6, #4]
 8004bf8:	6803      	ldr	r3, [r0, #0]
 8004bfa:	6a1b      	ldr	r3, [r3, #32]
 8004bfc:	4798      	blx	r3
 8004bfe:	280f      	cmp	r0, #15
 8004c00:	d803      	bhi.n	8004c0a <_ZN23FrontendApplicationBase48gotoScreen_1_LP_StatisticsScreenNoTransitionImplEv+0x3a>
 8004c02:	4b41      	ldr	r3, [pc, #260]	@ (8004d08 <_ZN23FrontendApplicationBase48gotoScreen_1_LP_StatisticsScreenNoTransitionImplEv+0x138>)
 8004c04:	21a4      	movs	r1, #164	@ 0xa4
 8004c06:	4a3e      	ldr	r2, [pc, #248]	@ (8004d00 <_ZN23FrontendApplicationBase48gotoScreen_1_LP_StatisticsScreenNoTransitionImplEv+0x130>)
 8004c08:	e7f2      	b.n	8004bf0 <_ZN23FrontendApplicationBase48gotoScreen_1_LP_StatisticsScreenNoTransitionImplEv+0x20>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8004c0a:	68f0      	ldr	r0, [r6, #12]
 8004c0c:	6803      	ldr	r3, [r0, #0]
 8004c0e:	6a1b      	ldr	r3, [r3, #32]
 8004c10:	4798      	blx	r3
 8004c12:	280b      	cmp	r0, #11
 8004c14:	d803      	bhi.n	8004c1e <_ZN23FrontendApplicationBase48gotoScreen_1_LP_StatisticsScreenNoTransitionImplEv+0x4e>
 8004c16:	4b3d      	ldr	r3, [pc, #244]	@ (8004d0c <_ZN23FrontendApplicationBase48gotoScreen_1_LP_StatisticsScreenNoTransitionImplEv+0x13c>)
 8004c18:	21a5      	movs	r1, #165	@ 0xa5
 8004c1a:	4a39      	ldr	r2, [pc, #228]	@ (8004d00 <_ZN23FrontendApplicationBase48gotoScreen_1_LP_StatisticsScreenNoTransitionImplEv+0x130>)
 8004c1c:	e7e8      	b.n	8004bf0 <_ZN23FrontendApplicationBase48gotoScreen_1_LP_StatisticsScreenNoTransitionImplEv+0x20>
    if (*currentTrans)
 8004c1e:	f8df 90f4 	ldr.w	r9, [pc, #244]	@ 8004d14 <_ZN23FrontendApplicationBase48gotoScreen_1_LP_StatisticsScreenNoTransitionImplEv+0x144>
    Application::getInstance()->clearAllTimerWidgets();
 8004c22:	f014 f86d 	bl	8018d00 <_ZN8touchgfx11Application11getInstanceEv>
 8004c26:	3004      	adds	r0, #4
 8004c28:	f014 f8a8 	bl	8018d7c <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 8004c2c:	f8d9 0000 	ldr.w	r0, [r9]
 8004c30:	b110      	cbz	r0, 8004c38 <_ZN23FrontendApplicationBase48gotoScreen_1_LP_StatisticsScreenNoTransitionImplEv+0x68>
        (*currentTrans)->tearDown();
 8004c32:	6803      	ldr	r3, [r0, #0]
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	4798      	blx	r3
    if (*currentTrans)
 8004c38:	f8d9 0000 	ldr.w	r0, [r9]
 8004c3c:	b110      	cbz	r0, 8004c44 <_ZN23FrontendApplicationBase48gotoScreen_1_LP_StatisticsScreenNoTransitionImplEv+0x74>
        (*currentTrans)->~Transition();
 8004c3e:	6803      	ldr	r3, [r0, #0]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4798      	blx	r3
    if (*currentScreen)
 8004c44:	f8df 80d0 	ldr.w	r8, [pc, #208]	@ 8004d18 <_ZN23FrontendApplicationBase48gotoScreen_1_LP_StatisticsScreenNoTransitionImplEv+0x148>
 8004c48:	f8d8 0000 	ldr.w	r0, [r8]
 8004c4c:	b110      	cbz	r0, 8004c54 <_ZN23FrontendApplicationBase48gotoScreen_1_LP_StatisticsScreenNoTransitionImplEv+0x84>
        (*currentScreen)->tearDownScreen();
 8004c4e:	6803      	ldr	r3, [r0, #0]
 8004c50:	695b      	ldr	r3, [r3, #20]
 8004c52:	4798      	blx	r3
    if (*currentPresenter)
 8004c54:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8004c58:	b110      	cbz	r0, 8004c60 <_ZN23FrontendApplicationBase48gotoScreen_1_LP_StatisticsScreenNoTransitionImplEv+0x90>
        (*currentPresenter)->deactivate();
 8004c5a:	6803      	ldr	r3, [r0, #0]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	4798      	blx	r3
    if (*currentScreen)
 8004c60:	f8d8 0000 	ldr.w	r0, [r8]
 8004c64:	b110      	cbz	r0, 8004c6c <_ZN23FrontendApplicationBase48gotoScreen_1_LP_StatisticsScreenNoTransitionImplEv+0x9c>
        (*currentScreen)->~Screen();
 8004c66:	6803      	ldr	r3, [r0, #0]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4798      	blx	r3
    if (*currentPresenter)
 8004c6c:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8004c70:	b110      	cbz	r0, 8004c78 <_ZN23FrontendApplicationBase48gotoScreen_1_LP_StatisticsScreenNoTransitionImplEv+0xa8>
        (*currentPresenter)->~Presenter();
 8004c72:	6803      	ldr	r3, [r0, #0]
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8004c78:	2100      	movs	r1, #0
 8004c7a:	68f0      	ldr	r0, [r6, #12]
 8004c7c:	f7ff fd10 	bl	80046a0 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 8004c80:	f04f 0b00 	mov.w	fp, #0
 8004c84:	4b22      	ldr	r3, [pc, #136]	@ (8004d10 <_ZN23FrontendApplicationBase48gotoScreen_1_LP_StatisticsScreenNoTransitionImplEv+0x140>)
 8004c86:	4604      	mov	r4, r0
 8004c88:	f8c0 b004 	str.w	fp, [r0, #4]
 8004c8c:	4659      	mov	r1, fp
 8004c8e:	f880 b008 	strb.w	fp, [r0, #8]
 8004c92:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8004c94:	68b0      	ldr	r0, [r6, #8]
 8004c96:	6803      	ldr	r3, [r0, #0]
 8004c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c9a:	4798      	blx	r3
 8004c9c:	4605      	mov	r5, r0
 8004c9e:	f003 fc6f 	bl	8008580 <_ZN26Screen_1_LP_StatisticsViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8004ca2:	6870      	ldr	r0, [r6, #4]
 8004ca4:	4659      	mov	r1, fp
 8004ca6:	6803      	ldr	r3, [r0, #0]
 8004ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004caa:	4798      	blx	r3
 8004cac:	4606      	mov	r6, r0
 8004cae:	4629      	mov	r1, r5
 8004cb0:	f003 fbc0 	bl	8008434 <_ZN31Screen_1_LP_StatisticsPresenterC1ER26Screen_1_LP_StatisticsView>
    model->bind(newPresenter);
 8004cb4:	1d33      	adds	r3, r6, #4
    *currentPresenter = newPresenter;
 8004cb6:	f8c7 613c 	str.w	r6, [r7, #316]	@ 0x13c
    newScreen->setupScreen();
 8004cba:	4628      	mov	r0, r5
    *currentTrans = newTransition;
 8004cbc:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 8004cc0:	f8c8 5000 	str.w	r5, [r8]
 8004cc4:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 8004cc8:	682b      	ldr	r3, [r5, #0]
 8004cca:	f8c6 a008 	str.w	sl, [r6, #8]
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	63ee      	str	r6, [r5, #60]	@ 0x3c
 8004cd2:	4798      	blx	r3
    newPresenter->activate();
 8004cd4:	6833      	ldr	r3, [r6, #0]
 8004cd6:	4630      	mov	r0, r6
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8004cdc:	4621      	mov	r1, r4
 8004cde:	4628      	mov	r0, r5
 8004ce0:	f015 fdd0 	bl	801a884 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8004ce4:	6823      	ldr	r3, [r4, #0]
 8004ce6:	4620      	mov	r0, r4
 8004ce8:	691b      	ldr	r3, [r3, #16]
 8004cea:	4798      	blx	r3
    newTransition->invalidate();
 8004cec:	6823      	ldr	r3, [r4, #0]
 8004cee:	4620      	mov	r0, r4
 8004cf0:	695b      	ldr	r3, [r3, #20]
}
 8004cf2:	b001      	add	sp, #4
 8004cf4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cf8:	4718      	bx	r3
 8004cfa:	bf00      	nop
 8004cfc:	0803f9b0 	.word	0x0803f9b0
 8004d00:	0803ff31 	.word	0x0803ff31
 8004d04:	0803fb18 	.word	0x0803fb18
 8004d08:	0803fb5f 	.word	0x0803fb5f
 8004d0c:	0803fc02 	.word	0x0803fc02
 8004d10:	08040254 	.word	0x08040254
 8004d14:	20029f20 	.word	0x20029f20
 8004d18:	20029f1c 	.word	0x20029f1c

08004d1c <_ZN23FrontendApplicationBase45gotoScreen_1_StatisticsScreenNoTransitionImplEv>:
{
 8004d1c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen_1_StatisticsView, Screen_1_StatisticsPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8004d20:	e9d0 6a55 	ldrd	r6, sl, [r0, #340]	@ 0x154
{
 8004d24:	4607      	mov	r7, r0
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8004d26:	68b0      	ldr	r0, [r6, #8]
 8004d28:	6803      	ldr	r3, [r0, #0]
 8004d2a:	6a1b      	ldr	r3, [r3, #32]
 8004d2c:	4798      	blx	r3
 8004d2e:	f641 23d7 	movw	r3, #6871	@ 0x1ad7
 8004d32:	4298      	cmp	r0, r3
 8004d34:	d805      	bhi.n	8004d42 <_ZN23FrontendApplicationBase45gotoScreen_1_StatisticsScreenNoTransitionImplEv+0x26>
 8004d36:	4b44      	ldr	r3, [pc, #272]	@ (8004e48 <_ZN23FrontendApplicationBase45gotoScreen_1_StatisticsScreenNoTransitionImplEv+0x12c>)
 8004d38:	21a3      	movs	r1, #163	@ 0xa3
 8004d3a:	4a44      	ldr	r2, [pc, #272]	@ (8004e4c <_ZN23FrontendApplicationBase45gotoScreen_1_StatisticsScreenNoTransitionImplEv+0x130>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8004d3c:	4844      	ldr	r0, [pc, #272]	@ (8004e50 <_ZN23FrontendApplicationBase45gotoScreen_1_StatisticsScreenNoTransitionImplEv+0x134>)
 8004d3e:	f025 fc3d 	bl	802a5bc <__assert_func>
 8004d42:	6870      	ldr	r0, [r6, #4]
 8004d44:	6803      	ldr	r3, [r0, #0]
 8004d46:	6a1b      	ldr	r3, [r3, #32]
 8004d48:	4798      	blx	r3
 8004d4a:	280f      	cmp	r0, #15
 8004d4c:	d803      	bhi.n	8004d56 <_ZN23FrontendApplicationBase45gotoScreen_1_StatisticsScreenNoTransitionImplEv+0x3a>
 8004d4e:	4b41      	ldr	r3, [pc, #260]	@ (8004e54 <_ZN23FrontendApplicationBase45gotoScreen_1_StatisticsScreenNoTransitionImplEv+0x138>)
 8004d50:	21a4      	movs	r1, #164	@ 0xa4
 8004d52:	4a3e      	ldr	r2, [pc, #248]	@ (8004e4c <_ZN23FrontendApplicationBase45gotoScreen_1_StatisticsScreenNoTransitionImplEv+0x130>)
 8004d54:	e7f2      	b.n	8004d3c <_ZN23FrontendApplicationBase45gotoScreen_1_StatisticsScreenNoTransitionImplEv+0x20>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8004d56:	68f0      	ldr	r0, [r6, #12]
 8004d58:	6803      	ldr	r3, [r0, #0]
 8004d5a:	6a1b      	ldr	r3, [r3, #32]
 8004d5c:	4798      	blx	r3
 8004d5e:	280b      	cmp	r0, #11
 8004d60:	d803      	bhi.n	8004d6a <_ZN23FrontendApplicationBase45gotoScreen_1_StatisticsScreenNoTransitionImplEv+0x4e>
 8004d62:	4b3d      	ldr	r3, [pc, #244]	@ (8004e58 <_ZN23FrontendApplicationBase45gotoScreen_1_StatisticsScreenNoTransitionImplEv+0x13c>)
 8004d64:	21a5      	movs	r1, #165	@ 0xa5
 8004d66:	4a39      	ldr	r2, [pc, #228]	@ (8004e4c <_ZN23FrontendApplicationBase45gotoScreen_1_StatisticsScreenNoTransitionImplEv+0x130>)
 8004d68:	e7e8      	b.n	8004d3c <_ZN23FrontendApplicationBase45gotoScreen_1_StatisticsScreenNoTransitionImplEv+0x20>
    if (*currentTrans)
 8004d6a:	f8df 90f4 	ldr.w	r9, [pc, #244]	@ 8004e60 <_ZN23FrontendApplicationBase45gotoScreen_1_StatisticsScreenNoTransitionImplEv+0x144>
    Application::getInstance()->clearAllTimerWidgets();
 8004d6e:	f013 ffc7 	bl	8018d00 <_ZN8touchgfx11Application11getInstanceEv>
 8004d72:	3004      	adds	r0, #4
 8004d74:	f014 f802 	bl	8018d7c <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 8004d78:	f8d9 0000 	ldr.w	r0, [r9]
 8004d7c:	b110      	cbz	r0, 8004d84 <_ZN23FrontendApplicationBase45gotoScreen_1_StatisticsScreenNoTransitionImplEv+0x68>
        (*currentTrans)->tearDown();
 8004d7e:	6803      	ldr	r3, [r0, #0]
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	4798      	blx	r3
    if (*currentTrans)
 8004d84:	f8d9 0000 	ldr.w	r0, [r9]
 8004d88:	b110      	cbz	r0, 8004d90 <_ZN23FrontendApplicationBase45gotoScreen_1_StatisticsScreenNoTransitionImplEv+0x74>
        (*currentTrans)->~Transition();
 8004d8a:	6803      	ldr	r3, [r0, #0]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4798      	blx	r3
    if (*currentScreen)
 8004d90:	f8df 80d0 	ldr.w	r8, [pc, #208]	@ 8004e64 <_ZN23FrontendApplicationBase45gotoScreen_1_StatisticsScreenNoTransitionImplEv+0x148>
 8004d94:	f8d8 0000 	ldr.w	r0, [r8]
 8004d98:	b110      	cbz	r0, 8004da0 <_ZN23FrontendApplicationBase45gotoScreen_1_StatisticsScreenNoTransitionImplEv+0x84>
        (*currentScreen)->tearDownScreen();
 8004d9a:	6803      	ldr	r3, [r0, #0]
 8004d9c:	695b      	ldr	r3, [r3, #20]
 8004d9e:	4798      	blx	r3
    if (*currentPresenter)
 8004da0:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8004da4:	b110      	cbz	r0, 8004dac <_ZN23FrontendApplicationBase45gotoScreen_1_StatisticsScreenNoTransitionImplEv+0x90>
        (*currentPresenter)->deactivate();
 8004da6:	6803      	ldr	r3, [r0, #0]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	4798      	blx	r3
    if (*currentScreen)
 8004dac:	f8d8 0000 	ldr.w	r0, [r8]
 8004db0:	b110      	cbz	r0, 8004db8 <_ZN23FrontendApplicationBase45gotoScreen_1_StatisticsScreenNoTransitionImplEv+0x9c>
        (*currentScreen)->~Screen();
 8004db2:	6803      	ldr	r3, [r0, #0]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4798      	blx	r3
    if (*currentPresenter)
 8004db8:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8004dbc:	b110      	cbz	r0, 8004dc4 <_ZN23FrontendApplicationBase45gotoScreen_1_StatisticsScreenNoTransitionImplEv+0xa8>
        (*currentPresenter)->~Presenter();
 8004dbe:	6803      	ldr	r3, [r0, #0]
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8004dc4:	2100      	movs	r1, #0
 8004dc6:	68f0      	ldr	r0, [r6, #12]
 8004dc8:	f7ff fc6a 	bl	80046a0 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 8004dcc:	f04f 0b00 	mov.w	fp, #0
 8004dd0:	4b22      	ldr	r3, [pc, #136]	@ (8004e5c <_ZN23FrontendApplicationBase45gotoScreen_1_StatisticsScreenNoTransitionImplEv+0x140>)
 8004dd2:	4604      	mov	r4, r0
 8004dd4:	f8c0 b004 	str.w	fp, [r0, #4]
 8004dd8:	4659      	mov	r1, fp
 8004dda:	f880 b008 	strb.w	fp, [r0, #8]
 8004dde:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8004de0:	68b0      	ldr	r0, [r6, #8]
 8004de2:	6803      	ldr	r3, [r0, #0]
 8004de4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004de6:	4798      	blx	r3
 8004de8:	4605      	mov	r5, r0
 8004dea:	f003 fcbd 	bl	8008768 <_ZN23Screen_1_StatisticsViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8004dee:	6870      	ldr	r0, [r6, #4]
 8004df0:	4659      	mov	r1, fp
 8004df2:	6803      	ldr	r3, [r0, #0]
 8004df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004df6:	4798      	blx	r3
 8004df8:	4606      	mov	r6, r0
 8004dfa:	4629      	mov	r1, r5
 8004dfc:	f003 fc4c 	bl	8008698 <_ZN28Screen_1_StatisticsPresenterC1ER23Screen_1_StatisticsView>
    model->bind(newPresenter);
 8004e00:	1d33      	adds	r3, r6, #4
    *currentPresenter = newPresenter;
 8004e02:	f8c7 613c 	str.w	r6, [r7, #316]	@ 0x13c
    newScreen->setupScreen();
 8004e06:	4628      	mov	r0, r5
    *currentTrans = newTransition;
 8004e08:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 8004e0c:	f8c8 5000 	str.w	r5, [r8]
 8004e10:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 8004e14:	682b      	ldr	r3, [r5, #0]
 8004e16:	f8c6 a008 	str.w	sl, [r6, #8]
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	63ee      	str	r6, [r5, #60]	@ 0x3c
 8004e1e:	4798      	blx	r3
    newPresenter->activate();
 8004e20:	6833      	ldr	r3, [r6, #0]
 8004e22:	4630      	mov	r0, r6
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8004e28:	4621      	mov	r1, r4
 8004e2a:	4628      	mov	r0, r5
 8004e2c:	f015 fd2a 	bl	801a884 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8004e30:	6823      	ldr	r3, [r4, #0]
 8004e32:	4620      	mov	r0, r4
 8004e34:	691b      	ldr	r3, [r3, #16]
 8004e36:	4798      	blx	r3
    newTransition->invalidate();
 8004e38:	6823      	ldr	r3, [r4, #0]
 8004e3a:	4620      	mov	r0, r4
 8004e3c:	695b      	ldr	r3, [r3, #20]
}
 8004e3e:	b001      	add	sp, #4
 8004e40:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e44:	4718      	bx	r3
 8004e46:	bf00      	nop
 8004e48:	0803f9b0 	.word	0x0803f9b0
 8004e4c:	08040021 	.word	0x08040021
 8004e50:	0803fb18 	.word	0x0803fb18
 8004e54:	0803fb5f 	.word	0x0803fb5f
 8004e58:	0803fc02 	.word	0x0803fc02
 8004e5c:	08040254 	.word	0x08040254
 8004e60:	20029f20 	.word	0x20029f20
 8004e64:	20029f1c 	.word	0x20029f1c

08004e68 <_ZN23FrontendApplicationBase34gotoScreen_1ScreenNoTransitionImplEv>:
{
 8004e68:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen_1View, Screen_1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8004e6c:	e9d0 6a55 	ldrd	r6, sl, [r0, #340]	@ 0x154
{
 8004e70:	4607      	mov	r7, r0
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8004e72:	68b0      	ldr	r0, [r6, #8]
 8004e74:	6803      	ldr	r3, [r0, #0]
 8004e76:	6a1b      	ldr	r3, [r3, #32]
 8004e78:	4798      	blx	r3
 8004e7a:	f5b0 7f6b 	cmp.w	r0, #940	@ 0x3ac
 8004e7e:	d205      	bcs.n	8004e8c <_ZN23FrontendApplicationBase34gotoScreen_1ScreenNoTransitionImplEv+0x24>
 8004e80:	4b43      	ldr	r3, [pc, #268]	@ (8004f90 <_ZN23FrontendApplicationBase34gotoScreen_1ScreenNoTransitionImplEv+0x128>)
 8004e82:	21a3      	movs	r1, #163	@ 0xa3
 8004e84:	4a43      	ldr	r2, [pc, #268]	@ (8004f94 <_ZN23FrontendApplicationBase34gotoScreen_1ScreenNoTransitionImplEv+0x12c>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8004e86:	4844      	ldr	r0, [pc, #272]	@ (8004f98 <_ZN23FrontendApplicationBase34gotoScreen_1ScreenNoTransitionImplEv+0x130>)
 8004e88:	f025 fb98 	bl	802a5bc <__assert_func>
 8004e8c:	6870      	ldr	r0, [r6, #4]
 8004e8e:	6803      	ldr	r3, [r0, #0]
 8004e90:	6a1b      	ldr	r3, [r3, #32]
 8004e92:	4798      	blx	r3
 8004e94:	280f      	cmp	r0, #15
 8004e96:	d803      	bhi.n	8004ea0 <_ZN23FrontendApplicationBase34gotoScreen_1ScreenNoTransitionImplEv+0x38>
 8004e98:	4b40      	ldr	r3, [pc, #256]	@ (8004f9c <_ZN23FrontendApplicationBase34gotoScreen_1ScreenNoTransitionImplEv+0x134>)
 8004e9a:	21a4      	movs	r1, #164	@ 0xa4
 8004e9c:	4a3d      	ldr	r2, [pc, #244]	@ (8004f94 <_ZN23FrontendApplicationBase34gotoScreen_1ScreenNoTransitionImplEv+0x12c>)
 8004e9e:	e7f2      	b.n	8004e86 <_ZN23FrontendApplicationBase34gotoScreen_1ScreenNoTransitionImplEv+0x1e>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8004ea0:	68f0      	ldr	r0, [r6, #12]
 8004ea2:	6803      	ldr	r3, [r0, #0]
 8004ea4:	6a1b      	ldr	r3, [r3, #32]
 8004ea6:	4798      	blx	r3
 8004ea8:	280b      	cmp	r0, #11
 8004eaa:	d803      	bhi.n	8004eb4 <_ZN23FrontendApplicationBase34gotoScreen_1ScreenNoTransitionImplEv+0x4c>
 8004eac:	4b3c      	ldr	r3, [pc, #240]	@ (8004fa0 <_ZN23FrontendApplicationBase34gotoScreen_1ScreenNoTransitionImplEv+0x138>)
 8004eae:	21a5      	movs	r1, #165	@ 0xa5
 8004eb0:	4a38      	ldr	r2, [pc, #224]	@ (8004f94 <_ZN23FrontendApplicationBase34gotoScreen_1ScreenNoTransitionImplEv+0x12c>)
 8004eb2:	e7e8      	b.n	8004e86 <_ZN23FrontendApplicationBase34gotoScreen_1ScreenNoTransitionImplEv+0x1e>
    if (*currentTrans)
 8004eb4:	f8df 90f0 	ldr.w	r9, [pc, #240]	@ 8004fa8 <_ZN23FrontendApplicationBase34gotoScreen_1ScreenNoTransitionImplEv+0x140>
    Application::getInstance()->clearAllTimerWidgets();
 8004eb8:	f013 ff22 	bl	8018d00 <_ZN8touchgfx11Application11getInstanceEv>
 8004ebc:	3004      	adds	r0, #4
 8004ebe:	f013 ff5d 	bl	8018d7c <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 8004ec2:	f8d9 0000 	ldr.w	r0, [r9]
 8004ec6:	b110      	cbz	r0, 8004ece <_ZN23FrontendApplicationBase34gotoScreen_1ScreenNoTransitionImplEv+0x66>
        (*currentTrans)->tearDown();
 8004ec8:	6803      	ldr	r3, [r0, #0]
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	4798      	blx	r3
    if (*currentTrans)
 8004ece:	f8d9 0000 	ldr.w	r0, [r9]
 8004ed2:	b110      	cbz	r0, 8004eda <_ZN23FrontendApplicationBase34gotoScreen_1ScreenNoTransitionImplEv+0x72>
        (*currentTrans)->~Transition();
 8004ed4:	6803      	ldr	r3, [r0, #0]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4798      	blx	r3
    if (*currentScreen)
 8004eda:	f8df 80d0 	ldr.w	r8, [pc, #208]	@ 8004fac <_ZN23FrontendApplicationBase34gotoScreen_1ScreenNoTransitionImplEv+0x144>
 8004ede:	f8d8 0000 	ldr.w	r0, [r8]
 8004ee2:	b110      	cbz	r0, 8004eea <_ZN23FrontendApplicationBase34gotoScreen_1ScreenNoTransitionImplEv+0x82>
        (*currentScreen)->tearDownScreen();
 8004ee4:	6803      	ldr	r3, [r0, #0]
 8004ee6:	695b      	ldr	r3, [r3, #20]
 8004ee8:	4798      	blx	r3
    if (*currentPresenter)
 8004eea:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8004eee:	b110      	cbz	r0, 8004ef6 <_ZN23FrontendApplicationBase34gotoScreen_1ScreenNoTransitionImplEv+0x8e>
        (*currentPresenter)->deactivate();
 8004ef0:	6803      	ldr	r3, [r0, #0]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	4798      	blx	r3
    if (*currentScreen)
 8004ef6:	f8d8 0000 	ldr.w	r0, [r8]
 8004efa:	b110      	cbz	r0, 8004f02 <_ZN23FrontendApplicationBase34gotoScreen_1ScreenNoTransitionImplEv+0x9a>
        (*currentScreen)->~Screen();
 8004efc:	6803      	ldr	r3, [r0, #0]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4798      	blx	r3
    if (*currentPresenter)
 8004f02:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8004f06:	b110      	cbz	r0, 8004f0e <_ZN23FrontendApplicationBase34gotoScreen_1ScreenNoTransitionImplEv+0xa6>
        (*currentPresenter)->~Presenter();
 8004f08:	6803      	ldr	r3, [r0, #0]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8004f0e:	2100      	movs	r1, #0
 8004f10:	68f0      	ldr	r0, [r6, #12]
 8004f12:	f7ff fbc5 	bl	80046a0 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 8004f16:	f04f 0b00 	mov.w	fp, #0
 8004f1a:	4b22      	ldr	r3, [pc, #136]	@ (8004fa4 <_ZN23FrontendApplicationBase34gotoScreen_1ScreenNoTransitionImplEv+0x13c>)
 8004f1c:	4604      	mov	r4, r0
 8004f1e:	f8c0 b004 	str.w	fp, [r0, #4]
 8004f22:	4659      	mov	r1, fp
 8004f24:	f880 b008 	strb.w	fp, [r0, #8]
 8004f28:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8004f2a:	68b0      	ldr	r0, [r6, #8]
 8004f2c:	6803      	ldr	r3, [r0, #0]
 8004f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f30:	4798      	blx	r3
 8004f32:	4605      	mov	r5, r0
 8004f34:	f003 fa36 	bl	80083a4 <_ZN12Screen_1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8004f38:	6870      	ldr	r0, [r6, #4]
 8004f3a:	4659      	mov	r1, fp
 8004f3c:	6803      	ldr	r3, [r0, #0]
 8004f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f40:	4798      	blx	r3
 8004f42:	4606      	mov	r6, r0
 8004f44:	4629      	mov	r1, r5
 8004f46:	f003 f9cd 	bl	80082e4 <_ZN17Screen_1PresenterC1ER12Screen_1View>
    model->bind(newPresenter);
 8004f4a:	1d33      	adds	r3, r6, #4
    *currentPresenter = newPresenter;
 8004f4c:	f8c7 613c 	str.w	r6, [r7, #316]	@ 0x13c
    newScreen->setupScreen();
 8004f50:	4628      	mov	r0, r5
    *currentTrans = newTransition;
 8004f52:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 8004f56:	f8c8 5000 	str.w	r5, [r8]
 8004f5a:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 8004f5e:	682b      	ldr	r3, [r5, #0]
 8004f60:	f8c6 a008 	str.w	sl, [r6, #8]
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	63ee      	str	r6, [r5, #60]	@ 0x3c
 8004f68:	4798      	blx	r3
    newPresenter->activate();
 8004f6a:	6833      	ldr	r3, [r6, #0]
 8004f6c:	4630      	mov	r0, r6
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8004f72:	4621      	mov	r1, r4
 8004f74:	4628      	mov	r0, r5
 8004f76:	f015 fc85 	bl	801a884 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8004f7a:	6823      	ldr	r3, [r4, #0]
 8004f7c:	4620      	mov	r0, r4
 8004f7e:	691b      	ldr	r3, [r3, #16]
 8004f80:	4798      	blx	r3
    newTransition->invalidate();
 8004f82:	6823      	ldr	r3, [r4, #0]
 8004f84:	4620      	mov	r0, r4
 8004f86:	695b      	ldr	r3, [r3, #20]
}
 8004f88:	b001      	add	sp, #4
 8004f8a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f8e:	4718      	bx	r3
 8004f90:	0803f9b0 	.word	0x0803f9b0
 8004f94:	0804010b 	.word	0x0804010b
 8004f98:	0803fb18 	.word	0x0803fb18
 8004f9c:	0803fb5f 	.word	0x0803fb5f
 8004fa0:	0803fc02 	.word	0x0803fc02
 8004fa4:	08040254 	.word	0x08040254
 8004fa8:	20029f20 	.word	0x20029f20
 8004fac:	20029f1c 	.word	0x20029f1c

08004fb0 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 8004fb0:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8004fb2:	4770      	bx	lr

08004fb4 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 8004fb4:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8004fb6:	4770      	bx	lr

08004fb8 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 8004fb8:	4770      	bx	lr

08004fba <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8004fba:	888b      	ldrh	r3, [r1, #4]
 8004fbc:	69c0      	ldr	r0, [r0, #28]
 8004fbe:	0adb      	lsrs	r3, r3, #11
 8004fc0:	680a      	ldr	r2, [r1, #0]
 8004fc2:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
 8004fc6:	4410      	add	r0, r2
 8004fc8:	4770      	bx	lr

08004fca <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8004fca:	b510      	push	{r4, lr}
 8004fcc:	4604      	mov	r4, r0
    if (!glyph || glyph->kerningTableSize == 0)
 8004fce:	b1ba      	cbz	r2, 8005000 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
 8004fd0:	7b10      	ldrb	r0, [r2, #12]
 8004fd2:	b168      	cbz	r0, 8004ff0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8004fd4:	7b53      	ldrb	r3, [r2, #13]
 8004fd6:	7ad2      	ldrb	r2, [r2, #11]
 8004fd8:	021b      	lsls	r3, r3, #8
 8004fda:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8004fde:	431a      	orrs	r2, r3
 8004fe0:	6a23      	ldr	r3, [r4, #32]
 8004fe2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
    {
        if (prevChar == kerndata->unicodePrevChar)
 8004fe6:	881a      	ldrh	r2, [r3, #0]
 8004fe8:	428a      	cmp	r2, r1
 8004fea:	d102      	bne.n	8004ff2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
        {
            return kerndata->distance;
 8004fec:	f993 0002 	ldrsb.w	r0, [r3, #2]
        {
            break;
        }
    }
    return 0;
}
 8004ff0:	bd10      	pop	{r4, pc}
        if (prevChar < kerndata->unicodePrevChar)
 8004ff2:	d805      	bhi.n	8005000 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8004ff4:	3801      	subs	r0, #1
 8004ff6:	3304      	adds	r3, #4
 8004ff8:	b280      	uxth	r0, r0
 8004ffa:	2800      	cmp	r0, #0
 8004ffc:	d1f3      	bne.n	8004fe6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8004ffe:	e7f7      	b.n	8004ff0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
 8005000:	2000      	movs	r0, #0
 8005002:	e7f5      	b.n	8004ff0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>

08005004 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8005004:	b510      	push	{r4, lr}
 8005006:	4604      	mov	r4, r0
 8005008:	212c      	movs	r1, #44	@ 0x2c
 800500a:	f025 f959 	bl	802a2c0 <_ZdlPvj>
 800500e:	4620      	mov	r0, r4
 8005010:	bd10      	pop	{r4, pc}
	...

08005014 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8005014:	b530      	push	{r4, r5, lr}
 8005016:	b08b      	sub	sp, #44	@ 0x2c
 8005018:	4604      	mov	r4, r0
      arabicTable(formsTable)
 800501a:	f8bd 5060 	ldrh.w	r5, [sp, #96]	@ 0x60
 800501e:	9508      	str	r5, [sp, #32]
 8005020:	f8bd 505c 	ldrh.w	r5, [sp, #92]	@ 0x5c
 8005024:	9507      	str	r5, [sp, #28]
 8005026:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 800502a:	9506      	str	r5, [sp, #24]
 800502c:	f89d 504c 	ldrb.w	r5, [sp, #76]	@ 0x4c
 8005030:	9505      	str	r5, [sp, #20]
 8005032:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 8005036:	9504      	str	r5, [sp, #16]
 8005038:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 800503c:	9503      	str	r5, [sp, #12]
 800503e:	f89d 5040 	ldrb.w	r5, [sp, #64]	@ 0x40
 8005042:	9502      	str	r5, [sp, #8]
 8005044:	f89d 503c 	ldrb.w	r5, [sp, #60]	@ 0x3c
 8005048:	9501      	str	r5, [sp, #4]
 800504a:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 800504e:	9500      	str	r5, [sp, #0]
 8005050:	f014 ffa4 	bl	8019f9c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 8005054:	4b06      	ldr	r3, [pc, #24]	@ (8005070 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x5c>)
}
 8005056:	4620      	mov	r0, r4
      arabicTable(formsTable)
 8005058:	6023      	str	r3, [r4, #0]
      glyphData(glyphDataInternalFlash),
 800505a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800505c:	61e3      	str	r3, [r4, #28]
      kerningData(kerningList),
 800505e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005060:	6223      	str	r3, [r4, #32]
      gsubTable(gsubData),
 8005062:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005064:	6263      	str	r3, [r4, #36]	@ 0x24
      arabicTable(formsTable)
 8005066:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8005068:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 800506a:	b00b      	add	sp, #44	@ 0x2c
 800506c:	bd30      	pop	{r4, r5, pc}
 800506e:	bf00      	nop
 8005070:	08040278 	.word	0x08040278

08005074 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 8005074:	2000      	movs	r0, #0
 8005076:	4770      	bx	lr

08005078 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 8005078:	8081      	strh	r1, [r0, #4]
    }
 800507a:	4770      	bx	lr

0800507c <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 800507c:	80c1      	strh	r1, [r0, #6]
    }
 800507e:	4770      	bx	lr

08005080 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 8005080:	8101      	strh	r1, [r0, #8]
    }
 8005082:	4770      	bx	lr

08005084 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 8005084:	8141      	strh	r1, [r0, #10]
    }
 8005086:	4770      	bx	lr

08005088 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 8005088:	4770      	bx	lr

0800508a <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 800508a:	4770      	bx	lr

0800508c <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 800508c:	4770      	bx	lr

0800508e <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 800508e:	4770      	bx	lr

08005090 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 8005090:	4770      	bx	lr

08005092 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8005092:	b410      	push	{r4}
    {
        moveRelative(x - rect.x, y - rect.y);
 8005094:	88c4      	ldrh	r4, [r0, #6]
 8005096:	6803      	ldr	r3, [r0, #0]
 8005098:	1b12      	subs	r2, r2, r4
 800509a:	8884      	ldrh	r4, [r0, #4]
 800509c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800509e:	1b09      	subs	r1, r1, r4
 80050a0:	b212      	sxth	r2, r2
    }
 80050a2:	f85d 4b04 	ldr.w	r4, [sp], #4
        moveRelative(x - rect.x, y - rect.y);
 80050a6:	b209      	sxth	r1, r1
 80050a8:	4718      	bx	r3

080050aa <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 80050aa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80050ae:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 80050b0:	f04f 33ff 	mov.w	r3, #4294967295
 80050b4:	6203      	str	r3, [r0, #32]
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 80050b6:	6813      	ldr	r3, [r2, #0]
 80050b8:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 80050ba:	6010      	str	r0, [r2, #0]
    }
 80050bc:	4770      	bx	lr

080050be <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 80050be:	4770      	bx	lr

080050c0 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 80050c0:	4770      	bx	lr

080050c2 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 80050c2:	4770      	bx	lr

080050c4 <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 80050c4:	4770      	bx	lr

080050c6 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
 80050c6:	4770      	bx	lr

080050c8 <_ZN8touchgfx8TextArea8setWidthEs>:
    TextArea()
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
    {
    }

    virtual void setWidth(int16_t width)
 80050c8:	b530      	push	{r4, r5, lr}
 80050ca:	b085      	sub	sp, #20
    {
        Widget::setWidth(width);
        boundingArea = calculateBoundingArea();
 80050cc:	6803      	ldr	r3, [r0, #0]
    virtual void setWidth(int16_t width)
 80050ce:	4604      	mov	r4, r0
        rect.width = width;
 80050d0:	8101      	strh	r1, [r0, #8]
        boundingArea = calculateBoundingArea();
 80050d2:	466d      	mov	r5, sp
 80050d4:	4601      	mov	r1, r0
 80050d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050da:	343c      	adds	r4, #60	@ 0x3c
 80050dc:	4628      	mov	r0, r5
 80050de:	4798      	blx	r3
 80050e0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80050e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 80050e8:	b005      	add	sp, #20
 80050ea:	bd30      	pop	{r4, r5, pc}

080050ec <_ZN8touchgfx8TextArea9setHeightEs>:

    virtual void setHeight(int16_t height)
 80050ec:	b530      	push	{r4, r5, lr}
 80050ee:	b085      	sub	sp, #20
    {
        Widget::setHeight(height);
        boundingArea = calculateBoundingArea();
 80050f0:	6803      	ldr	r3, [r0, #0]
    virtual void setHeight(int16_t height)
 80050f2:	4604      	mov	r4, r0
        rect.height = height;
 80050f4:	8141      	strh	r1, [r0, #10]
        boundingArea = calculateBoundingArea();
 80050f6:	466d      	mov	r5, sp
 80050f8:	4601      	mov	r1, r0
 80050fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050fe:	343c      	adds	r4, #60	@ 0x3c
 8005100:	4628      	mov	r0, r5
 8005102:	4798      	blx	r3
 8005104:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005108:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 800510c:	b005      	add	sp, #20
 800510e:	bd30      	pop	{r4, r5, pc}

08005110 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 8005110:	2200      	movs	r2, #0
 8005112:	8002      	strh	r2, [r0, #0]
 8005114:	8042      	strh	r2, [r0, #2]
 8005116:	8082      	strh	r2, [r0, #4]
 8005118:	80c2      	strh	r2, [r0, #6]

    virtual Rect getSolidRect() const
    {
        return Rect();
    }
 800511a:	4770      	bx	lr

0800511c <_ZN8touchgfx8TextArea8setAlphaEh>:
    /**
     * @copydoc Image::setAlpha
     */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 800511c:	f880 1036 	strb.w	r1, [r0, #54]	@ 0x36
    }
 8005120:	4770      	bx	lr

08005122 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
    {
        setX(x);
 8005122:	6803      	ldr	r3, [r0, #0]
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 8005124:	b570      	push	{r4, r5, r6, lr}
 8005126:	4604      	mov	r4, r0
        setX(x);
 8005128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 800512a:	4615      	mov	r5, r2
        setX(x);
 800512c:	4798      	blx	r3
        setBaselineY(baselineY);
 800512e:	6823      	ldr	r3, [r4, #0]
 8005130:	4620      	mov	r0, r4
 8005132:	4629      	mov	r1, r5
 8005134:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
    }
 8005136:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setBaselineY(baselineY);
 800513a:	4718      	bx	r3

0800513c <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
     * @see TextAreaWithOneWildcard, TextAreaWithTwoWildcards
     */
    virtual const Unicode::UnicodeChar* getWildcard2() const
    {
        return 0;
    }
 800513c:	2000      	movs	r0, #0
 800513e:	4770      	bx	lr

08005140 <_ZNK8touchgfx23TextAreaWithOneWildcard12getWildcard1Ev>:
    }

    virtual const Unicode::UnicodeChar* getWildcard1() const
    {
        return wc1;
    }
 8005140:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 8005142:	4770      	bx	lr

08005144 <_ZN16Screen_1ViewBase12updateEventsEv>:
     * Virtual Action Handlers
     */
    virtual void updateEvents()
    {
        // Override and implement this function in Screen_1
    }
 8005144:	4770      	bx	lr

08005146 <_ZN16Screen_1ViewBase10screenInitEv>:
    virtual void screenInit()
    {
        // Override and implement this function in Screen_1
    }
 8005146:	4770      	bx	lr

08005148 <_ZN16Screen_1ViewBase14checkI2CStatusEv>:
    virtual void checkI2CStatus()
    {
        // Override and implement this function in Screen_1
    }
 8005148:	4770      	bx	lr

0800514a <_ZN16Screen_1ViewBaseD1Ev>:
}

Screen_1ViewBase::~Screen_1ViewBase()
{

}
 800514a:	4770      	bx	lr

0800514c <_ZN16Screen_1ViewBase11setupScreenEv>:

void Screen_1ViewBase::setupScreen()
{
    transitionBegins();
 800514c:	6803      	ldr	r3, [r0, #0]
 800514e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005150:	4718      	bx	r3

08005152 <_ZN16Screen_1ViewBase15handleTickEventEv>:
void Screen_1ViewBase::handleTickEvent()
{
    //updateEventsInt
    //When every N tick call virtual function
    //Call updateEvents
    updateEvents();
 8005152:	6803      	ldr	r3, [r0, #0]
{
 8005154:	b510      	push	{r4, lr}
 8005156:	4604      	mov	r4, r0
    updateEvents();
 8005158:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800515a:	4798      	blx	r3

    //checkI2CStatusInt
    //When every N tick call virtual function
    //Call checkI2CStatus
    checkI2CStatus();
 800515c:	6823      	ldr	r3, [r4, #0]
 800515e:	4620      	mov	r0, r4
 8005160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8005162:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    checkI2CStatus();
 8005166:	4718      	bx	r3

08005168 <_ZN16Screen_1ViewBase16transitionBeginsEv>:
void Screen_1ViewBase::transitionBegins()
{
    //screenInitInt
    //When screen transition begins call virtual function
    //Call screenInit
    screenInit();
 8005168:	6803      	ldr	r3, [r0, #0]
 800516a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800516c:	4718      	bx	r3

0800516e <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 800516e:	4770      	bx	lr

08005170 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 8005170:	b510      	push	{r4, lr}
 8005172:	4604      	mov	r4, r0
 8005174:	214c      	movs	r1, #76	@ 0x4c
 8005176:	f025 f8a3 	bl	802a2c0 <_ZdlPvj>
 800517a:	4620      	mov	r0, r4
 800517c:	bd10      	pop	{r4, pc}

0800517e <_ZN16Screen_1ViewBaseD0Ev>:
Screen_1ViewBase::~Screen_1ViewBase()
 800517e:	b510      	push	{r4, lr}
 8005180:	4604      	mov	r4, r0
}
 8005182:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8005186:	f025 f89b 	bl	802a2c0 <_ZdlPvj>
 800518a:	4620      	mov	r0, r4
 800518c:	bd10      	pop	{r4, pc}

0800518e <_ZN16Screen_1ViewBase17changeScreenRightEv>:
{
 800518e:	b508      	push	{r3, lr}

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8005190:	f013 fdb6 	bl	8018d00 <_ZN8touchgfx11Application11getInstanceEv>
}
 8005194:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    application().gotoScreen_2ScreenNoTransition();
 8005198:	f7ff ba42 	b.w	8004620 <_ZN23FrontendApplicationBase30gotoScreen_2ScreenNoTransitionEv>

0800519c <_ZN16Screen_1ViewBase16changeScreenDownEv>:
{
 800519c:	b508      	push	{r3, lr}
 800519e:	f013 fdaf 	bl	8018d00 <_ZN8touchgfx11Application11getInstanceEv>
}
 80051a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    application().gotoScreen_1_StatisticsScreenNoTransition();
 80051a6:	f7ff ba1b 	b.w	80045e0 <_ZN23FrontendApplicationBase41gotoScreen_1_StatisticsScreenNoTransitionEv>

080051aa <_ZNK8touchgfx8Drawable17invalidateContentEv>:
        if (visible)
 80051aa:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 80051ae:	b112      	cbz	r2, 80051b6 <_ZNK8touchgfx8Drawable17invalidateContentEv+0xc>
            invalidate();
 80051b0:	6803      	ldr	r3, [r0, #0]
 80051b2:	695b      	ldr	r3, [r3, #20]
 80051b4:	4718      	bx	r3
    }
 80051b6:	4770      	bx	lr

080051b8 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>:
    virtual void invalidateContent() const
 80051b8:	b508      	push	{r3, lr}
        Widget::invalidateContent();
 80051ba:	f7ff fff6 	bl	80051aa <_ZNK8touchgfx8Drawable17invalidateContentEv>
    }
 80051be:	bd08      	pop	{r3, pc}

080051c0 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
 80051c0:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 80051c4:	b11a      	cbz	r2, 80051ce <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 80051c6:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
 80051ca:	b102      	cbz	r2, 80051ce <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 80051cc:	6018      	str	r0, [r3, #0]
        }
    }
 80051ce:	4770      	bx	lr

080051d0 <_ZN8touchgfx8TextArea12setBaselineYEs>:
        setY(baselineY - getTypedText().getFont()->getBaseline());
 80051d0:	6803      	ldr	r3, [r0, #0]
    virtual void setBaselineY(int16_t baselineY)
 80051d2:	b570      	push	{r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
 80051d4:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
    virtual void setBaselineY(int16_t baselineY)
 80051d6:	4604      	mov	r4, r0
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80051d8:	4b11      	ldr	r3, [pc, #68]	@ (8005220 <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
        setY(baselineY - getTypedText().getFont()->getBaseline());
 80051da:	b28d      	uxth	r5, r1
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	b92b      	cbnz	r3, 80051ec <_ZN8touchgfx8TextArea12setBaselineYEs+0x1c>
 80051e0:	4b10      	ldr	r3, [pc, #64]	@ (8005224 <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 80051e2:	216c      	movs	r1, #108	@ 0x6c
 80051e4:	4a10      	ldr	r2, [pc, #64]	@ (8005228 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 80051e6:	4811      	ldr	r0, [pc, #68]	@ (800522c <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 80051e8:	f025 f9e8 	bl	802a5bc <__assert_func>
        return typedTextId < numberOfTypedTexts;
 80051ec:	4910      	ldr	r1, [pc, #64]	@ (8005230 <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 80051ee:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 80051f0:	8809      	ldrh	r1, [r1, #0]
 80051f2:	4291      	cmp	r1, r2
 80051f4:	d803      	bhi.n	80051fe <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 80051f6:	4b0f      	ldr	r3, [pc, #60]	@ (8005234 <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 80051f8:	216d      	movs	r1, #109	@ 0x6d
 80051fa:	4a0b      	ldr	r2, [pc, #44]	@ (8005228 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 80051fc:	e7f3      	b.n	80051e6 <_ZN8touchgfx8TextArea12setBaselineYEs+0x16>
        return fonts[typedTexts[typedTextId].fontIdx];
 80051fe:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8005202:	4b0d      	ldr	r3, [pc, #52]	@ (8005238 <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800520a:	6803      	ldr	r3, [r0, #0]
 800520c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800520e:	4798      	blx	r3
 8005210:	1a29      	subs	r1, r5, r0
 8005212:	4633      	mov	r3, r6
 8005214:	4620      	mov	r0, r4
 8005216:	b209      	sxth	r1, r1
    }
 8005218:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
 800521c:	4718      	bx	r3
 800521e:	bf00      	nop
 8005220:	20029f30 	.word	0x20029f30
 8005224:	080402d0 	.word	0x080402d0
 8005228:	08040312 	.word	0x08040312
 800522c:	0804034d 	.word	0x0804034d
 8005230:	20029f34 	.word	0x20029f34
 8005234:	08040394 	.word	0x08040394
 8005238:	20029f38 	.word	0x20029f38

0800523c <_ZNK8touchgfx24TextAreaWithWildcardBase21calculateBoundingAreaEv>:

        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
 800523c:	2200      	movs	r2, #0
 800523e:	f04f 31ff 	mov.w	r1, #4294967295
              text(0)
 8005242:	6082      	str	r2, [r0, #8]
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
 8005244:	e9c0 2100 	strd	r2, r1, [r0]
    }
 8005248:	4770      	bx	lr

0800524a <_ZN8touchgfx8Drawable5setXYEss>:
        setX(x);
 800524a:	6803      	ldr	r3, [r0, #0]
    void setXY(int16_t x, int16_t y)
 800524c:	b570      	push	{r4, r5, r6, lr}
 800524e:	4604      	mov	r4, r0
        setX(x);
 8005250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    void setXY(int16_t x, int16_t y)
 8005252:	4615      	mov	r5, r2
        setX(x);
 8005254:	4798      	blx	r3
        setY(y);
 8005256:	6823      	ldr	r3, [r4, #0]
 8005258:	4620      	mov	r0, r4
 800525a:	4629      	mov	r1, r5
 800525c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    }
 800525e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(y);
 8005262:	4718      	bx	r3

08005264 <_ZN8touchgfx8Drawable11setPositionEssss>:
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8005264:	b570      	push	{r4, r5, r6, lr}
 8005266:	4604      	mov	r4, r0
 8005268:	461d      	mov	r5, r3
 800526a:	f9bd 6010 	ldrsh.w	r6, [sp, #16]
        setXY(x, y);
 800526e:	f7ff ffec 	bl	800524a <_ZN8touchgfx8Drawable5setXYEss>
        setWidth(width);
 8005272:	6823      	ldr	r3, [r4, #0]
 8005274:	4629      	mov	r1, r5
 8005276:	4620      	mov	r0, r4
 8005278:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800527a:	4798      	blx	r3
        setHeight(height);
 800527c:	6823      	ldr	r3, [r4, #0]
 800527e:	4631      	mov	r1, r6
 8005280:	4620      	mov	r0, r4
 8005282:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    }
 8005284:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setHeight(height);
 8005288:	4718      	bx	r3
	...

0800528c <_ZN8touchgfx6WidgetC1Ev>:
 800528c:	2200      	movs	r2, #0
 800528e:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8005292:	e9c0 2203 	strd	r2, r2, [r0, #12]
          nextSibling(0),
 8005296:	e9c0 2205 	strd	r2, r2, [r0, #20]
          cachedAbsX(0),
 800529a:	e9c0 2207 	strd	r2, r2, [r0, #28]
          touchable(false),
 800529e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80052a2:	8482      	strh	r2, [r0, #36]	@ 0x24
class Widget : public Drawable
 80052a4:	4a01      	ldr	r2, [pc, #4]	@ (80052ac <_ZN8touchgfx6WidgetC1Ev+0x20>)
 80052a6:	6002      	str	r2, [r0, #0]
 80052a8:	4770      	bx	lr
 80052aa:	bf00      	nop
 80052ac:	08040428 	.word	0x08040428

080052b0 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *
     * @param   bmp (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
 80052b0:	b538      	push	{r3, r4, r5, lr}
 80052b2:	4604      	mov	r4, r0
 80052b4:	460d      	mov	r5, r1
        : Widget(), bitmap(bmp), alpha(255)
 80052b6:	2226      	movs	r2, #38	@ 0x26
 80052b8:	2100      	movs	r1, #0
 80052ba:	f026 f931 	bl	802b520 <memset>
 80052be:	4620      	mov	r0, r4
 80052c0:	f7ff ffe4 	bl	800528c <_ZN8touchgfx6WidgetC1Ev>
 80052c4:	4b06      	ldr	r3, [pc, #24]	@ (80052e0 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x30>)
    {
        Image::setBitmap(bmp);
 80052c6:	4620      	mov	r0, r4
 80052c8:	4629      	mov	r1, r5
        : Widget(), bitmap(bmp), alpha(255)
 80052ca:	6023      	str	r3, [r4, #0]
 80052cc:	882b      	ldrh	r3, [r5, #0]
 80052ce:	84e3      	strh	r3, [r4, #38]	@ 0x26
 80052d0:	23ff      	movs	r3, #255	@ 0xff
 80052d2:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
        Image::setBitmap(bmp);
 80052d6:	f010 fd7b 	bl	8015dd0 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 80052da:	4620      	mov	r0, r4
 80052dc:	bd38      	pop	{r3, r4, r5, pc}
 80052de:	bf00      	nop
 80052e0:	08042650 	.word	0x08042650

080052e4 <_ZN8touchgfx8TextAreaC1Ev>:
    TextArea()
 80052e4:	b510      	push	{r4, lr}
 80052e6:	4604      	mov	r4, r0
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 80052e8:	2226      	movs	r2, #38	@ 0x26
 80052ea:	2100      	movs	r1, #0
 80052ec:	f026 f918 	bl	802b520 <memset>
 80052f0:	4620      	mov	r0, r4
 80052f2:	f7ff ffcb 	bl	800528c <_ZN8touchgfx6WidgetC1Ev>
 80052f6:	4b0a      	ldr	r3, [pc, #40]	@ (8005320 <_ZN8touchgfx8TextAreaC1Ev+0x3c>)
 80052f8:	f44f 027f 	mov.w	r2, #16711680	@ 0xff0000
    }
 80052fc:	4620      	mov	r0, r4
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 80052fe:	6023      	str	r3, [r4, #0]
        : typedTextId(id)
 8005300:	4b08      	ldr	r3, [pc, #32]	@ (8005324 <_ZN8touchgfx8TextAreaC1Ev+0x40>)
 8005302:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005304:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005308:	85a3      	strh	r3, [r4, #44]	@ 0x2c
 800530a:	2300      	movs	r3, #0
 800530c:	e9c4 320c 	strd	r3, r2, [r4, #48]	@ 0x30
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8005310:	f04f 32ff 	mov.w	r2, #4294967295
 8005314:	8723      	strh	r3, [r4, #56]	@ 0x38
 8005316:	63e3      	str	r3, [r4, #60]	@ 0x3c
              text(0)
 8005318:	e9c4 2310 	strd	r2, r3, [r4, #64]	@ 0x40
    }
 800531c:	bd10      	pop	{r4, pc}
 800531e:	bf00      	nop
 8005320:	0804247c 	.word	0x0804247c
 8005324:	0803f9a8 	.word	0x0803f9a8

08005328 <_ZN16Screen_1ViewBaseC1Ev>:
Screen_1ViewBase::Screen_1ViewBase()
 8005328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800532c:	4604      	mov	r4, r0
 800532e:	b08f      	sub	sp, #60	@ 0x3c
        : presenter(0)
 8005330:	2600      	movs	r6, #0
 8005332:	f015 f8fb 	bl	801a52c <_ZN8touchgfx6ScreenC1Ev>
 8005336:	4625      	mov	r5, r4
 8005338:	4b65      	ldr	r3, [pc, #404]	@ (80054d0 <_ZN16Screen_1ViewBaseC1Ev+0x1a8>)
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
 800533a:	2226      	movs	r2, #38	@ 0x26
 800533c:	4631      	mov	r1, r6
 800533e:	63e6      	str	r6, [r4, #60]	@ 0x3c
 8005340:	f104 0a6c 	add.w	sl, r4, #108	@ 0x6c
 8005344:	f845 3b40 	str.w	r3, [r5], #64
 8005348:	4628      	mov	r0, r5
 800534a:	f026 f8e9 	bl	802b520 <memset>
 800534e:	4628      	mov	r0, r5
 8005350:	f7ff ff9c 	bl	800528c <_ZN8touchgfx6WidgetC1Ev>
 8005354:	4b5f      	ldr	r3, [pc, #380]	@ (80054d4 <_ZN16Screen_1ViewBaseC1Ev+0x1ac>)
 8005356:	f104 0998 	add.w	r9, r4, #152	@ 0x98
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
 800535a:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 800535e:	6423      	str	r3, [r4, #64]	@ 0x40
 8005360:	23ff      	movs	r3, #255	@ 0xff
 8005362:	f104 0bc4 	add.w	fp, r4, #196	@ 0xc4
 8005366:	a90c      	add	r1, sp, #48	@ 0x30
 8005368:	f884 3066 	strb.w	r3, [r4, #102]	@ 0x66
 800536c:	4650      	mov	r0, sl
        : color(col)
 800536e:	66a6      	str	r6, [r4, #104]	@ 0x68
 8005370:	f504 7829 	add.w	r8, r4, #676	@ 0x2a4
 8005374:	f8ad 7030 	strh.w	r7, [sp, #48]	@ 0x30
 8005378:	f7ff ff9a 	bl	80052b0 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800537c:	a90c      	add	r1, sp, #48	@ 0x30
 800537e:	4648      	mov	r0, r9
 8005380:	f8ad 7030 	strh.w	r7, [sp, #48]	@ 0x30
 8005384:	f7ff ff94 	bl	80052b0 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
        : TextArea()
 8005388:	4658      	mov	r0, fp
 800538a:	f7ff ffab 	bl	80052e4 <_ZN8touchgfx8TextAreaC1Ev>
        : TextAreaWithWildcardBase(), wc1(0)
 800538e:	4b52      	ldr	r3, [pc, #328]	@ (80054d8 <_ZN16Screen_1ViewBaseC1Ev+0x1b0>)
 8005390:	a90c      	add	r1, sp, #48	@ 0x30
 8005392:	f8c4 610c 	str.w	r6, [r4, #268]	@ 0x10c
 8005396:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 800539a:	f504 7388 	add.w	r3, r4, #272	@ 0x110
 800539e:	f8ad 7030 	strh.w	r7, [sp, #48]	@ 0x30
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 80053a2:	1d27      	adds	r7, r4, #4
 80053a4:	4618      	mov	r0, r3
 80053a6:	9307      	str	r3, [sp, #28]
 80053a8:	f7ff ff82 	bl	80052b0 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80053ac:	f504 739e 	add.w	r3, r4, #316	@ 0x13c
 80053b0:	4618      	mov	r0, r3
 80053b2:	9302      	str	r3, [sp, #8]
 80053b4:	f7ff ff96 	bl	80052e4 <_ZN8touchgfx8TextAreaC1Ev>
 80053b8:	f504 73c2 	add.w	r3, r4, #388	@ 0x184
 80053bc:	4618      	mov	r0, r3
 80053be:	9303      	str	r3, [sp, #12]
 80053c0:	f7ff ff90 	bl	80052e4 <_ZN8touchgfx8TextAreaC1Ev>
 80053c4:	f504 73e6 	add.w	r3, r4, #460	@ 0x1cc
 80053c8:	4618      	mov	r0, r3
 80053ca:	9304      	str	r3, [sp, #16]
 80053cc:	f7ff ff8a 	bl	80052e4 <_ZN8touchgfx8TextAreaC1Ev>
 80053d0:	f504 7305 	add.w	r3, r4, #532	@ 0x214
 80053d4:	4618      	mov	r0, r3
 80053d6:	9305      	str	r3, [sp, #20]
 80053d8:	f7ff ff84 	bl	80052e4 <_ZN8touchgfx8TextAreaC1Ev>
 80053dc:	f504 7317 	add.w	r3, r4, #604	@ 0x25c
 80053e0:	4618      	mov	r0, r3
 80053e2:	9306      	str	r3, [sp, #24]
 80053e4:	f7ff ff7e 	bl	80052e4 <_ZN8touchgfx8TextAreaC1Ev>
 80053e8:	4640      	mov	r0, r8
 80053ea:	f00c fd9f 	bl	8011f2c <_ZN8touchgfx11BoxProgressC1Ev>
    __background.setPosition(0, 0, 272, 480);
 80053ee:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80053f2:	4632      	mov	r2, r6
 80053f4:	4628      	mov	r0, r5
 80053f6:	4631      	mov	r1, r6
 80053f8:	9300      	str	r3, [sp, #0]
 80053fa:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80053fe:	f7ff ff31 	bl	8005264 <_ZN8touchgfx8Drawable11setPositionEssss>
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
 8005402:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 8005406:	4629      	mov	r1, r5
 8005408:	4638      	mov	r0, r7
 800540a:	66a3      	str	r3, [r4, #104]	@ 0x68
        boundingArea = calculateBoundingArea();
 800540c:	ad08      	add	r5, sp, #32
 800540e:	f00c ffc7 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    image1.setXY(0, 0);
 8005412:	4632      	mov	r2, r6
 8005414:	4650      	mov	r0, sl
 8005416:	4631      	mov	r1, r6
 8005418:	f7ff ff17 	bl	800524a <_ZN8touchgfx8Drawable5setXYEss>
 800541c:	2306      	movs	r3, #6
    image1.setBitmap(touchgfx::Bitmap(BITMAP_FINALSCREEN_ID));
 800541e:	4650      	mov	r0, sl
 8005420:	a90c      	add	r1, sp, #48	@ 0x30
 8005422:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 8005426:	f010 fcd3 	bl	8015dd0 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800542a:	4651      	mov	r1, sl
 800542c:	4638      	mov	r0, r7
 800542e:	f00c ffb7 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Logo_BG.setXY(0, 0);
 8005432:	4632      	mov	r2, r6
 8005434:	4648      	mov	r0, r9
 8005436:	4631      	mov	r1, r6
 8005438:	f7ff ff07 	bl	800524a <_ZN8touchgfx8Drawable5setXYEss>
 800543c:	f04f 0301 	mov.w	r3, #1
    Logo_BG.setBitmap(touchgfx::Bitmap(BITMAP_BG_ID));
 8005440:	4648      	mov	r0, r9
 8005442:	a90c      	add	r1, sp, #48	@ 0x30
 8005444:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 8005448:	f010 fcc2 	bl	8015dd0 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800544c:	4649      	mov	r1, r9
 800544e:	4638      	mov	r0, r7
 8005450:	f00c ffa6 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    EV_Text.setPosition(7, 38, 230, 133);
 8005454:	2385      	movs	r3, #133	@ 0x85
 8005456:	2226      	movs	r2, #38	@ 0x26
 8005458:	2107      	movs	r1, #7
 800545a:	4658      	mov	r0, fp
 800545c:	9300      	str	r3, [sp, #0]
 800545e:	23e6      	movs	r3, #230	@ 0xe6
        color = newColor;
 8005460:	f8df a090 	ldr.w	sl, [pc, #144]	@ 80054f4 <_ZN16Screen_1ViewBaseC1Ev+0x1cc>
 8005464:	f7ff fefe 	bl	8005264 <_ZN8touchgfx8Drawable11setPositionEssss>
        boundingArea = calculateBoundingArea();
 8005468:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 800546c:	4659      	mov	r1, fp
 800546e:	4628      	mov	r0, r5
 8005470:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005474:	f504 7980 	add.w	r9, r4, #256	@ 0x100
        color = newColor;
 8005478:	f8c4 a0f4 	str.w	sl, [r4, #244]	@ 0xf4
        linespace = space;
 800547c:	f8a4 60f8 	strh.w	r6, [r4, #248]	@ 0xf8
        boundingArea = calculateBoundingArea();
 8005480:	4798      	blx	r3
        rotation = textRotation;
 8005482:	f04f 0301 	mov.w	r3, #1
        boundingArea = calculateBoundingArea();
 8005486:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800548a:	e889 0007 	stmia.w	r9, {r0, r1, r2}
        rotation = textRotation;
 800548e:	f884 30fc 	strb.w	r3, [r4, #252]	@ 0xfc
        boundingArea = calculateBoundingArea();
 8005492:	4659      	mov	r1, fp
 8005494:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 8005498:	4628      	mov	r0, r5
 800549a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800549e:	4798      	blx	r3
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80054a0:	4b0e      	ldr	r3, [pc, #56]	@ (80054dc <_ZN16Screen_1ViewBaseC1Ev+0x1b4>)
 80054a2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	e889 0007 	stmia.w	r9, {r0, r1, r2}
    Unicode::snprintf(EV_TextBuffer, EV_TEXT_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_JNFW).getText());
 80054ac:	f504 7962 	add.w	r9, r4, #904	@ 0x388
 80054b0:	b92b      	cbnz	r3, 80054be <_ZN16Screen_1ViewBaseC1Ev+0x196>
 80054b2:	4b0b      	ldr	r3, [pc, #44]	@ (80054e0 <_ZN16Screen_1ViewBaseC1Ev+0x1b8>)
 80054b4:	2160      	movs	r1, #96	@ 0x60
 80054b6:	4a0b      	ldr	r2, [pc, #44]	@ (80054e4 <_ZN16Screen_1ViewBaseC1Ev+0x1bc>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 80054b8:	480b      	ldr	r0, [pc, #44]	@ (80054e8 <_ZN16Screen_1ViewBaseC1Ev+0x1c0>)
 80054ba:	f025 f87f 	bl	802a5bc <__assert_func>
        return typedTextId < numberOfTypedTexts;
 80054be:	4b0b      	ldr	r3, [pc, #44]	@ (80054ec <_ZN16Screen_1ViewBaseC1Ev+0x1c4>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 80054c0:	881b      	ldrh	r3, [r3, #0]
 80054c2:	2b1e      	cmp	r3, #30
 80054c4:	d818      	bhi.n	80054f8 <_ZN16Screen_1ViewBaseC1Ev+0x1d0>
 80054c6:	4b0a      	ldr	r3, [pc, #40]	@ (80054f0 <_ZN16Screen_1ViewBaseC1Ev+0x1c8>)
 80054c8:	2161      	movs	r1, #97	@ 0x61
 80054ca:	4a06      	ldr	r2, [pc, #24]	@ (80054e4 <_ZN16Screen_1ViewBaseC1Ev+0x1bc>)
 80054cc:	e7f4      	b.n	80054b8 <_ZN16Screen_1ViewBaseC1Ev+0x190>
 80054ce:	bf00      	nop
 80054d0:	08040520 	.word	0x08040520
 80054d4:	0804250c 	.word	0x0804250c
 80054d8:	08040490 	.word	0x08040490
 80054dc:	20029f30 	.word	0x20029f30
 80054e0:	080402d0 	.word	0x080402d0
 80054e4:	080403d2 	.word	0x080403d2
 80054e8:	0804034d 	.word	0x0804034d
 80054ec:	20029f34 	.word	0x20029f34
 80054f0:	08040394 	.word	0x08040394
 80054f4:	ffc1cfdd 	.word	0xffc1cfdd
        return texts->getText(typedTextId);
 80054f8:	4b8f      	ldr	r3, [pc, #572]	@ (8005738 <_ZN16Screen_1ViewBaseC1Ev+0x410>)
 80054fa:	211e      	movs	r1, #30
 80054fc:	6818      	ldr	r0, [r3, #0]
 80054fe:	f002 fe87 	bl	8008210 <_ZNK8touchgfx5Texts7getTextEt>
 8005502:	4a8e      	ldr	r2, [pc, #568]	@ (800573c <_ZN16Screen_1ViewBaseC1Ev+0x414>)
 8005504:	4603      	mov	r3, r0
 8005506:	210a      	movs	r1, #10
 8005508:	4648      	mov	r0, r9
 800550a:	f017 f91d 	bl	801c748 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        : typedTextId(id)
 800550e:	231f      	movs	r3, #31
        wc1 = value;
 8005510:	f8c4 910c 	str.w	r9, [r4, #268]	@ 0x10c
    EV_Text.setTypedText(touchgfx::TypedText(T___SINGLEUSE_GAAU));
 8005514:	a90c      	add	r1, sp, #48	@ 0x30
 8005516:	f8df 922c 	ldr.w	r9, [pc, #556]	@ 8005744 <_ZN16Screen_1ViewBaseC1Ev+0x41c>
 800551a:	4658      	mov	r0, fp
 800551c:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 8005520:	f8cd 9030 	str.w	r9, [sp, #48]	@ 0x30
 8005524:	f010 fa28 	bl	8015978 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8005528:	4659      	mov	r1, fp
 800552a:	4638      	mov	r0, r7
 800552c:	f00c ff38 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8005530:	f04f 0b0c 	mov.w	fp, #12
    Banner.setXY(0, 0);
 8005534:	4632      	mov	r2, r6
 8005536:	4631      	mov	r1, r6
 8005538:	9807      	ldr	r0, [sp, #28]
 800553a:	f7ff fe86 	bl	800524a <_ZN8touchgfx8Drawable5setXYEss>
    Banner.setBitmap(touchgfx::Bitmap(BITMAP_SCREEN_1_ID));
 800553e:	a90c      	add	r1, sp, #48	@ 0x30
 8005540:	9807      	ldr	r0, [sp, #28]
 8005542:	f8ad b030 	strh.w	fp, [sp, #48]	@ 0x30
 8005546:	f010 fc43 	bl	8015dd0 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800554a:	9907      	ldr	r1, [sp, #28]
 800554c:	4638      	mov	r0, r7
        visible = vis;
 800554e:	f884 6135 	strb.w	r6, [r4, #309]	@ 0x135
 8005552:	f00c ff25 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    ER_Text.setPosition(165, 32, 107, 106);
 8005556:	236a      	movs	r3, #106	@ 0x6a
 8005558:	2220      	movs	r2, #32
 800555a:	9802      	ldr	r0, [sp, #8]
 800555c:	9300      	str	r3, [sp, #0]
 800555e:	21a5      	movs	r1, #165	@ 0xa5
 8005560:	236b      	movs	r3, #107	@ 0x6b
 8005562:	f7ff fe7f 	bl	8005264 <_ZN8touchgfx8Drawable11setPositionEssss>
        boundingArea = calculateBoundingArea();
 8005566:	9902      	ldr	r1, [sp, #8]
 8005568:	4628      	mov	r0, r5
        color = newColor;
 800556a:	f8c4 a16c 	str.w	sl, [r4, #364]	@ 0x16c
        linespace = space;
 800556e:	f8a4 6170 	strh.w	r6, [r4, #368]	@ 0x170
        boundingArea = calculateBoundingArea();
 8005572:	f00f ff67 	bl	8015444 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8005576:	f504 73bc 	add.w	r3, r4, #376	@ 0x178
 800557a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800557e:	9307      	str	r3, [sp, #28]
 8005580:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        rotation = textRotation;
 8005584:	f04f 0301 	mov.w	r3, #1
        boundingArea = calculateBoundingArea();
 8005588:	9902      	ldr	r1, [sp, #8]
 800558a:	4628      	mov	r0, r5
        rotation = textRotation;
 800558c:	f884 3174 	strb.w	r3, [r4, #372]	@ 0x174
        boundingArea = calculateBoundingArea();
 8005590:	f00f ff58 	bl	8015444 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8005594:	9b07      	ldr	r3, [sp, #28]
 8005596:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800559a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800559e:	2315      	movs	r3, #21
    ER_Text.setTypedText(touchgfx::TypedText(T___SINGLEUSE_YYMQ));
 80055a0:	a90c      	add	r1, sp, #48	@ 0x30
 80055a2:	9802      	ldr	r0, [sp, #8]
 80055a4:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 80055a8:	f8cd 9030 	str.w	r9, [sp, #48]	@ 0x30
 80055ac:	f010 f9e4 	bl	8015978 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80055b0:	9902      	ldr	r1, [sp, #8]
 80055b2:	4638      	mov	r0, r7
 80055b4:	f00c fef4 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Bar_Text_0.setXY(158, 80);
 80055b8:	2250      	movs	r2, #80	@ 0x50
 80055ba:	9803      	ldr	r0, [sp, #12]
 80055bc:	219e      	movs	r1, #158	@ 0x9e
 80055be:	f7ff fe44 	bl	800524a <_ZN8touchgfx8Drawable5setXYEss>
        boundingArea = calculateBoundingArea();
 80055c2:	9903      	ldr	r1, [sp, #12]
 80055c4:	4628      	mov	r0, r5
        color = newColor;
 80055c6:	f8c4 a1b4 	str.w	sl, [r4, #436]	@ 0x1b4
        linespace = space;
 80055ca:	f8a4 61b8 	strh.w	r6, [r4, #440]	@ 0x1b8
        boundingArea = calculateBoundingArea();
 80055ce:	f00f ff39 	bl	8015444 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 80055d2:	f504 73e0 	add.w	r3, r4, #448	@ 0x1c0
 80055d6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80055da:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80055de:	2303      	movs	r3, #3
    Bar_Text_0.setTypedText(touchgfx::TypedText(T___SINGLEUSE_OS4M));
 80055e0:	a90c      	add	r1, sp, #48	@ 0x30
 80055e2:	9803      	ldr	r0, [sp, #12]
 80055e4:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 80055e8:	f8cd 9030 	str.w	r9, [sp, #48]	@ 0x30
 80055ec:	f010 f9c4 	bl	8015978 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80055f0:	9903      	ldr	r1, [sp, #12]
 80055f2:	4638      	mov	r0, r7
 80055f4:	f884 61a9 	strb.w	r6, [r4, #425]	@ 0x1a9
 80055f8:	f00c fed2 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Bar_Text_0_10.setXY(253, 80);
 80055fc:	2250      	movs	r2, #80	@ 0x50
 80055fe:	9804      	ldr	r0, [sp, #16]
 8005600:	21fd      	movs	r1, #253	@ 0xfd
 8005602:	f7ff fe22 	bl	800524a <_ZN8touchgfx8Drawable5setXYEss>
 8005606:	9904      	ldr	r1, [sp, #16]
 8005608:	4628      	mov	r0, r5
        color = newColor;
 800560a:	f8c4 a1fc 	str.w	sl, [r4, #508]	@ 0x1fc
        linespace = space;
 800560e:	f8a4 6200 	strh.w	r6, [r4, #512]	@ 0x200
        boundingArea = calculateBoundingArea();
 8005612:	f00f ff17 	bl	8015444 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8005616:	f504 7302 	add.w	r3, r4, #520	@ 0x208
 800561a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800561e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005622:	2302      	movs	r3, #2
    Bar_Text_0_10.setTypedText(touchgfx::TypedText(T___SINGLEUSE_JU2A));
 8005624:	a90c      	add	r1, sp, #48	@ 0x30
 8005626:	9804      	ldr	r0, [sp, #16]
 8005628:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 800562c:	f8cd 9030 	str.w	r9, [sp, #48]	@ 0x30
 8005630:	f010 f9a2 	bl	8015978 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8005634:	9904      	ldr	r1, [sp, #16]
 8005636:	4638      	mov	r0, r7
 8005638:	f884 61f1 	strb.w	r6, [r4, #497]	@ 0x1f1
 800563c:	f00c feb0 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Kev_Text.setPosition(167, 124, 62, 12);
 8005640:	233e      	movs	r3, #62	@ 0x3e
 8005642:	227c      	movs	r2, #124	@ 0x7c
 8005644:	9805      	ldr	r0, [sp, #20]
 8005646:	21a7      	movs	r1, #167	@ 0xa7
 8005648:	f8cd b000 	str.w	fp, [sp]
 800564c:	f7ff fe0a 	bl	8005264 <_ZN8touchgfx8Drawable11setPositionEssss>
 8005650:	9905      	ldr	r1, [sp, #20]
 8005652:	4628      	mov	r0, r5
        color = newColor;
 8005654:	f8c4 a244 	str.w	sl, [r4, #580]	@ 0x244
        linespace = space;
 8005658:	f8a4 6248 	strh.w	r6, [r4, #584]	@ 0x248
        boundingArea = calculateBoundingArea();
 800565c:	f00f fef2 	bl	8015444 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8005660:	f504 7314 	add.w	r3, r4, #592	@ 0x250
 8005664:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005668:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800566c:	2314      	movs	r3, #20
    Kev_Text.setTypedText(touchgfx::TypedText(T___SINGLEUSE_J2TV));
 800566e:	a90c      	add	r1, sp, #48	@ 0x30
 8005670:	9805      	ldr	r0, [sp, #20]
 8005672:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 8005676:	f8cd 9030 	str.w	r9, [sp, #48]	@ 0x30
 800567a:	f010 f97d 	bl	8015978 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800567e:	9905      	ldr	r1, [sp, #20]
 8005680:	4638      	mov	r0, r7
 8005682:	f884 6239 	strb.w	r6, [r4, #569]	@ 0x239
 8005686:	f00c fe8b 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    PC_Text.setPosition(10, 97, 144, 13);
 800568a:	230d      	movs	r3, #13
 800568c:	2261      	movs	r2, #97	@ 0x61
 800568e:	9806      	ldr	r0, [sp, #24]
 8005690:	9300      	str	r3, [sp, #0]
 8005692:	210a      	movs	r1, #10
 8005694:	2390      	movs	r3, #144	@ 0x90
 8005696:	f7ff fde5 	bl	8005264 <_ZN8touchgfx8Drawable11setPositionEssss>
 800569a:	9906      	ldr	r1, [sp, #24]
 800569c:	4628      	mov	r0, r5
        color = newColor;
 800569e:	f8c4 a28c 	str.w	sl, [r4, #652]	@ 0x28c
        linespace = space;
 80056a2:	f8a4 6290 	strh.w	r6, [r4, #656]	@ 0x290
        boundingArea = calculateBoundingArea();
 80056a6:	f00f fecd 	bl	8015444 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 80056aa:	f504 7326 	add.w	r3, r4, #664	@ 0x298
 80056ae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80056b2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80056b6:	230b      	movs	r3, #11
    PC_Text.setTypedText(touchgfx::TypedText(T___SINGLEUSE_HC5R));
 80056b8:	a90c      	add	r1, sp, #48	@ 0x30
 80056ba:	9806      	ldr	r0, [sp, #24]
 80056bc:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 80056c0:	f8cd 9030 	str.w	r9, [sp, #48]	@ 0x30
 80056c4:	f010 f958 	bl	8015978 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80056c8:	9906      	ldr	r1, [sp, #24]
 80056ca:	4638      	mov	r0, r7
 80056cc:	f884 6281 	strb.w	r6, [r4, #641]	@ 0x281
 80056d0:	f00c fe66 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    PC_Progress.setXY(161, 100);
 80056d4:	4640      	mov	r0, r8
 80056d6:	2264      	movs	r2, #100	@ 0x64
 80056d8:	21a1      	movs	r1, #161	@ 0xa1
 80056da:	f7ff fdb6 	bl	800524a <_ZN8touchgfx8Drawable5setXYEss>
    PC_Progress.setProgressIndicatorPosition(0, 0, 100, 10);
 80056de:	230a      	movs	r3, #10
 80056e0:	4632      	mov	r2, r6
 80056e2:	4631      	mov	r1, r6
 80056e4:	4640      	mov	r0, r8
 80056e6:	9300      	str	r3, [sp, #0]
 80056e8:	2364      	movs	r3, #100	@ 0x64
 80056ea:	f00c fb78 	bl	8011dde <_ZN8touchgfx11BoxProgress28setProgressIndicatorPositionEssss>
    PC_Progress.setRange(0, 8680);
 80056ee:	4633      	mov	r3, r6
 80056f0:	f242 12e8 	movw	r2, #8680	@ 0x21e8
 80056f4:	4631      	mov	r1, r6
 80056f6:	4640      	mov	r0, r8
 80056f8:	9600      	str	r6, [sp, #0]
 80056fa:	f00c fc8f 	bl	801201c <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>
    PC_Progress.setDirection(touchgfx::AbstractDirectionProgress::RIGHT);
 80056fe:	4631      	mov	r1, r6
 8005700:	4640      	mov	r0, r8
 8005702:	f00c fc6a 	bl	8011fda <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
    PC_Progress.setBackground(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BOXPROGRESS_NORMAL_TINY_ID));
 8005706:	a90c      	add	r1, sp, #48	@ 0x30
 8005708:	4640      	mov	r0, r8
 800570a:	f8ad 6030 	strh.w	r6, [sp, #48]	@ 0x30
 800570e:	f00c fdd9 	bl	80122c4 <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
    PC_Progress.setColor(touchgfx::Color::getColorFromRGB(255, 114, 118));
 8005712:	4640      	mov	r0, r8
 8005714:	490a      	ldr	r1, [pc, #40]	@ (8005740 <_ZN16Screen_1ViewBaseC1Ev+0x418>)
 8005716:	f00c fb4c 	bl	8011db2 <_ZN8touchgfx11BoxProgress8setColorENS_9colortypeE>
    PC_Progress.setValue(8680);
 800571a:	4640      	mov	r0, r8
 800571c:	f242 11e8 	movw	r1, #8680	@ 0x21e8
 8005720:	f00c fb75 	bl	8011e0e <_ZN8touchgfx11BoxProgress8setValueEi>
 8005724:	4638      	mov	r0, r7
 8005726:	4641      	mov	r1, r8
 8005728:	f884 62c9 	strb.w	r6, [r4, #713]	@ 0x2c9
 800572c:	f00c fe38 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8005730:	4620      	mov	r0, r4
 8005732:	b00f      	add	sp, #60	@ 0x3c
 8005734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005738:	20029f3c 	.word	0x20029f3c
 800573c:	0804041d 	.word	0x0804041d
 8005740:	ffff7276 	.word	0xffff7276
 8005744:	0803f9a8 	.word	0x0803f9a8

08005748 <_ZN30Screen_1_LP_StatisticsViewBase10screenInitEv>:
     * Virtual Action Handlers
     */
    virtual void screenInit()
    {
        // Override and implement this function in Screen_1_LP_Statistics
    }
 8005748:	4770      	bx	lr

0800574a <_ZN30Screen_1_LP_StatisticsViewBase14readLpCountersEv>:
    virtual void readLpCounters()
    {
        // Override and implement this function in Screen_1_LP_Statistics
    }
 800574a:	4770      	bx	lr

0800574c <_ZN30Screen_1_LP_StatisticsViewBase14checkI2CStatusEv>:
    virtual void checkI2CStatus()
    {
        // Override and implement this function in Screen_1_LP_Statistics
    }
 800574c:	4770      	bx	lr

0800574e <_ZN30Screen_1_LP_StatisticsViewBaseD1Ev>:
}

Screen_1_LP_StatisticsViewBase::~Screen_1_LP_StatisticsViewBase()
{

}
 800574e:	4770      	bx	lr

08005750 <_ZN30Screen_1_LP_StatisticsViewBase11setupScreenEv>:

void Screen_1_LP_StatisticsViewBase::setupScreen()
{
    transitionBegins();
 8005750:	6803      	ldr	r3, [r0, #0]
 8005752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005754:	4718      	bx	r3

08005756 <_ZN30Screen_1_LP_StatisticsViewBase16transitionBeginsEv>:
void Screen_1_LP_StatisticsViewBase::transitionBegins()
{
    //screenInitInt
    //When screen transition begins call virtual function
    //Call screenInit
    screenInit();
 8005756:	6803      	ldr	r3, [r0, #0]
 8005758:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800575a:	4718      	bx	r3

0800575c <_ZN30Screen_1_LP_StatisticsViewBase15handleTickEventEv>:
void Screen_1_LP_StatisticsViewBase::handleTickEvent()
{
    //readLpCountersInt
    //When every N tick call virtual function
    //Call readLpCounters
    readLpCounters();
 800575c:	6803      	ldr	r3, [r0, #0]
{
 800575e:	b510      	push	{r4, lr}
 8005760:	4604      	mov	r4, r0
    readLpCounters();
 8005762:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005764:	4798      	blx	r3

    //checkI2CStatusInt
    //When every N tick call virtual function
    //Call checkI2CStatus
    checkI2CStatus();
 8005766:	6823      	ldr	r3, [r4, #0]
 8005768:	4620      	mov	r0, r4
 800576a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 800576c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    checkI2CStatus();
 8005770:	4718      	bx	r3

08005772 <_ZN30Screen_1_LP_StatisticsViewBaseD0Ev>:
Screen_1_LP_StatisticsViewBase::~Screen_1_LP_StatisticsViewBase()
 8005772:	b510      	push	{r4, lr}
 8005774:	4604      	mov	r4, r0
}
 8005776:	f240 414c 	movw	r1, #1100	@ 0x44c
 800577a:	f024 fda1 	bl	802a2c0 <_ZdlPvj>
 800577e:	4620      	mov	r0, r4
 8005780:	bd10      	pop	{r4, pc}

08005782 <_ZN30Screen_1_LP_StatisticsViewBase16changeScreenLeftEv>:

void Screen_1_LP_StatisticsViewBase::changeScreenLeft()
{
 8005782:	b508      	push	{r3, lr}

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8005784:	f013 fabc 	bl	8018d00 <_ZN8touchgfx11Application11getInstanceEv>
    //changeScreenLeft
    //When changeScreenLeft is called change screen to Screen_1_Statistics
    //Go to Screen_1_Statistics with no screen transition
    application().gotoScreen_1_StatisticsScreenNoTransition();
}
 8005788:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    application().gotoScreen_1_StatisticsScreenNoTransition();
 800578c:	f7fe bf28 	b.w	80045e0 <_ZN23FrontendApplicationBase41gotoScreen_1_StatisticsScreenNoTransitionEv>

08005790 <_ZN8touchgfx3BoxC1Ev>:
    Box()
 8005790:	b510      	push	{r4, lr}
 8005792:	4604      	mov	r4, r0
        : Widget(), alpha(255), color(0)
 8005794:	2226      	movs	r2, #38	@ 0x26
 8005796:	2100      	movs	r1, #0
 8005798:	f025 fec2 	bl	802b520 <memset>
 800579c:	4620      	mov	r0, r4
 800579e:	f7ff fd75 	bl	800528c <_ZN8touchgfx6WidgetC1Ev>
 80057a2:	4b04      	ldr	r3, [pc, #16]	@ (80057b4 <_ZN8touchgfx3BoxC1Ev+0x24>)
    }
 80057a4:	4620      	mov	r0, r4
        : Widget(), alpha(255), color(0)
 80057a6:	6023      	str	r3, [r4, #0]
 80057a8:	23ff      	movs	r3, #255	@ 0xff
 80057aa:	f884 3026 	strb.w	r3, [r4, #38]	@ 0x26
 80057ae:	2300      	movs	r3, #0
 80057b0:	62a3      	str	r3, [r4, #40]	@ 0x28
    }
 80057b2:	bd10      	pop	{r4, pc}
 80057b4:	0804250c 	.word	0x0804250c

080057b8 <_ZN8touchgfx13BoxWithBorderC1Ev>:
 * BoxWithBorder will function just like a Box.
 */
class BoxWithBorder : public Box
{
public:
    BoxWithBorder()
 80057b8:	b510      	push	{r4, lr}
 80057ba:	4604      	mov	r4, r0
        : Box(), borderColor(0), borderSize(0)
 80057bc:	f7ff ffe8 	bl	8005790 <_ZN8touchgfx3BoxC1Ev>
 80057c0:	4b03      	ldr	r3, [pc, #12]	@ (80057d0 <_ZN8touchgfx13BoxWithBorderC1Ev+0x18>)
    {
    }
 80057c2:	4620      	mov	r0, r4
        : Box(), borderColor(0), borderSize(0)
 80057c4:	6023      	str	r3, [r4, #0]
 80057c6:	2300      	movs	r3, #0
 80057c8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80057ca:	8623      	strh	r3, [r4, #48]	@ 0x30
    }
 80057cc:	bd10      	pop	{r4, pc}
 80057ce:	bf00      	nop
 80057d0:	080425e8 	.word	0x080425e8

080057d4 <_ZN30Screen_1_LP_StatisticsViewBaseC1Ev>:
Screen_1_LP_StatisticsViewBase::Screen_1_LP_StatisticsViewBase()
 80057d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057d8:	4604      	mov	r4, r0
 80057da:	b09b      	sub	sp, #108	@ 0x6c
 80057dc:	2600      	movs	r6, #0
 80057de:	f014 fea5 	bl	801a52c <_ZN8touchgfx6ScreenC1Ev>
 80057e2:	4627      	mov	r7, r4
 80057e4:	4bde      	ldr	r3, [pc, #888]	@ (8005b60 <_ZN30Screen_1_LP_StatisticsViewBaseC1Ev+0x38c>)
 80057e6:	63e6      	str	r6, [r4, #60]	@ 0x3c
 80057e8:	f64f 75ff 	movw	r5, #65535	@ 0xffff
 80057ec:	f847 3b40 	str.w	r3, [r7], #64
 80057f0:	4638      	mov	r0, r7
 80057f2:	f7ff ffcd 	bl	8005790 <_ZN8touchgfx3BoxC1Ev>
 80057f6:	f104 036c 	add.w	r3, r4, #108	@ 0x6c
 80057fa:	f204 4b04 	addw	fp, r4, #1028	@ 0x404
        color = newColor;
 80057fe:	f04f 497f 	mov.w	r9, #4278190080	@ 0xff000000
 8005802:	4618      	mov	r0, r3
 8005804:	9304      	str	r3, [sp, #16]
 8005806:	f7ff ffd7 	bl	80057b8 <_ZN8touchgfx13BoxWithBorderC1Ev>
 800580a:	f104 03a0 	add.w	r3, r4, #160	@ 0xa0
    Counter_1.setPosition(136, 160, 68, 80);
 800580e:	f04f 0a50 	mov.w	sl, #80	@ 0x50
     *
     * @see getBorderSize
     */
    void setBorderSize(uint16_t size)
    {
        borderSize = size;
 8005812:	f04f 0801 	mov.w	r8, #1
Screen_1_LP_StatisticsViewBase::Screen_1_LP_StatisticsViewBase()
 8005816:	4618      	mov	r0, r3
 8005818:	9305      	str	r3, [sp, #20]
 800581a:	f7ff ffcd 	bl	80057b8 <_ZN8touchgfx13BoxWithBorderC1Ev>
 800581e:	f104 03d4 	add.w	r3, r4, #212	@ 0xd4
 8005822:	4618      	mov	r0, r3
 8005824:	9306      	str	r3, [sp, #24]
 8005826:	f7ff ffc7 	bl	80057b8 <_ZN8touchgfx13BoxWithBorderC1Ev>
 800582a:	f504 7384 	add.w	r3, r4, #264	@ 0x108
 800582e:	4618      	mov	r0, r3
 8005830:	9307      	str	r3, [sp, #28]
 8005832:	f7ff ffc1 	bl	80057b8 <_ZN8touchgfx13BoxWithBorderC1Ev>
 8005836:	f504 739e 	add.w	r3, r4, #316	@ 0x13c
 800583a:	a918      	add	r1, sp, #96	@ 0x60
 800583c:	f8ad 5060 	strh.w	r5, [sp, #96]	@ 0x60
 8005840:	4618      	mov	r0, r3
 8005842:	9302      	str	r3, [sp, #8]
 8005844:	f7ff fd34 	bl	80052b0 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8005848:	f504 73b4 	add.w	r3, r4, #360	@ 0x168
 800584c:	a918      	add	r1, sp, #96	@ 0x60
 800584e:	f8ad 5060 	strh.w	r5, [sp, #96]	@ 0x60
 8005852:	4618      	mov	r0, r3
 8005854:	9303      	str	r3, [sp, #12]
 8005856:	f7ff fd2b 	bl	80052b0 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800585a:	f504 73ca 	add.w	r3, r4, #404	@ 0x194
 800585e:	4618      	mov	r0, r3
 8005860:	9308      	str	r3, [sp, #32]
 8005862:	f7ff ffa9 	bl	80057b8 <_ZN8touchgfx13BoxWithBorderC1Ev>
 8005866:	f504 73e4 	add.w	r3, r4, #456	@ 0x1c8
 800586a:	4618      	mov	r0, r3
 800586c:	9309      	str	r3, [sp, #36]	@ 0x24
 800586e:	f7ff ffa3 	bl	80057b8 <_ZN8touchgfx13BoxWithBorderC1Ev>
 8005872:	f504 73fe 	add.w	r3, r4, #508	@ 0x1fc
 8005876:	4618      	mov	r0, r3
 8005878:	930a      	str	r3, [sp, #40]	@ 0x28
 800587a:	f7ff ff9d 	bl	80057b8 <_ZN8touchgfx13BoxWithBorderC1Ev>
 800587e:	f504 730c 	add.w	r3, r4, #560	@ 0x230
 8005882:	4618      	mov	r0, r3
 8005884:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005886:	f7ff ff97 	bl	80057b8 <_ZN8touchgfx13BoxWithBorderC1Ev>
 800588a:	f504 7319 	add.w	r3, r4, #612	@ 0x264
 800588e:	4618      	mov	r0, r3
 8005890:	930c      	str	r3, [sp, #48]	@ 0x30
 8005892:	f7ff ff91 	bl	80057b8 <_ZN8touchgfx13BoxWithBorderC1Ev>
 8005896:	f504 7326 	add.w	r3, r4, #664	@ 0x298
 800589a:	4618      	mov	r0, r3
 800589c:	930d      	str	r3, [sp, #52]	@ 0x34
 800589e:	f7ff ff8b 	bl	80057b8 <_ZN8touchgfx13BoxWithBorderC1Ev>
 80058a2:	f504 7333 	add.w	r3, r4, #716	@ 0x2cc
 80058a6:	4618      	mov	r0, r3
 80058a8:	930e      	str	r3, [sp, #56]	@ 0x38
 80058aa:	f7ff ff85 	bl	80057b8 <_ZN8touchgfx13BoxWithBorderC1Ev>
 80058ae:	f504 7340 	add.w	r3, r4, #768	@ 0x300
 80058b2:	4618      	mov	r0, r3
 80058b4:	930f      	str	r3, [sp, #60]	@ 0x3c
 80058b6:	f7ff ff7f 	bl	80057b8 <_ZN8touchgfx13BoxWithBorderC1Ev>
 80058ba:	f504 734d 	add.w	r3, r4, #820	@ 0x334
 80058be:	4618      	mov	r0, r3
 80058c0:	9310      	str	r3, [sp, #64]	@ 0x40
 80058c2:	f7ff ff79 	bl	80057b8 <_ZN8touchgfx13BoxWithBorderC1Ev>
 80058c6:	f504 735a 	add.w	r3, r4, #872	@ 0x368
 80058ca:	4618      	mov	r0, r3
 80058cc:	9311      	str	r3, [sp, #68]	@ 0x44
 80058ce:	f7ff ff73 	bl	80057b8 <_ZN8touchgfx13BoxWithBorderC1Ev>
 80058d2:	f504 7367 	add.w	r3, r4, #924	@ 0x39c
 80058d6:	4618      	mov	r0, r3
 80058d8:	9312      	str	r3, [sp, #72]	@ 0x48
 80058da:	f7ff ff6d 	bl	80057b8 <_ZN8touchgfx13BoxWithBorderC1Ev>
 80058de:	f504 7374 	add.w	r3, r4, #976	@ 0x3d0
 80058e2:	4618      	mov	r0, r3
 80058e4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80058e6:	f7ff ff67 	bl	80057b8 <_ZN8touchgfx13BoxWithBorderC1Ev>
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 80058ea:	4631      	mov	r1, r6
 80058ec:	2226      	movs	r2, #38	@ 0x26
 80058ee:	4658      	mov	r0, fp
 80058f0:	f025 fe16 	bl	802b520 <memset>
 80058f4:	4658      	mov	r0, fp
 80058f6:	f7ff fcc9 	bl	800528c <_ZN8touchgfx6WidgetC1Ev>
 80058fa:	4b9a      	ldr	r3, [pc, #616]	@ (8005b64 <_ZN30Screen_1_LP_StatisticsViewBaseC1Ev+0x390>)
 80058fc:	f8a4 5430 	strh.w	r5, [r4, #1072]	@ 0x430
 8005900:	1d25      	adds	r5, r4, #4
 8005902:	f8c4 3404 	str.w	r3, [r4, #1028]	@ 0x404
    __background.setPosition(0, 0, 272, 480);
 8005906:	4632      	mov	r2, r6
 8005908:	4b97      	ldr	r3, [pc, #604]	@ (8005b68 <_ZN30Screen_1_LP_StatisticsViewBaseC1Ev+0x394>)
 800590a:	4631      	mov	r1, r6
 800590c:	f8c4 6434 	str.w	r6, [r4, #1076]	@ 0x434
 8005910:	4638      	mov	r0, r7
 8005912:	f8c4 342c 	str.w	r3, [r4, #1068]	@ 0x42c
 8005916:	f44f 037f 	mov.w	r3, #16711680	@ 0xff0000
 800591a:	f8a4 643c 	strh.w	r6, [r4, #1084]	@ 0x43c
 800591e:	f8c4 3438 	str.w	r3, [r4, #1080]	@ 0x438
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8005922:	f04f 33ff 	mov.w	r3, #4294967295
 8005926:	f8c4 6440 	str.w	r6, [r4, #1088]	@ 0x440
 800592a:	f8c4 3444 	str.w	r3, [r4, #1092]	@ 0x444
 800592e:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
              text(0)
 8005932:	f8c4 6448 	str.w	r6, [r4, #1096]	@ 0x448
 8005936:	9300      	str	r3, [sp, #0]
 8005938:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800593c:	f7ff fc92 	bl	8005264 <_ZN8touchgfx8Drawable11setPositionEssss>
 8005940:	4639      	mov	r1, r7
 8005942:	4628      	mov	r0, r5
 8005944:	4f89      	ldr	r7, [pc, #548]	@ (8005b6c <_ZN30Screen_1_LP_StatisticsViewBaseC1Ev+0x398>)
 8005946:	f8c4 9068 	str.w	r9, [r4, #104]	@ 0x68
 800594a:	f00c fd29 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Counter_1.setPosition(136, 160, 68, 80);
 800594e:	2344      	movs	r3, #68	@ 0x44
 8005950:	22a0      	movs	r2, #160	@ 0xa0
 8005952:	9804      	ldr	r0, [sp, #16]
 8005954:	2188      	movs	r1, #136	@ 0x88
 8005956:	f8cd a000 	str.w	sl, [sp]
 800595a:	f7ff fc83 	bl	8005264 <_ZN8touchgfx8Drawable11setPositionEssss>
 800595e:	9904      	ldr	r1, [sp, #16]
 8005960:	4628      	mov	r0, r5
 8005962:	f8a4 809c 	strh.w	r8, [r4, #156]	@ 0x9c
        borderColor = colorBorder;
 8005966:	e9c4 7925 	strd	r7, r9, [r4, #148]	@ 0x94
 800596a:	f00c fd19 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Counter_2.setPosition(68, 160, 68, 80);
 800596e:	2344      	movs	r3, #68	@ 0x44
 8005970:	22a0      	movs	r2, #160	@ 0xa0
 8005972:	9805      	ldr	r0, [sp, #20]
 8005974:	4619      	mov	r1, r3
 8005976:	f8cd a000 	str.w	sl, [sp]
 800597a:	f7ff fc73 	bl	8005264 <_ZN8touchgfx8Drawable11setPositionEssss>
 800597e:	9905      	ldr	r1, [sp, #20]
 8005980:	4628      	mov	r0, r5
        borderSize = size;
 8005982:	f8a4 80d0 	strh.w	r8, [r4, #208]	@ 0xd0
        borderColor = colorBorder;
 8005986:	e9c4 7932 	strd	r7, r9, [r4, #200]	@ 0xc8
 800598a:	f00c fd09 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Counter_0.setPosition(204, 160, 68, 80);
 800598e:	2344      	movs	r3, #68	@ 0x44
 8005990:	22a0      	movs	r2, #160	@ 0xa0
 8005992:	9806      	ldr	r0, [sp, #24]
 8005994:	21cc      	movs	r1, #204	@ 0xcc
 8005996:	f8cd a000 	str.w	sl, [sp]
 800599a:	f7ff fc63 	bl	8005264 <_ZN8touchgfx8Drawable11setPositionEssss>
 800599e:	9906      	ldr	r1, [sp, #24]
 80059a0:	4628      	mov	r0, r5
        borderSize = size;
 80059a2:	f8a4 8104 	strh.w	r8, [r4, #260]	@ 0x104
        borderColor = colorBorder;
 80059a6:	e9c4 793f 	strd	r7, r9, [r4, #252]	@ 0xfc
 80059aa:	f00c fcf9 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Counter_3.setPosition(0, 160, 68, 80);
 80059ae:	2344      	movs	r3, #68	@ 0x44
 80059b0:	22a0      	movs	r2, #160	@ 0xa0
 80059b2:	4631      	mov	r1, r6
 80059b4:	9807      	ldr	r0, [sp, #28]
 80059b6:	f8cd a000 	str.w	sl, [sp]
 80059ba:	f7ff fc53 	bl	8005264 <_ZN8touchgfx8Drawable11setPositionEssss>
 80059be:	9907      	ldr	r1, [sp, #28]
 80059c0:	4628      	mov	r0, r5
        borderSize = size;
 80059c2:	f8a4 8138 	strh.w	r8, [r4, #312]	@ 0x138
        borderColor = colorBorder;
 80059c6:	e9c4 794c 	strd	r7, r9, [r4, #304]	@ 0x130
 80059ca:	f00c fce9 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Logo_BG.setXY(0, 0);
 80059ce:	4632      	mov	r2, r6
 80059d0:	4631      	mov	r1, r6
 80059d2:	9802      	ldr	r0, [sp, #8]
 80059d4:	f7ff fc39 	bl	800524a <_ZN8touchgfx8Drawable5setXYEss>
    Logo_BG.setBitmap(touchgfx::Bitmap(BITMAP_BG_ID));
 80059d8:	a918      	add	r1, sp, #96	@ 0x60
 80059da:	9802      	ldr	r0, [sp, #8]
 80059dc:	f8ad 8060 	strh.w	r8, [sp, #96]	@ 0x60
 80059e0:	f010 f9f6 	bl	8015dd0 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80059e4:	9902      	ldr	r1, [sp, #8]
 80059e6:	4628      	mov	r0, r5
 80059e8:	f00c fcda 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Banner.setXY(0, 0);
 80059ec:	4632      	mov	r2, r6
 80059ee:	4631      	mov	r1, r6
 80059f0:	9803      	ldr	r0, [sp, #12]
 80059f2:	f7ff fc2a 	bl	800524a <_ZN8touchgfx8Drawable5setXYEss>
 80059f6:	230c      	movs	r3, #12
    Banner.setBitmap(touchgfx::Bitmap(BITMAP_SCREEN_1_ID));
 80059f8:	a918      	add	r1, sp, #96	@ 0x60
 80059fa:	9803      	ldr	r0, [sp, #12]
 80059fc:	f8ad 3060 	strh.w	r3, [sp, #96]	@ 0x60
 8005a00:	f010 f9e6 	bl	8015dd0 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8005a04:	9903      	ldr	r1, [sp, #12]
 8005a06:	4628      	mov	r0, r5
 8005a08:	f00c fcca 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Counter_5.setPosition(136, 240, 68, 80);
 8005a0c:	2344      	movs	r3, #68	@ 0x44
 8005a0e:	22f0      	movs	r2, #240	@ 0xf0
 8005a10:	9808      	ldr	r0, [sp, #32]
 8005a12:	2188      	movs	r1, #136	@ 0x88
 8005a14:	f8cd a000 	str.w	sl, [sp]
 8005a18:	f7ff fc24 	bl	8005264 <_ZN8touchgfx8Drawable11setPositionEssss>
 8005a1c:	9908      	ldr	r1, [sp, #32]
 8005a1e:	4628      	mov	r0, r5
        borderSize = size;
 8005a20:	f8a4 81c4 	strh.w	r8, [r4, #452]	@ 0x1c4
        borderColor = colorBorder;
 8005a24:	e9c4 796f 	strd	r7, r9, [r4, #444]	@ 0x1bc
 8005a28:	f00c fcba 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Counter_6.setPosition(68, 240, 68, 80);
 8005a2c:	2344      	movs	r3, #68	@ 0x44
 8005a2e:	22f0      	movs	r2, #240	@ 0xf0
 8005a30:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005a32:	4619      	mov	r1, r3
 8005a34:	f8cd a000 	str.w	sl, [sp]
 8005a38:	f7ff fc14 	bl	8005264 <_ZN8touchgfx8Drawable11setPositionEssss>
 8005a3c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005a3e:	4628      	mov	r0, r5
        borderSize = size;
 8005a40:	f8a4 81f8 	strh.w	r8, [r4, #504]	@ 0x1f8
        borderColor = colorBorder;
 8005a44:	e9c4 797c 	strd	r7, r9, [r4, #496]	@ 0x1f0
 8005a48:	f00c fcaa 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Counter_4.setPosition(204, 240, 68, 80);
 8005a4c:	2344      	movs	r3, #68	@ 0x44
 8005a4e:	22f0      	movs	r2, #240	@ 0xf0
 8005a50:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005a52:	21cc      	movs	r1, #204	@ 0xcc
 8005a54:	f8cd a000 	str.w	sl, [sp]
 8005a58:	f7ff fc04 	bl	8005264 <_ZN8touchgfx8Drawable11setPositionEssss>
 8005a5c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005a5e:	4628      	mov	r0, r5
        borderSize = size;
 8005a60:	f8a4 822c 	strh.w	r8, [r4, #556]	@ 0x22c
        borderColor = colorBorder;
 8005a64:	e9c4 7989 	strd	r7, r9, [r4, #548]	@ 0x224
 8005a68:	f00c fc9a 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Counter_7.setPosition(0, 240, 68, 80);
 8005a6c:	2344      	movs	r3, #68	@ 0x44
 8005a6e:	22f0      	movs	r2, #240	@ 0xf0
 8005a70:	4631      	mov	r1, r6
 8005a72:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8005a74:	f8cd a000 	str.w	sl, [sp]
 8005a78:	f7ff fbf4 	bl	8005264 <_ZN8touchgfx8Drawable11setPositionEssss>
 8005a7c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005a7e:	4628      	mov	r0, r5
        borderSize = size;
 8005a80:	f8a4 8260 	strh.w	r8, [r4, #608]	@ 0x260
        borderColor = colorBorder;
 8005a84:	e9c4 7996 	strd	r7, r9, [r4, #600]	@ 0x258
 8005a88:	f00c fc8a 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Counter_15.setPosition(0, 400, 68, 80);
 8005a8c:	2344      	movs	r3, #68	@ 0x44
 8005a8e:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8005a92:	4631      	mov	r1, r6
 8005a94:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8005a96:	f8cd a000 	str.w	sl, [sp]
 8005a9a:	f7ff fbe3 	bl	8005264 <_ZN8touchgfx8Drawable11setPositionEssss>
 8005a9e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8005aa0:	4628      	mov	r0, r5
        borderSize = size;
 8005aa2:	f8a4 8294 	strh.w	r8, [r4, #660]	@ 0x294
        borderColor = colorBorder;
 8005aa6:	e9c4 79a3 	strd	r7, r9, [r4, #652]	@ 0x28c
 8005aaa:	f00c fc79 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Counter_12.setPosition(204, 400, 68, 80);
 8005aae:	2344      	movs	r3, #68	@ 0x44
 8005ab0:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8005ab4:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8005ab6:	21cc      	movs	r1, #204	@ 0xcc
 8005ab8:	f8cd a000 	str.w	sl, [sp]
 8005abc:	f7ff fbd2 	bl	8005264 <_ZN8touchgfx8Drawable11setPositionEssss>
 8005ac0:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8005ac2:	4628      	mov	r0, r5
        borderSize = size;
 8005ac4:	f8a4 82c8 	strh.w	r8, [r4, #712]	@ 0x2c8
        borderColor = colorBorder;
 8005ac8:	e9c4 79b0 	strd	r7, r9, [r4, #704]	@ 0x2c0
 8005acc:	f00c fc68 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Counter_14.setPosition(68, 400, 68, 80);
 8005ad0:	2344      	movs	r3, #68	@ 0x44
 8005ad2:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8005ad6:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8005ad8:	4619      	mov	r1, r3
 8005ada:	f8cd a000 	str.w	sl, [sp]
 8005ade:	f7ff fbc1 	bl	8005264 <_ZN8touchgfx8Drawable11setPositionEssss>
 8005ae2:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8005ae4:	4628      	mov	r0, r5
        borderSize = size;
 8005ae6:	f8a4 82fc 	strh.w	r8, [r4, #764]	@ 0x2fc
        borderColor = colorBorder;
 8005aea:	e9c4 79bd 	strd	r7, r9, [r4, #756]	@ 0x2f4
 8005aee:	f00c fc57 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Counter_13.setPosition(136, 400, 68, 80);
 8005af2:	2344      	movs	r3, #68	@ 0x44
 8005af4:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8005af8:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8005afa:	2188      	movs	r1, #136	@ 0x88
 8005afc:	f8cd a000 	str.w	sl, [sp]
 8005b00:	f7ff fbb0 	bl	8005264 <_ZN8touchgfx8Drawable11setPositionEssss>
 8005b04:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005b06:	4628      	mov	r0, r5
        borderSize = size;
 8005b08:	f8a4 8330 	strh.w	r8, [r4, #816]	@ 0x330
        borderColor = colorBorder;
 8005b0c:	e9c4 79ca 	strd	r7, r9, [r4, #808]	@ 0x328
 8005b10:	f00c fc46 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Counter_11.setPosition(0, 320, 68, 80);
 8005b14:	2344      	movs	r3, #68	@ 0x44
 8005b16:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8005b1a:	4631      	mov	r1, r6
 8005b1c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8005b1e:	f8cd a000 	str.w	sl, [sp]
 8005b22:	f7ff fb9f 	bl	8005264 <_ZN8touchgfx8Drawable11setPositionEssss>
 8005b26:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8005b28:	4628      	mov	r0, r5
        borderSize = size;
 8005b2a:	f8a4 8364 	strh.w	r8, [r4, #868]	@ 0x364
        borderColor = colorBorder;
 8005b2e:	e9c4 79d7 	strd	r7, r9, [r4, #860]	@ 0x35c
 8005b32:	f00c fc35 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Counter_8.setPosition(204, 320, 68, 80);
 8005b36:	2344      	movs	r3, #68	@ 0x44
 8005b38:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8005b3c:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8005b3e:	21cc      	movs	r1, #204	@ 0xcc
 8005b40:	f8cd a000 	str.w	sl, [sp]
 8005b44:	f7ff fb8e 	bl	8005264 <_ZN8touchgfx8Drawable11setPositionEssss>
 8005b48:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8005b4a:	4628      	mov	r0, r5
        borderSize = size;
 8005b4c:	f8a4 8398 	strh.w	r8, [r4, #920]	@ 0x398
        borderColor = colorBorder;
 8005b50:	e9c4 79e4 	strd	r7, r9, [r4, #912]	@ 0x390
 8005b54:	f00c fc24 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Counter_10.setPosition(68, 320, 68, 80);
 8005b58:	2344      	movs	r3, #68	@ 0x44
 8005b5a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8005b5e:	e007      	b.n	8005b70 <_ZN30Screen_1_LP_StatisticsViewBaseC1Ev+0x39c>
 8005b60:	0804056c 	.word	0x0804056c
 8005b64:	0804247c 	.word	0x0804247c
 8005b68:	0803f9a8 	.word	0x0803f9a8
 8005b6c:	ffd8dfec 	.word	0xffd8dfec
 8005b70:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8005b72:	4619      	mov	r1, r3
 8005b74:	f8cd a000 	str.w	sl, [sp]
 8005b78:	f7ff fb74 	bl	8005264 <_ZN8touchgfx8Drawable11setPositionEssss>
 8005b7c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8005b7e:	4628      	mov	r0, r5
        borderSize = size;
 8005b80:	f8a4 83cc 	strh.w	r8, [r4, #972]	@ 0x3cc
        borderColor = colorBorder;
 8005b84:	e9c4 79f1 	strd	r7, r9, [r4, #964]	@ 0x3c4
 8005b88:	f00c fc0a 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Counter_9.setPosition(136, 320, 68, 80);
 8005b8c:	2344      	movs	r3, #68	@ 0x44
 8005b8e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8005b92:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8005b94:	2188      	movs	r1, #136	@ 0x88
 8005b96:	f8cd a000 	str.w	sl, [sp]
 8005b9a:	f7ff fb63 	bl	8005264 <_ZN8touchgfx8Drawable11setPositionEssss>
 8005b9e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8005ba0:	4628      	mov	r0, r5
        borderSize = size;
 8005ba2:	f8a4 8400 	strh.w	r8, [r4, #1024]	@ 0x400
        borderColor = colorBorder;
 8005ba6:	e9c4 79fe 	strd	r7, r9, [r4, #1016]	@ 0x3f8
 8005baa:	f00c fbf9 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    LP_Text.setPosition(65, 104, 139, 15);
 8005bae:	230f      	movs	r3, #15
 8005bb0:	2268      	movs	r2, #104	@ 0x68
 8005bb2:	4658      	mov	r0, fp
 8005bb4:	9300      	str	r3, [sp, #0]
 8005bb6:	2141      	movs	r1, #65	@ 0x41
 8005bb8:	238b      	movs	r3, #139	@ 0x8b
 8005bba:	f7ff fb53 	bl	8005264 <_ZN8touchgfx8Drawable11setPositionEssss>
        linespace = space;
 8005bbe:	f8a4 6438 	strh.w	r6, [r4, #1080]	@ 0x438
        boundingArea = calculateBoundingArea();
 8005bc2:	eb0d 060a 	add.w	r6, sp, sl
 8005bc6:	4659      	mov	r1, fp
        color = newColor;
 8005bc8:	f8c4 7434 	str.w	r7, [r4, #1076]	@ 0x434
        boundingArea = calculateBoundingArea();
 8005bcc:	4630      	mov	r0, r6
 8005bce:	f00f fc39 	bl	8015444 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8005bd2:	f504 6388 	add.w	r3, r4, #1088	@ 0x440
 8005bd6:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8005bda:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005bde:	4b08      	ldr	r3, [pc, #32]	@ (8005c00 <_ZN30Screen_1_LP_StatisticsViewBaseC1Ev+0x42c>)
    LP_Text.setTypedText(touchgfx::TypedText(T___SINGLEUSE_ZG16));
 8005be0:	a918      	add	r1, sp, #96	@ 0x60
 8005be2:	4658      	mov	r0, fp
 8005be4:	9318      	str	r3, [sp, #96]	@ 0x60
 8005be6:	230d      	movs	r3, #13
 8005be8:	f8ad 3064 	strh.w	r3, [sp, #100]	@ 0x64
 8005bec:	f00f fec4 	bl	8015978 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8005bf0:	4628      	mov	r0, r5
 8005bf2:	4659      	mov	r1, fp
 8005bf4:	f00c fbd4 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8005bf8:	4620      	mov	r0, r4
 8005bfa:	b01b      	add	sp, #108	@ 0x6c
 8005bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c00:	0803f9a8 	.word	0x0803f9a8

08005c04 <_ZN8touchgfx9Container13getFirstChildEv>:
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
    {
        return firstChild;
    }
 8005c04:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8005c06:	4770      	bx	lr

08005c08 <_ZNK8touchgfx15AbstractPainter18getRenderingMethodEv>:
     * @return HARDWARE if painter uses hardware based drawing, SOFTWARE otherwise.
     */
    virtual HAL::RenderingMethod getRenderingMethod() const
    {
        return HAL::SOFTWARE;
    }
 8005c08:	2000      	movs	r0, #0
 8005c0a:	4770      	bx	lr

08005c0c <_ZNK8touchgfx15AbstractPainter5setupERKNS_4RectE>:
     *
     * @see AbstractPainter::paint, AbstractPainter::tearDown
     */
    virtual bool setup(const Rect& widgetRect) const
    {
        widgetWidth = widgetRect.width;
 8005c0c:	888b      	ldrh	r3, [r1, #4]
 8005c0e:	8083      	strh	r3, [r0, #4]
        return true;
    }
 8005c10:	2001      	movs	r0, #1
 8005c12:	4770      	bx	lr

08005c14 <_ZNK8touchgfx15AbstractPainter8tearDownEv>:
     * @see AbstractPainter::paint, AbstractPainter::setup
     */
    virtual void tearDown() const
    {
        return;
    }
 8005c14:	4770      	bx	lr

08005c16 <_ZN8touchgfx17AbstractDataGraph8setAlphaEh>:
     *
     * @note All graph elements have to take this alpha into consideration.
     */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 8005c16:	f880 102c 	strb.w	r1, [r0, #44]	@ 0x2c
    }
 8005c1a:	4770      	bx	lr

08005c1c <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>:
     * @param  min The minimum x value.
     * @param  max The maximum x value.
     *
     * @note The graph as well as the area above and below are automatically redrawn (invalidated).
     */
    virtual void setGraphRangeX(int min, int max)
 8005c1c:	b410      	push	{r4}
    {
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
 8005c1e:	6803      	ldr	r3, [r0, #0]
     *
     * @note For internal use.
     */
    FORCE_INLINE_FUNCTION int int2scaledX(int i) const
    {
        return int2scaled(i, xScale);
 8005c20:	6b04      	ldr	r4, [r0, #48]	@ 0x30
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
 8005c22:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005c26:	4362      	muls	r2, r4
 8005c28:	4361      	muls	r1, r4
    }
 8005c2a:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
 8005c2e:	4718      	bx	r3

08005c30 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff>:
     *
     * @return The product of the two numbers, rounded to nearest integer value.
     */
    FORCE_INLINE_FUNCTION static int float2scaled(float f, int scale)
    {
        const float fs = f * (float)scale;
 8005c30:	edd0 7a0c 	vldr	s15, [r0, #48]	@ 0x30
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
 8005c34:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 8005c36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    virtual void setGraphRangeX(float min, float max)
 8005c3a:	b410      	push	{r4}
        const float fs = f * (float)scale;
 8005c3c:	ee20 0a27 	vmul.f32	s0, s0, s15
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
 8005c40:	f8d3 40a4 	ldr.w	r4, [r3, #164]	@ 0xa4
        if (fs >= 0)
 8005c44:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005c48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c4c:	db1a      	blt.n	8005c84 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x54>
        {
            return (int)(fs + 0.5f);
 8005c4e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005c52:	ee30 0a07 	vadd.f32	s0, s0, s14
 8005c56:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8005c5a:	ee17 1a10 	vmov	r1, s14
        const float fs = f * (float)scale;
 8005c5e:	ee60 0aa7 	vmul.f32	s1, s1, s15
        if (fs >= 0)
 8005c62:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 8005c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c6a:	db1e      	blt.n	8005caa <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x7a>
            return (int)(fs + 0.5f);
 8005c6c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8005c70:	ee70 0aa7 	vadd.f32	s1, s1, s15
 8005c74:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 8005c78:	ee17 2a90 	vmov	r2, s15
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
 8005c7c:	4623      	mov	r3, r4
    }
 8005c7e:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
 8005c82:	4718      	bx	r3
        }
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8005c84:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8005c88:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005c8c:	ee17 3a10 	vmov	r3, s14
 8005c90:	3b01      	subs	r3, #1
 8005c92:	ee30 0a66 	vsub.f32	s0, s0, s13
 8005c96:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8005c9a:	ee30 0a26 	vadd.f32	s0, s0, s13
 8005c9e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005ca2:	ee10 1a10 	vmov	r1, s0
 8005ca6:	4419      	add	r1, r3
 8005ca8:	e7d9      	b.n	8005c5e <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x2e>
 8005caa:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 8005cae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005cb2:	ee17 3a90 	vmov	r3, s15
 8005cb6:	3b01      	subs	r3, #1
 8005cb8:	ee70 0ac7 	vsub.f32	s1, s1, s14
 8005cbc:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8005cc0:	ee70 0a87 	vadd.f32	s1, s1, s14
 8005cc4:	eefd 0ae0 	vcvt.s32.f32	s1, s1
 8005cc8:	ee10 2a90 	vmov	r2, s1
 8005ccc:	441a      	add	r2, r3
 8005cce:	e7d5      	b.n	8005c7c <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x4c>

08005cd0 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbi>:
    virtual void setGraphRangeXAuto(bool showYaxis = true, int margin = 0)
 8005cd0:	b410      	push	{r4}
        setGraphRangeXAutoScaled(showYaxis, int2scaledX(margin));
 8005cd2:	6803      	ldr	r3, [r0, #0]
        return i * scale;
 8005cd4:	6b04      	ldr	r4, [r0, #48]	@ 0x30
        setGraphRangeXAutoScaled(showYaxis, int2scaledX(margin));
 8005cd6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005cda:	4362      	muls	r2, r4
    }
 8005cdc:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeXAutoScaled(showYaxis, int2scaledX(margin));
 8005ce0:	4718      	bx	r3

08005ce2 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf>:
        const float fs = f * (float)scale;
 8005ce2:	edd0 7a0c 	vldr	s15, [r0, #48]	@ 0x30
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
 8005ce6:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 8005ce8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    virtual void setGraphRangeXAuto(bool showYaxis, float margin)
 8005cec:	b410      	push	{r4}
        const float fs = f * (float)scale;
 8005cee:	ee27 0a80 	vmul.f32	s0, s15, s0
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
 8005cf2:	f8d3 40b0 	ldr.w	r4, [r3, #176]	@ 0xb0
        if (fs >= 0)
 8005cf6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cfe:	db0b      	blt.n	8005d18 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf+0x36>
            return (int)(fs + 0.5f);
 8005d00:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8005d04:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005d08:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8005d0c:	ee17 2a90 	vmov	r2, s15
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
 8005d10:	4623      	mov	r3, r4
    }
 8005d12:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
 8005d16:	4718      	bx	r3
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8005d18:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8005d1c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005d20:	ee17 3a90 	vmov	r3, s15
 8005d24:	3b01      	subs	r3, #1
 8005d26:	ee30 0a47 	vsub.f32	s0, s0, s14
 8005d2a:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8005d2e:	ee30 0a07 	vadd.f32	s0, s0, s14
 8005d32:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005d36:	ee10 2a10 	vmov	r2, s0
 8005d3a:	441a      	add	r2, r3
 8005d3c:	e7e8      	b.n	8005d10 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf+0x2e>

08005d3e <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEii>:
    virtual void setGraphRangeY(int min, int max)
 8005d3e:	b410      	push	{r4}
        setGraphRangeYScaled(int2scaledY(min), int2scaledY(max));
 8005d40:	6803      	ldr	r3, [r0, #0]
        return int2scaled(i, yScale);
 8005d42:	6b44      	ldr	r4, [r0, #52]	@ 0x34
        setGraphRangeYScaled(int2scaledY(min), int2scaledY(max));
 8005d44:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005d48:	4362      	muls	r2, r4
 8005d4a:	4361      	muls	r1, r4
    }
 8005d4c:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeYScaled(int2scaledY(min), int2scaledY(max));
 8005d50:	4718      	bx	r3

08005d52 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff>:
        const float fs = f * (float)scale;
 8005d52:	edd0 7a0d 	vldr	s15, [r0, #52]	@ 0x34
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
 8005d56:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 8005d58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    virtual void setGraphRangeY(float min, float max)
 8005d5c:	b410      	push	{r4}
        const float fs = f * (float)scale;
 8005d5e:	ee20 0a27 	vmul.f32	s0, s0, s15
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
 8005d62:	f8d3 40bc 	ldr.w	r4, [r3, #188]	@ 0xbc
        if (fs >= 0)
 8005d66:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d6e:	db1a      	blt.n	8005da6 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x54>
            return (int)(fs + 0.5f);
 8005d70:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005d74:	ee30 0a07 	vadd.f32	s0, s0, s14
 8005d78:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8005d7c:	ee17 1a10 	vmov	r1, s14
        const float fs = f * (float)scale;
 8005d80:	ee60 0aa7 	vmul.f32	s1, s1, s15
        if (fs >= 0)
 8005d84:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 8005d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d8c:	db1e      	blt.n	8005dcc <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x7a>
            return (int)(fs + 0.5f);
 8005d8e:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8005d92:	ee70 0aa7 	vadd.f32	s1, s1, s15
 8005d96:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 8005d9a:	ee17 2a90 	vmov	r2, s15
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
 8005d9e:	4623      	mov	r3, r4
    }
 8005da0:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
 8005da4:	4718      	bx	r3
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8005da6:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8005daa:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005dae:	ee17 3a10 	vmov	r3, s14
 8005db2:	3b01      	subs	r3, #1
 8005db4:	ee30 0a66 	vsub.f32	s0, s0, s13
 8005db8:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8005dbc:	ee30 0a26 	vadd.f32	s0, s0, s13
 8005dc0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005dc4:	ee10 1a10 	vmov	r1, s0
 8005dc8:	4419      	add	r1, r3
 8005dca:	e7d9      	b.n	8005d80 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x2e>
 8005dcc:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 8005dd0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005dd4:	ee17 3a90 	vmov	r3, s15
 8005dd8:	3b01      	subs	r3, #1
 8005dda:	ee70 0ac7 	vsub.f32	s1, s1, s14
 8005dde:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8005de2:	ee70 0a87 	vadd.f32	s1, s1, s14
 8005de6:	eefd 0ae0 	vcvt.s32.f32	s1, s1
 8005dea:	ee10 2a90 	vmov	r2, s1
 8005dee:	441a      	add	r2, r3
 8005df0:	e7d5      	b.n	8005d9e <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x4c>

08005df2 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbi>:
    virtual void setGraphRangeYAuto(bool showXaxis = true, int margin = 0)
 8005df2:	b410      	push	{r4}
        setGraphRangeYAutoScaled(showXaxis, int2scaledY(margin));
 8005df4:	6803      	ldr	r3, [r0, #0]
        return i * scale;
 8005df6:	6b44      	ldr	r4, [r0, #52]	@ 0x34
        setGraphRangeYAutoScaled(showXaxis, int2scaledY(margin));
 8005df8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005dfc:	4362      	muls	r2, r4
    }
 8005dfe:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeYAutoScaled(showXaxis, int2scaledY(margin));
 8005e02:	4718      	bx	r3

08005e04 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbf>:
        const float fs = f * (float)scale;
 8005e04:	edd0 7a0d 	vldr	s15, [r0, #52]	@ 0x34
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
 8005e08:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 8005e0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    virtual void setGraphRangeYAuto(bool showXaxis, float margin)
 8005e0e:	b410      	push	{r4}
        const float fs = f * (float)scale;
 8005e10:	ee27 0a80 	vmul.f32	s0, s15, s0
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
 8005e14:	f8d3 40c0 	ldr.w	r4, [r3, #192]	@ 0xc0
        if (fs >= 0)
 8005e18:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005e1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e20:	db0b      	blt.n	8005e3a <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbf+0x36>
            return (int)(fs + 0.5f);
 8005e22:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8005e26:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005e2a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8005e2e:	ee17 2a90 	vmov	r2, s15
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
 8005e32:	4623      	mov	r3, r4
    }
 8005e34:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
 8005e38:	4718      	bx	r3
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8005e3a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8005e3e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005e42:	ee17 3a90 	vmov	r3, s15
 8005e46:	3b01      	subs	r3, #1
 8005e48:	ee30 0a47 	vsub.f32	s0, s0, s14
 8005e4c:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8005e50:	ee30 0a07 	vadd.f32	s0, s0, s14
 8005e54:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005e58:	ee10 2a10 	vmov	r2, s0
 8005e5c:	441a      	add	r2, r3
 8005e5e:	e7e8      	b.n	8005e32 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbf+0x2e>

08005e60 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMinAsIntEv>:
        return scaled2intX(graphRangeMinX);
 8005e60:	f8d0 312c 	ldr.w	r3, [r0, #300]	@ 0x12c
     *
     * @note For internal use.
     */
    FORCE_INLINE_FUNCTION int scaled2intX(int i) const
    {
        return scaled2int(i, xScale);
 8005e64:	6b02      	ldr	r2, [r0, #48]	@ 0x30
        if (i >= 0)
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	db07      	blt.n	8005e7a <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMinAsIntEv+0x1a>
            return ((i * 2 + scale) / scale) / 2;
 8005e6a:	eb02 0043 	add.w	r0, r2, r3, lsl #1
 8005e6e:	fb90 f0f2 	sdiv	r0, r0, r2
 8005e72:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8005e76:	1040      	asrs	r0, r0, #1
 8005e78:	4770      	bx	lr
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8005e7a:	f06f 0101 	mvn.w	r1, #1
 8005e7e:	fb01 2003 	mla	r0, r1, r3, r2
 8005e82:	3801      	subs	r0, #1
 8005e84:	fb90 f0f2 	sdiv	r0, r0, r2
 8005e88:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8005e8c:	1040      	asrs	r0, r0, #1
 8005e8e:	4240      	negs	r0, r0
    }
 8005e90:	4770      	bx	lr

08005e92 <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeXMinAsFloatEv>:
     *
     * @return The number divided by the scale.
     */
    FORCE_INLINE_FUNCTION static float scaled2float(int i, int scale)
    {
        return (float)i / (float)scale;
 8005e92:	edd0 7a4b 	vldr	s15, [r0, #300]	@ 0x12c
 8005e96:	ed90 0a0c 	vldr	s0, [r0, #48]	@ 0x30
 8005e9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e9e:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    }
 8005ea2:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8005ea6:	4770      	bx	lr

08005ea8 <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeXMinScaledEv>:
    }
 8005ea8:	f8d0 012c 	ldr.w	r0, [r0, #300]	@ 0x12c
 8005eac:	4770      	bx	lr

08005eae <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMaxAsIntEv>:
        return scaled2intX(graphRangeMaxX);
 8005eae:	f8d0 3130 	ldr.w	r3, [r0, #304]	@ 0x130
        return scaled2int(i, xScale);
 8005eb2:	6b02      	ldr	r2, [r0, #48]	@ 0x30
        if (i >= 0)
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	db07      	blt.n	8005ec8 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMaxAsIntEv+0x1a>
            return ((i * 2 + scale) / scale) / 2;
 8005eb8:	eb02 0043 	add.w	r0, r2, r3, lsl #1
 8005ebc:	fb90 f0f2 	sdiv	r0, r0, r2
 8005ec0:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8005ec4:	1040      	asrs	r0, r0, #1
 8005ec6:	4770      	bx	lr
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8005ec8:	f06f 0101 	mvn.w	r1, #1
 8005ecc:	fb01 2003 	mla	r0, r1, r3, r2
 8005ed0:	3801      	subs	r0, #1
 8005ed2:	fb90 f0f2 	sdiv	r0, r0, r2
 8005ed6:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8005eda:	1040      	asrs	r0, r0, #1
 8005edc:	4240      	negs	r0, r0
    }
 8005ede:	4770      	bx	lr

08005ee0 <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeXMaxAsFloatEv>:
        return (float)i / (float)scale;
 8005ee0:	edd0 7a4c 	vldr	s15, [r0, #304]	@ 0x130
 8005ee4:	ed90 0a0c 	vldr	s0, [r0, #48]	@ 0x30
 8005ee8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005eec:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    }
 8005ef0:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8005ef4:	4770      	bx	lr

08005ef6 <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeXMaxScaledEv>:
    }
 8005ef6:	f8d0 0130 	ldr.w	r0, [r0, #304]	@ 0x130
 8005efa:	4770      	bx	lr

08005efc <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv>:
        return scaled2intY(graphRangeMinY);
 8005efc:	f8d0 3134 	ldr.w	r3, [r0, #308]	@ 0x134
        return scaled2int(i, yScale);
 8005f00:	6b42      	ldr	r2, [r0, #52]	@ 0x34
        if (i >= 0)
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	db07      	blt.n	8005f16 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv+0x1a>
            return ((i * 2 + scale) / scale) / 2;
 8005f06:	eb02 0043 	add.w	r0, r2, r3, lsl #1
 8005f0a:	fb90 f0f2 	sdiv	r0, r0, r2
 8005f0e:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8005f12:	1040      	asrs	r0, r0, #1
 8005f14:	4770      	bx	lr
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8005f16:	f06f 0101 	mvn.w	r1, #1
 8005f1a:	fb01 2003 	mla	r0, r1, r3, r2
 8005f1e:	3801      	subs	r0, #1
 8005f20:	fb90 f0f2 	sdiv	r0, r0, r2
 8005f24:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8005f28:	1040      	asrs	r0, r0, #1
 8005f2a:	4240      	negs	r0, r0
    }
 8005f2c:	4770      	bx	lr

08005f2e <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeYMinAsFloatEv>:
        return (float)i / (float)scale;
 8005f2e:	edd0 7a4d 	vldr	s15, [r0, #308]	@ 0x134
 8005f32:	ed90 0a0d 	vldr	s0, [r0, #52]	@ 0x34
 8005f36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f3a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    }
 8005f3e:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8005f42:	4770      	bx	lr

08005f44 <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeYMinScaledEv>:
    }
 8005f44:	f8d0 0134 	ldr.w	r0, [r0, #308]	@ 0x134
 8005f48:	4770      	bx	lr

08005f4a <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv>:
        return scaled2intY(graphRangeMaxY);
 8005f4a:	f8d0 3138 	ldr.w	r3, [r0, #312]	@ 0x138
        return scaled2int(i, yScale);
 8005f4e:	6b42      	ldr	r2, [r0, #52]	@ 0x34
        if (i >= 0)
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	db07      	blt.n	8005f64 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv+0x1a>
            return ((i * 2 + scale) / scale) / 2;
 8005f54:	eb02 0043 	add.w	r0, r2, r3, lsl #1
 8005f58:	fb90 f0f2 	sdiv	r0, r0, r2
 8005f5c:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8005f60:	1040      	asrs	r0, r0, #1
 8005f62:	4770      	bx	lr
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8005f64:	f06f 0101 	mvn.w	r1, #1
 8005f68:	fb01 2003 	mla	r0, r1, r3, r2
 8005f6c:	3801      	subs	r0, #1
 8005f6e:	fb90 f0f2 	sdiv	r0, r0, r2
 8005f72:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8005f76:	1040      	asrs	r0, r0, #1
 8005f78:	4240      	negs	r0, r0
    }
 8005f7a:	4770      	bx	lr

08005f7c <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeYMaxAsFloatEv>:
        return (float)i / (float)scale;
 8005f7c:	edd0 7a4e 	vldr	s15, [r0, #312]	@ 0x138
 8005f80:	ed90 0a0d 	vldr	s0, [r0, #52]	@ 0x34
 8005f84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f88:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    }
 8005f8c:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8005f90:	4770      	bx	lr

08005f92 <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeYMaxScaledEv>:
    }
 8005f92:	f8d0 0138 	ldr.w	r0, [r0, #312]	@ 0x138
 8005f96:	4770      	bx	lr

08005f98 <_ZN8touchgfx16DynamicDataGraph8setScaleEib>:
     * @note The current xAxisFactor, xAxisOffet and xGraphRange values are updated to reflect the
     *       new scale being set.
     */
    virtual void setScale(int scale, bool updateData = false)
    {
        setScaleX(scale, updateData);
 8005f98:	6803      	ldr	r3, [r0, #0]
    virtual void setScale(int scale, bool updateData = false)
 8005f9a:	b570      	push	{r4, r5, r6, lr}
 8005f9c:	4604      	mov	r4, r0
        setScaleX(scale, updateData);
 8005f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
    virtual void setScale(int scale, bool updateData = false)
 8005fa2:	460d      	mov	r5, r1
 8005fa4:	4616      	mov	r6, r2
        setScaleX(scale, updateData);
 8005fa6:	4798      	blx	r3
        setScaleY(scale, updateData);
 8005fa8:	6823      	ldr	r3, [r4, #0]
 8005faa:	4632      	mov	r2, r6
 8005fac:	4629      	mov	r1, r5
 8005fae:	4620      	mov	r0, r4
 8005fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
    }
 8005fb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setScaleY(scale, updateData);
 8005fb8:	4718      	bx	r3

08005fba <_ZNK8touchgfx16DynamicDataGraph8getScaleEv>:
     *
     * @see setScale
     */
    virtual int getScale() const
    {
        return getScaleY();
 8005fba:	6803      	ldr	r3, [r0, #0]
 8005fbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005fc0:	4718      	bx	r3

08005fc2 <_ZNK8touchgfx16DynamicDataGraph17getGraphRangeXMinEv>:
     *
     * @return The minimum x coordinate .
     */
    virtual int getGraphRangeXMin() const
    {
        return getGraphRangeXMinScaled();
 8005fc2:	6803      	ldr	r3, [r0, #0]
 8005fc4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8005fc8:	4718      	bx	r3

08005fca <_ZNK8touchgfx16DynamicDataGraph17getGraphRangeXMaxEv>:
     *
     * @return The maximum x coordinate .
     */
    virtual int getGraphRangeXMax() const
    {
        return getGraphRangeXMaxScaled();
 8005fca:	6803      	ldr	r3, [r0, #0]
 8005fcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005fd0:	4718      	bx	r3

08005fd2 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeXAutoScaledEbi>:

    virtual void setGraphRangeYAutoScaled(bool showXaxis, int margin);

    virtual void setGraphRangeXAutoScaled(bool /*showYaxis*/, int margin)
    {
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
 8005fd2:	6803      	ldr	r3, [r0, #0]
        if (i >= 0)
 8005fd4:	2a00      	cmp	r2, #0
    virtual void setGraphRangeXAutoScaled(bool /*showYaxis*/, int margin)
 8005fd6:	b410      	push	{r4}
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
 8005fd8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
        return scaled2int(i, xScale);
 8005fdc:	6b04      	ldr	r4, [r0, #48]	@ 0x30
        if (i >= 0)
 8005fde:	db0e      	blt.n	8005ffe <_ZN8touchgfx16DynamicDataGraph24setGraphRangeXAutoScaledEbi+0x2c>
            return ((i * 2 + scale) / scale) / 2;
 8005fe0:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8005fe4:	fb92 f1f4 	sdiv	r1, r2, r4
 8005fe8:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8005fec:	1049      	asrs	r1, r1, #1
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
 8005fee:	f9b0 211e 	ldrsh.w	r2, [r0, #286]	@ 0x11e
    }
 8005ff2:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
 8005ff6:	3a01      	subs	r2, #1
 8005ff8:	440a      	add	r2, r1
 8005ffa:	4249      	negs	r1, r1
 8005ffc:	4718      	bx	r3
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8005ffe:	f06f 0101 	mvn.w	r1, #1
 8006002:	fb01 4102 	mla	r1, r1, r2, r4
 8006006:	3901      	subs	r1, #1
 8006008:	fb91 f1f4 	sdiv	r1, r1, r4
 800600c:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8006010:	1049      	asrs	r1, r1, #1
 8006012:	4249      	negs	r1, r1
 8006014:	e7eb      	b.n	8005fee <_ZN8touchgfx16DynamicDataGraph24setGraphRangeXAutoScaledEbi+0x1c>

08006016 <_ZN8touchgfx16DynamicDataGraph13setXAxisScaleEi>:

    /// @cond
    TOUCHGFX_DEPRECATED("Please use setXAxisFactor()", virtual void setXAxisScale(int scale))
    {
        setXAxisFactor(scale);
 8006016:	6803      	ldr	r3, [r0, #0]
 8006018:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 800601c:	4718      	bx	r3

0800601e <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEi>:
        return i * scale;
 800601e:	6b02      	ldr	r2, [r0, #48]	@ 0x30
     *
     * @param  factor The x axis factor.
     */
    virtual void setXAxisFactor(int factor)
    {
        setXAxisFactorScaled(int2scaledX(factor));
 8006020:	6803      	ldr	r3, [r0, #0]
 8006022:	4351      	muls	r1, r2
 8006024:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8006028:	4718      	bx	r3

0800602a <_ZN8touchgfx16DynamicDataGraph13setXAxisScaleEf>:
    }

    /// @cond
    TOUCHGFX_DEPRECATED("Please use setXAxisFactor()", virtual void setXAxisScale(float scale))
    {
        setXAxisFactor(scale);
 800602a:	6803      	ldr	r3, [r0, #0]
 800602c:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 8006030:	4718      	bx	r3

08006032 <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEf>:
        const float fs = f * (float)scale;
 8006032:	edd0 7a0c 	vldr	s15, [r0, #48]	@ 0x30
    /// @endcond

    /** @copydoc setXAxisFactor(int) */
    virtual void setXAxisFactor(float factor)
    {
        setXAxisFactorScaled(float2scaledX(factor));
 8006036:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 8006038:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        setXAxisFactorScaled(float2scaledX(factor));
 800603c:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
        const float fs = f * (float)scale;
 8006040:	ee27 0a80 	vmul.f32	s0, s15, s0
        if (fs >= 0)
 8006044:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800604c:	db08      	blt.n	8006060 <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEf+0x2e>
            return (int)(fs + 0.5f);
 800604e:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8006052:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006056:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800605a:	ee17 1a90 	vmov	r1, s15
        setXAxisFactorScaled(float2scaledX(factor));
 800605e:	4710      	bx	r2
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8006060:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8006064:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006068:	ee17 3a90 	vmov	r3, s15
 800606c:	3b01      	subs	r3, #1
 800606e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8006072:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8006076:	ee30 0a07 	vadd.f32	s0, s0, s14
 800607a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800607e:	ee10 1a10 	vmov	r1, s0
 8006082:	4419      	add	r1, r3
 8006084:	e7eb      	b.n	800605e <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEf+0x2c>

08006086 <_ZN8touchgfx16DynamicDataGraph20setXAxisFactorScaledEi>:
     *
     * @see setXAxisFactorScaled,setXAxisFactor
     */
    virtual void setXAxisFactorScaled(int factor)
    {
        xAxisFactor = factor;
 8006086:	f8c0 113c 	str.w	r1, [r0, #316]	@ 0x13c
    }
 800608a:	4770      	bx	lr

0800608c <_ZNK8touchgfx16DynamicDataGraph18getXAxisScaleAsIntEv>:

    /// @cond
    TOUCHGFX_DEPRECATED("Please use getXAxisFactorAsInt()", virtual int getXAxisScaleAsInt() const)
    {
        return getXAxisFactorAsInt();
 800608c:	6803      	ldr	r3, [r0, #0]
 800608e:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8006092:	4718      	bx	r3

08006094 <_ZNK8touchgfx16DynamicDataGraph19getXAxisFactorAsIntEv>:
     *
     * @return The x axis factor.
     */
    virtual int getXAxisFactorAsInt() const
    {
        return scaled2intX(getXAxisFactorScaled());
 8006094:	6803      	ldr	r3, [r0, #0]
    virtual int getXAxisFactorAsInt() const
 8006096:	b510      	push	{r4, lr}
        return scaled2intX(getXAxisFactorScaled());
 8006098:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
    virtual int getXAxisFactorAsInt() const
 800609c:	4604      	mov	r4, r0
        return scaled2intX(getXAxisFactorScaled());
 800609e:	4798      	blx	r3
        if (i >= 0)
 80060a0:	2800      	cmp	r0, #0
        return scaled2int(i, xScale);
 80060a2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
        if (i >= 0)
 80060a4:	db07      	blt.n	80060b6 <_ZNK8touchgfx16DynamicDataGraph19getXAxisFactorAsIntEv+0x22>
            return ((i * 2 + scale) / scale) / 2;
 80060a6:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80060aa:	fb90 f0f3 	sdiv	r0, r0, r3
 80060ae:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80060b2:	1040      	asrs	r0, r0, #1
    }
 80060b4:	bd10      	pop	{r4, pc}
        return -(((-i * 2 + scale - 1) / scale) / 2);
 80060b6:	f06f 0201 	mvn.w	r2, #1
 80060ba:	fb02 3000 	mla	r0, r2, r0, r3
 80060be:	3801      	subs	r0, #1
 80060c0:	fb90 f0f3 	sdiv	r0, r0, r3
 80060c4:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80060c8:	1040      	asrs	r0, r0, #1
 80060ca:	4240      	negs	r0, r0
        return scaled2intX(getXAxisFactorScaled());
 80060cc:	e7f2      	b.n	80060b4 <_ZNK8touchgfx16DynamicDataGraph19getXAxisFactorAsIntEv+0x20>

080060ce <_ZNK8touchgfx16DynamicDataGraph20getXAxisScaleAsFloatEv>:

    /// @cond
    TOUCHGFX_DEPRECATED("Please use getXAxisFactorAsFloat()", virtual float getXAxisScaleAsFloat() const)
    {
        return getXAxisFactorAsFloat();
 80060ce:	6803      	ldr	r3, [r0, #0]
 80060d0:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 80060d4:	4718      	bx	r3

080060d6 <_ZNK8touchgfx16DynamicDataGraph21getXAxisFactorAsFloatEv>:
    /// @endcond

    /** @copydoc getXAxisFactorAsInt() */
    virtual float getXAxisFactorAsFloat() const
    {
        return scaled2floatX(getXAxisFactorScaled());
 80060d6:	6803      	ldr	r3, [r0, #0]
    virtual float getXAxisFactorAsFloat() const
 80060d8:	b510      	push	{r4, lr}
 80060da:	4604      	mov	r4, r0
        return scaled2floatX(getXAxisFactorScaled());
 80060dc:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 80060e0:	4798      	blx	r3
 80060e2:	ee07 0a90 	vmov	s15, r0
        return (float)i / (float)scale;
 80060e6:	ed94 0a0c 	vldr	s0, [r4, #48]	@ 0x30
 80060ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80060ee:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    }
 80060f2:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80060f6:	bd10      	pop	{r4, pc}

080060f8 <_ZNK8touchgfx16DynamicDataGraph20getXAxisFactorScaledEv>:
     * @see getXAxisFactorAsInt, getXAxisFactorAsFloat, setXAxisFactor
     */
    virtual int getXAxisFactorScaled() const
    {
        return xAxisFactor;
    }
 80060f8:	f8d0 013c 	ldr.w	r0, [r0, #316]	@ 0x13c
 80060fc:	4770      	bx	lr

080060fe <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEi>:
        return i * scale;
 80060fe:	6b02      	ldr	r2, [r0, #48]	@ 0x30
     *
     * @param  offset The x axis offset.
     */
    virtual void setXAxisOffset(int offset)
    {
        setXAxisOffsetScaled(int2scaledX(offset));
 8006100:	6803      	ldr	r3, [r0, #0]
 8006102:	4351      	muls	r1, r2
 8006104:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8006108:	4718      	bx	r3

0800610a <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEf>:
        const float fs = f * (float)scale;
 800610a:	edd0 7a0c 	vldr	s15, [r0, #48]	@ 0x30
    }

    /** @copydoc setXAxisOffset(int) */
    virtual void setXAxisOffset(float offset)
    {
        setXAxisOffsetScaled(float2scaledX(offset));
 800610e:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 8006110:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        setXAxisOffsetScaled(float2scaledX(offset));
 8006114:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
        const float fs = f * (float)scale;
 8006118:	ee27 0a80 	vmul.f32	s0, s15, s0
        if (fs >= 0)
 800611c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006124:	db08      	blt.n	8006138 <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEf+0x2e>
            return (int)(fs + 0.5f);
 8006126:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800612a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800612e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8006132:	ee17 1a90 	vmov	r1, s15
        setXAxisOffsetScaled(float2scaledX(offset));
 8006136:	4710      	bx	r2
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8006138:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800613c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006140:	ee17 3a90 	vmov	r3, s15
 8006144:	3b01      	subs	r3, #1
 8006146:	ee30 0a47 	vsub.f32	s0, s0, s14
 800614a:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800614e:	ee30 0a07 	vadd.f32	s0, s0, s14
 8006152:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8006156:	ee10 1a10 	vmov	r1, s0
 800615a:	4419      	add	r1, r3
 800615c:	e7eb      	b.n	8006136 <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEf+0x2c>

0800615e <_ZN8touchgfx16DynamicDataGraph20setXAxisOffsetScaledEi>:
     *
     * @see setXAxisOffset, getXAxisOffsetScaled
     */
    virtual void setXAxisOffsetScaled(int offset)
    {
        xAxisOffset = offset;
 800615e:	f8c0 1140 	str.w	r1, [r0, #320]	@ 0x140
    }
 8006162:	4770      	bx	lr

08006164 <_ZNK8touchgfx16DynamicDataGraph19getXAxisOffsetAsIntEv>:
     *
     * @return The x axis offset.
     */
    virtual int getXAxisOffsetAsInt() const
    {
        return scaled2intX(getXAxisOffsetScaled());
 8006164:	6803      	ldr	r3, [r0, #0]
    virtual int getXAxisOffsetAsInt() const
 8006166:	b510      	push	{r4, lr}
        return scaled2intX(getXAxisOffsetScaled());
 8006168:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
    virtual int getXAxisOffsetAsInt() const
 800616c:	4604      	mov	r4, r0
        return scaled2intX(getXAxisOffsetScaled());
 800616e:	4798      	blx	r3
        if (i >= 0)
 8006170:	2800      	cmp	r0, #0
        return scaled2int(i, xScale);
 8006172:	6b23      	ldr	r3, [r4, #48]	@ 0x30
        if (i >= 0)
 8006174:	db07      	blt.n	8006186 <_ZNK8touchgfx16DynamicDataGraph19getXAxisOffsetAsIntEv+0x22>
            return ((i * 2 + scale) / scale) / 2;
 8006176:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800617a:	fb90 f0f3 	sdiv	r0, r0, r3
 800617e:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8006182:	1040      	asrs	r0, r0, #1
    }
 8006184:	bd10      	pop	{r4, pc}
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8006186:	f06f 0201 	mvn.w	r2, #1
 800618a:	fb02 3000 	mla	r0, r2, r0, r3
 800618e:	3801      	subs	r0, #1
 8006190:	fb90 f0f3 	sdiv	r0, r0, r3
 8006194:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8006198:	1040      	asrs	r0, r0, #1
 800619a:	4240      	negs	r0, r0
        return scaled2intX(getXAxisOffsetScaled());
 800619c:	e7f2      	b.n	8006184 <_ZNK8touchgfx16DynamicDataGraph19getXAxisOffsetAsIntEv+0x20>

0800619e <_ZNK8touchgfx16DynamicDataGraph21getXAxisOffsetAsFloatEv>:

    /** @copydoc getXAxisOffsetAsInt() */
    virtual float getXAxisOffsetAsFloat() const
    {
        return scaled2floatX(getXAxisOffsetScaled());
 800619e:	6803      	ldr	r3, [r0, #0]
    virtual float getXAxisOffsetAsFloat() const
 80061a0:	b510      	push	{r4, lr}
 80061a2:	4604      	mov	r4, r0
        return scaled2floatX(getXAxisOffsetScaled());
 80061a4:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 80061a8:	4798      	blx	r3
 80061aa:	ee07 0a90 	vmov	s15, r0
        return (float)i / (float)scale;
 80061ae:	ed94 0a0c 	vldr	s0, [r4, #48]	@ 0x30
 80061b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80061b6:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    }
 80061ba:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80061be:	bd10      	pop	{r4, pc}

080061c0 <_ZNK8touchgfx16DynamicDataGraph20getXAxisOffsetScaledEv>:
     * @see getXAxisOffsetAsInt, getXAxisOffsetAsFloat, setXAxisOffsetScaled, setXAxisOffset
     */
    virtual int getXAxisOffsetScaled() const
    {
        return xAxisOffset;
    }
 80061c0:	f8d0 0140 	ldr.w	r0, [r0, #320]	@ 0x140
 80061c4:	4770      	bx	lr

080061c6 <_ZNK8touchgfx16DynamicDataGraph9dataIndexEs>:
     * @return The index in the yValues array.
     */
    virtual int16_t dataIndex(int16_t screenIndex) const
    {
        return screenIndex;
    }
 80061c6:	4608      	mov	r0, r1
 80061c8:	4770      	bx	lr

080061ca <_ZNK8touchgfx16DynamicDataGraph12indexToXAxisEii>:
    }

    virtual int indexToXAxis(const int valueScaled, const int /*labelScaled*/) const
    {
        // Value is also index for these types of graphs.
        return (indexToGlobalIndex(scaled2intX(valueScaled)) * xAxisFactor) + xAxisOffset;
 80061ca:	6803      	ldr	r3, [r0, #0]
        if (i >= 0)
 80061cc:	2900      	cmp	r1, #0
        return scaled2int(i, xScale);
 80061ce:	6b02      	ldr	r2, [r0, #48]	@ 0x30
        return (indexToGlobalIndex(scaled2intX(valueScaled)) * xAxisFactor) + xAxisOffset;
 80061d0:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
    virtual int indexToXAxis(const int valueScaled, const int /*labelScaled*/) const
 80061d4:	b510      	push	{r4, lr}
 80061d6:	4604      	mov	r4, r0
        if (i >= 0)
 80061d8:	db0e      	blt.n	80061f8 <_ZNK8touchgfx16DynamicDataGraph12indexToXAxisEii+0x2e>
            return ((i * 2 + scale) / scale) / 2;
 80061da:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80061de:	fb91 f1f2 	sdiv	r1, r1, r2
 80061e2:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 80061e6:	1049      	asrs	r1, r1, #1
        return (indexToGlobalIndex(scaled2intX(valueScaled)) * xAxisFactor) + xAxisOffset;
 80061e8:	b209      	sxth	r1, r1
 80061ea:	4620      	mov	r0, r4
 80061ec:	4798      	blx	r3
 80061ee:	e9d4 234f 	ldrd	r2, r3, [r4, #316]	@ 0x13c
    }
 80061f2:	fb02 3000 	mla	r0, r2, r0, r3
 80061f6:	bd10      	pop	{r4, pc}
        return -(((-i * 2 + scale - 1) / scale) / 2);
 80061f8:	f06f 0001 	mvn.w	r0, #1
 80061fc:	fb00 2101 	mla	r1, r0, r1, r2
 8006200:	3901      	subs	r1, #1
 8006202:	fb91 f1f2 	sdiv	r1, r1, r2
 8006206:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 800620a:	1049      	asrs	r1, r1, #1
 800620c:	4249      	negs	r1, r1
 800620e:	e7eb      	b.n	80061e8 <_ZNK8touchgfx16DynamicDataGraph12indexToXAxisEii+0x1e>

08006210 <_ZNK8touchgfx16DynamicDataGraph9getScaleXEv>:
    virtual void setScaleX(int scale, bool updateData = false);

    virtual int getScaleX() const
    {
        return AbstractDataGraph::getScaleX();
    }
 8006210:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8006212:	4770      	bx	lr

08006214 <_ZNK8touchgfx16DynamicDataGraph9getScaleYEv>:
    virtual void setScaleY(int scale, bool updateData = false);

    virtual int getScaleY() const
    {
        return AbstractDataGraph::getScaleY();
    }
 8006214:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8006216:	4770      	bx	lr

08006218 <_ZN8touchgfx16DynamicDataGraph19setXAxisScaleScaledEi>:

    /// @cond
    TOUCHGFX_DEPRECATED("Please use setXAxisFactorScaled()", virtual void setXAxisScaleScaled(int scale))
    {
        setXAxisFactorScaled(scale);
 8006218:	6803      	ldr	r3, [r0, #0]
 800621a:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800621e:	4718      	bx	r3

08006220 <_ZNK8touchgfx16DynamicDataGraph19getXAxisScaleScaledEv>:
    /// @endcond

    /// @cond
    TOUCHGFX_DEPRECATED("Please use getXAxisFactorScaled()", virtual int getXAxisScaleScaled() const)
    {
        return getXAxisFactorScaled();
 8006220:	6803      	ldr	r3, [r0, #0]
 8006222:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 8006226:	4718      	bx	r3

08006228 <_ZNK8touchgfx16DynamicDataGraph16indexToScreenXQ5Es>:
        return i * scale;
 8006228:	6b02      	ldr	r2, [r0, #48]	@ 0x30

    /// @endcond

    virtual CWRUtil::Q5 indexToScreenXQ5(int16_t index) const
    {
        return valueToScreenXQ5(int2scaledX(index));
 800622a:	6803      	ldr	r3, [r0, #0]
 800622c:	4351      	muls	r1, r2
 800622e:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8006232:	4718      	bx	r3

08006234 <_ZNK8touchgfx16DynamicDataGraph16indexToScreenYQ5Es>:
    }

    virtual CWRUtil::Q5 indexToScreenYQ5(int16_t index) const
    {
        return valueToScreenYQ5(yValues[dataIndex(index)]);
 8006234:	6803      	ldr	r3, [r0, #0]
    virtual CWRUtil::Q5 indexToScreenYQ5(int16_t index) const
 8006236:	b570      	push	{r4, r5, r6, lr}
        return valueToScreenYQ5(yValues[dataIndex(index)]);
 8006238:	f8d3 5118 	ldr.w	r5, [r3, #280]	@ 0x118
    virtual CWRUtil::Q5 indexToScreenYQ5(int16_t index) const
 800623c:	4604      	mov	r4, r0
        return valueToScreenYQ5(yValues[dataIndex(index)]);
 800623e:	f8d0 6144 	ldr.w	r6, [r0, #324]	@ 0x144
 8006242:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 8006246:	4798      	blx	r3
 8006248:	462b      	mov	r3, r5
 800624a:	f856 1020 	ldr.w	r1, [r6, r0, lsl #2]
 800624e:	4620      	mov	r0, r4
    }
 8006250:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return valueToScreenYQ5(yValues[dataIndex(index)]);
 8006254:	4718      	bx	r3

08006256 <_ZNK8touchgfx21GraphWrapAndClearData18indexToGlobalIndexEs>:

    virtual void clear();

    virtual int32_t indexToGlobalIndex(int16_t index) const
    {
        return (this->dataCounter - this->usedCapacity) + index;
 8006256:	f8d0 3148 	ldr.w	r3, [r0, #328]	@ 0x148
 800625a:	f9b0 011e 	ldrsh.w	r0, [r0, #286]	@ 0x11e
 800625e:	4419      	add	r1, r3
    }
 8006260:	1a08      	subs	r0, r1, r0
 8006262:	4770      	bx	lr

08006264 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
    }

    /** @copydoc Image::setAlpha */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 8006264:	f880 1026 	strb.w	r1, [r0, #38]	@ 0x26
    }
 8006268:	4770      	bx	lr

0800626a <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:

    /** @copydoc Image::getAlpha() */
    virtual uint8_t getAlpha() const
    {
        return alpha;
    }
 800626a:	f890 0026 	ldrb.w	r0, [r0, #38]	@ 0x26
 800626e:	4770      	bx	lr

08006270 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
 8006270:	2200      	movs	r2, #0
     * overwritten in subclasses and return the minimal rectangle containing the shape. See
     * classes such as Circle for example implementations.
     *
     * @return The minimal rectangle containing the shape drawn.
     */
    virtual Rect getMinimalRect() const
 8006272:	b510      	push	{r4, lr}
        return rect.width;
 8006274:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
        return rect.height;
 8006278:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 800627c:	8002      	strh	r2, [r0, #0]
 800627e:	8042      	strh	r2, [r0, #2]
 8006280:	8084      	strh	r4, [r0, #4]
 8006282:	80c1      	strh	r1, [r0, #6]
    {
        return Rect(0, 0, getWidth(), getHeight());
    }
 8006284:	bd10      	pop	{r4, pc}

08006286 <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
        : x(0), y(0), width(0), height(0)
 8006286:	2200      	movs	r2, #0
 8006288:	8002      	strh	r2, [r0, #0]
 800628a:	8042      	strh	r2, [r0, #2]
 800628c:	8082      	strh	r2, [r0, #4]
 800628e:	80c2      	strh	r2, [r0, #6]
     *       lines will not be drawn and may cause strange display artifacts.
     */
    virtual Rect getSolidRect() const
    {
        return Rect();
    }
 8006290:	4770      	bx	lr

08006292 <_ZN8touchgfx25AbstractGraphElementNoCWR8setColorENS_9colortypeE>:
     *
     * @see getColor
     */
    virtual void setColor(colortype newColor)
    {
        color = newColor;
 8006292:	62c1      	str	r1, [r0, #44]	@ 0x2c
    }
 8006294:	4770      	bx	lr

08006296 <_ZNK8touchgfx25AbstractGraphElementNoCWR8getColorEv>:
     * @see setColor
     */
    virtual colortype getColor() const
    {
        return color;
    }
 8006296:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 8006298:	4770      	bx	lr

0800629a <_ZNK8touchgfx25AbstractGraphElementNoCWR16drawCanvasWidgetERKNS_4RectE>:

    virtual bool drawCanvasWidget(const Rect&) const
    {
        return true;
    }
 800629a:	2001      	movs	r0, #1
 800629c:	4770      	bx	lr

0800629e <_ZN8touchgfx25AbstractGraphElementNoCWR10setPainterERNS_15AbstractPainterE>:
    void normalizeRect(Rect& r) const;

private:
    virtual void setPainter(AbstractPainter& /*painter*/)
    {
    }
 800629e:	4770      	bx	lr

080062a0 <_ZN27Screen_1_StatisticsViewBase11updateGraphEv>:
     * Virtual Action Handlers
     */
    virtual void updateGraph()
    {
        // Override and implement this function in Screen_1_Statistics
    }
 80062a0:	4770      	bx	lr

080062a2 <_ZN27Screen_1_StatisticsViewBase10screenInitEv>:
    virtual void screenInit()
    {
        // Override and implement this function in Screen_1_Statistics
    }
 80062a2:	4770      	bx	lr

080062a4 <_ZN27Screen_1_StatisticsViewBase14checkI2CStatusEv>:
    virtual void checkI2CStatus()
    {
        // Override and implement this function in Screen_1_Statistics
    }
 80062a4:	4770      	bx	lr

080062a6 <_ZN27Screen_1_StatisticsViewBase11setupScreenEv>:
    touchgfx::CanvasWidgetRenderer::resetBuffer();
}

void Screen_1_StatisticsViewBase::setupScreen()
{
    transitionBegins();
 80062a6:	6803      	ldr	r3, [r0, #0]
 80062a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062aa:	4718      	bx	r3

080062ac <_ZN27Screen_1_StatisticsViewBase15handleTickEventEv>:
void Screen_1_StatisticsViewBase::handleTickEvent()
{
    //updateGraphInt
    //When every N tick call virtual function
    //Call updateGraph
    updateGraph();
 80062ac:	6803      	ldr	r3, [r0, #0]
{
 80062ae:	b510      	push	{r4, lr}
 80062b0:	4604      	mov	r4, r0
    updateGraph();
 80062b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062b4:	4798      	blx	r3

    //checkI2CStatusInt
    //When every N tick call virtual function
    //Call checkI2CStatus
    checkI2CStatus();
 80062b6:	6823      	ldr	r3, [r4, #0]
 80062b8:	4620      	mov	r0, r4
 80062ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80062bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    checkI2CStatus();
 80062c0:	4718      	bx	r3

080062c2 <_ZN27Screen_1_StatisticsViewBase16transitionBeginsEv>:
void Screen_1_StatisticsViewBase::transitionBegins()
{
    //screenInitInt
    //When screen transition begins call virtual function
    //Call screenInit
    screenInit();
 80062c2:	6803      	ldr	r3, [r0, #0]
 80062c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062c6:	4718      	bx	r3

080062c8 <_ZN8touchgfx17GraphWrapAndClearILs100EED1Ev>:
 * be created as new values are added.
 *
 * @tparam CAPACITY The maximum number of data points on the graph.
 */
template <int16_t CAPACITY>
class GraphWrapAndClear : public GraphWrapAndClearData
 80062c8:	4770      	bx	lr

080062ca <_ZN8touchgfx17GraphWrapAndClearILs100EED0Ev>:
 80062ca:	b510      	push	{r4, lr}
 80062cc:	4604      	mov	r4, r0
 80062ce:	f44f 7137 	mov.w	r1, #732	@ 0x2dc
 80062d2:	f023 fff5 	bl	802a2c0 <_ZdlPvj>
 80062d6:	4620      	mov	r0, r4
 80062d8:	bd10      	pop	{r4, pc}
	...

080062dc <_ZN27Screen_1_StatisticsViewBaseD1Ev>:
Screen_1_StatisticsViewBase::~Screen_1_StatisticsViewBase()
 80062dc:	4b03      	ldr	r3, [pc, #12]	@ (80062ec <_ZN27Screen_1_StatisticsViewBaseD1Ev+0x10>)
 80062de:	b510      	push	{r4, lr}
 80062e0:	4604      	mov	r4, r0
 80062e2:	6003      	str	r3, [r0, #0]
    touchgfx::CanvasWidgetRenderer::resetBuffer();
 80062e4:	f010 fc7a 	bl	8016bdc <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv>
}
 80062e8:	4620      	mov	r0, r4
 80062ea:	bd10      	pop	{r4, pc}
 80062ec:	08040990 	.word	0x08040990

080062f0 <_ZN27Screen_1_StatisticsViewBaseD0Ev>:
Screen_1_StatisticsViewBase::~Screen_1_StatisticsViewBase()
 80062f0:	4b06      	ldr	r3, [pc, #24]	@ (800630c <_ZN27Screen_1_StatisticsViewBaseD0Ev+0x1c>)
 80062f2:	b510      	push	{r4, lr}
 80062f4:	4604      	mov	r4, r0
 80062f6:	6003      	str	r3, [r0, #0]
    touchgfx::CanvasWidgetRenderer::resetBuffer();
 80062f8:	f010 fc70 	bl	8016bdc <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv>
}
 80062fc:	f641 21c8 	movw	r1, #6856	@ 0x1ac8
 8006300:	4620      	mov	r0, r4
 8006302:	f023 ffdd 	bl	802a2c0 <_ZdlPvj>
 8006306:	4620      	mov	r0, r4
 8006308:	bd10      	pop	{r4, pc}
 800630a:	bf00      	nop
 800630c:	08040990 	.word	0x08040990

08006310 <_ZN27Screen_1_StatisticsViewBase16Change_Screen_UpEv>:
{
 8006310:	b508      	push	{r3, lr}

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8006312:	f012 fcf5 	bl	8018d00 <_ZN8touchgfx11Application11getInstanceEv>
}
 8006316:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    application().gotoScreen_1ScreenNoTransition();
 800631a:	f7fe b951 	b.w	80045c0 <_ZN23FrontendApplicationBase30gotoScreen_1ScreenNoTransitionEv>

0800631e <_ZN27Screen_1_StatisticsViewBase19Change_Screen_RightEv>:
{
 800631e:	b508      	push	{r3, lr}
 8006320:	f012 fcee 	bl	8018d00 <_ZN8touchgfx11Application11getInstanceEv>
}
 8006324:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    application().gotoScreen_1_LP_StatisticsScreenNoTransition();
 8006328:	f7fe b96a 	b.w	8004600 <_ZN23FrontendApplicationBase44gotoScreen_1_LP_StatisticsScreenNoTransitionEv>

0800632c <_ZNK8touchgfx17AbstractDataGraph17invalidateContentEv>:
    virtual void invalidateContent() const
 800632c:	b508      	push	{r3, lr}
        if (alpha > 0)
 800632e:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8006332:	b10b      	cbz	r3, 8006338 <_ZNK8touchgfx17AbstractDataGraph17invalidateContentEv+0xc>
            Container::invalidateContent();
 8006334:	f7fe ff39 	bl	80051aa <_ZNK8touchgfx8Drawable17invalidateContentEv>
    }
 8006338:	bd08      	pop	{r3, pc}
	...

0800633c <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs>:
        assert(index >= 0 && index < usedCapacity);
 800633c:	1e0a      	subs	r2, r1, #0
    virtual int indexToDataPointYScaled(int16_t index) const
 800633e:	b510      	push	{r4, lr}
        assert(index >= 0 && index < usedCapacity);
 8006340:	db03      	blt.n	800634a <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0xe>
 8006342:	f9b0 411e 	ldrsh.w	r4, [r0, #286]	@ 0x11e
 8006346:	4294      	cmp	r4, r2
 8006348:	dc06      	bgt.n	8006358 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x1c>
 800634a:	4b08      	ldr	r3, [pc, #32]	@ (800636c <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x30>)
 800634c:	f240 6139 	movw	r1, #1593	@ 0x639
 8006350:	4a07      	ldr	r2, [pc, #28]	@ (8006370 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x34>)
 8006352:	4808      	ldr	r0, [pc, #32]	@ (8006374 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x38>)
 8006354:	f024 f932 	bl	802a5bc <__assert_func>
        return yValues[dataIndex(index)];
 8006358:	6803      	ldr	r3, [r0, #0]
 800635a:	f8d0 4144 	ldr.w	r4, [r0, #324]	@ 0x144
 800635e:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 8006362:	4798      	blx	r3
    }
 8006364:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8006368:	bd10      	pop	{r4, pc}
 800636a:	bf00      	nop
 800636c:	080405ac 	.word	0x080405ac
 8006370:	080405cf 	.word	0x080405cf
 8006374:	0804061e 	.word	0x0804061e

08006378 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs>:
        assert(index >= 0 && index < usedCapacity);
 8006378:	1e0b      	subs	r3, r1, #0
    virtual int indexToDataPointXScaled(int16_t index) const
 800637a:	b510      	push	{r4, lr}
 800637c:	4604      	mov	r4, r0
        assert(index >= 0 && index < usedCapacity);
 800637e:	db03      	blt.n	8006388 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x10>
 8006380:	f9b0 211e 	ldrsh.w	r2, [r0, #286]	@ 0x11e
 8006384:	429a      	cmp	r2, r3
 8006386:	dc06      	bgt.n	8006396 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x1e>
 8006388:	4b07      	ldr	r3, [pc, #28]	@ (80063a8 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x30>)
 800638a:	f240 6133 	movw	r1, #1587	@ 0x633
 800638e:	4a07      	ldr	r2, [pc, #28]	@ (80063ac <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x34>)
 8006390:	4807      	ldr	r0, [pc, #28]	@ (80063b0 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x38>)
 8006392:	f024 f913 	bl	802a5bc <__assert_func>
        return (indexToGlobalIndex(index) * xAxisFactor) + xAxisOffset;
 8006396:	6803      	ldr	r3, [r0, #0]
 8006398:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 800639c:	4798      	blx	r3
 800639e:	e9d4 234f 	ldrd	r2, r3, [r4, #316]	@ 0x13c
    }
 80063a2:	fb02 3000 	mla	r0, r2, r0, r3
 80063a6:	bd10      	pop	{r4, pc}
 80063a8:	080405ac 	.word	0x080405ac
 80063ac:	0804067b 	.word	0x0804067b
 80063b0:	0804061e 	.word	0x0804061e

080063b4 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>:
     * @param  factor2 The second factor.
     * @param  divisor The divisor.
     *
     * @return factor1 * factor2 / divisor as a Q5
     */
    static Q5 muldiv_toQ5(int32_t factor1, int32_t factor2, int32_t divisor)
 80063b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    {
        int32_t remainder;
        int32_t result = muldiv(factor1, factor2, divisor, remainder);
 80063b6:	ab01      	add	r3, sp, #4
    static Q5 muldiv_toQ5(int32_t factor1, int32_t factor2, int32_t divisor)
 80063b8:	4615      	mov	r5, r2
        int32_t result = muldiv(factor1, factor2, divisor, remainder);
 80063ba:	f013 feed 	bl	801a198 <_ZN8touchgfx6muldivElllRl>
        if (result >= 0)
 80063be:	2800      	cmp	r0, #0
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
 80063c0:	462a      	mov	r2, r5
 80063c2:	9901      	ldr	r1, [sp, #4]
 80063c4:	ea4f 1440 	mov.w	r4, r0, lsl #5
 80063c8:	f04f 0020 	mov.w	r0, #32
        if (result >= 0)
 80063cc:	db04      	blt.n	80063d8 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll+0x24>
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
 80063ce:	f013 ff02 	bl	801a1d6 <_ZN8touchgfx6muldivElll>
            return Q5(v + q5.v);
 80063d2:	4420      	add	r0, r4
        {
            return toQ5(result) + muldivQ5(Q5(Rasterizer::POLY_BASE_SIZE), Q5(remainder), Q5(divisor));
        }
        return toQ5(result) - muldivQ5(Q5(Rasterizer::POLY_BASE_SIZE), Q5(remainder), Q5(divisor));
    }
 80063d4:	b003      	add	sp, #12
 80063d6:	bd30      	pop	{r4, r5, pc}
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
 80063d8:	f013 fefd 	bl	801a1d6 <_ZN8touchgfx6muldivElll>
            return Q5(v - q5.v);
 80063dc:	1a20      	subs	r0, r4, r0
        explicit Q5(int i)
 80063de:	e7f9      	b.n	80063d4 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll+0x20>

080063e0 <_ZNK8touchgfx17AbstractDataGraph16valueToScreenYQ5Ei>:
    virtual CWRUtil::Q5 valueToScreenYQ5(int y) const
 80063e0:	b570      	push	{r4, r5, r6, lr}
        return graphArea.getHeight() - (topPadding + bottomPadding);
 80063e2:	f8b0 311a 	ldrh.w	r3, [r0, #282]	@ 0x11a
    virtual CWRUtil::Q5 valueToScreenYQ5(int y) const
 80063e6:	460e      	mov	r6, r1
        return graphArea.getHeight() - (topPadding + bottomPadding);
 80063e8:	f9b0 4114 	ldrsh.w	r4, [r0, #276]	@ 0x114
 80063ec:	f8b0 5042 	ldrh.w	r5, [r0, #66]	@ 0x42
 80063f0:	4423      	add	r3, r4
 80063f2:	1aed      	subs	r5, r5, r3
        return CWRUtil::toQ5(graphAreaHeight + topPadding - 1) - CWRUtil::muldiv_toQ5(y - graphRangeMinY, graphAreaHeight - 1, graphRangeMaxY - graphRangeMinY);
 80063f4:	b22d      	sxth	r5, r5
 80063f6:	442c      	add	r4, r5
 80063f8:	1e69      	subs	r1, r5, #1
 80063fa:	e9d0 324d 	ldrd	r3, r2, [r0, #308]	@ 0x134
 80063fe:	3c01      	subs	r4, #1
 8006400:	1ad2      	subs	r2, r2, r3
 8006402:	1af0      	subs	r0, r6, r3
 8006404:	f7ff ffd6 	bl	80063b4 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>
    }
 8006408:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
 800640c:	bd70      	pop	{r4, r5, r6, pc}

0800640e <_ZNK8touchgfx17AbstractDataGraph16valueToScreenXQ5Ei>:
    virtual CWRUtil::Q5 valueToScreenXQ5(int x) const
 800640e:	b538      	push	{r3, r4, r5, lr}
 8006410:	4604      	mov	r4, r0
 8006412:	460d      	mov	r5, r1
        return graphArea.getWidth() - (leftPadding + rightPadding);
 8006414:	f8b4 3116 	ldrh.w	r3, [r4, #278]	@ 0x116
 8006418:	f8b4 1118 	ldrh.w	r1, [r4, #280]	@ 0x118
 800641c:	440b      	add	r3, r1
 800641e:	f8b4 1040 	ldrh.w	r1, [r4, #64]	@ 0x40
 8006422:	1ac9      	subs	r1, r1, r3
        return CWRUtil::muldiv_toQ5(x - graphRangeMinX, getGraphAreaWidth() - 1, graphRangeMaxX - graphRangeMinX) + CWRUtil::toQ5(leftPadding);
 8006424:	e9d0 024b 	ldrd	r0, r2, [r0, #300]	@ 0x12c
 8006428:	b209      	sxth	r1, r1
 800642a:	1a12      	subs	r2, r2, r0
 800642c:	1a28      	subs	r0, r5, r0
 800642e:	3901      	subs	r1, #1
 8006430:	f7ff ffc0 	bl	80063b4 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>
            return Q5(v + q5.v);
 8006434:	f9b4 3116 	ldrsh.w	r3, [r4, #278]	@ 0x116
    }
 8006438:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800643c:	bd38      	pop	{r3, r4, r5, pc}
	...

08006440 <_ZN8touchgfx23AbstractPainterARGB8888C1Ev>:
        : widgetWidth(0)
 8006440:	2300      	movs	r3, #0
 * @see AbstractPainter
 */
class AbstractPainterARGB8888 : public AbstractPainter
{
public:
    AbstractPainterARGB8888()
 8006442:	b570      	push	{r4, r5, r6, lr}
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8006444:	4e12      	ldr	r6, [pc, #72]	@ (8006490 <_ZN8touchgfx23AbstractPainterARGB8888C1Ev+0x50>)
 8006446:	4604      	mov	r4, r0
 8006448:	8083      	strh	r3, [r0, #4]
        : AbstractPainter()
 800644a:	4b12      	ldr	r3, [pc, #72]	@ (8006494 <_ZN8touchgfx23AbstractPainterARGB8888C1Ev+0x54>)
 800644c:	6003      	str	r3, [r0, #0]
 800644e:	6833      	ldr	r3, [r6, #0]
 8006450:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8006454:	b10a      	cbz	r2, 800645a <_ZN8touchgfx23AbstractPainterARGB8888C1Ev+0x1a>
 8006456:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8006458:	b900      	cbnz	r0, 800645c <_ZN8touchgfx23AbstractPainterARGB8888C1Ev+0x1c>
        return instance->lcdRef;
 800645a:	6898      	ldr	r0, [r3, #8]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 800645c:	6803      	ldr	r3, [r0, #0]
 800645e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006460:	4798      	blx	r3
 8006462:	1e83      	subs	r3, r0, #2
 8006464:	425d      	negs	r5, r3
 8006466:	415d      	adcs	r5, r3
        return auxiliaryLCD;
 8006468:	6833      	ldr	r3, [r6, #0]
 800646a:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
        if (HAL::getInstance()->getAuxiliaryLCD())
 800646c:	b130      	cbz	r0, 800647c <_ZN8touchgfx23AbstractPainterARGB8888C1Ev+0x3c>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 800646e:	6803      	ldr	r3, [r0, #0]
 8006470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006472:	4798      	blx	r3
 8006474:	2802      	cmp	r0, #2
 8006476:	bf08      	it	eq
 8006478:	f045 0501 	orreq.w	r5, r5, #1
    {
        assert(compatibleFramebuffer(Bitmap::ARGB8888) && "The chosen painter only works with ARGB8888 displays");
 800647c:	b92d      	cbnz	r5, 800648a <_ZN8touchgfx23AbstractPainterARGB8888C1Ev+0x4a>
 800647e:	4b06      	ldr	r3, [pc, #24]	@ (8006498 <_ZN8touchgfx23AbstractPainterARGB8888C1Ev+0x58>)
 8006480:	2128      	movs	r1, #40	@ 0x28
 8006482:	4a06      	ldr	r2, [pc, #24]	@ (800649c <_ZN8touchgfx23AbstractPainterARGB8888C1Ev+0x5c>)
 8006484:	4806      	ldr	r0, [pc, #24]	@ (80064a0 <_ZN8touchgfx23AbstractPainterARGB8888C1Ev+0x60>)
 8006486:	f024 f899 	bl	802a5bc <__assert_func>
    }
 800648a:	4620      	mov	r0, r4
 800648c:	bd70      	pop	{r4, r5, r6, pc}
 800648e:	bf00      	nop
 8006490:	20029ed8 	.word	0x20029ed8
 8006494:	080407d8 	.word	0x080407d8
 8006498:	080406ca 	.word	0x080406ca
 800649c:	0804072c 	.word	0x0804072c
 80064a0:	08040769 	.word	0x08040769

080064a4 <_ZN8touchgfx12GraphLabelsYC1Ev>:

/**
 * GraphLabelsY will draw labels along the Y axis at given intervals. By combining two
 * GraphLabelsY it is possible to have different appearance for major and minor y offsets.
 */
class GraphLabelsY : public GraphLabelsBase
 80064a4:	b510      	push	{r4, lr}
 80064a6:	4604      	mov	r4, r0
        : CanvasWidget()
 80064a8:	f00d fa1c 	bl	80138e4 <_ZN8touchgfx12CanvasWidgetC1Ev>
          dataScale(1), labelInterval(0), labelTypedText(TYPED_TEXT_INVALID), labelRotation(TEXT_ROTATE_0), labelDecimals(0), labelDecimalPoint('.'), majorLabel(0)
 80064ac:	2300      	movs	r3, #0
 80064ae:	2201      	movs	r2, #1
class GraphLabelsY : public GraphLabelsBase
 80064b0:	4620      	mov	r0, r4
          dataScale(1), labelInterval(0), labelTypedText(TYPED_TEXT_INVALID), labelRotation(TEXT_ROTATE_0), labelDecimals(0), labelDecimalPoint('.'), majorLabel(0)
 80064b2:	6363      	str	r3, [r4, #52]	@ 0x34
 80064b4:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80064b8:	f8a4 3042 	strh.w	r3, [r4, #66]	@ 0x42
 80064bc:	64a3      	str	r3, [r4, #72]	@ 0x48
 80064be:	e9c4 320b 	strd	r3, r2, [r4, #44]	@ 0x2c
 80064c2:	4a05      	ldr	r2, [pc, #20]	@ (80064d8 <_ZN8touchgfx12GraphLabelsYC1Ev+0x34>)
class GraphLabelsY : public GraphLabelsBase
 80064c4:	4b05      	ldr	r3, [pc, #20]	@ (80064dc <_ZN8touchgfx12GraphLabelsYC1Ev+0x38>)
 80064c6:	63a2      	str	r2, [r4, #56]	@ 0x38
 80064c8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80064cc:	6023      	str	r3, [r4, #0]
 80064ce:	87a2      	strh	r2, [r4, #60]	@ 0x3c
          dataScale(1), labelInterval(0), labelTypedText(TYPED_TEXT_INVALID), labelRotation(TEXT_ROTATE_0), labelDecimals(0), labelDecimalPoint('.'), majorLabel(0)
 80064d0:	222e      	movs	r2, #46	@ 0x2e
 80064d2:	f8a4 2044 	strh.w	r2, [r4, #68]	@ 0x44
class GraphLabelsY : public GraphLabelsBase
 80064d6:	bd10      	pop	{r4, pc}
 80064d8:	0803f9a8 	.word	0x0803f9a8
 80064dc:	080423dc 	.word	0x080423dc

080064e0 <_ZN8touchgfx17GraphWrapAndClearILs100EEC1Ev>:
{
public:
    GraphWrapAndClear()
 80064e0:	b510      	push	{r4, lr}
        : AbstractDataGraph(capacity), xAxisFactor(1), xAxisOffset(0), yValues(values), dataCounter(0)
 80064e2:	2164      	movs	r1, #100	@ 0x64
 80064e4:	4604      	mov	r4, r0
 80064e6:	f00e f947 	bl	8014778 <_ZN8touchgfx17AbstractDataGraphC1Es>
 80064ea:	4b09      	ldr	r3, [pc, #36]	@ (8006510 <_ZN8touchgfx17GraphWrapAndClearILs100EEC1Ev+0x30>)
 80064ec:	2100      	movs	r1, #0
        DynamicDataGraph::setGraphRangeX(0, capacity - 1);
 80064ee:	4620      	mov	r0, r4
        : AbstractDataGraph(capacity), xAxisFactor(1), xAxisOffset(0), yValues(values), dataCounter(0)
 80064f0:	6023      	str	r3, [r4, #0]
 80064f2:	2301      	movs	r3, #1
        DynamicDataGraph::setGraphRangeX(0, capacity - 1);
 80064f4:	2263      	movs	r2, #99	@ 0x63
        : AbstractDataGraph(capacity), xAxisFactor(1), xAxisOffset(0), yValues(values), dataCounter(0)
 80064f6:	e9c4 314f 	strd	r3, r1, [r4, #316]	@ 0x13c
        : GraphWrapAndClearData(CAPACITY, y)
 80064fa:	f504 73a6 	add.w	r3, r4, #332	@ 0x14c
 80064fe:	e9c4 3151 	strd	r3, r1, [r4, #324]	@ 0x144
        DynamicDataGraph::setGraphRangeX(0, capacity - 1);
 8006502:	f7ff fb8b 	bl	8005c1c <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>
 8006506:	4b03      	ldr	r3, [pc, #12]	@ (8006514 <_ZN8touchgfx17GraphWrapAndClearILs100EEC1Ev+0x34>)
    {
    }
 8006508:	4620      	mov	r0, r4
        : GraphWrapAndClearData(CAPACITY, y)
 800650a:	6023      	str	r3, [r4, #0]
    }
 800650c:	bd10      	pop	{r4, pc}
 800650e:	bf00      	nop
 8006510:	08042098 	.word	0x08042098
 8006514:	080407f8 	.word	0x080407f8

08006518 <_ZN27Screen_1_StatisticsViewBaseC1Ev>:
Screen_1_StatisticsViewBase::Screen_1_StatisticsViewBase()
 8006518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800651c:	4604      	mov	r4, r0
 800651e:	b09b      	sub	sp, #108	@ 0x6c
 8006520:	2500      	movs	r5, #0
 8006522:	f014 f803 	bl	801a52c <_ZN8touchgfx6ScreenC1Ev>
 8006526:	4627      	mov	r7, r4
 8006528:	4be2      	ldr	r3, [pc, #904]	@ (80068b4 <_ZN27Screen_1_StatisticsViewBaseC1Ev+0x39c>)
        : Widget(), alpha(255), color(0)
 800652a:	2226      	movs	r2, #38	@ 0x26
 800652c:	4629      	mov	r1, r5
 800652e:	63e5      	str	r5, [r4, #60]	@ 0x3c
 8006530:	f104 0a6c 	add.w	sl, r4, #108	@ 0x6c
 8006534:	f847 3b40 	str.w	r3, [r7], #64
 8006538:	4638      	mov	r0, r7
 800653a:	f024 fff1 	bl	802b520 <memset>
 800653e:	4638      	mov	r0, r7
 8006540:	f7fe fea4 	bl	800528c <_ZN8touchgfx6WidgetC1Ev>
 8006544:	4bdc      	ldr	r3, [pc, #880]	@ (80068b8 <_ZN27Screen_1_StatisticsViewBaseC1Ev+0x3a0>)
 8006546:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 800654a:	a918      	add	r1, sp, #96	@ 0x60
 800654c:	6423      	str	r3, [r4, #64]	@ 0x40
 800654e:	23ff      	movs	r3, #255	@ 0xff
 8006550:	4650      	mov	r0, sl
        : color(col)
 8006552:	66a5      	str	r5, [r4, #104]	@ 0x68
 8006554:	f884 3066 	strb.w	r3, [r4, #102]	@ 0x66
 8006558:	f104 0bf0 	add.w	fp, r4, #240	@ 0xf0
 800655c:	f8ad 6060 	strh.w	r6, [sp, #96]	@ 0x60
 8006560:	f7fe fea6 	bl	80052b0 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8006564:	f104 0398 	add.w	r3, r4, #152	@ 0x98
 8006568:	a918      	add	r1, sp, #96	@ 0x60
 800656a:	f8ad 6060 	strh.w	r6, [sp, #96]	@ 0x60
 800656e:	f504 79a4 	add.w	r9, r4, #328	@ 0x148
 8006572:	4618      	mov	r0, r3
 8006574:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006576:	f7fe fe9b 	bl	80052b0 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800657a:	f104 03c4 	add.w	r3, r4, #196	@ 0xc4
 800657e:	a918      	add	r1, sp, #96	@ 0x60
 8006580:	f8ad 6060 	strh.w	r6, [sp, #96]	@ 0x60
 8006584:	4618      	mov	r0, r3
 8006586:	930c      	str	r3, [sp, #48]	@ 0x30
 8006588:	f7fe fe92 	bl	80052b0 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800658c:	a918      	add	r1, sp, #96	@ 0x60
 800658e:	4658      	mov	r0, fp
 8006590:	f8ad 6060 	strh.w	r6, [sp, #96]	@ 0x60
 8006594:	f7fe fe8c 	bl	80052b0 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8006598:	f504 738e 	add.w	r3, r4, #284	@ 0x11c
 800659c:	a918      	add	r1, sp, #96	@ 0x60
 800659e:	f8ad 6060 	strh.w	r6, [sp, #96]	@ 0x60
 80065a2:	4618      	mov	r0, r3
 80065a4:	930d      	str	r3, [sp, #52]	@ 0x34
 80065a6:	f7fe fe83 	bl	80052b0 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80065aa:	4648      	mov	r0, r9
 80065ac:	f7ff ff98 	bl	80064e0 <_ZN8touchgfx17GraphWrapAndClearILs100EEC1Ev>
 80065b0:	f204 4324 	addw	r3, r4, #1060	@ 0x424
     * Initializes a new instance of the PainterARGB8888 class.
     *
     * @param  color (Optional) the color, default is black.
     */
    PainterARGB8888(colortype color = 0)
        : AbstractPainterARGB8888(), AbstractPainterColor(color)
 80065b4:	4ec1      	ldr	r6, [pc, #772]	@ (80068bc <_ZN27Screen_1_StatisticsViewBaseC1Ev+0x3a4>)
 80065b6:	f204 48b4 	addw	r8, r4, #1204	@ 0x4b4
 80065ba:	4618      	mov	r0, r3
 80065bc:	930e      	str	r3, [sp, #56]	@ 0x38
 80065be:	f7ff ff71 	bl	80064a4 <_ZN8touchgfx12GraphLabelsYC1Ev>
 80065c2:	f504 638e 	add.w	r3, r4, #1136	@ 0x470
 80065c6:	4618      	mov	r0, r3
 80065c8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80065ca:	f00d f98b 	bl	80138e4 <_ZN8touchgfx12CanvasWidgetC1Ev>
 */
class GraphElementLine : public AbstractGraphElement
{
public:
    GraphElementLine()
        : lineWidth(2)
 80065ce:	4abc      	ldr	r2, [pc, #752]	@ (80068c0 <_ZN27Screen_1_StatisticsViewBaseC1Ev+0x3a8>)
 80065d0:	f04f 0302 	mov.w	r3, #2
 80065d4:	f8c4 2470 	str.w	r2, [r4, #1136]	@ 0x470
 80065d8:	f504 6294 	add.w	r2, r4, #1184	@ 0x4a0
 80065dc:	f884 349c 	strb.w	r3, [r4, #1180]	@ 0x49c
 80065e0:	4610      	mov	r0, r2
 80065e2:	9210      	str	r2, [sp, #64]	@ 0x40
 80065e4:	f7ff ff2c 	bl	8006440 <_ZN8touchgfx23AbstractPainterARGB8888C1Ev>
 80065e8:	f106 0324 	add.w	r3, r6, #36	@ 0x24
 80065ec:	4640      	mov	r0, r8
 80065ee:	f8c4 64a0 	str.w	r6, [r4, #1184]	@ 0x4a0
 80065f2:	f8c4 34a8 	str.w	r3, [r4, #1192]	@ 0x4a8
     *
     * @param  color The color.
     */
    virtual void setColor(colortype color)
    {
        painterColor = color;
 80065f6:	f8c4 54ac 	str.w	r5, [r4, #1196]	@ 0x4ac
 80065fa:	f7ff ff71 	bl	80064e0 <_ZN8touchgfx17GraphWrapAndClearILs100EEC1Ev>
 80065fe:	f504 62f2 	add.w	r2, r4, #1936	@ 0x790
 8006602:	4610      	mov	r0, r2
 8006604:	9211      	str	r2, [sp, #68]	@ 0x44
 8006606:	f7ff ff4d 	bl	80064a4 <_ZN8touchgfx12GraphLabelsYC1Ev>
 800660a:	f204 72dc 	addw	r2, r4, #2012	@ 0x7dc
        : CanvasWidget()
 800660e:	4610      	mov	r0, r2
 8006610:	9212      	str	r2, [sp, #72]	@ 0x48
 8006612:	f00d f967 	bl	80138e4 <_ZN8touchgfx12CanvasWidgetC1Ev>
        : lineWidth(2)
 8006616:	f04f 0302 	mov.w	r3, #2
 800661a:	4aa9      	ldr	r2, [pc, #676]	@ (80068c0 <_ZN27Screen_1_StatisticsViewBaseC1Ev+0x3a8>)
 800661c:	f884 3808 	strb.w	r3, [r4, #2056]	@ 0x808
 8006620:	f604 030c 	addw	r3, r4, #2060	@ 0x80c
 8006624:	f8c4 27dc 	str.w	r2, [r4, #2012]	@ 0x7dc
 8006628:	4618      	mov	r0, r3
 800662a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800662c:	f7ff ff08 	bl	8006440 <_ZN8touchgfx23AbstractPainterARGB8888C1Ev>
 8006630:	f106 0324 	add.w	r3, r6, #36	@ 0x24
 8006634:	f8c4 680c 	str.w	r6, [r4, #2060]	@ 0x80c
 8006638:	f8c4 3814 	str.w	r3, [r4, #2068]	@ 0x814
 800663c:	f504 6302 	add.w	r3, r4, #2080	@ 0x820
 8006640:	f8c4 5818 	str.w	r5, [r4, #2072]	@ 0x818
        : TextArea()
 8006644:	4618      	mov	r0, r3
        : TextAreaWithWildcardBase(), wc1(0)
 8006646:	4e9f      	ldr	r6, [pc, #636]	@ (80068c4 <_ZN27Screen_1_StatisticsViewBaseC1Ev+0x3ac>)
 8006648:	9302      	str	r3, [sp, #8]
        : TextArea()
 800664a:	f7fe fe4b 	bl	80052e4 <_ZN8touchgfx8TextAreaC1Ev>
 800664e:	f604 036c 	addw	r3, r4, #2156	@ 0x86c
        : TextAreaWithWildcardBase(), wc1(0)
 8006652:	f8c4 6820 	str.w	r6, [r4, #2080]	@ 0x820
 8006656:	f8c4 5868 	str.w	r5, [r4, #2152]	@ 0x868
 800665a:	4618      	mov	r0, r3
 800665c:	9303      	str	r3, [sp, #12]
 800665e:	f7fe fe41 	bl	80052e4 <_ZN8touchgfx8TextAreaC1Ev>
 8006662:	f604 03b4 	addw	r3, r4, #2228	@ 0x8b4
        : TextArea()
 8006666:	4618      	mov	r0, r3
 8006668:	9304      	str	r3, [sp, #16]
 800666a:	f7fe fe3b 	bl	80052e4 <_ZN8touchgfx8TextAreaC1Ev>
 800666e:	f504 6310 	add.w	r3, r4, #2304	@ 0x900
        : TextAreaWithWildcardBase(), wc1(0)
 8006672:	f8c4 68b4 	str.w	r6, [r4, #2228]	@ 0x8b4
 8006676:	1d26      	adds	r6, r4, #4
 8006678:	4618      	mov	r0, r3
 800667a:	f8c4 58fc 	str.w	r5, [r4, #2300]	@ 0x8fc
 800667e:	9305      	str	r3, [sp, #20]
 8006680:	f7fe fe30 	bl	80052e4 <_ZN8touchgfx8TextAreaC1Ev>
 8006684:	f604 1348 	addw	r3, r4, #2376	@ 0x948
 8006688:	4618      	mov	r0, r3
 800668a:	9306      	str	r3, [sp, #24]
 800668c:	f7fe fe2a 	bl	80052e4 <_ZN8touchgfx8TextAreaC1Ev>
 8006690:	f504 6319 	add.w	r3, r4, #2448	@ 0x990
 8006694:	4618      	mov	r0, r3
 8006696:	9307      	str	r3, [sp, #28]
 8006698:	f7fe fe24 	bl	80052e4 <_ZN8touchgfx8TextAreaC1Ev>
 800669c:	f604 13d8 	addw	r3, r4, #2520	@ 0x9d8
 80066a0:	4618      	mov	r0, r3
 80066a2:	9308      	str	r3, [sp, #32]
 80066a4:	f7fe fe1e 	bl	80052e4 <_ZN8touchgfx8TextAreaC1Ev>
 80066a8:	f504 6322 	add.w	r3, r4, #2592	@ 0xa20
 80066ac:	4618      	mov	r0, r3
 80066ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80066b0:	f7fe fe18 	bl	80052e4 <_ZN8touchgfx8TextAreaC1Ev>
 80066b4:	f604 2368 	addw	r3, r4, #2664	@ 0xa68
 80066b8:	4618      	mov	r0, r3
 80066ba:	930a      	str	r3, [sp, #40]	@ 0x28
 80066bc:	f7fe fe12 	bl	80052e4 <_ZN8touchgfx8TextAreaC1Ev>
    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 80066c0:	f44f 617f 	mov.w	r1, #4080	@ 0xff0
 80066c4:	f604 20d8 	addw	r0, r4, #2776	@ 0xad8
 80066c8:	f010 fa7e 	bl	8016bc8 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>
    __background.setPosition(0, 0, 272, 480);
 80066cc:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80066d0:	462a      	mov	r2, r5
 80066d2:	4638      	mov	r0, r7
 80066d4:	4629      	mov	r1, r5
 80066d6:	9300      	str	r3, [sp, #0]
 80066d8:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80066dc:	f7fe fdc2 	bl	8005264 <_ZN8touchgfx8Drawable11setPositionEssss>
        color = newColor;
 80066e0:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 80066e4:	4639      	mov	r1, r7
 80066e6:	4630      	mov	r0, r6
 80066e8:	66a3      	str	r3, [r4, #104]	@ 0x68
 80066ea:	f04f 0707 	mov.w	r7, #7
 80066ee:	f00b fe57 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    BG_2.setXY(0, 300);
 80066f2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80066f6:	4650      	mov	r0, sl
 80066f8:	4629      	mov	r1, r5
 80066fa:	f7fe fda6 	bl	800524a <_ZN8touchgfx8Drawable5setXYEss>
    BG_2.setBitmap(touchgfx::Bitmap(BITMAP_GRAPH_BG_ID));
 80066fe:	4650      	mov	r0, sl
 8006700:	a918      	add	r1, sp, #96	@ 0x60
 8006702:	f8ad 7060 	strh.w	r7, [sp, #96]	@ 0x60
 8006706:	f00f fb63 	bl	8015dd0 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800670a:	4651      	mov	r1, sl
 800670c:	4630      	mov	r0, r6
        color = newColor;
 800670e:	f8df a1bc 	ldr.w	sl, [pc, #444]	@ 80068cc <_ZN27Screen_1_StatisticsViewBaseC1Ev+0x3b4>
 8006712:	f00b fe45 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    BG_1.setXY(0, 120);
 8006716:	2278      	movs	r2, #120	@ 0x78
 8006718:	4629      	mov	r1, r5
 800671a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800671c:	f7fe fd95 	bl	800524a <_ZN8touchgfx8Drawable5setXYEss>
    BG_1.setBitmap(touchgfx::Bitmap(BITMAP_GRAPH_BG_ID));
 8006720:	a918      	add	r1, sp, #96	@ 0x60
 8006722:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8006724:	f8ad 7060 	strh.w	r7, [sp, #96]	@ 0x60
 8006728:	f00f fb52 	bl	8015dd0 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800672c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800672e:	4630      	mov	r0, r6
 8006730:	f00b fe36 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    BG_Small.setXY(0, 0);
 8006734:	462a      	mov	r2, r5
 8006736:	4629      	mov	r1, r5
 8006738:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800673a:	f7fe fd86 	bl	800524a <_ZN8touchgfx8Drawable5setXYEss>
 800673e:	f04f 0302 	mov.w	r3, #2
    BG_Small.setBitmap(touchgfx::Bitmap(BITMAP_BG_SMALL_ID));
 8006742:	a918      	add	r1, sp, #96	@ 0x60
 8006744:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8006746:	f8ad 3060 	strh.w	r3, [sp, #96]	@ 0x60
 800674a:	f00f fb41 	bl	8015dd0 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800674e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8006750:	4630      	mov	r0, r6
 8006752:	f00b fe25 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Line.setXY(0, 299);
 8006756:	f240 122b 	movw	r2, #299	@ 0x12b
 800675a:	4658      	mov	r0, fp
 800675c:	4629      	mov	r1, r5
 800675e:	f7fe fd74 	bl	800524a <_ZN8touchgfx8Drawable5setXYEss>
 8006762:	2304      	movs	r3, #4
    Line.setBitmap(touchgfx::Bitmap(BITMAP_FILLER_2_ID));
 8006764:	4658      	mov	r0, fp
 8006766:	a918      	add	r1, sp, #96	@ 0x60
 8006768:	f8ad 3060 	strh.w	r3, [sp, #96]	@ 0x60
 800676c:	f00f fb30 	bl	8015dd0 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8006770:	4659      	mov	r1, fp
 8006772:	4630      	mov	r0, r6
 8006774:	f00b fe14 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Banner.setXY(0, 0);
 8006778:	462a      	mov	r2, r5
 800677a:	4629      	mov	r1, r5
 800677c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800677e:	f7fe fd64 	bl	800524a <_ZN8touchgfx8Drawable5setXYEss>
 8006782:	230d      	movs	r3, #13
    Banner.setBitmap(touchgfx::Bitmap(BITMAP_SCREEN_2_ID));
 8006784:	a918      	add	r1, sp, #96	@ 0x60
 8006786:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8006788:	f8ad 3060 	strh.w	r3, [sp, #96]	@ 0x60
 800678c:	f00f fb20 	bl	8015dd0 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8006790:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8006792:	4630      	mov	r0, r6
 8006794:	f00b fe04 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    AFK_Graph.setPosition(0, 301, 272, 179);
 8006798:	23b3      	movs	r3, #179	@ 0xb3
 800679a:	4648      	mov	r0, r9
 800679c:	f240 122d 	movw	r2, #301	@ 0x12d
 80067a0:	4629      	mov	r1, r5
 80067a2:	9300      	str	r3, [sp, #0]
 80067a4:	f44f 7388 	mov.w	r3, #272	@ 0x110
    AFK_Graph.setGraphAreaPadding(6, 6, 6, 6);
 80067a8:	f04f 0b06 	mov.w	fp, #6
    AFK_Graph.setPosition(0, 301, 272, 179);
 80067ac:	f7fe fd5a 	bl	8005264 <_ZN8touchgfx8Drawable11setPositionEssss>
    AFK_Graph.setScale(1);
 80067b0:	4648      	mov	r0, r9
 80067b2:	462a      	mov	r2, r5
 80067b4:	2101      	movs	r1, #1
 80067b6:	f7ff fbef 	bl	8005f98 <_ZN8touchgfx16DynamicDataGraph8setScaleEib>
    AFK_Graph.setGraphAreaMargin(37, 35, 0, 5);
 80067ba:	2305      	movs	r3, #5
 80067bc:	4648      	mov	r0, r9
 80067be:	2223      	movs	r2, #35	@ 0x23
 80067c0:	2125      	movs	r1, #37	@ 0x25
 80067c2:	9300      	str	r3, [sp, #0]
 80067c4:	462b      	mov	r3, r5
        dataScale = scale;
 80067c6:	2701      	movs	r7, #1
 80067c8:	f00d ff87 	bl	80146da <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>
    AFK_Graph.setGraphAreaPadding(6, 6, 6, 6);
 80067cc:	465b      	mov	r3, fp
 80067ce:	4648      	mov	r0, r9
 80067d0:	465a      	mov	r2, fp
 80067d2:	4659      	mov	r1, fp
 80067d4:	f8cd b000 	str.w	fp, [sp]
 80067d8:	f00d fe94 	bl	8014504 <_ZN8touchgfx17AbstractDataGraph19setGraphAreaPaddingEssss>
    AFK_Graph.setGraphRangeY(0, 100);
 80067dc:	4648      	mov	r0, r9
 80067de:	2264      	movs	r2, #100	@ 0x64
 80067e0:	4629      	mov	r1, r5
 80067e2:	f7ff faac 	bl	8005d3e <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEii>
        setIntervalScaled(AbstractDataGraph::int2scaled(interval, dataScale));
 80067e6:	f8d4 1454 	ldr.w	r1, [r4, #1108]	@ 0x454
        return i * scale;
 80067ea:	230a      	movs	r3, #10
        labelInterval = AbstractDataGraph::convertToNewScale(labelInterval, dataScale, scale);
 80067ec:	2201      	movs	r2, #1
 80067ee:	f8c4 a450 	str.w	sl, [r4, #1104]	@ 0x450
 80067f2:	fb03 f001 	mul.w	r0, r3, r1
class TypedText
 80067f6:	231b      	movs	r3, #27
 * @return The absolute (non-negative) value of d.
 */
template <typename T>
T abs(T d)
{
    return (d < 0) ? -d : d;
 80067f8:	2800      	cmp	r0, #0
 80067fa:	f8a4 3460 	strh.w	r3, [r4, #1120]	@ 0x460
 80067fe:	bfb8      	it	lt
 8006800:	4240      	neglt	r0, r0
        labelInterval = abs(interval);
 8006802:	f8c4 0458 	str.w	r0, [r4, #1112]	@ 0x458
        labelInterval = AbstractDataGraph::convertToNewScale(labelInterval, dataScale, scale);
 8006806:	f00e f81b 	bl	8014840 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
    AFK_Graph.addLeftElement(AFK_GraphMajorYAxisLabel);
 800680a:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800680c:	f8c4 0458 	str.w	r0, [r4, #1112]	@ 0x458
 8006810:	4648      	mov	r0, r9
        dataScale = scale;
 8006812:	f8c4 7454 	str.w	r7, [r4, #1108]	@ 0x454
 8006816:	f00d fe92 	bl	801453e <_ZN8touchgfx17AbstractDataGraph14addLeftElementERNS_23AbstractGraphDecorationE>
    }

    virtual void setColor(colortype color)
    {
        AbstractPainterColor::setColor(color);
        painterRed = Color::getRed(color);
 800681a:	f648 72ff 	movw	r2, #36863	@ 0x8fff
 800681e:	4b2a      	ldr	r3, [pc, #168]	@ (80068c8 <_ZN27Screen_1_StatisticsViewBaseC1Ev+0x3b0>)
        painterGreen = Color::getGreen(color);
        painterBlue = Color::getBlue(color);
 8006820:	f04f 016c 	mov.w	r1, #108	@ 0x6c
     *
     * @see getLineWidth
     */
    FORCE_INLINE_FUNCTION void setLineWidth(uint8_t width)
    {
        lineWidth = width;
 8006824:	f04f 0002 	mov.w	r0, #2
        painterRed = Color::getRed(color);
 8006828:	f8a4 24b0 	strh.w	r2, [r4, #1200]	@ 0x4b0
        canvasPainter = &painter;
 800682c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800682e:	f8c4 34ac 	str.w	r3, [r4, #1196]	@ 0x4ac
 8006832:	f8c4 2498 	str.w	r2, [r4, #1176]	@ 0x498
        painterBlue = Color::getBlue(color);
 8006836:	f884 14b2 	strb.w	r1, [r4, #1202]	@ 0x4b2
 800683a:	f884 049c 	strb.w	r0, [r4, #1180]	@ 0x49c
    AFK_Graph.addGraphElement(AFK_GraphLine1);
 800683e:	4648      	mov	r0, r9
 8006840:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006842:	f00d fe6a 	bl	801451a <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>
 8006846:	4649      	mov	r1, r9
 8006848:	4630      	mov	r0, r6
    EV_Text.setPosition(130, 141, 39, 15);
 800684a:	f04f 090f 	mov.w	r9, #15
 800684e:	f00b fda7 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Events_Graph.setPosition(0, 120, 272, 180);
 8006852:	23b4      	movs	r3, #180	@ 0xb4
 8006854:	4640      	mov	r0, r8
 8006856:	2278      	movs	r2, #120	@ 0x78
 8006858:	4629      	mov	r1, r5
 800685a:	9300      	str	r3, [sp, #0]
 800685c:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8006860:	f7fe fd00 	bl	8005264 <_ZN8touchgfx8Drawable11setPositionEssss>
    Events_Graph.setScale(1);
 8006864:	4639      	mov	r1, r7
 8006866:	4640      	mov	r0, r8
 8006868:	462a      	mov	r2, r5
 800686a:	f7ff fb95 	bl	8005f98 <_ZN8touchgfx16DynamicDataGraph8setScaleEib>
    Events_Graph.setGraphAreaMargin(37, 43, 0, 5);
 800686e:	f04f 0c05 	mov.w	ip, #5
 8006872:	4640      	mov	r0, r8
 8006874:	462b      	mov	r3, r5
 8006876:	f8cd c000 	str.w	ip, [sp]
 800687a:	222b      	movs	r2, #43	@ 0x2b
 800687c:	2125      	movs	r1, #37	@ 0x25
 800687e:	f00d ff2c 	bl	80146da <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>
    Events_Graph.setGraphAreaPadding(6, 6, 6, 6);
 8006882:	465b      	mov	r3, fp
 8006884:	4640      	mov	r0, r8
 8006886:	465a      	mov	r2, fp
 8006888:	4659      	mov	r1, fp
 800688a:	f8cd b000 	str.w	fp, [sp]
 800688e:	f00d fe39 	bl	8014504 <_ZN8touchgfx17AbstractDataGraph19setGraphAreaPaddingEssss>
    Events_Graph.setGraphRangeY(0, 5000);
 8006892:	4640      	mov	r0, r8
 8006894:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006898:	4629      	mov	r1, r5
 800689a:	f7ff fa50 	bl	8005d3e <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEii>
        setIntervalScaled(AbstractDataGraph::int2scaled(interval, dataScale));
 800689e:	f8d4 17c0 	ldr.w	r1, [r4, #1984]	@ 0x7c0
 80068a2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80068a6:	231c      	movs	r3, #28
        labelInterval = AbstractDataGraph::convertToNewScale(labelInterval, dataScale, scale);
 80068a8:	463a      	mov	r2, r7
        color = newColor;
 80068aa:	f8c4 a7bc 	str.w	sl, [r4, #1980]	@ 0x7bc
 80068ae:	4348      	muls	r0, r1
 80068b0:	e00e      	b.n	80068d0 <_ZN27Screen_1_StatisticsViewBaseC1Ev+0x3b8>
 80068b2:	bf00      	nop
 80068b4:	08040990 	.word	0x08040990
 80068b8:	0804250c 	.word	0x0804250c
 80068bc:	08041e5c 	.word	0x08041e5c
 80068c0:	08042360 	.word	0x08042360
 80068c4:	08040490 	.word	0x08040490
 80068c8:	ffff8f6c 	.word	0xffff8f6c
 80068cc:	ff407ec9 	.word	0xff407ec9
 80068d0:	f8a4 37cc 	strh.w	r3, [r4, #1996]	@ 0x7cc
 80068d4:	2800      	cmp	r0, #0
 80068d6:	bfb8      	it	lt
 80068d8:	4240      	neglt	r0, r0
        labelInterval = abs(interval);
 80068da:	f8c4 07c4 	str.w	r0, [r4, #1988]	@ 0x7c4
        labelInterval = AbstractDataGraph::convertToNewScale(labelInterval, dataScale, scale);
 80068de:	f00d ffaf 	bl	8014840 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
    Events_Graph.addLeftElement(Events_GraphMajorYAxisLabel);
 80068e2:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80068e4:	f8c4 07c4 	str.w	r0, [r4, #1988]	@ 0x7c4
 80068e8:	4640      	mov	r0, r8
        dataScale = scale;
 80068ea:	f8c4 77c0 	str.w	r7, [r4, #1984]	@ 0x7c0
 80068ee:	af14      	add	r7, sp, #80	@ 0x50
 80068f0:	f00d fe25 	bl	801453e <_ZN8touchgfx17AbstractDataGraph14addLeftElementERNS_23AbstractGraphDecorationE>
 80068f4:	4bc4      	ldr	r3, [pc, #784]	@ (8006c08 <_ZN27Screen_1_StatisticsViewBaseC1Ev+0x6f0>)
        painterRed = Color::getRed(color);
 80068f6:	f648 72ff 	movw	r2, #36863	@ 0x8fff
        painterBlue = Color::getBlue(color);
 80068fa:	f04f 016c 	mov.w	r1, #108	@ 0x6c
        lineWidth = width;
 80068fe:	f04f 0002 	mov.w	r0, #2
 8006902:	f8c4 3818 	str.w	r3, [r4, #2072]	@ 0x818
 8006906:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
        painterRed = Color::getRed(color);
 8006908:	f8a4 281c 	strh.w	r2, [r4, #2076]	@ 0x81c
 800690c:	f8c4 3804 	str.w	r3, [r4, #2052]	@ 0x804
        painterBlue = Color::getBlue(color);
 8006910:	f884 181e 	strb.w	r1, [r4, #2078]	@ 0x81e
 8006914:	f884 0808 	strb.w	r0, [r4, #2056]	@ 0x808
    Events_Graph.addGraphElement(Events_GraphLine1);
 8006918:	4640      	mov	r0, r8
 800691a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800691c:	f00d fdfd 	bl	801451a <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>
 8006920:	4641      	mov	r1, r8
 8006922:	4630      	mov	r0, r6
    Unicode::snprintf(EV_TextBuffer, EV_TEXT_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_6OE1).getText());
 8006924:	f504 682b 	add.w	r8, r4, #2736	@ 0xab0
 8006928:	f00b fd3a 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    EV_Text.setPosition(130, 141, 39, 15);
 800692c:	228d      	movs	r2, #141	@ 0x8d
 800692e:	2327      	movs	r3, #39	@ 0x27
 8006930:	2182      	movs	r1, #130	@ 0x82
 8006932:	9802      	ldr	r0, [sp, #8]
 8006934:	f8cd 9000 	str.w	r9, [sp]
 8006938:	f7fe fc94 	bl	8005264 <_ZN8touchgfx8Drawable11setPositionEssss>
 800693c:	f8d4 3820 	ldr.w	r3, [r4, #2080]	@ 0x820
 8006940:	9902      	ldr	r1, [sp, #8]
 8006942:	4638      	mov	r0, r7
 8006944:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
        color = newColor;
 8006948:	f8c4 a850 	str.w	sl, [r4, #2128]	@ 0x850
        linespace = space;
 800694c:	f8a4 5854 	strh.w	r5, [r4, #2132]	@ 0x854
        boundingArea = calculateBoundingArea();
 8006950:	4798      	blx	r3
 8006952:	f604 035c 	addw	r3, r4, #2140	@ 0x85c
 8006956:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800695a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800695e:	4bab      	ldr	r3, [pc, #684]	@ (8006c0c <_ZN27Screen_1_StatisticsViewBaseC1Ev+0x6f4>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	b92b      	cbnz	r3, 8006970 <_ZN27Screen_1_StatisticsViewBaseC1Ev+0x458>
 8006964:	4baa      	ldr	r3, [pc, #680]	@ (8006c10 <_ZN27Screen_1_StatisticsViewBaseC1Ev+0x6f8>)
 8006966:	2160      	movs	r1, #96	@ 0x60
 8006968:	4aaa      	ldr	r2, [pc, #680]	@ (8006c14 <_ZN27Screen_1_StatisticsViewBaseC1Ev+0x6fc>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 800696a:	48ab      	ldr	r0, [pc, #684]	@ (8006c18 <_ZN27Screen_1_StatisticsViewBaseC1Ev+0x700>)
 800696c:	f023 fe26 	bl	802a5bc <__assert_func>
 8006970:	4baa      	ldr	r3, [pc, #680]	@ (8006c1c <_ZN27Screen_1_StatisticsViewBaseC1Ev+0x704>)
 8006972:	881b      	ldrh	r3, [r3, #0]
 8006974:	2b17      	cmp	r3, #23
 8006976:	d803      	bhi.n	8006980 <_ZN27Screen_1_StatisticsViewBaseC1Ev+0x468>
 8006978:	4ba9      	ldr	r3, [pc, #676]	@ (8006c20 <_ZN27Screen_1_StatisticsViewBaseC1Ev+0x708>)
 800697a:	2161      	movs	r1, #97	@ 0x61
 800697c:	4aa5      	ldr	r2, [pc, #660]	@ (8006c14 <_ZN27Screen_1_StatisticsViewBaseC1Ev+0x6fc>)
 800697e:	e7f4      	b.n	800696a <_ZN27Screen_1_StatisticsViewBaseC1Ev+0x452>
        return texts->getText(typedTextId);
 8006980:	4ba8      	ldr	r3, [pc, #672]	@ (8006c24 <_ZN27Screen_1_StatisticsViewBaseC1Ev+0x70c>)
 8006982:	2117      	movs	r1, #23
 8006984:	6818      	ldr	r0, [r3, #0]
 8006986:	f001 fc43 	bl	8008210 <_ZNK8touchgfx5Texts7getTextEt>
    Unicode::snprintf(EV_TextBuffer, EV_TEXT_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_6OE1).getText());
 800698a:	4aa7      	ldr	r2, [pc, #668]	@ (8006c28 <_ZN27Screen_1_StatisticsViewBaseC1Ev+0x710>)
 800698c:	4603      	mov	r3, r0
 800698e:	210a      	movs	r1, #10
 8006990:	4640      	mov	r0, r8
 8006992:	f015 fed9 	bl	801c748 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        : typedTextId(id)
 8006996:	231d      	movs	r3, #29
        wc1 = value;
 8006998:	f8c4 8868 	str.w	r8, [r4, #2152]	@ 0x868
    EV_Text.setTypedText(touchgfx::TypedText(T___SINGLEUSE_8DAW));
 800699c:	a918      	add	r1, sp, #96	@ 0x60
 800699e:	f8df 8290 	ldr.w	r8, [pc, #656]	@ 8006c30 <_ZN27Screen_1_StatisticsViewBaseC1Ev+0x718>
 80069a2:	9802      	ldr	r0, [sp, #8]
 80069a4:	f8ad 3064 	strh.w	r3, [sp, #100]	@ 0x64
 80069a8:	f8cd 8060 	str.w	r8, [sp, #96]	@ 0x60
 80069ac:	f00e ffe4 	bl	8015978 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80069b0:	9902      	ldr	r1, [sp, #8]
 80069b2:	4630      	mov	r0, r6
 80069b4:	f00b fcf4 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Stat_Text.setXY(94, 306);
 80069b8:	f44f 7299 	mov.w	r2, #306	@ 0x132
 80069bc:	215e      	movs	r1, #94	@ 0x5e
 80069be:	9803      	ldr	r0, [sp, #12]
 80069c0:	f7fe fc43 	bl	800524a <_ZN8touchgfx8Drawable5setXYEss>
 80069c4:	9903      	ldr	r1, [sp, #12]
 80069c6:	4638      	mov	r0, r7
        color = newColor;
 80069c8:	f8c4 a89c 	str.w	sl, [r4, #2204]	@ 0x89c
        linespace = space;
 80069cc:	f8a4 58a0 	strh.w	r5, [r4, #2208]	@ 0x8a0
        boundingArea = calculateBoundingArea();
 80069d0:	f00e fd38 	bl	8015444 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 80069d4:	f604 03a8 	addw	r3, r4, #2216	@ 0x8a8
 80069d8:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80069dc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80069e0:	231a      	movs	r3, #26
    Stat_Text.setTypedText(touchgfx::TypedText(T___SINGLEUSE_8NTR));
 80069e2:	a918      	add	r1, sp, #96	@ 0x60
 80069e4:	9803      	ldr	r0, [sp, #12]
 80069e6:	f8ad 3064 	strh.w	r3, [sp, #100]	@ 0x64
 80069ea:	f8cd 8060 	str.w	r8, [sp, #96]	@ 0x60
 80069ee:	f00e ffc3 	bl	8015978 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80069f2:	9903      	ldr	r1, [sp, #12]
 80069f4:	4630      	mov	r0, r6
 80069f6:	f00b fcd3 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Flicker_Text.setPosition(151, 321, 35, 15);
 80069fa:	f240 1241 	movw	r2, #321	@ 0x141
 80069fe:	2323      	movs	r3, #35	@ 0x23
 8006a00:	2197      	movs	r1, #151	@ 0x97
 8006a02:	9804      	ldr	r0, [sp, #16]
 8006a04:	f8cd 9000 	str.w	r9, [sp]
    Unicode::snprintf(Flicker_TextBuffer, FLICKER_TEXT_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_HTGK).getText());
 8006a08:	f604 29c4 	addw	r9, r4, #2756	@ 0xac4
    Flicker_Text.setPosition(151, 321, 35, 15);
 8006a0c:	f7fe fc2a 	bl	8005264 <_ZN8touchgfx8Drawable11setPositionEssss>
 8006a10:	f8d4 38b4 	ldr.w	r3, [r4, #2228]	@ 0x8b4
 8006a14:	9904      	ldr	r1, [sp, #16]
 8006a16:	4638      	mov	r0, r7
 8006a18:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
        color = newColor;
 8006a1c:	f8c4 a8e4 	str.w	sl, [r4, #2276]	@ 0x8e4
        linespace = space;
 8006a20:	f8a4 58e8 	strh.w	r5, [r4, #2280]	@ 0x8e8
        boundingArea = calculateBoundingArea();
 8006a24:	4798      	blx	r3
 8006a26:	f504 630f 	add.w	r3, r4, #2288	@ 0x8f0
 8006a2a:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8006a2e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8006a32:	4a76      	ldr	r2, [pc, #472]	@ (8006c0c <_ZN27Screen_1_StatisticsViewBaseC1Ev+0x6f4>)
 8006a34:	6813      	ldr	r3, [r2, #0]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d094      	beq.n	8006964 <_ZN27Screen_1_StatisticsViewBaseC1Ev+0x44c>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8006a3a:	4a78      	ldr	r2, [pc, #480]	@ (8006c1c <_ZN27Screen_1_StatisticsViewBaseC1Ev+0x704>)
 8006a3c:	8813      	ldrh	r3, [r2, #0]
 8006a3e:	2b18      	cmp	r3, #24
 8006a40:	d99a      	bls.n	8006978 <_ZN27Screen_1_StatisticsViewBaseC1Ev+0x460>
        return texts->getText(typedTextId);
 8006a42:	4b78      	ldr	r3, [pc, #480]	@ (8006c24 <_ZN27Screen_1_StatisticsViewBaseC1Ev+0x70c>)
 8006a44:	2118      	movs	r1, #24
 8006a46:	6818      	ldr	r0, [r3, #0]
 8006a48:	f001 fbe2 	bl	8008210 <_ZNK8touchgfx5Texts7getTextEt>
    Unicode::snprintf(Flicker_TextBuffer, FLICKER_TEXT_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_HTGK).getText());
 8006a4c:	4a76      	ldr	r2, [pc, #472]	@ (8006c28 <_ZN27Screen_1_StatisticsViewBaseC1Ev+0x710>)
 8006a4e:	4603      	mov	r3, r0
 8006a50:	210a      	movs	r1, #10
 8006a52:	4648      	mov	r0, r9
 8006a54:	f015 fe78 	bl	801c748 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        : typedTextId(id)
 8006a58:	2319      	movs	r3, #25
    Flicker_Text.setTypedText(touchgfx::TypedText(T___SINGLEUSE_7UF1));
 8006a5a:	a918      	add	r1, sp, #96	@ 0x60
 8006a5c:	9804      	ldr	r0, [sp, #16]
 8006a5e:	f8c4 98fc 	str.w	r9, [r4, #2300]	@ 0x8fc
 8006a62:	f8ad 3064 	strh.w	r3, [sp, #100]	@ 0x64
 8006a66:	f8cd 8060 	str.w	r8, [sp, #96]	@ 0x60
 8006a6a:	f00e ff85 	bl	8015978 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8006a6e:	9904      	ldr	r1, [sp, #16]
 8006a70:	4630      	mov	r0, r6
 8006a72:	f00b fc95 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    PEC_Stat_Text.setXY(52, 126);
 8006a76:	227e      	movs	r2, #126	@ 0x7e
 8006a78:	9805      	ldr	r0, [sp, #20]
 8006a7a:	2134      	movs	r1, #52	@ 0x34
 8006a7c:	f7fe fbe5 	bl	800524a <_ZN8touchgfx8Drawable5setXYEss>
 8006a80:	9905      	ldr	r1, [sp, #20]
 8006a82:	4638      	mov	r0, r7
        color = newColor;
 8006a84:	f8c4 a930 	str.w	sl, [r4, #2352]	@ 0x930
        linespace = space;
 8006a88:	f8a4 5934 	strh.w	r5, [r4, #2356]	@ 0x934
        boundingArea = calculateBoundingArea();
 8006a8c:	f00e fcda 	bl	8015444 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8006a90:	f604 133c 	addw	r3, r4, #2364	@ 0x93c
 8006a94:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8006a98:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8006a9c:	2316      	movs	r3, #22
    PEC_Stat_Text.setTypedText(touchgfx::TypedText(T___SINGLEUSE_4HLV));
 8006a9e:	a918      	add	r1, sp, #96	@ 0x60
 8006aa0:	9805      	ldr	r0, [sp, #20]
 8006aa2:	f8ad 3064 	strh.w	r3, [sp, #100]	@ 0x64
 8006aa6:	f8cd 8060 	str.w	r8, [sp, #96]	@ 0x60
 8006aaa:	f00e ff65 	bl	8015978 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8006aae:	9905      	ldr	r1, [sp, #20]
 8006ab0:	4630      	mov	r0, r6
 8006ab2:	f00b fc75 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    PC_Text.setXY(61, 84);
 8006ab6:	2254      	movs	r2, #84	@ 0x54
 8006ab8:	9806      	ldr	r0, [sp, #24]
 8006aba:	213d      	movs	r1, #61	@ 0x3d
 8006abc:	f7fe fbc5 	bl	800524a <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8006ac0:	4b5a      	ldr	r3, [pc, #360]	@ (8006c2c <_ZN27Screen_1_StatisticsViewBaseC1Ev+0x714>)
        boundingArea = calculateBoundingArea();
 8006ac2:	9906      	ldr	r1, [sp, #24]
 8006ac4:	4638      	mov	r0, r7
        color = newColor;
 8006ac6:	f8c4 3978 	str.w	r3, [r4, #2424]	@ 0x978
        linespace = space;
 8006aca:	f8a4 597c 	strh.w	r5, [r4, #2428]	@ 0x97c
        boundingArea = calculateBoundingArea();
 8006ace:	f00e fcb9 	bl	8015444 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8006ad2:	f604 1384 	addw	r3, r4, #2436	@ 0x984
 8006ad6:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8006ada:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8006ade:	f04f 030a 	mov.w	r3, #10
    PC_Text.setTypedText(touchgfx::TypedText(T___SINGLEUSE_EG9S));
 8006ae2:	a918      	add	r1, sp, #96	@ 0x60
 8006ae4:	9806      	ldr	r0, [sp, #24]
 8006ae6:	f8ad 3064 	strh.w	r3, [sp, #100]	@ 0x64
 8006aea:	f8cd 8060 	str.w	r8, [sp, #96]	@ 0x60
 8006aee:	f00e ff43 	bl	8015978 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8006af2:	9906      	ldr	r1, [sp, #24]
 8006af4:	4630      	mov	r0, r6
 8006af6:	f00b fc53 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    ER_Text.setXY(70, 141);
 8006afa:	228d      	movs	r2, #141	@ 0x8d
 8006afc:	9807      	ldr	r0, [sp, #28]
 8006afe:	2146      	movs	r1, #70	@ 0x46
 8006b00:	f7fe fba3 	bl	800524a <_ZN8touchgfx8Drawable5setXYEss>
 8006b04:	9907      	ldr	r1, [sp, #28]
 8006b06:	4638      	mov	r0, r7
        color = newColor;
 8006b08:	f8c4 a9c0 	str.w	sl, [r4, #2496]	@ 0x9c0
        linespace = space;
 8006b0c:	f8a4 59c4 	strh.w	r5, [r4, #2500]	@ 0x9c4
        boundingArea = calculateBoundingArea();
 8006b10:	f00e fc98 	bl	8015444 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8006b14:	f604 13cc 	addw	r3, r4, #2508	@ 0x9cc
 8006b18:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8006b1c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8006b20:	2309      	movs	r3, #9
    ER_Text.setTypedText(touchgfx::TypedText(T___SINGLEUSE_H7SB));
 8006b22:	a918      	add	r1, sp, #96	@ 0x60
 8006b24:	9807      	ldr	r0, [sp, #28]
 8006b26:	f8ad 3064 	strh.w	r3, [sp, #100]	@ 0x64
 8006b2a:	f8cd 8060 	str.w	r8, [sp, #96]	@ 0x60
 8006b2e:	f00e ff23 	bl	8015978 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8006b32:	9907      	ldr	r1, [sp, #28]
 8006b34:	4630      	mov	r0, r6
 8006b36:	f00b fc33 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Kev_Text.setXY(171, 141);
 8006b3a:	228d      	movs	r2, #141	@ 0x8d
 8006b3c:	9808      	ldr	r0, [sp, #32]
 8006b3e:	21ab      	movs	r1, #171	@ 0xab
 8006b40:	f7fe fb83 	bl	800524a <_ZN8touchgfx8Drawable5setXYEss>
 8006b44:	9908      	ldr	r1, [sp, #32]
 8006b46:	4638      	mov	r0, r7
        color = newColor;
 8006b48:	f8c4 aa08 	str.w	sl, [r4, #2568]	@ 0xa08
        linespace = space;
 8006b4c:	f8a4 5a0c 	strh.w	r5, [r4, #2572]	@ 0xa0c
        boundingArea = calculateBoundingArea();
 8006b50:	f00e fc78 	bl	8015444 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8006b54:	f604 2314 	addw	r3, r4, #2580	@ 0xa14
 8006b58:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8006b5c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8006b60:	2308      	movs	r3, #8
    Kev_Text.setTypedText(touchgfx::TypedText(T___SINGLEUSE_9NGJ));
 8006b62:	a918      	add	r1, sp, #96	@ 0x60
 8006b64:	9808      	ldr	r0, [sp, #32]
 8006b66:	f8ad 3064 	strh.w	r3, [sp, #100]	@ 0x64
 8006b6a:	f8cd 8060 	str.w	r8, [sp, #96]	@ 0x60
 8006b6e:	f00e ff03 	bl	8015978 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8006b72:	9908      	ldr	r1, [sp, #32]
 8006b74:	4630      	mov	r0, r6
 8006b76:	f00b fc13 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Flkr_Text.setXY(83, 321);
 8006b7a:	f240 1241 	movw	r2, #321	@ 0x141
 8006b7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006b80:	2153      	movs	r1, #83	@ 0x53
 8006b82:	f7fe fb62 	bl	800524a <_ZN8touchgfx8Drawable5setXYEss>
 8006b86:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006b88:	4638      	mov	r0, r7
        color = newColor;
 8006b8a:	f8c4 aa50 	str.w	sl, [r4, #2640]	@ 0xa50
        linespace = space;
 8006b8e:	f8a4 5a54 	strh.w	r5, [r4, #2644]	@ 0xa54
        boundingArea = calculateBoundingArea();
 8006b92:	f00e fc57 	bl	8015444 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8006b96:	f604 235c 	addw	r3, r4, #2652	@ 0xa5c
 8006b9a:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8006b9e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8006ba2:	f04f 0307 	mov.w	r3, #7
    Flkr_Text.setTypedText(touchgfx::TypedText(T___SINGLEUSE_V02W));
 8006ba6:	a918      	add	r1, sp, #96	@ 0x60
 8006ba8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006baa:	f8ad 3064 	strh.w	r3, [sp, #100]	@ 0x64
 8006bae:	f8cd 8060 	str.w	r8, [sp, #96]	@ 0x60
 8006bb2:	f00e fee1 	bl	8015978 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8006bb6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006bb8:	4630      	mov	r0, r6
 8006bba:	f00b fbf1 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Ratio_Text.setXY(186, 321);
 8006bbe:	f240 1241 	movw	r2, #321	@ 0x141
 8006bc2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006bc4:	21ba      	movs	r1, #186	@ 0xba
 8006bc6:	f7fe fb40 	bl	800524a <_ZN8touchgfx8Drawable5setXYEss>
 8006bca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006bcc:	4638      	mov	r0, r7
        color = newColor;
 8006bce:	f8c4 aa98 	str.w	sl, [r4, #2712]	@ 0xa98
        linespace = space;
 8006bd2:	f8a4 5a9c 	strh.w	r5, [r4, #2716]	@ 0xa9c
        boundingArea = calculateBoundingArea();
 8006bd6:	f00e fc35 	bl	8015444 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8006bda:	f604 23a4 	addw	r3, r4, #2724	@ 0xaa4
 8006bde:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8006be2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    Ratio_Text.setTypedText(touchgfx::TypedText(T___SINGLEUSE_LV3O));
 8006be6:	a918      	add	r1, sp, #96	@ 0x60
 8006be8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006bea:	f8cd 8060 	str.w	r8, [sp, #96]	@ 0x60
 8006bee:	f8ad b064 	strh.w	fp, [sp, #100]	@ 0x64
 8006bf2:	f00e fec1 	bl	8015978 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8006bf6:	4630      	mov	r0, r6
 8006bf8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006bfa:	f00b fbd1 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8006bfe:	4620      	mov	r0, r4
 8006c00:	b01b      	add	sp, #108	@ 0x6c
 8006c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c06:	bf00      	nop
 8006c08:	ffff8f6c 	.word	0xffff8f6c
 8006c0c:	20029f30 	.word	0x20029f30
 8006c10:	080402d0 	.word	0x080402d0
 8006c14:	080403d2 	.word	0x080403d2
 8006c18:	0804034d 	.word	0x0804034d
 8006c1c:	20029f34 	.word	0x20029f34
 8006c20:	08040394 	.word	0x08040394
 8006c24:	20029f3c 	.word	0x20029f3c
 8006c28:	0804041d 	.word	0x0804041d
 8006c2c:	ffc1cfdd 	.word	0xffc1cfdd
 8006c30:	0803f9a8 	.word	0x0803f9a8

08006c34 <_ZN16Screen_2ViewBase10screenInitEv>:
     * Virtual Action Handlers
     */
    virtual void screenInit()
    {
        // Override and implement this function in Screen_2
    }
 8006c34:	4770      	bx	lr

08006c36 <_ZN16Screen_2ViewBase14checkI2CStatusEv>:
    virtual void checkI2CStatus()
    {
        // Override and implement this function in Screen_2
    }
 8006c36:	4770      	bx	lr

08006c38 <_ZN16Screen_2ViewBaseD1Ev>:
}

Screen_2ViewBase::~Screen_2ViewBase()
{

}
 8006c38:	4770      	bx	lr

08006c3a <_ZN16Screen_2ViewBase11setupScreenEv>:

void Screen_2ViewBase::setupScreen()
{
    transitionBegins();
 8006c3a:	6803      	ldr	r3, [r0, #0]
 8006c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c3e:	4718      	bx	r3

08006c40 <_ZN16Screen_2ViewBase16transitionBeginsEv>:
void Screen_2ViewBase::transitionBegins()
{
    //screenInitInt
    //When screen transition begins call virtual function
    //Call screenInit
    screenInit();
 8006c40:	6803      	ldr	r3, [r0, #0]
 8006c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c44:	4718      	bx	r3

08006c46 <_ZN16Screen_2ViewBase15handleTickEventEv>:
void Screen_2ViewBase::handleTickEvent()
{
    //checkI2CStatusInt
    //When every N tick call virtual function
    //Call checkI2CStatus
    checkI2CStatus();
 8006c46:	6803      	ldr	r3, [r0, #0]
 8006c48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c4a:	4718      	bx	r3

08006c4c <_ZN16Screen_2ViewBaseD0Ev>:
Screen_2ViewBase::~Screen_2ViewBase()
 8006c4c:	b510      	push	{r4, lr}
 8006c4e:	4604      	mov	r4, r0
}
 8006c50:	f44f 7101 	mov.w	r1, #516	@ 0x204
 8006c54:	f023 fb34 	bl	802a2c0 <_ZdlPvj>
 8006c58:	4620      	mov	r0, r4
 8006c5a:	bd10      	pop	{r4, pc}

08006c5c <_ZN16Screen_2ViewBase16changeScreenLeftEv>:
{
 8006c5c:	b508      	push	{r3, lr}

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8006c5e:	f012 f84f 	bl	8018d00 <_ZN8touchgfx11Application11getInstanceEv>
}
 8006c62:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    application().gotoScreen_1ScreenNoTransition();
 8006c66:	f7fd bcab 	b.w	80045c0 <_ZN23FrontendApplicationBase30gotoScreen_1ScreenNoTransitionEv>

08006c6a <_ZN16Screen_2ViewBase17changeScreenRightEv>:
{
 8006c6a:	b508      	push	{r3, lr}
 8006c6c:	f012 f848 	bl	8018d00 <_ZN8touchgfx11Application11getInstanceEv>
}
 8006c70:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    application().gotoScreen_3_LTScreenNoTransition();
 8006c74:	f7fd bd04 	b.w	8004680 <_ZN23FrontendApplicationBase33gotoScreen_3_LTScreenNoTransitionEv>

08006c78 <_ZN16Screen_2ViewBase10PM0_ScreenEv>:
{
 8006c78:	b508      	push	{r3, lr}
 8006c7a:	f012 f841 	bl	8018d00 <_ZN8touchgfx11Application11getInstanceEv>
}
 8006c7e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    application().gotoScreen_2_PM0ScreenNoTransition();
 8006c82:	f7fd bced 	b.w	8004660 <_ZN23FrontendApplicationBase34gotoScreen_2_PM0ScreenNoTransitionEv>

08006c86 <_ZN16Screen_2ViewBase10PM2_ScreenEv>:
{
 8006c86:	b508      	push	{r3, lr}
 8006c88:	f012 f83a 	bl	8018d00 <_ZN8touchgfx11Application11getInstanceEv>
}
 8006c8c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    application().gotoScreen_2_PM2ScreenNoTransition();
 8006c90:	f7fd bcd6 	b.w	8004640 <_ZN23FrontendApplicationBase34gotoScreen_2_PM2ScreenNoTransitionEv>

08006c94 <_ZN8touchgfx6ButtonC1Ev>:
 * pressed state.
 */
class Button : public AbstractButton
{
public:
    Button()
 8006c94:	b510      	push	{r4, lr}
 8006c96:	4604      	mov	r4, r0
class AbstractButton : public Widget
{
public:
    /** Sets this Widget touchable so the user can interact with buttons. */
    AbstractButton()
        : Widget(), action(), pressed(false)
 8006c98:	2226      	movs	r2, #38	@ 0x26
 8006c9a:	2100      	movs	r1, #0
 8006c9c:	f024 fc40 	bl	802b520 <memset>
 8006ca0:	4620      	mov	r0, r4
 8006ca2:	f7fe faf3 	bl	800528c <_ZN8touchgfx6WidgetC1Ev>
 8006ca6:	2300      	movs	r3, #0
        : AbstractButton(), up(), down(), alpha(255)
    {
    }
 8006ca8:	4620      	mov	r0, r4
 8006caa:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006cac:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
        touchable = touch;
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
        : AbstractButton(), up(), down(), alpha(255)
 8006cb6:	4b04      	ldr	r3, [pc, #16]	@ (8006cc8 <_ZN8touchgfx6ButtonC1Ev+0x34>)
 8006cb8:	6023      	str	r3, [r4, #0]
 8006cba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006cbe:	85e3      	strh	r3, [r4, #46]	@ 0x2e
 8006cc0:	8623      	strh	r3, [r4, #48]	@ 0x30
 8006cc2:	f884 3032 	strb.w	r3, [r4, #50]	@ 0x32
    }
 8006cc6:	bd10      	pop	{r4, pc}
 8006cc8:	08042574 	.word	0x08042574

08006ccc <_ZN16Screen_2ViewBaseC1Ev>:
Screen_2ViewBase::Screen_2ViewBase()
 8006ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cd0:	4604      	mov	r4, r0
 8006cd2:	b08f      	sub	sp, #60	@ 0x3c
 8006cd4:	2500      	movs	r5, #0
 8006cd6:	f013 fc29 	bl	801a52c <_ZN8touchgfx6ScreenC1Ev>
 8006cda:	4627      	mov	r7, r4
 8006cdc:	4b86      	ldr	r3, [pc, #536]	@ (8006ef8 <_ZN16Screen_2ViewBaseC1Ev+0x22c>)
        : Widget(), alpha(255), color(0)
 8006cde:	2226      	movs	r2, #38	@ 0x26
 8006ce0:	4629      	mov	r1, r5
 8006ce2:	63e5      	str	r5, [r4, #60]	@ 0x3c
 8006ce4:	f104 0b6c 	add.w	fp, r4, #108	@ 0x6c
 8006ce8:	f847 3b40 	str.w	r3, [r7], #64
 8006cec:	4638      	mov	r0, r7
 8006cee:	f024 fc17 	bl	802b520 <memset>
 8006cf2:	4638      	mov	r0, r7
 8006cf4:	f7fe faca 	bl	800528c <_ZN8touchgfx6WidgetC1Ev>
 8006cf8:	4b80      	ldr	r3, [pc, #512]	@ (8006efc <_ZN16Screen_2ViewBaseC1Ev+0x230>)
 8006cfa:	f104 0a98 	add.w	sl, r4, #152	@ 0x98
 8006cfe:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 8006d02:	6423      	str	r3, [r4, #64]	@ 0x40
 8006d04:	23ff      	movs	r3, #255	@ 0xff
 8006d06:	f104 09c4 	add.w	r9, r4, #196	@ 0xc4
 8006d0a:	a90c      	add	r1, sp, #48	@ 0x30
 8006d0c:	f884 3066 	strb.w	r3, [r4, #102]	@ 0x66
 8006d10:	4658      	mov	r0, fp
 8006d12:	66a5      	str	r5, [r4, #104]	@ 0x68
 8006d14:	f104 08f8 	add.w	r8, r4, #248	@ 0xf8
 8006d18:	f8ad 6030 	strh.w	r6, [sp, #48]	@ 0x30
 8006d1c:	f7fe fac8 	bl	80052b0 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8006d20:	a90c      	add	r1, sp, #48	@ 0x30
 8006d22:	4650      	mov	r0, sl
 8006d24:	f8ad 6030 	strh.w	r6, [sp, #48]	@ 0x30
 8006d28:	f7fe fac2 	bl	80052b0 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8006d2c:	4648      	mov	r0, r9
 8006d2e:	1d26      	adds	r6, r4, #4
 8006d30:	f7ff ffb0 	bl	8006c94 <_ZN8touchgfx6ButtonC1Ev>
 8006d34:	4640      	mov	r0, r8
 8006d36:	f7fe fad5 	bl	80052e4 <_ZN8touchgfx8TextAreaC1Ev>
 8006d3a:	f504 73a0 	add.w	r3, r4, #320	@ 0x140
 8006d3e:	4618      	mov	r0, r3
 8006d40:	9305      	str	r3, [sp, #20]
 8006d42:	f7ff ffa7 	bl	8006c94 <_ZN8touchgfx6ButtonC1Ev>
 8006d46:	f504 73ba 	add.w	r3, r4, #372	@ 0x174
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	9303      	str	r3, [sp, #12]
 8006d4e:	f7fe fac9 	bl	80052e4 <_ZN8touchgfx8TextAreaC1Ev>
 8006d52:	f504 73de 	add.w	r3, r4, #444	@ 0x1bc
 8006d56:	4618      	mov	r0, r3
 8006d58:	9304      	str	r3, [sp, #16]
 8006d5a:	f7fe fac3 	bl	80052e4 <_ZN8touchgfx8TextAreaC1Ev>
    __background.setPosition(0, 0, 272, 480);
 8006d5e:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8006d62:	462a      	mov	r2, r5
 8006d64:	4629      	mov	r1, r5
 8006d66:	4638      	mov	r0, r7
 8006d68:	9300      	str	r3, [sp, #0]
 8006d6a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8006d6e:	f7fe fa79 	bl	8005264 <_ZN8touchgfx8Drawable11setPositionEssss>
        color = newColor;
 8006d72:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 8006d76:	4639      	mov	r1, r7
 8006d78:	4630      	mov	r0, r6
 8006d7a:	66a3      	str	r3, [r4, #104]	@ 0x68
 8006d7c:	2701      	movs	r7, #1
 8006d7e:	f00b fb0f 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    BG_Small.setXY(0, 0);
 8006d82:	462a      	mov	r2, r5
 8006d84:	4629      	mov	r1, r5
 8006d86:	4658      	mov	r0, fp
 8006d88:	f7fe fa5f 	bl	800524a <_ZN8touchgfx8Drawable5setXYEss>
    BG_Small.setBitmap(touchgfx::Bitmap(BITMAP_BG_ID));
 8006d8c:	a90c      	add	r1, sp, #48	@ 0x30
 8006d8e:	4658      	mov	r0, fp
 8006d90:	f8ad 7030 	strh.w	r7, [sp, #48]	@ 0x30
 8006d94:	f00f f81c 	bl	8015dd0 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8006d98:	4659      	mov	r1, fp
 8006d9a:	4630      	mov	r0, r6
 8006d9c:	f04f 0b0c 	mov.w	fp, #12
 8006da0:	f00b fafe 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    GenX_Logo.setXY(0, 0);
 8006da4:	462a      	mov	r2, r5
 8006da6:	4629      	mov	r1, r5
 8006da8:	4650      	mov	r0, sl
 8006daa:	f7fe fa4e 	bl	800524a <_ZN8touchgfx8Drawable5setXYEss>
    GenX_Logo.setBitmap(touchgfx::Bitmap(BITMAP_SCREEN_1_ID));
 8006dae:	a90c      	add	r1, sp, #48	@ 0x30
 8006db0:	4650      	mov	r0, sl
 8006db2:	f8ad b030 	strh.w	fp, [sp, #48]	@ 0x30
 8006db6:	f00f f80b 	bl	8015dd0 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8006dba:	4651      	mov	r1, sl
 8006dbc:	4630      	mov	r0, r6
    PM_Text.setPosition(65, 85, 143, 17);
 8006dbe:	f04f 0a11 	mov.w	sl, #17
 8006dc2:	f00b faed 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    PM2_Button.setXY(1, 120);
 8006dc6:	4639      	mov	r1, r7
 8006dc8:	4648      	mov	r0, r9
 8006dca:	2278      	movs	r2, #120	@ 0x78
 8006dcc:	f7fe fa3d 	bl	800524a <_ZN8touchgfx8Drawable5setXYEss>
 8006dd0:	230a      	movs	r3, #10
    PM2_Button.setBitmaps(touchgfx::Bitmap(BITMAP_LP_BUTTON_BIG_NEW_ID), touchgfx::Bitmap(BITMAP_LP_BUTTON_BIG_NEW_ID));
 8006dd2:	aa0c      	add	r2, sp, #48	@ 0x30
 8006dd4:	a90b      	add	r1, sp, #44	@ 0x2c
 8006dd6:	4648      	mov	r0, r9
 8006dd8:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 8006ddc:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 8006de0:	f00e fe28 	bl	8015a34 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8006de4:	4649      	mov	r1, r9
 8006de6:	4630      	mov	r0, r6
 8006de8:	f00b fada 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    PM_Text.setPosition(65, 85, 143, 17);
 8006dec:	2255      	movs	r2, #85	@ 0x55
 8006dee:	4640      	mov	r0, r8
 8006df0:	238f      	movs	r3, #143	@ 0x8f
 8006df2:	2141      	movs	r1, #65	@ 0x41
 8006df4:	f8cd a000 	str.w	sl, [sp]
 8006df8:	f7fe fa34 	bl	8005264 <_ZN8touchgfx8Drawable11setPositionEssss>
 8006dfc:	af06      	add	r7, sp, #24
        color = newColor;
 8006dfe:	4b40      	ldr	r3, [pc, #256]	@ (8006f00 <_ZN16Screen_2ViewBaseC1Ev+0x234>)
        boundingArea = calculateBoundingArea();
 8006e00:	4641      	mov	r1, r8
 8006e02:	4638      	mov	r0, r7
        linespace = space;
 8006e04:	f8a4 512c 	strh.w	r5, [r4, #300]	@ 0x12c
        color = newColor;
 8006e08:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
        boundingArea = calculateBoundingArea();
 8006e0c:	f00e fb1a 	bl	8015444 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8006e10:	f504 739a 	add.w	r3, r4, #308	@ 0x134
 8006e14:	f8df 90ec 	ldr.w	r9, [pc, #236]	@ 8006f04 <_ZN16Screen_2ViewBaseC1Ev+0x238>
 8006e18:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8006e1c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    PM_Text.setTypedText(touchgfx::TypedText(T___SINGLEUSE_LNO4));
 8006e20:	a90c      	add	r1, sp, #48	@ 0x30
 8006e22:	4640      	mov	r0, r8
 8006e24:	f8cd 9030 	str.w	r9, [sp, #48]	@ 0x30
 8006e28:	f8ad a034 	strh.w	sl, [sp, #52]	@ 0x34
 8006e2c:	f00e fda4 	bl	8015978 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8006e30:	4641      	mov	r1, r8
 8006e32:	4630      	mov	r0, r6
 8006e34:	f00b fab4 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    PM0_Button.setXY(136, 120);
 8006e38:	9805      	ldr	r0, [sp, #20]
 8006e3a:	2278      	movs	r2, #120	@ 0x78
 8006e3c:	2188      	movs	r1, #136	@ 0x88
 8006e3e:	f7fe fa04 	bl	800524a <_ZN8touchgfx8Drawable5setXYEss>
 8006e42:	230f      	movs	r3, #15
    PM0_Button.setBitmaps(touchgfx::Bitmap(BITMAP_UULP_BUTTON_BIG_NEW_ID), touchgfx::Bitmap(BITMAP_UULP_BUTTON_BIG_NEW_ID));
 8006e44:	aa0c      	add	r2, sp, #48	@ 0x30
 8006e46:	a90b      	add	r1, sp, #44	@ 0x2c
 8006e48:	9805      	ldr	r0, [sp, #20]
 8006e4a:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 8006e4e:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 8006e52:	f00e fdef 	bl	8015a34 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8006e56:	9905      	ldr	r1, [sp, #20]
 8006e58:	4630      	mov	r0, r6
 8006e5a:	f00b faa1 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    PM_Text_2.setPosition(12, 125, 112, 35);
 8006e5e:	2323      	movs	r3, #35	@ 0x23
        color = newColor;
 8006e60:	f8df 80a4 	ldr.w	r8, [pc, #164]	@ 8006f08 <_ZN16Screen_2ViewBaseC1Ev+0x23c>
 8006e64:	227d      	movs	r2, #125	@ 0x7d
 8006e66:	4659      	mov	r1, fp
 8006e68:	9803      	ldr	r0, [sp, #12]
 8006e6a:	9300      	str	r3, [sp, #0]
 8006e6c:	2370      	movs	r3, #112	@ 0x70
 8006e6e:	f7fe f9f9 	bl	8005264 <_ZN8touchgfx8Drawable11setPositionEssss>
        boundingArea = calculateBoundingArea();
 8006e72:	9903      	ldr	r1, [sp, #12]
 8006e74:	4638      	mov	r0, r7
        color = newColor;
 8006e76:	f8c4 81a4 	str.w	r8, [r4, #420]	@ 0x1a4
        linespace = space;
 8006e7a:	f8a4 51a8 	strh.w	r5, [r4, #424]	@ 0x1a8
        boundingArea = calculateBoundingArea();
 8006e7e:	f00e fae1 	bl	8015444 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8006e82:	f504 73d8 	add.w	r3, r4, #432	@ 0x1b0
 8006e86:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8006e8a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8006e8e:	2313      	movs	r3, #19
    PM_Text_2.setTypedText(touchgfx::TypedText(T___SINGLEUSE_P0GJ));
 8006e90:	a90c      	add	r1, sp, #48	@ 0x30
 8006e92:	9803      	ldr	r0, [sp, #12]
 8006e94:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 8006e98:	f8cd 9030 	str.w	r9, [sp, #48]	@ 0x30
 8006e9c:	f00e fd6c 	bl	8015978 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8006ea0:	9903      	ldr	r1, [sp, #12]
 8006ea2:	4630      	mov	r0, r6
 8006ea4:	f00b fa7c 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    PM_Text_5.setPosition(154, 132, 108, 17);
 8006ea8:	236c      	movs	r3, #108	@ 0x6c
 8006eaa:	2284      	movs	r2, #132	@ 0x84
 8006eac:	9804      	ldr	r0, [sp, #16]
 8006eae:	219a      	movs	r1, #154	@ 0x9a
 8006eb0:	f8cd a000 	str.w	sl, [sp]
 8006eb4:	f7fe f9d6 	bl	8005264 <_ZN8touchgfx8Drawable11setPositionEssss>
 8006eb8:	9904      	ldr	r1, [sp, #16]
 8006eba:	4638      	mov	r0, r7
        color = newColor;
 8006ebc:	f8c4 81ec 	str.w	r8, [r4, #492]	@ 0x1ec
        linespace = space;
 8006ec0:	f8a4 51f0 	strh.w	r5, [r4, #496]	@ 0x1f0
        boundingArea = calculateBoundingArea();
 8006ec4:	f00e fabe 	bl	8015444 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8006ec8:	f504 73fc 	add.w	r3, r4, #504	@ 0x1f8
 8006ecc:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8006ed0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8006ed4:	2312      	movs	r3, #18
    PM_Text_5.setTypedText(touchgfx::TypedText(T___SINGLEUSE_V6VJ));
 8006ed6:	a90c      	add	r1, sp, #48	@ 0x30
 8006ed8:	9804      	ldr	r0, [sp, #16]
 8006eda:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 8006ede:	f8cd 9030 	str.w	r9, [sp, #48]	@ 0x30
 8006ee2:	f00e fd49 	bl	8015978 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8006ee6:	4630      	mov	r0, r6
 8006ee8:	9904      	ldr	r1, [sp, #16]
 8006eea:	f00b fa59 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8006eee:	4620      	mov	r0, r4
 8006ef0:	b00f      	add	sp, #60	@ 0x3c
 8006ef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ef6:	bf00      	nop
 8006ef8:	080409dc 	.word	0x080409dc
 8006efc:	0804250c 	.word	0x0804250c
 8006f00:	ffd8dfec 	.word	0xffd8dfec
 8006f04:	0803f9a8 	.word	0x0803f9a8
 8006f08:	ff685bc7 	.word	0xff685bc7

08006f0c <_ZN20Screen_2_PM0ViewBase10screenInitEv>:
     * Virtual Action Handlers
     */
    virtual void screenInit()
    {
        // Override and implement this function in Screen_2_PM0
    }
 8006f0c:	4770      	bx	lr

08006f0e <_ZN20Screen_2_PM0ViewBase8readGPIOEv>:
    virtual void readGPIO()
    {
        // Override and implement this function in Screen_2_PM0
    }
 8006f0e:	4770      	bx	lr

08006f10 <_ZN20Screen_2_PM0ViewBase14checkI2CStatusEv>:
    virtual void checkI2CStatus()
    {
        // Override and implement this function in Screen_2_PM0
    }
 8006f10:	4770      	bx	lr

08006f12 <_ZN20Screen_2_PM0ViewBaseD1Ev>:
}

Screen_2_PM0ViewBase::~Screen_2_PM0ViewBase()
{

}
 8006f12:	4770      	bx	lr

08006f14 <_ZN20Screen_2_PM0ViewBase11setupScreenEv>:

void Screen_2_PM0ViewBase::setupScreen()
{
    transitionBegins();
 8006f14:	6803      	ldr	r3, [r0, #0]
 8006f16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f18:	4718      	bx	r3

08006f1a <_ZN20Screen_2_PM0ViewBase16transitionBeginsEv>:
void Screen_2_PM0ViewBase::transitionBegins()
{
    //screenInitInt
    //When screen transition begins call virtual function
    //Call screenInit
    screenInit();
 8006f1a:	6803      	ldr	r3, [r0, #0]
 8006f1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f1e:	4718      	bx	r3

08006f20 <_ZN20Screen_2_PM0ViewBase15handleTickEventEv>:
void Screen_2_PM0ViewBase::handleTickEvent()
{
    //readGPIOInt
    //When every N tick call virtual function
    //Call readGPIO
    readGPIO();
 8006f20:	6803      	ldr	r3, [r0, #0]
{
 8006f22:	b510      	push	{r4, lr}
 8006f24:	4604      	mov	r4, r0
    readGPIO();
 8006f26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f28:	4798      	blx	r3

    //checkI2CStatusInt
    //When every N tick call virtual function
    //Call checkI2CStatus
    checkI2CStatus();
 8006f2a:	6823      	ldr	r3, [r4, #0]
 8006f2c:	4620      	mov	r0, r4
 8006f2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8006f30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    checkI2CStatus();
 8006f34:	4718      	bx	r3

08006f36 <_ZN8touchgfx8CallbackI20Screen_2_PM0ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8006f36:	4770      	bx	lr

08006f38 <_ZN8touchgfx8CallbackI20Screen_2_PM0ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8006f38:	b430      	push	{r4, r5}
        (pobject->*pmemfun)(t1);
 8006f3a:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 8006f3c:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 8006f3e:	68c2      	ldr	r2, [r0, #12]
 8006f40:	689b      	ldr	r3, [r3, #8]
 8006f42:	1055      	asrs	r5, r2, #1
 8006f44:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8006f48:	07d2      	lsls	r2, r2, #31
 8006f4a:	bf48      	it	mi
 8006f4c:	5962      	ldrmi	r2, [r4, r5]
    }
 8006f4e:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 8006f50:	bf48      	it	mi
 8006f52:	58d3      	ldrmi	r3, [r2, r3]
 8006f54:	4718      	bx	r3

08006f56 <_ZNK8touchgfx8CallbackI20Screen_2_PM0ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8006f56:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun != 0);
 8006f58:	6840      	ldr	r0, [r0, #4]
 8006f5a:	b130      	cbz	r0, 8006f6a <_ZNK8touchgfx8CallbackI20Screen_2_PM0ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 8006f5c:	689a      	ldr	r2, [r3, #8]
 8006f5e:	b91a      	cbnz	r2, 8006f68 <_ZNK8touchgfx8CallbackI20Screen_2_PM0ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x12>
 8006f60:	68d8      	ldr	r0, [r3, #12]
 8006f62:	f000 0001 	and.w	r0, r0, #1
 8006f66:	4770      	bx	lr
 8006f68:	2001      	movs	r0, #1
    }
 8006f6a:	4770      	bx	lr

08006f6c <_ZN8touchgfx8CallbackI20Screen_2_PM0ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8006f6c:	b510      	push	{r4, lr}
 8006f6e:	4604      	mov	r4, r0
 8006f70:	2110      	movs	r1, #16
 8006f72:	f023 f9a5 	bl	802a2c0 <_ZdlPvj>
 8006f76:	4620      	mov	r0, r4
 8006f78:	bd10      	pop	{r4, pc}

08006f7a <_ZN20Screen_2_PM0ViewBaseD0Ev>:
Screen_2_PM0ViewBase::~Screen_2_PM0ViewBase()
 8006f7a:	b510      	push	{r4, lr}
 8006f7c:	4604      	mov	r4, r0
}
 8006f7e:	f44f 7115 	mov.w	r1, #596	@ 0x254
 8006f82:	f023 f99d 	bl	802a2c0 <_ZdlPvj>
 8006f86:	4620      	mov	r0, r4
 8006f88:	bd10      	pop	{r4, pc}

08006f8a <_ZN20Screen_2_PM0ViewBase9PM0WakeupEv>:

void Screen_2_PM0ViewBase::PM0Wakeup()
{
 8006f8a:	b508      	push	{r3, lr}

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8006f8c:	f011 feb8 	bl	8018d00 <_ZN8touchgfx11Application11getInstanceEv>
    //changeScreen1Int
    //When PM0Wakeup is called change screen to Screen_2_PM2
    //Go to Screen_2_PM2 with no screen transition
    application().gotoScreen_2_PM2ScreenNoTransition();
}
 8006f90:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    application().gotoScreen_2_PM2ScreenNoTransition();
 8006f94:	f7fd bb54 	b.w	8004640 <_ZN23FrontendApplicationBase34gotoScreen_2_PM2ScreenNoTransitionEv>

08006f98 <_ZN20Screen_2_PM0ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:
    if (&src == &Ret_Button)
 8006f98:	f500 709c 	add.w	r0, r0, #312	@ 0x138
 8006f9c:	4288      	cmp	r0, r1
{
 8006f9e:	b508      	push	{r3, lr}
    if (&src == &Ret_Button)
 8006fa0:	d105      	bne.n	8006fae <_ZN20Screen_2_PM0ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x16>
 8006fa2:	f011 fead 	bl	8018d00 <_ZN8touchgfx11Application11getInstanceEv>
}
 8006fa6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        application().gotoScreen_2ScreenNoTransition();
 8006faa:	f7fd bb39 	b.w	8004620 <_ZN23FrontendApplicationBase30gotoScreen_2ScreenNoTransitionEv>
}
 8006fae:	bd08      	pop	{r3, pc}

08006fb0 <_ZN20Screen_2_PM0ViewBaseC1Ev>:
Screen_2_PM0ViewBase::Screen_2_PM0ViewBase() :
 8006fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fb4:	4604      	mov	r4, r0
 8006fb6:	b08f      	sub	sp, #60	@ 0x3c
 8006fb8:	2500      	movs	r5, #0
 8006fba:	f013 fab7 	bl	801a52c <_ZN8touchgfx6ScreenC1Ev>
    buttonCallback(this, &Screen_2_PM0ViewBase::buttonCallbackHandler)
 8006fbe:	4627      	mov	r7, r4
 8006fc0:	4bab      	ldr	r3, [pc, #684]	@ (8007270 <_ZN20Screen_2_PM0ViewBaseC1Ev+0x2c0>)
        : Widget(), alpha(255), color(0)
 8006fc2:	f04f 0926 	mov.w	r9, #38	@ 0x26
 8006fc6:	4629      	mov	r1, r5
 8006fc8:	63e5      	str	r5, [r4, #60]	@ 0x3c
 8006fca:	f104 0b6c 	add.w	fp, r4, #108	@ 0x6c
 8006fce:	464a      	mov	r2, r9
 8006fd0:	f847 3b40 	str.w	r3, [r7], #64
 8006fd4:	4638      	mov	r0, r7
 8006fd6:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 8006fda:	f024 faa1 	bl	802b520 <memset>
 8006fde:	4638      	mov	r0, r7
 8006fe0:	f7fe f954 	bl	800528c <_ZN8touchgfx6WidgetC1Ev>
 8006fe4:	4ba3      	ldr	r3, [pc, #652]	@ (8007274 <_ZN20Screen_2_PM0ViewBaseC1Ev+0x2c4>)
 8006fe6:	f104 0a98 	add.w	sl, r4, #152	@ 0x98
 8006fea:	f104 08c4 	add.w	r8, r4, #196	@ 0xc4
 8006fee:	6423      	str	r3, [r4, #64]	@ 0x40
 8006ff0:	23ff      	movs	r3, #255	@ 0xff
 8006ff2:	a90c      	add	r1, sp, #48	@ 0x30
 8006ff4:	4658      	mov	r0, fp
 8006ff6:	f884 3066 	strb.w	r3, [r4, #102]	@ 0x66
 8006ffa:	66a5      	str	r5, [r4, #104]	@ 0x68
 8006ffc:	f8ad 6030 	strh.w	r6, [sp, #48]	@ 0x30
 8007000:	f7fe f956 	bl	80052b0 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8007004:	a90c      	add	r1, sp, #48	@ 0x30
 8007006:	4650      	mov	r0, sl
 8007008:	f8ad 6030 	strh.w	r6, [sp, #48]	@ 0x30
 800700c:	f7fe f950 	bl	80052b0 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8007010:	4640      	mov	r0, r8
 8007012:	f7fe f967 	bl	80052e4 <_ZN8touchgfx8TextAreaC1Ev>
 8007016:	f504 7386 	add.w	r3, r4, #268	@ 0x10c
 800701a:	a90c      	add	r1, sp, #48	@ 0x30
 800701c:	f8ad 6030 	strh.w	r6, [sp, #48]	@ 0x30
 8007020:	4618      	mov	r0, r3
 8007022:	9305      	str	r3, [sp, #20]
 8007024:	f7fe f944 	bl	80052b0 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8007028:	f504 739c 	add.w	r3, r4, #312	@ 0x138
 800702c:	464a      	mov	r2, r9
 800702e:	4629      	mov	r1, r5
 8007030:	4618      	mov	r0, r3
 8007032:	9302      	str	r3, [sp, #8]
 8007034:	f024 fa74 	bl	802b520 <memset>
 8007038:	9802      	ldr	r0, [sp, #8]
 800703a:	f7fe f927 	bl	800528c <_ZN8touchgfx6WidgetC1Ev>
 800703e:	2301      	movs	r3, #1
 8007040:	f8a4 6166 	strh.w	r6, [r4, #358]	@ 0x166
 8007044:	f504 79fe 	add.w	r9, r4, #508	@ 0x1fc
 8007048:	f884 315c 	strb.w	r3, [r4, #348]	@ 0x15c
        : AbstractButton(), up(), down(), alpha(255)
 800704c:	4b8a      	ldr	r3, [pc, #552]	@ (8007278 <_ZN20Screen_2_PM0ViewBaseC1Ev+0x2c8>)
 800704e:	f8a4 6168 	strh.w	r6, [r4, #360]	@ 0x168
 8007052:	f8c4 3138 	str.w	r3, [r4, #312]	@ 0x138
 8007056:	f504 73b6 	add.w	r3, r4, #364	@ 0x16c
 800705a:	f884 616a 	strb.w	r6, [r4, #362]	@ 0x16a
 800705e:	1d26      	adds	r6, r4, #4
 8007060:	4618      	mov	r0, r3
 8007062:	f8c4 5160 	str.w	r5, [r4, #352]	@ 0x160
 8007066:	f884 5164 	strb.w	r5, [r4, #356]	@ 0x164
 800706a:	9303      	str	r3, [sp, #12]
 800706c:	f7fe f93a 	bl	80052e4 <_ZN8touchgfx8TextAreaC1Ev>
 8007070:	f504 73da 	add.w	r3, r4, #436	@ 0x1b4
 8007074:	4618      	mov	r0, r3
 8007076:	9304      	str	r3, [sp, #16]
 8007078:	f7fe f934 	bl	80052e4 <_ZN8touchgfx8TextAreaC1Ev>
 800707c:	4648      	mov	r0, r9
 800707e:	f7fe f931 	bl	80052e4 <_ZN8touchgfx8TextAreaC1Ev>
        : pobject(pObject), pmemfun(pmemfun_1)
 8007082:	4b7e      	ldr	r3, [pc, #504]	@ (800727c <_ZN20Screen_2_PM0ViewBaseC1Ev+0x2cc>)
    __background.setPosition(0, 0, 272, 480);
 8007084:	462a      	mov	r2, r5
 8007086:	4629      	mov	r1, r5
 8007088:	4638      	mov	r0, r7
 800708a:	e9c4 3491 	strd	r3, r4, [r4, #580]	@ 0x244
 800708e:	4b7c      	ldr	r3, [pc, #496]	@ (8007280 <_ZN20Screen_2_PM0ViewBaseC1Ev+0x2d0>)
 8007090:	e9c4 3593 	strd	r3, r5, [r4, #588]	@ 0x24c
 8007094:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8007098:	9300      	str	r3, [sp, #0]
 800709a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800709e:	f7fe f8e1 	bl	8005264 <_ZN8touchgfx8Drawable11setPositionEssss>
        color = newColor;
 80070a2:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 80070a6:	4639      	mov	r1, r7
 80070a8:	4630      	mov	r0, r6
 80070aa:	66a3      	str	r3, [r4, #104]	@ 0x68
 80070ac:	af06      	add	r7, sp, #24
 80070ae:	f00b f977 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    BG.setXY(0, 120);
 80070b2:	2278      	movs	r2, #120	@ 0x78
 80070b4:	4629      	mov	r1, r5
 80070b6:	4658      	mov	r0, fp
 80070b8:	f7fe f8c7 	bl	800524a <_ZN8touchgfx8Drawable5setXYEss>
 80070bc:	2308      	movs	r3, #8
    BG.setBitmap(touchgfx::Bitmap(BITMAP_GRAPH_BG_BIG_ID));
 80070be:	a90c      	add	r1, sp, #48	@ 0x30
 80070c0:	4658      	mov	r0, fp
 80070c2:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 80070c6:	f00e fe83 	bl	8015dd0 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80070ca:	4659      	mov	r1, fp
 80070cc:	4630      	mov	r0, r6
 80070ce:	f00b f967 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    BG_Small.setXY(0, 0);
 80070d2:	462a      	mov	r2, r5
 80070d4:	4629      	mov	r1, r5
 80070d6:	4650      	mov	r0, sl
 80070d8:	f7fe f8b7 	bl	800524a <_ZN8touchgfx8Drawable5setXYEss>
 80070dc:	2302      	movs	r3, #2
    BG_Small.setBitmap(touchgfx::Bitmap(BITMAP_BG_SMALL_ID));
 80070de:	a90c      	add	r1, sp, #48	@ 0x30
 80070e0:	4650      	mov	r0, sl
 80070e2:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 80070e6:	f00e fe73 	bl	8015dd0 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
        color = newColor;
 80070ea:	f8df b1a0 	ldr.w	fp, [pc, #416]	@ 800728c <_ZN20Screen_2_PM0ViewBaseC1Ev+0x2dc>
 80070ee:	4651      	mov	r1, sl
 80070f0:	4630      	mov	r0, r6
 80070f2:	f8df a19c 	ldr.w	sl, [pc, #412]	@ 8007290 <_ZN20Screen_2_PM0ViewBaseC1Ev+0x2e0>
 80070f6:	f00b f953 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Mode_Text.setXY(54, 85);
 80070fa:	2255      	movs	r2, #85	@ 0x55
 80070fc:	4640      	mov	r0, r8
 80070fe:	2136      	movs	r1, #54	@ 0x36
 8007100:	f7fe f8a3 	bl	800524a <_ZN8touchgfx8Drawable5setXYEss>
        boundingArea = calculateBoundingArea();
 8007104:	4641      	mov	r1, r8
 8007106:	4638      	mov	r0, r7
        color = newColor;
 8007108:	f8c4 b0f4 	str.w	fp, [r4, #244]	@ 0xf4
        linespace = space;
 800710c:	f8a4 50f8 	strh.w	r5, [r4, #248]	@ 0xf8
        boundingArea = calculateBoundingArea();
 8007110:	f00e f998 	bl	8015444 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8007114:	f504 7380 	add.w	r3, r4, #256	@ 0x100
 8007118:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800711c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007120:	230f      	movs	r3, #15
    Mode_Text.setTypedText(touchgfx::TypedText(T___SINGLEUSE_VJZ1));
 8007122:	a90c      	add	r1, sp, #48	@ 0x30
 8007124:	4640      	mov	r0, r8
 8007126:	f8cd a030 	str.w	sl, [sp, #48]	@ 0x30
 800712a:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 800712e:	f00e fc23 	bl	8015978 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8007132:	4641      	mov	r1, r8
 8007134:	4630      	mov	r0, r6
 8007136:	f00b f933 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800713a:	f04f 080e 	mov.w	r8, #14
    GenX320_Logo.setXY(0, 0);
 800713e:	462a      	mov	r2, r5
 8007140:	4629      	mov	r1, r5
 8007142:	9805      	ldr	r0, [sp, #20]
 8007144:	f7fe f881 	bl	800524a <_ZN8touchgfx8Drawable5setXYEss>
    GenX320_Logo.setBitmap(touchgfx::Bitmap(BITMAP_SCREEN_3_NEW_ID));
 8007148:	a90c      	add	r1, sp, #48	@ 0x30
 800714a:	9805      	ldr	r0, [sp, #20]
 800714c:	f8ad 8030 	strh.w	r8, [sp, #48]	@ 0x30
 8007150:	f00e fe3e 	bl	8015dd0 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8007154:	9905      	ldr	r1, [sp, #20]
 8007156:	4630      	mov	r0, r6
 8007158:	f00b f922 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Ret_Button.setXY(46, 418);
 800715c:	9802      	ldr	r0, [sp, #8]
 800715e:	f44f 72d1 	mov.w	r2, #418	@ 0x1a2
 8007162:	212e      	movs	r1, #46	@ 0x2e
 8007164:	f7fe f871 	bl	800524a <_ZN8touchgfx8Drawable5setXYEss>
 8007168:	2303      	movs	r3, #3
    Ret_Button.setBitmaps(touchgfx::Bitmap(BITMAP_ES_BUTTON_BIG_ID), touchgfx::Bitmap(BITMAP_ES_BUTTON_BIG_ID));
 800716a:	aa0c      	add	r2, sp, #48	@ 0x30
 800716c:	a90b      	add	r1, sp, #44	@ 0x2c
 800716e:	9802      	ldr	r0, [sp, #8]
 8007170:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 8007174:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 8007178:	f00e fc5c 	bl	8015a34 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    Ret_Button.setAction(buttonCallback);
 800717c:	f504 7311 	add.w	r3, r4, #580	@ 0x244
 8007180:	9902      	ldr	r1, [sp, #8]
 8007182:	4630      	mov	r0, r6
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
    {
        action = &callback;
 8007184:	f8c4 3160 	str.w	r3, [r4, #352]	@ 0x160
 8007188:	f00b f90a 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Return_Text.setPosition(65, 425, 143, 17);
 800718c:	2311      	movs	r3, #17
 800718e:	f240 12a9 	movw	r2, #425	@ 0x1a9
 8007192:	9803      	ldr	r0, [sp, #12]
 8007194:	9300      	str	r3, [sp, #0]
 8007196:	2141      	movs	r1, #65	@ 0x41
 8007198:	238f      	movs	r3, #143	@ 0x8f
 800719a:	f7fe f863 	bl	8005264 <_ZN8touchgfx8Drawable11setPositionEssss>
 800719e:	9903      	ldr	r1, [sp, #12]
 80071a0:	4638      	mov	r0, r7
        color = newColor;
 80071a2:	f8c4 b19c 	str.w	fp, [r4, #412]	@ 0x19c
        linespace = space;
 80071a6:	f8a4 51a0 	strh.w	r5, [r4, #416]	@ 0x1a0
        boundingArea = calculateBoundingArea();
 80071aa:	f00e f94b 	bl	8015444 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 80071ae:	f504 73d4 	add.w	r3, r4, #424	@ 0x1a8
 80071b2:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80071b6:	f8ad 8034 	strh.w	r8, [sp, #52]	@ 0x34
    Banner_Text.setPosition(175, 16, 91, 32);
 80071ba:	f04f 0820 	mov.w	r8, #32
 80071be:	f8cd a030 	str.w	sl, [sp, #48]	@ 0x30
 80071c2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    Return_Text.setTypedText(touchgfx::TypedText(T___SINGLEUSE_JRR8));
 80071c6:	a90c      	add	r1, sp, #48	@ 0x30
 80071c8:	9803      	ldr	r0, [sp, #12]
 80071ca:	f00e fbd5 	bl	8015978 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80071ce:	9903      	ldr	r1, [sp, #12]
 80071d0:	4630      	mov	r0, r6
 80071d2:	f00b f8e5 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Banner_Text.setPosition(175, 16, 91, 32);
 80071d6:	2210      	movs	r2, #16
 80071d8:	9804      	ldr	r0, [sp, #16]
 80071da:	235b      	movs	r3, #91	@ 0x5b
 80071dc:	21af      	movs	r1, #175	@ 0xaf
 80071de:	f8cd 8000 	str.w	r8, [sp]
 80071e2:	f7fe f83f 	bl	8005264 <_ZN8touchgfx8Drawable11setPositionEssss>
        color = newColor;
 80071e6:	4b27      	ldr	r3, [pc, #156]	@ (8007284 <_ZN20Screen_2_PM0ViewBaseC1Ev+0x2d4>)
        boundingArea = calculateBoundingArea();
 80071e8:	9904      	ldr	r1, [sp, #16]
 80071ea:	4638      	mov	r0, r7
        color = newColor;
 80071ec:	f8c4 31e4 	str.w	r3, [r4, #484]	@ 0x1e4
        linespace = space;
 80071f0:	f8a4 51e8 	strh.w	r5, [r4, #488]	@ 0x1e8
        boundingArea = calculateBoundingArea();
 80071f4:	f00e f926 	bl	8015444 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 80071f8:	f504 73f8 	add.w	r3, r4, #496	@ 0x1f0
 80071fc:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8007200:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007204:	230c      	movs	r3, #12
    Banner_Text.setTypedText(touchgfx::TypedText(T___SINGLEUSE_T763));
 8007206:	a90c      	add	r1, sp, #48	@ 0x30
 8007208:	9804      	ldr	r0, [sp, #16]
 800720a:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 800720e:	f8cd a030 	str.w	sl, [sp, #48]	@ 0x30
 8007212:	f00e fbb1 	bl	8015978 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8007216:	9904      	ldr	r1, [sp, #16]
 8007218:	4630      	mov	r0, r6
 800721a:	f00b f8c1 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Inst_Text.setPosition(20, 256, 234, 32);
 800721e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007222:	4648      	mov	r0, r9
 8007224:	23ea      	movs	r3, #234	@ 0xea
 8007226:	2114      	movs	r1, #20
 8007228:	f8cd 8000 	str.w	r8, [sp]
 800722c:	f7fe f81a 	bl	8005264 <_ZN8touchgfx8Drawable11setPositionEssss>
        color = newColor;
 8007230:	4b15      	ldr	r3, [pc, #84]	@ (8007288 <_ZN20Screen_2_PM0ViewBaseC1Ev+0x2d8>)
        boundingArea = calculateBoundingArea();
 8007232:	4649      	mov	r1, r9
 8007234:	4638      	mov	r0, r7
        color = newColor;
 8007236:	f8c4 322c 	str.w	r3, [r4, #556]	@ 0x22c
        linespace = space;
 800723a:	f8a4 5230 	strh.w	r5, [r4, #560]	@ 0x230
        boundingArea = calculateBoundingArea();
 800723e:	f00e f901 	bl	8015444 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8007242:	f504 730e 	add.w	r3, r4, #568	@ 0x238
 8007246:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800724a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800724e:	2304      	movs	r3, #4
    Inst_Text.setTypedText(touchgfx::TypedText(T___SINGLEUSE_HPNM));
 8007250:	a90c      	add	r1, sp, #48	@ 0x30
 8007252:	4648      	mov	r0, r9
 8007254:	f8cd a030 	str.w	sl, [sp, #48]	@ 0x30
 8007258:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 800725c:	f00e fb8c 	bl	8015978 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8007260:	4630      	mov	r0, r6
 8007262:	4649      	mov	r1, r9
 8007264:	f00b f89c 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8007268:	4620      	mov	r0, r4
 800726a:	b00f      	add	sp, #60	@ 0x3c
 800726c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007270:	08040a44 	.word	0x08040a44
 8007274:	0804250c 	.word	0x0804250c
 8007278:	08042574 	.word	0x08042574
 800727c:	08040a2c 	.word	0x08040a2c
 8007280:	08006f99 	.word	0x08006f99
 8007284:	ff407ec9 	.word	0xff407ec9
 8007288:	ffff7276 	.word	0xffff7276
 800728c:	ffd8dfec 	.word	0xffd8dfec
 8007290:	0803f9a8 	.word	0x0803f9a8

08007294 <_ZN20Screen_2_PM2ViewBase12lowPowerModeEv>:
     * Virtual Action Handlers
     */
    virtual void lowPowerMode()
    {
        // Override and implement this function in Screen_2_PM2
    }
 8007294:	4770      	bx	lr

08007296 <_ZN20Screen_2_PM2ViewBase7readLPWEv>:
    virtual void readLPW()
    {
        // Override and implement this function in Screen_2_PM2
    }
 8007296:	4770      	bx	lr

08007298 <_ZN20Screen_2_PM2ViewBase10screenInitEv>:
    virtual void screenInit()
    {
        // Override and implement this function in Screen_2_PM2
    }
 8007298:	4770      	bx	lr

0800729a <_ZN20Screen_2_PM2ViewBase14checkI2CStatusEv>:
    virtual void checkI2CStatus()
    {
        // Override and implement this function in Screen_2_PM2
    }
 800729a:	4770      	bx	lr

0800729c <_ZN20Screen_2_PM2ViewBaseD1Ev>:
}

Screen_2_PM2ViewBase::~Screen_2_PM2ViewBase()
{

}
 800729c:	4770      	bx	lr

0800729e <_ZN20Screen_2_PM2ViewBase11setupScreenEv>:

void Screen_2_PM2ViewBase::setupScreen()
{
    transitionBegins();
 800729e:	6803      	ldr	r3, [r0, #0]
 80072a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072a2:	4718      	bx	r3

080072a4 <_ZN20Screen_2_PM2ViewBase15handleTickEventEv>:
void Screen_2_PM2ViewBase::handleTickEvent()
{
    //lowPowerModeInt
    //When every N tick call virtual function
    //Call lowPowerMode
    lowPowerMode();
 80072a4:	6803      	ldr	r3, [r0, #0]
{
 80072a6:	b510      	push	{r4, lr}
 80072a8:	4604      	mov	r4, r0
    lowPowerMode();
 80072aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072ac:	4798      	blx	r3

    //readLPWInt
    //When every N tick call virtual function
    //Call readLPW
    readLPW();
 80072ae:	6823      	ldr	r3, [r4, #0]
 80072b0:	4620      	mov	r0, r4
 80072b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072b4:	4798      	blx	r3

    //checkI2CStatusInt
    //When every N tick call virtual function
    //Call checkI2CStatus
    checkI2CStatus();
 80072b6:	6823      	ldr	r3, [r4, #0]
 80072b8:	4620      	mov	r0, r4
 80072ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80072bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    checkI2CStatus();
 80072c0:	4718      	bx	r3

080072c2 <_ZN20Screen_2_PM2ViewBase16transitionBeginsEv>:
void Screen_2_PM2ViewBase::transitionBegins()
{
    //screenInitInt
    //When screen transition begins call virtual function
    //Call screenInit
    screenInit();
 80072c2:	6803      	ldr	r3, [r0, #0]
 80072c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072c6:	4718      	bx	r3

080072c8 <_ZN20Screen_2_PM2ViewBaseD0Ev>:
Screen_2_PM2ViewBase::~Screen_2_PM2ViewBase()
 80072c8:	b510      	push	{r4, lr}
 80072ca:	4604      	mov	r4, r0
}
 80072cc:	f44f 61a6 	mov.w	r1, #1328	@ 0x530
 80072d0:	f022 fff6 	bl	802a2c0 <_ZdlPvj>
 80072d4:	4620      	mov	r0, r4
 80072d6:	bd10      	pop	{r4, pc}

080072d8 <_ZN20Screen_2_PM2ViewBase27changeScreenToModeSelectionEv>:
}

void Screen_2_PM2ViewBase::changeScreenToModeSelection()
{
 80072d8:	b508      	push	{r3, lr}

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 80072da:	f011 fd11 	bl	8018d00 <_ZN8touchgfx11Application11getInstanceEv>
    //changeScreen2Int
    //When changeScreenToModeSelection is called change screen to Screen_2
    //Go to Screen_2 with no screen transition
    application().gotoScreen_2ScreenNoTransition();
}
 80072de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    application().gotoScreen_2ScreenNoTransition();
 80072e2:	f7fd b99d 	b.w	8004620 <_ZN23FrontendApplicationBase30gotoScreen_2ScreenNoTransitionEv>
	...

080072e8 <_ZN20Screen_2_PM2ViewBaseC1Ev>:
Screen_2_PM2ViewBase::Screen_2_PM2ViewBase()
 80072e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072ec:	4604      	mov	r4, r0
 80072ee:	b09f      	sub	sp, #124	@ 0x7c
 80072f0:	2700      	movs	r7, #0
 80072f2:	f013 f91b 	bl	801a52c <_ZN8touchgfx6ScreenC1Ev>
 80072f6:	4626      	mov	r6, r4
 80072f8:	4bdf      	ldr	r3, [pc, #892]	@ (8007678 <_ZN20Screen_2_PM2ViewBaseC1Ev+0x390>)
 80072fa:	f104 096c 	add.w	r9, r4, #108	@ 0x6c
 80072fe:	63e7      	str	r7, [r4, #60]	@ 0x3c
 8007300:	f846 3b40 	str.w	r3, [r6], #64
 8007304:	4630      	mov	r0, r6
 8007306:	f7fe fa43 	bl	8005790 <_ZN8touchgfx3BoxC1Ev>
 800730a:	4648      	mov	r0, r9
 800730c:	f7fe fa54 	bl	80057b8 <_ZN8touchgfx13BoxWithBorderC1Ev>
 8007310:	f104 03a0 	add.w	r3, r4, #160	@ 0xa0
 8007314:	f64f 75ff 	movw	r5, #65535	@ 0xffff
 8007318:	f204 4bbc 	addw	fp, r4, #1212	@ 0x4bc
 800731c:	4618      	mov	r0, r3
 800731e:	9308      	str	r3, [sp, #32]
 8007320:	f7fe fa4a 	bl	80057b8 <_ZN8touchgfx13BoxWithBorderC1Ev>
 8007324:	f104 03d4 	add.w	r3, r4, #212	@ 0xd4
 8007328:	f04f 487f 	mov.w	r8, #4278190080	@ 0xff000000
    Counter_11.setPosition(6, 300, 65, 65);
 800732c:	f04f 0a41 	mov.w	sl, #65	@ 0x41
Screen_2_PM2ViewBase::Screen_2_PM2ViewBase()
 8007330:	4618      	mov	r0, r3
 8007332:	9309      	str	r3, [sp, #36]	@ 0x24
 8007334:	f7fe fa40 	bl	80057b8 <_ZN8touchgfx13BoxWithBorderC1Ev>
 8007338:	f504 7384 	add.w	r3, r4, #264	@ 0x108
 800733c:	4618      	mov	r0, r3
 800733e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007340:	f7fe fa3a 	bl	80057b8 <_ZN8touchgfx13BoxWithBorderC1Ev>
 8007344:	f504 739e 	add.w	r3, r4, #316	@ 0x13c
 8007348:	4618      	mov	r0, r3
 800734a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800734c:	f7fe fa34 	bl	80057b8 <_ZN8touchgfx13BoxWithBorderC1Ev>
 8007350:	f504 73b8 	add.w	r3, r4, #368	@ 0x170
 8007354:	4618      	mov	r0, r3
 8007356:	930c      	str	r3, [sp, #48]	@ 0x30
 8007358:	f7fe fa2e 	bl	80057b8 <_ZN8touchgfx13BoxWithBorderC1Ev>
 800735c:	f504 73d2 	add.w	r3, r4, #420	@ 0x1a4
 8007360:	4618      	mov	r0, r3
 8007362:	930d      	str	r3, [sp, #52]	@ 0x34
 8007364:	f7fe fa28 	bl	80057b8 <_ZN8touchgfx13BoxWithBorderC1Ev>
 8007368:	f504 73ec 	add.w	r3, r4, #472	@ 0x1d8
 800736c:	4618      	mov	r0, r3
 800736e:	930e      	str	r3, [sp, #56]	@ 0x38
 8007370:	f7fe fa22 	bl	80057b8 <_ZN8touchgfx13BoxWithBorderC1Ev>
 8007374:	f504 7303 	add.w	r3, r4, #524	@ 0x20c
 8007378:	4618      	mov	r0, r3
 800737a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800737c:	f7fe fa1c 	bl	80057b8 <_ZN8touchgfx13BoxWithBorderC1Ev>
 8007380:	f504 7310 	add.w	r3, r4, #576	@ 0x240
 8007384:	4618      	mov	r0, r3
 8007386:	9310      	str	r3, [sp, #64]	@ 0x40
 8007388:	f7fe fa16 	bl	80057b8 <_ZN8touchgfx13BoxWithBorderC1Ev>
 800738c:	f504 731d 	add.w	r3, r4, #628	@ 0x274
 8007390:	4618      	mov	r0, r3
 8007392:	9311      	str	r3, [sp, #68]	@ 0x44
 8007394:	f7fe fa10 	bl	80057b8 <_ZN8touchgfx13BoxWithBorderC1Ev>
 8007398:	f504 732a 	add.w	r3, r4, #680	@ 0x2a8
 800739c:	4618      	mov	r0, r3
 800739e:	9312      	str	r3, [sp, #72]	@ 0x48
 80073a0:	f7fe fa0a 	bl	80057b8 <_ZN8touchgfx13BoxWithBorderC1Ev>
 80073a4:	f504 7337 	add.w	r3, r4, #732	@ 0x2dc
 80073a8:	4618      	mov	r0, r3
 80073aa:	9313      	str	r3, [sp, #76]	@ 0x4c
 80073ac:	f7fe fa04 	bl	80057b8 <_ZN8touchgfx13BoxWithBorderC1Ev>
 80073b0:	f504 7344 	add.w	r3, r4, #784	@ 0x310
 80073b4:	4618      	mov	r0, r3
 80073b6:	9314      	str	r3, [sp, #80]	@ 0x50
 80073b8:	f7fe f9fe 	bl	80057b8 <_ZN8touchgfx13BoxWithBorderC1Ev>
 80073bc:	f504 7351 	add.w	r3, r4, #836	@ 0x344
 80073c0:	4618      	mov	r0, r3
 80073c2:	9315      	str	r3, [sp, #84]	@ 0x54
 80073c4:	f7fe f9f8 	bl	80057b8 <_ZN8touchgfx13BoxWithBorderC1Ev>
 80073c8:	f504 735e 	add.w	r3, r4, #888	@ 0x378
 80073cc:	4618      	mov	r0, r3
 80073ce:	9316      	str	r3, [sp, #88]	@ 0x58
 80073d0:	f7fe f9f2 	bl	80057b8 <_ZN8touchgfx13BoxWithBorderC1Ev>
 80073d4:	f504 736b 	add.w	r3, r4, #940	@ 0x3ac
 80073d8:	4618      	mov	r0, r3
 80073da:	9317      	str	r3, [sp, #92]	@ 0x5c
 80073dc:	f7fe f9ec 	bl	80057b8 <_ZN8touchgfx13BoxWithBorderC1Ev>
 80073e0:	f504 7378 	add.w	r3, r4, #992	@ 0x3e0
 80073e4:	a91c      	add	r1, sp, #112	@ 0x70
 80073e6:	f8ad 5070 	strh.w	r5, [sp, #112]	@ 0x70
 80073ea:	4618      	mov	r0, r3
 80073ec:	9302      	str	r3, [sp, #8]
 80073ee:	f7fd ff5f 	bl	80052b0 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80073f2:	f204 430c 	addw	r3, r4, #1036	@ 0x40c
 80073f6:	a91c      	add	r1, sp, #112	@ 0x70
 80073f8:	f8ad 5070 	strh.w	r5, [sp, #112]	@ 0x70
 80073fc:	4618      	mov	r0, r3
 80073fe:	9303      	str	r3, [sp, #12]
 8007400:	f7fd ff56 	bl	80052b0 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8007404:	f504 6387 	add.w	r3, r4, #1080	@ 0x438
 8007408:	a91c      	add	r1, sp, #112	@ 0x70
 800740a:	f8ad 5070 	strh.w	r5, [sp, #112]	@ 0x70
 800740e:	4618      	mov	r0, r3
 8007410:	9304      	str	r3, [sp, #16]
 8007412:	f7fd ff4d 	bl	80052b0 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8007416:	f204 4364 	addw	r3, r4, #1124	@ 0x464
 800741a:	a91c      	add	r1, sp, #112	@ 0x70
 800741c:	f8ad 5070 	strh.w	r5, [sp, #112]	@ 0x70
 8007420:	4618      	mov	r0, r3
 8007422:	9305      	str	r3, [sp, #20]
 8007424:	f7fd ff44 	bl	80052b0 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8007428:	f504 6392 	add.w	r3, r4, #1168	@ 0x490
 800742c:	a91c      	add	r1, sp, #112	@ 0x70
 800742e:	f8ad 5070 	strh.w	r5, [sp, #112]	@ 0x70
 8007432:	4618      	mov	r0, r3
 8007434:	9306      	str	r3, [sp, #24]
 8007436:	f7fd ff3b 	bl	80052b0 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 800743a:	4639      	mov	r1, r7
 800743c:	2226      	movs	r2, #38	@ 0x26
 800743e:	4658      	mov	r0, fp
 8007440:	f024 f86e 	bl	802b520 <memset>
 8007444:	4658      	mov	r0, fp
 8007446:	f7fd ff21 	bl	800528c <_ZN8touchgfx6WidgetC1Ev>
 800744a:	4b8c      	ldr	r3, [pc, #560]	@ (800767c <_ZN20Screen_2_PM2ViewBaseC1Ev+0x394>)
 800744c:	f204 5204 	addw	r2, r4, #1284	@ 0x504
 8007450:	a91c      	add	r1, sp, #112	@ 0x70
 8007452:	f8c4 34bc 	str.w	r3, [r4, #1212]	@ 0x4bc
 8007456:	4b8a      	ldr	r3, [pc, #552]	@ (8007680 <_ZN20Screen_2_PM2ViewBaseC1Ev+0x398>)
 8007458:	4610      	mov	r0, r2
 800745a:	f8a4 54e8 	strh.w	r5, [r4, #1256]	@ 0x4e8
 800745e:	1d25      	adds	r5, r4, #4
 8007460:	f8c4 34e4 	str.w	r3, [r4, #1252]	@ 0x4e4
 8007464:	f44f 037f 	mov.w	r3, #16711680	@ 0xff0000
 8007468:	f8c4 74ec 	str.w	r7, [r4, #1260]	@ 0x4ec
 800746c:	f8c4 34f0 	str.w	r3, [r4, #1264]	@ 0x4f0
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8007470:	f04f 33ff 	mov.w	r3, #4294967295
 8007474:	f8a4 74f4 	strh.w	r7, [r4, #1268]	@ 0x4f4
 8007478:	f8c4 34fc 	str.w	r3, [r4, #1276]	@ 0x4fc
 800747c:	f8c4 74f8 	str.w	r7, [r4, #1272]	@ 0x4f8
              text(0)
 8007480:	f8c4 7500 	str.w	r7, [r4, #1280]	@ 0x500
 8007484:	9207      	str	r2, [sp, #28]
 8007486:	f8ad 3070 	strh.w	r3, [sp, #112]	@ 0x70
 800748a:	f7fd ff11 	bl	80052b0 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
    __background.setPosition(0, 0, 272, 480);
 800748e:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8007492:	463a      	mov	r2, r7
 8007494:	4639      	mov	r1, r7
 8007496:	4630      	mov	r0, r6
 8007498:	9300      	str	r3, [sp, #0]
 800749a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800749e:	f7fd fee1 	bl	8005264 <_ZN8touchgfx8Drawable11setPositionEssss>
 80074a2:	4631      	mov	r1, r6
 80074a4:	4628      	mov	r0, r5
 80074a6:	f8c4 8068 	str.w	r8, [r4, #104]	@ 0x68
 80074aa:	f00a ff79 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Outer_Box.setPosition(0, 164, 272, 272);
 80074ae:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80074b2:	4639      	mov	r1, r7
 80074b4:	4648      	mov	r0, r9
 80074b6:	9300      	str	r3, [sp, #0]
 80074b8:	22a4      	movs	r2, #164	@ 0xa4
 80074ba:	4e72      	ldr	r6, [pc, #456]	@ (8007684 <_ZN20Screen_2_PM2ViewBaseC1Ev+0x39c>)
 80074bc:	f7fd fed2 	bl	8005264 <_ZN8touchgfx8Drawable11setPositionEssss>
 80074c0:	4b71      	ldr	r3, [pc, #452]	@ (8007688 <_ZN20Screen_2_PM2ViewBaseC1Ev+0x3a0>)
        borderSize = size;
 80074c2:	f04f 0205 	mov.w	r2, #5
 80074c6:	4649      	mov	r1, r9
 80074c8:	4628      	mov	r0, r5
 80074ca:	f04f 0901 	mov.w	r9, #1
 80074ce:	f8a4 209c 	strh.w	r2, [r4, #156]	@ 0x9c
        borderColor = colorBorder;
 80074d2:	e9c4 3625 	strd	r3, r6, [r4, #148]	@ 0x94
 80074d6:	f00a ff63 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Counter_11.setPosition(6, 300, 65, 65);
 80074da:	4653      	mov	r3, sl
 80074dc:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80074e0:	9808      	ldr	r0, [sp, #32]
 80074e2:	2106      	movs	r1, #6
 80074e4:	f8cd a000 	str.w	sl, [sp]
 80074e8:	f7fd febc 	bl	8005264 <_ZN8touchgfx8Drawable11setPositionEssss>
 80074ec:	9908      	ldr	r1, [sp, #32]
 80074ee:	4628      	mov	r0, r5
        borderSize = size;
 80074f0:	f8a4 90d0 	strh.w	r9, [r4, #208]	@ 0xd0
        borderColor = colorBorder;
 80074f4:	e9c4 6832 	strd	r6, r8, [r4, #200]	@ 0xc8
 80074f8:	f00a ff52 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Counter_10.setPosition(71, 300, 65, 65);
 80074fc:	4653      	mov	r3, sl
 80074fe:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8007502:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007504:	2147      	movs	r1, #71	@ 0x47
 8007506:	f8cd a000 	str.w	sl, [sp]
 800750a:	f7fd feab 	bl	8005264 <_ZN8touchgfx8Drawable11setPositionEssss>
 800750e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007510:	4628      	mov	r0, r5
        borderSize = size;
 8007512:	f8a4 9104 	strh.w	r9, [r4, #260]	@ 0x104
        borderColor = colorBorder;
 8007516:	e9c4 683f 	strd	r6, r8, [r4, #252]	@ 0xfc
 800751a:	f00a ff41 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Counter_8.setPosition(201, 300, 65, 65);
 800751e:	4653      	mov	r3, sl
 8007520:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8007524:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007526:	21c9      	movs	r1, #201	@ 0xc9
 8007528:	f8cd a000 	str.w	sl, [sp]
 800752c:	f7fd fe9a 	bl	8005264 <_ZN8touchgfx8Drawable11setPositionEssss>
 8007530:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007532:	4628      	mov	r0, r5
        borderSize = size;
 8007534:	f8a4 9138 	strh.w	r9, [r4, #312]	@ 0x138
        borderColor = colorBorder;
 8007538:	e9c4 684c 	strd	r6, r8, [r4, #304]	@ 0x130
 800753c:	f00a ff30 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Counter_9.setPosition(136, 300, 65, 65);
 8007540:	4653      	mov	r3, sl
 8007542:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8007546:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8007548:	2188      	movs	r1, #136	@ 0x88
 800754a:	f8cd a000 	str.w	sl, [sp]
 800754e:	f7fd fe89 	bl	8005264 <_ZN8touchgfx8Drawable11setPositionEssss>
 8007552:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007554:	4628      	mov	r0, r5
        borderSize = size;
 8007556:	f8a4 916c 	strh.w	r9, [r4, #364]	@ 0x16c
        borderColor = colorBorder;
 800755a:	e9c4 6859 	strd	r6, r8, [r4, #356]	@ 0x164
 800755e:	f00a ff1f 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Counter_13.setPosition(136, 365, 65, 65);
 8007562:	4653      	mov	r3, sl
 8007564:	f240 126d 	movw	r2, #365	@ 0x16d
 8007568:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800756a:	2188      	movs	r1, #136	@ 0x88
 800756c:	f8cd a000 	str.w	sl, [sp]
 8007570:	f7fd fe78 	bl	8005264 <_ZN8touchgfx8Drawable11setPositionEssss>
 8007574:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007576:	4628      	mov	r0, r5
        borderSize = size;
 8007578:	f8a4 91a0 	strh.w	r9, [r4, #416]	@ 0x1a0
        borderColor = colorBorder;
 800757c:	e9c4 6866 	strd	r6, r8, [r4, #408]	@ 0x198
 8007580:	f00a ff0e 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Counter_12.setPosition(201, 365, 65, 65);
 8007584:	4653      	mov	r3, sl
 8007586:	f240 126d 	movw	r2, #365	@ 0x16d
 800758a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800758c:	21c9      	movs	r1, #201	@ 0xc9
 800758e:	f8cd a000 	str.w	sl, [sp]
 8007592:	f7fd fe67 	bl	8005264 <_ZN8touchgfx8Drawable11setPositionEssss>
 8007596:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8007598:	4628      	mov	r0, r5
        borderSize = size;
 800759a:	f8a4 91d4 	strh.w	r9, [r4, #468]	@ 0x1d4
        borderColor = colorBorder;
 800759e:	e9c4 6873 	strd	r6, r8, [r4, #460]	@ 0x1cc
 80075a2:	f00a fefd 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Counter_14.setPosition(71, 365, 65, 65);
 80075a6:	4653      	mov	r3, sl
 80075a8:	f240 126d 	movw	r2, #365	@ 0x16d
 80075ac:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80075ae:	2147      	movs	r1, #71	@ 0x47
 80075b0:	f8cd a000 	str.w	sl, [sp]
 80075b4:	f7fd fe56 	bl	8005264 <_ZN8touchgfx8Drawable11setPositionEssss>
 80075b8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80075ba:	4628      	mov	r0, r5
        borderSize = size;
 80075bc:	f8a4 9208 	strh.w	r9, [r4, #520]	@ 0x208
        borderColor = colorBorder;
 80075c0:	e9c4 6880 	strd	r6, r8, [r4, #512]	@ 0x200
 80075c4:	f00a feec 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Counter_15.setPosition(6, 365, 65, 65);
 80075c8:	4653      	mov	r3, sl
 80075ca:	f240 126d 	movw	r2, #365	@ 0x16d
 80075ce:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80075d0:	2106      	movs	r1, #6
 80075d2:	f8cd a000 	str.w	sl, [sp]
 80075d6:	f7fd fe45 	bl	8005264 <_ZN8touchgfx8Drawable11setPositionEssss>
 80075da:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80075dc:	4628      	mov	r0, r5
        borderSize = size;
 80075de:	f8a4 923c 	strh.w	r9, [r4, #572]	@ 0x23c
        borderColor = colorBorder;
 80075e2:	e9c4 688d 	strd	r6, r8, [r4, #564]	@ 0x234
 80075e6:	f00a fedb 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Counter_7.setPosition(6, 235, 65, 65);
 80075ea:	4653      	mov	r3, sl
 80075ec:	22eb      	movs	r2, #235	@ 0xeb
 80075ee:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80075f0:	2106      	movs	r1, #6
 80075f2:	f8cd a000 	str.w	sl, [sp]
 80075f6:	f7fd fe35 	bl	8005264 <_ZN8touchgfx8Drawable11setPositionEssss>
 80075fa:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80075fc:	4628      	mov	r0, r5
        borderSize = size;
 80075fe:	f8a4 9270 	strh.w	r9, [r4, #624]	@ 0x270
        borderColor = colorBorder;
 8007602:	e9c4 689a 	strd	r6, r8, [r4, #616]	@ 0x268
 8007606:	f00a fecb 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Counter_6.setPosition(71, 235, 65, 65);
 800760a:	4653      	mov	r3, sl
 800760c:	22eb      	movs	r2, #235	@ 0xeb
 800760e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8007610:	2147      	movs	r1, #71	@ 0x47
 8007612:	f8cd a000 	str.w	sl, [sp]
 8007616:	f7fd fe25 	bl	8005264 <_ZN8touchgfx8Drawable11setPositionEssss>
 800761a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800761c:	4628      	mov	r0, r5
        borderSize = size;
 800761e:	f8a4 92a4 	strh.w	r9, [r4, #676]	@ 0x2a4
        borderColor = colorBorder;
 8007622:	e9c4 68a7 	strd	r6, r8, [r4, #668]	@ 0x29c
 8007626:	f00a febb 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Counter_4.setPosition(201, 235, 65, 65);
 800762a:	4653      	mov	r3, sl
 800762c:	22eb      	movs	r2, #235	@ 0xeb
 800762e:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8007630:	21c9      	movs	r1, #201	@ 0xc9
 8007632:	f8cd a000 	str.w	sl, [sp]
 8007636:	f7fd fe15 	bl	8005264 <_ZN8touchgfx8Drawable11setPositionEssss>
 800763a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800763c:	4628      	mov	r0, r5
        borderSize = size;
 800763e:	f8a4 92d8 	strh.w	r9, [r4, #728]	@ 0x2d8
        borderColor = colorBorder;
 8007642:	e9c4 68b4 	strd	r6, r8, [r4, #720]	@ 0x2d0
 8007646:	f00a feab 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Counter_5.setPosition(136, 235, 65, 65);
 800764a:	4653      	mov	r3, sl
 800764c:	22eb      	movs	r2, #235	@ 0xeb
 800764e:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8007650:	2188      	movs	r1, #136	@ 0x88
 8007652:	f8cd a000 	str.w	sl, [sp]
 8007656:	f7fd fe05 	bl	8005264 <_ZN8touchgfx8Drawable11setPositionEssss>
 800765a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800765c:	4628      	mov	r0, r5
        borderSize = size;
 800765e:	f8a4 930c 	strh.w	r9, [r4, #780]	@ 0x30c
        borderColor = colorBorder;
 8007662:	e9c4 68c1 	strd	r6, r8, [r4, #772]	@ 0x304
 8007666:	f00a fe9b 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Counter_1.setPosition(136, 170, 65, 65);
 800766a:	4653      	mov	r3, sl
 800766c:	22aa      	movs	r2, #170	@ 0xaa
 800766e:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8007670:	2188      	movs	r1, #136	@ 0x88
 8007672:	f8cd a000 	str.w	sl, [sp]
 8007676:	e009      	b.n	800768c <_ZN20Screen_2_PM2ViewBaseC1Ev+0x3a4>
 8007678:	08040a8c 	.word	0x08040a8c
 800767c:	0804247c 	.word	0x0804247c
 8007680:	0803f9a8 	.word	0x0803f9a8
 8007684:	ffc1cfdd 	.word	0xffc1cfdd
 8007688:	ff1e2534 	.word	0xff1e2534
 800768c:	f7fd fdea 	bl	8005264 <_ZN8touchgfx8Drawable11setPositionEssss>
 8007690:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8007692:	4628      	mov	r0, r5
        borderSize = size;
 8007694:	f8a4 9340 	strh.w	r9, [r4, #832]	@ 0x340
        borderColor = colorBorder;
 8007698:	e9c4 68ce 	strd	r6, r8, [r4, #824]	@ 0x338
 800769c:	f00a fe80 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Counter_0.setPosition(201, 170, 65, 65);
 80076a0:	4653      	mov	r3, sl
 80076a2:	22aa      	movs	r2, #170	@ 0xaa
 80076a4:	9815      	ldr	r0, [sp, #84]	@ 0x54
 80076a6:	21c9      	movs	r1, #201	@ 0xc9
 80076a8:	f8cd a000 	str.w	sl, [sp]
 80076ac:	f7fd fdda 	bl	8005264 <_ZN8touchgfx8Drawable11setPositionEssss>
 80076b0:	9915      	ldr	r1, [sp, #84]	@ 0x54
 80076b2:	4628      	mov	r0, r5
        borderSize = size;
 80076b4:	f8a4 9374 	strh.w	r9, [r4, #884]	@ 0x374
        borderColor = colorBorder;
 80076b8:	e9c4 68db 	strd	r6, r8, [r4, #876]	@ 0x36c
 80076bc:	f00a fe70 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Counter_2.setPosition(71, 170, 65, 65);
 80076c0:	4653      	mov	r3, sl
 80076c2:	22aa      	movs	r2, #170	@ 0xaa
 80076c4:	9816      	ldr	r0, [sp, #88]	@ 0x58
 80076c6:	2147      	movs	r1, #71	@ 0x47
 80076c8:	f8cd a000 	str.w	sl, [sp]
 80076cc:	f7fd fdca 	bl	8005264 <_ZN8touchgfx8Drawable11setPositionEssss>
 80076d0:	9916      	ldr	r1, [sp, #88]	@ 0x58
 80076d2:	4628      	mov	r0, r5
        borderSize = size;
 80076d4:	f8a4 93a8 	strh.w	r9, [r4, #936]	@ 0x3a8
        borderColor = colorBorder;
 80076d8:	e9c4 68e8 	strd	r6, r8, [r4, #928]	@ 0x3a0
 80076dc:	f00a fe60 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Counter_3.setPosition(6, 170, 65, 65);
 80076e0:	4653      	mov	r3, sl
 80076e2:	22aa      	movs	r2, #170	@ 0xaa
 80076e4:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 80076e6:	2106      	movs	r1, #6
 80076e8:	f8cd a000 	str.w	sl, [sp]
 80076ec:	f7fd fdba 	bl	8005264 <_ZN8touchgfx8Drawable11setPositionEssss>
 80076f0:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 80076f2:	4628      	mov	r0, r5
        borderSize = size;
 80076f4:	f8a4 93dc 	strh.w	r9, [r4, #988]	@ 0x3dc
        borderColor = colorBorder;
 80076f8:	e9c4 68f5 	strd	r6, r8, [r4, #980]	@ 0x3d4
 80076fc:	f00a fe50 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8007700:	f04f 0805 	mov.w	r8, #5
    Filler_1.setXY(0, 120);
 8007704:	2278      	movs	r2, #120	@ 0x78
 8007706:	4639      	mov	r1, r7
 8007708:	9802      	ldr	r0, [sp, #8]
 800770a:	f7fd fd9e 	bl	800524a <_ZN8touchgfx8Drawable5setXYEss>
    Filler_1.setBitmap(touchgfx::Bitmap(BITMAP_FILLER_4_ID));
 800770e:	a91c      	add	r1, sp, #112	@ 0x70
 8007710:	9802      	ldr	r0, [sp, #8]
 8007712:	f8ad 8070 	strh.w	r8, [sp, #112]	@ 0x70
 8007716:	f00e fb5b 	bl	8015dd0 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800771a:	9902      	ldr	r1, [sp, #8]
 800771c:	4628      	mov	r0, r5
 800771e:	f00a fe3f 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Filler_2.setXY(0, 436);
 8007722:	f44f 72da 	mov.w	r2, #436	@ 0x1b4
 8007726:	4639      	mov	r1, r7
 8007728:	9803      	ldr	r0, [sp, #12]
 800772a:	f7fd fd8e 	bl	800524a <_ZN8touchgfx8Drawable5setXYEss>
    Filler_2.setBitmap(touchgfx::Bitmap(BITMAP_FILLER_4_ID));
 800772e:	a91c      	add	r1, sp, #112	@ 0x70
 8007730:	9803      	ldr	r0, [sp, #12]
 8007732:	f8ad 8070 	strh.w	r8, [sp, #112]	@ 0x70
 8007736:	f00e fb4b 	bl	8015dd0 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800773a:	9903      	ldr	r1, [sp, #12]
 800773c:	4628      	mov	r0, r5
 800773e:	f00a fe2f 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Inst.setXY(15, 136);
 8007742:	2288      	movs	r2, #136	@ 0x88
 8007744:	9804      	ldr	r0, [sp, #16]
 8007746:	210f      	movs	r1, #15
 8007748:	f7fd fd7f 	bl	800524a <_ZN8touchgfx8Drawable5setXYEss>
 800774c:	2310      	movs	r3, #16
    Inst.setBitmap(touchgfx::Bitmap(BITMAP_WAVE_FROM_LEFT_TO_RIGHT_TO_WAKE_UP_THE_SYSTEM_ID));
 800774e:	a91c      	add	r1, sp, #112	@ 0x70
 8007750:	9804      	ldr	r0, [sp, #16]
 8007752:	f8ad 3070 	strh.w	r3, [sp, #112]	@ 0x70
 8007756:	f00e fb3b 	bl	8015dd0 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800775a:	9904      	ldr	r1, [sp, #16]
 800775c:	4628      	mov	r0, r5
 800775e:	f00a fe1f 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Awake.setXY(0, 127);
 8007762:	227f      	movs	r2, #127	@ 0x7f
 8007764:	4639      	mov	r1, r7
 8007766:	9805      	ldr	r0, [sp, #20]
 8007768:	f7fd fd6f 	bl	800524a <_ZN8touchgfx8Drawable5setXYEss>
 800776c:	2309      	movs	r3, #9
    Awake.setBitmap(touchgfx::Bitmap(BITMAP_GROUP_13_ID));
 800776e:	a91c      	add	r1, sp, #112	@ 0x70
 8007770:	9805      	ldr	r0, [sp, #20]
 8007772:	f8ad 3070 	strh.w	r3, [sp, #112]	@ 0x70
 8007776:	f00e fb2b 	bl	8015dd0 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800777a:	9905      	ldr	r1, [sp, #20]
 800777c:	4628      	mov	r0, r5
     *
     * @note The user code must call invalidate() in order to update the display.
     */
    void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 800777e:	f884 748c 	strb.w	r7, [r4, #1164]	@ 0x48c
 8007782:	f00a fe0d 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    BG_Small.setXY(0, 0);
 8007786:	463a      	mov	r2, r7
 8007788:	4639      	mov	r1, r7
 800778a:	9806      	ldr	r0, [sp, #24]
 800778c:	f7fd fd5d 	bl	800524a <_ZN8touchgfx8Drawable5setXYEss>
 8007790:	2302      	movs	r3, #2
    BG_Small.setBitmap(touchgfx::Bitmap(BITMAP_BG_SMALL_ID));
 8007792:	a91c      	add	r1, sp, #112	@ 0x70
 8007794:	9806      	ldr	r0, [sp, #24]
 8007796:	f8ad 3070 	strh.w	r3, [sp, #112]	@ 0x70
 800779a:	f00e fb19 	bl	8015dd0 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800779e:	9906      	ldr	r1, [sp, #24]
 80077a0:	4628      	mov	r0, r5
 80077a2:	f00a fdfd 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    PC_Text.setXY(61, 84);
 80077a6:	2254      	movs	r2, #84	@ 0x54
 80077a8:	4658      	mov	r0, fp
 80077aa:	213d      	movs	r1, #61	@ 0x3d
 80077ac:	f7fd fd4d 	bl	800524a <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 80077b0:	f8c4 64ec 	str.w	r6, [r4, #1260]	@ 0x4ec
        boundingArea = calculateBoundingArea();
 80077b4:	ae18      	add	r6, sp, #96	@ 0x60
 80077b6:	4659      	mov	r1, fp
        linespace = space;
 80077b8:	f8a4 74f0 	strh.w	r7, [r4, #1264]	@ 0x4f0
        boundingArea = calculateBoundingArea();
 80077bc:	4630      	mov	r0, r6
 80077be:	f00d fe41 	bl	8015444 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 80077c2:	f504 639f 	add.w	r3, r4, #1272	@ 0x4f8
 80077c6:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80077ca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80077ce:	4b10      	ldr	r3, [pc, #64]	@ (8007810 <_ZN20Screen_2_PM2ViewBaseC1Ev+0x528>)
    PC_Text.setTypedText(touchgfx::TypedText(T___SINGLEUSE_IDYB));
 80077d0:	a91c      	add	r1, sp, #112	@ 0x70
 80077d2:	4658      	mov	r0, fp
 80077d4:	f8ad 8074 	strh.w	r8, [sp, #116]	@ 0x74
 80077d8:	931c      	str	r3, [sp, #112]	@ 0x70
 80077da:	f00e f8cd 	bl	8015978 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80077de:	4659      	mov	r1, fp
 80077e0:	4628      	mov	r0, r5
 80077e2:	f00a fddd 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Banner.setXY(0, 0);
 80077e6:	463a      	mov	r2, r7
 80077e8:	4639      	mov	r1, r7
 80077ea:	9807      	ldr	r0, [sp, #28]
 80077ec:	f7fd fd2d 	bl	800524a <_ZN8touchgfx8Drawable5setXYEss>
 80077f0:	230d      	movs	r3, #13
    Banner.setBitmap(touchgfx::Bitmap(BITMAP_SCREEN_2_ID));
 80077f2:	a91c      	add	r1, sp, #112	@ 0x70
 80077f4:	9807      	ldr	r0, [sp, #28]
 80077f6:	f8ad 3070 	strh.w	r3, [sp, #112]	@ 0x70
 80077fa:	f00e fae9 	bl	8015dd0 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80077fe:	4628      	mov	r0, r5
 8007800:	9907      	ldr	r1, [sp, #28]
 8007802:	f00a fdcd 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8007806:	4620      	mov	r0, r4
 8007808:	b01f      	add	sp, #124	@ 0x7c
 800780a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800780e:	bf00      	nop
 8007810:	0803f9a8 	.word	0x0803f9a8

08007814 <_ZN19Screen_3_LTViewBase10screenInitEv>:
     * Virtual Action Handlers
     */
    virtual void screenInit()
    {
        // Override and implement this function in Screen_3_LT
    }
 8007814:	4770      	bx	lr

08007816 <_ZN19Screen_3_LTViewBase17updateCoordinatesEv>:
    virtual void updateCoordinates()
    {
        // Override and implement this function in Screen_3_LT
    }
 8007816:	4770      	bx	lr

08007818 <_ZN19Screen_3_LTViewBase14checkI2CStatusEv>:
    virtual void checkI2CStatus()
    {
        // Override and implement this function in Screen_3_LT
    }
 8007818:	4770      	bx	lr

0800781a <_ZN19Screen_3_LTViewBase11setupScreenEv>:
}

void Screen_3_LTViewBase::setupScreen()
{

}
 800781a:	4770      	bx	lr

0800781c <_ZN19Screen_3_LTViewBase15afterTransitionEv>:
void Screen_3_LTViewBase::afterTransition()
{
    //screenInitInt
    //When screen transition ends call virtual function
    //Call screenInit
    screenInit();
 800781c:	6803      	ldr	r3, [r0, #0]
 800781e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007820:	4718      	bx	r3

08007822 <_ZN19Screen_3_LTViewBase15handleTickEventEv>:
void Screen_3_LTViewBase::handleTickEvent()
{
    //updateCoordinatesInt
    //When every N tick call virtual function
    //Call updateCoordinates
    updateCoordinates();
 8007822:	6803      	ldr	r3, [r0, #0]
{
 8007824:	b510      	push	{r4, lr}
 8007826:	4604      	mov	r4, r0
    updateCoordinates();
 8007828:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800782a:	4798      	blx	r3

    //checkI2CStatusInt
    //When every N tick call virtual function
    //Call checkI2CStatus
    checkI2CStatus();
 800782c:	6823      	ldr	r3, [r4, #0]
 800782e:	4620      	mov	r0, r4
 8007830:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
}
 8007832:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    checkI2CStatus();
 8007836:	4718      	bx	r3

08007838 <_ZN19Screen_3_LTViewBaseD1Ev>:
Screen_3_LTViewBase::~Screen_3_LTViewBase()
 8007838:	4b03      	ldr	r3, [pc, #12]	@ (8007848 <_ZN19Screen_3_LTViewBaseD1Ev+0x10>)
 800783a:	b510      	push	{r4, lr}
 800783c:	4604      	mov	r4, r0
 800783e:	6003      	str	r3, [r0, #0]
    touchgfx::CanvasWidgetRenderer::resetBuffer();
 8007840:	f00f f9cc 	bl	8016bdc <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv>
}
 8007844:	4620      	mov	r0, r4
 8007846:	bd10      	pop	{r4, pc}
 8007848:	08040ad8 	.word	0x08040ad8

0800784c <_ZN19Screen_3_LTViewBaseD0Ev>:
Screen_3_LTViewBase::~Screen_3_LTViewBase()
 800784c:	4b06      	ldr	r3, [pc, #24]	@ (8007868 <_ZN19Screen_3_LTViewBaseD0Ev+0x1c>)
 800784e:	b510      	push	{r4, lr}
 8007850:	4604      	mov	r4, r0
 8007852:	6003      	str	r3, [r0, #0]
    touchgfx::CanvasWidgetRenderer::resetBuffer();
 8007854:	f00f f9c2 	bl	8016bdc <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv>
}
 8007858:	f241 2130 	movw	r1, #4656	@ 0x1230
 800785c:	4620      	mov	r0, r4
 800785e:	f022 fd2f 	bl	802a2c0 <_ZdlPvj>
 8007862:	4620      	mov	r0, r4
 8007864:	bd10      	pop	{r4, pc}
 8007866:	bf00      	nop
 8007868:	08040ad8 	.word	0x08040ad8

0800786c <_ZN19Screen_3_LTViewBase16changeScreenLeftEv>:
{
 800786c:	b508      	push	{r3, lr}

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 800786e:	f011 fa47 	bl	8018d00 <_ZN8touchgfx11Application11getInstanceEv>
}
 8007872:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    application().gotoScreen_2ScreenNoTransition();
 8007876:	f7fc bed3 	b.w	8004620 <_ZN23FrontendApplicationBase30gotoScreen_2ScreenNoTransitionEv>
	...

0800787c <_ZN19Screen_3_LTViewBaseC1Ev>:
Screen_3_LTViewBase::Screen_3_LTViewBase()
 800787c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007880:	4604      	mov	r4, r0
 8007882:	b08f      	sub	sp, #60	@ 0x3c
 8007884:	2500      	movs	r5, #0
 8007886:	f012 fe51 	bl	801a52c <_ZN8touchgfx6ScreenC1Ev>
 800788a:	46a2      	mov	sl, r4
 800788c:	4ba7      	ldr	r3, [pc, #668]	@ (8007b2c <_ZN19Screen_3_LTViewBaseC1Ev+0x2b0>)
        : Widget(), alpha(255), color(0)
 800788e:	2226      	movs	r2, #38	@ 0x26
 8007890:	4629      	mov	r1, r5
 8007892:	63e5      	str	r5, [r4, #60]	@ 0x3c
 8007894:	f104 0998 	add.w	r9, r4, #152	@ 0x98
 8007898:	f84a 3b40 	str.w	r3, [sl], #64
 800789c:	4650      	mov	r0, sl
 800789e:	f023 fe3f 	bl	802b520 <memset>
 80078a2:	4650      	mov	r0, sl
 80078a4:	f7fd fcf2 	bl	800528c <_ZN8touchgfx6WidgetC1Ev>
 80078a8:	4ba1      	ldr	r3, [pc, #644]	@ (8007b30 <_ZN19Screen_3_LTViewBaseC1Ev+0x2b4>)
 80078aa:	f64f 7bff 	movw	fp, #65535	@ 0xffff
 80078ae:	a90c      	add	r1, sp, #48	@ 0x30
 80078b0:	6423      	str	r3, [r4, #64]	@ 0x40
 80078b2:	23ff      	movs	r3, #255	@ 0xff
        : color(col)
 80078b4:	66a5      	str	r5, [r4, #104]	@ 0x68
 80078b6:	f504 7886 	add.w	r8, r4, #268	@ 0x10c
 80078ba:	f884 3066 	strb.w	r3, [r4, #102]	@ 0x66
 80078be:	f104 036c 	add.w	r3, r4, #108	@ 0x6c
 80078c2:	f8ad b030 	strh.w	fp, [sp, #48]	@ 0x30
 80078c6:	f504 77c8 	add.w	r7, r4, #400	@ 0x190
 80078ca:	4618      	mov	r0, r3
 80078cc:	9303      	str	r3, [sp, #12]
 80078ce:	f7fd fcef 	bl	80052b0 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 80078d2:	2226      	movs	r2, #38	@ 0x26
 80078d4:	4629      	mov	r1, r5
 80078d6:	4648      	mov	r0, r9
 80078d8:	f023 fe22 	bl	802b520 <memset>
 80078dc:	4648      	mov	r0, r9
 80078de:	f7fd fcd5 	bl	800528c <_ZN8touchgfx6WidgetC1Ev>
 80078e2:	4b94      	ldr	r3, [pc, #592]	@ (8007b34 <_ZN19Screen_3_LTViewBaseC1Ev+0x2b8>)
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 80078e4:	f04f 32ff 	mov.w	r2, #4294967295
 80078e8:	a90c      	add	r1, sp, #48	@ 0x30
 80078ea:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
 80078ee:	4b92      	ldr	r3, [pc, #584]	@ (8007b38 <_ZN19Screen_3_LTViewBaseC1Ev+0x2bc>)
 80078f0:	f8a4 b0c4 	strh.w	fp, [r4, #196]	@ 0xc4
 80078f4:	f8c4 30c0 	str.w	r3, [r4, #192]	@ 0xc0
 80078f8:	f44f 037f 	mov.w	r3, #16711680	@ 0xff0000
        : color(col)
 80078fc:	f8c4 50c8 	str.w	r5, [r4, #200]	@ 0xc8
 8007900:	f8c4 30cc 	str.w	r3, [r4, #204]	@ 0xcc
 8007904:	f8a4 50d0 	strh.w	r5, [r4, #208]	@ 0xd0
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8007908:	f8c4 50d4 	str.w	r5, [r4, #212]	@ 0xd4
        : AbstractPainterARGB8888(), AbstractPainterColor(color)
 800790c:	4e8b      	ldr	r6, [pc, #556]	@ (8007b3c <_ZN19Screen_3_LTViewBaseC1Ev+0x2c0>)
              text(0)
 800790e:	e9c4 2536 	strd	r2, r5, [r4, #216]	@ 0xd8
 8007912:	f104 02e0 	add.w	r2, r4, #224	@ 0xe0
 8007916:	9204      	str	r2, [sp, #16]
 8007918:	f04f 32ff 	mov.w	r2, #4294967295
 800791c:	9804      	ldr	r0, [sp, #16]
 800791e:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8007922:	f7fd fcc5 	bl	80052b0 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8007926:	4640      	mov	r0, r8
 8007928:	f00c f9b0 	bl	8013c8c <_ZN8touchgfx4LineC1Ev>
 800792c:	f504 72be 	add.w	r2, r4, #380	@ 0x17c
 8007930:	4610      	mov	r0, r2
 8007932:	9206      	str	r2, [sp, #24]
 8007934:	f7fe fd84 	bl	8006440 <_ZN8touchgfx23AbstractPainterARGB8888C1Ev>
 8007938:	f106 0324 	add.w	r3, r6, #36	@ 0x24
 800793c:	f8c4 617c 	str.w	r6, [r4, #380]	@ 0x17c
 8007940:	4638      	mov	r0, r7
 8007942:	f8c4 3184 	str.w	r3, [r4, #388]	@ 0x184
 8007946:	f8c4 5188 	str.w	r5, [r4, #392]	@ 0x188
 800794a:	f00c f99f 	bl	8013c8c <_ZN8touchgfx4LineC1Ev>
 800794e:	f504 7200 	add.w	r2, r4, #512	@ 0x200
 8007952:	4610      	mov	r0, r2
 8007954:	9207      	str	r2, [sp, #28]
 8007956:	f7fe fd73 	bl	8006440 <_ZN8touchgfx23AbstractPainterARGB8888C1Ev>
 800795a:	f106 0324 	add.w	r3, r6, #36	@ 0x24
 800795e:	f504 7205 	add.w	r2, r4, #532	@ 0x214
 8007962:	a90c      	add	r1, sp, #48	@ 0x30
 8007964:	f8c4 3208 	str.w	r3, [r4, #520]	@ 0x208
 8007968:	4610      	mov	r0, r2
 800796a:	f8c4 6200 	str.w	r6, [r4, #512]	@ 0x200
 800796e:	f8c4 520c 	str.w	r5, [r4, #524]	@ 0x20c
 8007972:	1d26      	adds	r6, r4, #4
 8007974:	9205      	str	r2, [sp, #20]
 8007976:	f8ad b030 	strh.w	fp, [sp, #48]	@ 0x30
 800797a:	f7fd fc99 	bl	80052b0 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 800797e:	f44f 617f 	mov.w	r1, #4080	@ 0xff0
 8007982:	f504 7010 	add.w	r0, r4, #576	@ 0x240
 8007986:	f00f f91f 	bl	8016bc8 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>
    __background.setPosition(0, 0, 272, 480);
 800798a:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 800798e:	462a      	mov	r2, r5
 8007990:	4650      	mov	r0, sl
 8007992:	4629      	mov	r1, r5
 8007994:	9300      	str	r3, [sp, #0]
 8007996:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800799a:	f7fd fc63 	bl	8005264 <_ZN8touchgfx8Drawable11setPositionEssss>
        color = newColor;
 800799e:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 80079a2:	4651      	mov	r1, sl
 80079a4:	4630      	mov	r0, r6
 80079a6:	66a3      	str	r3, [r4, #104]	@ 0x68
        boundingArea = calculateBoundingArea();
 80079a8:	f10d 0a20 	add.w	sl, sp, #32
 80079ac:	f00a fcf8 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Logo_BG.setXY(0, 0);
 80079b0:	462a      	mov	r2, r5
 80079b2:	4629      	mov	r1, r5
 80079b4:	9803      	ldr	r0, [sp, #12]
 80079b6:	f7fd fc48 	bl	800524a <_ZN8touchgfx8Drawable5setXYEss>
 80079ba:	2301      	movs	r3, #1
    Logo_BG.setBitmap(touchgfx::Bitmap(BITMAP_BG_ID));
 80079bc:	a90c      	add	r1, sp, #48	@ 0x30
 80079be:	9803      	ldr	r0, [sp, #12]
 80079c0:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 80079c4:	f00e fa04 	bl	8015dd0 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80079c8:	9903      	ldr	r1, [sp, #12]
 80079ca:	4630      	mov	r0, r6
 80079cc:	f00a fce8 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    R5_Text.setPosition(45, 104, 183, 19);
 80079d0:	2313      	movs	r3, #19
 80079d2:	2268      	movs	r2, #104	@ 0x68
 80079d4:	212d      	movs	r1, #45	@ 0x2d
 80079d6:	4648      	mov	r0, r9
 80079d8:	9300      	str	r3, [sp, #0]
 80079da:	23b7      	movs	r3, #183	@ 0xb7
 80079dc:	f7fd fc42 	bl	8005264 <_ZN8touchgfx8Drawable11setPositionEssss>
        color = newColor;
 80079e0:	4b57      	ldr	r3, [pc, #348]	@ (8007b40 <_ZN19Screen_3_LTViewBaseC1Ev+0x2c4>)
        boundingArea = calculateBoundingArea();
 80079e2:	4649      	mov	r1, r9
 80079e4:	4650      	mov	r0, sl
        color = newColor;
 80079e6:	f8c4 30c8 	str.w	r3, [r4, #200]	@ 0xc8
        linespace = space;
 80079ea:	f8a4 50cc 	strh.w	r5, [r4, #204]	@ 0xcc
        boundingArea = calculateBoundingArea();
 80079ee:	f00d fd29 	bl	8015444 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 80079f2:	f104 03d4 	add.w	r3, r4, #212	@ 0xd4
 80079f6:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
 80079fa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80079fe:	4b4e      	ldr	r3, [pc, #312]	@ (8007b38 <_ZN19Screen_3_LTViewBaseC1Ev+0x2bc>)
    R5_Text.setTypedText(touchgfx::TypedText(T___SINGLEUSE_4VP2));
 8007a00:	a90c      	add	r1, sp, #48	@ 0x30
 8007a02:	4648      	mov	r0, r9
 8007a04:	930c      	str	r3, [sp, #48]	@ 0x30
 8007a06:	2310      	movs	r3, #16
 8007a08:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 8007a0c:	f00d ffb4 	bl	8015978 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8007a10:	4649      	mov	r1, r9
 8007a12:	4630      	mov	r0, r6
 8007a14:	f00a fcc4 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    GenX320_Logo.setXY(0, 0);
 8007a18:	462a      	mov	r2, r5
 8007a1a:	4629      	mov	r1, r5
 8007a1c:	9804      	ldr	r0, [sp, #16]
 8007a1e:	f7fd fc14 	bl	800524a <_ZN8touchgfx8Drawable5setXYEss>
 8007a22:	230e      	movs	r3, #14
    GenX320_Logo.setBitmap(touchgfx::Bitmap(BITMAP_SCREEN_3_NEW_ID));
 8007a24:	a90c      	add	r1, sp, #48	@ 0x30
 8007a26:	9804      	ldr	r0, [sp, #16]
 8007a28:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 8007a2c:	f00e f9d0 	bl	8015dd0 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8007a30:	9904      	ldr	r1, [sp, #16]
 8007a32:	4630      	mov	r0, r6
 8007a34:	f00a fcb4 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    horizontalLine.setPosition(0, 160, 272, 320);
 8007a38:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8007a3c:	22a0      	movs	r2, #160	@ 0xa0
 8007a3e:	4629      	mov	r1, r5
 8007a40:	4640      	mov	r0, r8
 8007a42:	9300      	str	r3, [sp, #0]
 8007a44:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8007a48:	f7fd fc0c 	bl	8005264 <_ZN8touchgfx8Drawable11setPositionEssss>
 8007a4c:	f04f 33ff 	mov.w	r3, #4294967295
     * @note The area containing the Line is not invalidated.
     */
    template <typename T>
    void setStart(T x, T y)
    {
        setStart(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 8007a50:	462a      	mov	r2, r5
 8007a52:	4629      	mov	r1, r5
 8007a54:	f8c4 3188 	str.w	r3, [r4, #392]	@ 0x188
 8007a58:	4640      	mov	r0, r8
 8007a5a:	9b06      	ldr	r3, [sp, #24]
        painterRed = Color::getRed(color);
 8007a5c:	f8a4 b18c 	strh.w	fp, [r4, #396]	@ 0x18c
 8007a60:	f8c4 3134 	str.w	r3, [r4, #308]	@ 0x134
        painterBlue = Color::getBlue(color);
 8007a64:	f884 b18e 	strb.w	fp, [r4, #398]	@ 0x18e
 8007a68:	f00c fa26 	bl	8013eb8 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>
     * @note The area containing the Line is not invalidated.
     */
    template <typename T>
    void setEnd(T x, T y)
    {
        setEnd(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 8007a6c:	462a      	mov	r2, r5
 8007a6e:	f44f 5108 	mov.w	r1, #8704	@ 0x2200
 8007a72:	4640      	mov	r0, r8
 8007a74:	f00c fa2b 	bl	8013ece <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_>
     *
     * @note The area containing the Line is not invalidated.
     */
    void setLineWidth(CWRUtil::Q5 widthQ5)
    {
        if (lineWidthQ5 == widthQ5)
 8007a78:	f8d4 3148 	ldr.w	r3, [r4, #328]	@ 0x148
 8007a7c:	2b40      	cmp	r3, #64	@ 0x40
 8007a7e:	d005      	beq.n	8007a8c <_ZN19Screen_3_LTViewBaseC1Ev+0x210>
        {
            return;
        }

        lineWidthQ5 = widthQ5;
 8007a80:	2340      	movs	r3, #64	@ 0x40

        updateCachedShape();
 8007a82:	4640      	mov	r0, r8
        lineWidthQ5 = widthQ5;
 8007a84:	f8c4 3148 	str.w	r3, [r4, #328]	@ 0x148
        updateCachedShape();
 8007a88:	f00c f920 	bl	8013ccc <_ZN8touchgfx4Line17updateCachedShapeEv>
    horizontalLine.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 8007a8c:	2101      	movs	r1, #1
 8007a8e:	4640      	mov	r0, r8
 8007a90:	f00c fa28 	bl	8013ee4 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>
 8007a94:	4641      	mov	r1, r8
 8007a96:	4630      	mov	r0, r6
 8007a98:	f00a fc82 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    verticalLine.setPosition(0, 160, 272, 320);
 8007a9c:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8007aa0:	22a0      	movs	r2, #160	@ 0xa0
 8007aa2:	2100      	movs	r1, #0
 8007aa4:	4638      	mov	r0, r7
 8007aa6:	9300      	str	r3, [sp, #0]
 8007aa8:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8007aac:	f7fd fbda 	bl	8005264 <_ZN8touchgfx8Drawable11setPositionEssss>
 8007ab0:	f04f 33ff 	mov.w	r3, #4294967295
        setStart(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	4638      	mov	r0, r7
 8007ab8:	f8c4 320c 	str.w	r3, [r4, #524]	@ 0x20c
        painterRed = Color::getRed(color);
 8007abc:	f8a4 3210 	strh.w	r3, [r4, #528]	@ 0x210
        painterBlue = Color::getBlue(color);
 8007ac0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007ac4:	4611      	mov	r1, r2
 8007ac6:	f884 3212 	strb.w	r3, [r4, #530]	@ 0x212
 8007aca:	9b07      	ldr	r3, [sp, #28]
 8007acc:	f8c4 31b8 	str.w	r3, [r4, #440]	@ 0x1b8
 8007ad0:	f00c f9f2 	bl	8013eb8 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>
        setEnd(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 8007ad4:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 8007ad8:	2100      	movs	r1, #0
 8007ada:	4638      	mov	r0, r7
 8007adc:	f00c f9f7 	bl	8013ece <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_>
        if (lineWidthQ5 == widthQ5)
 8007ae0:	f8d4 31cc 	ldr.w	r3, [r4, #460]	@ 0x1cc
 8007ae4:	2b40      	cmp	r3, #64	@ 0x40
 8007ae6:	d005      	beq.n	8007af4 <_ZN19Screen_3_LTViewBaseC1Ev+0x278>
        lineWidthQ5 = widthQ5;
 8007ae8:	2340      	movs	r3, #64	@ 0x40
        updateCachedShape();
 8007aea:	4638      	mov	r0, r7
        lineWidthQ5 = widthQ5;
 8007aec:	f8c4 31cc 	str.w	r3, [r4, #460]	@ 0x1cc
        updateCachedShape();
 8007af0:	f00c f8ec 	bl	8013ccc <_ZN8touchgfx4Line17updateCachedShapeEv>
    verticalLine.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 8007af4:	4638      	mov	r0, r7
 8007af6:	2101      	movs	r1, #1
 8007af8:	f00c f9f4 	bl	8013ee4 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>
 8007afc:	4639      	mov	r1, r7
 8007afe:	4630      	mov	r0, r6
 8007b00:	f00a fc4e 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    image1.setXY(166, 21);
 8007b04:	2215      	movs	r2, #21
 8007b06:	9805      	ldr	r0, [sp, #20]
 8007b08:	21a6      	movs	r1, #166	@ 0xa6
 8007b0a:	f7fd fb9e 	bl	800524a <_ZN8touchgfx8Drawable5setXYEss>
 8007b0e:	230b      	movs	r3, #11
    image1.setBitmap(touchgfx::Bitmap(BITMAP_RISC_V_ID));
 8007b10:	a90c      	add	r1, sp, #48	@ 0x30
 8007b12:	9805      	ldr	r0, [sp, #20]
 8007b14:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 8007b18:	f00e f95a 	bl	8015dd0 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8007b1c:	4630      	mov	r0, r6
 8007b1e:	9905      	ldr	r1, [sp, #20]
 8007b20:	f00a fc3e 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8007b24:	4620      	mov	r0, r4
 8007b26:	b00f      	add	sp, #60	@ 0x3c
 8007b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b2c:	08040ad8 	.word	0x08040ad8
 8007b30:	0804250c 	.word	0x0804250c
 8007b34:	0804247c 	.word	0x0804247c
 8007b38:	0803f9a8 	.word	0x0803f9a8
 8007b3c:	08041e5c 	.word	0x08041e5c
 8007b40:	ffd8dfec 	.word	0xffd8dfec

08007b44 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_Nexa_Regular_otf_11_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_Nexa_Regular_otf_11_4bpp();

touchgfx::GeneratedFont& getFont_Nexa_Regular_otf_11_4bpp()
{
    static touchgfx::GeneratedFont Nexa_Regular_otf_11_4bpp(glyphs_Nexa_Regular_otf_11_4bpp, 94, 14, 11, 0, 0, 4, 1, 1, 1, unicodes_Nexa_Regular_otf_11_4bpp, kerning_Nexa_Regular_otf_11_4bpp, 63, 0, 0, 0);
 8007b44:	4770      	bx	lr
	...

08007b48 <_Z32getFont_Nexa_Regular_otf_11_4bppv>:
{
 8007b48:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont Nexa_Regular_otf_11_4bpp(glyphs_Nexa_Regular_otf_11_4bpp, 94, 14, 11, 0, 0, 4, 1, 1, 1, unicodes_Nexa_Regular_otf_11_4bpp, kerning_Nexa_Regular_otf_11_4bpp, 63, 0, 0, 0);
 8007b4a:	4d17      	ldr	r5, [pc, #92]	@ (8007ba8 <_Z32getFont_Nexa_Regular_otf_11_4bppv+0x60>)
{
 8007b4c:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont Nexa_Regular_otf_11_4bpp(glyphs_Nexa_Regular_otf_11_4bpp, 94, 14, 11, 0, 0, 4, 1, 1, 1, unicodes_Nexa_Regular_otf_11_4bpp, kerning_Nexa_Regular_otf_11_4bpp, 63, 0, 0, 0);
 8007b4e:	682c      	ldr	r4, [r5, #0]
 8007b50:	f3bf 8f5b 	dmb	ish
 8007b54:	f014 0401 	ands.w	r4, r4, #1
 8007b58:	d122      	bne.n	8007ba0 <_Z32getFont_Nexa_Regular_otf_11_4bppv+0x58>
 8007b5a:	4628      	mov	r0, r5
 8007b5c:	f022 fbb2 	bl	802a2c4 <__cxa_guard_acquire>
 8007b60:	b1f0      	cbz	r0, 8007ba0 <_Z32getFont_Nexa_Regular_otf_11_4bppv+0x58>
 8007b62:	233f      	movs	r3, #63	@ 0x3f
 8007b64:	225e      	movs	r2, #94	@ 0x5e
 8007b66:	4911      	ldr	r1, [pc, #68]	@ (8007bac <_Z32getFont_Nexa_Regular_otf_11_4bppv+0x64>)
 8007b68:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b6a:	4b11      	ldr	r3, [pc, #68]	@ (8007bb0 <_Z32getFont_Nexa_Regular_otf_11_4bppv+0x68>)
 8007b6c:	4811      	ldr	r0, [pc, #68]	@ (8007bb4 <_Z32getFont_Nexa_Regular_otf_11_4bppv+0x6c>)
 8007b6e:	9308      	str	r3, [sp, #32]
 8007b70:	4b11      	ldr	r3, [pc, #68]	@ (8007bb8 <_Z32getFont_Nexa_Regular_otf_11_4bppv+0x70>)
 8007b72:	940a      	str	r4, [sp, #40]	@ 0x28
 8007b74:	9307      	str	r3, [sp, #28]
 8007b76:	2301      	movs	r3, #1
 8007b78:	9401      	str	r4, [sp, #4]
 8007b7a:	9304      	str	r3, [sp, #16]
 8007b7c:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8007b80:	2304      	movs	r3, #4
 8007b82:	e9cd 4302 	strd	r4, r3, [sp, #8]
 8007b86:	230b      	movs	r3, #11
 8007b88:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8007b8c:	9300      	str	r3, [sp, #0]
 8007b8e:	230e      	movs	r3, #14
 8007b90:	f7fd fa40 	bl	8005014 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8007b94:	4809      	ldr	r0, [pc, #36]	@ (8007bbc <_Z32getFont_Nexa_Regular_otf_11_4bppv+0x74>)
 8007b96:	f022 fd2f 	bl	802a5f8 <atexit>
 8007b9a:	4628      	mov	r0, r5
 8007b9c:	f022 fb9e 	bl	802a2dc <__cxa_guard_release>
    return Nexa_Regular_otf_11_4bpp;
}
 8007ba0:	4804      	ldr	r0, [pc, #16]	@ (8007bb4 <_Z32getFont_Nexa_Regular_otf_11_4bppv+0x6c>)
 8007ba2:	b00f      	add	sp, #60	@ 0x3c
 8007ba4:	bd30      	pop	{r4, r5, pc}
 8007ba6:	bf00      	nop
 8007ba8:	20016920 	.word	0x20016920
 8007bac:	901b90a4 	.word	0x901b90a4
 8007bb0:	08042ec8 	.word	0x08042ec8
 8007bb4:	20016924 	.word	0x20016924
 8007bb8:	08044560 	.word	0x08044560
 8007bbc:	08007b45 	.word	0x08007b45

08007bc0 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_Nexa_XBold_otf_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_Nexa_XBold_otf_10_4bpp();

touchgfx::GeneratedFont& getFont_Nexa_XBold_otf_10_4bpp()
{
    static touchgfx::GeneratedFont Nexa_XBold_otf_10_4bpp(glyphs_Nexa_XBold_otf_10_4bpp, 95, 13, 10, 0, 0, 4, 1, 1, 1, unicodes_Nexa_XBold_otf_10_4bpp, kerning_Nexa_XBold_otf_10_4bpp, 63, 0, 0, 0);
 8007bc0:	4770      	bx	lr
	...

08007bc4 <_Z30getFont_Nexa_XBold_otf_10_4bppv>:
{
 8007bc4:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont Nexa_XBold_otf_10_4bpp(glyphs_Nexa_XBold_otf_10_4bpp, 95, 13, 10, 0, 0, 4, 1, 1, 1, unicodes_Nexa_XBold_otf_10_4bpp, kerning_Nexa_XBold_otf_10_4bpp, 63, 0, 0, 0);
 8007bc6:	4d17      	ldr	r5, [pc, #92]	@ (8007c24 <_Z30getFont_Nexa_XBold_otf_10_4bppv+0x60>)
{
 8007bc8:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont Nexa_XBold_otf_10_4bpp(glyphs_Nexa_XBold_otf_10_4bpp, 95, 13, 10, 0, 0, 4, 1, 1, 1, unicodes_Nexa_XBold_otf_10_4bpp, kerning_Nexa_XBold_otf_10_4bpp, 63, 0, 0, 0);
 8007bca:	682c      	ldr	r4, [r5, #0]
 8007bcc:	f3bf 8f5b 	dmb	ish
 8007bd0:	f014 0401 	ands.w	r4, r4, #1
 8007bd4:	d122      	bne.n	8007c1c <_Z30getFont_Nexa_XBold_otf_10_4bppv+0x58>
 8007bd6:	4628      	mov	r0, r5
 8007bd8:	f022 fb74 	bl	802a2c4 <__cxa_guard_acquire>
 8007bdc:	b1f0      	cbz	r0, 8007c1c <_Z30getFont_Nexa_XBold_otf_10_4bppv+0x58>
 8007bde:	233f      	movs	r3, #63	@ 0x3f
 8007be0:	225f      	movs	r2, #95	@ 0x5f
 8007be2:	4911      	ldr	r1, [pc, #68]	@ (8007c28 <_Z30getFont_Nexa_XBold_otf_10_4bppv+0x64>)
 8007be4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007be6:	4b11      	ldr	r3, [pc, #68]	@ (8007c2c <_Z30getFont_Nexa_XBold_otf_10_4bppv+0x68>)
 8007be8:	4811      	ldr	r0, [pc, #68]	@ (8007c30 <_Z30getFont_Nexa_XBold_otf_10_4bppv+0x6c>)
 8007bea:	9308      	str	r3, [sp, #32]
 8007bec:	4b11      	ldr	r3, [pc, #68]	@ (8007c34 <_Z30getFont_Nexa_XBold_otf_10_4bppv+0x70>)
 8007bee:	940a      	str	r4, [sp, #40]	@ 0x28
 8007bf0:	9307      	str	r3, [sp, #28]
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	9401      	str	r4, [sp, #4]
 8007bf6:	9304      	str	r3, [sp, #16]
 8007bf8:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8007bfc:	2304      	movs	r3, #4
 8007bfe:	e9cd 4302 	strd	r4, r3, [sp, #8]
 8007c02:	230a      	movs	r3, #10
 8007c04:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8007c08:	9300      	str	r3, [sp, #0]
 8007c0a:	230d      	movs	r3, #13
 8007c0c:	f7fd fa02 	bl	8005014 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8007c10:	4809      	ldr	r0, [pc, #36]	@ (8007c38 <_Z30getFont_Nexa_XBold_otf_10_4bppv+0x74>)
 8007c12:	f022 fcf1 	bl	802a5f8 <atexit>
 8007c16:	4628      	mov	r0, r5
 8007c18:	f022 fb60 	bl	802a2dc <__cxa_guard_release>
    return Nexa_XBold_otf_10_4bpp;
}
 8007c1c:	4804      	ldr	r0, [pc, #16]	@ (8007c30 <_Z30getFont_Nexa_XBold_otf_10_4bppv+0x6c>)
 8007c1e:	b00f      	add	sp, #60	@ 0x3c
 8007c20:	bd30      	pop	{r4, r5, pc}
 8007c22:	bf00      	nop
 8007c24:	20016950 	.word	0x20016950
 8007c28:	901b95c8 	.word	0x901b95c8
 8007c2c:	080431b8 	.word	0x080431b8
 8007c30:	20016954 	.word	0x20016954
 8007c34:	08044564 	.word	0x08044564
 8007c38:	08007bc1 	.word	0x08007bc1

08007c3c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_Nexa_XBold_otf_11_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_Nexa_XBold_otf_11_4bpp();

touchgfx::GeneratedFont& getFont_Nexa_XBold_otf_11_4bpp()
{
    static touchgfx::GeneratedFont Nexa_XBold_otf_11_4bpp(glyphs_Nexa_XBold_otf_11_4bpp, 95, 15, 11, 0, 0, 4, 1, 1, 1, unicodes_Nexa_XBold_otf_11_4bpp, kerning_Nexa_XBold_otf_11_4bpp, 63, 0, 0, 0);
 8007c3c:	4770      	bx	lr
	...

08007c40 <_Z30getFont_Nexa_XBold_otf_11_4bppv>:
{
 8007c40:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont Nexa_XBold_otf_11_4bpp(glyphs_Nexa_XBold_otf_11_4bpp, 95, 15, 11, 0, 0, 4, 1, 1, 1, unicodes_Nexa_XBold_otf_11_4bpp, kerning_Nexa_XBold_otf_11_4bpp, 63, 0, 0, 0);
 8007c42:	4d17      	ldr	r5, [pc, #92]	@ (8007ca0 <_Z30getFont_Nexa_XBold_otf_11_4bppv+0x60>)
{
 8007c44:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont Nexa_XBold_otf_11_4bpp(glyphs_Nexa_XBold_otf_11_4bpp, 95, 15, 11, 0, 0, 4, 1, 1, 1, unicodes_Nexa_XBold_otf_11_4bpp, kerning_Nexa_XBold_otf_11_4bpp, 63, 0, 0, 0);
 8007c46:	682c      	ldr	r4, [r5, #0]
 8007c48:	f3bf 8f5b 	dmb	ish
 8007c4c:	f014 0401 	ands.w	r4, r4, #1
 8007c50:	d122      	bne.n	8007c98 <_Z30getFont_Nexa_XBold_otf_11_4bppv+0x58>
 8007c52:	4628      	mov	r0, r5
 8007c54:	f022 fb36 	bl	802a2c4 <__cxa_guard_acquire>
 8007c58:	b1f0      	cbz	r0, 8007c98 <_Z30getFont_Nexa_XBold_otf_11_4bppv+0x58>
 8007c5a:	233f      	movs	r3, #63	@ 0x3f
 8007c5c:	225f      	movs	r2, #95	@ 0x5f
 8007c5e:	4911      	ldr	r1, [pc, #68]	@ (8007ca4 <_Z30getFont_Nexa_XBold_otf_11_4bppv+0x64>)
 8007c60:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c62:	4b11      	ldr	r3, [pc, #68]	@ (8007ca8 <_Z30getFont_Nexa_XBold_otf_11_4bppv+0x68>)
 8007c64:	4811      	ldr	r0, [pc, #68]	@ (8007cac <_Z30getFont_Nexa_XBold_otf_11_4bppv+0x6c>)
 8007c66:	9308      	str	r3, [sp, #32]
 8007c68:	4b11      	ldr	r3, [pc, #68]	@ (8007cb0 <_Z30getFont_Nexa_XBold_otf_11_4bppv+0x70>)
 8007c6a:	940a      	str	r4, [sp, #40]	@ 0x28
 8007c6c:	9307      	str	r3, [sp, #28]
 8007c6e:	2301      	movs	r3, #1
 8007c70:	9401      	str	r4, [sp, #4]
 8007c72:	9304      	str	r3, [sp, #16]
 8007c74:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8007c78:	2304      	movs	r3, #4
 8007c7a:	e9cd 4302 	strd	r4, r3, [sp, #8]
 8007c7e:	230b      	movs	r3, #11
 8007c80:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8007c84:	9300      	str	r3, [sp, #0]
 8007c86:	230f      	movs	r3, #15
 8007c88:	f7fd f9c4 	bl	8005014 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8007c8c:	4809      	ldr	r0, [pc, #36]	@ (8007cb4 <_Z30getFont_Nexa_XBold_otf_11_4bppv+0x74>)
 8007c8e:	f022 fcb3 	bl	802a5f8 <atexit>
 8007c92:	4628      	mov	r0, r5
 8007c94:	f022 fb22 	bl	802a2dc <__cxa_guard_release>
    return Nexa_XBold_otf_11_4bpp;
}
 8007c98:	4804      	ldr	r0, [pc, #16]	@ (8007cac <_Z30getFont_Nexa_XBold_otf_11_4bppv+0x6c>)
 8007c9a:	b00f      	add	sp, #60	@ 0x3c
 8007c9c:	bd30      	pop	{r4, r5, pc}
 8007c9e:	bf00      	nop
 8007ca0:	20016980 	.word	0x20016980
 8007ca4:	901b9afc 	.word	0x901b9afc
 8007ca8:	0804346c 	.word	0x0804346c
 8007cac:	20016984 	.word	0x20016984
 8007cb0:	08044568 	.word	0x08044568
 8007cb4:	08007c3d 	.word	0x08007c3d

08007cb8 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_12_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_12_4bpp();

touchgfx::GeneratedFont& getFont_verdana_12_4bpp()
{
    static touchgfx::GeneratedFont verdana_12_4bpp(glyphs_verdana_12_4bpp, 94, 15, 12, 0, 0, 4, 1, 1, 1, unicodes_verdana_12_4bpp, kerning_verdana_12_4bpp, 63, 0, 0, 0);
 8007cb8:	4770      	bx	lr
	...

08007cbc <_Z23getFont_verdana_12_4bppv>:
{
 8007cbc:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_12_4bpp(glyphs_verdana_12_4bpp, 94, 15, 12, 0, 0, 4, 1, 1, 1, unicodes_verdana_12_4bpp, kerning_verdana_12_4bpp, 63, 0, 0, 0);
 8007cbe:	4d17      	ldr	r5, [pc, #92]	@ (8007d1c <_Z23getFont_verdana_12_4bppv+0x60>)
{
 8007cc0:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_12_4bpp(glyphs_verdana_12_4bpp, 94, 15, 12, 0, 0, 4, 1, 1, 1, unicodes_verdana_12_4bpp, kerning_verdana_12_4bpp, 63, 0, 0, 0);
 8007cc2:	682c      	ldr	r4, [r5, #0]
 8007cc4:	f3bf 8f5b 	dmb	ish
 8007cc8:	f014 0401 	ands.w	r4, r4, #1
 8007ccc:	d122      	bne.n	8007d14 <_Z23getFont_verdana_12_4bppv+0x58>
 8007cce:	4628      	mov	r0, r5
 8007cd0:	f022 faf8 	bl	802a2c4 <__cxa_guard_acquire>
 8007cd4:	b1f0      	cbz	r0, 8007d14 <_Z23getFont_verdana_12_4bppv+0x58>
 8007cd6:	233f      	movs	r3, #63	@ 0x3f
 8007cd8:	225e      	movs	r2, #94	@ 0x5e
 8007cda:	4911      	ldr	r1, [pc, #68]	@ (8007d20 <_Z23getFont_verdana_12_4bppv+0x64>)
 8007cdc:	9309      	str	r3, [sp, #36]	@ 0x24
 8007cde:	4b11      	ldr	r3, [pc, #68]	@ (8007d24 <_Z23getFont_verdana_12_4bppv+0x68>)
 8007ce0:	4811      	ldr	r0, [pc, #68]	@ (8007d28 <_Z23getFont_verdana_12_4bppv+0x6c>)
 8007ce2:	9308      	str	r3, [sp, #32]
 8007ce4:	4b11      	ldr	r3, [pc, #68]	@ (8007d2c <_Z23getFont_verdana_12_4bppv+0x70>)
 8007ce6:	940a      	str	r4, [sp, #40]	@ 0x28
 8007ce8:	9307      	str	r3, [sp, #28]
 8007cea:	2301      	movs	r3, #1
 8007cec:	9401      	str	r4, [sp, #4]
 8007cee:	9304      	str	r3, [sp, #16]
 8007cf0:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8007cf4:	2304      	movs	r3, #4
 8007cf6:	e9cd 4302 	strd	r4, r3, [sp, #8]
 8007cfa:	230c      	movs	r3, #12
 8007cfc:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8007d00:	9300      	str	r3, [sp, #0]
 8007d02:	230f      	movs	r3, #15
 8007d04:	f7fd f986 	bl	8005014 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8007d08:	4809      	ldr	r0, [pc, #36]	@ (8007d30 <_Z23getFont_verdana_12_4bppv+0x74>)
 8007d0a:	f022 fc75 	bl	802a5f8 <atexit>
 8007d0e:	4628      	mov	r0, r5
 8007d10:	f022 fae4 	bl	802a2dc <__cxa_guard_release>
    return verdana_12_4bpp;
}
 8007d14:	4804      	ldr	r0, [pc, #16]	@ (8007d28 <_Z23getFont_verdana_12_4bppv+0x6c>)
 8007d16:	b00f      	add	sp, #60	@ 0x3c
 8007d18:	bd30      	pop	{r4, r5, pc}
 8007d1a:	bf00      	nop
 8007d1c:	200169b0 	.word	0x200169b0
 8007d20:	901ba030 	.word	0x901ba030
 8007d24:	08043774 	.word	0x08043774
 8007d28:	200169b4 	.word	0x200169b4
 8007d2c:	0804456c 	.word	0x0804456c
 8007d30:	08007cb9 	.word	0x08007cb9

08007d34 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_130_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_130_4bpp();

touchgfx::GeneratedFont& getFont_verdana_130_4bpp()
{
    static touchgfx::GeneratedFont verdana_130_4bpp(glyphs_verdana_130_4bpp, 95, 157, 130, 0, 0, 4, 1, 4, 5, unicodes_verdana_130_4bpp, kerning_verdana_130_4bpp, 63, 0, 0, 0);
 8007d34:	4770      	bx	lr
	...

08007d38 <_Z24getFont_verdana_130_4bppv>:
{
 8007d38:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_130_4bpp(glyphs_verdana_130_4bpp, 95, 157, 130, 0, 0, 4, 1, 4, 5, unicodes_verdana_130_4bpp, kerning_verdana_130_4bpp, 63, 0, 0, 0);
 8007d3a:	4d17      	ldr	r5, [pc, #92]	@ (8007d98 <_Z24getFont_verdana_130_4bppv+0x60>)
{
 8007d3c:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_130_4bpp(glyphs_verdana_130_4bpp, 95, 157, 130, 0, 0, 4, 1, 4, 5, unicodes_verdana_130_4bpp, kerning_verdana_130_4bpp, 63, 0, 0, 0);
 8007d3e:	682c      	ldr	r4, [r5, #0]
 8007d40:	f3bf 8f5b 	dmb	ish
 8007d44:	f014 0401 	ands.w	r4, r4, #1
 8007d48:	d123      	bne.n	8007d92 <_Z24getFont_verdana_130_4bppv+0x5a>
 8007d4a:	4628      	mov	r0, r5
 8007d4c:	f022 faba 	bl	802a2c4 <__cxa_guard_acquire>
 8007d50:	b1f8      	cbz	r0, 8007d92 <_Z24getFont_verdana_130_4bppv+0x5a>
 8007d52:	233f      	movs	r3, #63	@ 0x3f
 8007d54:	2205      	movs	r2, #5
 8007d56:	4911      	ldr	r1, [pc, #68]	@ (8007d9c <_Z24getFont_verdana_130_4bppv+0x64>)
 8007d58:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d5a:	4b11      	ldr	r3, [pc, #68]	@ (8007da0 <_Z24getFont_verdana_130_4bppv+0x68>)
 8007d5c:	4811      	ldr	r0, [pc, #68]	@ (8007da4 <_Z24getFont_verdana_130_4bppv+0x6c>)
 8007d5e:	9308      	str	r3, [sp, #32]
 8007d60:	4b11      	ldr	r3, [pc, #68]	@ (8007da8 <_Z24getFont_verdana_130_4bppv+0x70>)
 8007d62:	940a      	str	r4, [sp, #40]	@ 0x28
 8007d64:	9307      	str	r3, [sp, #28]
 8007d66:	2304      	movs	r3, #4
 8007d68:	e9cd 3205 	strd	r3, r2, [sp, #20]
 8007d6c:	2201      	movs	r2, #1
 8007d6e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8007d72:	2382      	movs	r3, #130	@ 0x82
 8007d74:	225f      	movs	r2, #95	@ 0x5f
 8007d76:	9300      	str	r3, [sp, #0]
 8007d78:	239d      	movs	r3, #157	@ 0x9d
 8007d7a:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8007d7e:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8007d82:	f7fd f947 	bl	8005014 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8007d86:	4809      	ldr	r0, [pc, #36]	@ (8007dac <_Z24getFont_verdana_130_4bppv+0x74>)
 8007d88:	f022 fc36 	bl	802a5f8 <atexit>
 8007d8c:	4628      	mov	r0, r5
 8007d8e:	f022 faa5 	bl	802a2dc <__cxa_guard_release>
    return verdana_130_4bpp;
}
 8007d92:	4804      	ldr	r0, [pc, #16]	@ (8007da4 <_Z24getFont_verdana_130_4bppv+0x6c>)
 8007d94:	b00f      	add	sp, #60	@ 0x3c
 8007d96:	bd30      	pop	{r4, r5, pc}
 8007d98:	200169e0 	.word	0x200169e0
 8007d9c:	901ba554 	.word	0x901ba554
 8007da0:	080437f8 	.word	0x080437f8
 8007da4:	200169e4 	.word	0x200169e4
 8007da8:	08044570 	.word	0x08044570
 8007dac:	08007d35 	.word	0x08007d35

08007db0 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_13_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_13_4bpp();

touchgfx::GeneratedFont& getFont_verdana_13_4bpp()
{
    static touchgfx::GeneratedFont verdana_13_4bpp(glyphs_verdana_13_4bpp, 94, 16, 13, 0, 0, 4, 1, 1, 1, unicodes_verdana_13_4bpp, kerning_verdana_13_4bpp, 63, 0, 0, 0);
 8007db0:	4770      	bx	lr
	...

08007db4 <_Z23getFont_verdana_13_4bppv>:
{
 8007db4:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_13_4bpp(glyphs_verdana_13_4bpp, 94, 16, 13, 0, 0, 4, 1, 1, 1, unicodes_verdana_13_4bpp, kerning_verdana_13_4bpp, 63, 0, 0, 0);
 8007db6:	4d17      	ldr	r5, [pc, #92]	@ (8007e14 <_Z23getFont_verdana_13_4bppv+0x60>)
{
 8007db8:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_13_4bpp(glyphs_verdana_13_4bpp, 94, 16, 13, 0, 0, 4, 1, 1, 1, unicodes_verdana_13_4bpp, kerning_verdana_13_4bpp, 63, 0, 0, 0);
 8007dba:	682c      	ldr	r4, [r5, #0]
 8007dbc:	f3bf 8f5b 	dmb	ish
 8007dc0:	f014 0401 	ands.w	r4, r4, #1
 8007dc4:	d122      	bne.n	8007e0c <_Z23getFont_verdana_13_4bppv+0x58>
 8007dc6:	4628      	mov	r0, r5
 8007dc8:	f022 fa7c 	bl	802a2c4 <__cxa_guard_acquire>
 8007dcc:	b1f0      	cbz	r0, 8007e0c <_Z23getFont_verdana_13_4bppv+0x58>
 8007dce:	233f      	movs	r3, #63	@ 0x3f
 8007dd0:	225e      	movs	r2, #94	@ 0x5e
 8007dd2:	4911      	ldr	r1, [pc, #68]	@ (8007e18 <_Z23getFont_verdana_13_4bppv+0x64>)
 8007dd4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007dd6:	4b11      	ldr	r3, [pc, #68]	@ (8007e1c <_Z23getFont_verdana_13_4bppv+0x68>)
 8007dd8:	4811      	ldr	r0, [pc, #68]	@ (8007e20 <_Z23getFont_verdana_13_4bppv+0x6c>)
 8007dda:	9308      	str	r3, [sp, #32]
 8007ddc:	4b11      	ldr	r3, [pc, #68]	@ (8007e24 <_Z23getFont_verdana_13_4bppv+0x70>)
 8007dde:	940a      	str	r4, [sp, #40]	@ 0x28
 8007de0:	9307      	str	r3, [sp, #28]
 8007de2:	2301      	movs	r3, #1
 8007de4:	9401      	str	r4, [sp, #4]
 8007de6:	9304      	str	r3, [sp, #16]
 8007de8:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8007dec:	2304      	movs	r3, #4
 8007dee:	e9cd 4302 	strd	r4, r3, [sp, #8]
 8007df2:	230d      	movs	r3, #13
 8007df4:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8007df8:	9300      	str	r3, [sp, #0]
 8007dfa:	2310      	movs	r3, #16
 8007dfc:	f7fd f90a 	bl	8005014 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8007e00:	4809      	ldr	r0, [pc, #36]	@ (8007e28 <_Z23getFont_verdana_13_4bppv+0x74>)
 8007e02:	f022 fbf9 	bl	802a5f8 <atexit>
 8007e06:	4628      	mov	r0, r5
 8007e08:	f022 fa68 	bl	802a2dc <__cxa_guard_release>
    return verdana_13_4bpp;
}
 8007e0c:	4804      	ldr	r0, [pc, #16]	@ (8007e20 <_Z23getFont_verdana_13_4bppv+0x6c>)
 8007e0e:	b00f      	add	sp, #60	@ 0x3c
 8007e10:	bd30      	pop	{r4, r5, pc}
 8007e12:	bf00      	nop
 8007e14:	20016a10 	.word	0x20016a10
 8007e18:	901baa88 	.word	0x901baa88
 8007e1c:	08043c44 	.word	0x08043c44
 8007e20:	20016a14 	.word	0x20016a14
 8007e24:	08044574 	.word	0x08044574
 8007e28:	08007db1 	.word	0x08007db1

08007e2c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_14_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_14_4bpp();

touchgfx::GeneratedFont& getFont_verdana_14_4bpp()
{
    static touchgfx::GeneratedFont verdana_14_4bpp(glyphs_verdana_14_4bpp, 94, 17, 14, 0, 0, 4, 1, 1, 1, unicodes_verdana_14_4bpp, kerning_verdana_14_4bpp, 63, 0, 0, 0);
 8007e2c:	4770      	bx	lr
	...

08007e30 <_Z23getFont_verdana_14_4bppv>:
{
 8007e30:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_14_4bpp(glyphs_verdana_14_4bpp, 94, 17, 14, 0, 0, 4, 1, 1, 1, unicodes_verdana_14_4bpp, kerning_verdana_14_4bpp, 63, 0, 0, 0);
 8007e32:	4d17      	ldr	r5, [pc, #92]	@ (8007e90 <_Z23getFont_verdana_14_4bppv+0x60>)
{
 8007e34:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_14_4bpp(glyphs_verdana_14_4bpp, 94, 17, 14, 0, 0, 4, 1, 1, 1, unicodes_verdana_14_4bpp, kerning_verdana_14_4bpp, 63, 0, 0, 0);
 8007e36:	682c      	ldr	r4, [r5, #0]
 8007e38:	f3bf 8f5b 	dmb	ish
 8007e3c:	f014 0401 	ands.w	r4, r4, #1
 8007e40:	d122      	bne.n	8007e88 <_Z23getFont_verdana_14_4bppv+0x58>
 8007e42:	4628      	mov	r0, r5
 8007e44:	f022 fa3e 	bl	802a2c4 <__cxa_guard_acquire>
 8007e48:	b1f0      	cbz	r0, 8007e88 <_Z23getFont_verdana_14_4bppv+0x58>
 8007e4a:	233f      	movs	r3, #63	@ 0x3f
 8007e4c:	225e      	movs	r2, #94	@ 0x5e
 8007e4e:	4911      	ldr	r1, [pc, #68]	@ (8007e94 <_Z23getFont_verdana_14_4bppv+0x64>)
 8007e50:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e52:	4b11      	ldr	r3, [pc, #68]	@ (8007e98 <_Z23getFont_verdana_14_4bppv+0x68>)
 8007e54:	4811      	ldr	r0, [pc, #68]	@ (8007e9c <_Z23getFont_verdana_14_4bppv+0x6c>)
 8007e56:	9308      	str	r3, [sp, #32]
 8007e58:	4b11      	ldr	r3, [pc, #68]	@ (8007ea0 <_Z23getFont_verdana_14_4bppv+0x70>)
 8007e5a:	940a      	str	r4, [sp, #40]	@ 0x28
 8007e5c:	9307      	str	r3, [sp, #28]
 8007e5e:	2301      	movs	r3, #1
 8007e60:	9401      	str	r4, [sp, #4]
 8007e62:	9304      	str	r3, [sp, #16]
 8007e64:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8007e68:	2304      	movs	r3, #4
 8007e6a:	e9cd 4302 	strd	r4, r3, [sp, #8]
 8007e6e:	230e      	movs	r3, #14
 8007e70:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8007e74:	9300      	str	r3, [sp, #0]
 8007e76:	2311      	movs	r3, #17
 8007e78:	f7fd f8cc 	bl	8005014 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8007e7c:	4809      	ldr	r0, [pc, #36]	@ (8007ea4 <_Z23getFont_verdana_14_4bppv+0x74>)
 8007e7e:	f022 fbbb 	bl	802a5f8 <atexit>
 8007e82:	4628      	mov	r0, r5
 8007e84:	f022 fa2a 	bl	802a2dc <__cxa_guard_release>
    return verdana_14_4bpp;
}
 8007e88:	4804      	ldr	r0, [pc, #16]	@ (8007e9c <_Z23getFont_verdana_14_4bppv+0x6c>)
 8007e8a:	b00f      	add	sp, #60	@ 0x3c
 8007e8c:	bd30      	pop	{r4, r5, pc}
 8007e8e:	bf00      	nop
 8007e90:	20016a40 	.word	0x20016a40
 8007e94:	901bafac 	.word	0x901bafac
 8007e98:	08043cdc 	.word	0x08043cdc
 8007e9c:	20016a44 	.word	0x20016a44
 8007ea0:	08044578 	.word	0x08044578
 8007ea4:	08007e2d 	.word	0x08007e2d

08007ea8 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_18_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_18_4bpp();

touchgfx::GeneratedFont& getFont_verdana_18_4bpp()
{
    static touchgfx::GeneratedFont verdana_18_4bpp(glyphs_verdana_18_4bpp, 94, 22, 18, 0, 0, 4, 1, 1, 1, unicodes_verdana_18_4bpp, kerning_verdana_18_4bpp, 63, 0, 0, 0);
 8007ea8:	4770      	bx	lr
	...

08007eac <_Z23getFont_verdana_18_4bppv>:
{
 8007eac:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_18_4bpp(glyphs_verdana_18_4bpp, 94, 22, 18, 0, 0, 4, 1, 1, 1, unicodes_verdana_18_4bpp, kerning_verdana_18_4bpp, 63, 0, 0, 0);
 8007eae:	4d17      	ldr	r5, [pc, #92]	@ (8007f0c <_Z23getFont_verdana_18_4bppv+0x60>)
{
 8007eb0:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_18_4bpp(glyphs_verdana_18_4bpp, 94, 22, 18, 0, 0, 4, 1, 1, 1, unicodes_verdana_18_4bpp, kerning_verdana_18_4bpp, 63, 0, 0, 0);
 8007eb2:	682c      	ldr	r4, [r5, #0]
 8007eb4:	f3bf 8f5b 	dmb	ish
 8007eb8:	f014 0401 	ands.w	r4, r4, #1
 8007ebc:	d122      	bne.n	8007f04 <_Z23getFont_verdana_18_4bppv+0x58>
 8007ebe:	4628      	mov	r0, r5
 8007ec0:	f022 fa00 	bl	802a2c4 <__cxa_guard_acquire>
 8007ec4:	b1f0      	cbz	r0, 8007f04 <_Z23getFont_verdana_18_4bppv+0x58>
 8007ec6:	233f      	movs	r3, #63	@ 0x3f
 8007ec8:	225e      	movs	r2, #94	@ 0x5e
 8007eca:	4911      	ldr	r1, [pc, #68]	@ (8007f10 <_Z23getFont_verdana_18_4bppv+0x64>)
 8007ecc:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ece:	4b11      	ldr	r3, [pc, #68]	@ (8007f14 <_Z23getFont_verdana_18_4bppv+0x68>)
 8007ed0:	4811      	ldr	r0, [pc, #68]	@ (8007f18 <_Z23getFont_verdana_18_4bppv+0x6c>)
 8007ed2:	9308      	str	r3, [sp, #32]
 8007ed4:	4b11      	ldr	r3, [pc, #68]	@ (8007f1c <_Z23getFont_verdana_18_4bppv+0x70>)
 8007ed6:	940a      	str	r4, [sp, #40]	@ 0x28
 8007ed8:	9307      	str	r3, [sp, #28]
 8007eda:	2301      	movs	r3, #1
 8007edc:	9401      	str	r4, [sp, #4]
 8007ede:	9304      	str	r3, [sp, #16]
 8007ee0:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8007ee4:	2304      	movs	r3, #4
 8007ee6:	e9cd 4302 	strd	r4, r3, [sp, #8]
 8007eea:	2312      	movs	r3, #18
 8007eec:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8007ef0:	9300      	str	r3, [sp, #0]
 8007ef2:	2316      	movs	r3, #22
 8007ef4:	f7fd f88e 	bl	8005014 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8007ef8:	4809      	ldr	r0, [pc, #36]	@ (8007f20 <_Z23getFont_verdana_18_4bppv+0x74>)
 8007efa:	f022 fb7d 	bl	802a5f8 <atexit>
 8007efe:	4628      	mov	r0, r5
 8007f00:	f022 f9ec 	bl	802a2dc <__cxa_guard_release>
    return verdana_18_4bpp;
}
 8007f04:	4804      	ldr	r0, [pc, #16]	@ (8007f18 <_Z23getFont_verdana_18_4bppv+0x6c>)
 8007f06:	b00f      	add	sp, #60	@ 0x3c
 8007f08:	bd30      	pop	{r4, r5, pc}
 8007f0a:	bf00      	nop
 8007f0c:	20016a70 	.word	0x20016a70
 8007f10:	901bb4d0 	.word	0x901bb4d0
 8007f14:	08043d8c 	.word	0x08043d8c
 8007f18:	20016a74 	.word	0x20016a74
 8007f1c:	0804457c 	.word	0x0804457c
 8007f20:	08007ea9 	.word	0x08007ea9

08007f24 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 95, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8007f24:	4770      	bx	lr
	...

08007f28 <_Z23getFont_verdana_20_4bppv>:
{
 8007f28:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 95, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8007f2a:	4d17      	ldr	r5, [pc, #92]	@ (8007f88 <_Z23getFont_verdana_20_4bppv+0x60>)
{
 8007f2c:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 95, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8007f2e:	682c      	ldr	r4, [r5, #0]
 8007f30:	f3bf 8f5b 	dmb	ish
 8007f34:	f014 0401 	ands.w	r4, r4, #1
 8007f38:	d122      	bne.n	8007f80 <_Z23getFont_verdana_20_4bppv+0x58>
 8007f3a:	4628      	mov	r0, r5
 8007f3c:	f022 f9c2 	bl	802a2c4 <__cxa_guard_acquire>
 8007f40:	b1f0      	cbz	r0, 8007f80 <_Z23getFont_verdana_20_4bppv+0x58>
 8007f42:	233f      	movs	r3, #63	@ 0x3f
 8007f44:	225f      	movs	r2, #95	@ 0x5f
 8007f46:	4911      	ldr	r1, [pc, #68]	@ (8007f8c <_Z23getFont_verdana_20_4bppv+0x64>)
 8007f48:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f4a:	4b11      	ldr	r3, [pc, #68]	@ (8007f90 <_Z23getFont_verdana_20_4bppv+0x68>)
 8007f4c:	4811      	ldr	r0, [pc, #68]	@ (8007f94 <_Z23getFont_verdana_20_4bppv+0x6c>)
 8007f4e:	9308      	str	r3, [sp, #32]
 8007f50:	4b11      	ldr	r3, [pc, #68]	@ (8007f98 <_Z23getFont_verdana_20_4bppv+0x70>)
 8007f52:	940a      	str	r4, [sp, #40]	@ 0x28
 8007f54:	9307      	str	r3, [sp, #28]
 8007f56:	2301      	movs	r3, #1
 8007f58:	9401      	str	r4, [sp, #4]
 8007f5a:	9304      	str	r3, [sp, #16]
 8007f5c:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8007f60:	2304      	movs	r3, #4
 8007f62:	e9cd 4302 	strd	r4, r3, [sp, #8]
 8007f66:	2314      	movs	r3, #20
 8007f68:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8007f6c:	9300      	str	r3, [sp, #0]
 8007f6e:	2318      	movs	r3, #24
 8007f70:	f7fd f850 	bl	8005014 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8007f74:	4809      	ldr	r0, [pc, #36]	@ (8007f9c <_Z23getFont_verdana_20_4bppv+0x74>)
 8007f76:	f022 fb3f 	bl	802a5f8 <atexit>
 8007f7a:	4628      	mov	r0, r5
 8007f7c:	f022 f9ae 	bl	802a2dc <__cxa_guard_release>
    return verdana_20_4bpp;
}
 8007f80:	4804      	ldr	r0, [pc, #16]	@ (8007f94 <_Z23getFont_verdana_20_4bppv+0x6c>)
 8007f82:	b00f      	add	sp, #60	@ 0x3c
 8007f84:	bd30      	pop	{r4, r5, pc}
 8007f86:	bf00      	nop
 8007f88:	20016aa0 	.word	0x20016aa0
 8007f8c:	901bb9f4 	.word	0x901bb9f4
 8007f90:	08043ee0 	.word	0x08043ee0
 8007f94:	20016aa4 	.word	0x20016aa4
 8007f98:	08044580 	.word	0x08044580
 8007f9c:	08007f25 	.word	0x08007f25

08007fa0 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_22_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_22_4bpp();

touchgfx::GeneratedFont& getFont_verdana_22_4bpp()
{
    static touchgfx::GeneratedFont verdana_22_4bpp(glyphs_verdana_22_4bpp, 94, 26, 22, 0, 0, 4, 1, 1, 1, unicodes_verdana_22_4bpp, kerning_verdana_22_4bpp, 63, 0, 0, 0);
 8007fa0:	4770      	bx	lr
	...

08007fa4 <_Z23getFont_verdana_22_4bppv>:
{
 8007fa4:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_22_4bpp(glyphs_verdana_22_4bpp, 94, 26, 22, 0, 0, 4, 1, 1, 1, unicodes_verdana_22_4bpp, kerning_verdana_22_4bpp, 63, 0, 0, 0);
 8007fa6:	4d17      	ldr	r5, [pc, #92]	@ (8008004 <_Z23getFont_verdana_22_4bppv+0x60>)
{
 8007fa8:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_22_4bpp(glyphs_verdana_22_4bpp, 94, 26, 22, 0, 0, 4, 1, 1, 1, unicodes_verdana_22_4bpp, kerning_verdana_22_4bpp, 63, 0, 0, 0);
 8007faa:	682c      	ldr	r4, [r5, #0]
 8007fac:	f3bf 8f5b 	dmb	ish
 8007fb0:	f014 0401 	ands.w	r4, r4, #1
 8007fb4:	d122      	bne.n	8007ffc <_Z23getFont_verdana_22_4bppv+0x58>
 8007fb6:	4628      	mov	r0, r5
 8007fb8:	f022 f984 	bl	802a2c4 <__cxa_guard_acquire>
 8007fbc:	b1f0      	cbz	r0, 8007ffc <_Z23getFont_verdana_22_4bppv+0x58>
 8007fbe:	233f      	movs	r3, #63	@ 0x3f
 8007fc0:	225e      	movs	r2, #94	@ 0x5e
 8007fc2:	4911      	ldr	r1, [pc, #68]	@ (8008008 <_Z23getFont_verdana_22_4bppv+0x64>)
 8007fc4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007fc6:	4b11      	ldr	r3, [pc, #68]	@ (800800c <_Z23getFont_verdana_22_4bppv+0x68>)
 8007fc8:	4811      	ldr	r0, [pc, #68]	@ (8008010 <_Z23getFont_verdana_22_4bppv+0x6c>)
 8007fca:	9308      	str	r3, [sp, #32]
 8007fcc:	4b11      	ldr	r3, [pc, #68]	@ (8008014 <_Z23getFont_verdana_22_4bppv+0x70>)
 8007fce:	940a      	str	r4, [sp, #40]	@ 0x28
 8007fd0:	9307      	str	r3, [sp, #28]
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	9401      	str	r4, [sp, #4]
 8007fd6:	9304      	str	r3, [sp, #16]
 8007fd8:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8007fdc:	2304      	movs	r3, #4
 8007fde:	e9cd 4302 	strd	r4, r3, [sp, #8]
 8007fe2:	2316      	movs	r3, #22
 8007fe4:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8007fe8:	9300      	str	r3, [sp, #0]
 8007fea:	231a      	movs	r3, #26
 8007fec:	f7fd f812 	bl	8005014 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8007ff0:	4809      	ldr	r0, [pc, #36]	@ (8008018 <_Z23getFont_verdana_22_4bppv+0x74>)
 8007ff2:	f022 fb01 	bl	802a5f8 <atexit>
 8007ff6:	4628      	mov	r0, r5
 8007ff8:	f022 f970 	bl	802a2dc <__cxa_guard_release>
    return verdana_22_4bpp;
}
 8007ffc:	4804      	ldr	r0, [pc, #16]	@ (8008010 <_Z23getFont_verdana_22_4bppv+0x6c>)
 8007ffe:	b00f      	add	sp, #60	@ 0x3c
 8008000:	bd30      	pop	{r4, r5, pc}
 8008002:	bf00      	nop
 8008004:	20016ad0 	.word	0x20016ad0
 8008008:	901bbf28 	.word	0x901bbf28
 800800c:	08044084 	.word	0x08044084
 8008010:	20016ad4 	.word	0x20016ad4
 8008014:	08044584 	.word	0x08044584
 8008018:	08007fa1 	.word	0x08007fa1

0800801c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 95, 48, 40, 0, 0, 4, 1, 2, 2, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800801c:	4770      	bx	lr
	...

08008020 <_Z23getFont_verdana_40_4bppv>:
{
 8008020:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 95, 48, 40, 0, 0, 4, 1, 2, 2, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8008022:	4d17      	ldr	r5, [pc, #92]	@ (8008080 <_Z23getFont_verdana_40_4bppv+0x60>)
{
 8008024:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 95, 48, 40, 0, 0, 4, 1, 2, 2, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8008026:	682c      	ldr	r4, [r5, #0]
 8008028:	f3bf 8f5b 	dmb	ish
 800802c:	f014 0401 	ands.w	r4, r4, #1
 8008030:	d123      	bne.n	800807a <_Z23getFont_verdana_40_4bppv+0x5a>
 8008032:	4628      	mov	r0, r5
 8008034:	f022 f946 	bl	802a2c4 <__cxa_guard_acquire>
 8008038:	b1f8      	cbz	r0, 800807a <_Z23getFont_verdana_40_4bppv+0x5a>
 800803a:	233f      	movs	r3, #63	@ 0x3f
 800803c:	2201      	movs	r2, #1
 800803e:	4911      	ldr	r1, [pc, #68]	@ (8008084 <_Z23getFont_verdana_40_4bppv+0x64>)
 8008040:	9309      	str	r3, [sp, #36]	@ 0x24
 8008042:	4b11      	ldr	r3, [pc, #68]	@ (8008088 <_Z23getFont_verdana_40_4bppv+0x68>)
 8008044:	4811      	ldr	r0, [pc, #68]	@ (800808c <_Z23getFont_verdana_40_4bppv+0x6c>)
 8008046:	9308      	str	r3, [sp, #32]
 8008048:	4b11      	ldr	r3, [pc, #68]	@ (8008090 <_Z23getFont_verdana_40_4bppv+0x70>)
 800804a:	940a      	str	r4, [sp, #40]	@ 0x28
 800804c:	9307      	str	r3, [sp, #28]
 800804e:	2302      	movs	r3, #2
 8008050:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8008054:	2304      	movs	r3, #4
 8008056:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800805a:	2328      	movs	r3, #40	@ 0x28
 800805c:	225f      	movs	r2, #95	@ 0x5f
 800805e:	9300      	str	r3, [sp, #0]
 8008060:	2330      	movs	r3, #48	@ 0x30
 8008062:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8008066:	e9cd 4401 	strd	r4, r4, [sp, #4]
 800806a:	f7fc ffd3 	bl	8005014 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800806e:	4809      	ldr	r0, [pc, #36]	@ (8008094 <_Z23getFont_verdana_40_4bppv+0x74>)
 8008070:	f022 fac2 	bl	802a5f8 <atexit>
 8008074:	4628      	mov	r0, r5
 8008076:	f022 f931 	bl	802a2dc <__cxa_guard_release>
    return verdana_40_4bpp;
}
 800807a:	4804      	ldr	r0, [pc, #16]	@ (800808c <_Z23getFont_verdana_40_4bppv+0x6c>)
 800807c:	b00f      	add	sp, #60	@ 0x3c
 800807e:	bd30      	pop	{r4, r5, pc}
 8008080:	20016b00 	.word	0x20016b00
 8008084:	901bc44c 	.word	0x901bc44c
 8008088:	0804427c 	.word	0x0804427c
 800808c:	20016b04 	.word	0x20016b04
 8008090:	08044588 	.word	0x08044588
 8008094:	0800801d 	.word	0x0800801d

08008098 <_ZNK8touchgfx4Font12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return 0;
    }
 8008098:	2000      	movs	r0, #0
 800809a:	4770      	bx	lr

0800809c <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return 0;
    }
 800809c:	2000      	movs	r0, #0
 800809e:	4770      	bx	lr

080080a0 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80080a0:	b40e      	push	{r1, r2, r3}
 80080a2:	b503      	push	{r0, r1, lr}
 80080a4:	ab03      	add	r3, sp, #12
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthRTL(TEXT_DIRECTION_LTR, text, pArg);
 80080a6:	2100      	movs	r1, #0
{
 80080a8:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
 80080ac:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthRTL(TEXT_DIRECTION_LTR, text, pArg);
 80080ae:	f011 fdbf 	bl	8019c30 <_ZNK8touchgfx4Font17getStringWidthRTLEhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 80080b2:	b002      	add	sp, #8
 80080b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80080b8:	b003      	add	sp, #12
 80080ba:	4770      	bx	lr

080080bc <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80080bc:	b40c      	push	{r2, r3}
 80080be:	b507      	push	{r0, r1, r2, lr}
 80080c0:	ab04      	add	r3, sp, #16
 80080c2:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 80080c6:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthRTL(textDirection, text, pArg);
 80080c8:	f011 fdb2 	bl	8019c30 <_ZNK8touchgfx4Font17getStringWidthRTLEhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 80080cc:	b003      	add	sp, #12
 80080ce:	f85d eb04 	ldr.w	lr, [sp], #4
 80080d2:	b002      	add	sp, #8
 80080d4:	4770      	bx	lr
	...

080080d8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 80080d8:	b510      	push	{r4, lr}
 80080da:	4604      	mov	r4, r0
    nextCharacters.replaceAt0(unicodeConverter(direction));
 80080dc:	f012 fc8a 	bl	801a9f4 <_ZN8touchgfx12TextProvider16unicodeConverterEh>
            replaceAt(++used - 1, newChar);
        }

        FORCE_INLINE_FUNCTION void replaceAt0(Unicode::UnicodeChar newChar)
        {
            buffer[pos] = newChar;
 80080e0:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80080e2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80080e6:	8458      	strh	r0, [r3, #34]	@ 0x22
    if (fontGsubTable && nextCharacters.peekChar())
 80080e8:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80080ea:	b35b      	cbz	r3, 8008144 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6c>
            assert(used > 0);
 80080ec:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 80080ee:	b92b      	cbnz	r3, 80080fc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x24>
 80080f0:	4b17      	ldr	r3, [pc, #92]	@ (8008150 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x78>)
 80080f2:	21c5      	movs	r1, #197	@ 0xc5
 80080f4:	4a17      	ldr	r2, [pc, #92]	@ (8008154 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
            assert(offset < used);
 80080f6:	4818      	ldr	r0, [pc, #96]	@ (8008158 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>)
 80080f8:	f022 fa60 	bl	802a5bc <__assert_func>
 80080fc:	b310      	cbz	r0, 8008144 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6c>
    {
        substituteGlyphs();
 80080fe:	4620      	mov	r0, r4
 8008100:	f013 fd7a 	bl	801bbf8 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
 8008104:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8008106:	2b01      	cmp	r3, #1
 8008108:	d803      	bhi.n	8008112 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x3a>
 800810a:	4b14      	ldr	r3, [pc, #80]	@ (800815c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x84>)
 800810c:	21cb      	movs	r1, #203	@ 0xcb
 800810e:	4a14      	ldr	r2, [pc, #80]	@ (8008160 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x88>)
 8008110:	e7f1      	b.n	80080f6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x1e>
            const uint16_t index = pos + offset;
 8008112:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8008114:	f640 103f 	movw	r0, #2367	@ 0x93f
 8008118:	1c53      	adds	r3, r2, #1
 800811a:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 800811c:	2b09      	cmp	r3, #9
 800811e:	4619      	mov	r1, r3
 8008120:	bf88      	it	hi
 8008122:	f1a3 010a 	subhi.w	r1, r3, #10
 8008126:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 800812a:	8c49      	ldrh	r1, [r1, #34]	@ 0x22
 800812c:	4281      	cmp	r1, r0
 800812e:	d109      	bne.n	8008144 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6c>
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
 8008130:	2b0a      	cmp	r3, #10
 8008132:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8008136:	bf28      	it	cs
 8008138:	2300      	movcs	r3, #0
            return buffer[pos];
 800813a:	8c50      	ldrh	r0, [r2, #34]	@ 0x22

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 800813c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8008140:	8458      	strh	r0, [r3, #34]	@ 0x22
            buffer[pos] = newChar;
 8008142:	8451      	strh	r1, [r2, #34]	@ 0x22
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 8008144:	4620      	mov	r0, r4
}
 8008146:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
 800814a:	f013 bc57 	b.w	801b9fc <_ZN8touchgfx12TextProvider11getNextCharEv>
 800814e:	bf00      	nop
 8008150:	08040b14 	.word	0x08040b14
 8008154:	08040b1d 	.word	0x08040b1d
 8008158:	08040bc8 	.word	0x08040bc8
 800815c:	08040c12 	.word	0x08040c12
 8008160:	08040c20 	.word	0x08040c20

08008164 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 8008164:	b510      	push	{r4, lr}
 8008166:	4604      	mov	r4, r0
    fillInputBuffer();
 8008168:	f013 fc11 	bl	801b98e <_ZN8touchgfx12TextProvider15fillInputBufferEv>
    unicodeConverterInit();
 800816c:	4620      	mov	r0, r4
}
 800816e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    unicodeConverterInit();
 8008172:	f012 bc3b 	b.w	801a9ec <_ZN8touchgfx12TextProvider20unicodeConverterInitEv>

08008176 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 8008176:	b510      	push	{r4, lr}
 8008178:	b086      	sub	sp, #24
 800817a:	ac02      	add	r4, sp, #8
 800817c:	e884 0006 	stmia.w	r4, {r1, r2}
 8008180:	461a      	mov	r2, r3
    va_list pArg;
    va_start(pArg, format);
 8008182:	ab0a      	add	r3, sp, #40	@ 0x28
    drawStringRTL(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8008184:	4621      	mov	r1, r4
    va_start(pArg, format);
 8008186:	9305      	str	r3, [sp, #20]
    drawStringRTL(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8008188:	9301      	str	r3, [sp, #4]
 800818a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800818c:	9300      	str	r3, [sp, #0]
 800818e:	9b08      	ldr	r3, [sp, #32]
 8008190:	f010 f981 	bl	8018496 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 8008194:	b006      	add	sp, #24
 8008196:	bd10      	pop	{r4, pc}

08008198 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8008198:	b538      	push	{r3, r4, r5, lr}
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 800819a:	bb18      	cbnz	r0, 80081e4 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
    {
        if (languagesArray[id] != 0)
 800819c:	4b12      	ldr	r3, [pc, #72]	@ (80081e8 <_ZN8touchgfx5Texts11setLanguageEt+0x50>)
 800819e:	4813      	ldr	r0, [pc, #76]	@ (80081ec <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
 80081a0:	681c      	ldr	r4, [r3, #0]
 80081a2:	4913      	ldr	r1, [pc, #76]	@ (80081f0 <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 80081a4:	b1b4      	cbz	r4, 80081d4 <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 80081a6:	6822      	ldr	r2, [r4, #0]
 80081a8:	4422      	add	r2, r4
 80081aa:	6002      	str	r2, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 80081ac:	6862      	ldr	r2, [r4, #4]
 80081ae:	4422      	add	r2, r4
 80081b0:	600a      	str	r2, [r1, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 80081b2:	68a2      	ldr	r2, [r4, #8]
 80081b4:	4414      	add	r4, r2
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
 80081b6:	4b0f      	ldr	r3, [pc, #60]	@ (80081f4 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 80081b8:	2200      	movs	r2, #0
 80081ba:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 80081bc:	f000 f838 	bl	8008230 <_ZN17TypedTextDatabase8getFontsEv>
 80081c0:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 80081c2:	f000 f833 	bl	800822c <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 80081c6:	4b0c      	ldr	r3, [pc, #48]	@ (80081f8 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 80081c8:	601c      	str	r4, [r3, #0]
        fonts = f;
 80081ca:	4b0c      	ldr	r3, [pc, #48]	@ (80081fc <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 80081cc:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 80081ce:	4b0c      	ldr	r3, [pc, #48]	@ (8008200 <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 80081d0:	8018      	strh	r0, [r3, #0]
    }
}
 80081d2:	e007      	b.n	80081e4 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
            currentLanguagePtr = texts_all_languages;
 80081d4:	4b0b      	ldr	r3, [pc, #44]	@ (8008204 <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 80081d6:	6003      	str	r3, [r0, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 80081d8:	4b0b      	ldr	r3, [pc, #44]	@ (8008208 <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 80081da:	600b      	str	r3, [r1, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 80081dc:	4b0b      	ldr	r3, [pc, #44]	@ (800820c <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 80081de:	681c      	ldr	r4, [r3, #0]
    if (currentLanguageTypedText)
 80081e0:	2c00      	cmp	r4, #0
 80081e2:	d1e8      	bne.n	80081b6 <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
 80081e4:	bd38      	pop	{r3, r4, r5, pc}
 80081e6:	bf00      	nop
 80081e8:	20016b3c 	.word	0x20016b3c
 80081ec:	20016b34 	.word	0x20016b34
 80081f0:	20016b30 	.word	0x20016b30
 80081f4:	20016b38 	.word	0x20016b38
 80081f8:	20029f30 	.word	0x20029f30
 80081fc:	20029f38 	.word	0x20029f38
 8008200:	20029f34 	.word	0x20029f34
 8008204:	901bca04 	.word	0x901bca04
 8008208:	901bc980 	.word	0x901bc980
 800820c:	901bcd74 	.word	0x901bcd74

08008210 <_ZNK8touchgfx5Texts7getTextEt>:
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8008210:	4b04      	ldr	r3, [pc, #16]	@ (8008224 <_ZNK8touchgfx5Texts7getTextEt+0x14>)
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8008218:	4b03      	ldr	r3, [pc, #12]	@ (8008228 <_ZNK8touchgfx5Texts7getTextEt+0x18>)
 800821a:	681b      	ldr	r3, [r3, #0]
}
 800821c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8008220:	4770      	bx	lr
 8008222:	bf00      	nop
 8008224:	20016b30 	.word	0x20016b30
 8008228:	20016b34 	.word	0x20016b34

0800822c <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
}
 800822c:	2021      	movs	r0, #33	@ 0x21
 800822e:	4770      	bx	lr

08008230 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
 8008230:	4800      	ldr	r0, [pc, #0]	@ (8008234 <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 8008232:	4770      	bx	lr
 8008234:	20016b40 	.word	0x20016b40

08008238 <_GLOBAL__sub_I_touchgfx_fonts>:
    case 10:
        touchgfx_fonts[10] = &(getFont_Nexa_XBold_otf_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8008238:	b510      	push	{r4, lr}
};
 800823a:	4c11      	ldr	r4, [pc, #68]	@ (8008280 <_GLOBAL__sub_I_touchgfx_fonts+0x48>)
    &(getFont_verdana_20_4bpp()),
 800823c:	f7ff fe74 	bl	8007f28 <_Z23getFont_verdana_20_4bppv>
};
 8008240:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
 8008242:	f7ff feed 	bl	8008020 <_Z23getFont_verdana_40_4bppv>
};
 8008246:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_22_4bpp()),
 8008248:	f7ff feac 	bl	8007fa4 <_Z23getFont_verdana_22_4bppv>
};
 800824c:	60a0      	str	r0, [r4, #8]
    &(getFont_verdana_13_4bpp()),
 800824e:	f7ff fdb1 	bl	8007db4 <_Z23getFont_verdana_13_4bppv>
};
 8008252:	60e0      	str	r0, [r4, #12]
    &(getFont_verdana_130_4bpp()),
 8008254:	f7ff fd70 	bl	8007d38 <_Z24getFont_verdana_130_4bppv>
};
 8008258:	6120      	str	r0, [r4, #16]
    &(getFont_verdana_12_4bpp()),
 800825a:	f7ff fd2f 	bl	8007cbc <_Z23getFont_verdana_12_4bppv>
};
 800825e:	6160      	str	r0, [r4, #20]
    &(getFont_verdana_18_4bpp()),
 8008260:	f7ff fe24 	bl	8007eac <_Z23getFont_verdana_18_4bppv>
};
 8008264:	61a0      	str	r0, [r4, #24]
    &(getFont_verdana_14_4bpp()),
 8008266:	f7ff fde3 	bl	8007e30 <_Z23getFont_verdana_14_4bppv>
};
 800826a:	61e0      	str	r0, [r4, #28]
    &(getFont_Nexa_Regular_otf_11_4bpp()),
 800826c:	f7ff fc6c 	bl	8007b48 <_Z32getFont_Nexa_Regular_otf_11_4bppv>
};
 8008270:	6220      	str	r0, [r4, #32]
    &(getFont_Nexa_XBold_otf_11_4bpp()),
 8008272:	f7ff fce5 	bl	8007c40 <_Z30getFont_Nexa_XBold_otf_11_4bppv>
};
 8008276:	6260      	str	r0, [r4, #36]	@ 0x24
    &(getFont_Nexa_XBold_otf_10_4bpp())
 8008278:	f7ff fca4 	bl	8007bc4 <_Z30getFont_Nexa_XBold_otf_10_4bppv>
};
 800827c:	62a0      	str	r0, [r4, #40]	@ 0x28
} // namespace TypedTextDatabase
 800827e:	bd10      	pop	{r4, pc}
 8008280:	20016b40 	.word	0x20016b40

08008284 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8008284:	4770      	bx	lr

08008286 <_ZN19FrontendApplicationD0Ev>:
 8008286:	b510      	push	{r4, lr}
 8008288:	4604      	mov	r4, r0
 800828a:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 800828e:	f022 f817 	bl	802a2c0 <_ZdlPvj>
 8008292:	4620      	mov	r0, r4
 8008294:	bd10      	pop	{r4, pc}

08008296 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8008296:	b510      	push	{r4, lr}
 8008298:	4604      	mov	r4, r0
    {
        model.tick();
 800829a:	f8d0 0158 	ldr.w	r0, [r0, #344]	@ 0x158
 800829e:	f000 f812 	bl	80082c6 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 80082a2:	4620      	mov	r0, r4
    }
 80082a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
 80082a8:	f010 bdc6 	b.w	8018e38 <_ZN8touchgfx11Application15handleTickEventEv>

080082ac <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 80082ac:	b510      	push	{r4, lr}
 80082ae:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 80082b0:	f7fc f956 	bl	8004560 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 80082b4:	4b01      	ldr	r3, [pc, #4]	@ (80082bc <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
{

}
 80082b6:	4620      	mov	r0, r4
    : FrontendApplicationBase(m, heap)
 80082b8:	6023      	str	r3, [r4, #0]
}
 80082ba:	bd10      	pop	{r4, pc}
 80082bc:	08040cfc 	.word	0x08040cfc

080082c0 <_ZN5ModelC1Ev>:
#include <gui/model/ModelListener.hpp>
#include "main.h"
#include <vector>
#include <stdio.h>

Model::Model() : modelListener(0)
 80082c0:	2200      	movs	r2, #0
 80082c2:	6002      	str	r2, [r0, #0]
{

}
 80082c4:	4770      	bx	lr

080082c6 <_ZN5Model4tickEv>:

void Model::tick()
{

}
 80082c6:	4770      	bx	lr

080082c8 <_ZN17Screen_1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen_1Presenter() {}
 80082c8:	4770      	bx	lr

080082ca <_ZThn4_N17Screen_1PresenterD1Ev>:
 80082ca:	3804      	subs	r0, #4
 80082cc:	4770      	bx	lr

080082ce <_ZN17Screen_1Presenter10deactivateEv>:
}

void Screen_1Presenter::activate()
{

}
 80082ce:	4770      	bx	lr

080082d0 <_ZN17Screen_1PresenterD0Ev>:
 80082d0:	b510      	push	{r4, lr}
 80082d2:	4604      	mov	r4, r0
 80082d4:	2110      	movs	r1, #16
 80082d6:	f021 fff3 	bl	802a2c0 <_ZdlPvj>
 80082da:	4620      	mov	r0, r4
 80082dc:	bd10      	pop	{r4, pc}

080082de <_ZThn4_N17Screen_1PresenterD0Ev>:
 80082de:	f1a0 0004 	sub.w	r0, r0, #4
 80082e2:	e7f5      	b.n	80082d0 <_ZN17Screen_1PresenterD0Ev>

080082e4 <_ZN17Screen_1PresenterC1ER12Screen_1View>:
    ModelListener() : model(0) {}
 80082e4:	2200      	movs	r2, #0
    : view(v)
 80082e6:	60c1      	str	r1, [r0, #12]
 80082e8:	6082      	str	r2, [r0, #8]
 80082ea:	4a02      	ldr	r2, [pc, #8]	@ (80082f4 <_ZN17Screen_1PresenterC1ER12Screen_1View+0x10>)
 80082ec:	6002      	str	r2, [r0, #0]
 80082ee:	3218      	adds	r2, #24
 80082f0:	6042      	str	r2, [r0, #4]
}
 80082f2:	4770      	bx	lr
 80082f4:	08040d50 	.word	0x08040d50

080082f8 <_ZN12Screen_1View14tearDownScreenEv>:
}

void Screen_1View::tearDownScreen()
{
    Screen_1ViewBase::tearDownScreen();
}
 80082f8:	4770      	bx	lr

080082fa <_ZN12Screen_1View10screenInitEv>:
/**
 * @brief Function to initialize the screen.
 */
void Screen_1View::screenInit() {

	statusChecked = false;
 80082fa:	2300      	movs	r3, #0
 80082fc:	f880 33a8 	strb.w	r3, [r0, #936]	@ 0x3a8

}
 8008300:	4770      	bx	lr

08008302 <_ZN12Screen_1View12updateScreenEv>:
	enter_view();
 8008302:	f7f8 be2d 	b.w	8000f60 <enter_view>
	...

08008308 <_ZN12Screen_1ViewD1Ev>:

class Screen_1View : public Screen_1ViewBase
{
public:
    Screen_1View();
    virtual ~Screen_1View() {}
 8008308:	4b03      	ldr	r3, [pc, #12]	@ (8008318 <_ZN12Screen_1ViewD1Ev+0x10>)
 800830a:	b510      	push	{r4, lr}
 800830c:	4604      	mov	r4, r0
 800830e:	6003      	str	r3, [r0, #0]
 8008310:	f7fc ff1b 	bl	800514a <_ZN16Screen_1ViewBaseD1Ev>
 8008314:	4620      	mov	r0, r4
 8008316:	bd10      	pop	{r4, pc}
 8008318:	08040d7c 	.word	0x08040d7c

0800831c <_ZN12Screen_1ViewD0Ev>:
 800831c:	b510      	push	{r4, lr}
 800831e:	4604      	mov	r4, r0
 8008320:	f7ff fff2 	bl	8008308 <_ZN12Screen_1ViewD1Ev>
 8008324:	f44f 716b 	mov.w	r1, #940	@ 0x3ac
 8008328:	4620      	mov	r0, r4
 800832a:	f021 ffc9 	bl	802a2c0 <_ZdlPvj>
 800832e:	4620      	mov	r0, r4
 8008330:	bd10      	pop	{r4, pc}
	...

08008334 <_ZN12Screen_1View14checkI2CStatusEv>:

/**
 * @brief Function to check the status of the IC2 driver.
 */
void Screen_1View::checkI2CStatus() {
 8008334:	b538      	push	{r3, r4, r5, lr}

	if(statusChecked != true ) {
 8008336:	f890 33a8 	ldrb.w	r3, [r0, #936]	@ 0x3a8
void Screen_1View::checkI2CStatus() {
 800833a:	4604      	mov	r4, r0
	if(statusChecked != true ) {
 800833c:	b953      	cbnz	r3, 8008354 <_ZN12Screen_1View14checkI2CStatusEv+0x20>

		/* Check if the Lock is available before suspending tasks */
		UBaseType_t lockState = get_lock_sem_count(drv_i2c);
 800833e:	4b06      	ldr	r3, [pc, #24]	@ (8008358 <_ZN12Screen_1View14checkI2CStatusEv+0x24>)
 8008340:	6818      	ldr	r0, [r3, #0]
 8008342:	f7f9 f831 	bl	80013a8 <get_lock_sem_count>
		if(lockState == 1) {
 8008346:	2801      	cmp	r0, #1
		UBaseType_t lockState = get_lock_sem_count(drv_i2c);
 8008348:	4605      	mov	r5, r0
		if(lockState == 1) {
 800834a:	d103      	bne.n	8008354 <_ZN12Screen_1View14checkI2CStatusEv+0x20>
	enter_view();
 800834c:	f7f8 fe08 	bl	8000f60 <enter_view>
			Screen_1View::updateScreen();
			statusChecked = true;
 8008350:	f884 53a8 	strb.w	r5, [r4, #936]	@ 0x3a8
		}
	}
}
 8008354:	bd38      	pop	{r3, r4, r5, pc}
 8008356:	bf00      	nop
 8008358:	20008188 	.word	0x20008188

0800835c <_ZN12Screen_1View16handleClickEventERKN8touchgfx10ClickEventE>:
     *
     * @return The click type of this event.
     */
    ClickEventType getType() const
    {
        return clickEventType;
 800835c:	790a      	ldrb	r2, [r1, #4]
void Screen_1View::handleClickEvent(const ClickEvent& event) {
 800835e:	b430      	push	{r4, r5}
	if (event.getType() == ClickEvent::PRESSED)
 8008360:	b94a      	cbnz	r2, 8008376 <_ZN12Screen_1View16handleClickEventERKN8touchgfx10ClickEventE+0x1a>
		startTouchX = event.getX();
 8008362:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 8008366:	f8c0 239c 	str.w	r2, [r0, #924]	@ 0x39c
		startTouchY = event.getY();
 800836a:	f9b1 2008 	ldrsh.w	r2, [r1, #8]
 800836e:	f8c0 23a0 	str.w	r2, [r0, #928]	@ 0x3a0
}
 8008372:	bc30      	pop	{r4, r5}
 8008374:	4770      	bx	lr
	else if (event.getType() == ClickEvent::RELEASED)
 8008376:	2a01      	cmp	r2, #1
 8008378:	d1fb      	bne.n	8008372 <_ZN12Screen_1View16handleClickEventERKN8touchgfx10ClickEventE+0x16>
 800837a:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
		int32_t deltaX = event.getX() - startTouchX;
 800837e:	f8d0 339c 	ldr.w	r3, [r0, #924]	@ 0x39c
 8008382:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
		if (deltaX < -swipeThreshold)
 8008386:	e9d0 52e8 	ldrd	r5, r2, [r0, #928]	@ 0x3a0
		int32_t deltaX = event.getX() - startTouchX;
 800838a:	1acb      	subs	r3, r1, r3
		if (deltaX < -swipeThreshold)
 800838c:	4252      	negs	r2, r2
 800838e:	4293      	cmp	r3, r2
 8008390:	da02      	bge.n	8008398 <_ZN12Screen_1View16handleClickEventERKN8touchgfx10ClickEventE+0x3c>
}
 8008392:	bc30      	pop	{r4, r5}
			Screen_1View::changeScreenRight();
 8008394:	f7fc befb 	b.w	800518e <_ZN16Screen_1ViewBase17changeScreenRightEv>
		int32_t deltaY = event.getY() - startTouchY;
 8008398:	1b63      	subs	r3, r4, r5
		else if (deltaY < -swipeThreshold)
 800839a:	4293      	cmp	r3, r2
 800839c:	dae9      	bge.n	8008372 <_ZN12Screen_1View16handleClickEventERKN8touchgfx10ClickEventE+0x16>
}
 800839e:	bc30      	pop	{r4, r5}
			Screen_1View::changeScreenDown();
 80083a0:	f7fc befc 	b.w	800519c <_ZN16Screen_1ViewBase16changeScreenDownEv>

080083a4 <_ZN12Screen_1ViewC1Ev>:
Screen_1View::Screen_1View()
 80083a4:	b510      	push	{r4, lr}
 80083a6:	4604      	mov	r4, r0
 80083a8:	f7fc ffbe 	bl	8005328 <_ZN16Screen_1ViewBaseC1Ev>
 80083ac:	4b04      	ldr	r3, [pc, #16]	@ (80083c0 <_ZN12Screen_1ViewC1Ev+0x1c>)
}
 80083ae:	4620      	mov	r0, r4
Screen_1View::Screen_1View()
 80083b0:	6023      	str	r3, [r4, #0]
 80083b2:	231e      	movs	r3, #30
 80083b4:	f8c4 33a4 	str.w	r3, [r4, #932]	@ 0x3a4
 80083b8:	2300      	movs	r3, #0
 80083ba:	f884 33a8 	strb.w	r3, [r4, #936]	@ 0x3a8
}
 80083be:	bd10      	pop	{r4, pc}
 80083c0:	08040d7c 	.word	0x08040d7c

080083c4 <_ZN12Screen_1View11setupScreenEv>:
    Screen_1ViewBase::setupScreen();
 80083c4:	f7fc bec2 	b.w	800514c <_ZN16Screen_1ViewBase11setupScreenEv>

080083c8 <_ZN12Screen_1View12updateEventsEv>:

/**
 * @brief Function to update the event rate.
 */
void Screen_1View::updateEvents()
{
 80083c8:	b513      	push	{r0, r1, r4, lr}
 80083ca:	4604      	mov	r4, r0
	//printf("%d", get_prediction());
	/* Update the Event rate */
	Unicode::snprintf(EV_TextBuffer, EV_TEXT_SIZE, "%d", get_prediction());
 80083cc:	f7fb f844 	bl	8003458 <get_prediction>
 80083d0:	4a0f      	ldr	r2, [pc, #60]	@ (8008410 <_ZN12Screen_1View12updateEventsEv+0x48>)
 80083d2:	4603      	mov	r3, r0
 80083d4:	210a      	movs	r1, #10
 80083d6:	f504 7062 	add.w	r0, r4, #904	@ 0x388
 80083da:	f014 f9b5 	bl	801c748 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	EV_Text.invalidate();
 80083de:	f104 00c4 	add.w	r0, r4, #196	@ 0xc4
 80083e2:	f011 fd2d 	bl	8019e40 <_ZNK8touchgfx8Drawable10invalidateEv>

	/* Update the Power consumption progress bar */
	PC_Progress.setValue(pc_interpolate(nbev_rate, MIN_MEVTS, MAX_MEVTS, MIN_PC, MAX_PC));
 80083e6:	f242 13e8 	movw	r3, #8680	@ 0x21e8
 80083ea:	480a      	ldr	r0, [pc, #40]	@ (8008414 <_ZN12Screen_1View12updateEventsEv+0x4c>)
 80083ec:	f242 7210 	movw	r2, #10000	@ 0x2710
 80083f0:	9300      	str	r3, [sp, #0]
 80083f2:	2100      	movs	r1, #0
 80083f4:	f640 3368 	movw	r3, #2920	@ 0xb68
 80083f8:	8800      	ldrh	r0, [r0, #0]
 80083fa:	f7f8 ffe9 	bl	80013d0 <pc_interpolate>
 80083fe:	4601      	mov	r1, r0
 8008400:	f504 7029 	add.w	r0, r4, #676	@ 0x2a4

}
 8008404:	b002      	add	sp, #8
 8008406:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PC_Progress.setValue(pc_interpolate(nbev_rate, MIN_MEVTS, MAX_MEVTS, MIN_PC, MAX_PC));
 800840a:	f009 bd00 	b.w	8011e0e <_ZN8touchgfx11BoxProgress8setValueEi>
 800840e:	bf00      	nop
 8008410:	08040d70 	.word	0x08040d70
 8008414:	2000b118 	.word	0x2000b118

08008418 <_ZN31Screen_1_LP_StatisticsPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen_1_LP_StatisticsPresenter() {}
 8008418:	4770      	bx	lr

0800841a <_ZThn4_N31Screen_1_LP_StatisticsPresenterD1Ev>:
 800841a:	3804      	subs	r0, #4
 800841c:	4770      	bx	lr

0800841e <_ZN31Screen_1_LP_StatisticsPresenter10deactivateEv>:
}

void Screen_1_LP_StatisticsPresenter::activate()
{

}
 800841e:	4770      	bx	lr

08008420 <_ZN31Screen_1_LP_StatisticsPresenterD0Ev>:
 8008420:	b510      	push	{r4, lr}
 8008422:	4604      	mov	r4, r0
 8008424:	2110      	movs	r1, #16
 8008426:	f021 ff4b 	bl	802a2c0 <_ZdlPvj>
 800842a:	4620      	mov	r0, r4
 800842c:	bd10      	pop	{r4, pc}

0800842e <_ZThn4_N31Screen_1_LP_StatisticsPresenterD0Ev>:
 800842e:	f1a0 0004 	sub.w	r0, r0, #4
 8008432:	e7f5      	b.n	8008420 <_ZN31Screen_1_LP_StatisticsPresenterD0Ev>

08008434 <_ZN31Screen_1_LP_StatisticsPresenterC1ER26Screen_1_LP_StatisticsView>:
 8008434:	2200      	movs	r2, #0
    : view(v)
 8008436:	60c1      	str	r1, [r0, #12]
 8008438:	6082      	str	r2, [r0, #8]
 800843a:	4a02      	ldr	r2, [pc, #8]	@ (8008444 <_ZN31Screen_1_LP_StatisticsPresenterC1ER26Screen_1_LP_StatisticsView+0x10>)
 800843c:	6002      	str	r2, [r0, #0]
 800843e:	3218      	adds	r2, #24
 8008440:	6042      	str	r2, [r0, #4]
}
 8008442:	4770      	bx	lr
 8008444:	08040dcc 	.word	0x08040dcc

08008448 <_ZN26Screen_1_LP_StatisticsView14tearDownScreenEv>:
}

void Screen_1_LP_StatisticsView::tearDownScreen()
{
	Screen_1_LP_StatisticsViewBase::tearDownScreen();
}
 8008448:	4770      	bx	lr

0800844a <_ZN26Screen_1_LP_StatisticsView10screenInitEv>:
/**
 * @brief Function to initialize the screen.
 */
void Screen_1_LP_StatisticsView::screenInit() {

	statusChecked = false;
 800844a:	2300      	movs	r3, #0
 800844c:	f880 3458 	strb.w	r3, [r0, #1112]	@ 0x458

}
 8008450:	4770      	bx	lr

08008452 <_ZN26Screen_1_LP_StatisticsView12updateScreenEv>:
/**
 * @brief Function to update the selected screen.
 */
void Screen_1_LP_StatisticsView::updateScreen()
{
	enter_LP_statistics_view();
 8008452:	f7f8 be55 	b.w	8001100 <enter_LP_statistics_view>
	...

08008458 <_ZN26Screen_1_LP_StatisticsView14readLpCountersEv>:
void Screen_1_LP_StatisticsView::readLpCounters()
{

	/* Compute the interpolated color value for each counter */
	for (int i = 0; i < 16; i++) {
		interpolatedColors[i] = color_interpolate(lp_counter[i], MIN_EVTS, MAX_EVTS, offColor, onColor);
 8008458:	4b25      	ldr	r3, [pc, #148]	@ (80084f0 <_ZN26Screen_1_LP_StatisticsView14readLpCountersEv+0x98>)
{
 800845a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
		interpolatedColors[i] = color_interpolate(lp_counter[i], MIN_EVTS, MAX_EVTS, offColor, onColor);
 800845e:	785a      	ldrb	r2, [r3, #1]
{
 8008460:	4604      	mov	r4, r0
		interpolatedColors[i] = color_interpolate(lp_counter[i], MIN_EVTS, MAX_EVTS, offColor, onColor);
 8008462:	781f      	ldrb	r7, [r3, #0]
	for (int i = 0; i < 16; i++) {
 8008464:	2500      	movs	r5, #0
		interpolatedColors[i] = color_interpolate(lp_counter[i], MIN_EVTS, MAX_EVTS, offColor, onColor);
 8008466:	789b      	ldrb	r3, [r3, #2]
 8008468:	ea47 2702 	orr.w	r7, r7, r2, lsl #8
 800846c:	f8df 808c 	ldr.w	r8, [pc, #140]	@ 80084fc <_ZN26Screen_1_LP_StatisticsView14readLpCountersEv+0xa4>
 8008470:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
 8008474:	4b1f      	ldr	r3, [pc, #124]	@ (80084f4 <_ZN26Screen_1_LP_StatisticsView14readLpCountersEv+0x9c>)
 8008476:	2100      	movs	r1, #0
 8008478:	f858 0025 	ldr.w	r0, [r8, r5, lsl #2]
 800847c:	881a      	ldrh	r2, [r3, #0]
 800847e:	789b      	ldrb	r3, [r3, #2]
 8008480:	b280      	uxth	r0, r0
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      reference
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
      {
	__glibcxx_requires_subscript(__n);
	return *(this->_M_impl._M_start + __n);
 8008482:	4e1d      	ldr	r6, [pc, #116]	@ (80084f8 <_ZN26Screen_1_LP_StatisticsView14readLpCountersEv+0xa0>)
 8008484:	f8ad 2000 	strh.w	r2, [sp]
 8008488:	f641 3258 	movw	r2, #7000	@ 0x1b58
 800848c:	f88d 3002 	strb.w	r3, [sp, #2]
 8008490:	463b      	mov	r3, r7
 8008492:	f7f8 ffd0 	bl	8001436 <color_interpolate>
 8008496:	6831      	ldr	r1, [r6, #0]
 8008498:	eb05 0245 	add.w	r2, r5, r5, lsl #1
	for (int i = 0; i < 16; i++) {
 800849c:	3501      	adds	r5, #1
		interpolatedColors[i] = color_interpolate(lp_counter[i], MIN_EVTS, MAX_EVTS, offColor, onColor);
 800849e:	188b      	adds	r3, r1, r2
 80084a0:	5488      	strb	r0, [r1, r2]
 80084a2:	f3c0 2207 	ubfx	r2, r0, #8, #8
	for (int i = 0; i < 16; i++) {
 80084a6:	2d10      	cmp	r5, #16
		interpolatedColors[i] = color_interpolate(lp_counter[i], MIN_EVTS, MAX_EVTS, offColor, onColor);
 80084a8:	705a      	strb	r2, [r3, #1]
 80084aa:	f3c0 4207 	ubfx	r2, r0, #16, #8
 80084ae:	709a      	strb	r2, [r3, #2]
	for (int i = 0; i < 16; i++) {
 80084b0:	d1e0      	bne.n	8008474 <_ZN26Screen_1_LP_StatisticsView14readLpCountersEv+0x1c>
 80084b2:	f504 678b 	add.w	r7, r4, #1112	@ 0x458
	}

	/* Update all counter values */
	for (int i = 0; i < totalCounters; i++) {
 80084b6:	2500      	movs	r5, #0
 80084b8:	f8d4 3454 	ldr.w	r3, [r4, #1108]	@ 0x454
 80084bc:	42ab      	cmp	r3, r5
 80084be:	dc02      	bgt.n	80084c6 <_ZN26Screen_1_LP_StatisticsView14readLpCountersEv+0x6e>
		lpCounters[i]->setColor(touchgfx::Color::getColorFromRGB(interpolatedColors[i].red, interpolatedColors[i].green, interpolatedColors[i].blue));
		lpCounters[i]->invalidate();
	}

}
 80084c0:	b002      	add	sp, #8
 80084c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084c6:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80084ca:	6831      	ldr	r1, [r6, #0]
		lpCounters[i]->setColor(touchgfx::Color::getColorFromRGB(interpolatedColors[i].red, interpolatedColors[i].green, interpolatedColors[i].blue));
 80084cc:	f857 0f04 	ldr.w	r0, [r7, #4]!
	for (int i = 0; i < totalCounters; i++) {
 80084d0:	3501      	adds	r5, #1
 80084d2:	18ca      	adds	r2, r1, r3
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 80084d4:	5cc9      	ldrb	r1, [r1, r3]
 80084d6:	7853      	ldrb	r3, [r2, #1]
 80084d8:	7892      	ldrb	r2, [r2, #2]
 80084da:	021b      	lsls	r3, r3, #8
 80084dc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80084e0:	4313      	orrs	r3, r2
 80084e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80084e6:	6283      	str	r3, [r0, #40]	@ 0x28
		lpCounters[i]->invalidate();
 80084e8:	6803      	ldr	r3, [r0, #0]
 80084ea:	695b      	ldr	r3, [r3, #20]
 80084ec:	4798      	blx	r3
	for (int i = 0; i < totalCounters; i++) {
 80084ee:	e7e3      	b.n	80084b8 <_ZN26Screen_1_LP_StatisticsView14readLpCountersEv+0x60>
 80084f0:	08040e3b 	.word	0x08040e3b
 80084f4:	08040e38 	.word	0x08040e38
 80084f8:	20016b6c 	.word	0x20016b6c
 80084fc:	20013d88 	.word	0x20013d88

08008500 <_ZN26Screen_1_LP_StatisticsViewD1Ev>:

class Screen_1_LP_StatisticsView : public Screen_1_LP_StatisticsViewBase
{
public:
    Screen_1_LP_StatisticsView();
    virtual ~Screen_1_LP_StatisticsView() {}
 8008500:	4b03      	ldr	r3, [pc, #12]	@ (8008510 <_ZN26Screen_1_LP_StatisticsViewD1Ev+0x10>)
 8008502:	b510      	push	{r4, lr}
 8008504:	4604      	mov	r4, r0
 8008506:	6003      	str	r3, [r0, #0]
 8008508:	f7fd f921 	bl	800574e <_ZN30Screen_1_LP_StatisticsViewBaseD1Ev>
 800850c:	4620      	mov	r0, r4
 800850e:	bd10      	pop	{r4, pc}
 8008510:	08040df4 	.word	0x08040df4

08008514 <_ZN26Screen_1_LP_StatisticsViewD0Ev>:
 8008514:	b510      	push	{r4, lr}
 8008516:	4604      	mov	r4, r0
 8008518:	f7ff fff2 	bl	8008500 <_ZN26Screen_1_LP_StatisticsViewD1Ev>
 800851c:	f240 419c 	movw	r1, #1180	@ 0x49c
 8008520:	4620      	mov	r0, r4
 8008522:	f021 fecd 	bl	802a2c0 <_ZdlPvj>
 8008526:	4620      	mov	r0, r4
 8008528:	bd10      	pop	{r4, pc}
	...

0800852c <_ZN26Screen_1_LP_StatisticsView14checkI2CStatusEv>:
void Screen_1_LP_StatisticsView::checkI2CStatus() {
 800852c:	b538      	push	{r3, r4, r5, lr}
	if(statusChecked != true ) {
 800852e:	f890 3458 	ldrb.w	r3, [r0, #1112]	@ 0x458
void Screen_1_LP_StatisticsView::checkI2CStatus() {
 8008532:	4604      	mov	r4, r0
	if(statusChecked != true ) {
 8008534:	b953      	cbnz	r3, 800854c <_ZN26Screen_1_LP_StatisticsView14checkI2CStatusEv+0x20>
		UBaseType_t lockState = get_lock_sem_count(drv_i2c);
 8008536:	4b06      	ldr	r3, [pc, #24]	@ (8008550 <_ZN26Screen_1_LP_StatisticsView14checkI2CStatusEv+0x24>)
 8008538:	6818      	ldr	r0, [r3, #0]
 800853a:	f7f8 ff35 	bl	80013a8 <get_lock_sem_count>
		if(lockState == 1) {
 800853e:	2801      	cmp	r0, #1
		UBaseType_t lockState = get_lock_sem_count(drv_i2c);
 8008540:	4605      	mov	r5, r0
		if(lockState == 1) {
 8008542:	d103      	bne.n	800854c <_ZN26Screen_1_LP_StatisticsView14checkI2CStatusEv+0x20>
	enter_LP_statistics_view();
 8008544:	f7f8 fddc 	bl	8001100 <enter_LP_statistics_view>
			statusChecked = true;
 8008548:	f884 5458 	strb.w	r5, [r4, #1112]	@ 0x458
}
 800854c:	bd38      	pop	{r3, r4, r5, pc}
 800854e:	bf00      	nop
 8008550:	20008188 	.word	0x20008188

08008554 <_ZN26Screen_1_LP_StatisticsView16handleClickEventERKN8touchgfx10ClickEventE>:
 8008554:	790a      	ldrb	r2, [r1, #4]
	if (event.getType() == ClickEvent::PRESSED)
 8008556:	b922      	cbnz	r2, 8008562 <_ZN26Screen_1_LP_StatisticsView16handleClickEventERKN8touchgfx10ClickEventE+0xe>
		startTouchX = event.getX();
 8008558:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 800855c:	f8c0 244c 	str.w	r2, [r0, #1100]	@ 0x44c
 8008560:	4770      	bx	lr
	else if (event.getType() == ClickEvent::RELEASED)
 8008562:	2a01      	cmp	r2, #1
 8008564:	d10a      	bne.n	800857c <_ZN26Screen_1_LP_StatisticsView16handleClickEventERKN8touchgfx10ClickEventE+0x28>
		int32_t deltaX = event.getX() - startTouchX;
 8008566:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 800856a:	f8d0 144c 	ldr.w	r1, [r0, #1100]	@ 0x44c
		if (deltaX > swipeThreshold)
 800856e:	f8d0 3450 	ldr.w	r3, [r0, #1104]	@ 0x450
		int32_t deltaX = event.getX() - startTouchX;
 8008572:	1a52      	subs	r2, r2, r1
		if (deltaX > swipeThreshold)
 8008574:	429a      	cmp	r2, r3
 8008576:	dd01      	ble.n	800857c <_ZN26Screen_1_LP_StatisticsView16handleClickEventERKN8touchgfx10ClickEventE+0x28>
			Screen_1_LP_StatisticsView::changeScreenLeft();
 8008578:	f7fd b903 	b.w	8005782 <_ZN30Screen_1_LP_StatisticsViewBase16changeScreenLeftEv>
}
 800857c:	4770      	bx	lr
	...

08008580 <_ZN26Screen_1_LP_StatisticsViewC1Ev>:
Screen_1_LP_StatisticsView::Screen_1_LP_StatisticsView()
 8008580:	b510      	push	{r4, lr}
 8008582:	4604      	mov	r4, r0
 8008584:	f7fd f926 	bl	80057d4 <_ZN30Screen_1_LP_StatisticsViewBaseC1Ev>
 8008588:	4b26      	ldr	r3, [pc, #152]	@ (8008624 <_ZN26Screen_1_LP_StatisticsViewC1Ev+0xa4>)
}
 800858a:	4620      	mov	r0, r4
Screen_1_LP_StatisticsView::Screen_1_LP_StatisticsView()
 800858c:	6023      	str	r3, [r4, #0]
 800858e:	231e      	movs	r3, #30
 8008590:	f8c4 3450 	str.w	r3, [r4, #1104]	@ 0x450
 8008594:	2310      	movs	r3, #16
 8008596:	f8c4 3454 	str.w	r3, [r4, #1108]	@ 0x454
 800859a:	2300      	movs	r3, #0
 800859c:	f884 3458 	strb.w	r3, [r4, #1112]	@ 0x458
protected:

    touchgfx::BoxWithBorder* lpCounters[16];

    void initCounters() {
    	lpCounters[0] = &Counter_0;
 80085a0:	f104 03d4 	add.w	r3, r4, #212	@ 0xd4
 80085a4:	f8c4 345c 	str.w	r3, [r4, #1116]	@ 0x45c
    	lpCounters[1] = &Counter_1;
 80085a8:	f104 036c 	add.w	r3, r4, #108	@ 0x6c
 80085ac:	f8c4 3460 	str.w	r3, [r4, #1120]	@ 0x460
    	lpCounters[2] = &Counter_2;
 80085b0:	f104 03a0 	add.w	r3, r4, #160	@ 0xa0
 80085b4:	f8c4 3464 	str.w	r3, [r4, #1124]	@ 0x464
    	lpCounters[3] = &Counter_3;
 80085b8:	f504 7384 	add.w	r3, r4, #264	@ 0x108
 80085bc:	f8c4 3468 	str.w	r3, [r4, #1128]	@ 0x468
    	lpCounters[4] = &Counter_4;
 80085c0:	f504 73fe 	add.w	r3, r4, #508	@ 0x1fc
 80085c4:	f8c4 346c 	str.w	r3, [r4, #1132]	@ 0x46c
    	lpCounters[5] = &Counter_5;
 80085c8:	f504 73ca 	add.w	r3, r4, #404	@ 0x194
 80085cc:	f8c4 3470 	str.w	r3, [r4, #1136]	@ 0x470
    	lpCounters[6] = &Counter_6;
 80085d0:	f504 73e4 	add.w	r3, r4, #456	@ 0x1c8
 80085d4:	f8c4 3474 	str.w	r3, [r4, #1140]	@ 0x474
    	lpCounters[7] = &Counter_7;
 80085d8:	f504 730c 	add.w	r3, r4, #560	@ 0x230
 80085dc:	f8c4 3478 	str.w	r3, [r4, #1144]	@ 0x478
    	lpCounters[8] = &Counter_8;
 80085e0:	f504 735a 	add.w	r3, r4, #872	@ 0x368
 80085e4:	f8c4 347c 	str.w	r3, [r4, #1148]	@ 0x47c
    	lpCounters[9] = &Counter_9;
 80085e8:	f504 7374 	add.w	r3, r4, #976	@ 0x3d0
 80085ec:	f8c4 3480 	str.w	r3, [r4, #1152]	@ 0x480
    	lpCounters[10] = &Counter_10;
 80085f0:	f504 7367 	add.w	r3, r4, #924	@ 0x39c
 80085f4:	f8c4 3484 	str.w	r3, [r4, #1156]	@ 0x484
    	lpCounters[11] = &Counter_11;
 80085f8:	f504 734d 	add.w	r3, r4, #820	@ 0x334
 80085fc:	f8c4 3488 	str.w	r3, [r4, #1160]	@ 0x488
    	lpCounters[12] = &Counter_12;
 8008600:	f504 7326 	add.w	r3, r4, #664	@ 0x298
 8008604:	f8c4 348c 	str.w	r3, [r4, #1164]	@ 0x48c
    	lpCounters[13] = &Counter_13;
 8008608:	f504 7340 	add.w	r3, r4, #768	@ 0x300
 800860c:	f8c4 3490 	str.w	r3, [r4, #1168]	@ 0x490
    	lpCounters[14] = &Counter_14;
 8008610:	f504 7333 	add.w	r3, r4, #716	@ 0x2cc
 8008614:	f8c4 3494 	str.w	r3, [r4, #1172]	@ 0x494
    	lpCounters[15] = &Counter_15;
 8008618:	f504 7319 	add.w	r3, r4, #612	@ 0x264
 800861c:	f8c4 3498 	str.w	r3, [r4, #1176]	@ 0x498
}
 8008620:	bd10      	pop	{r4, pc}
 8008622:	bf00      	nop
 8008624:	08040df4 	.word	0x08040df4

08008628 <_GLOBAL__sub_I__ZN26Screen_1_LP_StatisticsViewC2Ev>:
}
 8008628:	b538      	push	{r3, r4, r5, lr}
	: _M_start(), _M_finish(), _M_end_of_storage()
 800862a:	2400      	movs	r4, #0
 800862c:	4d0c      	ldr	r5, [pc, #48]	@ (8008660 <_GLOBAL__sub_I__ZN26Screen_1_LP_StatisticsViewC2Ev+0x38>)
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
							   __al));
	  }
#endif
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800862e:	2030      	movs	r0, #48	@ 0x30
 8008630:	60ac      	str	r4, [r5, #8]
 8008632:	e9c5 4400 	strd	r4, r4, [r5]
 8008636:	f021 fe54 	bl	802a2e2 <_Znwj>
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800863a:	f100 0230 	add.w	r2, r0, #48	@ 0x30
	this->_M_impl._M_start = this->_M_allocate(__n);
 800863e:	6028      	str	r0, [r5, #0]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8008640:	60aa      	str	r2, [r5, #8]
	  // Allow std::_Construct to be used in constant expressions.
	  std::construct_at(__p, std::forward<_Args>(__args)...);
	  return;
	}
#endif
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 8008642:	7004      	strb	r4, [r0, #0]
 8008644:	7044      	strb	r4, [r0, #1]
 8008646:	7084      	strb	r4, [r0, #2]
    inline typename
    __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, void>::__type
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
	      const _Tp& __value)
    {
      for (; __first != __last; ++__first)
 8008648:	3403      	adds	r4, #3
 800864a:	2c30      	cmp	r4, #48	@ 0x30
 800864c:	d101      	bne.n	8008652 <_GLOBAL__sub_I__ZN26Screen_1_LP_StatisticsViewC2Ev+0x2a>
      // Called by the vector(n) constructor.
      _GLIBCXX20_CONSTEXPR
      void
      _M_default_initialize(size_type __n)
      {
	this->_M_impl._M_finish =
 800864e:	606a      	str	r2, [r5, #4]
 8008650:	bd38      	pop	{r3, r4, r5, pc}
	*__first = __value;
 8008652:	8801      	ldrh	r1, [r0, #0]
 8008654:	1903      	adds	r3, r0, r4
 8008656:	5301      	strh	r1, [r0, r4]
 8008658:	7881      	ldrb	r1, [r0, #2]
 800865a:	7099      	strb	r1, [r3, #2]
      for (; __first != __last; ++__first)
 800865c:	e7f4      	b.n	8008648 <_GLOBAL__sub_I__ZN26Screen_1_LP_StatisticsViewC2Ev+0x20>
 800865e:	bf00      	nop
 8008660:	20016b6c 	.word	0x20016b6c

08008664 <_GLOBAL__sub_D__ZN26Screen_1_LP_StatisticsViewC2Ev>:
	_M_deallocate(_M_impl._M_start,
 8008664:	4b03      	ldr	r3, [pc, #12]	@ (8008674 <_GLOBAL__sub_D__ZN26Screen_1_LP_StatisticsViewC2Ev+0x10>)
 8008666:	6818      	ldr	r0, [r3, #0]
	if (__p)
 8008668:	b118      	cbz	r0, 8008672 <_GLOBAL__sub_D__ZN26Screen_1_LP_StatisticsViewC2Ev+0xe>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800866a:	6899      	ldr	r1, [r3, #8]
	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
				     std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 800866c:	1a09      	subs	r1, r1, r0
 800866e:	f021 be27 	b.w	802a2c0 <_ZdlPvj>
 8008672:	4770      	bx	lr
 8008674:	20016b6c 	.word	0x20016b6c

08008678 <_ZN26Screen_1_LP_StatisticsView11setupScreenEv>:
	Screen_1_LP_StatisticsViewBase::setupScreen();
 8008678:	f7fd b86a 	b.w	8005750 <_ZN30Screen_1_LP_StatisticsViewBase11setupScreenEv>

0800867c <_ZN28Screen_1_StatisticsPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen_1_StatisticsPresenter() {}
 800867c:	4770      	bx	lr

0800867e <_ZThn4_N28Screen_1_StatisticsPresenterD1Ev>:
 800867e:	3804      	subs	r0, #4
 8008680:	4770      	bx	lr

08008682 <_ZN28Screen_1_StatisticsPresenter10deactivateEv>:
}

void Screen_1_StatisticsPresenter::activate()
{

}
 8008682:	4770      	bx	lr

08008684 <_ZN28Screen_1_StatisticsPresenterD0Ev>:
 8008684:	b510      	push	{r4, lr}
 8008686:	4604      	mov	r4, r0
 8008688:	2110      	movs	r1, #16
 800868a:	f021 fe19 	bl	802a2c0 <_ZdlPvj>
 800868e:	4620      	mov	r0, r4
 8008690:	bd10      	pop	{r4, pc}

08008692 <_ZThn4_N28Screen_1_StatisticsPresenterD0Ev>:
 8008692:	f1a0 0004 	sub.w	r0, r0, #4
 8008696:	e7f5      	b.n	8008684 <_ZN28Screen_1_StatisticsPresenterD0Ev>

08008698 <_ZN28Screen_1_StatisticsPresenterC1ER23Screen_1_StatisticsView>:
 8008698:	2200      	movs	r2, #0
    : view(v)
 800869a:	60c1      	str	r1, [r0, #12]
 800869c:	6082      	str	r2, [r0, #8]
 800869e:	4a02      	ldr	r2, [pc, #8]	@ (80086a8 <_ZN28Screen_1_StatisticsPresenterC1ER23Screen_1_StatisticsView+0x10>)
 80086a0:	6002      	str	r2, [r0, #0]
 80086a2:	3218      	adds	r2, #24
 80086a4:	6042      	str	r2, [r0, #4]
}
 80086a6:	4770      	bx	lr
 80086a8:	08040e48 	.word	0x08040e48

080086ac <_ZN23Screen_1_StatisticsView14tearDownScreenEv>:
}

void Screen_1_StatisticsView::tearDownScreen()
{
    Screen_1_StatisticsViewBase::tearDownScreen();
}
 80086ac:	4770      	bx	lr

080086ae <_ZN23Screen_1_StatisticsView10screenInitEv>:
/**
 * @brief Function to initialize the screen.
 */
void Screen_1_StatisticsView::screenInit() {

	statusChecked = false;
 80086ae:	f500 5080 	add.w	r0, r0, #4096	@ 0x1000
 80086b2:	2300      	movs	r3, #0
 80086b4:	f880 3ad4 	strb.w	r3, [r0, #2772]	@ 0xad4

}
 80086b8:	4770      	bx	lr

080086ba <_ZN23Screen_1_StatisticsView12updateScreenEv>:
/**
 * @brief Function to update the selected screen.
 */
void Screen_1_StatisticsView::updateScreen()
{
	enter_statistics_view();
 80086ba:	f7f8 bcf5 	b.w	80010a8 <enter_statistics_view>
	...

080086c0 <_ZN23Screen_1_StatisticsViewD1Ev>:

class Screen_1_StatisticsView : public Screen_1_StatisticsViewBase
{
public:
    Screen_1_StatisticsView();
    virtual ~Screen_1_StatisticsView() {}
 80086c0:	4b03      	ldr	r3, [pc, #12]	@ (80086d0 <_ZN23Screen_1_StatisticsViewD1Ev+0x10>)
 80086c2:	b510      	push	{r4, lr}
 80086c4:	4604      	mov	r4, r0
 80086c6:	6003      	str	r3, [r0, #0]
 80086c8:	f7fd fe08 	bl	80062dc <_ZN27Screen_1_StatisticsViewBaseD1Ev>
 80086cc:	4620      	mov	r0, r4
 80086ce:	bd10      	pop	{r4, pc}
 80086d0:	08040e7c 	.word	0x08040e7c

080086d4 <_ZN23Screen_1_StatisticsViewD0Ev>:
 80086d4:	b510      	push	{r4, lr}
 80086d6:	4604      	mov	r4, r0
 80086d8:	f7ff fff2 	bl	80086c0 <_ZN23Screen_1_StatisticsViewD1Ev>
 80086dc:	f641 21d8 	movw	r1, #6872	@ 0x1ad8
 80086e0:	4620      	mov	r0, r4
 80086e2:	f021 fded 	bl	802a2c0 <_ZdlPvj>
 80086e6:	4620      	mov	r0, r4
 80086e8:	bd10      	pop	{r4, pc}
	...

080086ec <_ZN23Screen_1_StatisticsView14checkI2CStatusEv>:
void Screen_1_StatisticsView::checkI2CStatus() {
 80086ec:	b538      	push	{r3, r4, r5, lr}
	if(statusChecked != true ) {
 80086ee:	f500 5480 	add.w	r4, r0, #4096	@ 0x1000
 80086f2:	f894 3ad4 	ldrb.w	r3, [r4, #2772]	@ 0xad4
 80086f6:	b953      	cbnz	r3, 800870e <_ZN23Screen_1_StatisticsView14checkI2CStatusEv+0x22>
		UBaseType_t lockState = get_lock_sem_count(drv_i2c);
 80086f8:	4b05      	ldr	r3, [pc, #20]	@ (8008710 <_ZN23Screen_1_StatisticsView14checkI2CStatusEv+0x24>)
 80086fa:	6818      	ldr	r0, [r3, #0]
 80086fc:	f7f8 fe54 	bl	80013a8 <get_lock_sem_count>
		if(lockState == 1) {
 8008700:	2801      	cmp	r0, #1
		UBaseType_t lockState = get_lock_sem_count(drv_i2c);
 8008702:	4605      	mov	r5, r0
		if(lockState == 1) {
 8008704:	d103      	bne.n	800870e <_ZN23Screen_1_StatisticsView14checkI2CStatusEv+0x22>
	enter_statistics_view();
 8008706:	f7f8 fccf 	bl	80010a8 <enter_statistics_view>
			statusChecked = true;
 800870a:	f884 5ad4 	strb.w	r5, [r4, #2772]	@ 0xad4
}
 800870e:	bd38      	pop	{r3, r4, r5, pc}
 8008710:	20008188 	.word	0x20008188

08008714 <_ZN23Screen_1_StatisticsView16handleClickEventERKN8touchgfx10ClickEventE>:
 8008714:	790a      	ldrb	r2, [r1, #4]
void Screen_1_StatisticsView::handleClickEvent(const ClickEvent& event){
 8008716:	b430      	push	{r4, r5}
	if (event.getType() == ClickEvent::PRESSED)
 8008718:	b95a      	cbnz	r2, 8008732 <_ZN23Screen_1_StatisticsView16handleClickEventERKN8touchgfx10ClickEventE+0x1e>
		startTouchX = event.getX();
 800871a:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 800871e:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 8008722:	f8c3 2ac8 	str.w	r2, [r3, #2760]	@ 0xac8
		startTouchY = event.getY();
 8008726:	f9b1 2008 	ldrsh.w	r2, [r1, #8]
 800872a:	f8c3 2acc 	str.w	r2, [r3, #2764]	@ 0xacc
}
 800872e:	bc30      	pop	{r4, r5}
 8008730:	4770      	bx	lr
	else if (event.getType() == ClickEvent::RELEASED)
 8008732:	2a01      	cmp	r2, #1
 8008734:	d1fb      	bne.n	800872e <_ZN23Screen_1_StatisticsView16handleClickEventERKN8touchgfx10ClickEventE+0x1a>
		int32_t deltaX = event.getX() - startTouchX;
 8008736:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 800873a:	f9b1 4006 	ldrsh.w	r4, [r1, #6]
		int32_t deltaY = event.getY() - startTouchY;
 800873e:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
		if (deltaY > swipeThreshold)
 8008742:	f8d3 2ad0 	ldr.w	r2, [r3, #2768]	@ 0xad0
		int32_t deltaX = event.getX() - startTouchX;
 8008746:	f8d3 5ac8 	ldr.w	r5, [r3, #2760]	@ 0xac8
		int32_t deltaY = event.getY() - startTouchY;
 800874a:	f8d3 3acc 	ldr.w	r3, [r3, #2764]	@ 0xacc
 800874e:	1acb      	subs	r3, r1, r3
		if (deltaY > swipeThreshold)
 8008750:	4293      	cmp	r3, r2
 8008752:	dd02      	ble.n	800875a <_ZN23Screen_1_StatisticsView16handleClickEventERKN8touchgfx10ClickEventE+0x46>
}
 8008754:	bc30      	pop	{r4, r5}
			Screen_1_StatisticsView::Change_Screen_Up();
 8008756:	f7fd bddb 	b.w	8006310 <_ZN27Screen_1_StatisticsViewBase16Change_Screen_UpEv>
		int32_t deltaX = event.getX() - startTouchX;
 800875a:	1b63      	subs	r3, r4, r5
		else if (deltaX < -swipeThreshold)
 800875c:	4252      	negs	r2, r2
 800875e:	4293      	cmp	r3, r2
 8008760:	dae5      	bge.n	800872e <_ZN23Screen_1_StatisticsView16handleClickEventERKN8touchgfx10ClickEventE+0x1a>
}
 8008762:	bc30      	pop	{r4, r5}
			Screen_1_StatisticsView::Change_Screen_Right();
 8008764:	f7fd bddb 	b.w	800631e <_ZN27Screen_1_StatisticsViewBase19Change_Screen_RightEv>

08008768 <_ZN23Screen_1_StatisticsViewC1Ev>:
Screen_1_StatisticsView::Screen_1_StatisticsView()
 8008768:	b510      	push	{r4, lr}
 800876a:	4604      	mov	r4, r0
 800876c:	f7fd fed4 	bl	8006518 <_ZN27Screen_1_StatisticsViewBaseC1Ev>
 8008770:	4b05      	ldr	r3, [pc, #20]	@ (8008788 <_ZN23Screen_1_StatisticsViewC1Ev+0x20>)
 8008772:	221e      	movs	r2, #30
}
 8008774:	4620      	mov	r0, r4
Screen_1_StatisticsView::Screen_1_StatisticsView()
 8008776:	6023      	str	r3, [r4, #0]
 8008778:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 800877c:	f8c3 2ad0 	str.w	r2, [r3, #2768]	@ 0xad0
 8008780:	2200      	movs	r2, #0
 8008782:	f883 2ad4 	strb.w	r2, [r3, #2772]	@ 0xad4
}
 8008786:	bd10      	pop	{r4, pc}
 8008788:	08040e7c 	.word	0x08040e7c

0800878c <_ZN23Screen_1_StatisticsView11setupScreenEv>:
    Screen_1_StatisticsViewBase::setupScreen();
 800878c:	f7fd bd8b 	b.w	80062a6 <_ZN27Screen_1_StatisticsViewBase11setupScreenEv>

08008790 <_ZN23Screen_1_StatisticsView11updateGraphEv>:

/**
 * @brief Function to update the graph.
 */
void Screen_1_StatisticsView::updateGraph()
{
 8008790:	b538      	push	{r3, r4, r5, lr}
	/* Update Pixel Event Counter - Statistics */
	Events_Graph.addDataPoint(total_ro_evt_cd_cnt);
 8008792:	4d17      	ldr	r5, [pc, #92]	@ (80087f0 <_ZN23Screen_1_StatisticsView11updateGraphEv+0x60>)
{
 8008794:	4604      	mov	r4, r0
 8008796:	f8d0 14e8 	ldr.w	r1, [r0, #1256]	@ 0x4e8
        return addDataPointScaled(int2scaledY(y));
 800879a:	f200 40b4 	addw	r0, r0, #1204	@ 0x4b4
	Events_Graph.addDataPoint(total_ro_evt_cd_cnt);
 800879e:	882b      	ldrh	r3, [r5, #0]
 80087a0:	b29b      	uxth	r3, r3
 80087a2:	4359      	muls	r1, r3
 80087a4:	f00c f8a5 	bl	80148f2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
	Unicode::snprintf(EV_TextBuffer, EV_TEXT_SIZE, "%04u", total_ro_evt_cd_cnt);
 80087a8:	882b      	ldrh	r3, [r5, #0]
 80087aa:	4a12      	ldr	r2, [pc, #72]	@ (80087f4 <_ZN23Screen_1_StatisticsView11updateGraphEv+0x64>)
 80087ac:	210a      	movs	r1, #10
 80087ae:	b29b      	uxth	r3, r3
	EV_Text.invalidate();

	/* Update AFK - Statistics */
	AFK_Graph.addDataPoint(afk_flickering_ratio);
 80087b0:	4d11      	ldr	r5, [pc, #68]	@ (80087f8 <_ZN23Screen_1_StatisticsView11updateGraphEv+0x68>)
	Unicode::snprintf(EV_TextBuffer, EV_TEXT_SIZE, "%04u", total_ro_evt_cd_cnt);
 80087b2:	f504 602b 	add.w	r0, r4, #2736	@ 0xab0
 80087b6:	f013 ffc7 	bl	801c748 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	EV_Text.invalidate();
 80087ba:	f504 6002 	add.w	r0, r4, #2080	@ 0x820
 80087be:	f011 fb3f 	bl	8019e40 <_ZNK8touchgfx8Drawable10invalidateEv>
	AFK_Graph.addDataPoint(afk_flickering_ratio);
 80087c2:	882b      	ldrh	r3, [r5, #0]
        return i * scale;
 80087c4:	f8d4 117c 	ldr.w	r1, [r4, #380]	@ 0x17c
        return addDataPointScaled(int2scaledY(y));
 80087c8:	f504 70a4 	add.w	r0, r4, #328	@ 0x148
 80087cc:	b29b      	uxth	r3, r3
 80087ce:	4359      	muls	r1, r3
 80087d0:	f00c f88f 	bl	80148f2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
	Unicode::snprintf(Flicker_TextBuffer, FLICKER_TEXT_SIZE, "%02u", afk_flickering_ratio);
 80087d4:	882b      	ldrh	r3, [r5, #0]
 80087d6:	f604 20c4 	addw	r0, r4, #2756	@ 0xac4
 80087da:	4a08      	ldr	r2, [pc, #32]	@ (80087fc <_ZN23Screen_1_StatisticsView11updateGraphEv+0x6c>)
 80087dc:	b29b      	uxth	r3, r3
 80087de:	210a      	movs	r1, #10
 80087e0:	f013 ffb2 	bl	801c748 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	Flicker_Text.invalidate();
 80087e4:	f604 00b4 	addw	r0, r4, #2228	@ 0x8b4
}
 80087e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	Flicker_Text.invalidate();
 80087ec:	f011 bb28 	b.w	8019e40 <_ZNK8touchgfx8Drawable10invalidateEv>
 80087f0:	20013d84 	.word	0x20013d84
 80087f4:	08040e68 	.word	0x08040e68
 80087f8:	20013d82 	.word	0x20013d82
 80087fc:	08040e6d 	.word	0x08040e6d

08008800 <_ZN17Screen_2PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen_2Presenter() {}
 8008800:	4770      	bx	lr

08008802 <_ZThn4_N17Screen_2PresenterD1Ev>:
 8008802:	3804      	subs	r0, #4
 8008804:	4770      	bx	lr

08008806 <_ZN17Screen_2Presenter10deactivateEv>:
}

void Screen_2Presenter::activate()
{

}
 8008806:	4770      	bx	lr

08008808 <_ZN17Screen_2PresenterD0Ev>:
 8008808:	b510      	push	{r4, lr}
 800880a:	4604      	mov	r4, r0
 800880c:	2110      	movs	r1, #16
 800880e:	f021 fd57 	bl	802a2c0 <_ZdlPvj>
 8008812:	4620      	mov	r0, r4
 8008814:	bd10      	pop	{r4, pc}

08008816 <_ZThn4_N17Screen_2PresenterD0Ev>:
 8008816:	f1a0 0004 	sub.w	r0, r0, #4
 800881a:	e7f5      	b.n	8008808 <_ZN17Screen_2PresenterD0Ev>

0800881c <_ZN17Screen_2PresenterC1ER12Screen_2View>:
 800881c:	2200      	movs	r2, #0
    : view(v)
 800881e:	60c1      	str	r1, [r0, #12]
 8008820:	6082      	str	r2, [r0, #8]
 8008822:	4a02      	ldr	r2, [pc, #8]	@ (800882c <_ZN17Screen_2PresenterC1ER12Screen_2View+0x10>)
 8008824:	6002      	str	r2, [r0, #0]
 8008826:	3218      	adds	r2, #24
 8008828:	6042      	str	r2, [r0, #4]
}
 800882a:	4770      	bx	lr
 800882c:	08040ecc 	.word	0x08040ecc

08008830 <_ZN12Screen_2View14tearDownScreenEv>:
}

void Screen_2View::tearDownScreen()
{
    Screen_2ViewBase::tearDownScreen();
}
 8008830:	4770      	bx	lr

08008832 <_ZN12Screen_2View10screenInitEv>:
/**
 * @brief Function to initialize the screen.
 */
void Screen_2View::screenInit() {

	statusChecked = false;
 8008832:	2300      	movs	r3, #0
 8008834:	f880 320c 	strb.w	r3, [r0, #524]	@ 0x20c

}
 8008838:	4770      	bx	lr

0800883a <_ZN12Screen_2View12updateScreenEv>:
/**
 * @brief Function to update the selected screen.
 */
void Screen_2View::updateScreen()
{
	enter_view2();
 800883a:	f7f8 bc8b 	b.w	8001154 <enter_view2>
	...

08008840 <_ZN12Screen_2ViewD1Ev>:

class Screen_2View : public Screen_2ViewBase
{
public:
    Screen_2View();
    virtual ~Screen_2View() {}
 8008840:	4b03      	ldr	r3, [pc, #12]	@ (8008850 <_ZN12Screen_2ViewD1Ev+0x10>)
 8008842:	b510      	push	{r4, lr}
 8008844:	4604      	mov	r4, r0
 8008846:	6003      	str	r3, [r0, #0]
 8008848:	f7fe f9f6 	bl	8006c38 <_ZN16Screen_2ViewBaseD1Ev>
 800884c:	4620      	mov	r0, r4
 800884e:	bd10      	pop	{r4, pc}
 8008850:	08040ef4 	.word	0x08040ef4

08008854 <_ZN12Screen_2ViewD0Ev>:
 8008854:	b510      	push	{r4, lr}
 8008856:	4604      	mov	r4, r0
 8008858:	f7ff fff2 	bl	8008840 <_ZN12Screen_2ViewD1Ev>
 800885c:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8008860:	4620      	mov	r0, r4
 8008862:	f021 fd2d 	bl	802a2c0 <_ZdlPvj>
 8008866:	4620      	mov	r0, r4
 8008868:	bd10      	pop	{r4, pc}
	...

0800886c <_ZN12Screen_2View14checkI2CStatusEv>:
void Screen_2View::checkI2CStatus() {
 800886c:	b538      	push	{r3, r4, r5, lr}
	if(statusChecked != true ) {
 800886e:	f890 320c 	ldrb.w	r3, [r0, #524]	@ 0x20c
void Screen_2View::checkI2CStatus() {
 8008872:	4604      	mov	r4, r0
	if(statusChecked != true ) {
 8008874:	b953      	cbnz	r3, 800888c <_ZN12Screen_2View14checkI2CStatusEv+0x20>
		UBaseType_t lockState = get_lock_sem_count(drv_i2c);
 8008876:	4b06      	ldr	r3, [pc, #24]	@ (8008890 <_ZN12Screen_2View14checkI2CStatusEv+0x24>)
 8008878:	6818      	ldr	r0, [r3, #0]
 800887a:	f7f8 fd95 	bl	80013a8 <get_lock_sem_count>
		if(lockState == 1) {
 800887e:	2801      	cmp	r0, #1
		UBaseType_t lockState = get_lock_sem_count(drv_i2c);
 8008880:	4605      	mov	r5, r0
		if(lockState == 1) {
 8008882:	d103      	bne.n	800888c <_ZN12Screen_2View14checkI2CStatusEv+0x20>
	enter_view2();
 8008884:	f7f8 fc66 	bl	8001154 <enter_view2>
			statusChecked = true;
 8008888:	f884 520c 	strb.w	r5, [r4, #524]	@ 0x20c
}
 800888c:	bd38      	pop	{r3, r4, r5, pc}
 800888e:	bf00      	nop
 8008890:	20008188 	.word	0x20008188

08008894 <_ZN12Screen_2View16handleClickEventERKN8touchgfx10ClickEventE>:
 8008894:	790a      	ldrb	r2, [r1, #4]
}

/**
 * @brief Function to handle the screen swipe.
 */
void Screen_2View::handleClickEvent(const ClickEvent& event){
 8008896:	4603      	mov	r3, r0
 8008898:	b430      	push	{r4, r5}

	if (event.getType() == ClickEvent::PRESSED)
 800889a:	b92a      	cbnz	r2, 80088a8 <_ZN12Screen_2View16handleClickEventERKN8touchgfx10ClickEventE+0x14>
	{
		/* Record the initial touch position */
		startTouchX = event.getX();
 800889c:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 80088a0:	f8c0 2204 	str.w	r2, [r0, #516]	@ 0x204
		else if (((event.getX() >= PM0_Button.getX()) && (event.getX() <= (PM0_Button.getX() + 136))) && ((event.getY() >= PM0_Button.getY()) && (event.getY() <= (PM0_Button.getY() + 40)))) {

			Screen_2ViewBase::PM0_Screen();
		}
	}
}
 80088a4:	bc30      	pop	{r4, r5}
 80088a6:	4770      	bx	lr
	else if (event.getType() == ClickEvent::RELEASED)
 80088a8:	2a01      	cmp	r2, #1
 80088aa:	d1fb      	bne.n	80088a4 <_ZN12Screen_2View16handleClickEventERKN8touchgfx10ClickEventE+0x10>
        return clickX;
 80088ac:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
		int32_t deltaX = event.getX() - startTouchX;
 80088b0:	f8d0 5204 	ldr.w	r5, [r0, #516]	@ 0x204
		if (deltaX > swipeThreshold)
 80088b4:	f8d0 4208 	ldr.w	r4, [r0, #520]	@ 0x208
		int32_t deltaX = event.getX() - startTouchX;
 80088b8:	1b55      	subs	r5, r2, r5
		if (deltaX > swipeThreshold)
 80088ba:	42a5      	cmp	r5, r4
 80088bc:	dd02      	ble.n	80088c4 <_ZN12Screen_2View16handleClickEventERKN8touchgfx10ClickEventE+0x30>
}
 80088be:	bc30      	pop	{r4, r5}
			Screen_2View::changeScreenLeft();
 80088c0:	f7fe b9cc 	b.w	8006c5c <_ZN16Screen_2ViewBase16changeScreenLeftEv>
		else if (deltaX < -swipeThreshold)
 80088c4:	4264      	negs	r4, r4
 80088c6:	42a5      	cmp	r5, r4
 80088c8:	da02      	bge.n	80088d0 <_ZN12Screen_2View16handleClickEventERKN8touchgfx10ClickEventE+0x3c>
}
 80088ca:	bc30      	pop	{r4, r5}
			Screen_2View::changeScreenRight();
 80088cc:	f7fe b9cd 	b.w	8006c6a <_ZN16Screen_2ViewBase17changeScreenRightEv>
        return rect.x;
 80088d0:	f9b0 40c8 	ldrsh.w	r4, [r0, #200]	@ 0xc8
		else if (((event.getX() >= PM2_Button.getX()) && (event.getX() <= (PM2_Button.getX() + 136))) && ((event.getY() >= PM2_Button.getY()) && (event.getY() <= (PM2_Button.getY() + 40)))) {
 80088d4:	42a2      	cmp	r2, r4
 80088d6:	db0e      	blt.n	80088f6 <_ZN12Screen_2View16handleClickEventERKN8touchgfx10ClickEventE+0x62>
 80088d8:	3488      	adds	r4, #136	@ 0x88
 80088da:	42a2      	cmp	r2, r4
 80088dc:	dc0b      	bgt.n	80088f6 <_ZN12Screen_2View16handleClickEventERKN8touchgfx10ClickEventE+0x62>
        return clickY;
 80088de:	f9b1 5008 	ldrsh.w	r5, [r1, #8]
        return rect.y;
 80088e2:	f9b0 40ca 	ldrsh.w	r4, [r0, #202]	@ 0xca
 80088e6:	42a5      	cmp	r5, r4
 80088e8:	db05      	blt.n	80088f6 <_ZN12Screen_2View16handleClickEventERKN8touchgfx10ClickEventE+0x62>
 80088ea:	3428      	adds	r4, #40	@ 0x28
 80088ec:	42a5      	cmp	r5, r4
 80088ee:	dc02      	bgt.n	80088f6 <_ZN12Screen_2View16handleClickEventERKN8touchgfx10ClickEventE+0x62>
}
 80088f0:	bc30      	pop	{r4, r5}
			Screen_2ViewBase::PM2_Screen();
 80088f2:	f7fe b9c8 	b.w	8006c86 <_ZN16Screen_2ViewBase10PM2_ScreenEv>
        return rect.x;
 80088f6:	f9b3 0144 	ldrsh.w	r0, [r3, #324]	@ 0x144
		else if (((event.getX() >= PM0_Button.getX()) && (event.getX() <= (PM0_Button.getX() + 136))) && ((event.getY() >= PM0_Button.getY()) && (event.getY() <= (PM0_Button.getY() + 40)))) {
 80088fa:	4282      	cmp	r2, r0
 80088fc:	dbd2      	blt.n	80088a4 <_ZN12Screen_2View16handleClickEventERKN8touchgfx10ClickEventE+0x10>
 80088fe:	3088      	adds	r0, #136	@ 0x88
 8008900:	4282      	cmp	r2, r0
 8008902:	dccf      	bgt.n	80088a4 <_ZN12Screen_2View16handleClickEventERKN8touchgfx10ClickEventE+0x10>
 8008904:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
        return rect.y;
 8008908:	f9b3 2146 	ldrsh.w	r2, [r3, #326]	@ 0x146
 800890c:	4291      	cmp	r1, r2
 800890e:	dbc9      	blt.n	80088a4 <_ZN12Screen_2View16handleClickEventERKN8touchgfx10ClickEventE+0x10>
 8008910:	3228      	adds	r2, #40	@ 0x28
 8008912:	4291      	cmp	r1, r2
 8008914:	dcc6      	bgt.n	80088a4 <_ZN12Screen_2View16handleClickEventERKN8touchgfx10ClickEventE+0x10>
			Screen_2ViewBase::PM0_Screen();
 8008916:	4618      	mov	r0, r3
}
 8008918:	bc30      	pop	{r4, r5}
			Screen_2ViewBase::PM0_Screen();
 800891a:	f7fe b9ad 	b.w	8006c78 <_ZN16Screen_2ViewBase10PM0_ScreenEv>
	...

08008920 <_ZN12Screen_2ViewC1Ev>:
Screen_2View::Screen_2View()
 8008920:	b510      	push	{r4, lr}
 8008922:	4604      	mov	r4, r0
 8008924:	f7fe f9d2 	bl	8006ccc <_ZN16Screen_2ViewBaseC1Ev>
 8008928:	4b04      	ldr	r3, [pc, #16]	@ (800893c <_ZN12Screen_2ViewC1Ev+0x1c>)
}
 800892a:	4620      	mov	r0, r4
Screen_2View::Screen_2View()
 800892c:	6023      	str	r3, [r4, #0]
 800892e:	231e      	movs	r3, #30
 8008930:	f8c4 3208 	str.w	r3, [r4, #520]	@ 0x208
 8008934:	2300      	movs	r3, #0
 8008936:	f884 320c 	strb.w	r3, [r4, #524]	@ 0x20c
}
 800893a:	bd10      	pop	{r4, pc}
 800893c:	08040ef4 	.word	0x08040ef4

08008940 <_ZN12Screen_2View11setupScreenEv>:
    Screen_2ViewBase::setupScreen();
 8008940:	f7fe b97b 	b.w	8006c3a <_ZN16Screen_2ViewBase11setupScreenEv>

08008944 <_ZN21Screen_2_PM0PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen_2_PM0Presenter() {}
 8008944:	4770      	bx	lr

08008946 <_ZThn4_N21Screen_2_PM0PresenterD1Ev>:
 8008946:	3804      	subs	r0, #4
 8008948:	4770      	bx	lr

0800894a <_ZN21Screen_2_PM0Presenter10deactivateEv>:
}

void Screen_2_PM0Presenter::activate()
{

}
 800894a:	4770      	bx	lr

0800894c <_ZN21Screen_2_PM0PresenterD0Ev>:
 800894c:	b510      	push	{r4, lr}
 800894e:	4604      	mov	r4, r0
 8008950:	2110      	movs	r1, #16
 8008952:	f021 fcb5 	bl	802a2c0 <_ZdlPvj>
 8008956:	4620      	mov	r0, r4
 8008958:	bd10      	pop	{r4, pc}

0800895a <_ZThn4_N21Screen_2_PM0PresenterD0Ev>:
 800895a:	f1a0 0004 	sub.w	r0, r0, #4
 800895e:	e7f5      	b.n	800894c <_ZN21Screen_2_PM0PresenterD0Ev>

08008960 <_ZN21Screen_2_PM0PresenterC1ER16Screen_2_PM0View>:
 8008960:	2200      	movs	r2, #0
    : view(v)
 8008962:	60c1      	str	r1, [r0, #12]
 8008964:	6082      	str	r2, [r0, #8]
 8008966:	4a02      	ldr	r2, [pc, #8]	@ (8008970 <_ZN21Screen_2_PM0PresenterC1ER16Screen_2_PM0View+0x10>)
 8008968:	6002      	str	r2, [r0, #0]
 800896a:	3218      	adds	r2, #24
 800896c:	6042      	str	r2, [r0, #4]
}
 800896e:	4770      	bx	lr
 8008970:	08040f48 	.word	0x08040f48

08008974 <_ZN16Screen_2_PM0View14tearDownScreenEv>:
}

void Screen_2_PM0View::tearDownScreen()
{
    Screen_2_PM0ViewBase::tearDownScreen();
}
 8008974:	4770      	bx	lr

08008976 <_ZN16Screen_2_PM0View10screenInitEv>:
/**
 * @brief Function to initialize the screen.
 */
void Screen_2_PM0View::screenInit() {

	statusChecked = false;
 8008976:	2300      	movs	r3, #0
 8008978:	f880 3254 	strb.w	r3, [r0, #596]	@ 0x254

}
 800897c:	4770      	bx	lr

0800897e <_ZN16Screen_2_PM0View12updateScreenEv>:

/**
 * @brief Function to update the selected screen.
 */
void Screen_2_PM0View::updateScreen()
{
 800897e:	b510      	push	{r4, lr}
 8008980:	4604      	mov	r4, r0
	enter_PM0_view();
 8008982:	f7f8 fc61 	bl	8001248 <enter_PM0_view>

	/* Execute the power down sequence */
	ULP_standby_sequence();
 8008986:	f7f8 fe9f 	bl	80016c8 <ULP_standby_sequence>

	/* Update the ULP_State */
	pm0_enabled = true;
 800898a:	2301      	movs	r3, #1
 800898c:	f884 3256 	strb.w	r3, [r4, #598]	@ 0x256

}
 8008990:	bd10      	pop	{r4, pc}
	...

08008994 <_ZN16Screen_2_PM0ViewD1Ev>:

class Screen_2_PM0View : public Screen_2_PM0ViewBase
{
public:
    Screen_2_PM0View();
    virtual ~Screen_2_PM0View() {}
 8008994:	4b03      	ldr	r3, [pc, #12]	@ (80089a4 <_ZN16Screen_2_PM0ViewD1Ev+0x10>)
 8008996:	b510      	push	{r4, lr}
 8008998:	4604      	mov	r4, r0
 800899a:	6003      	str	r3, [r0, #0]
 800899c:	f7fe fab9 	bl	8006f12 <_ZN20Screen_2_PM0ViewBaseD1Ev>
 80089a0:	4620      	mov	r0, r4
 80089a2:	bd10      	pop	{r4, pc}
 80089a4:	08040f70 	.word	0x08040f70

080089a8 <_ZN16Screen_2_PM0ViewD0Ev>:
 80089a8:	b510      	push	{r4, lr}
 80089aa:	4604      	mov	r4, r0
 80089ac:	f7ff fff2 	bl	8008994 <_ZN16Screen_2_PM0ViewD1Ev>
 80089b0:	f44f 7116 	mov.w	r1, #600	@ 0x258
 80089b4:	4620      	mov	r0, r4
 80089b6:	f021 fc83 	bl	802a2c0 <_ZdlPvj>
 80089ba:	4620      	mov	r0, r4
 80089bc:	bd10      	pop	{r4, pc}
	...

080089c0 <_ZN16Screen_2_PM0View14checkI2CStatusEv>:
void Screen_2_PM0View::checkI2CStatus() {
 80089c0:	b538      	push	{r3, r4, r5, lr}
	if(statusChecked != true ) {
 80089c2:	f890 3254 	ldrb.w	r3, [r0, #596]	@ 0x254
void Screen_2_PM0View::checkI2CStatus() {
 80089c6:	4604      	mov	r4, r0
	if(statusChecked != true ) {
 80089c8:	b95b      	cbnz	r3, 80089e2 <_ZN16Screen_2_PM0View14checkI2CStatusEv+0x22>
		UBaseType_t lockState = get_lock_sem_count(drv_i2c);
 80089ca:	4b06      	ldr	r3, [pc, #24]	@ (80089e4 <_ZN16Screen_2_PM0View14checkI2CStatusEv+0x24>)
 80089cc:	6818      	ldr	r0, [r3, #0]
 80089ce:	f7f8 fceb 	bl	80013a8 <get_lock_sem_count>
		if(lockState == 1) {
 80089d2:	2801      	cmp	r0, #1
		UBaseType_t lockState = get_lock_sem_count(drv_i2c);
 80089d4:	4605      	mov	r5, r0
		if(lockState == 1) {
 80089d6:	d104      	bne.n	80089e2 <_ZN16Screen_2_PM0View14checkI2CStatusEv+0x22>
			Screen_2_PM0View::updateScreen();
 80089d8:	4620      	mov	r0, r4
 80089da:	f7ff ffd0 	bl	800897e <_ZN16Screen_2_PM0View12updateScreenEv>
			statusChecked = true;
 80089de:	f884 5254 	strb.w	r5, [r4, #596]	@ 0x254
}
 80089e2:	bd38      	pop	{r3, r4, r5, pc}
 80089e4:	20008188 	.word	0x20008188

080089e8 <_ZN16Screen_2_PM0View8readGPIOEv>:

/**
 * @brief Function to read and process the output of the ULP pins.
 */
void Screen_2_PM0View::readGPIO()
{
 80089e8:	b538      	push	{r3, r4, r5, lr}

	/* Check if PM0 has been enabled*/
	if(pm0_enabled) {
 80089ea:	f890 3256 	ldrb.w	r3, [r0, #598]	@ 0x256
{
 80089ee:	4604      	mov	r4, r0
	if(pm0_enabled) {
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d03c      	beq.n	8008a6e <_ZN16Screen_2_PM0View8readGPIOEv+0x86>

		/* Ignore the first wakeup signal and add a delay of 1 second to filter false wake up */
		if((HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_9) == GPIO_PIN_SET) && wakeup_ignored == 0) {
 80089f4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80089f8:	481d      	ldr	r0, [pc, #116]	@ (8008a70 <_ZN16Screen_2_PM0View8readGPIOEv+0x88>)
 80089fa:	f002 fb7d 	bl	800b0f8 <HAL_GPIO_ReadPin>
 80089fe:	2801      	cmp	r0, #1
 8008a00:	4605      	mov	r5, r0
 8008a02:	d111      	bne.n	8008a28 <_ZN16Screen_2_PM0View8readGPIOEv+0x40>
 8008a04:	f894 2255 	ldrb.w	r2, [r4, #597]	@ 0x255
 8008a08:	b972      	cbnz	r2, 8008a28 <_ZN16Screen_2_PM0View8readGPIOEv+0x40>

			/* Wakeup signal received, send acknowledgment using ULP_RSTN */
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6, GPIO_PIN_RESET);
 8008a0a:	2140      	movs	r1, #64	@ 0x40
 8008a0c:	4818      	ldr	r0, [pc, #96]	@ (8008a70 <_ZN16Screen_2_PM0View8readGPIOEv+0x88>)
 8008a0e:	f002 fb79 	bl	800b104 <HAL_GPIO_WritePin>
			HAL_Delay(1000);
 8008a12:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8008a16:	f000 ff29 	bl	800986c <HAL_Delay>
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6, GPIO_PIN_SET);
 8008a1a:	462a      	mov	r2, r5
 8008a1c:	2140      	movs	r1, #64	@ 0x40
 8008a1e:	4814      	ldr	r0, [pc, #80]	@ (8008a70 <_ZN16Screen_2_PM0View8readGPIOEv+0x88>)
 8008a20:	f002 fb70 	bl	800b104 <HAL_GPIO_WritePin>

			wakeup_ignored = true;
 8008a24:	f884 5255 	strb.w	r5, [r4, #597]	@ 0x255

		}

		/* Read the state of ULP_Wakeup pin */
		if(HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_9) == GPIO_PIN_SET) {
 8008a28:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008a2c:	4810      	ldr	r0, [pc, #64]	@ (8008a70 <_ZN16Screen_2_PM0View8readGPIOEv+0x88>)
 8008a2e:	f002 fb63 	bl	800b0f8 <HAL_GPIO_ReadPin>
 8008a32:	2801      	cmp	r0, #1
 8008a34:	4605      	mov	r5, r0
 8008a36:	d11a      	bne.n	8008a6e <_ZN16Screen_2_PM0View8readGPIOEv+0x86>

			/* Wakeup signal received, send acknowledgment using ULP_RSTN */
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6, GPIO_PIN_RESET);
 8008a38:	2200      	movs	r2, #0
 8008a3a:	2140      	movs	r1, #64	@ 0x40
 8008a3c:	480c      	ldr	r0, [pc, #48]	@ (8008a70 <_ZN16Screen_2_PM0View8readGPIOEv+0x88>)
 8008a3e:	f002 fb61 	bl	800b104 <HAL_GPIO_WritePin>
			psee_sleep_us_imp(Tulp_rstn_low);
 8008a42:	200a      	movs	r0, #10
 8008a44:	f006 f9e8 	bl	800ee18 <psee_sleep_us_imp>
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6, GPIO_PIN_SET);
 8008a48:	462a      	mov	r2, r5
 8008a4a:	4809      	ldr	r0, [pc, #36]	@ (8008a70 <_ZN16Screen_2_PM0View8readGPIOEv+0x88>)
 8008a4c:	2140      	movs	r1, #64	@ 0x40
 8008a4e:	f002 fb59 	bl	800b104 <HAL_GPIO_WritePin>

			/*Execute the power up sequence */
			ULP_wakeup_sequence();
 8008a52:	f7f8 fe7d 	bl	8001750 <ULP_wakeup_sequence>

			/* Update the ULP_State */
			pm0_enabled = false;
 8008a56:	2300      	movs	r3, #0

			/* Reset Calibration */
			ev_processed = 0;
 8008a58:	4a06      	ldr	r2, [pc, #24]	@ (8008a74 <_ZN16Screen_2_PM0View8readGPIOEv+0x8c>)
			calib_done = 0;

			/* Change Screen */
			Screen_2_PM0ViewBase::PM0Wakeup();
 8008a5a:	4620      	mov	r0, r4
			pm0_enabled = false;
 8008a5c:	f884 3256 	strb.w	r3, [r4, #598]	@ 0x256
			ev_processed = 0;
 8008a60:	6013      	str	r3, [r2, #0]
			calib_done = 0;
 8008a62:	4a05      	ldr	r2, [pc, #20]	@ (8008a78 <_ZN16Screen_2_PM0View8readGPIOEv+0x90>)
 8008a64:	6013      	str	r3, [r2, #0]
		}
	}
}
 8008a66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			Screen_2_PM0ViewBase::PM0Wakeup();
 8008a6a:	f7fe ba8e 	b.w	8006f8a <_ZN20Screen_2_PM0ViewBase9PM0WakeupEv>
}
 8008a6e:	bd38      	pop	{r3, r4, r5, pc}
 8008a70:	40021400 	.word	0x40021400
 8008a74:	2000b114 	.word	0x2000b114
 8008a78:	2000b110 	.word	0x2000b110

08008a7c <_ZN16Screen_2_PM0ViewC1Ev>:
Screen_2_PM0View::Screen_2_PM0View()
 8008a7c:	b510      	push	{r4, lr}
 8008a7e:	4604      	mov	r4, r0
 8008a80:	f7fe fa96 	bl	8006fb0 <_ZN20Screen_2_PM0ViewBaseC1Ev>
 8008a84:	4b04      	ldr	r3, [pc, #16]	@ (8008a98 <_ZN16Screen_2_PM0ViewC1Ev+0x1c>)
}
 8008a86:	4620      	mov	r0, r4
Screen_2_PM0View::Screen_2_PM0View()
 8008a88:	6023      	str	r3, [r4, #0]
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	f8a4 3254 	strh.w	r3, [r4, #596]	@ 0x254
 8008a90:	f884 3256 	strb.w	r3, [r4, #598]	@ 0x256
}
 8008a94:	bd10      	pop	{r4, pc}
 8008a96:	bf00      	nop
 8008a98:	08040f70 	.word	0x08040f70

08008a9c <_ZN16Screen_2_PM0View11setupScreenEv>:
    Screen_2_PM0ViewBase::setupScreen();
 8008a9c:	f7fe ba3a 	b.w	8006f14 <_ZN20Screen_2_PM0ViewBase11setupScreenEv>

08008aa0 <_ZN21Screen_2_PM2PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen_2_PM2Presenter() {}
 8008aa0:	4770      	bx	lr

08008aa2 <_ZThn4_N21Screen_2_PM2PresenterD1Ev>:
 8008aa2:	3804      	subs	r0, #4
 8008aa4:	4770      	bx	lr

08008aa6 <_ZN21Screen_2_PM2Presenter10deactivateEv>:
}

void Screen_2_PM2Presenter::activate()
{

}
 8008aa6:	4770      	bx	lr

08008aa8 <_ZN21Screen_2_PM2PresenterD0Ev>:
 8008aa8:	b510      	push	{r4, lr}
 8008aaa:	4604      	mov	r4, r0
 8008aac:	2110      	movs	r1, #16
 8008aae:	f021 fc07 	bl	802a2c0 <_ZdlPvj>
 8008ab2:	4620      	mov	r0, r4
 8008ab4:	bd10      	pop	{r4, pc}

08008ab6 <_ZThn4_N21Screen_2_PM2PresenterD0Ev>:
 8008ab6:	f1a0 0004 	sub.w	r0, r0, #4
 8008aba:	e7f5      	b.n	8008aa8 <_ZN21Screen_2_PM2PresenterD0Ev>

08008abc <_ZN21Screen_2_PM2PresenterC1ER16Screen_2_PM2View>:
 8008abc:	2200      	movs	r2, #0
    : view(v)
 8008abe:	60c1      	str	r1, [r0, #12]
 8008ac0:	6082      	str	r2, [r0, #8]
 8008ac2:	4a02      	ldr	r2, [pc, #8]	@ (8008acc <_ZN21Screen_2_PM2PresenterC1ER16Screen_2_PM2View+0x10>)
 8008ac4:	6002      	str	r2, [r0, #0]
 8008ac6:	3218      	adds	r2, #24
 8008ac8:	6042      	str	r2, [r0, #4]
}
 8008aca:	4770      	bx	lr
 8008acc:	08040fbc 	.word	0x08040fbc

08008ad0 <_ZN16Screen_2_PM2View14tearDownScreenEv>:
}

void Screen_2_PM2View::tearDownScreen()
{
    Screen_2_PM2ViewBase::tearDownScreen();
}
 8008ad0:	4770      	bx	lr

08008ad2 <_ZN16Screen_2_PM2View10screenInitEv>:
 * @brief Function to initialize the screen.
 */
void Screen_2_PM2View::screenInit() {

	statusChecked = false;
	screenUpdated = false;
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	f8a0 3536 	strh.w	r3, [r0, #1334]	@ 0x536

}
 8008ad8:	4770      	bx	lr

08008ada <_ZN16Screen_2_PM2View12updateScreenEv>:

/**
 * @brief Function to update the selected screen.
 */
void Screen_2_PM2View::updateScreen()
{
 8008ada:	b510      	push	{r4, lr}
 8008adc:	4604      	mov	r4, r0
	enter_PM2_view();
 8008ade:	f7f8 fb6b 	bl	80011b8 <enter_PM2_view>
	screenUpdated = true;
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	f884 3536 	strb.w	r3, [r4, #1334]	@ 0x536
}
 8008ae8:	bd10      	pop	{r4, pc}
	...

08008aec <_ZN16Screen_2_PM2View12lowPowerModeEv>:
 */
void Screen_2_PM2View::lowPowerMode() {

	/* Compute the interpolated color value for each counter */
    for (int i = 0; i < 16; i++) {
        interpolatedColors[i] = color_interpolate(lp_counter[i], MIN_EVTS, MAX_EVTS, offColor, onColor);
 8008aec:	4b25      	ldr	r3, [pc, #148]	@ (8008b84 <_ZN16Screen_2_PM2View12lowPowerModeEv+0x98>)
void Screen_2_PM2View::lowPowerMode() {
 8008aee:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
        interpolatedColors[i] = color_interpolate(lp_counter[i], MIN_EVTS, MAX_EVTS, offColor, onColor);
 8008af2:	785a      	ldrb	r2, [r3, #1]
void Screen_2_PM2View::lowPowerMode() {
 8008af4:	4604      	mov	r4, r0
        interpolatedColors[i] = color_interpolate(lp_counter[i], MIN_EVTS, MAX_EVTS, offColor, onColor);
 8008af6:	781f      	ldrb	r7, [r3, #0]
    for (int i = 0; i < 16; i++) {
 8008af8:	2500      	movs	r5, #0
        interpolatedColors[i] = color_interpolate(lp_counter[i], MIN_EVTS, MAX_EVTS, offColor, onColor);
 8008afa:	789b      	ldrb	r3, [r3, #2]
 8008afc:	ea47 2702 	orr.w	r7, r7, r2, lsl #8
 8008b00:	f8df 808c 	ldr.w	r8, [pc, #140]	@ 8008b90 <_ZN16Screen_2_PM2View12lowPowerModeEv+0xa4>
 8008b04:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
 8008b08:	4b1f      	ldr	r3, [pc, #124]	@ (8008b88 <_ZN16Screen_2_PM2View12lowPowerModeEv+0x9c>)
 8008b0a:	2100      	movs	r1, #0
 8008b0c:	f858 0025 	ldr.w	r0, [r8, r5, lsl #2]
 8008b10:	881a      	ldrh	r2, [r3, #0]
 8008b12:	789b      	ldrb	r3, [r3, #2]
 8008b14:	b280      	uxth	r0, r0
	return *(this->_M_impl._M_start + __n);
 8008b16:	4e1d      	ldr	r6, [pc, #116]	@ (8008b8c <_ZN16Screen_2_PM2View12lowPowerModeEv+0xa0>)
 8008b18:	f8ad 2000 	strh.w	r2, [sp]
 8008b1c:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8008b20:	f88d 3002 	strb.w	r3, [sp, #2]
 8008b24:	463b      	mov	r3, r7
 8008b26:	f7f8 fc86 	bl	8001436 <color_interpolate>
 8008b2a:	6831      	ldr	r1, [r6, #0]
 8008b2c:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    for (int i = 0; i < 16; i++) {
 8008b30:	3501      	adds	r5, #1
        interpolatedColors[i] = color_interpolate(lp_counter[i], MIN_EVTS, MAX_EVTS, offColor, onColor);
 8008b32:	188b      	adds	r3, r1, r2
 8008b34:	5488      	strb	r0, [r1, r2]
 8008b36:	f3c0 2207 	ubfx	r2, r0, #8, #8
    for (int i = 0; i < 16; i++) {
 8008b3a:	2d10      	cmp	r5, #16
        interpolatedColors[i] = color_interpolate(lp_counter[i], MIN_EVTS, MAX_EVTS, offColor, onColor);
 8008b3c:	705a      	strb	r2, [r3, #1]
 8008b3e:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8008b42:	709a      	strb	r2, [r3, #2]
    for (int i = 0; i < 16; i++) {
 8008b44:	d1e0      	bne.n	8008b08 <_ZN16Screen_2_PM2View12lowPowerModeEv+0x1c>
 8008b46:	f504 67a7 	add.w	r7, r4, #1336	@ 0x538
    }

    /* Update all counter values */
	for (int i = 0; i < totalCounters; i++) {
 8008b4a:	2500      	movs	r5, #0
 8008b4c:	f8d4 3538 	ldr.w	r3, [r4, #1336]	@ 0x538
 8008b50:	42ab      	cmp	r3, r5
 8008b52:	dc02      	bgt.n	8008b5a <_ZN16Screen_2_PM2View12lowPowerModeEv+0x6e>
		lpCounters[i]->setColor(touchgfx::Color::getColorFromRGB(interpolatedColors[i].red, interpolatedColors[i].green, interpolatedColors[i].blue));
		lpCounters[i]->invalidate();
	}

}
 8008b54:	b002      	add	sp, #8
 8008b56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b5a:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8008b5e:	6831      	ldr	r1, [r6, #0]
		lpCounters[i]->setColor(touchgfx::Color::getColorFromRGB(interpolatedColors[i].red, interpolatedColors[i].green, interpolatedColors[i].blue));
 8008b60:	f857 0f04 	ldr.w	r0, [r7, #4]!
	for (int i = 0; i < totalCounters; i++) {
 8008b64:	3501      	adds	r5, #1
 8008b66:	18ca      	adds	r2, r1, r3
 8008b68:	5cc9      	ldrb	r1, [r1, r3]
 8008b6a:	7853      	ldrb	r3, [r2, #1]
 8008b6c:	7892      	ldrb	r2, [r2, #2]
 8008b6e:	021b      	lsls	r3, r3, #8
 8008b70:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008b74:	4313      	orrs	r3, r2
 8008b76:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b7a:	6283      	str	r3, [r0, #40]	@ 0x28
		lpCounters[i]->invalidate();
 8008b7c:	6803      	ldr	r3, [r0, #0]
 8008b7e:	695b      	ldr	r3, [r3, #20]
 8008b80:	4798      	blx	r3
	for (int i = 0; i < totalCounters; i++) {
 8008b82:	e7e3      	b.n	8008b4c <_ZN16Screen_2_PM2View12lowPowerModeEv+0x60>
 8008b84:	0804102f 	.word	0x0804102f
 8008b88:	0804102c 	.word	0x0804102c
 8008b8c:	20016b78 	.word	0x20016b78
 8008b90:	20013d88 	.word	0x20013d88

08008b94 <_ZN16Screen_2_PM2ViewD1Ev>:

class Screen_2_PM2View : public Screen_2_PM2ViewBase
{
public:
    Screen_2_PM2View();
    virtual ~Screen_2_PM2View() {}
 8008b94:	4b03      	ldr	r3, [pc, #12]	@ (8008ba4 <_ZN16Screen_2_PM2ViewD1Ev+0x10>)
 8008b96:	b510      	push	{r4, lr}
 8008b98:	4604      	mov	r4, r0
 8008b9a:	6003      	str	r3, [r0, #0]
 8008b9c:	f7fe fb7e 	bl	800729c <_ZN20Screen_2_PM2ViewBaseD1Ev>
 8008ba0:	4620      	mov	r0, r4
 8008ba2:	bd10      	pop	{r4, pc}
 8008ba4:	08040fe4 	.word	0x08040fe4

08008ba8 <_ZN16Screen_2_PM2ViewD0Ev>:
 8008ba8:	b510      	push	{r4, lr}
 8008baa:	4604      	mov	r4, r0
 8008bac:	f7ff fff2 	bl	8008b94 <_ZN16Screen_2_PM2ViewD1Ev>
 8008bb0:	f240 517c 	movw	r1, #1404	@ 0x57c
 8008bb4:	4620      	mov	r0, r4
 8008bb6:	f021 fb83 	bl	802a2c0 <_ZdlPvj>
 8008bba:	4620      	mov	r0, r4
 8008bbc:	bd10      	pop	{r4, pc}
	...

08008bc0 <_ZN16Screen_2_PM2View14checkI2CStatusEv>:
	if(statusChecked != true ) {
 8008bc0:	f890 3537 	ldrb.w	r3, [r0, #1335]	@ 0x537
void Screen_2_PM2View::checkI2CStatus() {
 8008bc4:	b510      	push	{r4, lr}
 8008bc6:	4604      	mov	r4, r0
	if(statusChecked != true ) {
 8008bc8:	b95b      	cbnz	r3, 8008be2 <_ZN16Screen_2_PM2View14checkI2CStatusEv+0x22>
		UBaseType_t lockState = get_lock_sem_count(drv_i2c);
 8008bca:	4b06      	ldr	r3, [pc, #24]	@ (8008be4 <_ZN16Screen_2_PM2View14checkI2CStatusEv+0x24>)
 8008bcc:	6818      	ldr	r0, [r3, #0]
 8008bce:	f7f8 fbeb 	bl	80013a8 <get_lock_sem_count>
		if(lockState == 1) {
 8008bd2:	2801      	cmp	r0, #1
 8008bd4:	d105      	bne.n	8008be2 <_ZN16Screen_2_PM2View14checkI2CStatusEv+0x22>
	enter_PM2_view();
 8008bd6:	f7f8 faef 	bl	80011b8 <enter_PM2_view>
	screenUpdated = true;
 8008bda:	f240 1301 	movw	r3, #257	@ 0x101
 8008bde:	f8a4 3536 	strh.w	r3, [r4, #1334]	@ 0x536
}
 8008be2:	bd10      	pop	{r4, pc}
 8008be4:	20008188 	.word	0x20008188

08008be8 <_ZN16Screen_2_PM2ViewC1Ev>:
Screen_2_PM2View::Screen_2_PM2View()
 8008be8:	b510      	push	{r4, lr}
 8008bea:	4604      	mov	r4, r0
 8008bec:	f7fe fb7c 	bl	80072e8 <_ZN20Screen_2_PM2ViewBaseC1Ev>
 8008bf0:	4b25      	ldr	r3, [pc, #148]	@ (8008c88 <_ZN16Screen_2_PM2ViewC1Ev+0xa0>)
}
 8008bf2:	4620      	mov	r0, r4
Screen_2_PM2View::Screen_2_PM2View()
 8008bf4:	6023      	str	r3, [r4, #0]
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	f8c4 3530 	str.w	r3, [r4, #1328]	@ 0x530
 8008bfc:	f8c4 3534 	str.w	r3, [r4, #1332]	@ 0x534
 8008c00:	2310      	movs	r3, #16
 8008c02:	f8c4 3538 	str.w	r3, [r4, #1336]	@ 0x538
protected:

    touchgfx::BoxWithBorder* lpCounters[16];

    void initCounters() {
    	lpCounters[0] = &Counter_0;
 8008c06:	f504 7351 	add.w	r3, r4, #836	@ 0x344
 8008c0a:	f8c4 353c 	str.w	r3, [r4, #1340]	@ 0x53c
    	lpCounters[1] = &Counter_1;
 8008c0e:	f504 7344 	add.w	r3, r4, #784	@ 0x310
 8008c12:	f8c4 3540 	str.w	r3, [r4, #1344]	@ 0x540
    	lpCounters[2] = &Counter_2;
 8008c16:	f504 735e 	add.w	r3, r4, #888	@ 0x378
 8008c1a:	f8c4 3544 	str.w	r3, [r4, #1348]	@ 0x544
    	lpCounters[3] = &Counter_3;
 8008c1e:	f504 736b 	add.w	r3, r4, #940	@ 0x3ac
 8008c22:	f8c4 3548 	str.w	r3, [r4, #1352]	@ 0x548
    	lpCounters[4] = &Counter_4;
 8008c26:	f504 732a 	add.w	r3, r4, #680	@ 0x2a8
 8008c2a:	f8c4 354c 	str.w	r3, [r4, #1356]	@ 0x54c
    	lpCounters[5] = &Counter_5;
 8008c2e:	f504 7337 	add.w	r3, r4, #732	@ 0x2dc
 8008c32:	f8c4 3550 	str.w	r3, [r4, #1360]	@ 0x550
    	lpCounters[6] = &Counter_6;
 8008c36:	f504 731d 	add.w	r3, r4, #628	@ 0x274
 8008c3a:	f8c4 3554 	str.w	r3, [r4, #1364]	@ 0x554
    	lpCounters[7] = &Counter_7;
 8008c3e:	f504 7310 	add.w	r3, r4, #576	@ 0x240
 8008c42:	f8c4 3558 	str.w	r3, [r4, #1368]	@ 0x558
    	lpCounters[8] = &Counter_8;
 8008c46:	f504 7384 	add.w	r3, r4, #264	@ 0x108
 8008c4a:	f8c4 355c 	str.w	r3, [r4, #1372]	@ 0x55c
    	lpCounters[9] = &Counter_9;
 8008c4e:	f504 739e 	add.w	r3, r4, #316	@ 0x13c
 8008c52:	f8c4 3560 	str.w	r3, [r4, #1376]	@ 0x560
    	lpCounters[10] = &Counter_10;
 8008c56:	f104 03d4 	add.w	r3, r4, #212	@ 0xd4
 8008c5a:	f8c4 3564 	str.w	r3, [r4, #1380]	@ 0x564
    	lpCounters[11] = &Counter_11;
 8008c5e:	f104 03a0 	add.w	r3, r4, #160	@ 0xa0
 8008c62:	f8c4 3568 	str.w	r3, [r4, #1384]	@ 0x568
    	lpCounters[12] = &Counter_12;
 8008c66:	f504 73d2 	add.w	r3, r4, #420	@ 0x1a4
 8008c6a:	f8c4 356c 	str.w	r3, [r4, #1388]	@ 0x56c
    	lpCounters[13] = &Counter_13;
 8008c6e:	f504 73b8 	add.w	r3, r4, #368	@ 0x170
 8008c72:	f8c4 3570 	str.w	r3, [r4, #1392]	@ 0x570
    	lpCounters[14] = &Counter_14;
 8008c76:	f504 73ec 	add.w	r3, r4, #472	@ 0x1d8
 8008c7a:	f8c4 3574 	str.w	r3, [r4, #1396]	@ 0x574
    	lpCounters[15] = &Counter_15;
 8008c7e:	f504 7303 	add.w	r3, r4, #524	@ 0x20c
 8008c82:	f8c4 3578 	str.w	r3, [r4, #1400]	@ 0x578
}
 8008c86:	bd10      	pop	{r4, pc}
 8008c88:	08040fe4 	.word	0x08040fe4

08008c8c <_GLOBAL__sub_I__ZN16Screen_2_PM2ViewC2Ev>:
}
 8008c8c:	b538      	push	{r3, r4, r5, lr}
	: _M_start(), _M_finish(), _M_end_of_storage()
 8008c8e:	2400      	movs	r4, #0
 8008c90:	4d0c      	ldr	r5, [pc, #48]	@ (8008cc4 <_GLOBAL__sub_I__ZN16Screen_2_PM2ViewC2Ev+0x38>)
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8008c92:	2030      	movs	r0, #48	@ 0x30
 8008c94:	60ac      	str	r4, [r5, #8]
 8008c96:	e9c5 4400 	strd	r4, r4, [r5]
 8008c9a:	f021 fb22 	bl	802a2e2 <_Znwj>
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8008c9e:	f100 0230 	add.w	r2, r0, #48	@ 0x30
	this->_M_impl._M_start = this->_M_allocate(__n);
 8008ca2:	6028      	str	r0, [r5, #0]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8008ca4:	60aa      	str	r2, [r5, #8]
 8008ca6:	7004      	strb	r4, [r0, #0]
 8008ca8:	7044      	strb	r4, [r0, #1]
 8008caa:	7084      	strb	r4, [r0, #2]
 8008cac:	3403      	adds	r4, #3
 8008cae:	2c30      	cmp	r4, #48	@ 0x30
 8008cb0:	d101      	bne.n	8008cb6 <_GLOBAL__sub_I__ZN16Screen_2_PM2ViewC2Ev+0x2a>
	this->_M_impl._M_finish =
 8008cb2:	606a      	str	r2, [r5, #4]
 8008cb4:	bd38      	pop	{r3, r4, r5, pc}
	*__first = __value;
 8008cb6:	8801      	ldrh	r1, [r0, #0]
 8008cb8:	1903      	adds	r3, r0, r4
 8008cba:	5301      	strh	r1, [r0, r4]
 8008cbc:	7881      	ldrb	r1, [r0, #2]
 8008cbe:	7099      	strb	r1, [r3, #2]
      for (; __first != __last; ++__first)
 8008cc0:	e7f4      	b.n	8008cac <_GLOBAL__sub_I__ZN16Screen_2_PM2ViewC2Ev+0x20>
 8008cc2:	bf00      	nop
 8008cc4:	20016b78 	.word	0x20016b78

08008cc8 <_GLOBAL__sub_D__ZN16Screen_2_PM2ViewC2Ev>:
	_M_deallocate(_M_impl._M_start,
 8008cc8:	4b03      	ldr	r3, [pc, #12]	@ (8008cd8 <_GLOBAL__sub_D__ZN16Screen_2_PM2ViewC2Ev+0x10>)
 8008cca:	6818      	ldr	r0, [r3, #0]
	if (__p)
 8008ccc:	b118      	cbz	r0, 8008cd6 <_GLOBAL__sub_D__ZN16Screen_2_PM2ViewC2Ev+0xe>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8008cce:	6899      	ldr	r1, [r3, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8008cd0:	1a09      	subs	r1, r1, r0
 8008cd2:	f021 baf5 	b.w	802a2c0 <_ZdlPvj>
 8008cd6:	4770      	bx	lr
 8008cd8:	20016b78 	.word	0x20016b78

08008cdc <_ZN16Screen_2_PM2View11setupScreenEv>:
    Screen_2_PM2ViewBase::setupScreen();
 8008cdc:	f7fe badf 	b.w	800729e <_ZN20Screen_2_PM2ViewBase11setupScreenEv>

08008ce0 <_ZN16Screen_2_PM2View7readLPWEv>:
	if(screenUpdated == true) {
 8008ce0:	f890 3536 	ldrb.w	r3, [r0, #1334]	@ 0x536
{
 8008ce4:	b570      	push	{r4, r5, r6, lr}
 8008ce6:	4604      	mov	r4, r0
	if(screenUpdated == true) {
 8008ce8:	b1f3      	cbz	r3, 8008d28 <_ZN16Screen_2_PM2View7readLPWEv+0x48>
		if(lockState == UNLOCKED) {
 8008cea:	f890 5534 	ldrb.w	r5, [r0, #1332]	@ 0x534
 8008cee:	2d00      	cmp	r5, #0
 8008cf0:	d149      	bne.n	8008d86 <_ZN16Screen_2_PM2View7readLPWEv+0xa6>
			if(me_direction == TRUE_WAKE_UP) {
 8008cf2:	4b32      	ldr	r3, [pc, #200]	@ (8008dbc <_ZN16Screen_2_PM2View7readLPWEv+0xdc>)
 8008cf4:	781a      	ldrb	r2, [r3, #0]
 8008cf6:	f002 06ff 	and.w	r6, r2, #255	@ 0xff
 8008cfa:	b9b2      	cbnz	r2, 8008d2a <_ZN16Screen_2_PM2View7readLPWEv+0x4a>
 8008cfc:	f04f 23ff 	mov.w	r3, #4278255360	@ 0xff00ff00
				Outer_Box.invalidate();
 8008d00:	306c      	adds	r0, #108	@ 0x6c
 8008d02:	62c3      	str	r3, [r0, #44]	@ 0x2c
 8008d04:	f011 f89c 	bl	8019e40 <_ZNK8touchgfx8Drawable10invalidateEv>
 8008d08:	23ff      	movs	r3, #255	@ 0xff
				Awake.invalidate();
 8008d0a:	f204 4064 	addw	r0, r4, #1124	@ 0x464
 8008d0e:	f884 348c 	strb.w	r3, [r4, #1164]	@ 0x48c
 8008d12:	f011 f895 	bl	8019e40 <_ZNK8touchgfx8Drawable10invalidateEv>
				Inst.invalidate();
 8008d16:	f504 6087 	add.w	r0, r4, #1080	@ 0x438
 8008d1a:	f884 6460 	strb.w	r6, [r4, #1120]	@ 0x460
 8008d1e:	f011 f88f 	bl	8019e40 <_ZNK8touchgfx8Drawable10invalidateEv>
				lockState = LOCKED;
 8008d22:	2301      	movs	r3, #1
				lockState = LOCKED;
 8008d24:	f8a4 3534 	strh.w	r3, [r4, #1332]	@ 0x534
}
 8008d28:	bd70      	pop	{r4, r5, r6, pc}
			else if(me_direction == FALSE_WAKE_UP) {
 8008d2a:	781a      	ldrb	r2, [r3, #0]
 8008d2c:	2a01      	cmp	r2, #1
 8008d2e:	d113      	bne.n	8008d58 <_ZN16Screen_2_PM2View7readLPWEv+0x78>
 8008d30:	4b23      	ldr	r3, [pc, #140]	@ (8008dc0 <_ZN16Screen_2_PM2View7readLPWEv+0xe0>)
				Outer_Box.invalidate();
 8008d32:	306c      	adds	r0, #108	@ 0x6c
 8008d34:	62c3      	str	r3, [r0, #44]	@ 0x2c
 8008d36:	f011 f883 	bl	8019e40 <_ZNK8touchgfx8Drawable10invalidateEv>
				Awake.invalidate();
 8008d3a:	f204 4064 	addw	r0, r4, #1124	@ 0x464
 8008d3e:	f884 548c 	strb.w	r5, [r4, #1164]	@ 0x48c
 8008d42:	f011 f87d 	bl	8019e40 <_ZNK8touchgfx8Drawable10invalidateEv>
				Inst.invalidate();
 8008d46:	f504 6087 	add.w	r0, r4, #1080	@ 0x438
 8008d4a:	f884 5460 	strb.w	r5, [r4, #1120]	@ 0x460
 8008d4e:	f011 f877 	bl	8019e40 <_ZNK8touchgfx8Drawable10invalidateEv>
				lockState = LOCKED;
 8008d52:	f240 1301 	movw	r3, #257	@ 0x101
 8008d56:	e7e5      	b.n	8008d24 <_ZN16Screen_2_PM2View7readLPWEv+0x44>
			else if(me_direction == SLEEP_STATE) {
 8008d58:	781b      	ldrb	r3, [r3, #0]
 8008d5a:	2b02      	cmp	r3, #2
 8008d5c:	d1e4      	bne.n	8008d28 <_ZN16Screen_2_PM2View7readLPWEv+0x48>
 8008d5e:	4b19      	ldr	r3, [pc, #100]	@ (8008dc4 <_ZN16Screen_2_PM2View7readLPWEv+0xe4>)
				Outer_Box.invalidate();
 8008d60:	306c      	adds	r0, #108	@ 0x6c
 8008d62:	62c3      	str	r3, [r0, #44]	@ 0x2c
 8008d64:	f011 f86c 	bl	8019e40 <_ZNK8touchgfx8Drawable10invalidateEv>
				Awake.invalidate();
 8008d68:	f204 4064 	addw	r0, r4, #1124	@ 0x464
 8008d6c:	f884 548c 	strb.w	r5, [r4, #1164]	@ 0x48c
 8008d70:	f011 f866 	bl	8019e40 <_ZNK8touchgfx8Drawable10invalidateEv>
 8008d74:	23ff      	movs	r3, #255	@ 0xff
				Inst.invalidate();
 8008d76:	f504 6087 	add.w	r0, r4, #1080	@ 0x438
 8008d7a:	f884 3460 	strb.w	r3, [r4, #1120]	@ 0x460
}
 8008d7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				Inst.invalidate();
 8008d82:	f011 b85d 	b.w	8019e40 <_ZNK8touchgfx8Drawable10invalidateEv>
				timerCount++;
 8008d86:	f8d0 3530 	ldr.w	r3, [r0, #1328]	@ 0x530
			if (deviceState == TRUE_WAKE_UP) {
 8008d8a:	f890 2535 	ldrb.w	r2, [r0, #1333]	@ 0x535
				timerCount++;
 8008d8e:	3301      	adds	r3, #1
 8008d90:	f8c0 3530 	str.w	r3, [r0, #1328]	@ 0x530
			if (deviceState == TRUE_WAKE_UP) {
 8008d94:	b94a      	cbnz	r2, 8008daa <_ZN16Screen_2_PM2View7readLPWEv+0xca>
				if(timerCount == 50) {
 8008d96:	2b32      	cmp	r3, #50	@ 0x32
 8008d98:	d1c6      	bne.n	8008d28 <_ZN16Screen_2_PM2View7readLPWEv+0x48>
					lockState = UNLOCKED;
 8008d9a:	f880 2534 	strb.w	r2, [r0, #1332]	@ 0x534
					timerCount = 0;
 8008d9e:	f8c0 2530 	str.w	r2, [r0, #1328]	@ 0x530
}
 8008da2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					Screen_2_PM2ViewBase::changeScreenToModeSelection();
 8008da6:	f7fe ba97 	b.w	80072d8 <_ZN20Screen_2_PM2ViewBase27changeScreenToModeSelectionEv>
				if(timerCount == 25) {
 8008daa:	2b19      	cmp	r3, #25
					lockState = UNLOCKED;
 8008dac:	bf02      	ittt	eq
 8008dae:	2300      	moveq	r3, #0
 8008db0:	f880 3534 	strbeq.w	r3, [r0, #1332]	@ 0x534
					timerCount = 0;
 8008db4:	f8c0 3530 	streq.w	r3, [r0, #1328]	@ 0x530
}
 8008db8:	e7b6      	b.n	8008d28 <_ZN16Screen_2_PM2View7readLPWEv+0x48>
 8008dba:	bf00      	nop
 8008dbc:	20013d80 	.word	0x20013d80
 8008dc0:	ffff0000 	.word	0xffff0000
 8008dc4:	ffc1cfdd 	.word	0xffc1cfdd

08008dc8 <_ZN20Screen_3_LTPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen_3_LTPresenter() {}
 8008dc8:	4770      	bx	lr

08008dca <_ZThn4_N20Screen_3_LTPresenterD1Ev>:
 8008dca:	3804      	subs	r0, #4
 8008dcc:	4770      	bx	lr

08008dce <_ZN20Screen_3_LTPresenter10deactivateEv>:
}

void Screen_3_LTPresenter::activate()
{

}
 8008dce:	4770      	bx	lr

08008dd0 <_ZN20Screen_3_LTPresenterD0Ev>:
 8008dd0:	b510      	push	{r4, lr}
 8008dd2:	4604      	mov	r4, r0
 8008dd4:	2110      	movs	r1, #16
 8008dd6:	f021 fa73 	bl	802a2c0 <_ZdlPvj>
 8008dda:	4620      	mov	r0, r4
 8008ddc:	bd10      	pop	{r4, pc}

08008dde <_ZThn4_N20Screen_3_LTPresenterD0Ev>:
 8008dde:	f1a0 0004 	sub.w	r0, r0, #4
 8008de2:	e7f5      	b.n	8008dd0 <_ZN20Screen_3_LTPresenterD0Ev>

08008de4 <_ZN20Screen_3_LTPresenterC1ER15Screen_3_LTView>:
 8008de4:	2200      	movs	r2, #0
    : view(v)
 8008de6:	60c1      	str	r1, [r0, #12]
 8008de8:	6082      	str	r2, [r0, #8]
 8008dea:	4a02      	ldr	r2, [pc, #8]	@ (8008df4 <_ZN20Screen_3_LTPresenterC1ER15Screen_3_LTView+0x10>)
 8008dec:	6002      	str	r2, [r0, #0]
 8008dee:	3218      	adds	r2, #24
 8008df0:	6042      	str	r2, [r0, #4]
}
 8008df2:	4770      	bx	lr
 8008df4:	0804103c 	.word	0x0804103c

08008df8 <_ZN15Screen_3_LTView14tearDownScreenEv>:
}

void Screen_3_LTView::tearDownScreen()
{
    Screen_3_LTViewBase::tearDownScreen();
}
 8008df8:	4770      	bx	lr

08008dfa <_ZN15Screen_3_LTView10screenInitEv>:
/**
 * @brief Function to initialize the screen.
 */
void Screen_3_LTView::screenInit() {

	statusChecked = false;
 8008dfa:	f500 5080 	add.w	r0, r0, #4096	@ 0x1000
 8008dfe:	2300      	movs	r3, #0
 8008e00:	f880 324c 	strb.w	r3, [r0, #588]	@ 0x24c

}
 8008e04:	4770      	bx	lr

08008e06 <_ZN15Screen_3_LTView12updateScreenEv>:

/**
 * @brief Function to update the selected screen.
 */
void Screen_3_LTView::updateScreen() {
	enter_LT_view();
 8008e06:	f7f8 ba47 	b.w	8001298 <enter_LT_view>
	...

08008e0c <_ZN15Screen_3_LTViewD1Ev>:

class Screen_3_LTView : public Screen_3_LTViewBase
{
public:
    Screen_3_LTView();
    virtual ~Screen_3_LTView() {}
 8008e0c:	4b03      	ldr	r3, [pc, #12]	@ (8008e1c <_ZN15Screen_3_LTViewD1Ev+0x10>)
 8008e0e:	b510      	push	{r4, lr}
 8008e10:	4604      	mov	r4, r0
 8008e12:	6003      	str	r3, [r0, #0]
 8008e14:	f7fe fd10 	bl	8007838 <_ZN19Screen_3_LTViewBaseD1Ev>
 8008e18:	4620      	mov	r0, r4
 8008e1a:	bd10      	pop	{r4, pc}
 8008e1c:	08041064 	.word	0x08041064

08008e20 <_ZN15Screen_3_LTViewD0Ev>:
 8008e20:	b510      	push	{r4, lr}
 8008e22:	4604      	mov	r4, r0
 8008e24:	f7ff fff2 	bl	8008e0c <_ZN15Screen_3_LTViewD1Ev>
 8008e28:	f241 2150 	movw	r1, #4688	@ 0x1250
 8008e2c:	4620      	mov	r0, r4
 8008e2e:	f021 fa47 	bl	802a2c0 <_ZdlPvj>
 8008e32:	4620      	mov	r0, r4
 8008e34:	bd10      	pop	{r4, pc}
	...

08008e38 <_ZN15Screen_3_LTView14checkI2CStatusEv>:
void Screen_3_LTView::checkI2CStatus() {
 8008e38:	b538      	push	{r3, r4, r5, lr}
	if(statusChecked != true ) {
 8008e3a:	f500 5480 	add.w	r4, r0, #4096	@ 0x1000
 8008e3e:	f894 324c 	ldrb.w	r3, [r4, #588]	@ 0x24c
 8008e42:	b953      	cbnz	r3, 8008e5a <_ZN15Screen_3_LTView14checkI2CStatusEv+0x22>
		UBaseType_t lockState = get_lock_sem_count(drv_i2c);
 8008e44:	4b05      	ldr	r3, [pc, #20]	@ (8008e5c <_ZN15Screen_3_LTView14checkI2CStatusEv+0x24>)
 8008e46:	6818      	ldr	r0, [r3, #0]
 8008e48:	f7f8 faae 	bl	80013a8 <get_lock_sem_count>
		if(lockState == 1) {
 8008e4c:	2801      	cmp	r0, #1
		UBaseType_t lockState = get_lock_sem_count(drv_i2c);
 8008e4e:	4605      	mov	r5, r0
		if(lockState == 1) {
 8008e50:	d103      	bne.n	8008e5a <_ZN15Screen_3_LTView14checkI2CStatusEv+0x22>
	enter_LT_view();
 8008e52:	f7f8 fa21 	bl	8001298 <enter_LT_view>
			statusChecked = true;
 8008e56:	f884 524c 	strb.w	r5, [r4, #588]	@ 0x24c
}
 8008e5a:	bd38      	pop	{r3, r4, r5, pc}
 8008e5c:	20008188 	.word	0x20008188

08008e60 <_ZN15Screen_3_LTView16handleClickEventERKN8touchgfx10ClickEventE>:
        return clickEventType;
 8008e60:	790a      	ldrb	r2, [r1, #4]
	if (event.getType() == ClickEvent::PRESSED)
 8008e62:	b932      	cbnz	r2, 8008e72 <_ZN15Screen_3_LTView16handleClickEventERKN8touchgfx10ClickEventE+0x12>
		startTouchX = event.getX();
 8008e64:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 8008e68:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 8008e6c:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
 8008e70:	4770      	bx	lr
	else if (event.getType() == ClickEvent::RELEASED)
 8008e72:	2a01      	cmp	r2, #1
 8008e74:	d10c      	bne.n	8008e90 <_ZN15Screen_3_LTView16handleClickEventERKN8touchgfx10ClickEventE+0x30>
		int32_t deltaX = event.getX() - startTouchX;
 8008e76:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 8008e7a:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 8008e7e:	f8d3 1230 	ldr.w	r1, [r3, #560]	@ 0x230
		if (deltaX > swipeThreshold)
 8008e82:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
		int32_t deltaX = event.getX() - startTouchX;
 8008e86:	1a52      	subs	r2, r2, r1
		if (deltaX > swipeThreshold)
 8008e88:	429a      	cmp	r2, r3
 8008e8a:	dd01      	ble.n	8008e90 <_ZN15Screen_3_LTView16handleClickEventERKN8touchgfx10ClickEventE+0x30>
			Screen_3_LTView::changeScreenLeft();
 8008e8c:	f7fe bcee 	b.w	800786c <_ZN19Screen_3_LTViewBase16changeScreenLeftEv>
}
 8008e90:	4770      	bx	lr
	...

08008e94 <_ZN15Screen_3_LTViewC1Ev>:
Screen_3_LTView::Screen_3_LTView()
 8008e94:	b510      	push	{r4, lr}
 8008e96:	4604      	mov	r4, r0
 8008e98:	f7fe fcf0 	bl	800787c <_ZN19Screen_3_LTViewBaseC1Ev>
 8008e9c:	4b09      	ldr	r3, [pc, #36]	@ (8008ec4 <_ZN15Screen_3_LTViewC1Ev+0x30>)
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	211e      	movs	r1, #30
}
 8008ea2:	4620      	mov	r0, r4
Screen_3_LTView::Screen_3_LTView()
 8008ea4:	6023      	str	r3, [r4, #0]
 8008ea6:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 8008eaa:	e9c3 128d 	strd	r1, r2, [r3, #564]	@ 0x234
 8008eae:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8008eb2:	f883 224c 	strb.w	r2, [r3, #588]	@ 0x24c
 8008eb6:	e9c3 128f 	strd	r1, r2, [r3, #572]	@ 0x23c
 8008eba:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8008ebe:	e9c3 1191 	strd	r1, r1, [r3, #580]	@ 0x244
}
 8008ec2:	bd10      	pop	{r4, pc}
 8008ec4:	08041064 	.word	0x08041064

08008ec8 <_ZN15Screen_3_LTView11setupScreenEv>:
    Screen_3_LTViewBase::setupScreen();
 8008ec8:	f7fe bca7 	b.w	800781a <_ZN19Screen_3_LTViewBase11setupScreenEv>

08008ecc <_ZN15Screen_3_LTView17updateCoordinatesEv>:
}

/**
 * @brief Function to read and process the output of the LT algo.
 */
void Screen_3_LTView::updateCoordinates() {
 8008ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ece:	4604      	mov	r4, r0

	/* Indicate the framework that this entire Drawable needs to be redrawn */
	verticalLine.invalidate();
 8008ed0:	f500 76c8 	add.w	r6, r0, #400	@ 0x190
	horizontalLine.invalidate();

	/* Update the X coordinate of the LED blob */
	verticalLine.setStart((abs((int)(led_coordinates[0] - guiDifferenceConst))), xStart);
 8008ed4:	4f1f      	ldr	r7, [pc, #124]	@ (8008f54 <_ZN15Screen_3_LTView17updateCoordinatesEv+0x88>)
	horizontalLine.invalidate();
 8008ed6:	f504 7586 	add.w	r5, r4, #268	@ 0x10c
	verticalLine.invalidate();
 8008eda:	4630      	mov	r0, r6
	verticalLine.setStart((abs((int)(led_coordinates[0] - guiDifferenceConst))), xStart);
 8008edc:	f504 5480 	add.w	r4, r4, #4096	@ 0x1000
	verticalLine.invalidate();
 8008ee0:	f00a fce4 	bl	80138ac <_ZNK8touchgfx12CanvasWidget10invalidateEv>
	horizontalLine.invalidate();
 8008ee4:	4628      	mov	r0, r5
 8008ee6:	f00a fce1 	bl	80138ac <_ZNK8touchgfx12CanvasWidget10invalidateEv>
	verticalLine.setStart((abs((int)(led_coordinates[0] - guiDifferenceConst))), xStart);
 8008eea:	f8d4 3248 	ldr.w	r3, [r4, #584]	@ 0x248
 8008eee:	6839      	ldr	r1, [r7, #0]
        setStart(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 8008ef0:	4630      	mov	r0, r6
 8008ef2:	f8d4 2238 	ldr.w	r2, [r4, #568]	@ 0x238
 8008ef6:	1ac9      	subs	r1, r1, r3
 8008ef8:	0152      	lsls	r2, r2, #5
 8008efa:	2900      	cmp	r1, #0
 8008efc:	bfb8      	it	lt
 8008efe:	4249      	neglt	r1, r1
 8008f00:	0149      	lsls	r1, r1, #5
 8008f02:	f00a ffd9 	bl	8013eb8 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>
	verticalLine.setEnd((abs((int)(led_coordinates[0] - guiDifferenceConst))), xEnd);
 8008f06:	f8d4 3248 	ldr.w	r3, [r4, #584]	@ 0x248
 8008f0a:	6839      	ldr	r1, [r7, #0]
        setEnd(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 8008f0c:	4630      	mov	r0, r6
 8008f0e:	f8d4 223c 	ldr.w	r2, [r4, #572]	@ 0x23c
 8008f12:	1ac9      	subs	r1, r1, r3
 8008f14:	0152      	lsls	r2, r2, #5
 8008f16:	2900      	cmp	r1, #0
 8008f18:	bfb8      	it	lt
 8008f1a:	4249      	neglt	r1, r1
 8008f1c:	0149      	lsls	r1, r1, #5
 8008f1e:	f00a ffd6 	bl	8013ece <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_>

	/* Update the Y coordinate of the LED blob */
	horizontalLine.setStart(yStart, (int)led_coordinates[1]);
 8008f22:	687a      	ldr	r2, [r7, #4]
        return Q5((int)(value * Rasterizer::POLY_BASE_SIZE));
 8008f24:	f8d4 1240 	ldr.w	r1, [r4, #576]	@ 0x240
        setStart(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 8008f28:	4628      	mov	r0, r5
 8008f2a:	0152      	lsls	r2, r2, #5
 8008f2c:	0149      	lsls	r1, r1, #5
 8008f2e:	f00a ffc3 	bl	8013eb8 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>
	horizontalLine.setEnd(yEnd, (int)led_coordinates[1]);
 8008f32:	687a      	ldr	r2, [r7, #4]
 8008f34:	f8d4 1244 	ldr.w	r1, [r4, #580]	@ 0x244
        setEnd(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 8008f38:	4628      	mov	r0, r5
 8008f3a:	0152      	lsls	r2, r2, #5
 8008f3c:	0149      	lsls	r1, r1, #5
 8008f3e:	f00a ffc6 	bl	8013ece <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_>

	/* Indicate the framework that this entire Drawable needs to be redrawn */
	verticalLine.invalidate();
 8008f42:	4630      	mov	r0, r6
 8008f44:	f00a fcb2 	bl	80138ac <_ZNK8touchgfx12CanvasWidget10invalidateEv>
	horizontalLine.invalidate();
 8008f48:	4628      	mov	r0, r5

}
 8008f4a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	horizontalLine.invalidate();
 8008f4e:	f00a bcad 	b.w	80138ac <_ZNK8touchgfx12CanvasWidget10invalidateEv>
 8008f52:	bf00      	nop
 8008f54:	20013d78 	.word	0x20013d78

08008f58 <xDrvDmaCreate>:
 * @brief Function to Allocate and initialize a DrvDma driver.
 */
BaseType_t xDrvDmaCreate(
		DMA_HandleTypeDef *pxHdlDma,
		void* (*allocator) (size_t size), DrvDmaHandle_t *pxDrvDmaHandle)
{
 8008f58:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008f5c:	460d      	mov	r5, r1
 8008f5e:	4616      	mov	r6, r2
	assert(pxHdlDma && allocator && pxDrvDmaHandle);
 8008f60:	4607      	mov	r7, r0
 8008f62:	b108      	cbz	r0, 8008f68 <xDrvDmaCreate+0x10>
 8008f64:	b101      	cbz	r1, 8008f68 <xDrvDmaCreate+0x10>
 8008f66:	b92a      	cbnz	r2, 8008f74 <xDrvDmaCreate+0x1c>
 8008f68:	4b1b      	ldr	r3, [pc, #108]	@ (8008fd8 <xDrvDmaCreate+0x80>)
 8008f6a:	2131      	movs	r1, #49	@ 0x31
 8008f6c:	4a1b      	ldr	r2, [pc, #108]	@ (8008fdc <xDrvDmaCreate+0x84>)

	/* Allocate the driver and a semaphore. */
	StaticDrvDma_t *pxDrvDma = (StaticDrvDma_t *) allocator(sizeof(StaticDrvDma_t));
	StaticSemaphore_t *xStaticSemphIsrHdl  = allocator(sizeof(StaticSemaphore_t));
	StaticSemaphore_t *xStaticSemphLockHdl = allocator(sizeof(StaticSemaphore_t));
	assert(pxDrvDma && xStaticSemphIsrHdl && xStaticSemphLockHdl);
 8008f6e:	481c      	ldr	r0, [pc, #112]	@ (8008fe0 <xDrvDmaCreate+0x88>)
 8008f70:	f021 fb24 	bl	802a5bc <__assert_func>
	StaticDrvDma_t *pxDrvDma = (StaticDrvDma_t *) allocator(sizeof(StaticDrvDma_t));
 8008f74:	200c      	movs	r0, #12
 8008f76:	4788      	blx	r1
 8008f78:	4604      	mov	r4, r0
	StaticSemaphore_t *xStaticSemphIsrHdl  = allocator(sizeof(StaticSemaphore_t));
 8008f7a:	2050      	movs	r0, #80	@ 0x50
 8008f7c:	47a8      	blx	r5
 8008f7e:	4680      	mov	r8, r0
	StaticSemaphore_t *xStaticSemphLockHdl = allocator(sizeof(StaticSemaphore_t));
 8008f80:	2050      	movs	r0, #80	@ 0x50
 8008f82:	47a8      	blx	r5
 8008f84:	4605      	mov	r5, r0
	assert(pxDrvDma && xStaticSemphIsrHdl && xStaticSemphLockHdl);
 8008f86:	b11c      	cbz	r4, 8008f90 <xDrvDmaCreate+0x38>
 8008f88:	f1b8 0f00 	cmp.w	r8, #0
 8008f8c:	d000      	beq.n	8008f90 <xDrvDmaCreate+0x38>
 8008f8e:	b918      	cbnz	r0, 8008f98 <xDrvDmaCreate+0x40>
 8008f90:	4b14      	ldr	r3, [pc, #80]	@ (8008fe4 <xDrvDmaCreate+0x8c>)
 8008f92:	2137      	movs	r1, #55	@ 0x37
 8008f94:	4a11      	ldr	r2, [pc, #68]	@ (8008fdc <xDrvDmaCreate+0x84>)
 8008f96:	e7ea      	b.n	8008f6e <xDrvDmaCreate+0x16>

	/* Initialize the semaphore with ISR and take it. */
	pxDrvDma->xSemphIsrHdl = xSemaphoreCreateBinaryStatic( xStaticSemphIsrHdl );
 8008f98:	2303      	movs	r3, #3
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	2001      	movs	r0, #1
 8008f9e:	9300      	str	r3, [sp, #0]
 8008fa0:	4611      	mov	r1, r2
 8008fa2:	4643      	mov	r3, r8
 8008fa4:	f007 fa24 	bl	80103f0 <xQueueGenericCreateStatic>
 8008fa8:	6020      	str	r0, [r4, #0]
	assert(pxDrvDma->xSemphIsrHdl);
 8008faa:	b918      	cbnz	r0, 8008fb4 <xDrvDmaCreate+0x5c>
 8008fac:	4b0e      	ldr	r3, [pc, #56]	@ (8008fe8 <xDrvDmaCreate+0x90>)
 8008fae:	213b      	movs	r1, #59	@ 0x3b
 8008fb0:	4a0a      	ldr	r2, [pc, #40]	@ (8008fdc <xDrvDmaCreate+0x84>)
 8008fb2:	e7dc      	b.n	8008f6e <xDrvDmaCreate+0x16>
	/* The semaphore shall be given before the first take. */

	/* Initialize the lock semaphore. */
	pxDrvDma->xMutexLockHdl = xSemaphoreCreateMutexStatic( xStaticSemphLockHdl );
 8008fb4:	4629      	mov	r1, r5
 8008fb6:	2001      	movs	r0, #1
 8008fb8:	f007 fb59 	bl	801066e <xQueueCreateMutexStatic>
	assert(pxDrvDma->xSemphIsrHdl);
 8008fbc:	6823      	ldr	r3, [r4, #0]
	pxDrvDma->xMutexLockHdl = xSemaphoreCreateMutexStatic( xStaticSemphLockHdl );
 8008fbe:	6060      	str	r0, [r4, #4]
	assert(pxDrvDma->xSemphIsrHdl);
 8008fc0:	b91b      	cbnz	r3, 8008fca <xDrvDmaCreate+0x72>
 8008fc2:	4b09      	ldr	r3, [pc, #36]	@ (8008fe8 <xDrvDmaCreate+0x90>)
 8008fc4:	2140      	movs	r1, #64	@ 0x40
 8008fc6:	4a05      	ldr	r2, [pc, #20]	@ (8008fdc <xDrvDmaCreate+0x84>)
 8008fc8:	e7d1      	b.n	8008f6e <xDrvDmaCreate+0x16>
	pxDrvDma->pxHdlDma = pxHdlDma;

	*pxDrvDmaHandle = (DrvDmaHandle_t) pxDrvDma;
	return pdTRUE;
}
 8008fca:	2001      	movs	r0, #1
	pxDrvDma->pxHdlDma = pxHdlDma;
 8008fcc:	60a7      	str	r7, [r4, #8]
	*pxDrvDmaHandle = (DrvDmaHandle_t) pxDrvDma;
 8008fce:	6034      	str	r4, [r6, #0]
}
 8008fd0:	b002      	add	sp, #8
 8008fd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fd6:	bf00      	nop
 8008fd8:	080410a4 	.word	0x080410a4
 8008fdc:	08041167 	.word	0x08041167
 8008fe0:	080410cc 	.word	0x080410cc
 8008fe4:	080410ef 	.word	0x080410ef
 8008fe8:	08041125 	.word	0x08041125

08008fec <ucDrvDmaMemsetTo0>:
 * @param xDrvDmaHandle DMA Driver Handle
 * @param pucData The destination memory Buffer address
 * @param ulNbBytes The length of data to be transferred from source to destination
 */
BaseType_t ucDrvDmaMemsetTo0(DrvDmaHandle_t xDrvDmaHandle, void *pucData, size_t ulNbBytes)
{
 8008fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fee:	460e      	mov	r6, r1
 8008ff0:	4617      	mov	r7, r2
	BaseType_t status;

	assert(xDrvDmaHandle && pucData);
 8008ff2:	4605      	mov	r5, r0
 8008ff4:	b100      	cbz	r0, 8008ff8 <ucDrvDmaMemsetTo0+0xc>
 8008ff6:	b929      	cbnz	r1, 8009004 <ucDrvDmaMemsetTo0+0x18>
 8008ff8:	4b14      	ldr	r3, [pc, #80]	@ (800904c <ucDrvDmaMemsetTo0+0x60>)
 8008ffa:	2151      	movs	r1, #81	@ 0x51
 8008ffc:	4a14      	ldr	r2, [pc, #80]	@ (8009050 <ucDrvDmaMemsetTo0+0x64>)
 8008ffe:	4815      	ldr	r0, [pc, #84]	@ (8009054 <ucDrvDmaMemsetTo0+0x68>)
 8009000:	f021 fadc 	bl	802a5bc <__assert_func>
	struct xDrvDma *pxDrvDma = (struct xDrvDma *) xDrvDmaHandle;

	if ((uint32_t)pucData % DMA_BURST_SIZE)
 8009004:	078b      	lsls	r3, r1, #30
 8009006:	d11e      	bne.n	8009046 <ucDrvDmaMemsetTo0+0x5a>
		return pdFALSE;

	/* Acquire the lock. */
	status = xSemaphoreTake( pxDrvDma->xMutexLockHdl, portMAX_DELAY );
 8009008:	f04f 31ff 	mov.w	r1, #4294967295
 800900c:	6840      	ldr	r0, [r0, #4]
 800900e:	f007 fcc1 	bl	8010994 <xQueueSemaphoreTake>
	if (status != pdTRUE)
 8009012:	2801      	cmp	r0, #1
	status = xSemaphoreTake( pxDrvDma->xMutexLockHdl, portMAX_DELAY );
 8009014:	4604      	mov	r4, r0
	if (status != pdTRUE)
 8009016:	d114      	bne.n	8009042 <ucDrvDmaMemsetTo0+0x56>
		return status;

	status = HAL_DMA_Start_IT(pxDrvDma->pxHdlDma, (uint32_t) pxZeroBuffer, (uint32_t) pucData, ulNbBytes / DMA_BURST_SIZE);
 8009018:	08bb      	lsrs	r3, r7, #2
 800901a:	4632      	mov	r2, r6
 800901c:	490e      	ldr	r1, [pc, #56]	@ (8009058 <ucDrvDmaMemsetTo0+0x6c>)
 800901e:	68a8      	ldr	r0, [r5, #8]
 8009020:	f000 ff22 	bl	8009e68 <HAL_DMA_Start_IT>
	if (status != pdTRUE)
 8009024:	2801      	cmp	r0, #1
	status = HAL_DMA_Start_IT(pxDrvDma->pxHdlDma, (uint32_t) pxZeroBuffer, (uint32_t) pucData, ulNbBytes / DMA_BURST_SIZE);
 8009026:	4604      	mov	r4, r0
	if (status != pdTRUE)
 8009028:	d105      	bne.n	8009036 <ucDrvDmaMemsetTo0+0x4a>
		goto label_abort;

	status = xSemaphoreTake( pxDrvDma->xSemphIsrHdl, portMAX_DELAY  );
 800902a:	f04f 31ff 	mov.w	r1, #4294967295
 800902e:	6828      	ldr	r0, [r5, #0]
 8009030:	f007 fcb0 	bl	8010994 <xQueueSemaphoreTake>
 8009034:	4604      	mov	r4, r0

	label_abort:
	/* Release the lock. */
	xSemaphoreGive( pxDrvDma->xMutexLockHdl );
 8009036:	2300      	movs	r3, #0
 8009038:	6868      	ldr	r0, [r5, #4]
 800903a:	461a      	mov	r2, r3
 800903c:	4619      	mov	r1, r3
 800903e:	f007 fa5c 	bl	80104fa <xQueueGenericSend>
	return status;
}
 8009042:	4620      	mov	r0, r4
 8009044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return pdFALSE;
 8009046:	2400      	movs	r4, #0
 8009048:	e7fb      	b.n	8009042 <ucDrvDmaMemsetTo0+0x56>
 800904a:	bf00      	nop
 800904c:	0804113c 	.word	0x0804113c
 8009050:	08041155 	.word	0x08041155
 8009054:	080410cc 	.word	0x080410cc
 8009058:	08041178 	.word	0x08041178

0800905c <ucDrvDmaCallback>:
 * @param xDrvDmaHandle DMA Driver Handle
 */
BaseType_t ucDrvDmaCallback(DrvDmaHandle_t xDrvDmaHandle)
{
	struct xDrvDma *pxDrvDma = (struct xDrvDma *) xDrvDmaHandle;
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800905c:	2300      	movs	r3, #0
{
 800905e:	b507      	push	{r0, r1, r2, lr}

	xSemaphoreGiveFromISR( pxDrvDma->xSemphIsrHdl, &xHigherPriorityTaskWoken);
 8009060:	6800      	ldr	r0, [r0, #0]
 8009062:	a901      	add	r1, sp, #4
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8009064:	9301      	str	r3, [sp, #4]
	xSemaphoreGiveFromISR( pxDrvDma->xSemphIsrHdl, &xHigherPriorityTaskWoken);
 8009066:	f007 fb98 	bl	801079a <xQueueGiveFromISR>

	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800906a:	9b01      	ldr	r3, [sp, #4]
 800906c:	b14b      	cbz	r3, 8009082 <ucDrvDmaCallback+0x26>
 800906e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009072:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009076:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800907a:	f3bf 8f4f 	dsb	sy
 800907e:	f3bf 8f6f 	isb	sy
	return xHigherPriorityTaskWoken;
}
 8009082:	9801      	ldr	r0, [sp, #4]
 8009084:	b003      	add	sp, #12
 8009086:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800908c <xDrvGenx320Create>:
 * @brief Function to Allocate and initialize a DrvGenx320 driver.
 */
BaseType_t xDrvGenx320Create(
		void* (*allocator) (size_t size),
		DrvGenx320Handle_t *pxDrvGenx320Handle)
{
 800908c:	b570      	push	{r4, r5, r6, lr}
 800908e:	460e      	mov	r6, r1
	assert(allocator && pxDrvGenx320Handle);
 8009090:	4605      	mov	r5, r0
 8009092:	b100      	cbz	r0, 8009096 <xDrvGenx320Create+0xa>
 8009094:	b929      	cbnz	r1, 80090a2 <xDrvGenx320Create+0x16>
 8009096:	4b12      	ldr	r3, [pc, #72]	@ (80090e0 <xDrvGenx320Create+0x54>)
 8009098:	212b      	movs	r1, #43	@ 0x2b
 800909a:	4a12      	ldr	r2, [pc, #72]	@ (80090e4 <xDrvGenx320Create+0x58>)

	/* Allocate the driver and a semaphore. */
	StaticDrvGenx320_t *pxDrvGenx320 = (StaticDrvGenx320_t *) allocator(sizeof(StaticDrvGenx320_t));
	assert(pxDrvGenx320);
 800909c:	4812      	ldr	r0, [pc, #72]	@ (80090e8 <xDrvGenx320Create+0x5c>)
 800909e:	f021 fa8d 	bl	802a5bc <__assert_func>
	StaticDrvGenx320_t *pxDrvGenx320 = (StaticDrvGenx320_t *) allocator(sizeof(StaticDrvGenx320_t));
 80090a2:	2008      	movs	r0, #8
 80090a4:	47a8      	blx	r5
	assert(pxDrvGenx320);
 80090a6:	4604      	mov	r4, r0
 80090a8:	b918      	cbnz	r0, 80090b2 <xDrvGenx320Create+0x26>
 80090aa:	4b10      	ldr	r3, [pc, #64]	@ (80090ec <xDrvGenx320Create+0x60>)
 80090ac:	212f      	movs	r1, #47	@ 0x2f
 80090ae:	4a0d      	ldr	r2, [pc, #52]	@ (80090e4 <xDrvGenx320Create+0x58>)
 80090b0:	e7f4      	b.n	800909c <xDrvGenx320Create+0x10>

	/* Initialize the lock semaphore. */
	StaticSemaphore_t *xStaticSemphLockHdl = allocator(sizeof(StaticSemaphore_t));
 80090b2:	2050      	movs	r0, #80	@ 0x50
 80090b4:	47a8      	blx	r5
	assert(xStaticSemphLockHdl);
 80090b6:	4601      	mov	r1, r0
 80090b8:	b918      	cbnz	r0, 80090c2 <xDrvGenx320Create+0x36>
 80090ba:	4b0d      	ldr	r3, [pc, #52]	@ (80090f0 <xDrvGenx320Create+0x64>)
 80090bc:	2133      	movs	r1, #51	@ 0x33
 80090be:	4a09      	ldr	r2, [pc, #36]	@ (80090e4 <xDrvGenx320Create+0x58>)
 80090c0:	e7ec      	b.n	800909c <xDrvGenx320Create+0x10>
	pxDrvGenx320->xMutexLockHdl = xSemaphoreCreateMutexStatic( xStaticSemphLockHdl );
 80090c2:	2001      	movs	r0, #1
 80090c4:	f007 fad3 	bl	801066e <xQueueCreateMutexStatic>
 80090c8:	6020      	str	r0, [r4, #0]
	assert(pxDrvGenx320->xMutexLockHdl);
 80090ca:	b918      	cbnz	r0, 80090d4 <xDrvGenx320Create+0x48>
 80090cc:	4b09      	ldr	r3, [pc, #36]	@ (80090f4 <xDrvGenx320Create+0x68>)
 80090ce:	2135      	movs	r1, #53	@ 0x35
 80090d0:	4a04      	ldr	r2, [pc, #16]	@ (80090e4 <xDrvGenx320Create+0x58>)
 80090d2:	e7e3      	b.n	800909c <xDrvGenx320Create+0x10>

	pxDrvGenx320->bInitDone = false;
 80090d4:	2300      	movs	r3, #0

	*pxDrvGenx320Handle = (DrvGenx320Handle_t) pxDrvGenx320;
	return pdTRUE;
}
 80090d6:	2001      	movs	r0, #1
	pxDrvGenx320->bInitDone = false;
 80090d8:	7123      	strb	r3, [r4, #4]
	*pxDrvGenx320Handle = (DrvGenx320Handle_t) pxDrvGenx320;
 80090da:	6034      	str	r4, [r6, #0]
}
 80090dc:	bd70      	pop	{r4, r5, r6, pc}
 80090de:	bf00      	nop
 80090e0:	0804117c 	.word	0x0804117c
 80090e4:	080411ec 	.word	0x080411ec
 80090e8:	0804119c 	.word	0x0804119c
 80090ec:	080411c3 	.word	0x080411c3
 80090f0:	08041111 	.word	0x08041111
 80090f4:	080411d0 	.word	0x080411d0

080090f8 <ucDrvGenx320Init>:
/**
 * @brief Function to Initialize the GenX320 driver.
 * @param xDrvGenx320Handle GenX320 Driver Handle
 */
BaseType_t ucDrvGenx320Init(DrvGenx320Handle_t xDrvGenx320Handle)
{
 80090f8:	b570      	push	{r4, r5, r6, lr}
	struct xDrvGenx320 *pxDrvGenx320 = (struct xDrvGenx320 *) xDrvGenx320Handle;
	BaseType_t status;

	/* Acquire the lock. */
	status = xSemaphoreTake( pxDrvGenx320->xMutexLockHdl, portMAX_DELAY );
 80090fa:	f04f 31ff 	mov.w	r1, #4294967295
{
 80090fe:	4605      	mov	r5, r0
	status = xSemaphoreTake( pxDrvGenx320->xMutexLockHdl, portMAX_DELAY );
 8009100:	6800      	ldr	r0, [r0, #0]
 8009102:	f007 fc47 	bl	8010994 <xQueueSemaphoreTake>
	if (status != pdTRUE)
 8009106:	2801      	cmp	r0, #1
	status = xSemaphoreTake( pxDrvGenx320->xMutexLockHdl, portMAX_DELAY );
 8009108:	4604      	mov	r4, r0
	if (status != pdTRUE)
 800910a:	d113      	bne.n	8009134 <ucDrvGenx320Init+0x3c>
		return status;

	/* Initialize the sensor */
	current_issd = psee_open_evt();
 800910c:	4e0a      	ldr	r6, [pc, #40]	@ (8009138 <ucDrvGenx320Init+0x40>)
 800910e:	f006 f95f 	bl	800f3d0 <psee_open_evt>
 8009112:	6030      	str	r0, [r6, #0]

	/* Set Standard biases */
	psee_sensor_set_biases(&genx320_default_biases);
 8009114:	4809      	ldr	r0, [pc, #36]	@ (800913c <ucDrvGenx320Init+0x44>)
 8009116:	f005 fe86 	bl	800ee26 <psee_sensor_set_biases>

	/* Start the sensor */
	psee_sensor_start(current_issd);
 800911a:	6830      	ldr	r0, [r6, #0]
 800911c:	f005 fe7d 	bl	800ee1a <psee_sensor_start>

	/* Set Flip */
	psee_sensor_set_flip(0,0);
 8009120:	2100      	movs	r1, #0
 8009122:	4608      	mov	r0, r1
 8009124:	f005 ff9c 	bl	800f060 <psee_sensor_set_flip>

	/* Release the lock. */
	xSemaphoreGive( pxDrvGenx320->xMutexLockHdl );
 8009128:	2300      	movs	r3, #0
 800912a:	6828      	ldr	r0, [r5, #0]
 800912c:	461a      	mov	r2, r3
 800912e:	4619      	mov	r1, r3
 8009130:	f007 f9e3 	bl	80104fa <xQueueGenericSend>
	return pdTRUE;
}
 8009134:	4620      	mov	r0, r4
 8009136:	bd70      	pop	{r4, r5, r6, pc}
 8009138:	20016b84 	.word	0x20016b84
 800913c:	20016be1 	.word	0x20016be1

08009140 <xDrvI2cCreate>:
 * @brief Function to Allocate and initialize a DrvI2c driver.
 */
BaseType_t xDrvI2cCreate(
		I2C_HandleTypeDef *pxHdlI2c,
		void* (*allocator) (size_t size), DrvI2cHandle_t *pxDrvI2cHandle)
{
 8009140:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009144:	460d      	mov	r5, r1
 8009146:	4616      	mov	r6, r2
	assert(pxHdlI2c && allocator && pxDrvI2cHandle);
 8009148:	4607      	mov	r7, r0
 800914a:	b108      	cbz	r0, 8009150 <xDrvI2cCreate+0x10>
 800914c:	b101      	cbz	r1, 8009150 <xDrvI2cCreate+0x10>
 800914e:	b92a      	cbnz	r2, 800915c <xDrvI2cCreate+0x1c>
 8009150:	4b1b      	ldr	r3, [pc, #108]	@ (80091c0 <xDrvI2cCreate+0x80>)
 8009152:	2122      	movs	r1, #34	@ 0x22
 8009154:	4a1b      	ldr	r2, [pc, #108]	@ (80091c4 <xDrvI2cCreate+0x84>)

	/* Allocate the driver and a semaphore. */
	StaticDrvI2c_t *pxDrvI2c = (StaticDrvI2c_t *) allocator(sizeof(StaticDrvI2c_t));
	StaticSemaphore_t *xStaticSemphIsrHdl  = allocator(sizeof(StaticSemaphore_t));
	StaticSemaphore_t *xStaticSemphLockHdl = allocator(sizeof(StaticSemaphore_t));
	assert(pxDrvI2c && xStaticSemphIsrHdl && xStaticSemphLockHdl);
 8009156:	481c      	ldr	r0, [pc, #112]	@ (80091c8 <xDrvI2cCreate+0x88>)
 8009158:	f021 fa30 	bl	802a5bc <__assert_func>
	StaticDrvI2c_t *pxDrvI2c = (StaticDrvI2c_t *) allocator(sizeof(StaticDrvI2c_t));
 800915c:	200c      	movs	r0, #12
 800915e:	4788      	blx	r1
 8009160:	4604      	mov	r4, r0
	StaticSemaphore_t *xStaticSemphIsrHdl  = allocator(sizeof(StaticSemaphore_t));
 8009162:	2050      	movs	r0, #80	@ 0x50
 8009164:	47a8      	blx	r5
 8009166:	4680      	mov	r8, r0
	StaticSemaphore_t *xStaticSemphLockHdl = allocator(sizeof(StaticSemaphore_t));
 8009168:	2050      	movs	r0, #80	@ 0x50
 800916a:	47a8      	blx	r5
 800916c:	4605      	mov	r5, r0
	assert(pxDrvI2c && xStaticSemphIsrHdl && xStaticSemphLockHdl);
 800916e:	b11c      	cbz	r4, 8009178 <xDrvI2cCreate+0x38>
 8009170:	f1b8 0f00 	cmp.w	r8, #0
 8009174:	d000      	beq.n	8009178 <xDrvI2cCreate+0x38>
 8009176:	b918      	cbnz	r0, 8009180 <xDrvI2cCreate+0x40>
 8009178:	4b14      	ldr	r3, [pc, #80]	@ (80091cc <xDrvI2cCreate+0x8c>)
 800917a:	2128      	movs	r1, #40	@ 0x28
 800917c:	4a11      	ldr	r2, [pc, #68]	@ (80091c4 <xDrvI2cCreate+0x84>)
 800917e:	e7ea      	b.n	8009156 <xDrvI2cCreate+0x16>

	/* Initialize the semaphore with ISR and take it. */
	pxDrvI2c->xSemphIsrHdl = xSemaphoreCreateBinaryStatic( xStaticSemphIsrHdl );
 8009180:	2303      	movs	r3, #3
 8009182:	2200      	movs	r2, #0
 8009184:	2001      	movs	r0, #1
 8009186:	9300      	str	r3, [sp, #0]
 8009188:	4611      	mov	r1, r2
 800918a:	4643      	mov	r3, r8
 800918c:	f007 f930 	bl	80103f0 <xQueueGenericCreateStatic>
 8009190:	6020      	str	r0, [r4, #0]
	assert(pxDrvI2c->xSemphIsrHdl);
 8009192:	b918      	cbnz	r0, 800919c <xDrvI2cCreate+0x5c>
 8009194:	4b0e      	ldr	r3, [pc, #56]	@ (80091d0 <xDrvI2cCreate+0x90>)
 8009196:	212c      	movs	r1, #44	@ 0x2c
 8009198:	4a0a      	ldr	r2, [pc, #40]	@ (80091c4 <xDrvI2cCreate+0x84>)
 800919a:	e7dc      	b.n	8009156 <xDrvI2cCreate+0x16>
	/* The sematphore shall be given before the first take. */

	/* Initialize the lock semaphore. */
	pxDrvI2c->xMutexLockHdl = xSemaphoreCreateMutexStatic( xStaticSemphLockHdl );
 800919c:	4629      	mov	r1, r5
 800919e:	2001      	movs	r0, #1
 80091a0:	f007 fa65 	bl	801066e <xQueueCreateMutexStatic>
	assert(pxDrvI2c->xSemphIsrHdl);
 80091a4:	6823      	ldr	r3, [r4, #0]
	pxDrvI2c->xMutexLockHdl = xSemaphoreCreateMutexStatic( xStaticSemphLockHdl );
 80091a6:	6060      	str	r0, [r4, #4]
	assert(pxDrvI2c->xSemphIsrHdl);
 80091a8:	b91b      	cbnz	r3, 80091b2 <xDrvI2cCreate+0x72>
 80091aa:	4b09      	ldr	r3, [pc, #36]	@ (80091d0 <xDrvI2cCreate+0x90>)
 80091ac:	2131      	movs	r1, #49	@ 0x31
 80091ae:	4a05      	ldr	r2, [pc, #20]	@ (80091c4 <xDrvI2cCreate+0x84>)
 80091b0:	e7d1      	b.n	8009156 <xDrvI2cCreate+0x16>
	pxDrvI2c->pxHdlI2c = pxHdlI2c;

	*pxDrvI2cHandle = (DrvI2cHandle_t) pxDrvI2c;
	return pdTRUE;
}
 80091b2:	2001      	movs	r0, #1
	pxDrvI2c->pxHdlI2c = pxHdlI2c;
 80091b4:	60a7      	str	r7, [r4, #8]
	*pxDrvI2cHandle = (DrvI2cHandle_t) pxDrvI2c;
 80091b6:	6034      	str	r4, [r6, #0]
}
 80091b8:	b002      	add	sp, #8
 80091ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091be:	bf00      	nop
 80091c0:	080411fe 	.word	0x080411fe
 80091c4:	080412cf 	.word	0x080412cf
 80091c8:	08041226 	.word	0x08041226
 80091cc:	08041249 	.word	0x08041249
 80091d0:	0804127f 	.word	0x0804127f

080091d4 <ucDrvI2cReadBytes>:
 * @param ucRegAddr Sensor register address
 * @param pucData Pointer to data buffer
 * @param ulNbBytes Amount of data to be received
 */
BaseType_t ucDrvI2cReadBytes(DrvI2cHandle_t xDrvI2cHdl, uint16_t uhDevAddr, uint16_t ucRegAddr, uint8_t *pucData, size_t ulNbBytes)
{
 80091d4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80091d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80091dc:	460e      	mov	r6, r1
 80091de:	461f      	mov	r7, r3
	BaseType_t status;
	struct xDrvI2c *pxDrvI2c = (struct xDrvI2c *) xDrvI2cHdl;
	assert(pxDrvI2c && pucData);
 80091e0:	4605      	mov	r5, r0
 80091e2:	b100      	cbz	r0, 80091e6 <ucDrvI2cReadBytes+0x12>
 80091e4:	b92b      	cbnz	r3, 80091f2 <ucDrvI2cReadBytes+0x1e>
 80091e6:	4b1b      	ldr	r3, [pc, #108]	@ (8009254 <ucDrvI2cReadBytes+0x80>)
 80091e8:	2144      	movs	r1, #68	@ 0x44
 80091ea:	4a1b      	ldr	r2, [pc, #108]	@ (8009258 <ucDrvI2cReadBytes+0x84>)
 80091ec:	481b      	ldr	r0, [pc, #108]	@ (800925c <ucDrvI2cReadBytes+0x88>)
 80091ee:	f021 f9e5 	bl	802a5bc <__assert_func>

	uint16_t regAddr = ucRegAddr;

	/* Acquire the lock. */
	status = xSemaphoreTake( pxDrvI2c->xMutexLockHdl, portMAX_DELAY );
 80091f2:	f04f 31ff 	mov.w	r1, #4294967295
 80091f6:	6840      	ldr	r0, [r0, #4]
	uint16_t regAddr = ucRegAddr;
 80091f8:	f8ad 2006 	strh.w	r2, [sp, #6]
	status = xSemaphoreTake( pxDrvI2c->xMutexLockHdl, portMAX_DELAY );
 80091fc:	f007 fbca 	bl	8010994 <xQueueSemaphoreTake>
	if (status != pdTRUE)
 8009200:	2801      	cmp	r0, #1
	status = xSemaphoreTake( pxDrvI2c->xMutexLockHdl, portMAX_DELAY );
 8009202:	4604      	mov	r4, r0
	if (status != pdTRUE)
 8009204:	d121      	bne.n	800924a <ucDrvI2cReadBytes+0x76>
		return status;

	HAL_I2C_Master_Transmit_IT( pxDrvI2c->pxHdlI2c, uhDevAddr, (uint8_t *)&regAddr, 2);
 8009206:	2302      	movs	r3, #2
 8009208:	f10d 0206 	add.w	r2, sp, #6
 800920c:	4631      	mov	r1, r6
 800920e:	68a8      	ldr	r0, [r5, #8]
 8009210:	f002 f968 	bl	800b4e4 <HAL_I2C_Master_Transmit_IT>
	status = xSemaphoreTake( pxDrvI2c->xSemphIsrHdl, I2C_MAX_WAIT_TIME_PER_BYTE );
 8009214:	2164      	movs	r1, #100	@ 0x64
 8009216:	6828      	ldr	r0, [r5, #0]
 8009218:	f007 fbbc 	bl	8010994 <xQueueSemaphoreTake>
	if (status != pdTRUE)
 800921c:	2801      	cmp	r0, #1
	status = xSemaphoreTake( pxDrvI2c->xSemphIsrHdl, I2C_MAX_WAIT_TIME_PER_BYTE );
 800921e:	4604      	mov	r4, r0
	if (status != pdTRUE)
 8009220:	d10d      	bne.n	800923e <ucDrvI2cReadBytes+0x6a>
		goto label_abort;
	HAL_I2C_Master_Receive_IT( pxDrvI2c->pxHdlI2c, uhDevAddr, pucData, ulNbBytes);
 8009222:	fa1f f388 	uxth.w	r3, r8
 8009226:	463a      	mov	r2, r7
 8009228:	4631      	mov	r1, r6
 800922a:	68a8      	ldr	r0, [r5, #8]
 800922c:	f002 f99c 	bl	800b568 <HAL_I2C_Master_Receive_IT>
	status = xSemaphoreTake( pxDrvI2c->xSemphIsrHdl, I2C_MAX_WAIT_TIME_PER_BYTE * ulNbBytes);
 8009230:	2164      	movs	r1, #100	@ 0x64
 8009232:	6828      	ldr	r0, [r5, #0]
 8009234:	fb01 f108 	mul.w	r1, r1, r8
 8009238:	f007 fbac 	bl	8010994 <xQueueSemaphoreTake>
 800923c:	4604      	mov	r4, r0

	label_abort:
	/* Release the lock. */
	xSemaphoreGive( pxDrvI2c->xMutexLockHdl );
 800923e:	2300      	movs	r3, #0
 8009240:	6868      	ldr	r0, [r5, #4]
 8009242:	461a      	mov	r2, r3
 8009244:	4619      	mov	r1, r3
 8009246:	f007 f958 	bl	80104fa <xQueueGenericSend>
	return status;
}
 800924a:	4620      	mov	r0, r4
 800924c:	b002      	add	sp, #8
 800924e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009252:	bf00      	nop
 8009254:	08041296 	.word	0x08041296
 8009258:	080412bd 	.word	0x080412bd
 800925c:	08041226 	.word	0x08041226

08009260 <ucDrvI2cWriteBytes>:
 * @param uhDevAddr Target device address
 * @param pucData Pointer to data buffer
 * @param nb_bytes Amount of data to be sent
 */
BaseType_t ucDrvI2cWriteBytes(DrvI2cHandle_t xDrvI2cHdl, uint16_t uhDevAddr, uint8_t *pucData, size_t nb_bytes)
{
 8009260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009264:	460e      	mov	r6, r1
 8009266:	4617      	mov	r7, r2
 8009268:	4698      	mov	r8, r3
	BaseType_t status;
	struct xDrvI2c *pxDrvI2c = (struct xDrvI2c *) xDrvI2cHdl;
	assert(pxDrvI2c);
 800926a:	4605      	mov	r5, r0
 800926c:	b928      	cbnz	r0, 800927a <ucDrvI2cWriteBytes+0x1a>
 800926e:	4b11      	ldr	r3, [pc, #68]	@ (80092b4 <ucDrvI2cWriteBytes+0x54>)
 8009270:	2165      	movs	r1, #101	@ 0x65
 8009272:	4a11      	ldr	r2, [pc, #68]	@ (80092b8 <ucDrvI2cWriteBytes+0x58>)
 8009274:	4811      	ldr	r0, [pc, #68]	@ (80092bc <ucDrvI2cWriteBytes+0x5c>)
 8009276:	f021 f9a1 	bl	802a5bc <__assert_func>

	/* Acquire the lock. */
	status = xSemaphoreTake( pxDrvI2c->xMutexLockHdl, portMAX_DELAY );
 800927a:	f04f 31ff 	mov.w	r1, #4294967295
 800927e:	6840      	ldr	r0, [r0, #4]
 8009280:	f007 fb88 	bl	8010994 <xQueueSemaphoreTake>
	if (status != pdTRUE)
 8009284:	2801      	cmp	r0, #1
	status = xSemaphoreTake( pxDrvI2c->xMutexLockHdl, portMAX_DELAY );
 8009286:	4604      	mov	r4, r0
	if (status != pdTRUE)
 8009288:	d111      	bne.n	80092ae <ucDrvI2cWriteBytes+0x4e>
		return status;

	HAL_I2C_Master_Transmit_IT( pxDrvI2c->pxHdlI2c, uhDevAddr, pucData, nb_bytes);
 800928a:	fa1f f388 	uxth.w	r3, r8
 800928e:	463a      	mov	r2, r7
 8009290:	4631      	mov	r1, r6
 8009292:	68a8      	ldr	r0, [r5, #8]
 8009294:	f002 f926 	bl	800b4e4 <HAL_I2C_Master_Transmit_IT>
	status = xSemaphoreTake( pxDrvI2c->xSemphIsrHdl, I2C_MAX_WAIT_TIME_PER_BYTE );
 8009298:	2164      	movs	r1, #100	@ 0x64
 800929a:	6828      	ldr	r0, [r5, #0]
 800929c:	f007 fb7a 	bl	8010994 <xQueueSemaphoreTake>

	/* Release the lock. */
	xSemaphoreGive( pxDrvI2c->xMutexLockHdl );
 80092a0:	2300      	movs	r3, #0
	status = xSemaphoreTake( pxDrvI2c->xSemphIsrHdl, I2C_MAX_WAIT_TIME_PER_BYTE );
 80092a2:	4604      	mov	r4, r0
	xSemaphoreGive( pxDrvI2c->xMutexLockHdl );
 80092a4:	6868      	ldr	r0, [r5, #4]
 80092a6:	461a      	mov	r2, r3
 80092a8:	4619      	mov	r1, r3
 80092aa:	f007 f926 	bl	80104fa <xQueueGenericSend>
	return status;

}
 80092ae:	4620      	mov	r0, r4
 80092b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092b4:	0802d0c8 	.word	0x0802d0c8
 80092b8:	080412aa 	.word	0x080412aa
 80092bc:	08041226 	.word	0x08041226

080092c0 <ucDrvI2cCallback>:
 * @param xDrvI2cHdl I2C Driver Handle
 */
BaseType_t ucDrvI2cCallback(DrvI2cHandle_t xDrvI2cHdl)
{
	struct xDrvI2c *pxDrvI2c = (struct xDrvI2c *) xDrvI2cHdl;
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80092c0:	2300      	movs	r3, #0
{
 80092c2:	b507      	push	{r0, r1, r2, lr}

	xSemaphoreGiveFromISR( pxDrvI2c->xSemphIsrHdl, &xHigherPriorityTaskWoken);
 80092c4:	6800      	ldr	r0, [r0, #0]
 80092c6:	a901      	add	r1, sp, #4
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80092c8:	9301      	str	r3, [sp, #4]
	xSemaphoreGiveFromISR( pxDrvI2c->xSemphIsrHdl, &xHigherPriorityTaskWoken);
 80092ca:	f007 fa66 	bl	801079a <xQueueGiveFromISR>

	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80092ce:	9b01      	ldr	r3, [sp, #4]
 80092d0:	b14b      	cbz	r3, 80092e6 <ucDrvI2cCallback+0x26>
 80092d2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80092d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80092da:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80092de:	f3bf 8f4f 	dsb	sy
 80092e2:	f3bf 8f6f 	isb	sy
	return xHigherPriorityTaskWoken;
}
 80092e6:	9801      	ldr	r0, [sp, #4]
 80092e8:	b003      	add	sp, #12
 80092ea:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080092f0 <QSPI_AutoPollingMemReady.constprop.0>:
  * @brief  This function read the SR of the memory and wait the EOP.
  * @param  hqspi: QSPI handle
  * @param  Timeout
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
 80092f0:	b500      	push	{lr}
{
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */  
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80092f2:	f44f 7280 	mov.w	r2, #256	@ 0x100
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
 80092f6:	b095      	sub	sp, #84	@ 0x54
  s_command.Instruction       = READ_STATUS_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_1_LINE;
 80092f8:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
 80092fc:	4603      	mov	r3, r0
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80092fe:	920c      	str	r2, [sp, #48]	@ 0x30
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8009300:	2205      	movs	r2, #5
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8009302:	910f      	str	r1, [sp, #60]	@ 0x3c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  s_config.Match           = 0;
  s_config.Mask            = N25Q128A_SR_WIP;
 8009304:	2101      	movs	r1, #1
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8009306:	9206      	str	r2, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8009308:	2200      	movs	r2, #0
  s_config.Mask            = N25Q128A_SR_WIP;
 800930a:	9101      	str	r1, [sp, #4]
  s_command.DummyCycles       = 0;
 800930c:	920b      	str	r2, [sp, #44]	@ 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800930e:	9213      	str	r2, [sp, #76]	@ 0x4c
  s_config.Match           = 0;
 8009310:	9200      	str	r2, [sp, #0]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
  s_config.StatusBytesSize = 1;
  s_config.Interval        = 0x10;
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 8009312:	480b      	ldr	r0, [pc, #44]	@ (8009340 <QSPI_AutoPollingMemReady.constprop.0+0x50>)
  s_config.StatusBytesSize = 1;
 8009314:	e9cd 1203 	strd	r1, r2, [sp, #12]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8009318:	e9cd 220d 	strd	r2, r2, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800931c:	e9cd 2211 	strd	r2, r2, [sp, #68]	@ 0x44
  s_config.Interval        = 0x10;
 8009320:	2210      	movs	r2, #16
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 8009322:	a906      	add	r1, sp, #24
  s_config.Interval        = 0x10;
 8009324:	9202      	str	r2, [sp, #8]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8009326:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800932a:	9205      	str	r2, [sp, #20]
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 800932c:	466a      	mov	r2, sp
 800932e:	f003 fbeb 	bl	800cb08 <HAL_QSPI_AutoPolling>
  {
    return QSPI_ERROR;
  }

  return QSPI_OK;
}
 8009332:	3800      	subs	r0, #0
 8009334:	bf18      	it	ne
 8009336:	2001      	movne	r0, #1
 8009338:	b015      	add	sp, #84	@ 0x54
 800933a:	f85d fb04 	ldr.w	pc, [sp], #4
 800933e:	bf00      	nop
 8009340:	20016b88 	.word	0x20016b88

08009344 <QSPI_WriteEnable.constprop.0>:
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
 8009344:	b500      	push	{lr}
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8009346:	f44f 7380 	mov.w	r3, #256	@ 0x100
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
 800934a:	b095      	sub	sp, #84	@ 0x54
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800934c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009350:	4817      	ldr	r0, [pc, #92]	@ (80093b0 <QSPI_WriteEnable.constprop.0+0x6c>)
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8009352:	930c      	str	r3, [sp, #48]	@ 0x30
  s_command.Instruction       = WRITE_ENABLE_CMD;
 8009354:	2306      	movs	r3, #6
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009356:	a906      	add	r1, sp, #24
  s_command.Instruction       = WRITE_ENABLE_CMD;
 8009358:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800935a:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800935c:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  s_command.DataMode          = QSPI_DATA_NONE;
 8009360:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_command.DummyCycles       = 0;
 8009362:	930b      	str	r3, [sp, #44]	@ 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8009364:	9313      	str	r3, [sp, #76]	@ 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8009366:	e9cd 3311 	strd	r3, r3, [sp, #68]	@ 0x44
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800936a:	f003 fb88 	bl	800ca7e <HAL_QSPI_Command>
 800936e:	b9e0      	cbnz	r0, 80093aa <QSPI_WriteEnable.constprop.0+0x66>
  s_config.Match           = N25Q128A_SR_WREN;
 8009370:	2302      	movs	r3, #2
  s_config.Interval        = 0x10;
 8009372:	2201      	movs	r2, #1
  s_command.Instruction    = READ_STATUS_REG_CMD;
 8009374:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8009378:	9004      	str	r0, [sp, #16]
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800937a:	480d      	ldr	r0, [pc, #52]	@ (80093b0 <QSPI_WriteEnable.constprop.0+0x6c>)
  s_config.Mask            = N25Q128A_SR_WREN;
 800937c:	e9cd 3300 	strd	r3, r3, [sp]
  s_config.Interval        = 0x10;
 8009380:	2310      	movs	r3, #16
 8009382:	e9cd 3202 	strd	r3, r2, [sp, #8]
  s_command.Instruction    = READ_STATUS_REG_CMD;
 8009386:	2305      	movs	r3, #5
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009388:	466a      	mov	r2, sp
  s_command.Instruction    = READ_STATUS_REG_CMD;
 800938a:	e9cd 1305 	strd	r1, r3, [sp, #20]
  s_command.DataMode       = QSPI_DATA_1_LINE;
 800938e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009392:	a906      	add	r1, sp, #24
  s_command.DataMode       = QSPI_DATA_1_LINE;
 8009394:	930f      	str	r3, [sp, #60]	@ 0x3c
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009396:	f241 3388 	movw	r3, #5000	@ 0x1388
 800939a:	f003 fbb5 	bl	800cb08 <HAL_QSPI_AutoPolling>
 800939e:	3800      	subs	r0, #0
 80093a0:	bf18      	it	ne
 80093a2:	2001      	movne	r0, #1
}
 80093a4:	b015      	add	sp, #84	@ 0x54
 80093a6:	f85d fb04 	ldr.w	pc, [sp], #4
    return QSPI_ERROR;
 80093aa:	2001      	movs	r0, #1
 80093ac:	e7fa      	b.n	80093a4 <QSPI_WriteEnable.constprop.0+0x60>
 80093ae:	bf00      	nop
 80093b0:	20016b88 	.word	0x20016b88

080093b4 <BSP_QSPI_EnableMemoryMappedMode>:
{
 80093b4:	b500      	push	{lr}
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80093b6:	f44f 7380 	mov.w	r3, #256	@ 0x100
{
 80093ba:	b091      	sub	sp, #68	@ 0x44
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80093bc:	f04f 7240 	mov.w	r2, #50331648	@ 0x3000000
  if (HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 80093c0:	480e      	ldr	r0, [pc, #56]	@ (80093fc <BSP_QSPI_EnableMemoryMappedMode+0x48>)
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80093c2:	9308      	str	r3, [sp, #32]
  s_command.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 80093c4:	23eb      	movs	r3, #235	@ 0xeb
  if (HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 80093c6:	a902      	add	r1, sp, #8
  s_command.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 80093c8:	9302      	str	r3, [sp, #8]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 80093ca:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80093ce:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 80093d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80093d4:	9305      	str	r3, [sp, #20]
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80093d6:	2300      	movs	r3, #0
 80093d8:	e9cd 320a 	strd	r3, r2, [sp, #40]	@ 0x28
  s_command.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 80093dc:	220a      	movs	r2, #10
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80093de:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_command.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 80093e0:	9207      	str	r2, [sp, #28]
  if (HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 80093e2:	466a      	mov	r2, sp
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80093e4:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 80093e8:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 80093ec:	f003 fbdd 	bl	800cbaa <HAL_QSPI_MemoryMapped>
}
 80093f0:	3800      	subs	r0, #0
 80093f2:	bf18      	it	ne
 80093f4:	2001      	movne	r0, #1
 80093f6:	b011      	add	sp, #68	@ 0x44
 80093f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80093fc:	20016b88 	.word	0x20016b88

08009400 <BSP_QSPI_MspInit>:
  QSPI_CLK_ENABLE();
 8009400:	4b45      	ldr	r3, [pc, #276]	@ (8009518 <BSP_QSPI_MspInit+0x118>)
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8009402:	2101      	movs	r1, #1
  QSPI_CLK_ENABLE();
 8009404:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009406:	f042 0202 	orr.w	r2, r2, #2
{
 800940a:	b5f0      	push	{r4, r5, r6, r7, lr}
  QSPI_CLK_ENABLE();
 800940c:	639a      	str	r2, [r3, #56]	@ 0x38
{
 800940e:	b08d      	sub	sp, #52	@ 0x34
  QSPI_CLK_ENABLE();
 8009410:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8009412:	2409      	movs	r4, #9
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 8009414:	4d41      	ldr	r5, [pc, #260]	@ (800951c <BSP_QSPI_MspInit+0x11c>)
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 8009416:	2704      	movs	r7, #4
  QSPI_CLK_ENABLE();
 8009418:	f002 0202 	and.w	r2, r2, #2
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800941c:	2600      	movs	r6, #0
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 800941e:	4628      	mov	r0, r5
  QSPI_CLK_ENABLE();
 8009420:	9200      	str	r2, [sp, #0]
 8009422:	9a00      	ldr	r2, [sp, #0]
  QSPI_FORCE_RESET();
 8009424:	699a      	ldr	r2, [r3, #24]
 8009426:	f042 0202 	orr.w	r2, r2, #2
 800942a:	619a      	str	r2, [r3, #24]
  QSPI_RELEASE_RESET();
 800942c:	699a      	ldr	r2, [r3, #24]
 800942e:	f022 0202 	bic.w	r2, r2, #2
 8009432:	619a      	str	r2, [r3, #24]
  QSPI_CS_GPIO_CLK_ENABLE();
 8009434:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009436:	f042 0202 	orr.w	r2, r2, #2
 800943a:	631a      	str	r2, [r3, #48]	@ 0x30
 800943c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800943e:	f002 0202 	and.w	r2, r2, #2
 8009442:	9201      	str	r2, [sp, #4]
 8009444:	9a01      	ldr	r2, [sp, #4]
  QSPI_CLK_GPIO_CLK_ENABLE();
 8009446:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009448:	f042 0202 	orr.w	r2, r2, #2
 800944c:	631a      	str	r2, [r3, #48]	@ 0x30
 800944e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009450:	f002 0202 	and.w	r2, r2, #2
 8009454:	9202      	str	r2, [sp, #8]
 8009456:	9a02      	ldr	r2, [sp, #8]
  QSPI_D0_GPIO_CLK_ENABLE();
 8009458:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800945a:	f042 0208 	orr.w	r2, r2, #8
 800945e:	631a      	str	r2, [r3, #48]	@ 0x30
 8009460:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009462:	f002 0208 	and.w	r2, r2, #8
 8009466:	9203      	str	r2, [sp, #12]
 8009468:	9a03      	ldr	r2, [sp, #12]
  QSPI_D1_GPIO_CLK_ENABLE();
 800946a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800946c:	f042 0208 	orr.w	r2, r2, #8
 8009470:	631a      	str	r2, [r3, #48]	@ 0x30
 8009472:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009474:	f002 0208 	and.w	r2, r2, #8
 8009478:	9204      	str	r2, [sp, #16]
 800947a:	9a04      	ldr	r2, [sp, #16]
  QSPI_D2_GPIO_CLK_ENABLE();
 800947c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800947e:	f042 0210 	orr.w	r2, r2, #16
 8009482:	631a      	str	r2, [r3, #48]	@ 0x30
 8009484:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009486:	f002 0210 	and.w	r2, r2, #16
 800948a:	9205      	str	r2, [sp, #20]
 800948c:	9a05      	ldr	r2, [sp, #20]
  QSPI_D3_GPIO_CLK_ENABLE();
 800948e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009490:	f042 0208 	orr.w	r2, r2, #8
 8009494:	631a      	str	r2, [r3, #48]	@ 0x30
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8009496:	2240      	movs	r2, #64	@ 0x40
  QSPI_D3_GPIO_CLK_ENABLE();
 8009498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800949a:	f003 0308 	and.w	r3, r3, #8
 800949e:	9306      	str	r3, [sp, #24]
 80094a0:	9b06      	ldr	r3, [sp, #24]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80094a2:	2302      	movs	r3, #2
 80094a4:	e9cd 2307 	strd	r2, r3, [sp, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 80094a8:	2303      	movs	r3, #3
 80094aa:	e9cd 1309 	strd	r1, r3, [sp, #36]	@ 0x24
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 80094ae:	230a      	movs	r3, #10
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 80094b0:	a907      	add	r1, sp, #28
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 80094b2:	930b      	str	r3, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 80094b4:	f001 fca2 	bl	800adfc <HAL_GPIO_Init>
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 80094b8:	a907      	add	r1, sp, #28
 80094ba:	4628      	mov	r0, r5
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 80094bc:	9707      	str	r7, [sp, #28]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80094be:	9609      	str	r6, [sp, #36]	@ 0x24
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80094c0:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 80094c2:	f001 fc9b 	bl	800adfc <HAL_GPIO_Init>
  gpio_init_structure.Pin       = QSPI_D0_PIN;
 80094c6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  HAL_GPIO_Init(QSPI_D0_GPIO_PORT, &gpio_init_structure);
 80094ca:	a907      	add	r1, sp, #28
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80094cc:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(QSPI_D0_GPIO_PORT, &gpio_init_structure);
 80094ce:	441d      	add	r5, r3
  gpio_init_structure.Pin       = QSPI_D0_PIN;
 80094d0:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(QSPI_D0_GPIO_PORT, &gpio_init_structure);
 80094d2:	4628      	mov	r0, r5
 80094d4:	f001 fc92 	bl	800adfc <HAL_GPIO_Init>
  gpio_init_structure.Pin       = QSPI_D1_PIN;
 80094d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  HAL_GPIO_Init(QSPI_D1_GPIO_PORT, &gpio_init_structure);
 80094dc:	a907      	add	r1, sp, #28
 80094de:	4628      	mov	r0, r5
  gpio_init_structure.Pin       = QSPI_D1_PIN;
 80094e0:	9307      	str	r3, [sp, #28]
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80094e2:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(QSPI_D1_GPIO_PORT, &gpio_init_structure);
 80094e4:	f001 fc8a 	bl	800adfc <HAL_GPIO_Init>
  HAL_GPIO_Init(QSPI_D2_GPIO_PORT, &gpio_init_structure);
 80094e8:	a907      	add	r1, sp, #28
 80094ea:	480d      	ldr	r0, [pc, #52]	@ (8009520 <BSP_QSPI_MspInit+0x120>)
  gpio_init_structure.Pin       = QSPI_D2_PIN;
 80094ec:	9707      	str	r7, [sp, #28]
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80094ee:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(QSPI_D2_GPIO_PORT, &gpio_init_structure);
 80094f0:	f001 fc84 	bl	800adfc <HAL_GPIO_Init>
  gpio_init_structure.Pin       = QSPI_D3_PIN;
 80094f4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  HAL_GPIO_Init(QSPI_D3_GPIO_PORT, &gpio_init_structure);
 80094f8:	a907      	add	r1, sp, #28
 80094fa:	4628      	mov	r0, r5
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80094fc:	940b      	str	r4, [sp, #44]	@ 0x2c
  gpio_init_structure.Pin       = QSPI_D3_PIN;
 80094fe:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(QSPI_D3_GPIO_PORT, &gpio_init_structure);
 8009500:	f001 fc7c 	bl	800adfc <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 8009504:	4632      	mov	r2, r6
 8009506:	210f      	movs	r1, #15
 8009508:	205c      	movs	r0, #92	@ 0x5c
 800950a:	f000 f9d3 	bl	80098b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 800950e:	205c      	movs	r0, #92	@ 0x5c
 8009510:	f000 fa02 	bl	8009918 <HAL_NVIC_EnableIRQ>
}
 8009514:	b00d      	add	sp, #52	@ 0x34
 8009516:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009518:	40023800 	.word	0x40023800
 800951c:	40020400 	.word	0x40020400
 8009520:	40021000 	.word	0x40021000

08009524 <BSP_QSPI_Init>:
{ 
 8009524:	b5f0      	push	{r4, r5, r6, r7, lr}
  QSPIHandle.Instance = QUADSPI;
 8009526:	4c49      	ldr	r4, [pc, #292]	@ (800964c <BSP_QSPI_Init+0x128>)
{ 
 8009528:	b091      	sub	sp, #68	@ 0x44
  QSPIHandle.Instance = QUADSPI;
 800952a:	4b49      	ldr	r3, [pc, #292]	@ (8009650 <BSP_QSPI_Init+0x12c>)
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 800952c:	4620      	mov	r0, r4
  QSPIHandle.Instance = QUADSPI;
 800952e:	6023      	str	r3, [r4, #0]
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 8009530:	f003 fa92 	bl	800ca58 <HAL_QSPI_DeInit>
 8009534:	4605      	mov	r5, r0
 8009536:	b110      	cbz	r0, 800953e <BSP_QSPI_Init+0x1a>
    return QSPI_ERROR;
 8009538:	2001      	movs	r0, #1
}
 800953a:	b011      	add	sp, #68	@ 0x44
 800953c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  BSP_QSPI_MspInit(&QSPIHandle, NULL);
 800953e:	4601      	mov	r1, r0
 8009540:	4620      	mov	r0, r4
 8009542:	f7ff ff5d 	bl	8009400 <BSP_QSPI_MspInit>
  QSPIHandle.Init.FifoThreshold      = 4;
 8009546:	2601      	movs	r6, #1
 8009548:	2304      	movs	r3, #4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800954a:	f04f 7780 	mov.w	r7, #16777216	@ 0x1000000
 800954e:	e9c4 6301 	strd	r6, r3, [r4, #4]
  QSPIHandle.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8009552:	2310      	movs	r3, #16
 8009554:	60e3      	str	r3, [r4, #12]
 8009556:	fa97 f3a7 	rbit	r3, r7
  QSPIHandle.Init.FlashSize          = POSITION_VAL(N25Q128A_FLASH_SIZE) - 1;
 800955a:	fab3 f383 	clz	r3, r3
  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 800955e:	4620      	mov	r0, r4
  QSPIHandle.Init.FlashSize          = POSITION_VAL(N25Q128A_FLASH_SIZE) - 1;
 8009560:	3b01      	subs	r3, #1
 8009562:	6123      	str	r3, [r4, #16]
  QSPIHandle.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE; /* Min 50ns for nonRead */
 8009564:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
  QSPIHandle.Init.DualFlash          = QSPI_DUALFLASH_DISABLE;
 8009568:	e9c4 5507 	strd	r5, r5, [r4, #28]
  QSPIHandle.Init.ClockMode          = QSPI_CLOCK_MODE_0;
 800956c:	e9c4 3505 	strd	r3, r5, [r4, #20]
  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 8009570:	f003 fa20 	bl	800c9b4 <HAL_QSPI_Init>
 8009574:	2800      	cmp	r0, #0
 8009576:	d1df      	bne.n	8009538 <BSP_QSPI_Init+0x14>
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8009578:	f44f 7580 	mov.w	r5, #256	@ 0x100
  s_command.Instruction       = RESET_ENABLE_CMD;
 800957c:	2366      	movs	r3, #102	@ 0x66
  s_command.DataMode          = QSPI_DATA_NONE;
 800957e:	900b      	str	r0, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009580:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.DummyCycles       = 0;
 8009584:	9007      	str	r0, [sp, #28]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009586:	a902      	add	r1, sp, #8
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8009588:	900f      	str	r0, [sp, #60]	@ 0x3c
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800958a:	9508      	str	r5, [sp, #32]
  s_command.Instruction       = RESET_ENABLE_CMD;
 800958c:	9302      	str	r3, [sp, #8]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800958e:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8009592:	e9cd 000d 	strd	r0, r0, [sp, #52]	@ 0x34
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009596:	4620      	mov	r0, r4
 8009598:	f003 fa71 	bl	800ca7e <HAL_QSPI_Command>
 800959c:	b108      	cbz	r0, 80095a2 <BSP_QSPI_Init+0x7e>
    return QSPI_NOT_SUPPORTED;
 800959e:	2004      	movs	r0, #4
 80095a0:	e7cb      	b.n	800953a <BSP_QSPI_Init+0x16>
  s_command.Instruction = RESET_MEMORY_CMD;
 80095a2:	2399      	movs	r3, #153	@ 0x99
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80095a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80095a8:	a902      	add	r1, sp, #8
 80095aa:	4620      	mov	r0, r4
  s_command.Instruction = RESET_MEMORY_CMD;
 80095ac:	9302      	str	r3, [sp, #8]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80095ae:	f003 fa66 	bl	800ca7e <HAL_QSPI_Command>
 80095b2:	2800      	cmp	r0, #0
 80095b4:	d1f3      	bne.n	800959e <BSP_QSPI_Init+0x7a>
  if (QSPI_AutoPollingMemReady(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 80095b6:	f241 3088 	movw	r0, #5000	@ 0x1388
 80095ba:	f7ff fe99 	bl	80092f0 <QSPI_AutoPollingMemReady.constprop.0>
 80095be:	2800      	cmp	r0, #0
 80095c0:	d1ed      	bne.n	800959e <BSP_QSPI_Init+0x7a>
  s_command.Instruction       = READ_VOL_CFG_REG_CMD;
 80095c2:	2385      	movs	r3, #133	@ 0x85
  s_command.DummyCycles       = 0;
 80095c4:	9007      	str	r0, [sp, #28]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80095c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80095ca:	a902      	add	r1, sp, #8
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80095cc:	9508      	str	r5, [sp, #32]
  s_command.Instruction       = READ_VOL_CFG_REG_CMD;
 80095ce:	9302      	str	r3, [sp, #8]
  s_command.DataMode          = QSPI_DATA_1_LINE;
 80095d0:	970b      	str	r7, [sp, #44]	@ 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80095d2:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80095d6:	e9cd 600c 	strd	r6, r0, [sp, #48]	@ 0x30
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80095da:	e9cd 000e 	strd	r0, r0, [sp, #56]	@ 0x38
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80095de:	4620      	mov	r0, r4
 80095e0:	f003 fa4d 	bl	800ca7e <HAL_QSPI_Command>
 80095e4:	2800      	cmp	r0, #0
 80095e6:	d1da      	bne.n	800959e <BSP_QSPI_Init+0x7a>
  if (HAL_QSPI_Receive(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80095e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80095ec:	f10d 0107 	add.w	r1, sp, #7
 80095f0:	4620      	mov	r0, r4
 80095f2:	f003 fbc4 	bl	800cd7e <HAL_QSPI_Receive>
 80095f6:	2800      	cmp	r0, #0
 80095f8:	d1d1      	bne.n	800959e <BSP_QSPI_Init+0x7a>
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 80095fa:	f7ff fea3 	bl	8009344 <QSPI_WriteEnable.constprop.0>
 80095fe:	2800      	cmp	r0, #0
 8009600:	d1cd      	bne.n	800959e <BSP_QSPI_Init+0x7a>
  s_command.Instruction = WRITE_VOL_CFG_REG_CMD;
 8009602:	2381      	movs	r3, #129	@ 0x81
 8009604:	22f0      	movs	r2, #240	@ 0xf0
 8009606:	9302      	str	r3, [sp, #8]
 8009608:	fa92 f2a2 	rbit	r2, r2
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 800960c:	210a      	movs	r1, #10
 800960e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009612:	fab2 f282 	clz	r2, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009616:	4620      	mov	r0, r4
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 8009618:	f003 030f 	and.w	r3, r3, #15
 800961c:	fa01 f202 	lsl.w	r2, r1, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009620:	a902      	add	r1, sp, #8
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 8009622:	4313      	orrs	r3, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009624:	f241 3288 	movw	r2, #5000	@ 0x1388
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 8009628:	f88d 3007 	strb.w	r3, [sp, #7]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800962c:	f003 fa27 	bl	800ca7e <HAL_QSPI_Command>
 8009630:	2800      	cmp	r0, #0
 8009632:	d1b4      	bne.n	800959e <BSP_QSPI_Init+0x7a>
  if (HAL_QSPI_Transmit(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009634:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009638:	f10d 0107 	add.w	r1, sp, #7
 800963c:	4620      	mov	r0, r4
 800963e:	f003 fb3f 	bl	800ccc0 <HAL_QSPI_Transmit>
 8009642:	2800      	cmp	r0, #0
 8009644:	f43f af79 	beq.w	800953a <BSP_QSPI_Init+0x16>
 8009648:	e7a9      	b.n	800959e <BSP_QSPI_Init+0x7a>
 800964a:	bf00      	nop
 800964c:	20016b88 	.word	0x20016b88
 8009650:	a0001000 	.word	0xa0001000

08009654 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8009654:	490f      	ldr	r1, [pc, #60]	@ (8009694 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8009656:	2000      	movs	r0, #0
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8009658:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 800965c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009660:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8009664:	4b0c      	ldr	r3, [pc, #48]	@ (8009698 <SystemInit+0x44>)
 8009666:	681a      	ldr	r2, [r3, #0]
 8009668:	f042 0201 	orr.w	r2, r2, #1
 800966c:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800966e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8009670:	681a      	ldr	r2, [r3, #0]
 8009672:	f022 7284 	bic.w	r2, r2, #17301504	@ 0x1080000
 8009676:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800967a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800967c:	4a07      	ldr	r2, [pc, #28]	@ (800969c <SystemInit+0x48>)
 800967e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8009680:	681a      	ldr	r2, [r3, #0]
 8009682:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8009686:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8009688:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800968a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800968e:	608b      	str	r3, [r1, #8]
#endif
}
 8009690:	4770      	bx	lr
 8009692:	bf00      	nop
 8009694:	e000ed00 	.word	0xe000ed00
 8009698:	40023800 	.word	0x40023800
 800969c:	24003010 	.word	0x24003010

080096a0 <ft5336_Reset>:
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 80096a0:	4770      	bx	lr

080096a2 <ft5336_TS_ITStatus>:
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
}
 80096a2:	2000      	movs	r0, #0
 80096a4:	4770      	bx	lr
	...

080096a8 <ft5336_ReadID>:
  volatile uint8_t ucReadId = 0;
 80096a8:	2300      	movs	r3, #0
{
 80096aa:	b537      	push	{r0, r1, r2, r4, r5, lr}
  volatile uint8_t ucReadId = 0;
 80096ac:	f88d 3007 	strb.w	r3, [sp, #7]
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
  return(ft5336_handle.i2cInitialized);
 80096b0:	4b0c      	ldr	r3, [pc, #48]	@ (80096e4 <ft5336_ReadID+0x3c>)
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 80096b2:	781a      	ldrb	r2, [r3, #0]
 80096b4:	b90a      	cbnz	r2, 80096ba <ft5336_ReadID+0x12>
  {
    /* Initialize TS IO BUS layer (I2C) */
    //TS_IO_Init();

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 80096b6:	2201      	movs	r2, #1
 80096b8:	701a      	strb	r2, [r3, #0]
{
 80096ba:	2403      	movs	r4, #3
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 80096bc:	b2c5      	uxtb	r5, r0
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80096be:	3c01      	subs	r4, #1
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 80096c0:	21a8      	movs	r1, #168	@ 0xa8
 80096c2:	4628      	mov	r0, r5
 80096c4:	f7fa f830 	bl	8003728 <TS_IO_Read>
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80096c8:	f014 04ff 	ands.w	r4, r4, #255	@ 0xff
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 80096cc:	f88d 0007 	strb.w	r0, [sp, #7]
    if(ucReadId == FT5336_ID_VALUE)
 80096d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80096d4:	b2db      	uxtb	r3, r3
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80096d6:	d001      	beq.n	80096dc <ft5336_ReadID+0x34>
 80096d8:	2b51      	cmp	r3, #81	@ 0x51
 80096da:	d1f0      	bne.n	80096be <ft5336_ReadID+0x16>
  return (ucReadId);
 80096dc:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 80096e0:	b003      	add	sp, #12
 80096e2:	bd30      	pop	{r4, r5, pc}
 80096e4:	20016bd6 	.word	0x20016bd6

080096e8 <ft5336_TS_DetectTouch>:
{
 80096e8:	b513      	push	{r0, r1, r4, lr}
  volatile uint8_t nbTouch = 0;
 80096ea:	2400      	movs	r4, #0
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 80096ec:	2102      	movs	r1, #2
 80096ee:	b2c0      	uxtb	r0, r0
  volatile uint8_t nbTouch = 0;
 80096f0:	f88d 4007 	strb.w	r4, [sp, #7]
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 80096f4:	f7fa f818 	bl	8003728 <TS_IO_Read>
 80096f8:	f88d 0007 	strb.w	r0, [sp, #7]
  nbTouch &= FT5336_TD_STAT_MASK;
 80096fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009700:	f003 030f 	and.w	r3, r3, #15
 8009704:	f88d 3007 	strb.w	r3, [sp, #7]
  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 8009708:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800970c:	2b05      	cmp	r3, #5
 800970e:	d901      	bls.n	8009714 <ft5336_TS_DetectTouch+0x2c>
    nbTouch = 0;
 8009710:	f88d 4007 	strb.w	r4, [sp, #7]
  ft5336_handle.currActiveTouchNb = nbTouch;
 8009714:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8009718:	4b03      	ldr	r3, [pc, #12]	@ (8009728 <ft5336_TS_DetectTouch+0x40>)
  return(nbTouch);
 800971a:	f89d 0007 	ldrb.w	r0, [sp, #7]
  ft5336_handle.currActiveTouchNb = nbTouch;
 800971e:	705a      	strb	r2, [r3, #1]
  ft5336_handle.currActiveTouchIdx = 0;
 8009720:	2200      	movs	r2, #0
 8009722:	709a      	strb	r2, [r3, #2]
}
 8009724:	b002      	add	sp, #8
 8009726:	bd10      	pop	{r4, pc}
 8009728:	20016bd6 	.word	0x20016bd6

0800972c <ft5336_TS_GetXY>:
{
 800972c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8009730:	4c2f      	ldr	r4, [pc, #188]	@ (80097f0 <ft5336_TS_GetXY+0xc4>)
{
 8009732:	4615      	mov	r5, r2
  volatile uint8_t ucReadData = 0;
 8009734:	f04f 0800 	mov.w	r8, #0
{
 8009738:	460f      	mov	r7, r1
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 800973a:	78a3      	ldrb	r3, [r4, #2]
 800973c:	7862      	ldrb	r2, [r4, #1]
  volatile uint8_t ucReadData = 0;
 800973e:	f88d 8007 	strb.w	r8, [sp, #7]
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8009742:	429a      	cmp	r2, r3
 8009744:	d94d      	bls.n	80097e2 <ft5336_TS_GetXY+0xb6>
    switch(ft5336_handle.currActiveTouchIdx)
 8009746:	2b09      	cmp	r3, #9
 8009748:	d84e      	bhi.n	80097e8 <ft5336_TS_GetXY+0xbc>
 800974a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800974e:	005b      	lsls	r3, r3, #1
 8009750:	b2db      	uxtb	r3, r3
 8009752:	1d19      	adds	r1, r3, #4
 8009754:	f103 0b03 	add.w	fp, r3, #3
 8009758:	f103 0a06 	add.w	sl, r3, #6
 800975c:	3305      	adds	r3, #5
 800975e:	b2c9      	uxtb	r1, r1
 8009760:	fa5f fb8b 	uxtb.w	fp, fp
 8009764:	fa5f fa8a 	uxtb.w	sl, sl
 8009768:	fa5f f883 	uxtb.w	r8, r3
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 800976c:	b2c6      	uxtb	r6, r0
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 800976e:	f8df 9084 	ldr.w	r9, [pc, #132]	@ 80097f4 <ft5336_TS_GetXY+0xc8>
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8009772:	4630      	mov	r0, r6
 8009774:	f7f9 ffd8 	bl	8003728 <TS_IO_Read>
 8009778:	f88d 0007 	strb.w	r0, [sp, #7]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 800977c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8009780:	4659      	mov	r1, fp
 8009782:	4630      	mov	r0, r6
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8009784:	f8a9 3000 	strh.w	r3, [r9]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8009788:	f7f9 ffce 	bl	8003728 <TS_IO_Read>
 800978c:	f88d 0007 	strb.w	r0, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8009790:	4651      	mov	r1, sl
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8009792:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8009796:	4630      	mov	r0, r6
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8009798:	f8b9 2000 	ldrh.w	r2, [r9]
 800979c:	021b      	lsls	r3, r3, #8
 800979e:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80097a2:	4313      	orrs	r3, r2
    *X = coord;
 80097a4:	803b      	strh	r3, [r7, #0]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80097a6:	f8a9 3000 	strh.w	r3, [r9]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 80097aa:	f7f9 ffbd 	bl	8003728 <TS_IO_Read>
 80097ae:	f88d 0007 	strb.w	r0, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 80097b2:	4641      	mov	r1, r8
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80097b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 80097b8:	4630      	mov	r0, r6
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80097ba:	f8a9 3000 	strh.w	r3, [r9]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 80097be:	f7f9 ffb3 	bl	8003728 <TS_IO_Read>
 80097c2:	f88d 0007 	strb.w	r0, [sp, #7]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80097c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80097ca:	f8b9 2000 	ldrh.w	r2, [r9]
 80097ce:	021b      	lsls	r3, r3, #8
 80097d0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80097d4:	4313      	orrs	r3, r2
 80097d6:	f8a9 3000 	strh.w	r3, [r9]
    *Y = coord;
 80097da:	802b      	strh	r3, [r5, #0]
    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 80097dc:	78a3      	ldrb	r3, [r4, #2]
 80097de:	3301      	adds	r3, #1
 80097e0:	70a3      	strb	r3, [r4, #2]
}
 80097e2:	b003      	add	sp, #12
 80097e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 80097e8:	46c2      	mov	sl, r8
 80097ea:	46c3      	mov	fp, r8
 80097ec:	4641      	mov	r1, r8
 80097ee:	e7bd      	b.n	800976c <ft5336_TS_GetXY+0x40>
 80097f0:	20016bd6 	.word	0x20016bd6
 80097f4:	20016bd4 	.word	0x20016bd4

080097f8 <ft5336_TS_EnableIT>:
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80097f8:	2201      	movs	r2, #1
 80097fa:	21a4      	movs	r1, #164	@ 0xa4
 80097fc:	b2c0      	uxtb	r0, r0
 80097fe:	f7f9 bf79 	b.w	80036f4 <TS_IO_Write>

08009802 <ft5336_TS_DisableIT>:
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8009802:	2200      	movs	r2, #0
 8009804:	21a4      	movs	r1, #164	@ 0xa4
 8009806:	b2c0      	uxtb	r0, r0
 8009808:	f7f9 bf74 	b.w	80036f4 <TS_IO_Write>

0800980c <ft5336_TS_Start>:
  ft5336_TS_DisableIT(DeviceAddr);
 800980c:	f7ff bff9 	b.w	8009802 <ft5336_TS_DisableIT>

08009810 <ft5336_TS_ClearIT>:
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
 8009810:	4770      	bx	lr
	...

08009814 <ft5336_Init>:
  return(ft5336_handle.i2cInitialized);
 8009814:	4b02      	ldr	r3, [pc, #8]	@ (8009820 <ft5336_Init+0xc>)
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8009816:	781a      	ldrb	r2, [r3, #0]
 8009818:	b90a      	cbnz	r2, 800981e <ft5336_Init+0xa>
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 800981a:	2201      	movs	r2, #1
 800981c:	701a      	strb	r2, [r3, #0]
}
 800981e:	4770      	bx	lr
 8009820:	20016bd6 	.word	0x20016bd6

08009824 <HAL_Init>:
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009824:	4a07      	ldr	r2, [pc, #28]	@ (8009844 <HAL_Init+0x20>)
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009826:	2003      	movs	r0, #3
{
 8009828:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800982a:	6813      	ldr	r3, [r2, #0]
 800982c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009830:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009832:	f000 f82d 	bl	8009890 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009836:	200f      	movs	r0, #15
 8009838:	f7f9 fb7a 	bl	8002f30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800983c:	f7f8 fee6 	bl	800260c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8009840:	2000      	movs	r0, #0
 8009842:	bd08      	pop	{r3, pc}
 8009844:	40023c00 	.word	0x40023c00

08009848 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8009848:	4a03      	ldr	r2, [pc, #12]	@ (8009858 <HAL_IncTick+0x10>)
 800984a:	4b04      	ldr	r3, [pc, #16]	@ (800985c <HAL_IncTick+0x14>)
 800984c:	6811      	ldr	r1, [r2, #0]
 800984e:	781b      	ldrb	r3, [r3, #0]
 8009850:	440b      	add	r3, r1
 8009852:	6013      	str	r3, [r2, #0]
}
 8009854:	4770      	bx	lr
 8009856:	bf00      	nop
 8009858:	20016bdc 	.word	0x20016bdc
 800985c:	20007a90 	.word	0x20007a90

08009860 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8009860:	4b01      	ldr	r3, [pc, #4]	@ (8009868 <HAL_GetTick+0x8>)
 8009862:	6818      	ldr	r0, [r3, #0]
}
 8009864:	4770      	bx	lr
 8009866:	bf00      	nop
 8009868:	20016bdc 	.word	0x20016bdc

0800986c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800986c:	b538      	push	{r3, r4, r5, lr}
 800986e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8009870:	f7ff fff6 	bl	8009860 <HAL_GetTick>
 8009874:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009876:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8009878:	bf1e      	ittt	ne
 800987a:	4b04      	ldrne	r3, [pc, #16]	@ (800988c <HAL_Delay+0x20>)
 800987c:	781b      	ldrbne	r3, [r3, #0]
 800987e:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8009880:	f7ff ffee 	bl	8009860 <HAL_GetTick>
 8009884:	1b43      	subs	r3, r0, r5
 8009886:	42a3      	cmp	r3, r4
 8009888:	d3fa      	bcc.n	8009880 <HAL_Delay+0x14>
  {
  }
}
 800988a:	bd38      	pop	{r3, r4, r5, pc}
 800988c:	20007a90 	.word	0x20007a90

08009890 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009890:	4907      	ldr	r1, [pc, #28]	@ (80098b0 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009892:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009894:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009896:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800989a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800989e:	0412      	lsls	r2, r2, #16
 80098a0:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80098a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80098a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80098a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80098ac:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80098ae:	4770      	bx	lr
 80098b0:	e000ed00 	.word	0xe000ed00

080098b4 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80098b4:	4b16      	ldr	r3, [pc, #88]	@ (8009910 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80098b6:	b530      	push	{r4, r5, lr}
 80098b8:	68dc      	ldr	r4, [r3, #12]
 80098ba:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80098be:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80098c2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80098c4:	2b04      	cmp	r3, #4
 80098c6:	bf28      	it	cs
 80098c8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80098ca:	2d06      	cmp	r5, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80098cc:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80098d0:	bf8c      	ite	hi
 80098d2:	3c03      	subhi	r4, #3
 80098d4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80098d6:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 80098da:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80098dc:	fa05 f504 	lsl.w	r5, r5, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80098e0:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80098e4:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80098e8:	fa03 f304 	lsl.w	r3, r3, r4
 80098ec:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80098f0:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80098f4:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 80098f6:	db06      	blt.n	8009906 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80098f8:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 80098fc:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8009900:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8009904:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009906:	f000 000f 	and.w	r0, r0, #15
 800990a:	4a02      	ldr	r2, [pc, #8]	@ (8009914 <HAL_NVIC_SetPriority+0x60>)
 800990c:	5413      	strb	r3, [r2, r0]
 800990e:	e7f9      	b.n	8009904 <HAL_NVIC_SetPriority+0x50>
 8009910:	e000ed00 	.word	0xe000ed00
 8009914:	e000ed14 	.word	0xe000ed14

08009918 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8009918:	2800      	cmp	r0, #0
 800991a:	db07      	blt.n	800992c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800991c:	0941      	lsrs	r1, r0, #5
 800991e:	2301      	movs	r3, #1
 8009920:	f000 001f 	and.w	r0, r0, #31
 8009924:	4a02      	ldr	r2, [pc, #8]	@ (8009930 <HAL_NVIC_EnableIRQ+0x18>)
 8009926:	4083      	lsls	r3, r0
 8009928:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800992c:	4770      	bx	lr
 800992e:	bf00      	nop
 8009930:	e000e100 	.word	0xe000e100

08009934 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8009934:	2800      	cmp	r0, #0
 8009936:	db0c      	blt.n	8009952 <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009938:	0943      	lsrs	r3, r0, #5
 800993a:	2201      	movs	r2, #1
 800993c:	f000 001f 	and.w	r0, r0, #31
 8009940:	4904      	ldr	r1, [pc, #16]	@ (8009954 <HAL_NVIC_DisableIRQ+0x20>)
 8009942:	3320      	adds	r3, #32
 8009944:	4082      	lsls	r2, r0
 8009946:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800994a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800994e:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8009952:	4770      	bx	lr
 8009954:	e000e100 	.word	0xe000e100

08009958 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8009958:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800995c:	4b04      	ldr	r3, [pc, #16]	@ (8009970 <HAL_MPU_Disable+0x18>)
 800995e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009960:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8009964:	625a      	str	r2, [r3, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8009966:	2200      	movs	r2, #0
 8009968:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
}
 800996c:	4770      	bx	lr
 800996e:	bf00      	nop
 8009970:	e000ed00 	.word	0xe000ed00

08009974 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8009974:	4b06      	ldr	r3, [pc, #24]	@ (8009990 <HAL_MPU_Enable+0x1c>)
 8009976:	f040 0001 	orr.w	r0, r0, #1
 800997a:	f8c3 0094 	str.w	r0, [r3, #148]	@ 0x94
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800997e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009980:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8009984:	625a      	str	r2, [r3, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8009986:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800998a:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800998e:	4770      	bx	lr
 8009990:	e000ed00 	.word	0xe000ed00

08009994 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8009994:	7843      	ldrb	r3, [r0, #1]
 8009996:	4a14      	ldr	r2, [pc, #80]	@ (80099e8 <HAL_MPU_ConfigRegion+0x54>)
{
 8009998:	b510      	push	{r4, lr}
  MPU->RNR = MPU_Init->Number;
 800999a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  if ((MPU_Init->Enable) != RESET)
 800999e:	7801      	ldrb	r1, [r0, #0]
 80099a0:	b1e9      	cbz	r1, 80099de <HAL_MPU_ConfigRegion+0x4a>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 80099a2:	6843      	ldr	r3, [r0, #4]
 80099a4:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80099a8:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80099aa:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80099ac:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80099ae:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80099b2:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80099b4:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80099b6:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80099ba:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80099bc:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80099c0:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80099c2:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80099c6:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80099c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80099cc:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80099ce:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80099d2:	7a01      	ldrb	r1, [r0, #8]
 80099d4:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80099d8:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80099dc:	bd10      	pop	{r4, pc}
    MPU->RBAR = 0x00;
 80099de:	f8c2 109c 	str.w	r1, [r2, #156]	@ 0x9c
    MPU->RASR = 0x00;
 80099e2:	f8c2 10a0 	str.w	r1, [r2, #160]	@ 0xa0
}
 80099e6:	e7f9      	b.n	80099dc <HAL_MPU_ConfigRegion+0x48>
 80099e8:	e000ed00 	.word	0xe000ed00

080099ec <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80099ec:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80099ee:	4604      	mov	r4, r0
 80099f0:	b908      	cbnz	r0, 80099f6 <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 80099f2:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 80099f4:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 80099f6:	7f43      	ldrb	r3, [r0, #29]
 80099f8:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80099fc:	b913      	cbnz	r3, 8009a04 <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 80099fe:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8009a00:	f7f8 fe22 	bl	8002648 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 8009a04:	2302      	movs	r3, #2
 8009a06:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8009a08:	7923      	ldrb	r3, [r4, #4]
 8009a0a:	b9e3      	cbnz	r3, 8009a46 <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8009a0c:	6823      	ldr	r3, [r4, #0]
 8009a0e:	4a13      	ldr	r2, [pc, #76]	@ (8009a5c <HAL_CRC_Init+0x70>)
 8009a10:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8009a12:	689a      	ldr	r2, [r3, #8]
 8009a14:	f022 0218 	bic.w	r2, r2, #24
 8009a18:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8009a1a:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8009a1c:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8009a1e:	b9d2      	cbnz	r2, 8009a56 <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8009a20:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8009a24:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 8009a26:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8009a28:	689a      	ldr	r2, [r3, #8]
 8009a2a:	6961      	ldr	r1, [r4, #20]
 8009a2c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8009a30:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8009a32:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8009a34:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8009a36:	689a      	ldr	r2, [r3, #8]
 8009a38:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009a3c:	430a      	orrs	r2, r1
 8009a3e:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8009a40:	2301      	movs	r3, #1
 8009a42:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 8009a44:	e7d6      	b.n	80099f4 <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8009a46:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8009a4a:	4620      	mov	r0, r4
 8009a4c:	f000 f808 	bl	8009a60 <HAL_CRCEx_Polynomial_Set>
 8009a50:	2800      	cmp	r0, #0
 8009a52:	d0e2      	beq.n	8009a1a <HAL_CRC_Init+0x2e>
 8009a54:	e7cd      	b.n	80099f2 <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8009a56:	6922      	ldr	r2, [r4, #16]
 8009a58:	e7e4      	b.n	8009a24 <HAL_CRC_Init+0x38>
 8009a5a:	bf00      	nop
 8009a5c:	04c11db7 	.word	0x04c11db7

08009a60 <HAL_CRCEx_Polynomial_Set>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8009a60:	231f      	movs	r3, #31
{
 8009a62:	b510      	push	{r4, lr}
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8009a64:	3b01      	subs	r3, #1
 8009a66:	d31d      	bcc.n	8009aa4 <HAL_CRCEx_Polynomial_Set+0x44>
 8009a68:	fa21 f403 	lsr.w	r4, r1, r3
 8009a6c:	07e4      	lsls	r4, r4, #31
 8009a6e:	d5f9      	bpl.n	8009a64 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 8009a70:	2a10      	cmp	r2, #16
 8009a72:	d013      	beq.n	8009a9c <HAL_CRCEx_Polynomial_Set+0x3c>
 8009a74:	2a10      	cmp	r2, #16
 8009a76:	d804      	bhi.n	8009a82 <HAL_CRCEx_Polynomial_Set+0x22>
 8009a78:	b13a      	cbz	r2, 8009a8a <HAL_CRCEx_Polynomial_Set+0x2a>
 8009a7a:	2a08      	cmp	r2, #8
 8009a7c:	d010      	beq.n	8009aa0 <HAL_CRCEx_Polynomial_Set+0x40>
 8009a7e:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 8009a80:	e00b      	b.n	8009a9a <HAL_CRCEx_Polynomial_Set+0x3a>
  switch (PolyLength)
 8009a82:	2a18      	cmp	r2, #24
 8009a84:	d1fb      	bne.n	8009a7e <HAL_CRCEx_Polynomial_Set+0x1e>
      if (msb >= HAL_CRC_LENGTH_7B)
 8009a86:	2b06      	cmp	r3, #6
      if (msb >= HAL_CRC_LENGTH_16B)
 8009a88:	d8f9      	bhi.n	8009a7e <HAL_CRCEx_Polynomial_Set+0x1e>
    WRITE_REG(hcrc->Instance->POL, Pol);
 8009a8a:	6800      	ldr	r0, [r0, #0]
 8009a8c:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8009a8e:	6883      	ldr	r3, [r0, #8]
 8009a90:	f023 0318 	bic.w	r3, r3, #24
 8009a94:	4313      	orrs	r3, r2
 8009a96:	6083      	str	r3, [r0, #8]
 8009a98:	2000      	movs	r0, #0
}
 8009a9a:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 8009a9c:	2b07      	cmp	r3, #7
 8009a9e:	e7f3      	b.n	8009a88 <HAL_CRCEx_Polynomial_Set+0x28>
      if (msb >= HAL_CRC_LENGTH_16B)
 8009aa0:	2b0f      	cmp	r3, #15
 8009aa2:	e7f1      	b.n	8009a88 <HAL_CRCEx_Polynomial_Set+0x28>
  switch (PolyLength)
 8009aa4:	2a10      	cmp	r2, #16
 8009aa6:	d1e5      	bne.n	8009a74 <HAL_CRCEx_Polynomial_Set+0x14>
 8009aa8:	e7e9      	b.n	8009a7e <HAL_CRCEx_Polynomial_Set+0x1e>

08009aaa <DCMI_DMAXferCplt>:
* @param  hdma pointer to a DMA_HandleTypeDef structure that contains
*                the configuration information for the specified DMA module.
* @retval None
*/
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8009aaa:	b510      	push	{r4, lr}
  uint32_t tmp = 0;

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009aac:	6b84      	ldr	r4, [r0, #56]	@ 0x38

  if (hdcmi->XferCount != 0)
  {
    /* Update memory 0 address location */
    tmp = ((hdcmi->DMA_Handle->Instance->CR) & DMA_SxCR_CT);
 8009aae:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
  if (hdcmi->XferCount != 0)
 8009ab0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
    tmp = ((hdcmi->DMA_Handle->Instance->CR) & DMA_SxCR_CT);
 8009ab2:	6803      	ldr	r3, [r0, #0]
  if (hdcmi->XferCount != 0)
 8009ab4:	b332      	cbz	r2, 8009b04 <DCMI_DMAXferCplt+0x5a>
    tmp = ((hdcmi->DMA_Handle->Instance->CR) & DMA_SxCR_CT);
 8009ab6:	6819      	ldr	r1, [r3, #0]
    if (((hdcmi->XferCount % 2) == 0) && (tmp != 0))
 8009ab8:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8009aba:	f012 0201 	ands.w	r2, r2, #1
 8009abe:	d11a      	bne.n	8009af6 <DCMI_DMAXferCplt+0x4c>
 8009ac0:	0309      	lsls	r1, r1, #12
 8009ac2:	d518      	bpl.n	8009af6 <DCMI_DMAXferCplt+0x4c>
    {
      tmp = hdcmi->DMA_Handle->Instance->M0AR;
 8009ac4:	68db      	ldr	r3, [r3, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8 * hdcmi->XferSize)), MEMORY0);
 8009ac6:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
    }
    /* Update memory 1 address location */
    else if ((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0)
    {
      tmp = hdcmi->DMA_Handle->Instance->M1AR;
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8 * hdcmi->XferSize)), MEMORY1);
 8009ac8:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8009acc:	f001 f98e 	bl	800adec <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8009ad0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8009ad2:	3b01      	subs	r3, #1
 8009ad4:	63a3      	str	r3, [r4, #56]	@ 0x38
    hdcmi->DMA_Handle->Instance->M1AR = (tmp + (4 * hdcmi->XferSize));
    hdcmi->XferCount = hdcmi->XferTransferNumber;
  }

  /* Check if the frame is transferred */
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 8009ad6:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8009ad8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009ada:	429a      	cmp	r2, r3
 8009adc:	d10a      	bne.n	8009af4 <DCMI_DMAXferCplt+0x4a>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8009ade:	6823      	ldr	r3, [r4, #0]
 8009ae0:	68da      	ldr	r2, [r3, #12]
 8009ae2:	f042 0201 	orr.w	r2, r2, #1
 8009ae6:	60da      	str	r2, [r3, #12]

    /* When snapshot mode, set dcmi state to ready */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	079b      	lsls	r3, r3, #30
 8009aec:	d502      	bpl.n	8009af4 <DCMI_DMAXferCplt+0x4a>
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
 8009aee:	2301      	movs	r3, #1
 8009af0:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    }
  }
}
 8009af4:	bd10      	pop	{r4, pc}
    else if ((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0)
 8009af6:	681a      	ldr	r2, [r3, #0]
 8009af8:	0312      	lsls	r2, r2, #12
 8009afa:	d4ec      	bmi.n	8009ad6 <DCMI_DMAXferCplt+0x2c>
      tmp = hdcmi->DMA_Handle->Instance->M1AR;
 8009afc:	691b      	ldr	r3, [r3, #16]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8 * hdcmi->XferSize)), MEMORY1);
 8009afe:	2201      	movs	r2, #1
 8009b00:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8009b02:	e7e1      	b.n	8009ac8 <DCMI_DMAXferCplt+0x1e>
  else if ((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) != 0)
 8009b04:	681a      	ldr	r2, [r3, #0]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8009b06:	6c21      	ldr	r1, [r4, #64]	@ 0x40
  else if ((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) != 0)
 8009b08:	0310      	lsls	r0, r2, #12
 8009b0a:	d502      	bpl.n	8009b12 <DCMI_DMAXferCplt+0x68>
    hdcmi->DMA_Handle->Instance->M0AR = hdcmi->pBuffPtr;
 8009b0c:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8009b0e:	60da      	str	r2, [r3, #12]
 8009b10:	e7e1      	b.n	8009ad6 <DCMI_DMAXferCplt+0x2c>
  else if ((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0)
 8009b12:	681a      	ldr	r2, [r3, #0]
 8009b14:	0312      	lsls	r2, r2, #12
 8009b16:	d4de      	bmi.n	8009ad6 <DCMI_DMAXferCplt+0x2c>
    hdcmi->DMA_Handle->Instance->M1AR = (tmp + (4 * hdcmi->XferSize));
 8009b18:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8009b1a:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8009b1c:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8009b20:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8009b22:	63a1      	str	r1, [r4, #56]	@ 0x38
 8009b24:	e7d7      	b.n	8009ad6 <DCMI_DMAXferCplt+0x2c>
	...

08009b28 <HAL_DCMI_Init>:
{
 8009b28:	b538      	push	{r3, r4, r5, lr}
  if (hdcmi == NULL)
 8009b2a:	4604      	mov	r4, r0
 8009b2c:	2800      	cmp	r0, #0
 8009b2e:	d03f      	beq.n	8009bb0 <HAL_DCMI_Init+0x88>
  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8009b30:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 8009b34:	b90b      	cbnz	r3, 8009b3a <HAL_DCMI_Init+0x12>
    HAL_DCMI_MspInit(hdcmi);
 8009b36:	f7f8 fd9d 	bl	8002674 <HAL_DCMI_MspInit>
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8009b3a:	2302      	movs	r3, #2
 8009b3c:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8009b40:	69a3      	ldr	r3, [r4, #24]
 8009b42:	b10b      	cbz	r3, 8009b48 <HAL_DCMI_Init+0x20>
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8009b44:	2200      	movs	r2, #0
 8009b46:	6262      	str	r2, [r4, #36]	@ 0x24
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8009b48:	6822      	ldr	r2, [r4, #0]
 8009b4a:	491a      	ldr	r1, [pc, #104]	@ (8009bb4 <HAL_DCMI_Init+0x8c>)
 8009b4c:	6810      	ldr	r0, [r2, #0]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8009b4e:	6965      	ldr	r5, [r4, #20]
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8009b50:	4001      	ands	r1, r0
 8009b52:	6011      	str	r1, [r2, #0]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8009b54:	6861      	ldr	r1, [r4, #4]
 8009b56:	6810      	ldr	r0, [r2, #0]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8009b58:	430b      	orrs	r3, r1
  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8009b5a:	2910      	cmp	r1, #16
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8009b5c:	ea43 0305 	orr.w	r3, r3, r5
 8009b60:	68e5      	ldr	r5, [r4, #12]
 8009b62:	ea43 0305 	orr.w	r3, r3, r5
 8009b66:	6925      	ldr	r5, [r4, #16]
 8009b68:	ea43 0305 	orr.w	r3, r3, r5
 8009b6c:	68a5      	ldr	r5, [r4, #8]
 8009b6e:	ea43 0305 	orr.w	r3, r3, r5
 8009b72:	6a25      	ldr	r5, [r4, #32]
 8009b74:	ea43 0305 	orr.w	r3, r3, r5
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8009b78:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8009b7a:	ea43 0305 	orr.w	r3, r3, r5
 8009b7e:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 8009b80:	ea43 0305 	orr.w	r3, r3, r5
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8009b84:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 8009b86:	ea43 0305 	orr.w	r3, r3, r5
 8009b8a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8009b8c:	ea43 0305 	orr.w	r3, r3, r5
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8009b90:	ea43 0300 	orr.w	r3, r3, r0
 8009b94:	6013      	str	r3, [r2, #0]
  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8009b96:	d101      	bne.n	8009b9c <HAL_DCMI_Init+0x74>
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8009b98:	69e3      	ldr	r3, [r4, #28]
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8009b9a:	6193      	str	r3, [r2, #24]
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8009b9c:	68d3      	ldr	r3, [r2, #12]
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8009b9e:	2000      	movs	r0, #0
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8009ba0:	f043 031e 	orr.w	r3, r3, #30
 8009ba4:	60d3      	str	r3, [r2, #12]
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8009ba6:	2301      	movs	r3, #1
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8009ba8:	64e0      	str	r0, [r4, #76]	@ 0x4c
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8009baa:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
}
 8009bae:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8009bb0:	2001      	movs	r0, #1
 8009bb2:	e7fc      	b.n	8009bae <HAL_DCMI_Init+0x86>
 8009bb4:	ffe0f007 	.word	0xffe0f007

08009bb8 <HAL_DCMI_Start_DMA>:
{
 8009bb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009bba:	4604      	mov	r4, r0
  __HAL_LOCK(hdcmi);
 8009bbc:	f890 0034 	ldrb.w	r0, [r0, #52]	@ 0x34
{
 8009bc0:	4615      	mov	r5, r2
  __HAL_LOCK(hdcmi);
 8009bc2:	2801      	cmp	r0, #1
 8009bc4:	f04f 0002 	mov.w	r0, #2
 8009bc8:	d030      	beq.n	8009c2c <HAL_DCMI_Start_DMA+0x74>
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8009bca:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
  __HAL_LOCK(hdcmi);
 8009bce:	f04f 0c01 	mov.w	ip, #1
  __HAL_DCMI_ENABLE(hdcmi);
 8009bd2:	6820      	ldr	r0, [r4, #0]
  if (Length <= 0xFFFFU)
 8009bd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
  __HAL_LOCK(hdcmi);
 8009bd8:	f884 c034 	strb.w	ip, [r4, #52]	@ 0x34
  __HAL_DCMI_ENABLE(hdcmi);
 8009bdc:	6806      	ldr	r6, [r0, #0]
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8009bde:	f8df e098 	ldr.w	lr, [pc, #152]	@ 8009c78 <HAL_DCMI_Start_DMA+0xc0>
  __HAL_DCMI_ENABLE(hdcmi);
 8009be2:	f446 4680 	orr.w	r6, r6, #16384	@ 0x4000
 8009be6:	6006      	str	r6, [r0, #0]
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8009be8:	6806      	ldr	r6, [r0, #0]
 8009bea:	f026 0602 	bic.w	r6, r6, #2
 8009bee:	6006      	str	r6, [r0, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 8009bf0:	6806      	ldr	r6, [r0, #0]
 8009bf2:	ea46 0601 	orr.w	r6, r6, r1
 8009bf6:	4601      	mov	r1, r0
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8009bf8:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 8009bfa:	f841 6b28 	str.w	r6, [r1], #40
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8009bfe:	4e1d      	ldr	r6, [pc, #116]	@ (8009c74 <HAL_DCMI_Start_DMA+0xbc>)
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8009c00:	f8c0 e03c 	str.w	lr, [r0, #60]	@ 0x3c
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8009c04:	64c6      	str	r6, [r0, #76]	@ 0x4c
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8009c06:	f04f 0600 	mov.w	r6, #0
 8009c0a:	6506      	str	r6, [r0, #80]	@ 0x50
  hdcmi->XferCount = 0;
 8009c0c:	63a6      	str	r6, [r4, #56]	@ 0x38
  hdcmi->XferTransferNumber = 0;
 8009c0e:	6426      	str	r6, [r4, #64]	@ 0x40
  hdcmi->XferSize = 0;
 8009c10:	63e6      	str	r6, [r4, #60]	@ 0x3c
  hdcmi->pBuffPtr = 0;
 8009c12:	6466      	str	r6, [r4, #68]	@ 0x44
  if (Length <= 0xFFFFU)
 8009c14:	d20e      	bcs.n	8009c34 <HAL_DCMI_Start_DMA+0x7c>
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 8009c16:	f000 f927 	bl	8009e68 <HAL_DMA_Start_IT>
 8009c1a:	b948      	cbnz	r0, 8009c30 <HAL_DCMI_Start_DMA+0x78>
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8009c1c:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdcmi);
 8009c1e:	2000      	movs	r0, #0
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8009c20:	6813      	ldr	r3, [r2, #0]
 8009c22:	f043 0301 	orr.w	r3, r3, #1
 8009c26:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hdcmi);
 8009c28:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
}
 8009c2c:	b003      	add	sp, #12
 8009c2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8009c30:	2001      	movs	r0, #1
 8009c32:	e7fb      	b.n	8009c2c <HAL_DCMI_Start_DMA+0x74>
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8009c34:	f8c0 e044 	str.w	lr, [r0, #68]	@ 0x44
    hdcmi->XferCount = 1;
 8009c38:	f8c4 c038 	str.w	ip, [r4, #56]	@ 0x38
    hdcmi->pBuffPtr = pData;
 8009c3c:	6462      	str	r2, [r4, #68]	@ 0x44
    hdcmi->XferSize = Length;
 8009c3e:	63e3      	str	r3, [r4, #60]	@ 0x3c
    while (hdcmi->XferSize > 0xFFFFU)
 8009c40:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8009c42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009c46:	d20d      	bcs.n	8009c64 <HAL_DCMI_Start_DMA+0xac>
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 8009c48:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8009c4a:	3b02      	subs	r3, #2
 8009c4c:	63a3      	str	r3, [r4, #56]	@ 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8009c4e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8009c50:	6423      	str	r3, [r4, #64]	@ 0x40
    SecondMemAddress = (uint32_t)(pData + (4 * hdcmi->XferSize));
 8009c52:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
    if (HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize) != HAL_OK)
 8009c54:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8009c56:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8009c5a:	9200      	str	r2, [sp, #0]
 8009c5c:	462a      	mov	r2, r5
 8009c5e:	f000 fb77 	bl	800a350 <HAL_DMAEx_MultiBufferStart_IT>
 8009c62:	e7da      	b.n	8009c1a <HAL_DCMI_Start_DMA+0x62>
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 8009c64:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8009c66:	085b      	lsrs	r3, r3, #1
 8009c68:	63e3      	str	r3, [r4, #60]	@ 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 8009c6a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8009c6c:	005b      	lsls	r3, r3, #1
 8009c6e:	63a3      	str	r3, [r4, #56]	@ 0x38
 8009c70:	e7e6      	b.n	8009c40 <HAL_DCMI_Start_DMA+0x88>
 8009c72:	bf00      	nop
 8009c74:	08009c7f 	.word	0x08009c7f
 8009c78:	08009aab 	.word	0x08009aab

08009c7c <HAL_DCMI_ErrorCallback>:
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
 8009c7c:	4770      	bx	lr

08009c7e <DCMI_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009c7e:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 8009c80:	b508      	push	{r3, lr}

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8009c82:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8009c84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c86:	2b02      	cmp	r3, #2
 8009c88:	d006      	beq.n	8009c98 <DCMI_DMAError+0x1a>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8009c90:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8009c92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c96:	64c3      	str	r3, [r0, #76]	@ 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8009c98:	f7ff fff0 	bl	8009c7c <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */

}
 8009c9c:	bd08      	pop	{r3, pc}

08009c9e <HAL_DCMI_LineEventCallback>:
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
 8009c9e:	4770      	bx	lr

08009ca0 <HAL_DCMI_VsyncEventCallback>:
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
 8009ca0:	4770      	bx	lr

08009ca2 <HAL_DCMI_FrameEventCallback>:
__weak void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
 8009ca2:	4770      	bx	lr

08009ca4 <HAL_DCMI_IRQHandler>:
{
 8009ca4:	b538      	push	{r3, r4, r5, lr}
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8009ca6:	6803      	ldr	r3, [r0, #0]
{
 8009ca8:	4604      	mov	r4, r0
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8009caa:	691d      	ldr	r5, [r3, #16]
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8009cac:	0769      	lsls	r1, r5, #29
 8009cae:	d50c      	bpl.n	8009cca <HAL_DCMI_IRQHandler+0x26>
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8009cb0:	2204      	movs	r2, #4
 8009cb2:	615a      	str	r2, [r3, #20]
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8009cb4:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8009cb6:	f043 0302 	orr.w	r3, r3, #2
 8009cba:	64c3      	str	r3, [r0, #76]	@ 0x4c
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8009cbc:	4b1f      	ldr	r3, [pc, #124]	@ (8009d3c <HAL_DCMI_IRQHandler+0x98>)
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8009cbe:	f880 2035 	strb.w	r2, [r0, #53]	@ 0x35
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8009cc2:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 8009cc4:	6503      	str	r3, [r0, #80]	@ 0x50
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8009cc6:	f000 f94a 	bl	8009f5e <HAL_DMA_Abort_IT>
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8009cca:	07aa      	lsls	r2, r5, #30
 8009ccc:	d512      	bpl.n	8009cf4 <HAL_DCMI_IRQHandler+0x50>
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8009cce:	6823      	ldr	r3, [r4, #0]
 8009cd0:	2202      	movs	r2, #2
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8009cd2:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8009cd4:	615a      	str	r2, [r3, #20]
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8009cd6:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8009cd8:	f043 0301 	orr.w	r3, r3, #1
 8009cdc:	64e3      	str	r3, [r4, #76]	@ 0x4c
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8009cde:	2304      	movs	r3, #4
 8009ce0:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8009ce4:	4b15      	ldr	r3, [pc, #84]	@ (8009d3c <HAL_DCMI_IRQHandler+0x98>)
 8009ce6:	6503      	str	r3, [r0, #80]	@ 0x50
    if (HAL_DMA_Abort_IT(hdcmi->DMA_Handle) != HAL_OK)
 8009ce8:	f000 f939 	bl	8009f5e <HAL_DMA_Abort_IT>
 8009cec:	b110      	cbz	r0, 8009cf4 <HAL_DCMI_IRQHandler+0x50>
      DCMI_DMAError(hdcmi->DMA_Handle);
 8009cee:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 8009cf0:	f7ff ffc5 	bl	8009c7e <DCMI_DMAError>
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8009cf4:	06eb      	lsls	r3, r5, #27
 8009cf6:	d505      	bpl.n	8009d04 <HAL_DCMI_IRQHandler+0x60>
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8009cf8:	6823      	ldr	r3, [r4, #0]
 8009cfa:	2210      	movs	r2, #16
    HAL_DCMI_LineEventCallback(hdcmi);
 8009cfc:	4620      	mov	r0, r4
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8009cfe:	615a      	str	r2, [r3, #20]
    HAL_DCMI_LineEventCallback(hdcmi);
 8009d00:	f7ff ffcd 	bl	8009c9e <HAL_DCMI_LineEventCallback>
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8009d04:	0728      	lsls	r0, r5, #28
 8009d06:	d505      	bpl.n	8009d14 <HAL_DCMI_IRQHandler+0x70>
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8009d08:	6823      	ldr	r3, [r4, #0]
 8009d0a:	2208      	movs	r2, #8
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8009d0c:	4620      	mov	r0, r4
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8009d0e:	615a      	str	r2, [r3, #20]
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8009d10:	f7ff ffc6 	bl	8009ca0 <HAL_DCMI_VsyncEventCallback>
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8009d14:	07e9      	lsls	r1, r5, #31
 8009d16:	d510      	bpl.n	8009d3a <HAL_DCMI_IRQHandler+0x96>
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8009d18:	6823      	ldr	r3, [r4, #0]
 8009d1a:	681a      	ldr	r2, [r3, #0]
 8009d1c:	0792      	lsls	r2, r2, #30
 8009d1e:	d503      	bpl.n	8009d28 <HAL_DCMI_IRQHandler+0x84>
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8009d20:	68da      	ldr	r2, [r3, #12]
 8009d22:	f022 021e 	bic.w	r2, r2, #30
 8009d26:	60da      	str	r2, [r3, #12]
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8009d28:	68da      	ldr	r2, [r3, #12]
    HAL_DCMI_FrameEventCallback(hdcmi);
 8009d2a:	4620      	mov	r0, r4
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8009d2c:	f022 0201 	bic.w	r2, r2, #1
 8009d30:	60da      	str	r2, [r3, #12]
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8009d32:	2201      	movs	r2, #1
 8009d34:	615a      	str	r2, [r3, #20]
    HAL_DCMI_FrameEventCallback(hdcmi);
 8009d36:	f7ff ffb4 	bl	8009ca2 <HAL_DCMI_FrameEventCallback>
}
 8009d3a:	bd38      	pop	{r3, r4, r5, pc}
 8009d3c:	08009c7f 	.word	0x08009c7f

08009d40 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8009d40:	6803      	ldr	r3, [r0, #0]
{
 8009d42:	4602      	mov	r2, r0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8009d44:	2018      	movs	r0, #24
 8009d46:	b2d9      	uxtb	r1, r3
 8009d48:	3910      	subs	r1, #16
 8009d4a:	fbb1 f0f0 	udiv	r0, r1, r0
{
 8009d4e:	b510      	push	{r4, lr}
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8009d50:	4c05      	ldr	r4, [pc, #20]	@ (8009d68 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8009d52:	295f      	cmp	r1, #95	@ 0x5f
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8009d54:	5c20      	ldrb	r0, [r4, r0]
 8009d56:	65d0      	str	r0, [r2, #92]	@ 0x5c
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8009d58:	f423 707f 	bic.w	r0, r3, #1020	@ 0x3fc
 8009d5c:	f020 0003 	bic.w	r0, r0, #3
 8009d60:	bf88      	it	hi
 8009d62:	3004      	addhi	r0, #4
 8009d64:	6590      	str	r0, [r2, #88]	@ 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8009d66:	bd10      	pop	{r4, pc}
 8009d68:	080412f5 	.word	0x080412f5

08009d6c <HAL_DMA_Init>:
{
 8009d6c:	b570      	push	{r4, r5, r6, lr}
 8009d6e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8009d70:	f7ff fd76 	bl	8009860 <HAL_GetTick>
 8009d74:	4605      	mov	r5, r0
  if(hdma == NULL)
 8009d76:	2c00      	cmp	r4, #0
 8009d78:	d060      	beq.n	8009e3c <HAL_DMA_Init+0xd0>
  hdma->State = HAL_DMA_STATE_BUSY;
 8009d7a:	2302      	movs	r3, #2
  __HAL_DMA_DISABLE(hdma);
 8009d7c:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8009d7e:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 8009d82:	2300      	movs	r3, #0
 8009d84:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  __HAL_DMA_DISABLE(hdma);
 8009d88:	6813      	ldr	r3, [r2, #0]
 8009d8a:	f023 0301 	bic.w	r3, r3, #1
 8009d8e:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009d90:	6822      	ldr	r2, [r4, #0]
 8009d92:	6813      	ldr	r3, [r2, #0]
 8009d94:	07d8      	lsls	r0, r3, #31
 8009d96:	d42e      	bmi.n	8009df6 <HAL_DMA_Init+0x8a>
  tmp = hdma->Instance->CR;
 8009d98:	6813      	ldr	r3, [r2, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8009d9a:	4832      	ldr	r0, [pc, #200]	@ (8009e64 <HAL_DMA_Init+0xf8>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009d9c:	69a1      	ldr	r1, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8009d9e:	4018      	ands	r0, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009da0:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8009da4:	432b      	orrs	r3, r5
 8009da6:	68e5      	ldr	r5, [r4, #12]
 8009da8:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009daa:	6925      	ldr	r5, [r4, #16]
 8009dac:	432b      	orrs	r3, r5
 8009dae:	6965      	ldr	r5, [r4, #20]
 8009db0:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009db2:	69e5      	ldr	r5, [r4, #28]
 8009db4:	430b      	orrs	r3, r1
 8009db6:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8009db8:	6a25      	ldr	r5, [r4, #32]
 8009dba:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009dbc:	4303      	orrs	r3, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009dbe:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8009dc0:	2804      	cmp	r0, #4
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8009dc2:	bf02      	ittt	eq
 8009dc4:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	@ 0x2c
 8009dc8:	4335      	orreq	r5, r6
 8009dca:	432b      	orreq	r3, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009dcc:	2804      	cmp	r0, #4
  hdma->Instance->CR = tmp;  
 8009dce:	6013      	str	r3, [r2, #0]
  tmp = hdma->Instance->FCR;
 8009dd0:	6953      	ldr	r3, [r2, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8009dd2:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8009dd6:	ea43 0300 	orr.w	r3, r3, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009dda:	d135      	bne.n	8009e48 <HAL_DMA_Init+0xdc>
    tmp |= hdma->Init.FIFOThreshold;
 8009ddc:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8009dde:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8009de0:	4303      	orrs	r3, r0
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8009de2:	b38d      	cbz	r5, 8009e48 <HAL_DMA_Init+0xdc>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009de4:	b991      	cbnz	r1, 8009e0c <HAL_DMA_Init+0xa0>
  {
    switch (tmp)
 8009de6:	2801      	cmp	r0, #1
 8009de8:	d020      	beq.n	8009e2c <HAL_DMA_Init+0xc0>
 8009dea:	f030 0102 	bics.w	r1, r0, #2
 8009dee:	d12b      	bne.n	8009e48 <HAL_DMA_Init+0xdc>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009df0:	01e9      	lsls	r1, r5, #7
 8009df2:	d529      	bpl.n	8009e48 <HAL_DMA_Init+0xdc>
 8009df4:	e01d      	b.n	8009e32 <HAL_DMA_Init+0xc6>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009df6:	f7ff fd33 	bl	8009860 <HAL_GetTick>
 8009dfa:	1b40      	subs	r0, r0, r5
 8009dfc:	2805      	cmp	r0, #5
 8009dfe:	d9c7      	bls.n	8009d90 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009e00:	2320      	movs	r3, #32
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8009e02:	2003      	movs	r0, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009e04:	6563      	str	r3, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8009e06:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
}
 8009e0a:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009e0c:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 8009e10:	d116      	bne.n	8009e40 <HAL_DMA_Init+0xd4>
    switch (tmp)
 8009e12:	2803      	cmp	r0, #3
 8009e14:	d818      	bhi.n	8009e48 <HAL_DMA_Init+0xdc>
 8009e16:	a101      	add	r1, pc, #4	@ (adr r1, 8009e1c <HAL_DMA_Init+0xb0>)
 8009e18:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
 8009e1c:	08009e33 	.word	0x08009e33
 8009e20:	08009df1 	.word	0x08009df1
 8009e24:	08009e33 	.word	0x08009e33
 8009e28:	08009e2d 	.word	0x08009e2d
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009e2c:	f1b5 7fc0 	cmp.w	r5, #25165824	@ 0x1800000
 8009e30:	d10a      	bne.n	8009e48 <HAL_DMA_Init+0xdc>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8009e32:	2340      	movs	r3, #64	@ 0x40
 8009e34:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8009e36:	2301      	movs	r3, #1
 8009e38:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    return HAL_ERROR;
 8009e3c:	2001      	movs	r0, #1
 8009e3e:	e7e4      	b.n	8009e0a <HAL_DMA_Init+0x9e>
    switch (tmp)
 8009e40:	2802      	cmp	r0, #2
 8009e42:	d9f6      	bls.n	8009e32 <HAL_DMA_Init+0xc6>
 8009e44:	2803      	cmp	r0, #3
 8009e46:	d0d3      	beq.n	8009df0 <HAL_DMA_Init+0x84>
  hdma->Instance->FCR = tmp;
 8009e48:	6153      	str	r3, [r2, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8009e4a:	4620      	mov	r0, r4
 8009e4c:	f7ff ff78 	bl	8009d40 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009e50:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8009e52:	233f      	movs	r3, #63	@ 0x3f
 8009e54:	4093      	lsls	r3, r2
 8009e56:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009e58:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8009e5a:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009e5c:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8009e5e:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 8009e62:	e7d2      	b.n	8009e0a <HAL_DMA_Init+0x9e>
 8009e64:	f010803f 	.word	0xf010803f

08009e68 <HAL_DMA_Start_IT>:
{
 8009e68:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8009e6a:	f890 4034 	ldrb.w	r4, [r0, #52]	@ 0x34
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009e6e:	6d86      	ldr	r6, [r0, #88]	@ 0x58
  __HAL_LOCK(hdma);
 8009e70:	2c01      	cmp	r4, #1
 8009e72:	d034      	beq.n	8009ede <HAL_DMA_Start_IT+0x76>
 8009e74:	2401      	movs	r4, #1
 8009e76:	f880 4034 	strb.w	r4, [r0, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8009e7a:	f890 4035 	ldrb.w	r4, [r0, #53]	@ 0x35
 8009e7e:	2c01      	cmp	r4, #1
 8009e80:	f04f 0400 	mov.w	r4, #0
 8009e84:	d129      	bne.n	8009eda <HAL_DMA_Start_IT+0x72>
    hdma->State = HAL_DMA_STATE_BUSY;
 8009e86:	2502      	movs	r5, #2
 8009e88:	f880 5035 	strb.w	r5, [r0, #53]	@ 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009e8c:	6544      	str	r4, [r0, #84]	@ 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8009e8e:	6804      	ldr	r4, [r0, #0]
 8009e90:	6825      	ldr	r5, [r4, #0]
 8009e92:	f425 2580 	bic.w	r5, r5, #262144	@ 0x40000
 8009e96:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8009e98:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009e9a:	6883      	ldr	r3, [r0, #8]
 8009e9c:	2b40      	cmp	r3, #64	@ 0x40
 8009e9e:	d119      	bne.n	8009ed4 <HAL_DMA_Start_IT+0x6c>
    hdma->Instance->PAR = DstAddress;
 8009ea0:	60a2      	str	r2, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 8009ea2:	60e1      	str	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009ea4:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8009ea6:	233f      	movs	r3, #63	@ 0x3f
 8009ea8:	4093      	lsls	r3, r2
 8009eaa:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8009eac:	6823      	ldr	r3, [r4, #0]
 8009eae:	f043 0316 	orr.w	r3, r3, #22
 8009eb2:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8009eb4:	6963      	ldr	r3, [r4, #20]
 8009eb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009eba:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8009ebc:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8009ebe:	b11b      	cbz	r3, 8009ec8 <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 8009ec0:	6823      	ldr	r3, [r4, #0]
 8009ec2:	f043 0308 	orr.w	r3, r3, #8
 8009ec6:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8009ec8:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009eca:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8009ecc:	f043 0301 	orr.w	r3, r3, #1
 8009ed0:	6023      	str	r3, [r4, #0]
}
 8009ed2:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->PAR = SrcAddress;
 8009ed4:	60a1      	str	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8009ed6:	60e2      	str	r2, [r4, #12]
 8009ed8:	e7e4      	b.n	8009ea4 <HAL_DMA_Start_IT+0x3c>
    __HAL_UNLOCK(hdma);	  
 8009eda:	f880 4034 	strb.w	r4, [r0, #52]	@ 0x34
  __HAL_LOCK(hdma);
 8009ede:	2002      	movs	r0, #2
 8009ee0:	e7f7      	b.n	8009ed2 <HAL_DMA_Start_IT+0x6a>

08009ee2 <HAL_DMA_Abort>:
{
 8009ee2:	b570      	push	{r4, r5, r6, lr}
 8009ee4:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009ee6:	6d86      	ldr	r6, [r0, #88]	@ 0x58
  uint32_t tickstart = HAL_GetTick();
 8009ee8:	f7ff fcba 	bl	8009860 <HAL_GetTick>
 8009eec:	4605      	mov	r5, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009eee:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 8009ef2:	2b02      	cmp	r3, #2
 8009ef4:	d006      	beq.n	8009f04 <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009ef6:	2380      	movs	r3, #128	@ 0x80
    return HAL_ERROR;
 8009ef8:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009efa:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 8009efc:	2300      	movs	r3, #0
 8009efe:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 8009f02:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009f04:	6823      	ldr	r3, [r4, #0]
 8009f06:	681a      	ldr	r2, [r3, #0]
 8009f08:	f022 0216 	bic.w	r2, r2, #22
 8009f0c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8009f0e:	695a      	ldr	r2, [r3, #20]
 8009f10:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009f14:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009f16:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8009f18:	b90a      	cbnz	r2, 8009f1e <HAL_DMA_Abort+0x3c>
 8009f1a:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8009f1c:	b11a      	cbz	r2, 8009f26 <HAL_DMA_Abort+0x44>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009f1e:	681a      	ldr	r2, [r3, #0]
 8009f20:	f022 0208 	bic.w	r2, r2, #8
 8009f24:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8009f26:	681a      	ldr	r2, [r3, #0]
 8009f28:	f022 0201 	bic.w	r2, r2, #1
 8009f2c:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009f2e:	6823      	ldr	r3, [r4, #0]
 8009f30:	6818      	ldr	r0, [r3, #0]
 8009f32:	f010 0001 	ands.w	r0, r0, #1
 8009f36:	d107      	bne.n	8009f48 <HAL_DMA_Abort+0x66>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009f38:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8009f3a:	233f      	movs	r3, #63	@ 0x3f
 8009f3c:	4093      	lsls	r3, r2
 8009f3e:	60b3      	str	r3, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8009f40:	2301      	movs	r3, #1
 8009f42:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 8009f46:	e7d9      	b.n	8009efc <HAL_DMA_Abort+0x1a>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009f48:	f7ff fc8a 	bl	8009860 <HAL_GetTick>
 8009f4c:	1b40      	subs	r0, r0, r5
 8009f4e:	2805      	cmp	r0, #5
 8009f50:	d9ed      	bls.n	8009f2e <HAL_DMA_Abort+0x4c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009f52:	2320      	movs	r3, #32
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8009f54:	2003      	movs	r0, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009f56:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8009f58:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
        return HAL_TIMEOUT;
 8009f5c:	e7ce      	b.n	8009efc <HAL_DMA_Abort+0x1a>

08009f5e <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009f5e:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 8009f62:	2b02      	cmp	r3, #2
 8009f64:	d003      	beq.n	8009f6e <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009f66:	2380      	movs	r3, #128	@ 0x80
 8009f68:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 8009f6a:	2001      	movs	r0, #1
 8009f6c:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8009f6e:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8009f70:	2305      	movs	r3, #5
 8009f72:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
  return HAL_OK;
 8009f76:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8009f78:	6813      	ldr	r3, [r2, #0]
 8009f7a:	f023 0301 	bic.w	r3, r3, #1
 8009f7e:	6013      	str	r3, [r2, #0]
}
 8009f80:	4770      	bx	lr
	...

08009f84 <HAL_DMA_IRQHandler>:
  __IO uint32_t count = 0;
 8009f84:	2300      	movs	r3, #0
{
 8009f86:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0;
 8009f88:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8009f8a:	2208      	movs	r2, #8
  uint32_t timeout = SystemCoreClock / 9600;
 8009f8c:	4b5b      	ldr	r3, [pc, #364]	@ (800a0fc <HAL_DMA_IRQHandler+0x178>)
{
 8009f8e:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009f90:	6d85      	ldr	r5, [r0, #88]	@ 0x58
  uint32_t timeout = SystemCoreClock / 9600;
 8009f92:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8009f94:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
  tmpisr = regs->ISR;
 8009f96:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8009f98:	409a      	lsls	r2, r3
 8009f9a:	4232      	tst	r2, r6
 8009f9c:	d00c      	beq.n	8009fb8 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8009f9e:	6801      	ldr	r1, [r0, #0]
 8009fa0:	6808      	ldr	r0, [r1, #0]
 8009fa2:	0740      	lsls	r0, r0, #29
 8009fa4:	d508      	bpl.n	8009fb8 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8009fa6:	6808      	ldr	r0, [r1, #0]
 8009fa8:	f020 0004 	bic.w	r0, r0, #4
 8009fac:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8009fae:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8009fb0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009fb2:	f042 0201 	orr.w	r2, r2, #1
 8009fb6:	6562      	str	r2, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8009fb8:	2201      	movs	r2, #1
 8009fba:	409a      	lsls	r2, r3
 8009fbc:	4232      	tst	r2, r6
 8009fbe:	d008      	beq.n	8009fd2 <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8009fc0:	6821      	ldr	r1, [r4, #0]
 8009fc2:	6949      	ldr	r1, [r1, #20]
 8009fc4:	0609      	lsls	r1, r1, #24
 8009fc6:	d504      	bpl.n	8009fd2 <HAL_DMA_IRQHandler+0x4e>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8009fc8:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8009fca:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009fcc:	f042 0202 	orr.w	r2, r2, #2
 8009fd0:	6562      	str	r2, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8009fd2:	2204      	movs	r2, #4
 8009fd4:	409a      	lsls	r2, r3
 8009fd6:	4232      	tst	r2, r6
 8009fd8:	d008      	beq.n	8009fec <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8009fda:	6821      	ldr	r1, [r4, #0]
 8009fdc:	6809      	ldr	r1, [r1, #0]
 8009fde:	0788      	lsls	r0, r1, #30
 8009fe0:	d504      	bpl.n	8009fec <HAL_DMA_IRQHandler+0x68>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8009fe2:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8009fe4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009fe6:	f042 0204 	orr.w	r2, r2, #4
 8009fea:	6562      	str	r2, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8009fec:	2210      	movs	r2, #16
 8009fee:	409a      	lsls	r2, r3
 8009ff0:	4232      	tst	r2, r6
 8009ff2:	d010      	beq.n	800a016 <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8009ff4:	6823      	ldr	r3, [r4, #0]
 8009ff6:	6819      	ldr	r1, [r3, #0]
 8009ff8:	0709      	lsls	r1, r1, #28
 8009ffa:	d50c      	bpl.n	800a016 <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8009ffc:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8009ffe:	681a      	ldr	r2, [r3, #0]
 800a000:	0350      	lsls	r0, r2, #13
 800a002:	d537      	bpl.n	800a074 <HAL_DMA_IRQHandler+0xf0>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	0319      	lsls	r1, r3, #12
 800a008:	d401      	bmi.n	800a00e <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 800a00a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a00c:	e000      	b.n	800a010 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a00e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 800a010:	b10b      	cbz	r3, 800a016 <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 800a012:	4620      	mov	r0, r4
 800a014:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800a016:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 800a018:	2220      	movs	r2, #32
 800a01a:	408a      	lsls	r2, r1
 800a01c:	4232      	tst	r2, r6
 800a01e:	d03a      	beq.n	800a096 <HAL_DMA_IRQHandler+0x112>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800a020:	6823      	ldr	r3, [r4, #0]
 800a022:	6818      	ldr	r0, [r3, #0]
 800a024:	06c6      	lsls	r6, r0, #27
 800a026:	d536      	bpl.n	800a096 <HAL_DMA_IRQHandler+0x112>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800a028:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800a02a:	f894 2035 	ldrb.w	r2, [r4, #53]	@ 0x35
 800a02e:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a030:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800a032:	d127      	bne.n	800a084 <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a034:	f022 0216 	bic.w	r2, r2, #22
 800a038:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a03a:	695a      	ldr	r2, [r3, #20]
 800a03c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a040:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a042:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800a044:	b90a      	cbnz	r2, 800a04a <HAL_DMA_IRQHandler+0xc6>
 800a046:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 800a048:	b11a      	cbz	r2, 800a052 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a04a:	681a      	ldr	r2, [r3, #0]
 800a04c:	f022 0208 	bic.w	r2, r2, #8
 800a050:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a052:	233f      	movs	r3, #63	@ 0x3f
 800a054:	408b      	lsls	r3, r1
 800a056:	60ab      	str	r3, [r5, #8]
        hdma->State = HAL_DMA_STATE_READY;
 800a058:	2301      	movs	r3, #1
 800a05a:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 800a05e:	2300      	movs	r3, #0
 800a060:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferAbortCallback != NULL)
 800a064:	6d23      	ldr	r3, [r4, #80]	@ 0x50
    if(hdma->XferErrorCallback != NULL)
 800a066:	2b00      	cmp	r3, #0
 800a068:	d045      	beq.n	800a0f6 <HAL_DMA_IRQHandler+0x172>
      hdma->XferErrorCallback(hdma);
 800a06a:	4620      	mov	r0, r4
}
 800a06c:	b003      	add	sp, #12
 800a06e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 800a072:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a074:	681a      	ldr	r2, [r3, #0]
 800a076:	05d2      	lsls	r2, r2, #23
 800a078:	d4c7      	bmi.n	800a00a <HAL_DMA_IRQHandler+0x86>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a07a:	681a      	ldr	r2, [r3, #0]
 800a07c:	f022 0208 	bic.w	r2, r2, #8
 800a080:	601a      	str	r2, [r3, #0]
 800a082:	e7c2      	b.n	800a00a <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a084:	0350      	lsls	r0, r2, #13
 800a086:	d527      	bpl.n	800a0d8 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	0319      	lsls	r1, r3, #12
 800a08c:	d431      	bmi.n	800a0f2 <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
 800a08e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
        if(hdma->XferCpltCallback != NULL)
 800a090:	b10b      	cbz	r3, 800a096 <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
 800a092:	4620      	mov	r0, r4
 800a094:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a096:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800a098:	b36b      	cbz	r3, 800a0f6 <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800a09a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800a09c:	07da      	lsls	r2, r3, #31
 800a09e:	d519      	bpl.n	800a0d4 <HAL_DMA_IRQHandler+0x150>
  uint32_t timeout = SystemCoreClock / 9600;
 800a0a0:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
      __HAL_DMA_DISABLE(hdma);
 800a0a4:	6822      	ldr	r2, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600;
 800a0a6:	fbb7 f7f3 	udiv	r7, r7, r3
      hdma->State = HAL_DMA_STATE_ABORT;
 800a0aa:	2305      	movs	r3, #5
 800a0ac:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 800a0b0:	6813      	ldr	r3, [r2, #0]
 800a0b2:	f023 0301 	bic.w	r3, r3, #1
 800a0b6:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 800a0b8:	9b01      	ldr	r3, [sp, #4]
 800a0ba:	3301      	adds	r3, #1
 800a0bc:	42bb      	cmp	r3, r7
 800a0be:	9301      	str	r3, [sp, #4]
 800a0c0:	d802      	bhi.n	800a0c8 <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800a0c2:	6813      	ldr	r3, [r2, #0]
 800a0c4:	07db      	lsls	r3, r3, #31
 800a0c6:	d4f7      	bmi.n	800a0b8 <HAL_DMA_IRQHandler+0x134>
      hdma->State = HAL_DMA_STATE_READY;
 800a0c8:	2301      	movs	r3, #1
 800a0ca:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    if(hdma->XferErrorCallback != NULL)
 800a0d4:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800a0d6:	e7c6      	b.n	800a066 <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a0d8:	681a      	ldr	r2, [r3, #0]
 800a0da:	f412 7280 	ands.w	r2, r2, #256	@ 0x100
 800a0de:	d108      	bne.n	800a0f2 <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800a0e0:	6819      	ldr	r1, [r3, #0]
 800a0e2:	f021 0110 	bic.w	r1, r1, #16
 800a0e6:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 800a0e8:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 800a0ea:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
          hdma->State = HAL_DMA_STATE_READY;
 800a0ee:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        if(hdma->XferCpltCallback != NULL)
 800a0f2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800a0f4:	e7cc      	b.n	800a090 <HAL_DMA_IRQHandler+0x10c>
}
 800a0f6:	b003      	add	sp, #12
 800a0f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a0fa:	bf00      	nop
 800a0fc:	20007a64 	.word	0x20007a64

0800a100 <HAL_DMA_RegisterCallback>:
{
 800a100:	4603      	mov	r3, r0
 800a102:	b510      	push	{r4, lr}
  __HAL_LOCK(hdma);
 800a104:	f890 0034 	ldrb.w	r0, [r0, #52]	@ 0x34
 800a108:	2801      	cmp	r0, #1
 800a10a:	d01d      	beq.n	800a148 <HAL_DMA_RegisterCallback+0x48>
  if(HAL_DMA_STATE_READY == hdma->State)
 800a10c:	f893 4035 	ldrb.w	r4, [r3, #53]	@ 0x35
 800a110:	2c01      	cmp	r4, #1
 800a112:	b2e0      	uxtb	r0, r4
 800a114:	d116      	bne.n	800a144 <HAL_DMA_RegisterCallback+0x44>
    switch (CallbackID)
 800a116:	2905      	cmp	r1, #5
 800a118:	d806      	bhi.n	800a128 <HAL_DMA_RegisterCallback+0x28>
 800a11a:	e8df f001 	tbb	[pc, r1]
 800a11e:	0903      	.short	0x0903
 800a120:	110f0d0b 	.word	0x110f0d0b
      hdma->XferCpltCallback = pCallback;
 800a124:	63da      	str	r2, [r3, #60]	@ 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 800a126:	2000      	movs	r0, #0
  __HAL_UNLOCK(hdma);
 800a128:	2200      	movs	r2, #0
 800a12a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
}
 800a12e:	bd10      	pop	{r4, pc}
      hdma->XferHalfCpltCallback = pCallback;
 800a130:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800a132:	e7f8      	b.n	800a126 <HAL_DMA_RegisterCallback+0x26>
      hdma->XferM1CpltCallback = pCallback;
 800a134:	645a      	str	r2, [r3, #68]	@ 0x44
      break;
 800a136:	e7f6      	b.n	800a126 <HAL_DMA_RegisterCallback+0x26>
      hdma->XferM1HalfCpltCallback = pCallback;
 800a138:	649a      	str	r2, [r3, #72]	@ 0x48
      break;
 800a13a:	e7f4      	b.n	800a126 <HAL_DMA_RegisterCallback+0x26>
      hdma->XferErrorCallback = pCallback;
 800a13c:	64da      	str	r2, [r3, #76]	@ 0x4c
      break;
 800a13e:	e7f2      	b.n	800a126 <HAL_DMA_RegisterCallback+0x26>
      hdma->XferAbortCallback = pCallback;
 800a140:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800a142:	e7f0      	b.n	800a126 <HAL_DMA_RegisterCallback+0x26>
 800a144:	2001      	movs	r0, #1
 800a146:	e7ef      	b.n	800a128 <HAL_DMA_RegisterCallback+0x28>
  __HAL_LOCK(hdma);
 800a148:	2002      	movs	r0, #2
 800a14a:	e7f0      	b.n	800a12e <HAL_DMA_RegisterCallback+0x2e>

0800a14c <HAL_DMA_GetState>:
  return hdma->State;
 800a14c:	f890 0035 	ldrb.w	r0, [r0, #53]	@ 0x35
}
 800a150:	4770      	bx	lr

0800a152 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800a152:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800a154:	4604      	mov	r4, r0
 800a156:	b330      	cbz	r0, 800a1a6 <HAL_DMA2D_Init+0x54>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800a158:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 800a15c:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800a160:	b91b      	cbnz	r3, 800a16a <HAL_DMA2D_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800a162:	f880 2038 	strb.w	r2, [r0, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800a166:	f7f8 fb45 	bl	80027f4 <HAL_DMA2D_MspInit>

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800a16a:	6822      	ldr	r2, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800a16c:	2302      	movs	r3, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800a16e:	6861      	ldr	r1, [r4, #4]
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800a170:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800a172:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800a176:	6813      	ldr	r3, [r2, #0]
 800a178:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800a17c:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800a17e:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800a180:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800a182:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 800a184:	f023 0307 	bic.w	r3, r3, #7
 800a188:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800a18a:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800a18c:	6353      	str	r3, [r2, #52]	@ 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800a18e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800a190:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800a194:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a198:	430b      	orrs	r3, r1
 800a19a:	6413      	str	r3, [r2, #64]	@ 0x40

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800a19c:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800a19e:	63e0      	str	r0, [r4, #60]	@ 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800a1a0:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39

  return HAL_OK;
}
 800a1a4:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800a1a6:	2001      	movs	r0, #1
 800a1a8:	e7fc      	b.n	800a1a4 <HAL_DMA2D_Init+0x52>

0800a1aa <HAL_DMA2D_LineEventCallback>:
  * @brief  Transfer watermark callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
 800a1aa:	4770      	bx	lr

0800a1ac <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @brief  CLUT Transfer Complete callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
 800a1ac:	4770      	bx	lr

0800a1ae <HAL_DMA2D_IRQHandler>:
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800a1ae:	6803      	ldr	r3, [r0, #0]
{
 800a1b0:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800a1b2:	685e      	ldr	r6, [r3, #4]
{
 800a1b4:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800a1b6:	681d      	ldr	r5, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800a1b8:	07f2      	lsls	r2, r6, #31
 800a1ba:	d514      	bpl.n	800a1e6 <HAL_DMA2D_IRQHandler+0x38>
    if ((crflags & DMA2D_IT_TE) != 0U)
 800a1bc:	05e9      	lsls	r1, r5, #23
 800a1be:	d512      	bpl.n	800a1e6 <HAL_DMA2D_IRQHandler+0x38>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800a1c0:	681a      	ldr	r2, [r3, #0]
 800a1c2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a1c6:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800a1c8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a1ca:	f042 0201 	orr.w	r2, r2, #1
 800a1ce:	63c2      	str	r2, [r0, #60]	@ 0x3c
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800a1d0:	2201      	movs	r2, #1
 800a1d2:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800a1d4:	2304      	movs	r3, #4
 800a1d6:	f880 3039 	strb.w	r3, [r0, #57]	@ 0x39
      __HAL_UNLOCK(hdma2d);
 800a1da:	2300      	movs	r3, #0
 800a1dc:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
      if (hdma2d->XferErrorCallback != NULL)
 800a1e0:	6943      	ldr	r3, [r0, #20]
 800a1e2:	b103      	cbz	r3, 800a1e6 <HAL_DMA2D_IRQHandler+0x38>
        hdma2d->XferErrorCallback(hdma2d);
 800a1e4:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800a1e6:	06b2      	lsls	r2, r6, #26
 800a1e8:	d516      	bpl.n	800a218 <HAL_DMA2D_IRQHandler+0x6a>
    if ((crflags & DMA2D_IT_CE) != 0U)
 800a1ea:	04ab      	lsls	r3, r5, #18
 800a1ec:	d514      	bpl.n	800a218 <HAL_DMA2D_IRQHandler+0x6a>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800a1ee:	6823      	ldr	r3, [r4, #0]
 800a1f0:	681a      	ldr	r2, [r3, #0]
 800a1f2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a1f6:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800a1f8:	2220      	movs	r2, #32
 800a1fa:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800a1fc:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800a1fe:	f043 0302 	orr.w	r3, r3, #2
 800a202:	63e3      	str	r3, [r4, #60]	@ 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800a204:	2304      	movs	r3, #4
 800a206:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
      __HAL_UNLOCK(hdma2d);
 800a20a:	2300      	movs	r3, #0
 800a20c:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
      if (hdma2d->XferErrorCallback != NULL)
 800a210:	6963      	ldr	r3, [r4, #20]
 800a212:	b10b      	cbz	r3, 800a218 <HAL_DMA2D_IRQHandler+0x6a>
        hdma2d->XferErrorCallback(hdma2d);
 800a214:	4620      	mov	r0, r4
 800a216:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800a218:	0730      	lsls	r0, r6, #28
 800a21a:	d516      	bpl.n	800a24a <HAL_DMA2D_IRQHandler+0x9c>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800a21c:	0529      	lsls	r1, r5, #20
 800a21e:	d514      	bpl.n	800a24a <HAL_DMA2D_IRQHandler+0x9c>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800a220:	6823      	ldr	r3, [r4, #0]
 800a222:	681a      	ldr	r2, [r3, #0]
 800a224:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a228:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800a22a:	2208      	movs	r2, #8
 800a22c:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800a22e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800a230:	f043 0304 	orr.w	r3, r3, #4
 800a234:	63e3      	str	r3, [r4, #60]	@ 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800a236:	2304      	movs	r3, #4
 800a238:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
      __HAL_UNLOCK(hdma2d);
 800a23c:	2300      	movs	r3, #0
 800a23e:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
      if (hdma2d->XferErrorCallback != NULL)
 800a242:	6963      	ldr	r3, [r4, #20]
 800a244:	b10b      	cbz	r3, 800a24a <HAL_DMA2D_IRQHandler+0x9c>
        hdma2d->XferErrorCallback(hdma2d);
 800a246:	4620      	mov	r0, r4
 800a248:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800a24a:	0772      	lsls	r2, r6, #29
 800a24c:	d50b      	bpl.n	800a266 <HAL_DMA2D_IRQHandler+0xb8>
    if ((crflags & DMA2D_IT_TW) != 0U)
 800a24e:	056b      	lsls	r3, r5, #21
 800a250:	d509      	bpl.n	800a266 <HAL_DMA2D_IRQHandler+0xb8>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800a252:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_LineEventCallback(hdma2d);
 800a254:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800a256:	681a      	ldr	r2, [r3, #0]
 800a258:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a25c:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800a25e:	2204      	movs	r2, #4
 800a260:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 800a262:	f7ff ffa2 	bl	800a1aa <HAL_DMA2D_LineEventCallback>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800a266:	07b0      	lsls	r0, r6, #30
 800a268:	d514      	bpl.n	800a294 <HAL_DMA2D_IRQHandler+0xe6>
    if ((crflags & DMA2D_IT_TC) != 0U)
 800a26a:	05a9      	lsls	r1, r5, #22
 800a26c:	d512      	bpl.n	800a294 <HAL_DMA2D_IRQHandler+0xe6>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800a26e:	6823      	ldr	r3, [r4, #0]
 800a270:	681a      	ldr	r2, [r3, #0]
 800a272:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800a276:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800a278:	2202      	movs	r2, #2
 800a27a:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800a27c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800a27e:	63e3      	str	r3, [r4, #60]	@ 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800a280:	2301      	movs	r3, #1
 800a282:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
      __HAL_UNLOCK(hdma2d);
 800a286:	2300      	movs	r3, #0
 800a288:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
      if (hdma2d->XferCpltCallback != NULL)
 800a28c:	6923      	ldr	r3, [r4, #16]
 800a28e:	b10b      	cbz	r3, 800a294 <HAL_DMA2D_IRQHandler+0xe6>
        hdma2d->XferCpltCallback(hdma2d);
 800a290:	4620      	mov	r0, r4
 800a292:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800a294:	06f2      	lsls	r2, r6, #27
 800a296:	d513      	bpl.n	800a2c0 <HAL_DMA2D_IRQHandler+0x112>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800a298:	04eb      	lsls	r3, r5, #19
 800a29a:	d511      	bpl.n	800a2c0 <HAL_DMA2D_IRQHandler+0x112>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800a29c:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800a29e:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800a2a0:	681a      	ldr	r2, [r3, #0]
 800a2a2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a2a6:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800a2a8:	2210      	movs	r2, #16
 800a2aa:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800a2ac:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800a2ae:	63e3      	str	r3, [r4, #60]	@ 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800a2b0:	2301      	movs	r3, #1
 800a2b2:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
      __HAL_UNLOCK(hdma2d);
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800a2bc:	f7ff ff76 	bl	800a1ac <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 800a2c0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a2c4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800a2c4:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800a2c6:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
{
 800a2ca:	4603      	mov	r3, r0
 800a2cc:	2002      	movs	r0, #2
  __HAL_LOCK(hdma2d);
 800a2ce:	2a01      	cmp	r2, #1
 800a2d0:	d02b      	beq.n	800a32a <HAL_DMA2D_ConfigLayer+0x66>
 800a2d2:	2201      	movs	r2, #1

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800a2d4:	f883 0039 	strb.w	r0, [r3, #57]	@ 0x39
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800a2d8:	010e      	lsls	r6, r1, #4
 800a2da:	4f1c      	ldr	r7, [pc, #112]	@ (800a34c <HAL_DMA2D_ConfigLayer+0x88>)
  __HAL_LOCK(hdma2d);
 800a2dc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800a2e0:	eb03 1201 	add.w	r2, r3, r1, lsl #4
 800a2e4:	e9d2 4007 	ldrd	r4, r0, [r2, #28]
 800a2e8:	6a55      	ldr	r5, [r2, #36]	@ 0x24
 800a2ea:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800a2ee:	3c09      	subs	r4, #9
 800a2f0:	2c01      	cmp	r4, #1
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800a2f2:	bf96      	itet	ls
 800a2f4:	f005 427f 	andls.w	r2, r5, #4278190080	@ 0xff000000
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800a2f8:	ea40 6005 	orrhi.w	r0, r0, r5, lsl #24
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800a2fc:	4310      	orrls	r0, r2

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800a2fe:	681a      	ldr	r2, [r3, #0]
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800a300:	b9a1      	cbnz	r1, 800a32c <HAL_DMA2D_ConfigLayer+0x68>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800a302:	6a51      	ldr	r1, [r2, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800a304:	2c01      	cmp	r4, #1
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800a306:	ea01 0107 	and.w	r1, r1, r7
 800a30a:	ea41 0100 	orr.w	r1, r1, r0
 800a30e:	6251      	str	r1, [r2, #36]	@ 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800a310:	6999      	ldr	r1, [r3, #24]
 800a312:	6191      	str	r1, [r2, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800a314:	d803      	bhi.n	800a31e <HAL_DMA2D_ConfigLayer+0x5a>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800a316:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800a318:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800a31c:	6291      	str	r1, [r2, #40]	@ 0x28
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800a31e:	2201      	movs	r2, #1

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800a320:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800a322:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  __HAL_UNLOCK(hdma2d);
 800a326:	f883 0038 	strb.w	r0, [r3, #56]	@ 0x38

  return HAL_OK;
}
 800a32a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800a32c:	69d1      	ldr	r1, [r2, #28]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800a32e:	2c01      	cmp	r4, #1
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800a330:	ea01 0107 	and.w	r1, r1, r7
 800a334:	ea41 0100 	orr.w	r1, r1, r0
 800a338:	61d1      	str	r1, [r2, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800a33a:	eb03 0106 	add.w	r1, r3, r6
 800a33e:	6989      	ldr	r1, [r1, #24]
 800a340:	6111      	str	r1, [r2, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800a342:	d8ec      	bhi.n	800a31e <HAL_DMA2D_ConfigLayer+0x5a>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800a344:	f025 457f 	bic.w	r5, r5, #4278190080	@ 0xff000000
 800a348:	6215      	str	r5, [r2, #32]
 800a34a:	e7e8      	b.n	800a31e <HAL_DMA2D_ConfigLayer+0x5a>
 800a34c:	00fcfff0 	.word	0x00fcfff0

0800a350 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 800a350:	b570      	push	{r4, r5, r6, lr}
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800a352:	6886      	ldr	r6, [r0, #8]
 800a354:	2e80      	cmp	r6, #128	@ 0x80
 800a356:	d104      	bne.n	800a362 <HAL_DMAEx_MultiBufferStart_IT+0x12>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 800a358:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a35c:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 800a35e:	2001      	movs	r0, #1
    
    /* Return error status */
    status = HAL_BUSY;
  }  
  return status; 
}
 800a360:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hdma);
 800a362:	f890 4034 	ldrb.w	r4, [r0, #52]	@ 0x34
 800a366:	2c01      	cmp	r4, #1
 800a368:	f000 8537 	beq.w	800adda <HAL_DMAEx_MultiBufferStart_IT+0xa8a>
 800a36c:	2401      	movs	r4, #1
 800a36e:	f880 4034 	strb.w	r4, [r0, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800a372:	f890 4035 	ldrb.w	r4, [r0, #53]	@ 0x35
 800a376:	2c01      	cmp	r4, #1
 800a378:	f04f 0400 	mov.w	r4, #0
 800a37c:	f040 852b 	bne.w	800add6 <HAL_DMAEx_MultiBufferStart_IT+0xa86>
    hdma->State = HAL_DMA_STATE_BUSY;
 800a380:	2502      	movs	r5, #2
{
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a382:	2e40      	cmp	r6, #64	@ 0x40
    hdma->State = HAL_DMA_STATE_BUSY;
 800a384:	f880 5035 	strb.w	r5, [r0, #53]	@ 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a388:	6544      	str	r4, [r0, #84]	@ 0x54
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 800a38a:	6804      	ldr	r4, [r0, #0]
 800a38c:	6825      	ldr	r5, [r4, #0]
 800a38e:	f445 2580 	orr.w	r5, r5, #262144	@ 0x40000
 800a392:	6025      	str	r5, [r4, #0]
    hdma->Instance->M1AR = SecondMemAddress;
 800a394:	6123      	str	r3, [r4, #16]
  hdma->Instance->NDTR = DataLength;
 800a396:	9b04      	ldr	r3, [sp, #16]
 800a398:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a39a:	d13e      	bne.n	800a41a <HAL_DMAEx_MultiBufferStart_IT+0xca>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800a39c:	60a2      	str	r2, [r4, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800a39e:	60e1      	str	r1, [r4, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800a3a0:	4ba7      	ldr	r3, [pc, #668]	@ (800a640 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 800a3a2:	429c      	cmp	r4, r3
 800a3a4:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 800a3a8:	d942      	bls.n	800a430 <HAL_DMAEx_MultiBufferStart_IT+0xe0>
 800a3aa:	429c      	cmp	r4, r3
 800a3ac:	d038      	beq.n	800a420 <HAL_DMAEx_MultiBufferStart_IT+0xd0>
 800a3ae:	4aa5      	ldr	r2, [pc, #660]	@ (800a644 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 800a3b0:	4294      	cmp	r4, r2
 800a3b2:	d035      	beq.n	800a420 <HAL_DMAEx_MultiBufferStart_IT+0xd0>
 800a3b4:	f5a2 7268 	sub.w	r2, r2, #928	@ 0x3a0
 800a3b8:	4294      	cmp	r4, r2
 800a3ba:	d031      	beq.n	800a420 <HAL_DMAEx_MultiBufferStart_IT+0xd0>
 800a3bc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a3c0:	4294      	cmp	r4, r2
 800a3c2:	d02d      	beq.n	800a420 <HAL_DMAEx_MultiBufferStart_IT+0xd0>
 800a3c4:	f5a2 6289 	sub.w	r2, r2, #1096	@ 0x448
 800a3c8:	4294      	cmp	r4, r2
 800a3ca:	d02b      	beq.n	800a424 <HAL_DMAEx_MultiBufferStart_IT+0xd4>
 800a3cc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a3d0:	4294      	cmp	r4, r2
 800a3d2:	d027      	beq.n	800a424 <HAL_DMAEx_MultiBufferStart_IT+0xd4>
 800a3d4:	f5a2 7268 	sub.w	r2, r2, #928	@ 0x3a0
 800a3d8:	4294      	cmp	r4, r2
 800a3da:	d023      	beq.n	800a424 <HAL_DMAEx_MultiBufferStart_IT+0xd4>
 800a3dc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a3e0:	4294      	cmp	r4, r2
 800a3e2:	d01f      	beq.n	800a424 <HAL_DMAEx_MultiBufferStart_IT+0xd4>
 800a3e4:	f5a2 6289 	sub.w	r2, r2, #1096	@ 0x448
 800a3e8:	4294      	cmp	r4, r2
 800a3ea:	d01e      	beq.n	800a42a <HAL_DMAEx_MultiBufferStart_IT+0xda>
 800a3ec:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a3f0:	4294      	cmp	r4, r2
 800a3f2:	d01a      	beq.n	800a42a <HAL_DMAEx_MultiBufferStart_IT+0xda>
 800a3f4:	f5a2 7268 	sub.w	r2, r2, #928	@ 0x3a0
 800a3f8:	4294      	cmp	r4, r2
 800a3fa:	d016      	beq.n	800a42a <HAL_DMAEx_MultiBufferStart_IT+0xda>
 800a3fc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a400:	4294      	cmp	r4, r2
 800a402:	bf14      	ite	ne
 800a404:	f04f 6200 	movne.w	r2, #134217728	@ 0x8000000
 800a408:	f44f 1200 	moveq.w	r2, #2097152	@ 0x200000
 800a40c:	498e      	ldr	r1, [pc, #568]	@ (800a648 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800a40e:	429c      	cmp	r4, r3
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800a410:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800a412:	f040 80d5 	bne.w	800a5c0 <HAL_DMAEx_MultiBufferStart_IT+0x270>
 800a416:	2210      	movs	r2, #16
 800a418:	e104      	b.n	800a624 <HAL_DMAEx_MultiBufferStart_IT+0x2d4>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 800a41a:	60a1      	str	r1, [r4, #8]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 800a41c:	60e2      	str	r2, [r4, #12]
 800a41e:	e7bf      	b.n	800a3a0 <HAL_DMAEx_MultiBufferStart_IT+0x50>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800a420:	2220      	movs	r2, #32
 800a422:	e7f3      	b.n	800a40c <HAL_DMAEx_MultiBufferStart_IT+0xbc>
 800a424:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a428:	e7f0      	b.n	800a40c <HAL_DMAEx_MultiBufferStart_IT+0xbc>
 800a42a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800a42e:	e7ed      	b.n	800a40c <HAL_DMAEx_MultiBufferStart_IT+0xbc>
 800a430:	4a86      	ldr	r2, [pc, #536]	@ (800a64c <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 800a432:	4294      	cmp	r4, r2
 800a434:	d940      	bls.n	800a4b8 <HAL_DMAEx_MultiBufferStart_IT+0x168>
 800a436:	429c      	cmp	r4, r3
 800a438:	d036      	beq.n	800a4a8 <HAL_DMAEx_MultiBufferStart_IT+0x158>
 800a43a:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 800a43e:	4294      	cmp	r4, r2
 800a440:	d032      	beq.n	800a4a8 <HAL_DMAEx_MultiBufferStart_IT+0x158>
 800a442:	f5a2 7268 	sub.w	r2, r2, #928	@ 0x3a0
 800a446:	4294      	cmp	r4, r2
 800a448:	d02e      	beq.n	800a4a8 <HAL_DMAEx_MultiBufferStart_IT+0x158>
 800a44a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a44e:	4294      	cmp	r4, r2
 800a450:	d02a      	beq.n	800a4a8 <HAL_DMAEx_MultiBufferStart_IT+0x158>
 800a452:	f5a2 6289 	sub.w	r2, r2, #1096	@ 0x448
 800a456:	4294      	cmp	r4, r2
 800a458:	d028      	beq.n	800a4ac <HAL_DMAEx_MultiBufferStart_IT+0x15c>
 800a45a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a45e:	4294      	cmp	r4, r2
 800a460:	d024      	beq.n	800a4ac <HAL_DMAEx_MultiBufferStart_IT+0x15c>
 800a462:	f5a2 7268 	sub.w	r2, r2, #928	@ 0x3a0
 800a466:	4294      	cmp	r4, r2
 800a468:	d020      	beq.n	800a4ac <HAL_DMAEx_MultiBufferStart_IT+0x15c>
 800a46a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a46e:	4294      	cmp	r4, r2
 800a470:	d01c      	beq.n	800a4ac <HAL_DMAEx_MultiBufferStart_IT+0x15c>
 800a472:	f5a2 6289 	sub.w	r2, r2, #1096	@ 0x448
 800a476:	4294      	cmp	r4, r2
 800a478:	d01b      	beq.n	800a4b2 <HAL_DMAEx_MultiBufferStart_IT+0x162>
 800a47a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a47e:	4294      	cmp	r4, r2
 800a480:	d017      	beq.n	800a4b2 <HAL_DMAEx_MultiBufferStart_IT+0x162>
 800a482:	f5a2 7268 	sub.w	r2, r2, #928	@ 0x3a0
 800a486:	4294      	cmp	r4, r2
 800a488:	d013      	beq.n	800a4b2 <HAL_DMAEx_MultiBufferStart_IT+0x162>
 800a48a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a48e:	4294      	cmp	r4, r2
 800a490:	bf14      	ite	ne
 800a492:	f04f 6200 	movne.w	r2, #134217728	@ 0x8000000
 800a496:	f44f 1200 	moveq.w	r2, #2097152	@ 0x200000
 800a49a:	496b      	ldr	r1, [pc, #428]	@ (800a648 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800a49c:	429c      	cmp	r4, r3
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800a49e:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800a4a0:	f040 80da 	bne.w	800a658 <HAL_DMAEx_MultiBufferStart_IT+0x308>
 800a4a4:	2210      	movs	r2, #16
 800a4a6:	e109      	b.n	800a6bc <HAL_DMAEx_MultiBufferStart_IT+0x36c>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800a4a8:	2220      	movs	r2, #32
 800a4aa:	e7f6      	b.n	800a49a <HAL_DMAEx_MultiBufferStart_IT+0x14a>
 800a4ac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a4b0:	e7f3      	b.n	800a49a <HAL_DMAEx_MultiBufferStart_IT+0x14a>
 800a4b2:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800a4b6:	e7f0      	b.n	800a49a <HAL_DMAEx_MultiBufferStart_IT+0x14a>
 800a4b8:	4a65      	ldr	r2, [pc, #404]	@ (800a650 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 800a4ba:	4294      	cmp	r4, r2
 800a4bc:	d940      	bls.n	800a540 <HAL_DMAEx_MultiBufferStart_IT+0x1f0>
 800a4be:	429c      	cmp	r4, r3
 800a4c0:	d036      	beq.n	800a530 <HAL_DMAEx_MultiBufferStart_IT+0x1e0>
 800a4c2:	f502 726e 	add.w	r2, r2, #952	@ 0x3b8
 800a4c6:	4294      	cmp	r4, r2
 800a4c8:	d032      	beq.n	800a530 <HAL_DMAEx_MultiBufferStart_IT+0x1e0>
 800a4ca:	f5a2 7268 	sub.w	r2, r2, #928	@ 0x3a0
 800a4ce:	4294      	cmp	r4, r2
 800a4d0:	d02e      	beq.n	800a530 <HAL_DMAEx_MultiBufferStart_IT+0x1e0>
 800a4d2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a4d6:	4294      	cmp	r4, r2
 800a4d8:	d02a      	beq.n	800a530 <HAL_DMAEx_MultiBufferStart_IT+0x1e0>
 800a4da:	f5a2 6289 	sub.w	r2, r2, #1096	@ 0x448
 800a4de:	4294      	cmp	r4, r2
 800a4e0:	d028      	beq.n	800a534 <HAL_DMAEx_MultiBufferStart_IT+0x1e4>
 800a4e2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a4e6:	4294      	cmp	r4, r2
 800a4e8:	d024      	beq.n	800a534 <HAL_DMAEx_MultiBufferStart_IT+0x1e4>
 800a4ea:	f5a2 7268 	sub.w	r2, r2, #928	@ 0x3a0
 800a4ee:	4294      	cmp	r4, r2
 800a4f0:	d020      	beq.n	800a534 <HAL_DMAEx_MultiBufferStart_IT+0x1e4>
 800a4f2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a4f6:	4294      	cmp	r4, r2
 800a4f8:	d01c      	beq.n	800a534 <HAL_DMAEx_MultiBufferStart_IT+0x1e4>
 800a4fa:	f5a2 6289 	sub.w	r2, r2, #1096	@ 0x448
 800a4fe:	4294      	cmp	r4, r2
 800a500:	d01b      	beq.n	800a53a <HAL_DMAEx_MultiBufferStart_IT+0x1ea>
 800a502:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a506:	4294      	cmp	r4, r2
 800a508:	d017      	beq.n	800a53a <HAL_DMAEx_MultiBufferStart_IT+0x1ea>
 800a50a:	f5a2 7268 	sub.w	r2, r2, #928	@ 0x3a0
 800a50e:	4294      	cmp	r4, r2
 800a510:	d013      	beq.n	800a53a <HAL_DMAEx_MultiBufferStart_IT+0x1ea>
 800a512:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a516:	4294      	cmp	r4, r2
 800a518:	bf14      	ite	ne
 800a51a:	f04f 6200 	movne.w	r2, #134217728	@ 0x8000000
 800a51e:	f44f 1200 	moveq.w	r2, #2097152	@ 0x200000
 800a522:	494c      	ldr	r1, [pc, #304]	@ (800a654 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800a524:	429c      	cmp	r4, r3
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800a526:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800a528:	f040 80d5 	bne.w	800a6d6 <HAL_DMAEx_MultiBufferStart_IT+0x386>
 800a52c:	2210      	movs	r2, #16
 800a52e:	e104      	b.n	800a73a <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800a530:	2220      	movs	r2, #32
 800a532:	e7f6      	b.n	800a522 <HAL_DMAEx_MultiBufferStart_IT+0x1d2>
 800a534:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a538:	e7f3      	b.n	800a522 <HAL_DMAEx_MultiBufferStart_IT+0x1d2>
 800a53a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800a53e:	e7f0      	b.n	800a522 <HAL_DMAEx_MultiBufferStart_IT+0x1d2>
 800a540:	429c      	cmp	r4, r3
 800a542:	d035      	beq.n	800a5b0 <HAL_DMAEx_MultiBufferStart_IT+0x260>
 800a544:	4a3f      	ldr	r2, [pc, #252]	@ (800a644 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 800a546:	4294      	cmp	r4, r2
 800a548:	d032      	beq.n	800a5b0 <HAL_DMAEx_MultiBufferStart_IT+0x260>
 800a54a:	f5a2 7268 	sub.w	r2, r2, #928	@ 0x3a0
 800a54e:	4294      	cmp	r4, r2
 800a550:	d02e      	beq.n	800a5b0 <HAL_DMAEx_MultiBufferStart_IT+0x260>
 800a552:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a556:	4294      	cmp	r4, r2
 800a558:	d02a      	beq.n	800a5b0 <HAL_DMAEx_MultiBufferStart_IT+0x260>
 800a55a:	f5a2 6289 	sub.w	r2, r2, #1096	@ 0x448
 800a55e:	4294      	cmp	r4, r2
 800a560:	d028      	beq.n	800a5b4 <HAL_DMAEx_MultiBufferStart_IT+0x264>
 800a562:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a566:	4294      	cmp	r4, r2
 800a568:	d024      	beq.n	800a5b4 <HAL_DMAEx_MultiBufferStart_IT+0x264>
 800a56a:	f5a2 7268 	sub.w	r2, r2, #928	@ 0x3a0
 800a56e:	4294      	cmp	r4, r2
 800a570:	d020      	beq.n	800a5b4 <HAL_DMAEx_MultiBufferStart_IT+0x264>
 800a572:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a576:	4294      	cmp	r4, r2
 800a578:	d01c      	beq.n	800a5b4 <HAL_DMAEx_MultiBufferStart_IT+0x264>
 800a57a:	f5a2 6289 	sub.w	r2, r2, #1096	@ 0x448
 800a57e:	4294      	cmp	r4, r2
 800a580:	d01b      	beq.n	800a5ba <HAL_DMAEx_MultiBufferStart_IT+0x26a>
 800a582:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a586:	4294      	cmp	r4, r2
 800a588:	d017      	beq.n	800a5ba <HAL_DMAEx_MultiBufferStart_IT+0x26a>
 800a58a:	f5a2 7268 	sub.w	r2, r2, #928	@ 0x3a0
 800a58e:	4294      	cmp	r4, r2
 800a590:	d013      	beq.n	800a5ba <HAL_DMAEx_MultiBufferStart_IT+0x26a>
 800a592:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a596:	4294      	cmp	r4, r2
 800a598:	bf14      	ite	ne
 800a59a:	f04f 6200 	movne.w	r2, #134217728	@ 0x8000000
 800a59e:	f44f 1200 	moveq.w	r2, #2097152	@ 0x200000
 800a5a2:	492c      	ldr	r1, [pc, #176]	@ (800a654 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800a5a4:	429c      	cmp	r4, r3
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800a5a6:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800a5a8:	f040 80d4 	bne.w	800a754 <HAL_DMAEx_MultiBufferStart_IT+0x404>
 800a5ac:	2210      	movs	r2, #16
 800a5ae:	e103      	b.n	800a7b8 <HAL_DMAEx_MultiBufferStart_IT+0x468>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800a5b0:	2220      	movs	r2, #32
 800a5b2:	e7f6      	b.n	800a5a2 <HAL_DMAEx_MultiBufferStart_IT+0x252>
 800a5b4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a5b8:	e7f3      	b.n	800a5a2 <HAL_DMAEx_MultiBufferStart_IT+0x252>
 800a5ba:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800a5be:	e7f0      	b.n	800a5a2 <HAL_DMAEx_MultiBufferStart_IT+0x252>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800a5c0:	4a20      	ldr	r2, [pc, #128]	@ (800a644 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 800a5c2:	4294      	cmp	r4, r2
 800a5c4:	f43f af27 	beq.w	800a416 <HAL_DMAEx_MultiBufferStart_IT+0xc6>
 800a5c8:	f5a2 7268 	sub.w	r2, r2, #928	@ 0x3a0
 800a5cc:	4294      	cmp	r4, r2
 800a5ce:	f43f af22 	beq.w	800a416 <HAL_DMAEx_MultiBufferStart_IT+0xc6>
 800a5d2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a5d6:	4294      	cmp	r4, r2
 800a5d8:	f43f af1d 	beq.w	800a416 <HAL_DMAEx_MultiBufferStart_IT+0xc6>
 800a5dc:	f5a2 6289 	sub.w	r2, r2, #1096	@ 0x448
 800a5e0:	4294      	cmp	r4, r2
 800a5e2:	d026      	beq.n	800a632 <HAL_DMAEx_MultiBufferStart_IT+0x2e2>
 800a5e4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a5e8:	4294      	cmp	r4, r2
 800a5ea:	d022      	beq.n	800a632 <HAL_DMAEx_MultiBufferStart_IT+0x2e2>
 800a5ec:	f5a2 7268 	sub.w	r2, r2, #928	@ 0x3a0
 800a5f0:	4294      	cmp	r4, r2
 800a5f2:	d01e      	beq.n	800a632 <HAL_DMAEx_MultiBufferStart_IT+0x2e2>
 800a5f4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a5f8:	4294      	cmp	r4, r2
 800a5fa:	d01a      	beq.n	800a632 <HAL_DMAEx_MultiBufferStart_IT+0x2e2>
 800a5fc:	f5a2 6289 	sub.w	r2, r2, #1096	@ 0x448
 800a600:	4294      	cmp	r4, r2
 800a602:	d019      	beq.n	800a638 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>
 800a604:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a608:	4294      	cmp	r4, r2
 800a60a:	d015      	beq.n	800a638 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>
 800a60c:	f5a2 7268 	sub.w	r2, r2, #928	@ 0x3a0
 800a610:	4294      	cmp	r4, r2
 800a612:	d011      	beq.n	800a638 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>
 800a614:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a618:	4294      	cmp	r4, r2
 800a61a:	bf14      	ite	ne
 800a61c:	f04f 6280 	movne.w	r2, #67108864	@ 0x4000000
 800a620:	f44f 1280 	moveq.w	r2, #1048576	@ 0x100000
 800a624:	4908      	ldr	r1, [pc, #32]	@ (800a648 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800a626:	429c      	cmp	r4, r3
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800a628:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800a62a:	f040 80d2 	bne.w	800a7d2 <HAL_DMAEx_MultiBufferStart_IT+0x482>
 800a62e:	2208      	movs	r2, #8
 800a630:	e101      	b.n	800a836 <HAL_DMAEx_MultiBufferStart_IT+0x4e6>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800a632:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a636:	e7f5      	b.n	800a624 <HAL_DMAEx_MultiBufferStart_IT+0x2d4>
 800a638:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800a63c:	e7f2      	b.n	800a624 <HAL_DMAEx_MultiBufferStart_IT+0x2d4>
 800a63e:	bf00      	nop
 800a640:	40026458 	.word	0x40026458
 800a644:	40026410 	.word	0x40026410
 800a648:	40026400 	.word	0x40026400
 800a64c:	400260b8 	.word	0x400260b8
 800a650:	40026058 	.word	0x40026058
 800a654:	40026000 	.word	0x40026000
 800a658:	4a9d      	ldr	r2, [pc, #628]	@ (800a8d0 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 800a65a:	4294      	cmp	r4, r2
 800a65c:	f43f af22 	beq.w	800a4a4 <HAL_DMAEx_MultiBufferStart_IT+0x154>
 800a660:	f5a2 7268 	sub.w	r2, r2, #928	@ 0x3a0
 800a664:	4294      	cmp	r4, r2
 800a666:	f43f af1d 	beq.w	800a4a4 <HAL_DMAEx_MultiBufferStart_IT+0x154>
 800a66a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a66e:	4294      	cmp	r4, r2
 800a670:	f43f af18 	beq.w	800a4a4 <HAL_DMAEx_MultiBufferStart_IT+0x154>
 800a674:	f5a2 6289 	sub.w	r2, r2, #1096	@ 0x448
 800a678:	4294      	cmp	r4, r2
 800a67a:	d026      	beq.n	800a6ca <HAL_DMAEx_MultiBufferStart_IT+0x37a>
 800a67c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a680:	4294      	cmp	r4, r2
 800a682:	d022      	beq.n	800a6ca <HAL_DMAEx_MultiBufferStart_IT+0x37a>
 800a684:	f5a2 7268 	sub.w	r2, r2, #928	@ 0x3a0
 800a688:	4294      	cmp	r4, r2
 800a68a:	d01e      	beq.n	800a6ca <HAL_DMAEx_MultiBufferStart_IT+0x37a>
 800a68c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a690:	4294      	cmp	r4, r2
 800a692:	d01a      	beq.n	800a6ca <HAL_DMAEx_MultiBufferStart_IT+0x37a>
 800a694:	f5a2 6289 	sub.w	r2, r2, #1096	@ 0x448
 800a698:	4294      	cmp	r4, r2
 800a69a:	d019      	beq.n	800a6d0 <HAL_DMAEx_MultiBufferStart_IT+0x380>
 800a69c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a6a0:	4294      	cmp	r4, r2
 800a6a2:	d015      	beq.n	800a6d0 <HAL_DMAEx_MultiBufferStart_IT+0x380>
 800a6a4:	f5a2 7268 	sub.w	r2, r2, #928	@ 0x3a0
 800a6a8:	4294      	cmp	r4, r2
 800a6aa:	d011      	beq.n	800a6d0 <HAL_DMAEx_MultiBufferStart_IT+0x380>
 800a6ac:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a6b0:	4294      	cmp	r4, r2
 800a6b2:	bf14      	ite	ne
 800a6b4:	f04f 6280 	movne.w	r2, #67108864	@ 0x4000000
 800a6b8:	f44f 1280 	moveq.w	r2, #1048576	@ 0x100000
 800a6bc:	4985      	ldr	r1, [pc, #532]	@ (800a8d4 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800a6be:	429c      	cmp	r4, r3
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800a6c0:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800a6c2:	f040 80c5 	bne.w	800a850 <HAL_DMAEx_MultiBufferStart_IT+0x500>
 800a6c6:	2208      	movs	r2, #8
 800a6c8:	e0f4      	b.n	800a8b4 <HAL_DMAEx_MultiBufferStart_IT+0x564>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800a6ca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a6ce:	e7f5      	b.n	800a6bc <HAL_DMAEx_MultiBufferStart_IT+0x36c>
 800a6d0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800a6d4:	e7f2      	b.n	800a6bc <HAL_DMAEx_MultiBufferStart_IT+0x36c>
 800a6d6:	4a7e      	ldr	r2, [pc, #504]	@ (800a8d0 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 800a6d8:	4294      	cmp	r4, r2
 800a6da:	f43f af27 	beq.w	800a52c <HAL_DMAEx_MultiBufferStart_IT+0x1dc>
 800a6de:	f5a2 7268 	sub.w	r2, r2, #928	@ 0x3a0
 800a6e2:	4294      	cmp	r4, r2
 800a6e4:	f43f af22 	beq.w	800a52c <HAL_DMAEx_MultiBufferStart_IT+0x1dc>
 800a6e8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a6ec:	4294      	cmp	r4, r2
 800a6ee:	f43f af1d 	beq.w	800a52c <HAL_DMAEx_MultiBufferStart_IT+0x1dc>
 800a6f2:	f5a2 6289 	sub.w	r2, r2, #1096	@ 0x448
 800a6f6:	4294      	cmp	r4, r2
 800a6f8:	d026      	beq.n	800a748 <HAL_DMAEx_MultiBufferStart_IT+0x3f8>
 800a6fa:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a6fe:	4294      	cmp	r4, r2
 800a700:	d022      	beq.n	800a748 <HAL_DMAEx_MultiBufferStart_IT+0x3f8>
 800a702:	f5a2 7268 	sub.w	r2, r2, #928	@ 0x3a0
 800a706:	4294      	cmp	r4, r2
 800a708:	d01e      	beq.n	800a748 <HAL_DMAEx_MultiBufferStart_IT+0x3f8>
 800a70a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a70e:	4294      	cmp	r4, r2
 800a710:	d01a      	beq.n	800a748 <HAL_DMAEx_MultiBufferStart_IT+0x3f8>
 800a712:	f5a2 6289 	sub.w	r2, r2, #1096	@ 0x448
 800a716:	4294      	cmp	r4, r2
 800a718:	d019      	beq.n	800a74e <HAL_DMAEx_MultiBufferStart_IT+0x3fe>
 800a71a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a71e:	4294      	cmp	r4, r2
 800a720:	d015      	beq.n	800a74e <HAL_DMAEx_MultiBufferStart_IT+0x3fe>
 800a722:	f5a2 7268 	sub.w	r2, r2, #928	@ 0x3a0
 800a726:	4294      	cmp	r4, r2
 800a728:	d011      	beq.n	800a74e <HAL_DMAEx_MultiBufferStart_IT+0x3fe>
 800a72a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a72e:	4294      	cmp	r4, r2
 800a730:	bf14      	ite	ne
 800a732:	f04f 6280 	movne.w	r2, #67108864	@ 0x4000000
 800a736:	f44f 1280 	moveq.w	r2, #1048576	@ 0x100000
 800a73a:	4967      	ldr	r1, [pc, #412]	@ (800a8d8 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800a73c:	429c      	cmp	r4, r3
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800a73e:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800a740:	f040 80cc 	bne.w	800a8dc <HAL_DMAEx_MultiBufferStart_IT+0x58c>
 800a744:	2208      	movs	r2, #8
 800a746:	e0fb      	b.n	800a940 <HAL_DMAEx_MultiBufferStart_IT+0x5f0>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800a748:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a74c:	e7f5      	b.n	800a73a <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 800a74e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800a752:	e7f2      	b.n	800a73a <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 800a754:	4a5e      	ldr	r2, [pc, #376]	@ (800a8d0 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 800a756:	4294      	cmp	r4, r2
 800a758:	f43f af28 	beq.w	800a5ac <HAL_DMAEx_MultiBufferStart_IT+0x25c>
 800a75c:	f5a2 7268 	sub.w	r2, r2, #928	@ 0x3a0
 800a760:	4294      	cmp	r4, r2
 800a762:	f43f af23 	beq.w	800a5ac <HAL_DMAEx_MultiBufferStart_IT+0x25c>
 800a766:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a76a:	4294      	cmp	r4, r2
 800a76c:	f43f af1e 	beq.w	800a5ac <HAL_DMAEx_MultiBufferStart_IT+0x25c>
 800a770:	f5a2 6289 	sub.w	r2, r2, #1096	@ 0x448
 800a774:	4294      	cmp	r4, r2
 800a776:	d026      	beq.n	800a7c6 <HAL_DMAEx_MultiBufferStart_IT+0x476>
 800a778:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a77c:	4294      	cmp	r4, r2
 800a77e:	d022      	beq.n	800a7c6 <HAL_DMAEx_MultiBufferStart_IT+0x476>
 800a780:	f5a2 7268 	sub.w	r2, r2, #928	@ 0x3a0
 800a784:	4294      	cmp	r4, r2
 800a786:	d01e      	beq.n	800a7c6 <HAL_DMAEx_MultiBufferStart_IT+0x476>
 800a788:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a78c:	4294      	cmp	r4, r2
 800a78e:	d01a      	beq.n	800a7c6 <HAL_DMAEx_MultiBufferStart_IT+0x476>
 800a790:	f5a2 6289 	sub.w	r2, r2, #1096	@ 0x448
 800a794:	4294      	cmp	r4, r2
 800a796:	d019      	beq.n	800a7cc <HAL_DMAEx_MultiBufferStart_IT+0x47c>
 800a798:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a79c:	4294      	cmp	r4, r2
 800a79e:	d015      	beq.n	800a7cc <HAL_DMAEx_MultiBufferStart_IT+0x47c>
 800a7a0:	f5a2 7268 	sub.w	r2, r2, #928	@ 0x3a0
 800a7a4:	4294      	cmp	r4, r2
 800a7a6:	d011      	beq.n	800a7cc <HAL_DMAEx_MultiBufferStart_IT+0x47c>
 800a7a8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a7ac:	4294      	cmp	r4, r2
 800a7ae:	bf14      	ite	ne
 800a7b0:	f04f 6280 	movne.w	r2, #67108864	@ 0x4000000
 800a7b4:	f44f 1280 	moveq.w	r2, #1048576	@ 0x100000
 800a7b8:	4947      	ldr	r1, [pc, #284]	@ (800a8d8 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800a7ba:	429c      	cmp	r4, r3
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800a7bc:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800a7be:	f040 80cc 	bne.w	800a95a <HAL_DMAEx_MultiBufferStart_IT+0x60a>
 800a7c2:	2208      	movs	r2, #8
 800a7c4:	e0fb      	b.n	800a9be <HAL_DMAEx_MultiBufferStart_IT+0x66e>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800a7c6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a7ca:	e7f5      	b.n	800a7b8 <HAL_DMAEx_MultiBufferStart_IT+0x468>
 800a7cc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800a7d0:	e7f2      	b.n	800a7b8 <HAL_DMAEx_MultiBufferStart_IT+0x468>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800a7d2:	4a3f      	ldr	r2, [pc, #252]	@ (800a8d0 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 800a7d4:	4294      	cmp	r4, r2
 800a7d6:	f43f af2a 	beq.w	800a62e <HAL_DMAEx_MultiBufferStart_IT+0x2de>
 800a7da:	f5a2 7268 	sub.w	r2, r2, #928	@ 0x3a0
 800a7de:	4294      	cmp	r4, r2
 800a7e0:	f43f af25 	beq.w	800a62e <HAL_DMAEx_MultiBufferStart_IT+0x2de>
 800a7e4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a7e8:	4294      	cmp	r4, r2
 800a7ea:	f43f af20 	beq.w	800a62e <HAL_DMAEx_MultiBufferStart_IT+0x2de>
 800a7ee:	f5a2 6289 	sub.w	r2, r2, #1096	@ 0x448
 800a7f2:	4294      	cmp	r4, r2
 800a7f4:	d026      	beq.n	800a844 <HAL_DMAEx_MultiBufferStart_IT+0x4f4>
 800a7f6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a7fa:	4294      	cmp	r4, r2
 800a7fc:	d022      	beq.n	800a844 <HAL_DMAEx_MultiBufferStart_IT+0x4f4>
 800a7fe:	f5a2 7268 	sub.w	r2, r2, #928	@ 0x3a0
 800a802:	4294      	cmp	r4, r2
 800a804:	d01e      	beq.n	800a844 <HAL_DMAEx_MultiBufferStart_IT+0x4f4>
 800a806:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a80a:	4294      	cmp	r4, r2
 800a80c:	d01a      	beq.n	800a844 <HAL_DMAEx_MultiBufferStart_IT+0x4f4>
 800a80e:	f5a2 6289 	sub.w	r2, r2, #1096	@ 0x448
 800a812:	4294      	cmp	r4, r2
 800a814:	d019      	beq.n	800a84a <HAL_DMAEx_MultiBufferStart_IT+0x4fa>
 800a816:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a81a:	4294      	cmp	r4, r2
 800a81c:	d015      	beq.n	800a84a <HAL_DMAEx_MultiBufferStart_IT+0x4fa>
 800a81e:	f5a2 7268 	sub.w	r2, r2, #928	@ 0x3a0
 800a822:	4294      	cmp	r4, r2
 800a824:	d011      	beq.n	800a84a <HAL_DMAEx_MultiBufferStart_IT+0x4fa>
 800a826:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a82a:	4294      	cmp	r4, r2
 800a82c:	bf14      	ite	ne
 800a82e:	f04f 7200 	movne.w	r2, #33554432	@ 0x2000000
 800a832:	f44f 2200 	moveq.w	r2, #524288	@ 0x80000
 800a836:	4927      	ldr	r1, [pc, #156]	@ (800a8d4 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800a838:	429c      	cmp	r4, r3
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800a83a:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800a83c:	f040 80cc 	bne.w	800a9d8 <HAL_DMAEx_MultiBufferStart_IT+0x688>
 800a840:	2204      	movs	r2, #4
 800a842:	e0fb      	b.n	800aa3c <HAL_DMAEx_MultiBufferStart_IT+0x6ec>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800a844:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a848:	e7f5      	b.n	800a836 <HAL_DMAEx_MultiBufferStart_IT+0x4e6>
 800a84a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800a84e:	e7f2      	b.n	800a836 <HAL_DMAEx_MultiBufferStart_IT+0x4e6>
 800a850:	4a1f      	ldr	r2, [pc, #124]	@ (800a8d0 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 800a852:	4294      	cmp	r4, r2
 800a854:	f43f af37 	beq.w	800a6c6 <HAL_DMAEx_MultiBufferStart_IT+0x376>
 800a858:	f5a2 7268 	sub.w	r2, r2, #928	@ 0x3a0
 800a85c:	4294      	cmp	r4, r2
 800a85e:	f43f af32 	beq.w	800a6c6 <HAL_DMAEx_MultiBufferStart_IT+0x376>
 800a862:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a866:	4294      	cmp	r4, r2
 800a868:	f43f af2d 	beq.w	800a6c6 <HAL_DMAEx_MultiBufferStart_IT+0x376>
 800a86c:	f5a2 6289 	sub.w	r2, r2, #1096	@ 0x448
 800a870:	4294      	cmp	r4, r2
 800a872:	d026      	beq.n	800a8c2 <HAL_DMAEx_MultiBufferStart_IT+0x572>
 800a874:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a878:	4294      	cmp	r4, r2
 800a87a:	d022      	beq.n	800a8c2 <HAL_DMAEx_MultiBufferStart_IT+0x572>
 800a87c:	f5a2 7268 	sub.w	r2, r2, #928	@ 0x3a0
 800a880:	4294      	cmp	r4, r2
 800a882:	d01e      	beq.n	800a8c2 <HAL_DMAEx_MultiBufferStart_IT+0x572>
 800a884:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a888:	4294      	cmp	r4, r2
 800a88a:	d01a      	beq.n	800a8c2 <HAL_DMAEx_MultiBufferStart_IT+0x572>
 800a88c:	f5a2 6289 	sub.w	r2, r2, #1096	@ 0x448
 800a890:	4294      	cmp	r4, r2
 800a892:	d019      	beq.n	800a8c8 <HAL_DMAEx_MultiBufferStart_IT+0x578>
 800a894:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a898:	4294      	cmp	r4, r2
 800a89a:	d015      	beq.n	800a8c8 <HAL_DMAEx_MultiBufferStart_IT+0x578>
 800a89c:	f5a2 7268 	sub.w	r2, r2, #928	@ 0x3a0
 800a8a0:	4294      	cmp	r4, r2
 800a8a2:	d011      	beq.n	800a8c8 <HAL_DMAEx_MultiBufferStart_IT+0x578>
 800a8a4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a8a8:	4294      	cmp	r4, r2
 800a8aa:	bf14      	ite	ne
 800a8ac:	f04f 7200 	movne.w	r2, #33554432	@ 0x2000000
 800a8b0:	f44f 2200 	moveq.w	r2, #524288	@ 0x80000
 800a8b4:	4907      	ldr	r1, [pc, #28]	@ (800a8d4 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800a8b6:	429c      	cmp	r4, r3
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800a8b8:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800a8ba:	f040 80cc 	bne.w	800aa56 <HAL_DMAEx_MultiBufferStart_IT+0x706>
 800a8be:	2204      	movs	r2, #4
 800a8c0:	e0fb      	b.n	800aaba <HAL_DMAEx_MultiBufferStart_IT+0x76a>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800a8c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a8c6:	e7f5      	b.n	800a8b4 <HAL_DMAEx_MultiBufferStart_IT+0x564>
 800a8c8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800a8cc:	e7f2      	b.n	800a8b4 <HAL_DMAEx_MultiBufferStart_IT+0x564>
 800a8ce:	bf00      	nop
 800a8d0:	40026410 	.word	0x40026410
 800a8d4:	40026400 	.word	0x40026400
 800a8d8:	40026000 	.word	0x40026000
 800a8dc:	4a9d      	ldr	r2, [pc, #628]	@ (800ab54 <HAL_DMAEx_MultiBufferStart_IT+0x804>)
 800a8de:	4294      	cmp	r4, r2
 800a8e0:	f43f af30 	beq.w	800a744 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>
 800a8e4:	f5a2 7268 	sub.w	r2, r2, #928	@ 0x3a0
 800a8e8:	4294      	cmp	r4, r2
 800a8ea:	f43f af2b 	beq.w	800a744 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>
 800a8ee:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a8f2:	4294      	cmp	r4, r2
 800a8f4:	f43f af26 	beq.w	800a744 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>
 800a8f8:	f5a2 6289 	sub.w	r2, r2, #1096	@ 0x448
 800a8fc:	4294      	cmp	r4, r2
 800a8fe:	d026      	beq.n	800a94e <HAL_DMAEx_MultiBufferStart_IT+0x5fe>
 800a900:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a904:	4294      	cmp	r4, r2
 800a906:	d022      	beq.n	800a94e <HAL_DMAEx_MultiBufferStart_IT+0x5fe>
 800a908:	f5a2 7268 	sub.w	r2, r2, #928	@ 0x3a0
 800a90c:	4294      	cmp	r4, r2
 800a90e:	d01e      	beq.n	800a94e <HAL_DMAEx_MultiBufferStart_IT+0x5fe>
 800a910:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a914:	4294      	cmp	r4, r2
 800a916:	d01a      	beq.n	800a94e <HAL_DMAEx_MultiBufferStart_IT+0x5fe>
 800a918:	f5a2 6289 	sub.w	r2, r2, #1096	@ 0x448
 800a91c:	4294      	cmp	r4, r2
 800a91e:	d019      	beq.n	800a954 <HAL_DMAEx_MultiBufferStart_IT+0x604>
 800a920:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a924:	4294      	cmp	r4, r2
 800a926:	d015      	beq.n	800a954 <HAL_DMAEx_MultiBufferStart_IT+0x604>
 800a928:	f5a2 7268 	sub.w	r2, r2, #928	@ 0x3a0
 800a92c:	4294      	cmp	r4, r2
 800a92e:	d011      	beq.n	800a954 <HAL_DMAEx_MultiBufferStart_IT+0x604>
 800a930:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a934:	4294      	cmp	r4, r2
 800a936:	bf14      	ite	ne
 800a938:	f04f 7200 	movne.w	r2, #33554432	@ 0x2000000
 800a93c:	f44f 2200 	moveq.w	r2, #524288	@ 0x80000
 800a940:	4985      	ldr	r1, [pc, #532]	@ (800ab58 <HAL_DMAEx_MultiBufferStart_IT+0x808>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800a942:	429c      	cmp	r4, r3
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800a944:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800a946:	f040 80c5 	bne.w	800aad4 <HAL_DMAEx_MultiBufferStart_IT+0x784>
 800a94a:	2204      	movs	r2, #4
 800a94c:	e0f4      	b.n	800ab38 <HAL_DMAEx_MultiBufferStart_IT+0x7e8>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800a94e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a952:	e7f5      	b.n	800a940 <HAL_DMAEx_MultiBufferStart_IT+0x5f0>
 800a954:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800a958:	e7f2      	b.n	800a940 <HAL_DMAEx_MultiBufferStart_IT+0x5f0>
 800a95a:	4a7e      	ldr	r2, [pc, #504]	@ (800ab54 <HAL_DMAEx_MultiBufferStart_IT+0x804>)
 800a95c:	4294      	cmp	r4, r2
 800a95e:	f43f af30 	beq.w	800a7c2 <HAL_DMAEx_MultiBufferStart_IT+0x472>
 800a962:	f5a2 7268 	sub.w	r2, r2, #928	@ 0x3a0
 800a966:	4294      	cmp	r4, r2
 800a968:	f43f af2b 	beq.w	800a7c2 <HAL_DMAEx_MultiBufferStart_IT+0x472>
 800a96c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a970:	4294      	cmp	r4, r2
 800a972:	f43f af26 	beq.w	800a7c2 <HAL_DMAEx_MultiBufferStart_IT+0x472>
 800a976:	f5a2 6289 	sub.w	r2, r2, #1096	@ 0x448
 800a97a:	4294      	cmp	r4, r2
 800a97c:	d026      	beq.n	800a9cc <HAL_DMAEx_MultiBufferStart_IT+0x67c>
 800a97e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a982:	4294      	cmp	r4, r2
 800a984:	d022      	beq.n	800a9cc <HAL_DMAEx_MultiBufferStart_IT+0x67c>
 800a986:	f5a2 7268 	sub.w	r2, r2, #928	@ 0x3a0
 800a98a:	4294      	cmp	r4, r2
 800a98c:	d01e      	beq.n	800a9cc <HAL_DMAEx_MultiBufferStart_IT+0x67c>
 800a98e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a992:	4294      	cmp	r4, r2
 800a994:	d01a      	beq.n	800a9cc <HAL_DMAEx_MultiBufferStart_IT+0x67c>
 800a996:	f5a2 6289 	sub.w	r2, r2, #1096	@ 0x448
 800a99a:	4294      	cmp	r4, r2
 800a99c:	d019      	beq.n	800a9d2 <HAL_DMAEx_MultiBufferStart_IT+0x682>
 800a99e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a9a2:	4294      	cmp	r4, r2
 800a9a4:	d015      	beq.n	800a9d2 <HAL_DMAEx_MultiBufferStart_IT+0x682>
 800a9a6:	f5a2 7268 	sub.w	r2, r2, #928	@ 0x3a0
 800a9aa:	4294      	cmp	r4, r2
 800a9ac:	d011      	beq.n	800a9d2 <HAL_DMAEx_MultiBufferStart_IT+0x682>
 800a9ae:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a9b2:	4294      	cmp	r4, r2
 800a9b4:	bf14      	ite	ne
 800a9b6:	f04f 7200 	movne.w	r2, #33554432	@ 0x2000000
 800a9ba:	f44f 2200 	moveq.w	r2, #524288	@ 0x80000
 800a9be:	4966      	ldr	r1, [pc, #408]	@ (800ab58 <HAL_DMAEx_MultiBufferStart_IT+0x808>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800a9c0:	429c      	cmp	r4, r3
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800a9c2:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800a9c4:	f040 80cc 	bne.w	800ab60 <HAL_DMAEx_MultiBufferStart_IT+0x810>
 800a9c8:	2204      	movs	r2, #4
 800a9ca:	e0fb      	b.n	800abc4 <HAL_DMAEx_MultiBufferStart_IT+0x874>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800a9cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a9d0:	e7f5      	b.n	800a9be <HAL_DMAEx_MultiBufferStart_IT+0x66e>
 800a9d2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800a9d6:	e7f2      	b.n	800a9be <HAL_DMAEx_MultiBufferStart_IT+0x66e>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800a9d8:	4a5e      	ldr	r2, [pc, #376]	@ (800ab54 <HAL_DMAEx_MultiBufferStart_IT+0x804>)
 800a9da:	4294      	cmp	r4, r2
 800a9dc:	f43f af30 	beq.w	800a840 <HAL_DMAEx_MultiBufferStart_IT+0x4f0>
 800a9e0:	f5a2 7268 	sub.w	r2, r2, #928	@ 0x3a0
 800a9e4:	4294      	cmp	r4, r2
 800a9e6:	f43f af2b 	beq.w	800a840 <HAL_DMAEx_MultiBufferStart_IT+0x4f0>
 800a9ea:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a9ee:	4294      	cmp	r4, r2
 800a9f0:	f43f af26 	beq.w	800a840 <HAL_DMAEx_MultiBufferStart_IT+0x4f0>
 800a9f4:	f5a2 6289 	sub.w	r2, r2, #1096	@ 0x448
 800a9f8:	4294      	cmp	r4, r2
 800a9fa:	d026      	beq.n	800aa4a <HAL_DMAEx_MultiBufferStart_IT+0x6fa>
 800a9fc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800aa00:	4294      	cmp	r4, r2
 800aa02:	d022      	beq.n	800aa4a <HAL_DMAEx_MultiBufferStart_IT+0x6fa>
 800aa04:	f5a2 7268 	sub.w	r2, r2, #928	@ 0x3a0
 800aa08:	4294      	cmp	r4, r2
 800aa0a:	d01e      	beq.n	800aa4a <HAL_DMAEx_MultiBufferStart_IT+0x6fa>
 800aa0c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800aa10:	4294      	cmp	r4, r2
 800aa12:	d01a      	beq.n	800aa4a <HAL_DMAEx_MultiBufferStart_IT+0x6fa>
 800aa14:	f5a2 6289 	sub.w	r2, r2, #1096	@ 0x448
 800aa18:	4294      	cmp	r4, r2
 800aa1a:	d019      	beq.n	800aa50 <HAL_DMAEx_MultiBufferStart_IT+0x700>
 800aa1c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800aa20:	4294      	cmp	r4, r2
 800aa22:	d015      	beq.n	800aa50 <HAL_DMAEx_MultiBufferStart_IT+0x700>
 800aa24:	f5a2 7268 	sub.w	r2, r2, #928	@ 0x3a0
 800aa28:	4294      	cmp	r4, r2
 800aa2a:	d011      	beq.n	800aa50 <HAL_DMAEx_MultiBufferStart_IT+0x700>
 800aa2c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800aa30:	4294      	cmp	r4, r2
 800aa32:	bf14      	ite	ne
 800aa34:	f04f 7280 	movne.w	r2, #16777216	@ 0x1000000
 800aa38:	f44f 2280 	moveq.w	r2, #262144	@ 0x40000
 800aa3c:	4947      	ldr	r1, [pc, #284]	@ (800ab5c <HAL_DMAEx_MultiBufferStart_IT+0x80c>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800aa3e:	429c      	cmp	r4, r3
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800aa40:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800aa42:	f040 80cc 	bne.w	800abde <HAL_DMAEx_MultiBufferStart_IT+0x88e>
 800aa46:	2301      	movs	r3, #1
 800aa48:	e0fb      	b.n	800ac42 <HAL_DMAEx_MultiBufferStart_IT+0x8f2>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800aa4a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800aa4e:	e7f5      	b.n	800aa3c <HAL_DMAEx_MultiBufferStart_IT+0x6ec>
 800aa50:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800aa54:	e7f2      	b.n	800aa3c <HAL_DMAEx_MultiBufferStart_IT+0x6ec>
 800aa56:	4a3f      	ldr	r2, [pc, #252]	@ (800ab54 <HAL_DMAEx_MultiBufferStart_IT+0x804>)
 800aa58:	4294      	cmp	r4, r2
 800aa5a:	f43f af30 	beq.w	800a8be <HAL_DMAEx_MultiBufferStart_IT+0x56e>
 800aa5e:	f5a2 7268 	sub.w	r2, r2, #928	@ 0x3a0
 800aa62:	4294      	cmp	r4, r2
 800aa64:	f43f af2b 	beq.w	800a8be <HAL_DMAEx_MultiBufferStart_IT+0x56e>
 800aa68:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800aa6c:	4294      	cmp	r4, r2
 800aa6e:	f43f af26 	beq.w	800a8be <HAL_DMAEx_MultiBufferStart_IT+0x56e>
 800aa72:	f5a2 6289 	sub.w	r2, r2, #1096	@ 0x448
 800aa76:	4294      	cmp	r4, r2
 800aa78:	d026      	beq.n	800aac8 <HAL_DMAEx_MultiBufferStart_IT+0x778>
 800aa7a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800aa7e:	4294      	cmp	r4, r2
 800aa80:	d022      	beq.n	800aac8 <HAL_DMAEx_MultiBufferStart_IT+0x778>
 800aa82:	f5a2 7268 	sub.w	r2, r2, #928	@ 0x3a0
 800aa86:	4294      	cmp	r4, r2
 800aa88:	d01e      	beq.n	800aac8 <HAL_DMAEx_MultiBufferStart_IT+0x778>
 800aa8a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800aa8e:	4294      	cmp	r4, r2
 800aa90:	d01a      	beq.n	800aac8 <HAL_DMAEx_MultiBufferStart_IT+0x778>
 800aa92:	f5a2 6289 	sub.w	r2, r2, #1096	@ 0x448
 800aa96:	4294      	cmp	r4, r2
 800aa98:	d019      	beq.n	800aace <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 800aa9a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800aa9e:	4294      	cmp	r4, r2
 800aaa0:	d015      	beq.n	800aace <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 800aaa2:	f5a2 7268 	sub.w	r2, r2, #928	@ 0x3a0
 800aaa6:	4294      	cmp	r4, r2
 800aaa8:	d011      	beq.n	800aace <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 800aaaa:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800aaae:	4294      	cmp	r4, r2
 800aab0:	bf14      	ite	ne
 800aab2:	f04f 7280 	movne.w	r2, #16777216	@ 0x1000000
 800aab6:	f44f 2280 	moveq.w	r2, #262144	@ 0x40000
 800aaba:	4928      	ldr	r1, [pc, #160]	@ (800ab5c <HAL_DMAEx_MultiBufferStart_IT+0x80c>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800aabc:	429c      	cmp	r4, r3
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800aabe:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800aac0:	f040 80dd 	bne.w	800ac7e <HAL_DMAEx_MultiBufferStart_IT+0x92e>
 800aac4:	2301      	movs	r3, #1
 800aac6:	e10c      	b.n	800ace2 <HAL_DMAEx_MultiBufferStart_IT+0x992>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800aac8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800aacc:	e7f5      	b.n	800aaba <HAL_DMAEx_MultiBufferStart_IT+0x76a>
 800aace:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800aad2:	e7f2      	b.n	800aaba <HAL_DMAEx_MultiBufferStart_IT+0x76a>
 800aad4:	4a1f      	ldr	r2, [pc, #124]	@ (800ab54 <HAL_DMAEx_MultiBufferStart_IT+0x804>)
 800aad6:	4294      	cmp	r4, r2
 800aad8:	f43f af37 	beq.w	800a94a <HAL_DMAEx_MultiBufferStart_IT+0x5fa>
 800aadc:	f5a2 7268 	sub.w	r2, r2, #928	@ 0x3a0
 800aae0:	4294      	cmp	r4, r2
 800aae2:	f43f af32 	beq.w	800a94a <HAL_DMAEx_MultiBufferStart_IT+0x5fa>
 800aae6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800aaea:	4294      	cmp	r4, r2
 800aaec:	f43f af2d 	beq.w	800a94a <HAL_DMAEx_MultiBufferStart_IT+0x5fa>
 800aaf0:	f5a2 6289 	sub.w	r2, r2, #1096	@ 0x448
 800aaf4:	4294      	cmp	r4, r2
 800aaf6:	d026      	beq.n	800ab46 <HAL_DMAEx_MultiBufferStart_IT+0x7f6>
 800aaf8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800aafc:	4294      	cmp	r4, r2
 800aafe:	d022      	beq.n	800ab46 <HAL_DMAEx_MultiBufferStart_IT+0x7f6>
 800ab00:	f5a2 7268 	sub.w	r2, r2, #928	@ 0x3a0
 800ab04:	4294      	cmp	r4, r2
 800ab06:	d01e      	beq.n	800ab46 <HAL_DMAEx_MultiBufferStart_IT+0x7f6>
 800ab08:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800ab0c:	4294      	cmp	r4, r2
 800ab0e:	d01a      	beq.n	800ab46 <HAL_DMAEx_MultiBufferStart_IT+0x7f6>
 800ab10:	f5a2 6289 	sub.w	r2, r2, #1096	@ 0x448
 800ab14:	4294      	cmp	r4, r2
 800ab16:	d019      	beq.n	800ab4c <HAL_DMAEx_MultiBufferStart_IT+0x7fc>
 800ab18:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800ab1c:	4294      	cmp	r4, r2
 800ab1e:	d015      	beq.n	800ab4c <HAL_DMAEx_MultiBufferStart_IT+0x7fc>
 800ab20:	f5a2 7268 	sub.w	r2, r2, #928	@ 0x3a0
 800ab24:	4294      	cmp	r4, r2
 800ab26:	d011      	beq.n	800ab4c <HAL_DMAEx_MultiBufferStart_IT+0x7fc>
 800ab28:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800ab2c:	4294      	cmp	r4, r2
 800ab2e:	bf14      	ite	ne
 800ab30:	f04f 7280 	movne.w	r2, #16777216	@ 0x1000000
 800ab34:	f44f 2280 	moveq.w	r2, #262144	@ 0x40000
 800ab38:	4907      	ldr	r1, [pc, #28]	@ (800ab58 <HAL_DMAEx_MultiBufferStart_IT+0x808>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800ab3a:	429c      	cmp	r4, r3
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800ab3c:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800ab3e:	f040 80d8 	bne.w	800acf2 <HAL_DMAEx_MultiBufferStart_IT+0x9a2>
 800ab42:	2301      	movs	r3, #1
 800ab44:	e107      	b.n	800ad56 <HAL_DMAEx_MultiBufferStart_IT+0xa06>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800ab46:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ab4a:	e7f5      	b.n	800ab38 <HAL_DMAEx_MultiBufferStart_IT+0x7e8>
 800ab4c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800ab50:	e7f2      	b.n	800ab38 <HAL_DMAEx_MultiBufferStart_IT+0x7e8>
 800ab52:	bf00      	nop
 800ab54:	40026410 	.word	0x40026410
 800ab58:	40026000 	.word	0x40026000
 800ab5c:	40026400 	.word	0x40026400
 800ab60:	4a9f      	ldr	r2, [pc, #636]	@ (800ade0 <HAL_DMAEx_MultiBufferStart_IT+0xa90>)
 800ab62:	4294      	cmp	r4, r2
 800ab64:	f43f af30 	beq.w	800a9c8 <HAL_DMAEx_MultiBufferStart_IT+0x678>
 800ab68:	f5a2 7268 	sub.w	r2, r2, #928	@ 0x3a0
 800ab6c:	4294      	cmp	r4, r2
 800ab6e:	f43f af2b 	beq.w	800a9c8 <HAL_DMAEx_MultiBufferStart_IT+0x678>
 800ab72:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800ab76:	4294      	cmp	r4, r2
 800ab78:	f43f af26 	beq.w	800a9c8 <HAL_DMAEx_MultiBufferStart_IT+0x678>
 800ab7c:	f5a2 6289 	sub.w	r2, r2, #1096	@ 0x448
 800ab80:	4294      	cmp	r4, r2
 800ab82:	d026      	beq.n	800abd2 <HAL_DMAEx_MultiBufferStart_IT+0x882>
 800ab84:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800ab88:	4294      	cmp	r4, r2
 800ab8a:	d022      	beq.n	800abd2 <HAL_DMAEx_MultiBufferStart_IT+0x882>
 800ab8c:	f5a2 7268 	sub.w	r2, r2, #928	@ 0x3a0
 800ab90:	4294      	cmp	r4, r2
 800ab92:	d01e      	beq.n	800abd2 <HAL_DMAEx_MultiBufferStart_IT+0x882>
 800ab94:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800ab98:	4294      	cmp	r4, r2
 800ab9a:	d01a      	beq.n	800abd2 <HAL_DMAEx_MultiBufferStart_IT+0x882>
 800ab9c:	f5a2 6289 	sub.w	r2, r2, #1096	@ 0x448
 800aba0:	4294      	cmp	r4, r2
 800aba2:	d019      	beq.n	800abd8 <HAL_DMAEx_MultiBufferStart_IT+0x888>
 800aba4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800aba8:	4294      	cmp	r4, r2
 800abaa:	d015      	beq.n	800abd8 <HAL_DMAEx_MultiBufferStart_IT+0x888>
 800abac:	f5a2 7268 	sub.w	r2, r2, #928	@ 0x3a0
 800abb0:	4294      	cmp	r4, r2
 800abb2:	d011      	beq.n	800abd8 <HAL_DMAEx_MultiBufferStart_IT+0x888>
 800abb4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800abb8:	4294      	cmp	r4, r2
 800abba:	bf14      	ite	ne
 800abbc:	f04f 7280 	movne.w	r2, #16777216	@ 0x1000000
 800abc0:	f44f 2280 	moveq.w	r2, #262144	@ 0x40000
 800abc4:	4987      	ldr	r1, [pc, #540]	@ (800ade4 <HAL_DMAEx_MultiBufferStart_IT+0xa94>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800abc6:	429c      	cmp	r4, r3
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800abc8:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800abca:	f040 80cb 	bne.w	800ad64 <HAL_DMAEx_MultiBufferStart_IT+0xa14>
 800abce:	2301      	movs	r3, #1
 800abd0:	e0fa      	b.n	800adc8 <HAL_DMAEx_MultiBufferStart_IT+0xa78>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800abd2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800abd6:	e7f5      	b.n	800abc4 <HAL_DMAEx_MultiBufferStart_IT+0x874>
 800abd8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800abdc:	e7f2      	b.n	800abc4 <HAL_DMAEx_MultiBufferStart_IT+0x874>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800abde:	4b80      	ldr	r3, [pc, #512]	@ (800ade0 <HAL_DMAEx_MultiBufferStart_IT+0xa90>)
 800abe0:	429c      	cmp	r4, r3
 800abe2:	f43f af30 	beq.w	800aa46 <HAL_DMAEx_MultiBufferStart_IT+0x6f6>
 800abe6:	f5a3 7368 	sub.w	r3, r3, #928	@ 0x3a0
 800abea:	429c      	cmp	r4, r3
 800abec:	f43f af2b 	beq.w	800aa46 <HAL_DMAEx_MultiBufferStart_IT+0x6f6>
 800abf0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800abf4:	429c      	cmp	r4, r3
 800abf6:	f43f af26 	beq.w	800aa46 <HAL_DMAEx_MultiBufferStart_IT+0x6f6>
 800abfa:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 800abfe:	429c      	cmp	r4, r3
 800ac00:	d038      	beq.n	800ac74 <HAL_DMAEx_MultiBufferStart_IT+0x924>
 800ac02:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ac06:	429c      	cmp	r4, r3
 800ac08:	d034      	beq.n	800ac74 <HAL_DMAEx_MultiBufferStart_IT+0x924>
 800ac0a:	f5a3 7368 	sub.w	r3, r3, #928	@ 0x3a0
 800ac0e:	429c      	cmp	r4, r3
 800ac10:	d030      	beq.n	800ac74 <HAL_DMAEx_MultiBufferStart_IT+0x924>
 800ac12:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ac16:	429c      	cmp	r4, r3
 800ac18:	d02c      	beq.n	800ac74 <HAL_DMAEx_MultiBufferStart_IT+0x924>
 800ac1a:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 800ac1e:	429c      	cmp	r4, r3
 800ac20:	d02a      	beq.n	800ac78 <HAL_DMAEx_MultiBufferStart_IT+0x928>
 800ac22:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ac26:	429c      	cmp	r4, r3
 800ac28:	d026      	beq.n	800ac78 <HAL_DMAEx_MultiBufferStart_IT+0x928>
 800ac2a:	f5a3 7368 	sub.w	r3, r3, #928	@ 0x3a0
 800ac2e:	429c      	cmp	r4, r3
 800ac30:	d022      	beq.n	800ac78 <HAL_DMAEx_MultiBufferStart_IT+0x928>
 800ac32:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ac36:	429c      	cmp	r4, r3
 800ac38:	bf14      	ite	ne
 800ac3a:	f44f 0380 	movne.w	r3, #4194304	@ 0x400000
 800ac3e:	f44f 3380 	moveq.w	r3, #65536	@ 0x10000
 800ac42:	4a69      	ldr	r2, [pc, #420]	@ (800ade8 <HAL_DMAEx_MultiBufferStart_IT+0xa98>)
 800ac44:	60d3      	str	r3, [r2, #12]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800ac46:	6823      	ldr	r3, [r4, #0]
 800ac48:	f043 0316 	orr.w	r3, r3, #22
 800ac4c:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800ac4e:	6963      	ldr	r3, [r4, #20]
 800ac50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac54:	6163      	str	r3, [r4, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800ac56:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800ac58:	b90b      	cbnz	r3, 800ac5e <HAL_DMAEx_MultiBufferStart_IT+0x90e>
 800ac5a:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 800ac5c:	b11b      	cbz	r3, 800ac66 <HAL_DMAEx_MultiBufferStart_IT+0x916>
      hdma->Instance->CR  |= DMA_IT_HT;
 800ac5e:	6823      	ldr	r3, [r4, #0]
 800ac60:	f043 0308 	orr.w	r3, r3, #8
 800ac64:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma); 
 800ac66:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ac68:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma); 
 800ac6a:	f043 0301 	orr.w	r3, r3, #1
 800ac6e:	6023      	str	r3, [r4, #0]
 800ac70:	f7ff bb76 	b.w	800a360 <HAL_DMAEx_MultiBufferStart_IT+0x10>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800ac74:	2340      	movs	r3, #64	@ 0x40
 800ac76:	e7e4      	b.n	800ac42 <HAL_DMAEx_MultiBufferStart_IT+0x8f2>
 800ac78:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800ac7c:	e7e1      	b.n	800ac42 <HAL_DMAEx_MultiBufferStart_IT+0x8f2>
 800ac7e:	4b58      	ldr	r3, [pc, #352]	@ (800ade0 <HAL_DMAEx_MultiBufferStart_IT+0xa90>)
 800ac80:	429c      	cmp	r4, r3
 800ac82:	f43f af1f 	beq.w	800aac4 <HAL_DMAEx_MultiBufferStart_IT+0x774>
 800ac86:	f5a3 7368 	sub.w	r3, r3, #928	@ 0x3a0
 800ac8a:	429c      	cmp	r4, r3
 800ac8c:	f43f af1a 	beq.w	800aac4 <HAL_DMAEx_MultiBufferStart_IT+0x774>
 800ac90:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ac94:	429c      	cmp	r4, r3
 800ac96:	f43f af15 	beq.w	800aac4 <HAL_DMAEx_MultiBufferStart_IT+0x774>
 800ac9a:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 800ac9e:	429c      	cmp	r4, r3
 800aca0:	d022      	beq.n	800ace8 <HAL_DMAEx_MultiBufferStart_IT+0x998>
 800aca2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800aca6:	429c      	cmp	r4, r3
 800aca8:	d01e      	beq.n	800ace8 <HAL_DMAEx_MultiBufferStart_IT+0x998>
 800acaa:	f5a3 7368 	sub.w	r3, r3, #928	@ 0x3a0
 800acae:	429c      	cmp	r4, r3
 800acb0:	d01a      	beq.n	800ace8 <HAL_DMAEx_MultiBufferStart_IT+0x998>
 800acb2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800acb6:	429c      	cmp	r4, r3
 800acb8:	d016      	beq.n	800ace8 <HAL_DMAEx_MultiBufferStart_IT+0x998>
 800acba:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 800acbe:	429c      	cmp	r4, r3
 800acc0:	d014      	beq.n	800acec <HAL_DMAEx_MultiBufferStart_IT+0x99c>
 800acc2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800acc6:	429c      	cmp	r4, r3
 800acc8:	d010      	beq.n	800acec <HAL_DMAEx_MultiBufferStart_IT+0x99c>
 800acca:	f5a3 7368 	sub.w	r3, r3, #928	@ 0x3a0
 800acce:	429c      	cmp	r4, r3
 800acd0:	d00c      	beq.n	800acec <HAL_DMAEx_MultiBufferStart_IT+0x99c>
 800acd2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800acd6:	429c      	cmp	r4, r3
 800acd8:	bf14      	ite	ne
 800acda:	f44f 0380 	movne.w	r3, #4194304	@ 0x400000
 800acde:	f44f 3380 	moveq.w	r3, #65536	@ 0x10000
 800ace2:	4a41      	ldr	r2, [pc, #260]	@ (800ade8 <HAL_DMAEx_MultiBufferStart_IT+0xa98>)
 800ace4:	6093      	str	r3, [r2, #8]
 800ace6:	e7ae      	b.n	800ac46 <HAL_DMAEx_MultiBufferStart_IT+0x8f6>
 800ace8:	2340      	movs	r3, #64	@ 0x40
 800acea:	e7fa      	b.n	800ace2 <HAL_DMAEx_MultiBufferStart_IT+0x992>
 800acec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800acf0:	e7f7      	b.n	800ace2 <HAL_DMAEx_MultiBufferStart_IT+0x992>
 800acf2:	4b3b      	ldr	r3, [pc, #236]	@ (800ade0 <HAL_DMAEx_MultiBufferStart_IT+0xa90>)
 800acf4:	429c      	cmp	r4, r3
 800acf6:	f43f af24 	beq.w	800ab42 <HAL_DMAEx_MultiBufferStart_IT+0x7f2>
 800acfa:	f5a3 7368 	sub.w	r3, r3, #928	@ 0x3a0
 800acfe:	429c      	cmp	r4, r3
 800ad00:	f43f af1f 	beq.w	800ab42 <HAL_DMAEx_MultiBufferStart_IT+0x7f2>
 800ad04:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ad08:	429c      	cmp	r4, r3
 800ad0a:	f43f af1a 	beq.w	800ab42 <HAL_DMAEx_MultiBufferStart_IT+0x7f2>
 800ad0e:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 800ad12:	429c      	cmp	r4, r3
 800ad14:	d021      	beq.n	800ad5a <HAL_DMAEx_MultiBufferStart_IT+0xa0a>
 800ad16:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ad1a:	429c      	cmp	r4, r3
 800ad1c:	d01d      	beq.n	800ad5a <HAL_DMAEx_MultiBufferStart_IT+0xa0a>
 800ad1e:	f5a3 7368 	sub.w	r3, r3, #928	@ 0x3a0
 800ad22:	429c      	cmp	r4, r3
 800ad24:	d019      	beq.n	800ad5a <HAL_DMAEx_MultiBufferStart_IT+0xa0a>
 800ad26:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ad2a:	429c      	cmp	r4, r3
 800ad2c:	d015      	beq.n	800ad5a <HAL_DMAEx_MultiBufferStart_IT+0xa0a>
 800ad2e:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 800ad32:	429c      	cmp	r4, r3
 800ad34:	d013      	beq.n	800ad5e <HAL_DMAEx_MultiBufferStart_IT+0xa0e>
 800ad36:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ad3a:	429c      	cmp	r4, r3
 800ad3c:	d00f      	beq.n	800ad5e <HAL_DMAEx_MultiBufferStart_IT+0xa0e>
 800ad3e:	f5a3 7368 	sub.w	r3, r3, #928	@ 0x3a0
 800ad42:	429c      	cmp	r4, r3
 800ad44:	d00b      	beq.n	800ad5e <HAL_DMAEx_MultiBufferStart_IT+0xa0e>
 800ad46:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ad4a:	429c      	cmp	r4, r3
 800ad4c:	bf14      	ite	ne
 800ad4e:	f44f 0380 	movne.w	r3, #4194304	@ 0x400000
 800ad52:	f44f 3380 	moveq.w	r3, #65536	@ 0x10000
 800ad56:	4a23      	ldr	r2, [pc, #140]	@ (800ade4 <HAL_DMAEx_MultiBufferStart_IT+0xa94>)
 800ad58:	e774      	b.n	800ac44 <HAL_DMAEx_MultiBufferStart_IT+0x8f4>
 800ad5a:	2340      	movs	r3, #64	@ 0x40
 800ad5c:	e7fb      	b.n	800ad56 <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 800ad5e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800ad62:	e7f8      	b.n	800ad56 <HAL_DMAEx_MultiBufferStart_IT+0xa06>
 800ad64:	4b1e      	ldr	r3, [pc, #120]	@ (800ade0 <HAL_DMAEx_MultiBufferStart_IT+0xa90>)
 800ad66:	429c      	cmp	r4, r3
 800ad68:	f43f af31 	beq.w	800abce <HAL_DMAEx_MultiBufferStart_IT+0x87e>
 800ad6c:	f5a3 7368 	sub.w	r3, r3, #928	@ 0x3a0
 800ad70:	429c      	cmp	r4, r3
 800ad72:	f43f af2c 	beq.w	800abce <HAL_DMAEx_MultiBufferStart_IT+0x87e>
 800ad76:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ad7a:	429c      	cmp	r4, r3
 800ad7c:	f43f af27 	beq.w	800abce <HAL_DMAEx_MultiBufferStart_IT+0x87e>
 800ad80:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 800ad84:	429c      	cmp	r4, r3
 800ad86:	d021      	beq.n	800adcc <HAL_DMAEx_MultiBufferStart_IT+0xa7c>
 800ad88:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ad8c:	429c      	cmp	r4, r3
 800ad8e:	d01d      	beq.n	800adcc <HAL_DMAEx_MultiBufferStart_IT+0xa7c>
 800ad90:	f5a3 7368 	sub.w	r3, r3, #928	@ 0x3a0
 800ad94:	429c      	cmp	r4, r3
 800ad96:	d019      	beq.n	800adcc <HAL_DMAEx_MultiBufferStart_IT+0xa7c>
 800ad98:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ad9c:	429c      	cmp	r4, r3
 800ad9e:	d015      	beq.n	800adcc <HAL_DMAEx_MultiBufferStart_IT+0xa7c>
 800ada0:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 800ada4:	429c      	cmp	r4, r3
 800ada6:	d013      	beq.n	800add0 <HAL_DMAEx_MultiBufferStart_IT+0xa80>
 800ada8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800adac:	429c      	cmp	r4, r3
 800adae:	d00f      	beq.n	800add0 <HAL_DMAEx_MultiBufferStart_IT+0xa80>
 800adb0:	f5a3 7368 	sub.w	r3, r3, #928	@ 0x3a0
 800adb4:	429c      	cmp	r4, r3
 800adb6:	d00b      	beq.n	800add0 <HAL_DMAEx_MultiBufferStart_IT+0xa80>
 800adb8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800adbc:	429c      	cmp	r4, r3
 800adbe:	bf14      	ite	ne
 800adc0:	f44f 0380 	movne.w	r3, #4194304	@ 0x400000
 800adc4:	f44f 3380 	moveq.w	r3, #65536	@ 0x10000
 800adc8:	4a06      	ldr	r2, [pc, #24]	@ (800ade4 <HAL_DMAEx_MultiBufferStart_IT+0xa94>)
 800adca:	e78b      	b.n	800ace4 <HAL_DMAEx_MultiBufferStart_IT+0x994>
 800adcc:	2340      	movs	r3, #64	@ 0x40
 800adce:	e7fb      	b.n	800adc8 <HAL_DMAEx_MultiBufferStart_IT+0xa78>
 800add0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800add4:	e7f8      	b.n	800adc8 <HAL_DMAEx_MultiBufferStart_IT+0xa78>
    __HAL_UNLOCK(hdma);	  
 800add6:	f880 4034 	strb.w	r4, [r0, #52]	@ 0x34
  __HAL_LOCK(hdma);
 800adda:	2002      	movs	r0, #2
 800addc:	f7ff bac0 	b.w	800a360 <HAL_DMAEx_MultiBufferStart_IT+0x10>
 800ade0:	40026410 	.word	0x40026410
 800ade4:	40026000 	.word	0x40026000
 800ade8:	40026400 	.word	0x40026400

0800adec <HAL_DMAEx_ChangeMemory>:
    hdma->Instance->M0AR = Address;
 800adec:	6803      	ldr	r3, [r0, #0]
  if(memory == MEMORY0)
 800adee:	b912      	cbnz	r2, 800adf6 <HAL_DMAEx_ChangeMemory+0xa>
    hdma->Instance->M0AR = Address;
 800adf0:	60d9      	str	r1, [r3, #12]
}
 800adf2:	2000      	movs	r0, #0
 800adf4:	4770      	bx	lr
    hdma->Instance->M1AR = Address;
 800adf6:	6119      	str	r1, [r3, #16]
 800adf8:	e7fb      	b.n	800adf2 <HAL_DMAEx_ChangeMemory+0x6>
	...

0800adfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800adfc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800ae00:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ae02:	f8df 91bc 	ldr.w	r9, [pc, #444]	@ 800afc0 <HAL_GPIO_Init+0x1c4>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800ae06:	4a6c      	ldr	r2, [pc, #432]	@ (800afb8 <HAL_GPIO_Init+0x1bc>)
    ioposition = ((uint32_t)0x01) << position;
 800ae08:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800ae0a:	680d      	ldr	r5, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 800ae0c:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800ae0e:	ea04 0605 	and.w	r6, r4, r5
    if(iocurrent == ioposition)
 800ae12:	43ac      	bics	r4, r5
 800ae14:	f040 80b7 	bne.w	800af86 <HAL_GPIO_Init+0x18a>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800ae18:	684d      	ldr	r5, [r1, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800ae1a:	2703      	movs	r7, #3
 800ae1c:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800ae20:	f005 0403 	and.w	r4, r5, #3
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800ae24:	fa07 fc0e 	lsl.w	ip, r7, lr
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800ae28:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800ae2a:	ea6f 0c0c 	mvn.w	ip, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800ae2e:	2f01      	cmp	r7, #1
 800ae30:	d834      	bhi.n	800ae9c <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 800ae32:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800ae34:	ea07 080c 	and.w	r8, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2));
 800ae38:	68cf      	ldr	r7, [r1, #12]
 800ae3a:	fa07 f70e 	lsl.w	r7, r7, lr
 800ae3e:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OSPEEDR = temp;
 800ae42:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800ae44:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800ae46:	ea27 0806 	bic.w	r8, r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800ae4a:	f3c5 1700 	ubfx	r7, r5, #4, #1
 800ae4e:	409f      	lsls	r7, r3
 800ae50:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 800ae54:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 800ae56:	68c7      	ldr	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800ae58:	2c02      	cmp	r4, #2
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800ae5a:	ea07 080c 	and.w	r8, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800ae5e:	688f      	ldr	r7, [r1, #8]
 800ae60:	fa07 f70e 	lsl.w	r7, r7, lr
 800ae64:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->PUPDR = temp;
 800ae68:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800ae6a:	d119      	bne.n	800aea0 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3];
 800ae6c:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800ae70:	f003 0a07 	and.w	sl, r3, #7
 800ae74:	f04f 0b0f 	mov.w	fp, #15
 800ae78:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 800ae7c:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = GPIOx->AFR[position >> 3];
 800ae80:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800ae84:	fa0b fb0a 	lsl.w	fp, fp, sl
 800ae88:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800ae8c:	690f      	ldr	r7, [r1, #16]
 800ae8e:	fa07 f70a 	lsl.w	r7, r7, sl
 800ae92:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3] = temp;
 800ae96:	f8c8 7020 	str.w	r7, [r8, #32]
 800ae9a:	e001      	b.n	800aea0 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800ae9c:	2c03      	cmp	r4, #3
 800ae9e:	d1da      	bne.n	800ae56 <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 800aea0:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800aea2:	fa04 f40e 	lsl.w	r4, r4, lr
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800aea6:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800aeaa:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800aeae:	ea44 0407 	orr.w	r4, r4, r7
      GPIOx->MODER = temp;
 800aeb2:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800aeb4:	d067      	beq.n	800af86 <HAL_GPIO_Init+0x18a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800aeb6:	f8d9 4044 	ldr.w	r4, [r9, #68]	@ 0x44
 800aeba:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800aebe:	f003 0c03 	and.w	ip, r3, #3
 800aec2:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800aec6:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 800aeca:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800aece:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800aed2:	f8c9 4044 	str.w	r4, [r9, #68]	@ 0x44
 800aed6:	f507 379c 	add.w	r7, r7, #79872	@ 0x13800
 800aeda:	f8d9 4044 	ldr.w	r4, [r9, #68]	@ 0x44
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800aede:	fa0e fe0c 	lsl.w	lr, lr, ip
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800aee2:	f404 4480 	and.w	r4, r4, #16384	@ 0x4000
 800aee6:	9401      	str	r4, [sp, #4]
 800aee8:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 800aeea:	68bc      	ldr	r4, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800aeec:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800aef0:	4c32      	ldr	r4, [pc, #200]	@ (800afbc <HAL_GPIO_Init+0x1c0>)
 800aef2:	42a0      	cmp	r0, r4
 800aef4:	d04e      	beq.n	800af94 <HAL_GPIO_Init+0x198>
 800aef6:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800aefa:	42a0      	cmp	r0, r4
 800aefc:	d04c      	beq.n	800af98 <HAL_GPIO_Init+0x19c>
 800aefe:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800af02:	42a0      	cmp	r0, r4
 800af04:	d04a      	beq.n	800af9c <HAL_GPIO_Init+0x1a0>
 800af06:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800af0a:	42a0      	cmp	r0, r4
 800af0c:	d048      	beq.n	800afa0 <HAL_GPIO_Init+0x1a4>
 800af0e:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800af12:	42a0      	cmp	r0, r4
 800af14:	d046      	beq.n	800afa4 <HAL_GPIO_Init+0x1a8>
 800af16:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800af1a:	42a0      	cmp	r0, r4
 800af1c:	d044      	beq.n	800afa8 <HAL_GPIO_Init+0x1ac>
 800af1e:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800af22:	42a0      	cmp	r0, r4
 800af24:	d042      	beq.n	800afac <HAL_GPIO_Init+0x1b0>
 800af26:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800af2a:	42a0      	cmp	r0, r4
 800af2c:	d040      	beq.n	800afb0 <HAL_GPIO_Init+0x1b4>
 800af2e:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800af32:	42a0      	cmp	r0, r4
 800af34:	d03e      	beq.n	800afb4 <HAL_GPIO_Init+0x1b8>
 800af36:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800af3a:	42a0      	cmp	r0, r4
 800af3c:	bf14      	ite	ne
 800af3e:	240a      	movne	r4, #10
 800af40:	2409      	moveq	r4, #9
 800af42:	fa04 f40c 	lsl.w	r4, r4, ip
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800af46:	f415 1f80 	tst.w	r5, #1048576	@ 0x100000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800af4a:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 800af4e:	60bc      	str	r4, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 800af50:	ea6f 0706 	mvn.w	r7, r6
        temp = EXTI->RTSR;
 800af54:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 800af56:	bf0c      	ite	eq
 800af58:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 800af5a:	4334      	orrne	r4, r6
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800af5c:	f415 1f00 	tst.w	r5, #2097152	@ 0x200000
        EXTI->RTSR = temp;
 800af60:	6094      	str	r4, [r2, #8]
        temp = EXTI->FTSR;
 800af62:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 800af64:	bf0c      	ite	eq
 800af66:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 800af68:	4334      	orrne	r4, r6
        }
        EXTI->FTSR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800af6a:	f415 3f00 	tst.w	r5, #131072	@ 0x20000
        EXTI->FTSR = temp;
 800af6e:	60d4      	str	r4, [r2, #12]
        temp = EXTI->EMR;
 800af70:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 800af72:	bf0c      	ite	eq
 800af74:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 800af76:	4334      	orrne	r4, r6
        EXTI->EMR = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800af78:	03ed      	lsls	r5, r5, #15
        EXTI->EMR = temp;
 800af7a:	6054      	str	r4, [r2, #4]
        temp = EXTI->IMR;
 800af7c:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800af7e:	bf54      	ite	pl
 800af80:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 800af82:	4334      	orrmi	r4, r6
        }
        EXTI->IMR = temp;
 800af84:	6014      	str	r4, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800af86:	3301      	adds	r3, #1
 800af88:	2b10      	cmp	r3, #16
 800af8a:	f47f af3d 	bne.w	800ae08 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 800af8e:	b003      	add	sp, #12
 800af90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800af94:	2400      	movs	r4, #0
 800af96:	e7d4      	b.n	800af42 <HAL_GPIO_Init+0x146>
 800af98:	2401      	movs	r4, #1
 800af9a:	e7d2      	b.n	800af42 <HAL_GPIO_Init+0x146>
 800af9c:	2402      	movs	r4, #2
 800af9e:	e7d0      	b.n	800af42 <HAL_GPIO_Init+0x146>
 800afa0:	2403      	movs	r4, #3
 800afa2:	e7ce      	b.n	800af42 <HAL_GPIO_Init+0x146>
 800afa4:	2404      	movs	r4, #4
 800afa6:	e7cc      	b.n	800af42 <HAL_GPIO_Init+0x146>
 800afa8:	2405      	movs	r4, #5
 800afaa:	e7ca      	b.n	800af42 <HAL_GPIO_Init+0x146>
 800afac:	2406      	movs	r4, #6
 800afae:	e7c8      	b.n	800af42 <HAL_GPIO_Init+0x146>
 800afb0:	2407      	movs	r4, #7
 800afb2:	e7c6      	b.n	800af42 <HAL_GPIO_Init+0x146>
 800afb4:	2408      	movs	r4, #8
 800afb6:	e7c4      	b.n	800af42 <HAL_GPIO_Init+0x146>
 800afb8:	40013c00 	.word	0x40013c00
 800afbc:	40020000 	.word	0x40020000
 800afc0:	40023800 	.word	0x40023800

0800afc4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800afc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800afc8:	2200      	movs	r2, #0
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800afca:	f04f 0a01 	mov.w	sl, #1

    if(iocurrent == ioposition)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800afce:	f04f 080f 	mov.w	r8, #15
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800afd2:	f04f 0b03 	mov.w	fp, #3
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800afd6:	4c46      	ldr	r4, [pc, #280]	@ (800b0f0 <HAL_GPIO_DeInit+0x12c>)
    ioposition = ((uint32_t)0x01) << position;
 800afd8:	fa0a fc02 	lsl.w	ip, sl, r2
    if(iocurrent == ioposition)
 800afdc:	ea3c 0301 	bics.w	r3, ip, r1
    iocurrent = (GPIO_Pin) & ioposition;
 800afe0:	ea0c 0601 	and.w	r6, ip, r1
    if(iocurrent == ioposition)
 800afe4:	d16c      	bne.n	800b0c0 <HAL_GPIO_DeInit+0xfc>
      tmp = SYSCFG->EXTICR[position >> 2];
 800afe6:	f022 0503 	bic.w	r5, r2, #3
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800afea:	f002 0703 	and.w	r7, r2, #3
 800afee:	f105 4580 	add.w	r5, r5, #1073741824	@ 0x40000000
 800aff2:	00bf      	lsls	r7, r7, #2
 800aff4:	f505 359c 	add.w	r5, r5, #79872	@ 0x13800
 800aff8:	fa08 f907 	lsl.w	r9, r8, r7
      tmp = SYSCFG->EXTICR[position >> 2];
 800affc:	68ab      	ldr	r3, [r5, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800affe:	ea09 0e03 	and.w	lr, r9, r3
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800b002:	4b3c      	ldr	r3, [pc, #240]	@ (800b0f4 <HAL_GPIO_DeInit+0x130>)
 800b004:	4298      	cmp	r0, r3
 800b006:	d060      	beq.n	800b0ca <HAL_GPIO_DeInit+0x106>
 800b008:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b00c:	4298      	cmp	r0, r3
 800b00e:	d05e      	beq.n	800b0ce <HAL_GPIO_DeInit+0x10a>
 800b010:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b014:	4298      	cmp	r0, r3
 800b016:	d05c      	beq.n	800b0d2 <HAL_GPIO_DeInit+0x10e>
 800b018:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b01c:	4298      	cmp	r0, r3
 800b01e:	d05a      	beq.n	800b0d6 <HAL_GPIO_DeInit+0x112>
 800b020:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b024:	4298      	cmp	r0, r3
 800b026:	d058      	beq.n	800b0da <HAL_GPIO_DeInit+0x116>
 800b028:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b02c:	4298      	cmp	r0, r3
 800b02e:	d056      	beq.n	800b0de <HAL_GPIO_DeInit+0x11a>
 800b030:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b034:	4298      	cmp	r0, r3
 800b036:	d054      	beq.n	800b0e2 <HAL_GPIO_DeInit+0x11e>
 800b038:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b03c:	4298      	cmp	r0, r3
 800b03e:	d052      	beq.n	800b0e6 <HAL_GPIO_DeInit+0x122>
 800b040:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b044:	4298      	cmp	r0, r3
 800b046:	d050      	beq.n	800b0ea <HAL_GPIO_DeInit+0x126>
 800b048:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b04c:	4298      	cmp	r0, r3
 800b04e:	bf0c      	ite	eq
 800b050:	2309      	moveq	r3, #9
 800b052:	230a      	movne	r3, #10
 800b054:	40bb      	lsls	r3, r7
 800b056:	4573      	cmp	r3, lr
 800b058:	d113      	bne.n	800b082 <HAL_GPIO_DeInit+0xbe>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800b05a:	6823      	ldr	r3, [r4, #0]
 800b05c:	ea23 0306 	bic.w	r3, r3, r6
 800b060:	6023      	str	r3, [r4, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800b062:	6863      	ldr	r3, [r4, #4]
 800b064:	ea23 0306 	bic.w	r3, r3, r6
 800b068:	6063      	str	r3, [r4, #4]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800b06a:	68e3      	ldr	r3, [r4, #12]
 800b06c:	ea23 0306 	bic.w	r3, r3, r6
 800b070:	60e3      	str	r3, [r4, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800b072:	68a3      	ldr	r3, [r4, #8]
 800b074:	ea23 0306 	bic.w	r3, r3, r6
 800b078:	60a3      	str	r3, [r4, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 800b07a:	68ab      	ldr	r3, [r5, #8]
 800b07c:	ea23 0309 	bic.w	r3, r3, r9
 800b080:	60ab      	str	r3, [r5, #8]
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800b082:	0053      	lsls	r3, r2, #1
 800b084:	6805      	ldr	r5, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800b086:	08d6      	lsrs	r6, r2, #3
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800b088:	fa0b f303 	lsl.w	r3, fp, r3
 800b08c:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 800b090:	ea25 0503 	bic.w	r5, r5, r3
 800b094:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800b096:	f002 0507 	and.w	r5, r2, #7
 800b09a:	6a37      	ldr	r7, [r6, #32]
 800b09c:	00ad      	lsls	r5, r5, #2
 800b09e:	fa08 f505 	lsl.w	r5, r8, r5
 800b0a2:	ea27 0705 	bic.w	r7, r7, r5
 800b0a6:	6237      	str	r7, [r6, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800b0a8:	68c5      	ldr	r5, [r0, #12]
 800b0aa:	ea25 0503 	bic.w	r5, r5, r3
 800b0ae:	60c5      	str	r5, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b0b0:	6845      	ldr	r5, [r0, #4]
 800b0b2:	ea25 050c 	bic.w	r5, r5, ip
 800b0b6:	6045      	str	r5, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800b0b8:	6885      	ldr	r5, [r0, #8]
 800b0ba:	ea25 0303 	bic.w	r3, r5, r3
 800b0be:	6083      	str	r3, [r0, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 800b0c0:	3201      	adds	r2, #1
 800b0c2:	2a10      	cmp	r2, #16
 800b0c4:	d188      	bne.n	800afd8 <HAL_GPIO_DeInit+0x14>
    }
  }
}
 800b0c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	e7c2      	b.n	800b054 <HAL_GPIO_DeInit+0x90>
 800b0ce:	2301      	movs	r3, #1
 800b0d0:	e7c0      	b.n	800b054 <HAL_GPIO_DeInit+0x90>
 800b0d2:	2302      	movs	r3, #2
 800b0d4:	e7be      	b.n	800b054 <HAL_GPIO_DeInit+0x90>
 800b0d6:	2303      	movs	r3, #3
 800b0d8:	e7bc      	b.n	800b054 <HAL_GPIO_DeInit+0x90>
 800b0da:	2304      	movs	r3, #4
 800b0dc:	e7ba      	b.n	800b054 <HAL_GPIO_DeInit+0x90>
 800b0de:	2305      	movs	r3, #5
 800b0e0:	e7b8      	b.n	800b054 <HAL_GPIO_DeInit+0x90>
 800b0e2:	2306      	movs	r3, #6
 800b0e4:	e7b6      	b.n	800b054 <HAL_GPIO_DeInit+0x90>
 800b0e6:	2307      	movs	r3, #7
 800b0e8:	e7b4      	b.n	800b054 <HAL_GPIO_DeInit+0x90>
 800b0ea:	2308      	movs	r3, #8
 800b0ec:	e7b2      	b.n	800b054 <HAL_GPIO_DeInit+0x90>
 800b0ee:	bf00      	nop
 800b0f0:	40013c00 	.word	0x40013c00
 800b0f4:	40020000 	.word	0x40020000

0800b0f8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800b0f8:	6903      	ldr	r3, [r0, #16]
 800b0fa:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800b0fc:	bf14      	ite	ne
 800b0fe:	2001      	movne	r0, #1
 800b100:	2000      	moveq	r0, #0
 800b102:	4770      	bx	lr

0800b104 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b104:	b10a      	cbz	r2, 800b10a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800b106:	6181      	str	r1, [r0, #24]
  }
}
 800b108:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800b10a:	0409      	lsls	r1, r1, #16
 800b10c:	e7fb      	b.n	800b106 <HAL_GPIO_WritePin+0x2>

0800b10e <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800b10e:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800b110:	ea01 0203 	and.w	r2, r1, r3
 800b114:	ea21 0103 	bic.w	r1, r1, r3
 800b118:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b11c:	6181      	str	r1, [r0, #24]
}
 800b11e:	4770      	bx	lr

0800b120 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800b120:	6803      	ldr	r3, [r0, #0]
 800b122:	699a      	ldr	r2, [r3, #24]
 800b124:	0791      	lsls	r1, r2, #30
 800b126:	d501      	bpl.n	800b12c <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 800b128:	2200      	movs	r2, #0
 800b12a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b12c:	699a      	ldr	r2, [r3, #24]
 800b12e:	07d2      	lsls	r2, r2, #31
 800b130:	d403      	bmi.n	800b13a <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800b132:	699a      	ldr	r2, [r3, #24]
 800b134:	f042 0201 	orr.w	r2, r2, #1
 800b138:	619a      	str	r2, [r3, #24]
  }
}
 800b13a:	4770      	bx	lr

0800b13c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800b13c:	b530      	push	{r4, r5, lr}
 800b13e:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b140:	f3c1 0109 	ubfx	r1, r1, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800b144:	6804      	ldr	r4, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b146:	432b      	orrs	r3, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 800b148:	6860      	ldr	r0, [r4, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b14a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 800b14e:	4a05      	ldr	r2, [pc, #20]	@ (800b164 <I2C_TransferConfig+0x28>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b150:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 800b152:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b156:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 800b15a:	ea20 0002 	bic.w	r0, r0, r2
 800b15e:	4303      	orrs	r3, r0
 800b160:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800b162:	bd30      	pop	{r4, r5, pc}
 800b164:	03ff63ff 	.word	0x03ff63ff

0800b168 <I2C_Enable_IRQ>:
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800b168:	6b42      	ldr	r2, [r0, #52]	@ 0x34
      tmpisr |= I2C_IT_TCI;
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800b16a:	b20b      	sxth	r3, r1
{
 800b16c:	b510      	push	{r4, lr}
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800b16e:	4c1a      	ldr	r4, [pc, #104]	@ (800b1d8 <I2C_Enable_IRQ+0x70>)
 800b170:	42a2      	cmp	r2, r4
 800b172:	d002      	beq.n	800b17a <I2C_Enable_IRQ+0x12>
 800b174:	4c19      	ldr	r4, [pc, #100]	@ (800b1dc <I2C_Enable_IRQ+0x74>)
 800b176:	42a2      	cmp	r2, r4
 800b178:	d111      	bne.n	800b19e <I2C_Enable_IRQ+0x36>
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	db25      	blt.n	800b1ca <I2C_Enable_IRQ+0x62>
    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800b17e:	2910      	cmp	r1, #16
 800b180:	d025      	beq.n	800b1ce <I2C_Enable_IRQ+0x66>
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800b182:	2920      	cmp	r1, #32
 800b184:	d025      	beq.n	800b1d2 <I2C_Enable_IRQ+0x6a>
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800b186:	f1a1 0c40 	sub.w	ip, r1, #64	@ 0x40
 800b18a:	f1dc 0100 	rsbs	r1, ip, #0
 800b18e:	eb41 010c 	adc.w	r1, r1, ip
 800b192:	018b      	lsls	r3, r1, #6
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800b194:	6801      	ldr	r1, [r0, #0]
 800b196:	680a      	ldr	r2, [r1, #0]
 800b198:	4313      	orrs	r3, r2
 800b19a:	600b      	str	r3, [r1, #0]
}
 800b19c:	bd10      	pop	{r4, pc}
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	bfac      	ite	ge
 800b1a2:	2300      	movge	r3, #0
 800b1a4:	23b8      	movlt	r3, #184	@ 0xb8
    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800b1a6:	07cc      	lsls	r4, r1, #31
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800b1a8:	bf48      	it	mi
 800b1aa:	f043 03f2 	orrmi.w	r3, r3, #242	@ 0xf2
    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800b1ae:	078a      	lsls	r2, r1, #30
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800b1b0:	bf48      	it	mi
 800b1b2:	f043 03f4 	orrmi.w	r3, r3, #244	@ 0xf4
    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800b1b6:	2910      	cmp	r1, #16
 800b1b8:	d102      	bne.n	800b1c0 <I2C_Enable_IRQ+0x58>
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800b1ba:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800b1be:	e7e9      	b.n	800b194 <I2C_Enable_IRQ+0x2c>
 800b1c0:	2920      	cmp	r1, #32
 800b1c2:	d1e7      	bne.n	800b194 <I2C_Enable_IRQ+0x2c>
      tmpisr |= I2C_IT_STOPI;
 800b1c4:	f043 0320 	orr.w	r3, r3, #32
 800b1c8:	e7e4      	b.n	800b194 <I2C_Enable_IRQ+0x2c>
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b1ca:	23b8      	movs	r3, #184	@ 0xb8
 800b1cc:	e7e2      	b.n	800b194 <I2C_Enable_IRQ+0x2c>
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800b1ce:	2390      	movs	r3, #144	@ 0x90
 800b1d0:	e7e0      	b.n	800b194 <I2C_Enable_IRQ+0x2c>
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800b1d2:	2360      	movs	r3, #96	@ 0x60
 800b1d4:	e7de      	b.n	800b194 <I2C_Enable_IRQ+0x2c>
 800b1d6:	bf00      	nop
 800b1d8:	0800be35 	.word	0x0800be35
 800b1dc:	0800c065 	.word	0x0800c065

0800b1e0 <I2C_Disable_IRQ>:
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800b1e0:	f011 0301 	ands.w	r3, r1, #1
 800b1e4:	d007      	beq.n	800b1f6 <I2C_Disable_IRQ+0x16>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800b1e6:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800b1ea:	f003 0328 	and.w	r3, r3, #40	@ 0x28
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800b1ee:	2b28      	cmp	r3, #40	@ 0x28
 800b1f0:	bf14      	ite	ne
 800b1f2:	23f2      	movne	r3, #242	@ 0xf2
 800b1f4:	2342      	moveq	r3, #66	@ 0x42
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800b1f6:	078a      	lsls	r2, r1, #30
 800b1f8:	d509      	bpl.n	800b20e <I2C_Disable_IRQ+0x2e>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800b1fa:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 800b1fe:	f002 0228 	and.w	r2, r2, #40	@ 0x28
 800b202:	2a28      	cmp	r2, #40	@ 0x28
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800b204:	bf0c      	ite	eq
 800b206:	f043 0344 	orreq.w	r3, r3, #68	@ 0x44
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b20a:	f043 03f4 	orrne.w	r3, r3, #244	@ 0xf4
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800b20e:	040a      	lsls	r2, r1, #16
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800b210:	6801      	ldr	r1, [r0, #0]
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b212:	bf48      	it	mi
 800b214:	f043 03b8 	orrmi.w	r3, r3, #184	@ 0xb8
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800b218:	680a      	ldr	r2, [r1, #0]
 800b21a:	ea22 0303 	bic.w	r3, r2, r3
 800b21e:	600b      	str	r3, [r1, #0]
}
 800b220:	4770      	bx	lr

0800b222 <I2C_IsErrorOccurred>:
  uint32_t itflag   = hi2c->Instance->ISR;
 800b222:	6803      	ldr	r3, [r0, #0]
{
 800b224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 800b228:	699c      	ldr	r4, [r3, #24]
{
 800b22a:	4605      	mov	r5, r0
 800b22c:	460f      	mov	r7, r1
 800b22e:	4616      	mov	r6, r2
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800b230:	f014 0410 	ands.w	r4, r4, #16
 800b234:	d06f      	beq.n	800b316 <I2C_IsErrorOccurred+0xf4>
  uint32_t error_code = 0;
 800b236:	2400      	movs	r4, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b238:	2210      	movs	r2, #16
  HAL_StatusTypeDef status = HAL_OK;
 800b23a:	46a0      	mov	r8, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b23c:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800b23e:	682b      	ldr	r3, [r5, #0]
 800b240:	699a      	ldr	r2, [r3, #24]
 800b242:	0690      	lsls	r0, r2, #26
 800b244:	d461      	bmi.n	800b30a <I2C_IsErrorOccurred+0xe8>
 800b246:	f1b8 0f00 	cmp.w	r8, #0
 800b24a:	d035      	beq.n	800b2b8 <I2C_IsErrorOccurred+0x96>
    error_code |= HAL_I2C_ERROR_AF;
 800b24c:	f044 0404 	orr.w	r4, r4, #4
    status = HAL_ERROR;
 800b250:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 800b252:	682e      	ldr	r6, [r5, #0]
 800b254:	69b3      	ldr	r3, [r6, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800b256:	05d9      	lsls	r1, r3, #23
 800b258:	d505      	bpl.n	800b266 <I2C_IsErrorOccurred+0x44>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800b25a:	f44f 7280 	mov.w	r2, #256	@ 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 800b25e:	f044 0401 	orr.w	r4, r4, #1
    status = HAL_ERROR;
 800b262:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800b264:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800b266:	055a      	lsls	r2, r3, #21
 800b268:	d505      	bpl.n	800b276 <I2C_IsErrorOccurred+0x54>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800b26a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 800b26e:	f044 0408 	orr.w	r4, r4, #8
    status = HAL_ERROR;
 800b272:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800b274:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800b276:	059b      	lsls	r3, r3, #22
 800b278:	d54f      	bpl.n	800b31a <I2C_IsErrorOccurred+0xf8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800b27a:	f44f 7300 	mov.w	r3, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 800b27e:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800b282:	61f3      	str	r3, [r6, #28]
    I2C_Flush_TXDR(hi2c);
 800b284:	4628      	mov	r0, r5
 800b286:	f7ff ff4b 	bl	800b120 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 800b28a:	6873      	ldr	r3, [r6, #4]
    __HAL_UNLOCK(hi2c);
 800b28c:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 800b28e:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 800b292:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 800b296:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 800b29a:	f023 0301 	bic.w	r3, r3, #1
 800b29e:	6073      	str	r3, [r6, #4]
    hi2c->ErrorCode |= error_code;
 800b2a0:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 800b2a2:	4323      	orrs	r3, r4
 800b2a4:	646b      	str	r3, [r5, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800b2a6:	2320      	movs	r3, #32
 800b2a8:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 800b2b2:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
 800b2b6:	e032      	b.n	800b31e <I2C_IsErrorOccurred+0xfc>
      if (Timeout != HAL_MAX_DELAY)
 800b2b8:	1c7a      	adds	r2, r7, #1
 800b2ba:	d0c1      	beq.n	800b240 <I2C_IsErrorOccurred+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800b2bc:	f7fe fad0 	bl	8009860 <HAL_GetTick>
 800b2c0:	1b80      	subs	r0, r0, r6
 800b2c2:	42b8      	cmp	r0, r7
 800b2c4:	d801      	bhi.n	800b2ca <I2C_IsErrorOccurred+0xa8>
 800b2c6:	2f00      	cmp	r7, #0
 800b2c8:	d1b9      	bne.n	800b23e <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800b2ca:	682b      	ldr	r3, [r5, #0]
 800b2cc:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 800b2ce:	f895 2042 	ldrb.w	r2, [r5, #66]	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800b2d2:	6998      	ldr	r0, [r3, #24]
          tmp2 = hi2c->Mode;
 800b2d4:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800b2d6:	0400      	lsls	r0, r0, #16
 800b2d8:	d50a      	bpl.n	800b2f0 <I2C_IsErrorOccurred+0xce>
 800b2da:	0449      	lsls	r1, r1, #17
 800b2dc:	d408      	bmi.n	800b2f0 <I2C_IsErrorOccurred+0xce>
              (tmp1 != I2C_CR2_STOP) && \
 800b2de:	2a20      	cmp	r2, #32
 800b2e0:	d006      	beq.n	800b2f0 <I2C_IsErrorOccurred+0xce>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800b2e2:	685a      	ldr	r2, [r3, #4]
 800b2e4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b2e8:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 800b2ea:	f7fe fab9 	bl	8009860 <HAL_GetTick>
 800b2ee:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b2f0:	682b      	ldr	r3, [r5, #0]
 800b2f2:	699b      	ldr	r3, [r3, #24]
 800b2f4:	069b      	lsls	r3, r3, #26
 800b2f6:	d4a2      	bmi.n	800b23e <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800b2f8:	f7fe fab2 	bl	8009860 <HAL_GetTick>
 800b2fc:	1b80      	subs	r0, r0, r6
 800b2fe:	2819      	cmp	r0, #25
 800b300:	d9f6      	bls.n	800b2f0 <I2C_IsErrorOccurred+0xce>
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 800b302:	2420      	movs	r4, #32
              status = HAL_ERROR;
 800b304:	f04f 0801 	mov.w	r8, #1
 800b308:	e799      	b.n	800b23e <I2C_IsErrorOccurred+0x1c>
    if (status == HAL_OK)
 800b30a:	f1b8 0f00 	cmp.w	r8, #0
 800b30e:	d19d      	bne.n	800b24c <I2C_IsErrorOccurred+0x2a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b310:	2220      	movs	r2, #32
 800b312:	61da      	str	r2, [r3, #28]
 800b314:	e79a      	b.n	800b24c <I2C_IsErrorOccurred+0x2a>
  HAL_StatusTypeDef status = HAL_OK;
 800b316:	4620      	mov	r0, r4
 800b318:	e79b      	b.n	800b252 <I2C_IsErrorOccurred+0x30>
  if (status != HAL_OK)
 800b31a:	2800      	cmp	r0, #0
 800b31c:	d1b2      	bne.n	800b284 <I2C_IsErrorOccurred+0x62>
}
 800b31e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b322 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800b322:	b570      	push	{r4, r5, r6, lr}
 800b324:	4604      	mov	r4, r0
 800b326:	460d      	mov	r5, r1
 800b328:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b32a:	6823      	ldr	r3, [r4, #0]
 800b32c:	699b      	ldr	r3, [r3, #24]
 800b32e:	079b      	lsls	r3, r3, #30
 800b330:	d501      	bpl.n	800b336 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 800b332:	2000      	movs	r0, #0
 800b334:	e01b      	b.n	800b36e <I2C_WaitOnTXISFlagUntilTimeout+0x4c>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b336:	4632      	mov	r2, r6
 800b338:	4629      	mov	r1, r5
 800b33a:	4620      	mov	r0, r4
 800b33c:	f7ff ff71 	bl	800b222 <I2C_IsErrorOccurred>
 800b340:	b9a0      	cbnz	r0, 800b36c <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 800b342:	1c6a      	adds	r2, r5, #1
 800b344:	d0f1      	beq.n	800b32a <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b346:	f7fe fa8b 	bl	8009860 <HAL_GetTick>
 800b34a:	1b80      	subs	r0, r0, r6
 800b34c:	42a8      	cmp	r0, r5
 800b34e:	d801      	bhi.n	800b354 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 800b350:	2d00      	cmp	r5, #0
 800b352:	d1ea      	bne.n	800b32a <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b354:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800b356:	f043 0320 	orr.w	r3, r3, #32
 800b35a:	6463      	str	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b35c:	2320      	movs	r3, #32
 800b35e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b362:	2300      	movs	r3, #0
 800b364:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        __HAL_UNLOCK(hi2c);
 800b368:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 800b36c:	2001      	movs	r0, #1
}
 800b36e:	bd70      	pop	{r4, r5, r6, pc}

0800b370 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800b370:	b570      	push	{r4, r5, r6, lr}
 800b372:	4604      	mov	r4, r0
 800b374:	460d      	mov	r5, r1
 800b376:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b378:	6823      	ldr	r3, [r4, #0]
 800b37a:	699b      	ldr	r3, [r3, #24]
 800b37c:	069b      	lsls	r3, r3, #26
 800b37e:	d501      	bpl.n	800b384 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 800b380:	2000      	movs	r0, #0
 800b382:	e019      	b.n	800b3b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b384:	4632      	mov	r2, r6
 800b386:	4629      	mov	r1, r5
 800b388:	4620      	mov	r0, r4
 800b38a:	f7ff ff4a 	bl	800b222 <I2C_IsErrorOccurred>
 800b38e:	b990      	cbnz	r0, 800b3b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b390:	f7fe fa66 	bl	8009860 <HAL_GetTick>
 800b394:	1b80      	subs	r0, r0, r6
 800b396:	42a8      	cmp	r0, r5
 800b398:	d801      	bhi.n	800b39e <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 800b39a:	2d00      	cmp	r5, #0
 800b39c:	d1ec      	bne.n	800b378 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b39e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800b3a0:	f043 0320 	orr.w	r3, r3, #32
 800b3a4:	6463      	str	r3, [r4, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800b3a6:	2320      	movs	r3, #32
 800b3a8:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800b3b2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 800b3b6:	2001      	movs	r0, #1
}
 800b3b8:	bd70      	pop	{r4, r5, r6, pc}

0800b3ba <I2C_WaitOnFlagUntilTimeout>:
{
 800b3ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3be:	9f06      	ldr	r7, [sp, #24]
 800b3c0:	4604      	mov	r4, r0
 800b3c2:	4688      	mov	r8, r1
 800b3c4:	4616      	mov	r6, r2
 800b3c6:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b3c8:	6822      	ldr	r2, [r4, #0]
 800b3ca:	6993      	ldr	r3, [r2, #24]
 800b3cc:	ea38 0303 	bics.w	r3, r8, r3
 800b3d0:	bf0c      	ite	eq
 800b3d2:	2301      	moveq	r3, #1
 800b3d4:	2300      	movne	r3, #0
 800b3d6:	42b3      	cmp	r3, r6
 800b3d8:	d001      	beq.n	800b3de <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 800b3da:	2000      	movs	r0, #0
 800b3dc:	e015      	b.n	800b40a <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 800b3de:	1c6b      	adds	r3, r5, #1
 800b3e0:	d0f3      	beq.n	800b3ca <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b3e2:	f7fe fa3d 	bl	8009860 <HAL_GetTick>
 800b3e6:	1bc0      	subs	r0, r0, r7
 800b3e8:	42a8      	cmp	r0, r5
 800b3ea:	d801      	bhi.n	800b3f0 <I2C_WaitOnFlagUntilTimeout+0x36>
 800b3ec:	2d00      	cmp	r5, #0
 800b3ee:	d1eb      	bne.n	800b3c8 <I2C_WaitOnFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b3f0:	6c63      	ldr	r3, [r4, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800b3f2:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b3f4:	f043 0320 	orr.w	r3, r3, #32
 800b3f8:	6463      	str	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b3fa:	2320      	movs	r3, #32
 800b3fc:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b400:	2300      	movs	r3, #0
 800b402:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        __HAL_UNLOCK(hi2c);
 800b406:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800b40a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b40e <HAL_I2C_Init>:
{
 800b40e:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 800b410:	4604      	mov	r4, r0
 800b412:	2800      	cmp	r0, #0
 800b414:	d04a      	beq.n	800b4ac <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b416:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800b41a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800b41e:	b91b      	cbnz	r3, 800b428 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 800b420:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 800b424:	f7f7 fa06 	bl	8002834 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800b428:	2324      	movs	r3, #36	@ 0x24
 800b42a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 800b42e:	6823      	ldr	r3, [r4, #0]
 800b430:	681a      	ldr	r2, [r3, #0]
 800b432:	f022 0201 	bic.w	r2, r2, #1
 800b436:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800b438:	6862      	ldr	r2, [r4, #4]
 800b43a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800b43e:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800b440:	689a      	ldr	r2, [r3, #8]
 800b442:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800b446:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800b448:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b44c:	2901      	cmp	r1, #1
 800b44e:	d124      	bne.n	800b49a <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800b450:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b454:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b456:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b458:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b45a:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 800b45e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b462:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800b464:	68da      	ldr	r2, [r3, #12]
 800b466:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800b46a:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b46c:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 800b470:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 800b472:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b474:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800b478:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800b47a:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 800b47e:	430a      	orrs	r2, r1
 800b480:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800b482:	681a      	ldr	r2, [r3, #0]
 800b484:	f042 0201 	orr.w	r2, r2, #1
 800b488:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 800b48a:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b48c:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800b48e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b492:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b494:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 800b498:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800b49a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b49e:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800b4a0:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b4a2:	d1d8      	bne.n	800b456 <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800b4a4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b4a8:	605a      	str	r2, [r3, #4]
 800b4aa:	e7d4      	b.n	800b456 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 800b4ac:	2001      	movs	r0, #1
 800b4ae:	e7f3      	b.n	800b498 <HAL_I2C_Init+0x8a>

0800b4b0 <HAL_I2C_DeInit>:
{
 800b4b0:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 800b4b2:	4604      	mov	r4, r0
 800b4b4:	b198      	cbz	r0, 800b4de <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 800b4b6:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800b4b8:	2324      	movs	r3, #36	@ 0x24
 800b4ba:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 800b4be:	6813      	ldr	r3, [r2, #0]
 800b4c0:	f023 0301 	bic.w	r3, r3, #1
 800b4c4:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 800b4c6:	f7f7 fa35 	bl	8002934 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b4ca:	2000      	movs	r0, #0
 800b4cc:	6460      	str	r0, [r4, #68]	@ 0x44
  __HAL_UNLOCK(hi2c);
 800b4ce:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 800b4d2:	f884 0041 	strb.w	r0, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b4d6:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b4d8:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 800b4dc:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800b4de:	2001      	movs	r0, #1
 800b4e0:	e7fc      	b.n	800b4dc <HAL_I2C_DeInit+0x2c>
	...

0800b4e4 <HAL_I2C_Master_Transmit_IT>:
{
 800b4e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b4e6:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800b4e8:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
 800b4ec:	2820      	cmp	r0, #32
 800b4ee:	d132      	bne.n	800b556 <HAL_I2C_Master_Transmit_IT+0x72>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800b4f0:	6820      	ldr	r0, [r4, #0]
 800b4f2:	6980      	ldr	r0, [r0, #24]
 800b4f4:	f410 4000 	ands.w	r0, r0, #32768	@ 0x8000
 800b4f8:	d12d      	bne.n	800b556 <HAL_I2C_Master_Transmit_IT+0x72>
    __HAL_LOCK(hi2c);
 800b4fa:	f894 5040 	ldrb.w	r5, [r4, #64]	@ 0x40
 800b4fe:	2d01      	cmp	r5, #1
 800b500:	d029      	beq.n	800b556 <HAL_I2C_Master_Transmit_IT+0x72>
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800b502:	2521      	movs	r5, #33	@ 0x21
    hi2c->pBuffPtr    = pData;
 800b504:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800b506:	f884 5041 	strb.w	r5, [r4, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b50a:	2510      	movs	r5, #16
 800b50c:	f884 5042 	strb.w	r5, [r4, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b510:	6460      	str	r0, [r4, #68]	@ 0x44
    hi2c->XferCount   = Size;
 800b512:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b514:	4b11      	ldr	r3, [pc, #68]	@ (800b55c <HAL_I2C_Master_Transmit_IT+0x78>)
 800b516:	62e3      	str	r3, [r4, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 800b518:	4b11      	ldr	r3, [pc, #68]	@ (800b560 <HAL_I2C_Master_Transmit_IT+0x7c>)
 800b51a:	6363      	str	r3, [r4, #52]	@ 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b51c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800b51e:	b29b      	uxth	r3, r3
 800b520:	2bff      	cmp	r3, #255	@ 0xff
 800b522:	d814      	bhi.n	800b54e <HAL_I2C_Master_Transmit_IT+0x6a>
      hi2c->XferSize = hi2c->XferCount;
 800b524:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      xfermode = I2C_AUTOEND_MODE;
 800b526:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 800b52a:	b292      	uxth	r2, r2
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 800b52c:	480d      	ldr	r0, [pc, #52]	@ (800b564 <HAL_I2C_Master_Transmit_IT+0x80>)
    __HAL_UNLOCK(hi2c);
 800b52e:	2500      	movs	r5, #0
 800b530:	8522      	strh	r2, [r4, #40]	@ 0x28
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 800b532:	b2d2      	uxtb	r2, r2
 800b534:	9000      	str	r0, [sp, #0]
 800b536:	4620      	mov	r0, r4
 800b538:	f7ff fe00 	bl	800b13c <I2C_TransferConfig>
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800b53c:	4620      	mov	r0, r4
 800b53e:	2101      	movs	r1, #1
    __HAL_UNLOCK(hi2c);
 800b540:	f884 5040 	strb.w	r5, [r4, #64]	@ 0x40
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800b544:	f7ff fe10 	bl	800b168 <I2C_Enable_IRQ>
    return HAL_OK;
 800b548:	4628      	mov	r0, r5
}
 800b54a:	b003      	add	sp, #12
 800b54c:	bd30      	pop	{r4, r5, pc}
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b54e:	22ff      	movs	r2, #255	@ 0xff
      xfermode = I2C_RELOAD_MODE;
 800b550:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b554:	e7ea      	b.n	800b52c <HAL_I2C_Master_Transmit_IT+0x48>
      return HAL_BUSY;
 800b556:	2002      	movs	r0, #2
 800b558:	e7f7      	b.n	800b54a <HAL_I2C_Master_Transmit_IT+0x66>
 800b55a:	bf00      	nop
 800b55c:	ffff0000 	.word	0xffff0000
 800b560:	0800bd13 	.word	0x0800bd13
 800b564:	80002000 	.word	0x80002000

0800b568 <HAL_I2C_Master_Receive_IT>:
{
 800b568:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b56a:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800b56c:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
 800b570:	2820      	cmp	r0, #32
 800b572:	d132      	bne.n	800b5da <HAL_I2C_Master_Receive_IT+0x72>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800b574:	6820      	ldr	r0, [r4, #0]
 800b576:	6980      	ldr	r0, [r0, #24]
 800b578:	f410 4000 	ands.w	r0, r0, #32768	@ 0x8000
 800b57c:	d12d      	bne.n	800b5da <HAL_I2C_Master_Receive_IT+0x72>
    __HAL_LOCK(hi2c);
 800b57e:	f894 5040 	ldrb.w	r5, [r4, #64]	@ 0x40
 800b582:	2d01      	cmp	r5, #1
 800b584:	d029      	beq.n	800b5da <HAL_I2C_Master_Receive_IT+0x72>
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800b586:	2522      	movs	r5, #34	@ 0x22
    hi2c->pBuffPtr    = pData;
 800b588:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800b58a:	f884 5041 	strb.w	r5, [r4, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b58e:	2510      	movs	r5, #16
 800b590:	f884 5042 	strb.w	r5, [r4, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b594:	6460      	str	r0, [r4, #68]	@ 0x44
    hi2c->XferCount   = Size;
 800b596:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b598:	4b11      	ldr	r3, [pc, #68]	@ (800b5e0 <HAL_I2C_Master_Receive_IT+0x78>)
 800b59a:	62e3      	str	r3, [r4, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 800b59c:	4b11      	ldr	r3, [pc, #68]	@ (800b5e4 <HAL_I2C_Master_Receive_IT+0x7c>)
 800b59e:	6363      	str	r3, [r4, #52]	@ 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b5a0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800b5a2:	b29b      	uxth	r3, r3
 800b5a4:	2bff      	cmp	r3, #255	@ 0xff
 800b5a6:	d814      	bhi.n	800b5d2 <HAL_I2C_Master_Receive_IT+0x6a>
      hi2c->XferSize = hi2c->XferCount;
 800b5a8:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      xfermode = I2C_AUTOEND_MODE;
 800b5aa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 800b5ae:	b292      	uxth	r2, r2
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800b5b0:	480d      	ldr	r0, [pc, #52]	@ (800b5e8 <HAL_I2C_Master_Receive_IT+0x80>)
    __HAL_UNLOCK(hi2c);
 800b5b2:	2500      	movs	r5, #0
 800b5b4:	8522      	strh	r2, [r4, #40]	@ 0x28
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800b5b6:	b2d2      	uxtb	r2, r2
 800b5b8:	9000      	str	r0, [sp, #0]
 800b5ba:	4620      	mov	r0, r4
 800b5bc:	f7ff fdbe 	bl	800b13c <I2C_TransferConfig>
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 800b5c0:	4620      	mov	r0, r4
 800b5c2:	2102      	movs	r1, #2
    __HAL_UNLOCK(hi2c);
 800b5c4:	f884 5040 	strb.w	r5, [r4, #64]	@ 0x40
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 800b5c8:	f7ff fdce 	bl	800b168 <I2C_Enable_IRQ>
    return HAL_OK;
 800b5cc:	4628      	mov	r0, r5
}
 800b5ce:	b003      	add	sp, #12
 800b5d0:	bd30      	pop	{r4, r5, pc}
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b5d2:	22ff      	movs	r2, #255	@ 0xff
      xfermode = I2C_RELOAD_MODE;
 800b5d4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b5d8:	e7ea      	b.n	800b5b0 <HAL_I2C_Master_Receive_IT+0x48>
      return HAL_BUSY;
 800b5da:	2002      	movs	r0, #2
 800b5dc:	e7f7      	b.n	800b5ce <HAL_I2C_Master_Receive_IT+0x66>
 800b5de:	bf00      	nop
 800b5e0:	ffff0000 	.word	0xffff0000
 800b5e4:	0800bd13 	.word	0x0800bd13
 800b5e8:	80002400 	.word	0x80002400

0800b5ec <HAL_I2C_Mem_Write>:
{
 800b5ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5f0:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800b5f2:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 800b5f6:	4604      	mov	r4, r0
 800b5f8:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 800b5fa:	2b20      	cmp	r3, #32
{
 800b5fc:	4616      	mov	r6, r2
 800b5fe:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 800b602:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 800b606:	f040 80c6 	bne.w	800b796 <HAL_I2C_Mem_Write+0x1aa>
    if ((pData == NULL) || (Size == 0U))
 800b60a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b60c:	b113      	cbz	r3, 800b614 <HAL_I2C_Mem_Write+0x28>
 800b60e:	f1ba 0f00 	cmp.w	sl, #0
 800b612:	d106      	bne.n	800b622 <HAL_I2C_Mem_Write+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800b614:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b618:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 800b61a:	2001      	movs	r0, #1
}
 800b61c:	b003      	add	sp, #12
 800b61e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800b622:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800b626:	2b01      	cmp	r3, #1
 800b628:	f000 80b5 	beq.w	800b796 <HAL_I2C_Mem_Write+0x1aa>
 800b62c:	f04f 0b01 	mov.w	fp, #1
 800b630:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 800b634:	f7fe f914 	bl	8009860 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b638:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 800b63a:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b63c:	9000      	str	r0, [sp, #0]
 800b63e:	465a      	mov	r2, fp
 800b640:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800b644:	4620      	mov	r0, r4
 800b646:	f7ff feb8 	bl	800b3ba <I2C_WaitOnFlagUntilTimeout>
 800b64a:	2800      	cmp	r0, #0
 800b64c:	d1e5      	bne.n	800b61a <HAL_I2C_Mem_Write+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b64e:	2321      	movs	r3, #33	@ 0x21
    hi2c->XferISR   = NULL;
 800b650:	6360      	str	r0, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800b652:	fa5f f289 	uxtb.w	r2, r9
 800b656:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b658:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b65c:	2340      	movs	r3, #64	@ 0x40
 800b65e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->pBuffPtr  = pData;
 800b662:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b664:	6460      	str	r0, [r4, #68]	@ 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800b666:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 800b668:	6263      	str	r3, [r4, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800b66a:	4b4c      	ldr	r3, [pc, #304]	@ (800b79c <HAL_I2C_Mem_Write+0x1b0>)
    hi2c->XferCount = Size;
 800b66c:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800b670:	9300      	str	r3, [sp, #0]
 800b672:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b676:	f7ff fd61 	bl	800b13c <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b67a:	462a      	mov	r2, r5
 800b67c:	4641      	mov	r1, r8
 800b67e:	4620      	mov	r0, r4
 800b680:	f7ff fe4f 	bl	800b322 <I2C_WaitOnTXISFlagUntilTimeout>
 800b684:	bb18      	cbnz	r0, 800b6ce <HAL_I2C_Mem_Write+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b686:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b68a:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b68c:	d115      	bne.n	800b6ba <HAL_I2C_Mem_Write+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b68e:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800b690:	2200      	movs	r2, #0
 800b692:	2180      	movs	r1, #128	@ 0x80
 800b694:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b696:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800b698:	4643      	mov	r3, r8
 800b69a:	9500      	str	r5, [sp, #0]
 800b69c:	f7ff fe8d 	bl	800b3ba <I2C_WaitOnFlagUntilTimeout>
 800b6a0:	b9a8      	cbnz	r0, 800b6ce <HAL_I2C_Mem_Write+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b6a2:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800b6a4:	b29b      	uxth	r3, r3
 800b6a6:	2bff      	cmp	r3, #255	@ 0xff
 800b6a8:	d815      	bhi.n	800b6d6 <HAL_I2C_Mem_Write+0xea>
      hi2c->XferSize = hi2c->XferCount;
 800b6aa:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800b6ac:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 800b6b0:	b292      	uxth	r2, r2
 800b6b2:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800b6b4:	b2d2      	uxtb	r2, r2
 800b6b6:	9000      	str	r0, [sp, #0]
 800b6b8:	e012      	b.n	800b6e0 <HAL_I2C_Mem_Write+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800b6ba:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b6bc:	4641      	mov	r1, r8
 800b6be:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800b6c0:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b6c2:	462a      	mov	r2, r5
 800b6c4:	f7ff fe2d 	bl	800b322 <I2C_WaitOnTXISFlagUntilTimeout>
 800b6c8:	b908      	cbnz	r0, 800b6ce <HAL_I2C_Mem_Write+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b6ca:	6823      	ldr	r3, [r4, #0]
 800b6cc:	e7df      	b.n	800b68e <HAL_I2C_Mem_Write+0xa2>
      __HAL_UNLOCK(hi2c);
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 800b6d4:	e7a1      	b.n	800b61a <HAL_I2C_Mem_Write+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b6d6:	22ff      	movs	r2, #255	@ 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800b6d8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b6dc:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800b6de:	9000      	str	r0, [sp, #0]
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800b6e0:	4639      	mov	r1, r7
 800b6e2:	4620      	mov	r0, r4
 800b6e4:	f7ff fd2a 	bl	800b13c <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b6e8:	462a      	mov	r2, r5
 800b6ea:	4641      	mov	r1, r8
 800b6ec:	4620      	mov	r0, r4
 800b6ee:	f7ff fe18 	bl	800b322 <I2C_WaitOnTXISFlagUntilTimeout>
 800b6f2:	2800      	cmp	r0, #0
 800b6f4:	d191      	bne.n	800b61a <HAL_I2C_Mem_Write+0x2e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b6f6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800b6f8:	6822      	ldr	r2, [r4, #0]
 800b6fa:	f813 1b01 	ldrb.w	r1, [r3], #1
 800b6fe:	6291      	str	r1, [r2, #40]	@ 0x28
      hi2c->pBuffPtr++;
 800b700:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 800b702:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800b704:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 800b706:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 800b708:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 800b70a:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 800b70c:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 800b70e:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b710:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800b712:	8522      	strh	r2, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b714:	b29b      	uxth	r3, r3
 800b716:	b1b3      	cbz	r3, 800b746 <HAL_I2C_Mem_Write+0x15a>
 800b718:	b9aa      	cbnz	r2, 800b746 <HAL_I2C_Mem_Write+0x15a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b71a:	4643      	mov	r3, r8
 800b71c:	2180      	movs	r1, #128	@ 0x80
 800b71e:	4620      	mov	r0, r4
 800b720:	9500      	str	r5, [sp, #0]
 800b722:	f7ff fe4a 	bl	800b3ba <I2C_WaitOnFlagUntilTimeout>
 800b726:	2800      	cmp	r0, #0
 800b728:	f47f af77 	bne.w	800b61a <HAL_I2C_Mem_Write+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b72c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800b72e:	b29b      	uxth	r3, r3
 800b730:	2bff      	cmp	r3, #255	@ 0xff
 800b732:	d928      	bls.n	800b786 <HAL_I2C_Mem_Write+0x19a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b734:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b736:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b73a:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b73c:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b73e:	4639      	mov	r1, r7
 800b740:	4620      	mov	r0, r4
 800b742:	f7ff fcfb 	bl	800b13c <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 800b746:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800b748:	b29b      	uxth	r3, r3
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d1cc      	bne.n	800b6e8 <HAL_I2C_Mem_Write+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b74e:	462a      	mov	r2, r5
 800b750:	4641      	mov	r1, r8
 800b752:	4620      	mov	r0, r4
 800b754:	f7ff fe0c 	bl	800b370 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b758:	2800      	cmp	r0, #0
 800b75a:	f47f af5e 	bne.w	800b61a <HAL_I2C_Mem_Write+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b75e:	6823      	ldr	r3, [r4, #0]
 800b760:	2120      	movs	r1, #32
 800b762:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800b764:	685a      	ldr	r2, [r3, #4]
 800b766:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 800b76a:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 800b76e:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 800b772:	f022 0201 	bic.w	r2, r2, #1
 800b776:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800b778:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 800b77c:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b780:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 800b784:	e74a      	b.n	800b61c <HAL_I2C_Mem_Write+0x30>
          hi2c->XferSize = hi2c->XferCount;
 800b786:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b788:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 800b78c:	b292      	uxth	r2, r2
 800b78e:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b790:	b2d2      	uxtb	r2, r2
 800b792:	9000      	str	r0, [sp, #0]
 800b794:	e7d3      	b.n	800b73e <HAL_I2C_Mem_Write+0x152>
    __HAL_LOCK(hi2c);
 800b796:	2002      	movs	r0, #2
 800b798:	e740      	b.n	800b61c <HAL_I2C_Mem_Write+0x30>
 800b79a:	bf00      	nop
 800b79c:	80002000 	.word	0x80002000

0800b7a0 <HAL_I2C_Mem_Read>:
{
 800b7a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7a4:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800b7a6:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 800b7aa:	4604      	mov	r4, r0
 800b7ac:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 800b7ae:	2b20      	cmp	r3, #32
{
 800b7b0:	4616      	mov	r6, r2
 800b7b2:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 800b7b6:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 800b7ba:	f040 80c9 	bne.w	800b950 <HAL_I2C_Mem_Read+0x1b0>
    if ((pData == NULL) || (Size == 0U))
 800b7be:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b7c0:	b113      	cbz	r3, 800b7c8 <HAL_I2C_Mem_Read+0x28>
 800b7c2:	f1ba 0f00 	cmp.w	sl, #0
 800b7c6:	d106      	bne.n	800b7d6 <HAL_I2C_Mem_Read+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800b7c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b7cc:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 800b7ce:	2001      	movs	r0, #1
}
 800b7d0:	b003      	add	sp, #12
 800b7d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800b7d6:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800b7da:	2b01      	cmp	r3, #1
 800b7dc:	f000 80b8 	beq.w	800b950 <HAL_I2C_Mem_Read+0x1b0>
 800b7e0:	f04f 0b01 	mov.w	fp, #1
 800b7e4:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 800b7e8:	f7fe f83a 	bl	8009860 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b7ec:	2319      	movs	r3, #25
 800b7ee:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 800b7f0:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b7f2:	465a      	mov	r2, fp
 800b7f4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800b7f8:	4620      	mov	r0, r4
 800b7fa:	f7ff fdde 	bl	800b3ba <I2C_WaitOnFlagUntilTimeout>
 800b7fe:	4603      	mov	r3, r0
 800b800:	2800      	cmp	r0, #0
 800b802:	d1e4      	bne.n	800b7ce <HAL_I2C_Mem_Read+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b804:	2222      	movs	r2, #34	@ 0x22
    hi2c->XferISR   = NULL;
 800b806:	6360      	str	r0, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800b808:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b80a:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b80e:	2240      	movs	r2, #64	@ 0x40
 800b810:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
    hi2c->pBuffPtr  = pData;
 800b814:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b816:	6460      	str	r0, [r4, #68]	@ 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800b818:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 800b81a:	6262      	str	r2, [r4, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800b81c:	4a4d      	ldr	r2, [pc, #308]	@ (800b954 <HAL_I2C_Mem_Read+0x1b4>)
    hi2c->XferCount = Size;
 800b81e:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800b822:	9200      	str	r2, [sp, #0]
 800b824:	fa5f f289 	uxtb.w	r2, r9
 800b828:	f7ff fc88 	bl	800b13c <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b82c:	462a      	mov	r2, r5
 800b82e:	4641      	mov	r1, r8
 800b830:	4620      	mov	r0, r4
 800b832:	f7ff fd76 	bl	800b322 <I2C_WaitOnTXISFlagUntilTimeout>
 800b836:	bb20      	cbnz	r0, 800b882 <HAL_I2C_Mem_Read+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b838:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b83c:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b83e:	d116      	bne.n	800b86e <HAL_I2C_Mem_Read+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b840:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800b842:	2200      	movs	r2, #0
 800b844:	2140      	movs	r1, #64	@ 0x40
 800b846:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b848:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800b84a:	4643      	mov	r3, r8
 800b84c:	9500      	str	r5, [sp, #0]
 800b84e:	f7ff fdb4 	bl	800b3ba <I2C_WaitOnFlagUntilTimeout>
 800b852:	b9b0      	cbnz	r0, 800b882 <HAL_I2C_Mem_Read+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b854:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800b856:	b29b      	uxth	r3, r3
 800b858:	2bff      	cmp	r3, #255	@ 0xff
 800b85a:	4b3f      	ldr	r3, [pc, #252]	@ (800b958 <HAL_I2C_Mem_Read+0x1b8>)
 800b85c:	d815      	bhi.n	800b88a <HAL_I2C_Mem_Read+0xea>
      hi2c->XferSize = hi2c->XferCount;
 800b85e:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800b860:	b292      	uxth	r2, r2
 800b862:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b864:	b2d2      	uxtb	r2, r2
 800b866:	9300      	str	r3, [sp, #0]
 800b868:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b86c:	e012      	b.n	800b894 <HAL_I2C_Mem_Read+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800b86e:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b870:	4641      	mov	r1, r8
 800b872:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800b874:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b876:	462a      	mov	r2, r5
 800b878:	f7ff fd53 	bl	800b322 <I2C_WaitOnTXISFlagUntilTimeout>
 800b87c:	b908      	cbnz	r0, 800b882 <HAL_I2C_Mem_Read+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b87e:	6823      	ldr	r3, [r4, #0]
 800b880:	e7de      	b.n	800b840 <HAL_I2C_Mem_Read+0xa0>
      __HAL_UNLOCK(hi2c);
 800b882:	2300      	movs	r3, #0
 800b884:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 800b888:	e7a1      	b.n	800b7ce <HAL_I2C_Mem_Read+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b88a:	22ff      	movs	r2, #255	@ 0xff
 800b88c:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b88e:	9300      	str	r3, [sp, #0]
 800b890:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b894:	4639      	mov	r1, r7
 800b896:	4620      	mov	r0, r4
 800b898:	f7ff fc50 	bl	800b13c <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800b89c:	4643      	mov	r3, r8
 800b89e:	2200      	movs	r2, #0
 800b8a0:	2104      	movs	r1, #4
 800b8a2:	4620      	mov	r0, r4
 800b8a4:	9500      	str	r5, [sp, #0]
 800b8a6:	f7ff fd88 	bl	800b3ba <I2C_WaitOnFlagUntilTimeout>
 800b8aa:	2800      	cmp	r0, #0
 800b8ac:	d18f      	bne.n	800b7ce <HAL_I2C_Mem_Read+0x2e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b8ae:	6823      	ldr	r3, [r4, #0]
 800b8b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b8b2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800b8b4:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800b8b6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 800b8b8:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->pBuffPtr++;
 800b8ba:	3301      	adds	r3, #1
      hi2c->XferSize--;
 800b8bc:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 800b8be:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 800b8c0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800b8c2:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 800b8c4:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 800b8c6:	8522      	strh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 800b8c8:	b29b      	uxth	r3, r3
 800b8ca:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b8cc:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800b8ce:	b29b      	uxth	r3, r3
 800b8d0:	b1b3      	cbz	r3, 800b900 <HAL_I2C_Mem_Read+0x160>
 800b8d2:	b9aa      	cbnz	r2, 800b900 <HAL_I2C_Mem_Read+0x160>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b8d4:	4643      	mov	r3, r8
 800b8d6:	2180      	movs	r1, #128	@ 0x80
 800b8d8:	4620      	mov	r0, r4
 800b8da:	9500      	str	r5, [sp, #0]
 800b8dc:	f7ff fd6d 	bl	800b3ba <I2C_WaitOnFlagUntilTimeout>
 800b8e0:	2800      	cmp	r0, #0
 800b8e2:	f47f af74 	bne.w	800b7ce <HAL_I2C_Mem_Read+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b8e6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800b8e8:	b29b      	uxth	r3, r3
 800b8ea:	2bff      	cmp	r3, #255	@ 0xff
 800b8ec:	d928      	bls.n	800b940 <HAL_I2C_Mem_Read+0x1a0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b8ee:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800b8f0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b8f4:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800b8f6:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b8f8:	4639      	mov	r1, r7
 800b8fa:	4620      	mov	r0, r4
 800b8fc:	f7ff fc1e 	bl	800b13c <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 800b900:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800b902:	b29b      	uxth	r3, r3
 800b904:	2b00      	cmp	r3, #0
 800b906:	d1c9      	bne.n	800b89c <HAL_I2C_Mem_Read+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b908:	462a      	mov	r2, r5
 800b90a:	4641      	mov	r1, r8
 800b90c:	4620      	mov	r0, r4
 800b90e:	f7ff fd2f 	bl	800b370 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b912:	2800      	cmp	r0, #0
 800b914:	f47f af5b 	bne.w	800b7ce <HAL_I2C_Mem_Read+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b918:	6823      	ldr	r3, [r4, #0]
 800b91a:	2120      	movs	r1, #32
 800b91c:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800b91e:	685a      	ldr	r2, [r3, #4]
 800b920:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 800b924:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 800b928:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 800b92c:	f022 0201 	bic.w	r2, r2, #1
 800b930:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800b932:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 800b936:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b93a:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 800b93e:	e747      	b.n	800b7d0 <HAL_I2C_Mem_Read+0x30>
          hi2c->XferSize = hi2c->XferCount;
 800b940:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b942:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 800b946:	b292      	uxth	r2, r2
 800b948:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b94a:	b2d2      	uxtb	r2, r2
 800b94c:	9000      	str	r0, [sp, #0]
 800b94e:	e7d3      	b.n	800b8f8 <HAL_I2C_Mem_Read+0x158>
    __HAL_LOCK(hi2c);
 800b950:	2002      	movs	r0, #2
 800b952:	e73d      	b.n	800b7d0 <HAL_I2C_Mem_Read+0x30>
 800b954:	80002000 	.word	0x80002000
 800b958:	80002400 	.word	0x80002400

0800b95c <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800b95c:	6802      	ldr	r2, [r0, #0]
  if (hi2c->XferISR != NULL)
 800b95e:	6b43      	ldr	r3, [r0, #52]	@ 0x34
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800b960:	6991      	ldr	r1, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800b962:	6812      	ldr	r2, [r2, #0]
  if (hi2c->XferISR != NULL)
 800b964:	b103      	cbz	r3, 800b968 <HAL_I2C_EV_IRQHandler+0xc>
    hi2c->XferISR(hi2c, itflags, itsources);
 800b966:	4718      	bx	r3
}
 800b968:	4770      	bx	lr

0800b96a <I2C_ITMasterSeqCplt>:
{
 800b96a:	b538      	push	{r3, r4, r5, lr}
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b96c:	2500      	movs	r5, #0
 800b96e:	f880 5042 	strb.w	r5, [r0, #66]	@ 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800b972:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800b976:	2b21      	cmp	r3, #33	@ 0x21
 800b978:	f04f 0320 	mov.w	r3, #32
    hi2c->State         = HAL_I2C_STATE_READY;
 800b97c:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800b980:	d10a      	bne.n	800b998 <I2C_ITMasterSeqCplt+0x2e>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800b982:	2311      	movs	r3, #17
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800b984:	2101      	movs	r1, #1
    hi2c->XferISR       = NULL;
 800b986:	6345      	str	r5, [r0, #52]	@ 0x34
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800b988:	6303      	str	r3, [r0, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800b98a:	f7ff fc29 	bl	800b1e0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800b98e:	f880 5040 	strb.w	r5, [r0, #64]	@ 0x40
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800b992:	f7f5 fe41 	bl	8001618 <HAL_I2C_MasterTxCpltCallback>
}
 800b996:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800b998:	2312      	movs	r3, #18
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800b99a:	2102      	movs	r1, #2
    hi2c->XferISR       = NULL;
 800b99c:	6345      	str	r5, [r0, #52]	@ 0x34
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800b99e:	6303      	str	r3, [r0, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800b9a0:	f7ff fc1e 	bl	800b1e0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800b9a4:	f880 5040 	strb.w	r5, [r0, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800b9a8:	f7f5 fe50 	bl	800164c <HAL_I2C_MasterRxCpltCallback>
}
 800b9ac:	e7f3      	b.n	800b996 <I2C_ITMasterSeqCplt+0x2c>

0800b9ae <HAL_I2C_SlaveTxCpltCallback>:
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
 800b9ae:	4770      	bx	lr

0800b9b0 <HAL_I2C_SlaveRxCpltCallback>:
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
 800b9b0:	4770      	bx	lr

0800b9b2 <I2C_ITSlaveSeqCplt>:
{
 800b9b2:	b508      	push	{r3, lr}
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800b9b4:	6803      	ldr	r3, [r0, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b9b6:	2100      	movs	r1, #0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800b9b8:	681a      	ldr	r2, [r3, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b9ba:	f880 1042 	strb.w	r1, [r0, #66]	@ 0x42
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800b9be:	0451      	lsls	r1, r2, #17
 800b9c0:	d515      	bpl.n	800b9ee <I2C_ITSlaveSeqCplt+0x3c>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800b9c2:	681a      	ldr	r2, [r3, #0]
 800b9c4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800b9c8:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800b9ca:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800b9ce:	2b29      	cmp	r3, #41	@ 0x29
 800b9d0:	d113      	bne.n	800b9fa <I2C_ITSlaveSeqCplt+0x48>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800b9d2:	2328      	movs	r3, #40	@ 0x28
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800b9d4:	2101      	movs	r1, #1
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800b9d6:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800b9da:	2321      	movs	r3, #33	@ 0x21
 800b9dc:	6303      	str	r3, [r0, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800b9de:	f7ff fbff 	bl	800b1e0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800b9e8:	f7ff ffe1 	bl	800b9ae <HAL_I2C_SlaveTxCpltCallback>
}
 800b9ec:	bd08      	pop	{r3, pc}
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800b9ee:	0412      	lsls	r2, r2, #16
 800b9f0:	d5eb      	bpl.n	800b9ca <I2C_ITSlaveSeqCplt+0x18>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800b9f2:	681a      	ldr	r2, [r3, #0]
 800b9f4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800b9f8:	e7e6      	b.n	800b9c8 <I2C_ITSlaveSeqCplt+0x16>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800b9fa:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800b9fe:	2b2a      	cmp	r3, #42	@ 0x2a
 800ba00:	d1f4      	bne.n	800b9ec <I2C_ITSlaveSeqCplt+0x3a>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800ba02:	2328      	movs	r3, #40	@ 0x28
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800ba04:	2102      	movs	r1, #2
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800ba06:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800ba0a:	2322      	movs	r3, #34	@ 0x22
 800ba0c:	6303      	str	r3, [r0, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800ba0e:	f7ff fbe7 	bl	800b1e0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800ba12:	2300      	movs	r3, #0
 800ba14:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800ba18:	f7ff ffca 	bl	800b9b0 <HAL_I2C_SlaveRxCpltCallback>
}
 800ba1c:	e7e6      	b.n	800b9ec <I2C_ITSlaveSeqCplt+0x3a>

0800ba1e <HAL_I2C_AddrCallback>:
}
 800ba1e:	4770      	bx	lr

0800ba20 <I2C_ITAddrCplt.constprop.0>:
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800ba20:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 800ba24:	f002 0228 	and.w	r2, r2, #40	@ 0x28
 800ba28:	2a28      	cmp	r2, #40	@ 0x28
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 800ba2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    transferdirection = I2C_GET_DIR(hi2c);
 800ba2c:	6803      	ldr	r3, [r0, #0]
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800ba2e:	d135      	bne.n	800ba9c <I2C_ITAddrCplt.constprop.0+0x7c>
    transferdirection = I2C_GET_DIR(hi2c);
 800ba30:	699e      	ldr	r6, [r3, #24]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800ba32:	68c2      	ldr	r2, [r0, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800ba34:	699d      	ldr	r5, [r3, #24]
    transferdirection = I2C_GET_DIR(hi2c);
 800ba36:	f3c6 4600 	ubfx	r6, r6, #16, #1
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800ba3a:	2a02      	cmp	r2, #2
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800ba3c:	6899      	ldr	r1, [r3, #8]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800ba3e:	ea4f 4515 	mov.w	r5, r5, lsr #16
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800ba42:	68df      	ldr	r7, [r3, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800ba44:	f005 05fe 	and.w	r5, r5, #254	@ 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800ba48:	d11f      	bne.n	800ba8a <I2C_ITAddrCplt.constprop.0+0x6a>
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800ba4a:	ea85 15d1 	eor.w	r5, r5, r1, lsr #7
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800ba4e:	f3c1 0209 	ubfx	r2, r1, #0, #10
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800ba52:	f015 0506 	ands.w	r5, r5, #6
 800ba56:	d10e      	bne.n	800ba76 <I2C_ITAddrCplt.constprop.0+0x56>
        hi2c->AddrEventCount++;
 800ba58:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 800ba5a:	3101      	adds	r1, #1
 800ba5c:	6481      	str	r1, [r0, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800ba5e:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 800ba60:	2902      	cmp	r1, #2
 800ba62:	d107      	bne.n	800ba74 <I2C_ITAddrCplt.constprop.0+0x54>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800ba64:	2108      	movs	r1, #8
          hi2c->AddrEventCount = 0U;
 800ba66:	6485      	str	r5, [r0, #72]	@ 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800ba68:	61d9      	str	r1, [r3, #28]
          __HAL_UNLOCK(hi2c);
 800ba6a:	f880 5040 	strb.w	r5, [r0, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800ba6e:	4631      	mov	r1, r6
 800ba70:	f7ff ffd5 	bl	800ba1e <HAL_I2C_AddrCallback>
}
 800ba74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800ba76:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800ba7a:	f7ff fbb1 	bl	800b1e0 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800ba7e:	2300      	movs	r3, #0
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800ba80:	f007 02fe 	and.w	r2, r7, #254	@ 0xfe
        __HAL_UNLOCK(hi2c);
 800ba84:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800ba88:	e7f1      	b.n	800ba6e <I2C_ITAddrCplt.constprop.0+0x4e>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800ba8a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800ba8e:	f7ff fba7 	bl	800b1e0 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800ba92:	2300      	movs	r3, #0
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800ba94:	462a      	mov	r2, r5
      __HAL_UNLOCK(hi2c);
 800ba96:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800ba9a:	e7e8      	b.n	800ba6e <I2C_ITAddrCplt.constprop.0+0x4e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800ba9c:	2208      	movs	r2, #8
 800ba9e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800baa0:	2300      	movs	r3, #0
 800baa2:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
}
 800baa6:	e7e5      	b.n	800ba74 <I2C_ITAddrCplt.constprop.0+0x54>

0800baa8 <HAL_I2C_ListenCpltCallback>:
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
 800baa8:	4770      	bx	lr
	...

0800baac <I2C_ITListenCplt>:
{
 800baac:	b508      	push	{r3, lr}
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800baae:	4b16      	ldr	r3, [pc, #88]	@ (800bb08 <I2C_ITListenCplt+0x5c>)
  hi2c->State = HAL_I2C_STATE_READY;
 800bab0:	2220      	movs	r2, #32
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bab2:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800bab4:	2300      	movs	r3, #0
 800bab6:	6303      	str	r3, [r0, #48]	@ 0x30
  hi2c->XferISR = NULL;
 800bab8:	6343      	str	r3, [r0, #52]	@ 0x34
  hi2c->State = HAL_I2C_STATE_READY;
 800baba:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800babe:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800bac2:	074b      	lsls	r3, r1, #29
 800bac4:	d512      	bpl.n	800baec <I2C_ITListenCplt+0x40>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800bac6:	6803      	ldr	r3, [r0, #0]
 800bac8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800baca:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800bacc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800bace:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800bad0:	3301      	adds	r3, #1
 800bad2:	6243      	str	r3, [r0, #36]	@ 0x24
    if ((hi2c->XferSize > 0U))
 800bad4:	8d03      	ldrh	r3, [r0, #40]	@ 0x28
 800bad6:	b14b      	cbz	r3, 800baec <I2C_ITListenCplt+0x40>
      hi2c->XferSize--;
 800bad8:	3b01      	subs	r3, #1
 800bada:	8503      	strh	r3, [r0, #40]	@ 0x28
      hi2c->XferCount--;
 800badc:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 800bade:	3b01      	subs	r3, #1
 800bae0:	b29b      	uxth	r3, r3
 800bae2:	8543      	strh	r3, [r0, #42]	@ 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bae4:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800bae6:	f043 0304 	orr.w	r3, r3, #4
 800baea:	6443      	str	r3, [r0, #68]	@ 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800baec:	f248 0103 	movw	r1, #32771	@ 0x8003
 800baf0:	f7ff fb76 	bl	800b1e0 <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800baf4:	6803      	ldr	r3, [r0, #0]
 800baf6:	2210      	movs	r2, #16
 800baf8:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 800bafa:	2300      	movs	r3, #0
 800bafc:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 800bb00:	f7ff ffd2 	bl	800baa8 <HAL_I2C_ListenCpltCallback>
}
 800bb04:	bd08      	pop	{r3, pc}
 800bb06:	bf00      	nop
 800bb08:	ffff0000 	.word	0xffff0000

0800bb0c <HAL_I2C_MemTxCpltCallback>:
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
 800bb0c:	4770      	bx	lr

0800bb0e <HAL_I2C_MemRxCpltCallback>:
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
 800bb0e:	4770      	bx	lr

0800bb10 <HAL_I2C_ErrorCallback>:
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
 800bb10:	4770      	bx	lr

0800bb12 <HAL_I2C_AbortCpltCallback>:
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
 800bb12:	4770      	bx	lr

0800bb14 <I2C_TreatErrorCallback>:
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800bb14:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 800bb18:	2a60      	cmp	r2, #96	@ 0x60
 800bb1a:	f04f 0200 	mov.w	r2, #0
{
 800bb1e:	b508      	push	{r3, lr}
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800bb20:	d108      	bne.n	800bb34 <I2C_TreatErrorCallback+0x20>
    hi2c->State = HAL_I2C_STATE_READY;
 800bb22:	2120      	movs	r1, #32
    __HAL_UNLOCK(hi2c);
 800bb24:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 800bb28:	f880 1041 	strb.w	r1, [r0, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800bb2c:	6302      	str	r2, [r0, #48]	@ 0x30
    HAL_I2C_AbortCpltCallback(hi2c);
 800bb2e:	f7ff fff0 	bl	800bb12 <HAL_I2C_AbortCpltCallback>
}
 800bb32:	bd08      	pop	{r3, pc}
    hi2c->PreviousState = I2C_STATE_NONE;
 800bb34:	6302      	str	r2, [r0, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800bb36:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800bb3a:	f7ff ffe9 	bl	800bb10 <HAL_I2C_ErrorCallback>
}
 800bb3e:	e7f8      	b.n	800bb32 <I2C_TreatErrorCallback+0x1e>

0800bb40 <I2C_ITError>:
{
 800bb40:	b570      	push	{r4, r5, r6, lr}
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800bb42:	2200      	movs	r2, #0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800bb44:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800bb48:	4d33      	ldr	r5, [pc, #204]	@ (800bc18 <I2C_ITError+0xd8>)
{
 800bb4a:	4604      	mov	r4, r0
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800bb4c:	f880 2042 	strb.w	r2, [r0, #66]	@ 0x42
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800bb50:	3b28      	subs	r3, #40	@ 0x28
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800bb52:	62c5      	str	r5, [r0, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 800bb54:	8542      	strh	r2, [r0, #42]	@ 0x2a
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800bb56:	2b02      	cmp	r3, #2
  hi2c->ErrorCode |= ErrorCode;
 800bb58:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 800bb5a:	ea42 0201 	orr.w	r2, r2, r1
 800bb5e:	6442      	str	r2, [r0, #68]	@ 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800bb60:	d829      	bhi.n	800bbb6 <I2C_ITError+0x76>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800bb62:	2103      	movs	r1, #3
 800bb64:	f7ff fb3c 	bl	800b1e0 <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800bb68:	2328      	movs	r3, #40	@ 0x28
 800bb6a:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800bb6e:	4b2b      	ldr	r3, [pc, #172]	@ (800bc1c <I2C_ITError+0xdc>)
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800bb70:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800bb72:	6363      	str	r3, [r4, #52]	@ 0x34
  tmppreviousstate = hi2c->PreviousState;
 800bb74:	6b23      	ldr	r3, [r4, #48]	@ 0x30
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800bb76:	b380      	cbz	r0, 800bbda <I2C_ITError+0x9a>
 800bb78:	2b11      	cmp	r3, #17
 800bb7a:	d001      	beq.n	800bb80 <I2C_ITError+0x40>
 800bb7c:	2b21      	cmp	r3, #33	@ 0x21
 800bb7e:	d12c      	bne.n	800bbda <I2C_ITError+0x9a>
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800bb80:	6823      	ldr	r3, [r4, #0]
 800bb82:	681a      	ldr	r2, [r3, #0]
 800bb84:	0451      	lsls	r1, r2, #17
 800bb86:	d503      	bpl.n	800bb90 <I2C_ITError+0x50>
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800bb88:	681a      	ldr	r2, [r3, #0]
 800bb8a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800bb8e:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800bb90:	f7fe fadc 	bl	800a14c <HAL_DMA_GetState>
 800bb94:	2801      	cmp	r0, #1
 800bb96:	d01b      	beq.n	800bbd0 <I2C_ITError+0x90>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800bb98:	4b21      	ldr	r3, [pc, #132]	@ (800bc20 <I2C_ITError+0xe0>)
 800bb9a:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800bb9c:	6503      	str	r3, [r0, #80]	@ 0x50
      __HAL_UNLOCK(hi2c);
 800bb9e:	2300      	movs	r3, #0
 800bba0:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800bba4:	f7fe f9db 	bl	8009f5e <HAL_DMA_Abort_IT>
 800bba8:	2800      	cmp	r0, #0
 800bbaa:	d034      	beq.n	800bc16 <I2C_ITError+0xd6>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800bbac:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800bbae:	6d03      	ldr	r3, [r0, #80]	@ 0x50
}
 800bbb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800bbb4:	4718      	bx	r3
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800bbb6:	f248 0103 	movw	r1, #32771	@ 0x8003
 800bbba:	f7ff fb11 	bl	800b1e0 <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800bbbe:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800bbc2:	2b60      	cmp	r3, #96	@ 0x60
 800bbc4:	d002      	beq.n	800bbcc <I2C_ITError+0x8c>
      hi2c->State         = HAL_I2C_STATE_READY;
 800bbc6:	2320      	movs	r3, #32
 800bbc8:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    hi2c->XferISR       = NULL;
 800bbcc:	2300      	movs	r3, #0
 800bbce:	e7cf      	b.n	800bb70 <I2C_ITError+0x30>
      I2C_TreatErrorCallback(hi2c);
 800bbd0:	4620      	mov	r0, r4
}
 800bbd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      I2C_TreatErrorCallback(hi2c);
 800bbd6:	f7ff bf9d 	b.w	800bb14 <I2C_TreatErrorCallback>
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800bbda:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800bbdc:	2800      	cmp	r0, #0
 800bbde:	d0f7      	beq.n	800bbd0 <I2C_ITError+0x90>
 800bbe0:	2b12      	cmp	r3, #18
 800bbe2:	d001      	beq.n	800bbe8 <I2C_ITError+0xa8>
 800bbe4:	2b22      	cmp	r3, #34	@ 0x22
 800bbe6:	d1f3      	bne.n	800bbd0 <I2C_ITError+0x90>
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800bbe8:	6823      	ldr	r3, [r4, #0]
 800bbea:	681a      	ldr	r2, [r3, #0]
 800bbec:	0412      	lsls	r2, r2, #16
 800bbee:	d503      	bpl.n	800bbf8 <I2C_ITError+0xb8>
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800bbf0:	681a      	ldr	r2, [r3, #0]
 800bbf2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800bbf6:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800bbf8:	f7fe faa8 	bl	800a14c <HAL_DMA_GetState>
 800bbfc:	2801      	cmp	r0, #1
 800bbfe:	d0e7      	beq.n	800bbd0 <I2C_ITError+0x90>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800bc00:	4b07      	ldr	r3, [pc, #28]	@ (800bc20 <I2C_ITError+0xe0>)
 800bc02:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800bc04:	6503      	str	r3, [r0, #80]	@ 0x50
      __HAL_UNLOCK(hi2c);
 800bc06:	2300      	movs	r3, #0
 800bc08:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800bc0c:	f7fe f9a7 	bl	8009f5e <HAL_DMA_Abort_IT>
 800bc10:	b108      	cbz	r0, 800bc16 <I2C_ITError+0xd6>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800bc12:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800bc14:	e7cb      	b.n	800bbae <I2C_ITError+0x6e>
}
 800bc16:	bd70      	pop	{r4, r5, r6, pc}
 800bc18:	ffff0000 	.word	0xffff0000
 800bc1c:	0800c15d 	.word	0x0800c15d
 800bc20:	0800c26f 	.word	0x0800c26f

0800bc24 <I2C_ITMasterCplt>:
{
 800bc24:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bc26:	2320      	movs	r3, #32
 800bc28:	6805      	ldr	r5, [r0, #0]
{
 800bc2a:	4604      	mov	r4, r0
 800bc2c:	460e      	mov	r6, r1
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bc2e:	61eb      	str	r3, [r5, #28]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800bc30:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800bc34:	2b21      	cmp	r3, #33	@ 0x21
 800bc36:	d136      	bne.n	800bca6 <I2C_ITMasterCplt+0x82>
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800bc38:	2101      	movs	r1, #1
 800bc3a:	f7ff fad1 	bl	800b1e0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800bc3e:	2311      	movs	r3, #17
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800bc40:	6323      	str	r3, [r4, #48]	@ 0x30
  I2C_RESET_CR2(hi2c);
 800bc42:	686b      	ldr	r3, [r5, #4]
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800bc44:	06f2      	lsls	r2, r6, #27
  I2C_RESET_CR2(hi2c);
 800bc46:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 800bc4a:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 800bc4e:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 800bc52:	f023 0301 	bic.w	r3, r3, #1
 800bc56:	606b      	str	r3, [r5, #4]
  hi2c->XferISR       = NULL;
 800bc58:	f04f 0300 	mov.w	r3, #0
 800bc5c:	6363      	str	r3, [r4, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800bc5e:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
 800bc62:	62e3      	str	r3, [r4, #44]	@ 0x2c
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800bc64:	d505      	bpl.n	800bc72 <I2C_ITMasterCplt+0x4e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bc66:	2310      	movs	r3, #16
 800bc68:	61eb      	str	r3, [r5, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bc6a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800bc6c:	f043 0304 	orr.w	r3, r3, #4
 800bc70:	6463      	str	r3, [r4, #68]	@ 0x44
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800bc72:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800bc76:	2b60      	cmp	r3, #96	@ 0x60
 800bc78:	d105      	bne.n	800bc86 <I2C_ITMasterCplt+0x62>
 800bc7a:	0773      	lsls	r3, r6, #29
 800bc7c:	d503      	bpl.n	800bc86 <I2C_ITMasterCplt+0x62>
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800bc7e:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800bc80:	b2db      	uxtb	r3, r3
 800bc82:	9301      	str	r3, [sp, #4]
    UNUSED(tmpreg);
 800bc84:	9b01      	ldr	r3, [sp, #4]
  I2C_Flush_TXDR(hi2c);
 800bc86:	4620      	mov	r0, r4
 800bc88:	f7ff fa4a 	bl	800b120 <I2C_Flush_TXDR>
  tmperror = hi2c->ErrorCode;
 800bc8c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800bc8e:	f894 2041 	ldrb.w	r2, [r4, #65]	@ 0x41
 800bc92:	2a60      	cmp	r2, #96	@ 0x60
 800bc94:	d000      	beq.n	800bc98 <I2C_ITMasterCplt+0x74>
 800bc96:	b17b      	cbz	r3, 800bcb8 <I2C_ITMasterCplt+0x94>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800bc98:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800bc9a:	4620      	mov	r0, r4
}
 800bc9c:	b002      	add	sp, #8
 800bc9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800bca2:	f7ff bf4d 	b.w	800bb40 <I2C_ITError>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800bca6:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800bcaa:	2b22      	cmp	r3, #34	@ 0x22
 800bcac:	d1c9      	bne.n	800bc42 <I2C_ITMasterCplt+0x1e>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800bcae:	2102      	movs	r1, #2
 800bcb0:	f7ff fa96 	bl	800b1e0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800bcb4:	2312      	movs	r3, #18
 800bcb6:	e7c3      	b.n	800bc40 <I2C_ITMasterCplt+0x1c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800bcb8:	f894 2041 	ldrb.w	r2, [r4, #65]	@ 0x41
 800bcbc:	2a21      	cmp	r2, #33	@ 0x21
 800bcbe:	d112      	bne.n	800bce6 <I2C_ITMasterCplt+0xc2>
    hi2c->State = HAL_I2C_STATE_READY;
 800bcc0:	2220      	movs	r2, #32
      __HAL_UNLOCK(hi2c);
 800bcc2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 800bcc6:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800bcca:	6323      	str	r3, [r4, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800bccc:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800bcd0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800bcd4:	2a40      	cmp	r2, #64	@ 0x40
 800bcd6:	d103      	bne.n	800bce0 <I2C_ITMasterCplt+0xbc>
      HAL_I2C_MemTxCpltCallback(hi2c);
 800bcd8:	f7ff ff18 	bl	800bb0c <HAL_I2C_MemTxCpltCallback>
}
 800bcdc:	b002      	add	sp, #8
 800bcde:	bd70      	pop	{r4, r5, r6, pc}
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800bce0:	f7f5 fc9a 	bl	8001618 <HAL_I2C_MasterTxCpltCallback>
 800bce4:	e7fa      	b.n	800bcdc <I2C_ITMasterCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800bce6:	f894 2041 	ldrb.w	r2, [r4, #65]	@ 0x41
 800bcea:	2a22      	cmp	r2, #34	@ 0x22
 800bcec:	d1f6      	bne.n	800bcdc <I2C_ITMasterCplt+0xb8>
    hi2c->State = HAL_I2C_STATE_READY;
 800bcee:	2220      	movs	r2, #32
      __HAL_UNLOCK(hi2c);
 800bcf0:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 800bcf4:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800bcf8:	6323      	str	r3, [r4, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800bcfa:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800bcfe:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800bd02:	2a40      	cmp	r2, #64	@ 0x40
 800bd04:	d102      	bne.n	800bd0c <I2C_ITMasterCplt+0xe8>
      HAL_I2C_MemRxCpltCallback(hi2c);
 800bd06:	f7ff ff02 	bl	800bb0e <HAL_I2C_MemRxCpltCallback>
 800bd0a:	e7e7      	b.n	800bcdc <I2C_ITMasterCplt+0xb8>
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800bd0c:	f7f5 fc9e 	bl	800164c <HAL_I2C_MasterRxCpltCallback>
}
 800bd10:	e7e4      	b.n	800bcdc <I2C_ITMasterCplt+0xb8>

0800bd12 <I2C_Master_ISR_IT>:
{
 800bd12:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __HAL_LOCK(hi2c);
 800bd14:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
{
 800bd18:	4604      	mov	r4, r0
 800bd1a:	460d      	mov	r5, r1
 800bd1c:	4616      	mov	r6, r2
  __HAL_LOCK(hi2c);
 800bd1e:	2b01      	cmp	r3, #1
 800bd20:	f000 8086 	beq.w	800be30 <I2C_Master_ISR_IT+0x11e>
 800bd24:	2301      	movs	r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800bd26:	06ca      	lsls	r2, r1, #27
  __HAL_LOCK(hi2c);
 800bd28:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800bd2c:	d517      	bpl.n	800bd5e <I2C_Master_ISR_IT+0x4c>
 800bd2e:	06f3      	lsls	r3, r6, #27
 800bd30:	d515      	bpl.n	800bd5e <I2C_Master_ISR_IT+0x4c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bd32:	6803      	ldr	r3, [r0, #0]
 800bd34:	2210      	movs	r2, #16
 800bd36:	61da      	str	r2, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bd38:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800bd3a:	f043 0304 	orr.w	r3, r3, #4
 800bd3e:	6443      	str	r3, [r0, #68]	@ 0x44
    I2C_Flush_TXDR(hi2c);
 800bd40:	f7ff f9ee 	bl	800b120 <I2C_Flush_TXDR>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800bd44:	06aa      	lsls	r2, r5, #26
 800bd46:	d505      	bpl.n	800bd54 <I2C_Master_ISR_IT+0x42>
 800bd48:	06b3      	lsls	r3, r6, #26
 800bd4a:	d503      	bpl.n	800bd54 <I2C_Master_ISR_IT+0x42>
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800bd4c:	4629      	mov	r1, r5
 800bd4e:	4620      	mov	r0, r4
 800bd50:	f7ff ff68 	bl	800bc24 <I2C_ITMasterCplt>
  __HAL_UNLOCK(hi2c);
 800bd54:	2000      	movs	r0, #0
 800bd56:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
}
 800bd5a:	b002      	add	sp, #8
 800bd5c:	bd70      	pop	{r4, r5, r6, pc}
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800bd5e:	0768      	lsls	r0, r5, #29
 800bd60:	d512      	bpl.n	800bd88 <I2C_Master_ISR_IT+0x76>
 800bd62:	0771      	lsls	r1, r6, #29
 800bd64:	d510      	bpl.n	800bd88 <I2C_Master_ISR_IT+0x76>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800bd66:	6823      	ldr	r3, [r4, #0]
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800bd68:	f025 0504 	bic.w	r5, r5, #4
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800bd6c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bd6e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800bd70:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800bd72:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800bd74:	3301      	adds	r3, #1
    hi2c->pBuffPtr++;
 800bd76:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferSize--;
 800bd78:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800bd7a:	3b01      	subs	r3, #1
 800bd7c:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferCount--;
 800bd7e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800bd80:	3b01      	subs	r3, #1
 800bd82:	b29b      	uxth	r3, r3
 800bd84:	8563      	strh	r3, [r4, #42]	@ 0x2a
 800bd86:	e7dd      	b.n	800bd44 <I2C_Master_ISR_IT+0x32>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800bd88:	07aa      	lsls	r2, r5, #30
 800bd8a:	d507      	bpl.n	800bd9c <I2C_Master_ISR_IT+0x8a>
 800bd8c:	07b3      	lsls	r3, r6, #30
 800bd8e:	d505      	bpl.n	800bd9c <I2C_Master_ISR_IT+0x8a>
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800bd90:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800bd92:	6822      	ldr	r2, [r4, #0]
 800bd94:	f813 1b01 	ldrb.w	r1, [r3], #1
 800bd98:	6291      	str	r1, [r2, #40]	@ 0x28
 800bd9a:	e7ec      	b.n	800bd76 <I2C_Master_ISR_IT+0x64>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800bd9c:	0628      	lsls	r0, r5, #24
 800bd9e:	d532      	bpl.n	800be06 <I2C_Master_ISR_IT+0xf4>
 800bda0:	0671      	lsls	r1, r6, #25
 800bda2:	d530      	bpl.n	800be06 <I2C_Master_ISR_IT+0xf4>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bda4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bda6:	6822      	ldr	r2, [r4, #0]
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bda8:	b29b      	uxth	r3, r3
 800bdaa:	b303      	cbz	r3, 800bdee <I2C_Master_ISR_IT+0xdc>
 800bdac:	8d20      	ldrh	r0, [r4, #40]	@ 0x28
 800bdae:	b9f0      	cbnz	r0, 800bdee <I2C_Master_ISR_IT+0xdc>
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800bdb0:	6851      	ldr	r1, [r2, #4]
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bdb2:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800bdb4:	f3c1 0109 	ubfx	r1, r1, #0, #10
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bdb8:	b29b      	uxth	r3, r3
 800bdba:	2bff      	cmp	r3, #255	@ 0xff
 800bdbc:	d908      	bls.n	800bdd0 <I2C_Master_ISR_IT+0xbe>
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800bdbe:	22ff      	movs	r2, #255	@ 0xff
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800bdc0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800bdc4:	8522      	strh	r2, [r4, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800bdc6:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800bdc8:	4620      	mov	r0, r4
 800bdca:	f7ff f9b7 	bl	800b13c <I2C_TransferConfig>
 800bdce:	e7b9      	b.n	800bd44 <I2C_Master_ISR_IT+0x32>
        hi2c->XferSize = hi2c->XferCount;
 800bdd0:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800bdd2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
        hi2c->XferSize = hi2c->XferCount;
 800bdd4:	b292      	uxth	r2, r2
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800bdd6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
        hi2c->XferSize = hi2c->XferCount;
 800bdda:	8522      	strh	r2, [r4, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800bddc:	b2d2      	uxtb	r2, r2
 800bdde:	d002      	beq.n	800bde6 <I2C_Master_ISR_IT+0xd4>
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 800bde0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800bde2:	9000      	str	r0, [sp, #0]
 800bde4:	e7f0      	b.n	800bdc8 <I2C_Master_ISR_IT+0xb6>
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800bde6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800bdea:	9000      	str	r0, [sp, #0]
 800bdec:	e7ec      	b.n	800bdc8 <I2C_Master_ISR_IT+0xb6>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800bdee:	6853      	ldr	r3, [r2, #4]
 800bdf0:	019a      	lsls	r2, r3, #6
 800bdf2:	d403      	bmi.n	800bdfc <I2C_Master_ISR_IT+0xea>
        I2C_ITMasterSeqCplt(hi2c);
 800bdf4:	4620      	mov	r0, r4
 800bdf6:	f7ff fdb8 	bl	800b96a <I2C_ITMasterSeqCplt>
 800bdfa:	e7a3      	b.n	800bd44 <I2C_Master_ISR_IT+0x32>
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800bdfc:	2140      	movs	r1, #64	@ 0x40
 800bdfe:	4620      	mov	r0, r4
 800be00:	f7ff fe9e 	bl	800bb40 <I2C_ITError>
 800be04:	e79e      	b.n	800bd44 <I2C_Master_ISR_IT+0x32>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800be06:	066b      	lsls	r3, r5, #25
 800be08:	d59c      	bpl.n	800bd44 <I2C_Master_ISR_IT+0x32>
 800be0a:	0670      	lsls	r0, r6, #25
 800be0c:	d59a      	bpl.n	800bd44 <I2C_Master_ISR_IT+0x32>
    if (hi2c->XferCount == 0U)
 800be0e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800be10:	b29b      	uxth	r3, r3
 800be12:	2b00      	cmp	r3, #0
 800be14:	d1f2      	bne.n	800bdfc <I2C_Master_ISR_IT+0xea>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800be16:	6823      	ldr	r3, [r4, #0]
 800be18:	685a      	ldr	r2, [r3, #4]
 800be1a:	0191      	lsls	r1, r2, #6
 800be1c:	d492      	bmi.n	800bd44 <I2C_Master_ISR_IT+0x32>
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800be1e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800be20:	f512 3f80 	cmn.w	r2, #65536	@ 0x10000
 800be24:	d1e6      	bne.n	800bdf4 <I2C_Master_ISR_IT+0xe2>
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800be26:	685a      	ldr	r2, [r3, #4]
 800be28:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800be2c:	605a      	str	r2, [r3, #4]
 800be2e:	e789      	b.n	800bd44 <I2C_Master_ISR_IT+0x32>
  __HAL_LOCK(hi2c);
 800be30:	2002      	movs	r0, #2
 800be32:	e792      	b.n	800bd5a <I2C_Master_ISR_IT+0x48>

0800be34 <I2C_Master_ISR_DMA>:
{
 800be34:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __HAL_LOCK(hi2c);
 800be36:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
{
 800be3a:	4604      	mov	r4, r0
  __HAL_LOCK(hi2c);
 800be3c:	2b01      	cmp	r3, #1
 800be3e:	d079      	beq.n	800bf34 <I2C_Master_ISR_DMA+0x100>
 800be40:	2301      	movs	r3, #1
 800be42:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800be46:	06cb      	lsls	r3, r1, #27
 800be48:	d512      	bpl.n	800be70 <I2C_Master_ISR_DMA+0x3c>
 800be4a:	06d6      	lsls	r6, r2, #27
 800be4c:	d510      	bpl.n	800be70 <I2C_Master_ISR_DMA+0x3c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800be4e:	6803      	ldr	r3, [r0, #0]
 800be50:	2210      	movs	r2, #16
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800be52:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800be54:	61da      	str	r2, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800be56:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800be58:	f043 0304 	orr.w	r3, r3, #4
 800be5c:	6443      	str	r3, [r0, #68]	@ 0x44
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800be5e:	f7ff f983 	bl	800b168 <I2C_Enable_IRQ>
    I2C_Flush_TXDR(hi2c);
 800be62:	f7ff f95d 	bl	800b120 <I2C_Flush_TXDR>
  __HAL_UNLOCK(hi2c);
 800be66:	2000      	movs	r0, #0
 800be68:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
}
 800be6c:	b002      	add	sp, #8
 800be6e:	bd70      	pop	{r4, r5, r6, pc}
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800be70:	060d      	lsls	r5, r1, #24
 800be72:	d542      	bpl.n	800befa <I2C_Master_ISR_DMA+0xc6>
 800be74:	0650      	lsls	r0, r2, #25
 800be76:	d540      	bpl.n	800befa <I2C_Master_ISR_DMA+0xc6>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800be78:	6825      	ldr	r5, [r4, #0]
 800be7a:	682b      	ldr	r3, [r5, #0]
 800be7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800be80:	602b      	str	r3, [r5, #0]
    if (hi2c->XferCount != 0U)
 800be82:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800be84:	b29b      	uxth	r3, r3
 800be86:	b363      	cbz	r3, 800bee2 <I2C_Master_ISR_DMA+0xae>
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800be88:	6869      	ldr	r1, [r5, #4]
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800be8a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800be8c:	f3c1 0109 	ubfx	r1, r1, #0, #10
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800be90:	b29b      	uxth	r3, r3
 800be92:	2bff      	cmp	r3, #255	@ 0xff
 800be94:	d91a      	bls.n	800becc <I2C_Master_ISR_DMA+0x98>
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800be96:	23ff      	movs	r3, #255	@ 0xff
 800be98:	8523      	strh	r3, [r4, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 800be9a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800be9e:	2200      	movs	r2, #0
 800bea0:	8d26      	ldrh	r6, [r4, #40]	@ 0x28
 800bea2:	4620      	mov	r0, r4
 800bea4:	9200      	str	r2, [sp, #0]
 800bea6:	f894 2028 	ldrb.w	r2, [r4, #40]	@ 0x28
 800beaa:	f7ff f947 	bl	800b13c <I2C_TransferConfig>
      hi2c->XferCount -= hi2c->XferSize;
 800beae:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800beb0:	1b9b      	subs	r3, r3, r6
 800beb2:	b29b      	uxth	r3, r3
 800beb4:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800beb6:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800beba:	2b22      	cmp	r3, #34	@ 0x22
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800bebc:	682b      	ldr	r3, [r5, #0]
 800bebe:	bf0c      	ite	eq
 800bec0:	f443 4300 	orreq.w	r3, r3, #32768	@ 0x8000
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800bec4:	f443 4380 	orrne.w	r3, r3, #16384	@ 0x4000
 800bec8:	602b      	str	r3, [r5, #0]
 800beca:	e7cc      	b.n	800be66 <I2C_Master_ISR_DMA+0x32>
        hi2c->XferSize = hi2c->XferCount;
 800becc:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800bece:	8523      	strh	r3, [r4, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800bed0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800bed2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800bed6:	d001      	beq.n	800bedc <I2C_Master_ISR_DMA+0xa8>
          xfermode = hi2c->XferOptions;
 800bed8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800beda:	e7e0      	b.n	800be9e <I2C_Master_ISR_DMA+0x6a>
          xfermode = I2C_AUTOEND_MODE;
 800bedc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800bee0:	e7dd      	b.n	800be9e <I2C_Master_ISR_DMA+0x6a>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800bee2:	686b      	ldr	r3, [r5, #4]
 800bee4:	019a      	lsls	r2, r3, #6
 800bee6:	d403      	bmi.n	800bef0 <I2C_Master_ISR_DMA+0xbc>
        I2C_ITMasterSeqCplt(hi2c);
 800bee8:	4620      	mov	r0, r4
 800beea:	f7ff fd3e 	bl	800b96a <I2C_ITMasterSeqCplt>
 800beee:	e7ba      	b.n	800be66 <I2C_Master_ISR_DMA+0x32>
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800bef0:	2140      	movs	r1, #64	@ 0x40
 800bef2:	4620      	mov	r0, r4
 800bef4:	f7ff fe24 	bl	800bb40 <I2C_ITError>
 800bef8:	e7b5      	b.n	800be66 <I2C_Master_ISR_DMA+0x32>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800befa:	064b      	lsls	r3, r1, #25
 800befc:	d512      	bpl.n	800bf24 <I2C_Master_ISR_DMA+0xf0>
 800befe:	0656      	lsls	r6, r2, #25
 800bf00:	d510      	bpl.n	800bf24 <I2C_Master_ISR_DMA+0xf0>
    if (hi2c->XferCount == 0U)
 800bf02:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800bf04:	b29b      	uxth	r3, r3
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d1f2      	bne.n	800bef0 <I2C_Master_ISR_DMA+0xbc>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800bf0a:	6823      	ldr	r3, [r4, #0]
 800bf0c:	685a      	ldr	r2, [r3, #4]
 800bf0e:	0195      	lsls	r5, r2, #6
 800bf10:	d4a9      	bmi.n	800be66 <I2C_Master_ISR_DMA+0x32>
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800bf12:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800bf14:	f512 3f80 	cmn.w	r2, #65536	@ 0x10000
 800bf18:	d1e6      	bne.n	800bee8 <I2C_Master_ISR_DMA+0xb4>
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800bf1a:	685a      	ldr	r2, [r3, #4]
 800bf1c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800bf20:	605a      	str	r2, [r3, #4]
 800bf22:	e7a0      	b.n	800be66 <I2C_Master_ISR_DMA+0x32>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800bf24:	0688      	lsls	r0, r1, #26
 800bf26:	d59e      	bpl.n	800be66 <I2C_Master_ISR_DMA+0x32>
 800bf28:	0693      	lsls	r3, r2, #26
 800bf2a:	d59c      	bpl.n	800be66 <I2C_Master_ISR_DMA+0x32>
    I2C_ITMasterCplt(hi2c, ITFlags);
 800bf2c:	4620      	mov	r0, r4
 800bf2e:	f7ff fe79 	bl	800bc24 <I2C_ITMasterCplt>
 800bf32:	e798      	b.n	800be66 <I2C_Master_ISR_DMA+0x32>
  __HAL_LOCK(hi2c);
 800bf34:	2002      	movs	r0, #2
 800bf36:	e799      	b.n	800be6c <I2C_Master_ISR_DMA+0x38>

0800bf38 <I2C_ITSlaveCplt.constprop.0>:
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 800bf38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800bf3c:	6805      	ldr	r5, [r0, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bf3e:	2320      	movs	r3, #32
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 800bf40:	4604      	mov	r4, r0
 800bf42:	460e      	mov	r6, r1
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800bf44:	f8d5 8000 	ldr.w	r8, [r5]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800bf48:	f890 7041 	ldrb.w	r7, [r0, #65]	@ 0x41
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bf4c:	61eb      	str	r3, [r5, #28]
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800bf4e:	f007 07f7 	and.w	r7, r7, #247	@ 0xf7
 800bf52:	2f21      	cmp	r7, #33	@ 0x21
 800bf54:	d14f      	bne.n	800bff6 <I2C_ITSlaveCplt.constprop.0+0xbe>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800bf56:	f248 0101 	movw	r1, #32769	@ 0x8001
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800bf5a:	f7ff f941 	bl	800b1e0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800bf5e:	6327      	str	r7, [r4, #48]	@ 0x30
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800bf60:	686b      	ldr	r3, [r5, #4]
  I2C_Flush_TXDR(hi2c);
 800bf62:	4620      	mov	r0, r4
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800bf64:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bf68:	606b      	str	r3, [r5, #4]
  I2C_RESET_CR2(hi2c);
 800bf6a:	686b      	ldr	r3, [r5, #4]
 800bf6c:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 800bf70:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 800bf74:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 800bf78:	f023 0301 	bic.w	r3, r3, #1
 800bf7c:	606b      	str	r3, [r5, #4]
  I2C_Flush_TXDR(hi2c);
 800bf7e:	f7ff f8cf 	bl	800b120 <I2C_Flush_TXDR>
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800bf82:	f418 4f80 	tst.w	r8, #16384	@ 0x4000
 800bf86:	d03b      	beq.n	800c000 <I2C_ITSlaveCplt.constprop.0+0xc8>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800bf88:	682b      	ldr	r3, [r5, #0]
 800bf8a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bf8e:	602b      	str	r3, [r5, #0]
    if (hi2c->hdmatx != NULL)
 800bf90:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
    if (hi2c->hdmarx != NULL)
 800bf92:	b11b      	cbz	r3, 800bf9c <I2C_ITSlaveCplt.constprop.0+0x64>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	685b      	ldr	r3, [r3, #4]
 800bf98:	b29b      	uxth	r3, r3
 800bf9a:	8563      	strh	r3, [r4, #42]	@ 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800bf9c:	0773      	lsls	r3, r6, #29
 800bf9e:	d50f      	bpl.n	800bfc0 <I2C_ITSlaveCplt.constprop.0+0x88>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800bfa0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800bfa2:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 800bfa4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800bfa6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800bfa8:	3301      	adds	r3, #1
 800bfaa:	6263      	str	r3, [r4, #36]	@ 0x24
    if ((hi2c->XferSize > 0U))
 800bfac:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800bfae:	b12b      	cbz	r3, 800bfbc <I2C_ITSlaveCplt.constprop.0+0x84>
      hi2c->XferSize--;
 800bfb0:	3b01      	subs	r3, #1
 800bfb2:	8523      	strh	r3, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 800bfb4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800bfb6:	3b01      	subs	r3, #1
 800bfb8:	b29b      	uxth	r3, r3
 800bfba:	8563      	strh	r3, [r4, #42]	@ 0x2a
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800bfbc:	f026 0604 	bic.w	r6, r6, #4
  if (hi2c->XferCount != 0U)
 800bfc0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800bfc2:	b29b      	uxth	r3, r3
 800bfc4:	b11b      	cbz	r3, 800bfce <I2C_ITSlaveCplt.constprop.0+0x96>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bfc6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800bfc8:	f043 0304 	orr.w	r3, r3, #4
 800bfcc:	6463      	str	r3, [r4, #68]	@ 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800bfce:	2300      	movs	r3, #0
 800bfd0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800bfd4:	6c65      	ldr	r5, [r4, #68]	@ 0x44
  hi2c->XferISR = NULL;
 800bfd6:	6363      	str	r3, [r4, #52]	@ 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800bfd8:	b1dd      	cbz	r5, 800c012 <I2C_ITSlaveCplt.constprop.0+0xda>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800bfda:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800bfdc:	4620      	mov	r0, r4
 800bfde:	f7ff fdaf 	bl	800bb40 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800bfe2:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800bfe6:	2b28      	cmp	r3, #40	@ 0x28
 800bfe8:	d125      	bne.n	800c036 <I2C_ITSlaveCplt.constprop.0+0xfe>
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800bfea:	4631      	mov	r1, r6
 800bfec:	4620      	mov	r0, r4
}
 800bfee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800bff2:	f7ff bd5b 	b.w	800baac <I2C_ITListenCplt>
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800bff6:	2f22      	cmp	r7, #34	@ 0x22
 800bff8:	d1b2      	bne.n	800bf60 <I2C_ITSlaveCplt.constprop.0+0x28>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800bffa:	f248 0102 	movw	r1, #32770	@ 0x8002
 800bffe:	e7ac      	b.n	800bf5a <I2C_ITSlaveCplt.constprop.0+0x22>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800c000:	f418 4f00 	tst.w	r8, #32768	@ 0x8000
 800c004:	d0ca      	beq.n	800bf9c <I2C_ITSlaveCplt.constprop.0+0x64>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800c006:	682b      	ldr	r3, [r5, #0]
 800c008:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800c00c:	602b      	str	r3, [r5, #0]
    if (hi2c->hdmarx != NULL)
 800c00e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800c010:	e7bf      	b.n	800bf92 <I2C_ITSlaveCplt.constprop.0+0x5a>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800c012:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800c014:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800c018:	d00f      	beq.n	800c03a <I2C_ITSlaveCplt.constprop.0+0x102>
    I2C_ITSlaveSeqCplt(hi2c);
 800c01a:	4620      	mov	r0, r4
 800c01c:	f7ff fcc9 	bl	800b9b2 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c020:	4b0f      	ldr	r3, [pc, #60]	@ (800c060 <I2C_ITSlaveCplt.constprop.0+0x128>)
    HAL_I2C_ListenCpltCallback(hi2c);
 800c022:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 800c024:	f884 5040 	strb.w	r5, [r4, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c028:	62e3      	str	r3, [r4, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800c02a:	2320      	movs	r3, #32
 800c02c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800c030:	6325      	str	r5, [r4, #48]	@ 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
 800c032:	f7ff fd39 	bl	800baa8 <HAL_I2C_ListenCpltCallback>
}
 800c036:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c03a:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800c03e:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 800c040:	f884 5040 	strb.w	r5, [r4, #64]	@ 0x40
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c044:	2b22      	cmp	r3, #34	@ 0x22
 800c046:	f04f 0320 	mov.w	r3, #32
    hi2c->State = HAL_I2C_STATE_READY;
 800c04a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800c04e:	6325      	str	r5, [r4, #48]	@ 0x30
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c050:	d102      	bne.n	800c058 <I2C_ITSlaveCplt.constprop.0+0x120>
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800c052:	f7ff fcad 	bl	800b9b0 <HAL_I2C_SlaveRxCpltCallback>
 800c056:	e7ee      	b.n	800c036 <I2C_ITSlaveCplt.constprop.0+0xfe>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800c058:	f7ff fca9 	bl	800b9ae <HAL_I2C_SlaveTxCpltCallback>
}
 800c05c:	e7eb      	b.n	800c036 <I2C_ITSlaveCplt.constprop.0+0xfe>
 800c05e:	bf00      	nop
 800c060:	ffff0000 	.word	0xffff0000

0800c064 <I2C_Slave_ISR_DMA>:
{
 800c064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
 800c066:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
{
 800c06a:	4604      	mov	r4, r0
 800c06c:	460e      	mov	r6, r1
 800c06e:	4615      	mov	r5, r2
  __HAL_LOCK(hi2c);
 800c070:	2b01      	cmp	r3, #1
  uint32_t tmpoptions = hi2c->XferOptions;
 800c072:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
  __HAL_LOCK(hi2c);
 800c074:	d070      	beq.n	800c158 <I2C_Slave_ISR_DMA+0xf4>
 800c076:	2301      	movs	r3, #1
 800c078:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c07c:	068b      	lsls	r3, r1, #26
 800c07e:	d503      	bpl.n	800c088 <I2C_Slave_ISR_DMA+0x24>
 800c080:	06aa      	lsls	r2, r5, #26
 800c082:	d501      	bpl.n	800c088 <I2C_Slave_ISR_DMA+0x24>
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800c084:	f7ff ff58 	bl	800bf38 <I2C_ITSlaveCplt.constprop.0>
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c088:	06f3      	lsls	r3, r6, #27
 800c08a:	d55d      	bpl.n	800c148 <I2C_Slave_ISR_DMA+0xe4>
 800c08c:	06e8      	lsls	r0, r5, #27
 800c08e:	d55b      	bpl.n	800c148 <I2C_Slave_ISR_DMA+0xe4>
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800c090:	f415 4f40 	tst.w	r5, #49152	@ 0xc000
 800c094:	d054      	beq.n	800c140 <I2C_Slave_ISR_DMA+0xdc>
      if (hi2c->hdmarx != NULL)
 800c096:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800c098:	b1fa      	cbz	r2, 800c0da <I2C_Slave_ISR_DMA+0x76>
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800c09a:	f415 4300 	ands.w	r3, r5, #32768	@ 0x8000
 800c09e:	d004      	beq.n	800c0aa <I2C_Slave_ISR_DMA+0x46>
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800c0a0:	6813      	ldr	r3, [r2, #0]
 800c0a2:	685b      	ldr	r3, [r3, #4]
 800c0a4:	fab3 f383 	clz	r3, r3
 800c0a8:	095b      	lsrs	r3, r3, #5
      if (hi2c->hdmatx != NULL)
 800c0aa:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800c0ac:	b122      	cbz	r2, 800c0b8 <I2C_Slave_ISR_DMA+0x54>
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800c0ae:	0469      	lsls	r1, r5, #17
 800c0b0:	d502      	bpl.n	800c0b8 <I2C_Slave_ISR_DMA+0x54>
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800c0b2:	6812      	ldr	r2, [r2, #0]
 800c0b4:	6852      	ldr	r2, [r2, #4]
 800c0b6:	b10a      	cbz	r2, 800c0bc <I2C_Slave_ISR_DMA+0x58>
      if (treatdmanack == 1U)
 800c0b8:	2b01      	cmp	r3, #1
 800c0ba:	d121      	bne.n	800c100 <I2C_Slave_ISR_DMA+0x9c>
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800c0bc:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800c0c0:	2b28      	cmp	r3, #40	@ 0x28
 800c0c2:	d10c      	bne.n	800c0de <I2C_Slave_ISR_DMA+0x7a>
 800c0c4:	f1b7 7f00 	cmp.w	r7, #33554432	@ 0x2000000
 800c0c8:	d109      	bne.n	800c0de <I2C_Slave_ISR_DMA+0x7a>
          I2C_ITListenCplt(hi2c, ITFlags);
 800c0ca:	4631      	mov	r1, r6
 800c0cc:	4620      	mov	r0, r4
 800c0ce:	f7ff fced 	bl	800baac <I2C_ITListenCplt>
  __HAL_UNLOCK(hi2c);
 800c0d2:	2000      	movs	r0, #0
 800c0d4:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
}
 800c0d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  uint32_t treatdmanack = 0U;
 800c0da:	4613      	mov	r3, r2
 800c0dc:	e7e5      	b.n	800c0aa <I2C_Slave_ISR_DMA+0x46>
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800c0de:	f894 2041 	ldrb.w	r2, [r4, #65]	@ 0x41
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c0e2:	6823      	ldr	r3, [r4, #0]
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800c0e4:	2a29      	cmp	r2, #41	@ 0x29
 800c0e6:	f04f 0210 	mov.w	r2, #16
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c0ea:	61da      	str	r2, [r3, #28]
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800c0ec:	d1f1      	bne.n	800c0d2 <I2C_Slave_ISR_DMA+0x6e>
 800c0ee:	f517 3f80 	cmn.w	r7, #65536	@ 0x10000
 800c0f2:	d0ee      	beq.n	800c0d2 <I2C_Slave_ISR_DMA+0x6e>
          I2C_Flush_TXDR(hi2c);
 800c0f4:	4620      	mov	r0, r4
 800c0f6:	f7ff f813 	bl	800b120 <I2C_Flush_TXDR>
          I2C_ITSlaveSeqCplt(hi2c);
 800c0fa:	f7ff fc5a 	bl	800b9b2 <I2C_ITSlaveSeqCplt>
 800c0fe:	e7e8      	b.n	800c0d2 <I2C_Slave_ISR_DMA+0x6e>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c100:	6823      	ldr	r3, [r4, #0]
 800c102:	2210      	movs	r2, #16
 800c104:	61da      	str	r2, [r3, #28]
        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800c106:	f037 7280 	bics.w	r2, r7, #16777216	@ 0x1000000
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c10a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800c10c:	f043 0304 	orr.w	r3, r3, #4
 800c110:	6463      	str	r3, [r4, #68]	@ 0x44
        tmpstate = hi2c->State;
 800c112:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800c116:	b2db      	uxtb	r3, r3
        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800c118:	d1db      	bne.n	800c0d2 <I2C_Slave_ISR_DMA+0x6e>
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800c11a:	3b21      	subs	r3, #33	@ 0x21
 800c11c:	2b09      	cmp	r3, #9
 800c11e:	d808      	bhi.n	800c132 <I2C_Slave_ISR_DMA+0xce>
 800c120:	e8df f003 	tbb	[pc, r3]
 800c124:	07070c05 	.word	0x07070c05
 800c128:	07070707 	.word	0x07070707
 800c12c:	0c05      	.short	0x0c05
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800c12e:	2321      	movs	r3, #33	@ 0x21
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800c130:	6323      	str	r3, [r4, #48]	@ 0x30
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800c132:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800c134:	4620      	mov	r0, r4
 800c136:	f7ff fd03 	bl	800bb40 <I2C_ITError>
 800c13a:	e7ca      	b.n	800c0d2 <I2C_Slave_ISR_DMA+0x6e>
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800c13c:	2322      	movs	r3, #34	@ 0x22
 800c13e:	e7f7      	b.n	800c130 <I2C_Slave_ISR_DMA+0xcc>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c140:	6823      	ldr	r3, [r4, #0]
 800c142:	2210      	movs	r2, #16
 800c144:	61da      	str	r2, [r3, #28]
 800c146:	e7c4      	b.n	800c0d2 <I2C_Slave_ISR_DMA+0x6e>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800c148:	0732      	lsls	r2, r6, #28
 800c14a:	d5c2      	bpl.n	800c0d2 <I2C_Slave_ISR_DMA+0x6e>
 800c14c:	072b      	lsls	r3, r5, #28
 800c14e:	d5c0      	bpl.n	800c0d2 <I2C_Slave_ISR_DMA+0x6e>
    I2C_ITAddrCplt(hi2c, ITFlags);
 800c150:	4620      	mov	r0, r4
 800c152:	f7ff fc65 	bl	800ba20 <I2C_ITAddrCplt.constprop.0>
 800c156:	e7bc      	b.n	800c0d2 <I2C_Slave_ISR_DMA+0x6e>
  __HAL_LOCK(hi2c);
 800c158:	2002      	movs	r0, #2
 800c15a:	e7bd      	b.n	800c0d8 <I2C_Slave_ISR_DMA+0x74>

0800c15c <I2C_Slave_ISR_IT>:
{
 800c15c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
 800c15e:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
{
 800c162:	4604      	mov	r4, r0
 800c164:	460d      	mov	r5, r1
 800c166:	4616      	mov	r6, r2
  __HAL_LOCK(hi2c);
 800c168:	2b01      	cmp	r3, #1
  uint32_t tmpoptions = hi2c->XferOptions;
 800c16a:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
  __HAL_LOCK(hi2c);
 800c16c:	d07d      	beq.n	800c26a <I2C_Slave_ISR_IT+0x10e>
 800c16e:	2301      	movs	r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c170:	068a      	lsls	r2, r1, #26
  __HAL_LOCK(hi2c);
 800c172:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c176:	d503      	bpl.n	800c180 <I2C_Slave_ISR_IT+0x24>
 800c178:	06b3      	lsls	r3, r6, #26
 800c17a:	d501      	bpl.n	800c180 <I2C_Slave_ISR_IT+0x24>
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800c17c:	f7ff fedc 	bl	800bf38 <I2C_ITSlaveCplt.constprop.0>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800c180:	06e8      	lsls	r0, r5, #27
 800c182:	d533      	bpl.n	800c1ec <I2C_Slave_ISR_IT+0x90>
 800c184:	06f1      	lsls	r1, r6, #27
 800c186:	d531      	bpl.n	800c1ec <I2C_Slave_ISR_IT+0x90>
    if (hi2c->XferCount == 0U)
 800c188:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800c18a:	b29b      	uxth	r3, r3
 800c18c:	b9fb      	cbnz	r3, 800c1ce <I2C_Slave_ISR_IT+0x72>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800c18e:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800c192:	2b28      	cmp	r3, #40	@ 0x28
 800c194:	d10a      	bne.n	800c1ac <I2C_Slave_ISR_IT+0x50>
 800c196:	f1b7 7f00 	cmp.w	r7, #33554432	@ 0x2000000
 800c19a:	d107      	bne.n	800c1ac <I2C_Slave_ISR_IT+0x50>
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800c19c:	4629      	mov	r1, r5
 800c19e:	4620      	mov	r0, r4
 800c1a0:	f7ff fc84 	bl	800baac <I2C_ITListenCplt>
  __HAL_UNLOCK(hi2c);
 800c1a4:	2000      	movs	r0, #0
 800c1a6:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
}
 800c1aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800c1ac:	f894 2041 	ldrb.w	r2, [r4, #65]	@ 0x41
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c1b0:	6823      	ldr	r3, [r4, #0]
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800c1b2:	2a29      	cmp	r2, #41	@ 0x29
 800c1b4:	f04f 0210 	mov.w	r2, #16
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c1b8:	61da      	str	r2, [r3, #28]
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800c1ba:	d1f3      	bne.n	800c1a4 <I2C_Slave_ISR_IT+0x48>
 800c1bc:	f517 3f80 	cmn.w	r7, #65536	@ 0x10000
 800c1c0:	d0f0      	beq.n	800c1a4 <I2C_Slave_ISR_IT+0x48>
        I2C_Flush_TXDR(hi2c);
 800c1c2:	4620      	mov	r0, r4
 800c1c4:	f7fe ffac 	bl	800b120 <I2C_Flush_TXDR>
      I2C_ITSlaveSeqCplt(hi2c);
 800c1c8:	f7ff fbf3 	bl	800b9b2 <I2C_ITSlaveSeqCplt>
 800c1cc:	e7ea      	b.n	800c1a4 <I2C_Slave_ISR_IT+0x48>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c1ce:	6823      	ldr	r3, [r4, #0]
 800c1d0:	2210      	movs	r2, #16
 800c1d2:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c1d4:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800c1d6:	f043 0304 	orr.w	r3, r3, #4
 800c1da:	6463      	str	r3, [r4, #68]	@ 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800c1dc:	f037 7380 	bics.w	r3, r7, #16777216	@ 0x1000000
 800c1e0:	d1e0      	bne.n	800c1a4 <I2C_Slave_ISR_IT+0x48>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800c1e2:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800c1e4:	4620      	mov	r0, r4
 800c1e6:	f7ff fcab 	bl	800bb40 <I2C_ITError>
 800c1ea:	e7db      	b.n	800c1a4 <I2C_Slave_ISR_IT+0x48>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800c1ec:	076a      	lsls	r2, r5, #29
 800c1ee:	d51b      	bpl.n	800c228 <I2C_Slave_ISR_IT+0xcc>
 800c1f0:	0773      	lsls	r3, r6, #29
 800c1f2:	d519      	bpl.n	800c228 <I2C_Slave_ISR_IT+0xcc>
    if (hi2c->XferCount > 0U)
 800c1f4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800c1f6:	b29b      	uxth	r3, r3
 800c1f8:	b16b      	cbz	r3, 800c216 <I2C_Slave_ISR_IT+0xba>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c1fa:	6823      	ldr	r3, [r4, #0]
 800c1fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c1fe:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800c200:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800c202:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800c204:	3301      	adds	r3, #1
 800c206:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 800c208:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800c20a:	3b01      	subs	r3, #1
 800c20c:	8523      	strh	r3, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 800c20e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800c210:	3b01      	subs	r3, #1
 800c212:	b29b      	uxth	r3, r3
 800c214:	8563      	strh	r3, [r4, #42]	@ 0x2a
    if ((hi2c->XferCount == 0U) && \
 800c216:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800c218:	b29b      	uxth	r3, r3
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d1c2      	bne.n	800c1a4 <I2C_Slave_ISR_IT+0x48>
 800c21e:	f517 3f80 	cmn.w	r7, #65536	@ 0x10000
 800c222:	d0bf      	beq.n	800c1a4 <I2C_Slave_ISR_IT+0x48>
      I2C_ITSlaveSeqCplt(hi2c);
 800c224:	4620      	mov	r0, r4
 800c226:	e7cf      	b.n	800c1c8 <I2C_Slave_ISR_IT+0x6c>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800c228:	0728      	lsls	r0, r5, #28
 800c22a:	d505      	bpl.n	800c238 <I2C_Slave_ISR_IT+0xdc>
 800c22c:	0731      	lsls	r1, r6, #28
 800c22e:	d503      	bpl.n	800c238 <I2C_Slave_ISR_IT+0xdc>
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800c230:	4620      	mov	r0, r4
 800c232:	f7ff fbf5 	bl	800ba20 <I2C_ITAddrCplt.constprop.0>
 800c236:	e7b5      	b.n	800c1a4 <I2C_Slave_ISR_IT+0x48>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c238:	07aa      	lsls	r2, r5, #30
 800c23a:	d5b3      	bpl.n	800c1a4 <I2C_Slave_ISR_IT+0x48>
 800c23c:	07b3      	lsls	r3, r6, #30
 800c23e:	d5b1      	bpl.n	800c1a4 <I2C_Slave_ISR_IT+0x48>
    if (hi2c->XferCount > 0U)
 800c240:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800c242:	b29b      	uxth	r3, r3
 800c244:	b16b      	cbz	r3, 800c262 <I2C_Slave_ISR_IT+0x106>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800c246:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800c248:	6822      	ldr	r2, [r4, #0]
 800c24a:	f813 1b01 	ldrb.w	r1, [r3], #1
 800c24e:	6291      	str	r1, [r2, #40]	@ 0x28
      hi2c->pBuffPtr++;
 800c250:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 800c252:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800c254:	3b01      	subs	r3, #1
 800c256:	b29b      	uxth	r3, r3
 800c258:	8563      	strh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800c25a:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800c25c:	3b01      	subs	r3, #1
 800c25e:	8523      	strh	r3, [r4, #40]	@ 0x28
 800c260:	e7a0      	b.n	800c1a4 <I2C_Slave_ISR_IT+0x48>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800c262:	f037 7380 	bics.w	r3, r7, #16777216	@ 0x1000000
 800c266:	d19d      	bne.n	800c1a4 <I2C_Slave_ISR_IT+0x48>
 800c268:	e7dc      	b.n	800c224 <I2C_Slave_ISR_IT+0xc8>
  __HAL_LOCK(hi2c);
 800c26a:	2002      	movs	r0, #2
 800c26c:	e79d      	b.n	800c1aa <I2C_Slave_ISR_IT+0x4e>

0800c26e <I2C_DMAAbort>:
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800c26e:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  if (hi2c->hdmatx != NULL)
 800c270:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800c272:	b10b      	cbz	r3, 800c278 <I2C_DMAAbort+0xa>
    hi2c->hdmatx->XferAbortCallback = NULL;
 800c274:	2200      	movs	r2, #0
 800c276:	651a      	str	r2, [r3, #80]	@ 0x50
  if (hi2c->hdmarx != NULL)
 800c278:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800c27a:	b10b      	cbz	r3, 800c280 <I2C_DMAAbort+0x12>
    hi2c->hdmarx->XferAbortCallback = NULL;
 800c27c:	2200      	movs	r2, #0
 800c27e:	651a      	str	r2, [r3, #80]	@ 0x50
  I2C_TreatErrorCallback(hi2c);
 800c280:	f7ff bc48 	b.w	800bb14 <I2C_TreatErrorCallback>

0800c284 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800c284:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c286:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
{
 800c28a:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800c28c:	2a20      	cmp	r2, #32
 800c28e:	b2d4      	uxtb	r4, r2
 800c290:	d11c      	bne.n	800c2cc <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c292:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 800c296:	2a01      	cmp	r2, #1
 800c298:	d018      	beq.n	800c2cc <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c29a:	2224      	movs	r2, #36	@ 0x24
 800c29c:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c2a0:	6802      	ldr	r2, [r0, #0]
 800c2a2:	6810      	ldr	r0, [r2, #0]
 800c2a4:	f020 0001 	bic.w	r0, r0, #1
 800c2a8:	6010      	str	r0, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800c2aa:	6810      	ldr	r0, [r2, #0]
 800c2ac:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 800c2b0:	6010      	str	r0, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800c2b2:	6810      	ldr	r0, [r2, #0]
 800c2b4:	4301      	orrs	r1, r0
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c2b6:	2000      	movs	r0, #0
    hi2c->Instance->CR1 |= AnalogFilter;
 800c2b8:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 800c2ba:	6811      	ldr	r1, [r2, #0]
 800c2bc:	f041 0101 	orr.w	r1, r1, #1
 800c2c0:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800c2c2:	f883 4041 	strb.w	r4, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 800c2c6:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 800c2ca:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hi2c);
 800c2cc:	2002      	movs	r0, #2
 800c2ce:	e7fc      	b.n	800c2ca <HAL_I2CEx_ConfigAnalogFilter+0x46>

0800c2d0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800c2d0:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c2d2:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
{
 800c2d6:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800c2d8:	2a20      	cmp	r2, #32
 800c2da:	b2d4      	uxtb	r4, r2
 800c2dc:	d11b      	bne.n	800c316 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c2de:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 800c2e2:	2a01      	cmp	r2, #1
 800c2e4:	d017      	beq.n	800c316 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c2e6:	2224      	movs	r2, #36	@ 0x24
 800c2e8:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c2ec:	6802      	ldr	r2, [r0, #0]
 800c2ee:	6810      	ldr	r0, [r2, #0]
 800c2f0:	f020 0001 	bic.w	r0, r0, #1
 800c2f4:	6010      	str	r0, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800c2f6:	6810      	ldr	r0, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800c2f8:	f420 6070 	bic.w	r0, r0, #3840	@ 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800c2fc:	ea40 2101 	orr.w	r1, r0, r1, lsl #8
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c300:	2000      	movs	r0, #0
    hi2c->Instance->CR1 = tmpreg;
 800c302:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 800c304:	6811      	ldr	r1, [r2, #0]
 800c306:	f041 0101 	orr.w	r1, r1, #1
 800c30a:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800c30c:	f883 4041 	strb.w	r4, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 800c310:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 800c314:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hi2c);
 800c316:	2002      	movs	r0, #2
 800c318:	e7fc      	b.n	800c314 <HAL_I2CEx_ConfigDigitalFilter+0x44>
	...

0800c31c <HAL_I2CEx_EnableFastModePlus>:
{
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c31c:	4b08      	ldr	r3, [pc, #32]	@ (800c340 <HAL_I2CEx_EnableFastModePlus+0x24>)
{
 800c31e:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c320:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c322:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c326:	645a      	str	r2, [r3, #68]	@ 0x44
 800c328:	6c5b      	ldr	r3, [r3, #68]	@ 0x44

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMC, (uint32_t)ConfigFastModePlus);
 800c32a:	4a06      	ldr	r2, [pc, #24]	@ (800c344 <HAL_I2CEx_EnableFastModePlus+0x28>)
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c32c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c330:	9301      	str	r3, [sp, #4]
 800c332:	9b01      	ldr	r3, [sp, #4]
  SET_BIT(SYSCFG->PMC, (uint32_t)ConfigFastModePlus);
 800c334:	6853      	ldr	r3, [r2, #4]
 800c336:	4303      	orrs	r3, r0
 800c338:	6053      	str	r3, [r2, #4]
}
 800c33a:	b002      	add	sp, #8
 800c33c:	4770      	bx	lr
 800c33e:	bf00      	nop
 800c340:	40023800 	.word	0x40023800
 800c344:	40013800 	.word	0x40013800

0800c348 <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800c348:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800c34a:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800c34c:	f8d1 c000 	ldr.w	ip, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800c350:	3284      	adds	r2, #132	@ 0x84
 800c352:	1883      	adds	r3, r0, r2
{
 800c354:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800c358:	68c6      	ldr	r6, [r0, #12]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800c35a:	f10c 0701 	add.w	r7, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800c35e:	685d      	ldr	r5, [r3, #4]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800c360:	f04f 0e00 	mov.w	lr, #0
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800c364:	684c      	ldr	r4, [r1, #4]
 800c366:	f3c6 460b 	ubfx	r6, r6, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800c36a:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800c36e:	f8d1 9018 	ldr.w	r9, [r1, #24]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800c372:	4426      	add	r6, r4
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800c374:	605d      	str	r5, [r3, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800c376:	68c5      	ldr	r5, [r0, #12]
 800c378:	f3c5 450b 	ubfx	r5, r5, #16, #12
 800c37c:	443d      	add	r5, r7
 800c37e:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800c382:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800c384:	68c6      	ldr	r6, [r0, #12]
 800c386:	68cd      	ldr	r5, [r1, #12]
 800c388:	f3c6 060a 	ubfx	r6, r6, #0, #11
 800c38c:	442e      	add	r6, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800c38e:	689d      	ldr	r5, [r3, #8]
 800c390:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
 800c394:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800c396:	688d      	ldr	r5, [r1, #8]
 800c398:	68c7      	ldr	r7, [r0, #12]
 800c39a:	3501      	adds	r5, #1
 800c39c:	f3c7 070a 	ubfx	r7, r7, #0, #11
 800c3a0:	443d      	add	r5, r7
 800c3a2:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800c3a6:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800c3a8:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800c3aa:	691d      	ldr	r5, [r3, #16]
 800c3ac:	f025 0507 	bic.w	r5, r5, #7
 800c3b0:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800c3b2:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800c3b4:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800c3b6:	f891 7032 	ldrb.w	r7, [r1, #50]	@ 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800c3ba:	f891 8031 	ldrb.w	r8, [r1, #49]	@ 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800c3be:	f8c3 e018 	str.w	lr, [r3, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800c3c2:	f891 5030 	ldrb.w	r5, [r1, #48]	@ 0x30
 800c3c6:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 800c3ca:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 800c3ce:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 800c3d2:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800c3d4:	695d      	ldr	r5, [r3, #20]
 800c3d6:	f025 05ff 	bic.w	r5, r5, #255	@ 0xff
 800c3da:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800c3dc:	694d      	ldr	r5, [r1, #20]
 800c3de:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800c3e0:	69dd      	ldr	r5, [r3, #28]
 800c3e2:	f425 65e0 	bic.w	r5, r5, #1792	@ 0x700
 800c3e6:	f025 0507 	bic.w	r5, r5, #7
 800c3ea:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800c3ec:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 800c3f0:	433d      	orrs	r5, r7
 800c3f2:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800c3f4:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800c3f6:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800c3f8:	f8c3 e028 	str.w	lr, [r3, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800c3fc:	629d      	str	r5, [r3, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800c3fe:	b31e      	cbz	r6, 800c448 <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800c400:	2e01      	cmp	r6, #1
 800c402:	d023      	beq.n	800c44c <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800c404:	1eb5      	subs	r5, r6, #2
 800c406:	2d02      	cmp	r5, #2
 800c408:	d922      	bls.n	800c450 <LTDC_SetConfig+0x108>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
  {
    tmp = 2U;
 800c40a:	2e07      	cmp	r6, #7
 800c40c:	bf14      	ite	ne
 800c40e:	2501      	movne	r5, #1
 800c410:	2502      	moveq	r5, #2
  {
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800c412:	6ade      	ldr	r6, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800c414:	eba4 040c 	sub.w	r4, r4, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800c418:	f006 26e0 	and.w	r6, r6, #3758153728	@ 0xe000e000
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800c41c:	436c      	muls	r4, r5
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800c41e:	62de      	str	r6, [r3, #44]	@ 0x2c
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800c420:	3403      	adds	r4, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800c422:	6a8e      	ldr	r6, [r1, #40]	@ 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800c424:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800c426:	436e      	muls	r6, r5
 800c428:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 800c42c:	62dc      	str	r4, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800c42e:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 800c430:	f424 64ff 	bic.w	r4, r4, #2040	@ 0x7f8
 800c434:	f024 0407 	bic.w	r4, r4, #7
 800c438:	631c      	str	r4, [r3, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800c43a:	6319      	str	r1, [r3, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800c43c:	5883      	ldr	r3, [r0, r2]
 800c43e:	f043 0301 	orr.w	r3, r3, #1
 800c442:	5083      	str	r3, [r0, r2]
}
 800c444:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 800c448:	2504      	movs	r5, #4
 800c44a:	e7e2      	b.n	800c412 <LTDC_SetConfig+0xca>
    tmp = 3U;
 800c44c:	2503      	movs	r5, #3
 800c44e:	e7e0      	b.n	800c412 <LTDC_SetConfig+0xca>
    tmp = 2U;
 800c450:	2502      	movs	r5, #2
 800c452:	e7de      	b.n	800c412 <LTDC_SetConfig+0xca>

0800c454 <HAL_LTDC_Init>:
{
 800c454:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 800c456:	4604      	mov	r4, r0
 800c458:	2800      	cmp	r0, #0
 800c45a:	d063      	beq.n	800c524 <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800c45c:	f890 30a1 	ldrb.w	r3, [r0, #161]	@ 0xa1
 800c460:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800c464:	b91b      	cbnz	r3, 800c46e <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 800c466:	f880 20a0 	strb.w	r2, [r0, #160]	@ 0xa0
    HAL_LTDC_MspInit(hltdc);
 800c46a:	f7f6 fa9b 	bl	80029a4 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800c46e:	2302      	movs	r3, #2
 800c470:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800c474:	6823      	ldr	r3, [r4, #0]
 800c476:	699a      	ldr	r2, [r3, #24]
 800c478:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800c47c:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800c47e:	6999      	ldr	r1, [r3, #24]
 800c480:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 800c484:	4302      	orrs	r2, r0
 800c486:	68e0      	ldr	r0, [r4, #12]
 800c488:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800c48a:	6920      	ldr	r0, [r4, #16]
 800c48c:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800c48e:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800c490:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800c492:	4925      	ldr	r1, [pc, #148]	@ (800c528 <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800c494:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800c496:	689a      	ldr	r2, [r3, #8]
 800c498:	400a      	ands	r2, r1
 800c49a:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800c49c:	689a      	ldr	r2, [r3, #8]
 800c49e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800c4a2:	69a0      	ldr	r0, [r4, #24]
 800c4a4:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800c4a6:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800c4a8:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800c4aa:	68da      	ldr	r2, [r3, #12]
 800c4ac:	400a      	ands	r2, r1
 800c4ae:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800c4b0:	68da      	ldr	r2, [r3, #12]
 800c4b2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800c4b6:	6a20      	ldr	r0, [r4, #32]
 800c4b8:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800c4ba:	6a60      	ldr	r0, [r4, #36]	@ 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800c4bc:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800c4be:	691a      	ldr	r2, [r3, #16]
 800c4c0:	400a      	ands	r2, r1
 800c4c2:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800c4c4:	691a      	ldr	r2, [r3, #16]
 800c4c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800c4ca:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800c4cc:	4302      	orrs	r2, r0
 800c4ce:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800c4d0:	695a      	ldr	r2, [r3, #20]
 800c4d2:	400a      	ands	r2, r1
  tmp = (hltdc->Init.TotalWidth << 16U);
 800c4d4:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800c4d6:	615a      	str	r2, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800c4d8:	695a      	ldr	r2, [r3, #20]
 800c4da:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800c4de:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800c4e0:	430a      	orrs	r2, r1
 800c4e2:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800c4e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800c4e6:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800c4ea:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800c4ee:	f894 1036 	ldrb.w	r1, [r4, #54]	@ 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800c4f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800c4f4:	6add      	ldr	r5, [r3, #44]	@ 0x2c
 800c4f6:	f894 2034 	ldrb.w	r2, [r4, #52]	@ 0x34
 800c4fa:	432a      	orrs	r2, r5
 800c4fc:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800c500:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800c502:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800c506:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800c508:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c50a:	f042 0206 	orr.w	r2, r2, #6
 800c50e:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_LTDC_ENABLE(hltdc);
 800c510:	699a      	ldr	r2, [r3, #24]
 800c512:	f042 0201 	orr.w	r2, r2, #1
 800c516:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 800c518:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800c51a:	f8c4 00a4 	str.w	r0, [r4, #164]	@ 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 800c51e:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
}
 800c522:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800c524:	2001      	movs	r0, #1
 800c526:	e7fc      	b.n	800c522 <HAL_LTDC_Init+0xce>
 800c528:	f000f800 	.word	0xf000f800

0800c52c <HAL_LTDC_ErrorCallback>:
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
 800c52c:	4770      	bx	lr

0800c52e <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800c52e:	6803      	ldr	r3, [r0, #0]
{
 800c530:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800c532:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
{
 800c534:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800c536:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800c538:	0772      	lsls	r2, r6, #29
 800c53a:	d514      	bpl.n	800c566 <HAL_LTDC_IRQHandler+0x38>
 800c53c:	0769      	lsls	r1, r5, #29
 800c53e:	d512      	bpl.n	800c566 <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800c540:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c542:	f022 0204 	bic.w	r2, r2, #4
 800c546:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800c548:	2204      	movs	r2, #4
 800c54a:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800c54c:	f8d0 30a4 	ldr.w	r3, [r0, #164]	@ 0xa4
 800c550:	f043 0301 	orr.w	r3, r3, #1
 800c554:	f8c0 30a4 	str.w	r3, [r0, #164]	@ 0xa4
    __HAL_UNLOCK(hltdc);
 800c558:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800c55a:	f880 20a1 	strb.w	r2, [r0, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800c55e:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800c562:	f7ff ffe3 	bl	800c52c <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800c566:	07b2      	lsls	r2, r6, #30
 800c568:	d516      	bpl.n	800c598 <HAL_LTDC_IRQHandler+0x6a>
 800c56a:	07ab      	lsls	r3, r5, #30
 800c56c:	d514      	bpl.n	800c598 <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800c56e:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
 800c570:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800c572:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c574:	f022 0202 	bic.w	r2, r2, #2
 800c578:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800c57a:	2202      	movs	r2, #2
 800c57c:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800c57e:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 800c582:	4313      	orrs	r3, r2
 800c584:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800c588:	2304      	movs	r3, #4
 800c58a:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800c58e:	2300      	movs	r3, #0
 800c590:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800c594:	f7ff ffca 	bl	800c52c <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800c598:	07f0      	lsls	r0, r6, #31
 800c59a:	d510      	bpl.n	800c5be <HAL_LTDC_IRQHandler+0x90>
 800c59c:	07e9      	lsls	r1, r5, #31
 800c59e:	d50e      	bpl.n	800c5be <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800c5a0:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
 800c5a2:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800c5a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c5a6:	f022 0201 	bic.w	r2, r2, #1
 800c5aa:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800c5ac:	2201      	movs	r2, #1
 800c5ae:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_UNLOCK(hltdc);
 800c5b0:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 800c5b2:	f884 20a1 	strb.w	r2, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800c5b6:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 800c5ba:	f7f7 feb7 	bl	800432c <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800c5be:	0732      	lsls	r2, r6, #28
 800c5c0:	d511      	bpl.n	800c5e6 <HAL_LTDC_IRQHandler+0xb8>
 800c5c2:	072b      	lsls	r3, r5, #28
 800c5c4:	d50f      	bpl.n	800c5e6 <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800c5c6:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ReloadEventCallback(hltdc);
 800c5c8:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800c5ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c5cc:	f022 0208 	bic.w	r2, r2, #8
 800c5d0:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800c5d2:	2208      	movs	r2, #8
 800c5d4:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 800c5d6:	2301      	movs	r3, #1
 800c5d8:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800c5dc:	2300      	movs	r3, #0
 800c5de:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 800c5e2:	f7f5 f85d 	bl	80016a0 <HAL_LTDC_ReloadEventCallback>
}
 800c5e6:	bd70      	pop	{r4, r5, r6, pc}

0800c5e8 <HAL_LTDC_ConfigLayer>:
{
 800c5e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 800c5ec:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
{
 800c5f0:	4606      	mov	r6, r0
 800c5f2:	460f      	mov	r7, r1
 800c5f4:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 800c5f6:	2b01      	cmp	r3, #1
 800c5f8:	f04f 0002 	mov.w	r0, #2
 800c5fc:	d01f      	beq.n	800c63e <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800c5fe:	2434      	movs	r4, #52	@ 0x34
  __HAL_LOCK(hltdc);
 800c600:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800c604:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800c606:	f886 00a1 	strb.w	r0, [r6, #161]	@ 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800c60a:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 800c60e:	f886 80a0 	strb.w	r8, [r6, #160]	@ 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800c612:	3438      	adds	r4, #56	@ 0x38
 800c614:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c616:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c618:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c61a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c61c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c61e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c620:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800c622:	4630      	mov	r0, r6
 800c624:	4662      	mov	r2, ip
 800c626:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800c628:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800c62a:	f7ff fe8d 	bl	800c348 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800c62e:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 800c630:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800c632:	f8c3 8024 	str.w	r8, [r3, #36]	@ 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 800c636:	f886 80a1 	strb.w	r8, [r6, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 800c63a:	f886 00a0 	strb.w	r0, [r6, #160]	@ 0xa0
}
 800c63e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c642 <HAL_LTDC_ConfigCLUT>:
{
 800c642:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c644:	4605      	mov	r5, r0
  __HAL_LOCK(hltdc);
 800c646:	f890 00a0 	ldrb.w	r0, [r0, #160]	@ 0xa0
 800c64a:	2801      	cmp	r0, #1
 800c64c:	f04f 0002 	mov.w	r0, #2
 800c650:	d013      	beq.n	800c67a <HAL_LTDC_ConfigCLUT+0x38>
    LTDC_LAYER(hltdc, LayerIdx)->CLUTWR  = tmp;
 800c652:	ea4f 1cc3 	mov.w	ip, r3, lsl #7
    if (hltdc->LayerCfg[LayerIdx].PixelFormat == LTDC_PIXEL_FORMAT_AL44)
 800c656:	2434      	movs	r4, #52	@ 0x34
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800c658:	f885 00a1 	strb.w	r0, [r5, #161]	@ 0xa1
      tmp  = (((counter + (16U * counter)) << 24U) | ((uint32_t)(*pcolorlut) & 0xFFU) | \
 800c65c:	f04f 5e88 	mov.w	lr, #285212672	@ 0x11000000
 800c660:	f10c 0c84 	add.w	ip, ip, #132	@ 0x84
  for (counter = 0U; (counter < CLUTSize); counter++)
 800c664:	2000      	movs	r0, #0
    if (hltdc->LayerCfg[LayerIdx].PixelFormat == LTDC_PIXEL_FORMAT_AL44)
 800c666:	fb04 5303 	mla	r3, r4, r3, r5
  for (counter = 0U; (counter < CLUTSize); counter++)
 800c66a:	4290      	cmp	r0, r2
 800c66c:	d106      	bne.n	800c67c <HAL_LTDC_ConfigCLUT+0x3a>
  hltdc->State = HAL_LTDC_STATE_READY;
 800c66e:	2301      	movs	r3, #1
  __HAL_UNLOCK(hltdc);
 800c670:	2000      	movs	r0, #0
  hltdc->State = HAL_LTDC_STATE_READY;
 800c672:	f885 30a1 	strb.w	r3, [r5, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 800c676:	f885 00a0 	strb.w	r0, [r5, #160]	@ 0xa0
}
 800c67a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (hltdc->LayerCfg[LayerIdx].PixelFormat == LTDC_PIXEL_FORMAT_AL44)
 800c67c:	6c9f      	ldr	r7, [r3, #72]	@ 0x48
      tmp  = (((counter + (16U * counter)) << 24U) | ((uint32_t)(*pcolorlut) & 0xFFU) | \
 800c67e:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
    if (hltdc->LayerCfg[LayerIdx].PixelFormat == LTDC_PIXEL_FORMAT_AL44)
 800c682:	2f06      	cmp	r7, #6
              ((uint32_t)(*pcolorlut) & 0xFF00U) | ((uint32_t)(*pcolorlut) & 0xFF0000U));
 800c684:	f406 047f 	and.w	r4, r6, #16711680	@ 0xff0000
    if (hltdc->LayerCfg[LayerIdx].PixelFormat == LTDC_PIXEL_FORMAT_AL44)
 800c688:	d10c      	bne.n	800c6a4 <HAL_LTDC_ConfigCLUT+0x62>
      tmp  = (((counter + (16U * counter)) << 24U) | ((uint32_t)(*pcolorlut) & 0xFFU) | \
 800c68a:	fb0e f700 	mul.w	r7, lr, r0
 800c68e:	4327      	orrs	r7, r4
 800c690:	b2f4      	uxtb	r4, r6
 800c692:	4327      	orrs	r7, r4
              ((uint32_t)(*pcolorlut) & 0xFF00U) | ((uint32_t)(*pcolorlut) & 0xFF0000U));
 800c694:	f406 447f 	and.w	r4, r6, #65280	@ 0xff00
      tmp  = (((counter + (16U * counter)) << 24U) | ((uint32_t)(*pcolorlut) & 0xFFU) | \
 800c698:	433c      	orrs	r4, r7
    LTDC_LAYER(hltdc, LayerIdx)->CLUTWR  = tmp;
 800c69a:	682e      	ldr	r6, [r5, #0]
  for (counter = 0U; (counter < CLUTSize); counter++)
 800c69c:	3001      	adds	r0, #1
    LTDC_LAYER(hltdc, LayerIdx)->CLUTWR  = tmp;
 800c69e:	4466      	add	r6, ip
 800c6a0:	6434      	str	r4, [r6, #64]	@ 0x40
  for (counter = 0U; (counter < CLUTSize); counter++)
 800c6a2:	e7e2      	b.n	800c66a <HAL_LTDC_ConfigCLUT+0x28>
      tmp  = ((counter << 24U) | ((uint32_t)(*pcolorlut) & 0xFFU) | \
 800c6a4:	ea44 6400 	orr.w	r4, r4, r0, lsl #24
 800c6a8:	b2b6      	uxth	r6, r6
 800c6aa:	4334      	orrs	r4, r6
 800c6ac:	e7f5      	b.n	800c69a <HAL_LTDC_ConfigCLUT+0x58>

0800c6ae <HAL_LTDC_EnableCLUT>:
  __HAL_LOCK(hltdc);
 800c6ae:	f890 20a0 	ldrb.w	r2, [r0, #160]	@ 0xa0
{
 800c6b2:	4603      	mov	r3, r0
 800c6b4:	2002      	movs	r0, #2
  __HAL_LOCK(hltdc);
 800c6b6:	2a01      	cmp	r2, #1
 800c6b8:	d00f      	beq.n	800c6da <HAL_LTDC_EnableCLUT+0x2c>
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_CLUTEN;
 800c6ba:	01c9      	lsls	r1, r1, #7
 800c6bc:	681a      	ldr	r2, [r3, #0]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800c6be:	f883 00a1 	strb.w	r0, [r3, #161]	@ 0xa1
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_CLUTEN;
 800c6c2:	3184      	adds	r1, #132	@ 0x84
 800c6c4:	5850      	ldr	r0, [r2, r1]
 800c6c6:	f040 0010 	orr.w	r0, r0, #16
 800c6ca:	5050      	str	r0, [r2, r1]
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800c6cc:	2101      	movs	r1, #1
  __HAL_UNLOCK(hltdc);
 800c6ce:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800c6d0:	6251      	str	r1, [r2, #36]	@ 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 800c6d2:	f883 10a1 	strb.w	r1, [r3, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 800c6d6:	f883 00a0 	strb.w	r0, [r3, #160]	@ 0xa0
}
 800c6da:	4770      	bx	lr

0800c6dc <HAL_LTDC_SetAlpha>:
{
 800c6dc:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hltdc);
 800c6de:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
{
 800c6e2:	4604      	mov	r4, r0
  __HAL_LOCK(hltdc);
 800c6e4:	2b01      	cmp	r3, #1
 800c6e6:	f04f 0302 	mov.w	r3, #2
 800c6ea:	d015      	beq.n	800c718 <HAL_LTDC_SetAlpha+0x3c>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800c6ec:	f880 30a1 	strb.w	r3, [r0, #161]	@ 0xa1
  pLayerCfg->Alpha = Alpha;
 800c6f0:	2334      	movs	r3, #52	@ 0x34
  __HAL_LOCK(hltdc);
 800c6f2:	2601      	movs	r6, #1
  pLayerCfg->Alpha = Alpha;
 800c6f4:	4353      	muls	r3, r2
  __HAL_LOCK(hltdc);
 800c6f6:	f880 60a0 	strb.w	r6, [r0, #160]	@ 0xa0
  pLayerCfg->Alpha = Alpha;
 800c6fa:	18c5      	adds	r5, r0, r3
 800c6fc:	64e9      	str	r1, [r5, #76]	@ 0x4c
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 800c6fe:	f103 0138 	add.w	r1, r3, #56	@ 0x38
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800c702:	4401      	add	r1, r0
 800c704:	f7ff fe20 	bl	800c348 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800c708:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hltdc);
 800c70a:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800c70c:	625e      	str	r6, [r3, #36]	@ 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 800c70e:	f884 60a1 	strb.w	r6, [r4, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 800c712:	f884 00a0 	strb.w	r0, [r4, #160]	@ 0xa0
}
 800c716:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hltdc);
 800c718:	4618      	mov	r0, r3
 800c71a:	e7fc      	b.n	800c716 <HAL_LTDC_SetAlpha+0x3a>

0800c71c <HAL_LTDC_ProgramLineEvent>:
  __HAL_LOCK(hltdc);
 800c71c:	f890 20a0 	ldrb.w	r2, [r0, #160]	@ 0xa0
{
 800c720:	4603      	mov	r3, r0
 800c722:	2002      	movs	r0, #2
  __HAL_LOCK(hltdc);
 800c724:	2a01      	cmp	r2, #1
 800c726:	d012      	beq.n	800c74e <HAL_LTDC_ProgramLineEvent+0x32>
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800c728:	681a      	ldr	r2, [r3, #0]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800c72a:	f883 00a1 	strb.w	r0, [r3, #161]	@ 0xa1
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800c72e:	6b50      	ldr	r0, [r2, #52]	@ 0x34
 800c730:	f020 0001 	bic.w	r0, r0, #1
 800c734:	6350      	str	r0, [r2, #52]	@ 0x34
  LTDC->LIPCR = (uint32_t)Line;
 800c736:	4806      	ldr	r0, [pc, #24]	@ (800c750 <HAL_LTDC_ProgramLineEvent+0x34>)
 800c738:	6401      	str	r1, [r0, #64]	@ 0x40
  __HAL_UNLOCK(hltdc);
 800c73a:	2000      	movs	r0, #0
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 800c73c:	6b51      	ldr	r1, [r2, #52]	@ 0x34
 800c73e:	f041 0101 	orr.w	r1, r1, #1
 800c742:	6351      	str	r1, [r2, #52]	@ 0x34
  hltdc->State = HAL_LTDC_STATE_READY;
 800c744:	2201      	movs	r2, #1
  __HAL_UNLOCK(hltdc);
 800c746:	f883 00a0 	strb.w	r0, [r3, #160]	@ 0xa0
  hltdc->State = HAL_LTDC_STATE_READY;
 800c74a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
}
 800c74e:	4770      	bx	lr
 800c750:	40016800 	.word	0x40016800

0800c754 <HAL_LTDC_Reload>:
  __HAL_LOCK(hltdc);
 800c754:	f890 20a0 	ldrb.w	r2, [r0, #160]	@ 0xa0
{
 800c758:	4603      	mov	r3, r0
 800c75a:	2002      	movs	r0, #2
  __HAL_LOCK(hltdc);
 800c75c:	2a01      	cmp	r2, #1
 800c75e:	d00d      	beq.n	800c77c <HAL_LTDC_Reload+0x28>
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_RR);
 800c760:	681a      	ldr	r2, [r3, #0]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800c762:	f883 00a1 	strb.w	r0, [r3, #161]	@ 0xa1
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_RR);
 800c766:	6b50      	ldr	r0, [r2, #52]	@ 0x34
 800c768:	f040 0008 	orr.w	r0, r0, #8
 800c76c:	6350      	str	r0, [r2, #52]	@ 0x34
  __HAL_UNLOCK(hltdc);
 800c76e:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = ReloadType;
 800c770:	6251      	str	r1, [r2, #36]	@ 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 800c772:	2201      	movs	r2, #1
  __HAL_UNLOCK(hltdc);
 800c774:	f883 00a0 	strb.w	r0, [r3, #160]	@ 0xa0
  hltdc->State = HAL_LTDC_STATE_READY;
 800c778:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
}
 800c77c:	4770      	bx	lr
	...

0800c780 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 800c780:	4b19      	ldr	r3, [pc, #100]	@ (800c7e8 <HAL_PWREx_EnableOverDrive+0x68>)
{
 800c782:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 800c784:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800c786:	4c19      	ldr	r4, [pc, #100]	@ (800c7ec <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800c788:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800c78c:	641a      	str	r2, [r3, #64]	@ 0x40
 800c78e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c790:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c794:	9301      	str	r3, [sp, #4]
 800c796:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 800c798:	6823      	ldr	r3, [r4, #0]
 800c79a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c79e:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c7a0:	f7fd f85e 	bl	8009860 <HAL_GetTick>
 800c7a4:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800c7a6:	6863      	ldr	r3, [r4, #4]
 800c7a8:	03da      	lsls	r2, r3, #15
 800c7aa:	d50c      	bpl.n	800c7c6 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800c7ac:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800c7ae:	4d0f      	ldr	r5, [pc, #60]	@ (800c7ec <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800c7b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c7b4:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800c7b6:	f7fd f853 	bl	8009860 <HAL_GetTick>
 800c7ba:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800c7bc:	686b      	ldr	r3, [r5, #4]
 800c7be:	039b      	lsls	r3, r3, #14
 800c7c0:	d50a      	bpl.n	800c7d8 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 800c7c2:	2000      	movs	r0, #0
 800c7c4:	e006      	b.n	800c7d4 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800c7c6:	f7fd f84b 	bl	8009860 <HAL_GetTick>
 800c7ca:	1b40      	subs	r0, r0, r5
 800c7cc:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800c7d0:	d9e9      	bls.n	800c7a6 <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 800c7d2:	2003      	movs	r0, #3
}
 800c7d4:	b003      	add	sp, #12
 800c7d6:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800c7d8:	f7fd f842 	bl	8009860 <HAL_GetTick>
 800c7dc:	1b00      	subs	r0, r0, r4
 800c7de:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800c7e2:	d9eb      	bls.n	800c7bc <HAL_PWREx_EnableOverDrive+0x3c>
 800c7e4:	e7f5      	b.n	800c7d2 <HAL_PWREx_EnableOverDrive+0x52>
 800c7e6:	bf00      	nop
 800c7e8:	40023800 	.word	0x40023800
 800c7ec:	40007000 	.word	0x40007000

0800c7f0 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800c7f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800c7f4:	6a4e      	ldr	r6, [r1, #36]	@ 0x24
 800c7f6:	b136      	cbz	r6, 800c806 <QSPI_Config+0x16>
 800c7f8:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
 800c7fc:	d003      	beq.n	800c806 <QSPI_Config+0x16>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800c7fe:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 800c800:	6804      	ldr	r4, [r0, #0]
 800c802:	3b01      	subs	r3, #1
 800c804:	6123      	str	r3, [r4, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800c806:	f8d1 a018 	ldr.w	sl, [r1, #24]
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800c80a:	e9d1 7e07 	ldrd	r7, lr, [r1, #28]
  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800c80e:	f1ba 0f00 	cmp.w	sl, #0
 800c812:	d04c      	beq.n	800c8ae <QSPI_Config+0xbe>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c814:	694c      	ldr	r4, [r1, #20]
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800c816:	6805      	ldr	r5, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c818:	ea4f 4c84 	mov.w	ip, r4, lsl #18
 800c81c:	ea4a 0406 	orr.w	r4, sl, r6
 800c820:	680b      	ldr	r3, [r1, #0]
 800c822:	f8d1 8034 	ldr.w	r8, [r1, #52]	@ 0x34
 800c826:	ea44 0a02 	orr.w	sl, r4, r2
 800c82a:	e9d1 090b 	ldrd	r0, r9, [r1, #44]	@ 0x2c
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800c82e:	f1be 0f00 	cmp.w	lr, #0
 800c832:	d024      	beq.n	800c87e <QSPI_Config+0x8e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800c834:	688e      	ldr	r6, [r1, #8]
 800c836:	ea4a 040e 	orr.w	r4, sl, lr
 800c83a:	61ee      	str	r6, [r5, #28]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c83c:	690e      	ldr	r6, [r1, #16]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800c83e:	b19f      	cbz	r7, 800c868 <QSPI_Config+0x78>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c840:	433b      	orrs	r3, r7
 800c842:	4303      	orrs	r3, r0
 800c844:	68c8      	ldr	r0, [r1, #12]
 800c846:	ea43 0309 	orr.w	r3, r3, r9
 800c84a:	ea43 0308 	orr.w	r3, r3, r8
 800c84e:	4333      	orrs	r3, r6
 800c850:	4303      	orrs	r3, r0
 800c852:	ea43 030c 	orr.w	r3, r3, ip
 800c856:	4323      	orrs	r3, r4
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateByteMode | cmd->AddressSize | cmd->AddressMode |
                                         cmd->InstructionMode | cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800c858:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c85c:	616b      	str	r3, [r5, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800c85e:	d001      	beq.n	800c864 <QSPI_Config+0x74>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800c860:	684b      	ldr	r3, [r1, #4]
 800c862:	61ab      	str	r3, [r5, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800c864:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c868:	4303      	orrs	r3, r0
 800c86a:	ea43 0309 	orr.w	r3, r3, r9
 800c86e:	ea43 0308 	orr.w	r3, r3, r8
 800c872:	4333      	orrs	r3, r6
 800c874:	ea43 030c 	orr.w	r3, r3, ip
 800c878:	4323      	orrs	r3, r4
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c87a:	616b      	str	r3, [r5, #20]
 800c87c:	e7f2      	b.n	800c864 <QSPI_Config+0x74>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800c87e:	b167      	cbz	r7, 800c89a <QSPI_Config+0xaa>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c880:	433b      	orrs	r3, r7
 800c882:	4303      	orrs	r3, r0
 800c884:	68c8      	ldr	r0, [r1, #12]
 800c886:	ea43 0309 	orr.w	r3, r3, r9
 800c88a:	ea43 0308 	orr.w	r3, r3, r8
 800c88e:	4303      	orrs	r3, r0
 800c890:	ea43 030c 	orr.w	r3, r3, ip
 800c894:	ea43 030a 	orr.w	r3, r3, sl
 800c898:	e7de      	b.n	800c858 <QSPI_Config+0x68>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c89a:	4303      	orrs	r3, r0
 800c89c:	ea43 0309 	orr.w	r3, r3, r9
 800c8a0:	ea43 0408 	orr.w	r4, r3, r8
 800c8a4:	ea44 030c 	orr.w	r3, r4, ip
 800c8a8:	ea43 030a 	orr.w	r3, r3, sl
 800c8ac:	e7e5      	b.n	800c87a <QSPI_Config+0x8a>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800c8ae:	f1be 0f00 	cmp.w	lr, #0
 800c8b2:	d02c      	beq.n	800c90e <QSPI_Config+0x11e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800c8b4:	ea46 050e 	orr.w	r5, r6, lr
 800c8b8:	688b      	ldr	r3, [r1, #8]
 800c8ba:	6804      	ldr	r4, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c8bc:	694e      	ldr	r6, [r1, #20]
 800c8be:	4315      	orrs	r5, r2
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800c8c0:	61e3      	str	r3, [r4, #28]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c8c2:	f8d1 c034 	ldr.w	ip, [r1, #52]	@ 0x34
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c8c6:	04b6      	lsls	r6, r6, #18
 800c8c8:	690b      	ldr	r3, [r1, #16]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c8ca:	e9d1 8e0b 	ldrd	r8, lr, [r1, #44]	@ 0x2c
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800c8ce:	b1a7      	cbz	r7, 800c8fa <QSPI_Config+0x10a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c8d0:	433b      	orrs	r3, r7
 800c8d2:	68c8      	ldr	r0, [r1, #12]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800c8d4:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c8d8:	ea43 0308 	orr.w	r3, r3, r8
 800c8dc:	ea43 030e 	orr.w	r3, r3, lr
 800c8e0:	ea43 030c 	orr.w	r3, r3, ip
 800c8e4:	ea43 0300 	orr.w	r3, r3, r0
 800c8e8:	ea43 0306 	orr.w	r3, r3, r6
 800c8ec:	ea43 0305 	orr.w	r3, r3, r5
 800c8f0:	6163      	str	r3, [r4, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800c8f2:	d0b7      	beq.n	800c864 <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800c8f4:	684b      	ldr	r3, [r1, #4]
 800c8f6:	61a3      	str	r3, [r4, #24]
 800c8f8:	e7b4      	b.n	800c864 <QSPI_Config+0x74>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c8fa:	ea43 0308 	orr.w	r3, r3, r8
 800c8fe:	ea43 030e 	orr.w	r3, r3, lr
 800c902:	ea43 030c 	orr.w	r3, r3, ip
 800c906:	4333      	orrs	r3, r6
 800c908:	432b      	orrs	r3, r5
 800c90a:	6163      	str	r3, [r4, #20]
 800c90c:	e7aa      	b.n	800c864 <QSPI_Config+0x74>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800c90e:	b1d7      	cbz	r7, 800c946 <QSPI_Config+0x156>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c910:	ea46 0307 	orr.w	r3, r6, r7
 800c914:	6acc      	ldr	r4, [r1, #44]	@ 0x2c
 800c916:	6800      	ldr	r0, [r0, #0]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800c918:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c91c:	ea43 0302 	orr.w	r3, r3, r2
 800c920:	ea43 0304 	orr.w	r3, r3, r4
 800c924:	6b0c      	ldr	r4, [r1, #48]	@ 0x30
 800c926:	ea43 0304 	orr.w	r3, r3, r4
 800c92a:	6b4c      	ldr	r4, [r1, #52]	@ 0x34
 800c92c:	ea43 0304 	orr.w	r3, r3, r4
 800c930:	68cc      	ldr	r4, [r1, #12]
 800c932:	ea43 0304 	orr.w	r3, r3, r4
 800c936:	694c      	ldr	r4, [r1, #20]
 800c938:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 800c93c:	6143      	str	r3, [r0, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800c93e:	d091      	beq.n	800c864 <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800c940:	684b      	ldr	r3, [r1, #4]
 800c942:	6183      	str	r3, [r0, #24]
 800c944:	e78e      	b.n	800c864 <QSPI_Config+0x74>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800c946:	2e00      	cmp	r6, #0
 800c948:	d08c      	beq.n	800c864 <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c94a:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 800c94c:	6800      	ldr	r0, [r0, #0]
 800c94e:	4333      	orrs	r3, r6
 800c950:	4313      	orrs	r3, r2
 800c952:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 800c954:	4313      	orrs	r3, r2
 800c956:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
 800c958:	4313      	orrs	r3, r2
 800c95a:	694a      	ldr	r2, [r1, #20]
 800c95c:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 800c960:	6143      	str	r3, [r0, #20]
}
 800c962:	e77f      	b.n	800c864 <QSPI_Config+0x74>

0800c964 <QSPI_WaitFlagStateUntilTimeout>:
{
 800c964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c968:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800c96c:	4604      	mov	r4, r0
 800c96e:	460e      	mov	r6, r1
 800c970:	4615      	mov	r5, r2
 800c972:	461f      	mov	r7, r3
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800c974:	6822      	ldr	r2, [r4, #0]
 800c976:	6893      	ldr	r3, [r2, #8]
 800c978:	4233      	tst	r3, r6
 800c97a:	bf14      	ite	ne
 800c97c:	2301      	movne	r3, #1
 800c97e:	2300      	moveq	r3, #0
 800c980:	42ab      	cmp	r3, r5
 800c982:	d101      	bne.n	800c988 <QSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
 800c984:	2000      	movs	r0, #0
 800c986:	e012      	b.n	800c9ae <QSPI_WaitFlagStateUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 800c988:	f1b8 3fff 	cmp.w	r8, #4294967295
 800c98c:	d0f3      	beq.n	800c976 <QSPI_WaitFlagStateUntilTimeout+0x12>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c98e:	f7fc ff67 	bl	8009860 <HAL_GetTick>
 800c992:	1bc0      	subs	r0, r0, r7
 800c994:	4540      	cmp	r0, r8
 800c996:	d802      	bhi.n	800c99e <QSPI_WaitFlagStateUntilTimeout+0x3a>
 800c998:	f1b8 0f00 	cmp.w	r8, #0
 800c99c:	d1ea      	bne.n	800c974 <QSPI_WaitFlagStateUntilTimeout+0x10>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800c99e:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800c9a0:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800c9a2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800c9a6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800c9a8:	f043 0301 	orr.w	r3, r3, #1
 800c9ac:	6463      	str	r3, [r4, #68]	@ 0x44
}
 800c9ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800c9b4 <HAL_QSPI_Init>:
{
 800c9b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c9b6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800c9b8:	f7fc ff52 	bl	8009860 <HAL_GetTick>
 800c9bc:	4605      	mov	r5, r0
  if(hqspi == NULL)
 800c9be:	2c00      	cmp	r4, #0
 800c9c0:	d046      	beq.n	800ca50 <HAL_QSPI_Init+0x9c>
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800c9c2:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800c9c6:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800c9ca:	b93b      	cbnz	r3, 800c9dc <HAL_QSPI_Init+0x28>
    HAL_QSPI_MspInit(hqspi);
 800c9cc:	4620      	mov	r0, r4
    hqspi->Lock = HAL_UNLOCKED;
 800c9ce:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
    HAL_QSPI_MspInit(hqspi);
 800c9d2:	f7f6 f8e7 	bl	8002ba4 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 800c9d6:	f241 3388 	movw	r3, #5000	@ 0x1388
 800c9da:	64a3      	str	r3, [r4, #72]	@ 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800c9dc:	6821      	ldr	r1, [r4, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800c9de:	4620      	mov	r0, r4
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800c9e0:	68a3      	ldr	r3, [r4, #8]
 800c9e2:	680a      	ldr	r2, [r1, #0]
 800c9e4:	3b01      	subs	r3, #1
 800c9e6:	f422 52f8 	bic.w	r2, r2, #7936	@ 0x1f00
 800c9ea:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800c9ee:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800c9f0:	600a      	str	r2, [r1, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800c9f2:	2200      	movs	r2, #0
 800c9f4:	9300      	str	r3, [sp, #0]
 800c9f6:	2120      	movs	r1, #32
 800c9f8:	462b      	mov	r3, r5
 800c9fa:	f7ff ffb3 	bl	800c964 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 800c9fe:	bb10      	cbnz	r0, 800ca46 <HAL_QSPI_Init+0x92>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800ca00:	6822      	ldr	r2, [r4, #0]
 800ca02:	69e5      	ldr	r5, [r4, #28]
 800ca04:	68e3      	ldr	r3, [r4, #12]
 800ca06:	6811      	ldr	r1, [r2, #0]
 800ca08:	432b      	orrs	r3, r5
 800ca0a:	6a25      	ldr	r5, [r4, #32]
 800ca0c:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800ca10:	432b      	orrs	r3, r5
 800ca12:	6865      	ldr	r5, [r4, #4]
 800ca14:	f021 01d0 	bic.w	r1, r1, #208	@ 0xd0
 800ca18:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 800ca1c:	430b      	orrs	r3, r1
 800ca1e:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800ca20:	6855      	ldr	r5, [r2, #4]
 800ca22:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 800ca26:	430b      	orrs	r3, r1
 800ca28:	6921      	ldr	r1, [r4, #16]
 800ca2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800ca2e:	4909      	ldr	r1, [pc, #36]	@ (800ca54 <HAL_QSPI_Init+0xa0>)
 800ca30:	4029      	ands	r1, r5
 800ca32:	430b      	orrs	r3, r1
 800ca34:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 800ca36:	6813      	ldr	r3, [r2, #0]
 800ca38:	f043 0301 	orr.w	r3, r3, #1
 800ca3c:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 800ca3e:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800ca40:	6460      	str	r0, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 800ca42:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 800ca46:	2300      	movs	r3, #0
 800ca48:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800ca4c:	b003      	add	sp, #12
 800ca4e:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 800ca50:	2001      	movs	r0, #1
 800ca52:	e7fb      	b.n	800ca4c <HAL_QSPI_Init+0x98>
 800ca54:	ffe0f8fe 	.word	0xffe0f8fe

0800ca58 <HAL_QSPI_DeInit>:
{
 800ca58:	b510      	push	{r4, lr}
  if(hqspi == NULL)
 800ca5a:	4604      	mov	r4, r0
 800ca5c:	b168      	cbz	r0, 800ca7a <HAL_QSPI_DeInit+0x22>
  __HAL_QSPI_DISABLE(hqspi);
 800ca5e:	6802      	ldr	r2, [r0, #0]
 800ca60:	6813      	ldr	r3, [r2, #0]
 800ca62:	f023 0301 	bic.w	r3, r3, #1
 800ca66:	6013      	str	r3, [r2, #0]
  HAL_QSPI_MspDeInit(hqspi);
 800ca68:	f7f6 f90a 	bl	8002c80 <HAL_QSPI_MspDeInit>
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800ca6c:	2000      	movs	r0, #0
 800ca6e:	6460      	str	r0, [r4, #68]	@ 0x44
  hqspi->State = HAL_QSPI_STATE_RESET;
 800ca70:	f884 0041 	strb.w	r0, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 800ca74:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
}
 800ca78:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800ca7a:	2001      	movs	r0, #1
 800ca7c:	e7fc      	b.n	800ca78 <HAL_QSPI_DeInit+0x20>

0800ca7e <HAL_QSPI_Command>:
{
 800ca7e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800ca82:	4604      	mov	r4, r0
 800ca84:	468a      	mov	sl, r1
 800ca86:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 800ca88:	f7fc feea 	bl	8009860 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800ca8c:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 800ca90:	4607      	mov	r7, r0
  __HAL_LOCK(hqspi);
 800ca92:	2b01      	cmp	r3, #1
 800ca94:	d036      	beq.n	800cb04 <HAL_QSPI_Command+0x86>
 800ca96:	2301      	movs	r3, #1
 800ca98:	2602      	movs	r6, #2
 800ca9a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800ca9e:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800caa2:	2b01      	cmp	r3, #1
 800caa4:	fa5f f983 	uxtb.w	r9, r3
 800caa8:	d128      	bne.n	800cafc <HAL_QSPI_Command+0x7e>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800caaa:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800caac:	4603      	mov	r3, r0
 800caae:	2120      	movs	r1, #32
 800cab0:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800cab2:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800cab4:	f884 6041 	strb.w	r6, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800cab8:	f8cd 8000 	str.w	r8, [sp]
 800cabc:	f7ff ff52 	bl	800c964 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800cac0:	4605      	mov	r5, r0
 800cac2:	b9a0      	cbnz	r0, 800caee <HAL_QSPI_Command+0x70>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800cac4:	4602      	mov	r2, r0
 800cac6:	4651      	mov	r1, sl
 800cac8:	4620      	mov	r0, r4
 800caca:	f7ff fe91 	bl	800c7f0 <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
 800cace:	f8da 3024 	ldr.w	r3, [sl, #36]	@ 0x24
 800cad2:	b953      	cbnz	r3, 800caea <HAL_QSPI_Command+0x6c>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800cad4:	463b      	mov	r3, r7
 800cad6:	464a      	mov	r2, r9
 800cad8:	4631      	mov	r1, r6
 800cada:	4620      	mov	r0, r4
 800cadc:	f8cd 8000 	str.w	r8, [sp]
 800cae0:	f7ff ff40 	bl	800c964 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 800cae4:	b960      	cbnz	r0, 800cb00 <HAL_QSPI_Command+0x82>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800cae6:	6823      	ldr	r3, [r4, #0]
 800cae8:	60de      	str	r6, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 800caea:	f884 9041 	strb.w	r9, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 800caee:	2300      	movs	r3, #0
 800caf0:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800caf4:	4628      	mov	r0, r5
 800caf6:	b002      	add	sp, #8
 800caf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    status = HAL_BUSY;
 800cafc:	4635      	mov	r5, r6
 800cafe:	e7f6      	b.n	800caee <HAL_QSPI_Command+0x70>
 800cb00:	4605      	mov	r5, r0
 800cb02:	e7f4      	b.n	800caee <HAL_QSPI_Command+0x70>
  __HAL_LOCK(hqspi);
 800cb04:	2502      	movs	r5, #2
 800cb06:	e7f5      	b.n	800caf4 <HAL_QSPI_Command+0x76>

0800cb08 <HAL_QSPI_AutoPolling>:
{
 800cb08:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cb0c:	4604      	mov	r4, r0
 800cb0e:	461f      	mov	r7, r3
 800cb10:	4689      	mov	r9, r1
 800cb12:	4615      	mov	r5, r2
  uint32_t tickstart = HAL_GetTick();
 800cb14:	f7fc fea4 	bl	8009860 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800cb18:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 800cb1c:	4606      	mov	r6, r0
  __HAL_LOCK(hqspi);
 800cb1e:	2b01      	cmp	r3, #1
 800cb20:	d041      	beq.n	800cba6 <HAL_QSPI_AutoPolling+0x9e>
 800cb22:	2301      	movs	r3, #1
 800cb24:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800cb28:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800cb2c:	2b01      	cmp	r3, #1
 800cb2e:	fa5f f883 	uxtb.w	r8, r3
 800cb32:	d136      	bne.n	800cba2 <HAL_QSPI_AutoPolling+0x9a>
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800cb34:	2342      	movs	r3, #66	@ 0x42
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800cb36:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800cb38:	2120      	movs	r1, #32
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800cb3a:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800cb3c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800cb40:	4603      	mov	r3, r0
 800cb42:	9700      	str	r7, [sp, #0]
 800cb44:	4620      	mov	r0, r4
 800cb46:	f7ff ff0d 	bl	800c964 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800cb4a:	bb20      	cbnz	r0, 800cb96 <HAL_QSPI_AutoPolling+0x8e>
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800cb4c:	6822      	ldr	r2, [r4, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800cb4e:	4620      	mov	r0, r4
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800cb50:	682b      	ldr	r3, [r5, #0]
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800cb52:	6929      	ldr	r1, [r5, #16]
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800cb54:	6293      	str	r3, [r2, #40]	@ 0x28
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800cb56:	686b      	ldr	r3, [r5, #4]
 800cb58:	6253      	str	r3, [r2, #36]	@ 0x24
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800cb5a:	68ab      	ldr	r3, [r5, #8]
 800cb5c:	62d3      	str	r3, [r2, #44]	@ 0x2c
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800cb5e:	6813      	ldr	r3, [r2, #0]
 800cb60:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800cb64:	430b      	orrs	r3, r1
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800cb66:	4649      	mov	r1, r9
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800cb68:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800cb6c:	6013      	str	r3, [r2, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800cb6e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
      cmd->NbData = cfg->StatusBytesSize;
 800cb72:	68eb      	ldr	r3, [r5, #12]
 800cb74:	f8c9 3028 	str.w	r3, [r9, #40]	@ 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800cb78:	f7ff fe3a 	bl	800c7f0 <QSPI_Config>
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800cb7c:	4633      	mov	r3, r6
 800cb7e:	4642      	mov	r2, r8
 800cb80:	2108      	movs	r1, #8
 800cb82:	4620      	mov	r0, r4
 800cb84:	9700      	str	r7, [sp, #0]
 800cb86:	f7ff feed 	bl	800c964 <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 800cb8a:	b920      	cbnz	r0, 800cb96 <HAL_QSPI_AutoPolling+0x8e>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800cb8c:	6823      	ldr	r3, [r4, #0]
 800cb8e:	2208      	movs	r2, #8
 800cb90:	60da      	str	r2, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 800cb92:	f884 8041 	strb.w	r8, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 800cb96:	2300      	movs	r3, #0
 800cb98:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800cb9c:	b003      	add	sp, #12
 800cb9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    status = HAL_BUSY;
 800cba2:	2002      	movs	r0, #2
 800cba4:	e7f7      	b.n	800cb96 <HAL_QSPI_AutoPolling+0x8e>
  __HAL_LOCK(hqspi);
 800cba6:	2002      	movs	r0, #2
 800cba8:	e7f8      	b.n	800cb9c <HAL_QSPI_AutoPolling+0x94>

0800cbaa <HAL_QSPI_MemoryMapped>:
{
 800cbaa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cbac:	4604      	mov	r4, r0
 800cbae:	4616      	mov	r6, r2
 800cbb0:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 800cbb2:	f7fc fe55 	bl	8009860 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800cbb6:	f894 2040 	ldrb.w	r2, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 800cbba:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 800cbbc:	2a01      	cmp	r2, #1
 800cbbe:	d033      	beq.n	800cc28 <HAL_QSPI_MemoryMapped+0x7e>
 800cbc0:	2201      	movs	r2, #1
 800cbc2:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800cbc6:	f894 2041 	ldrb.w	r2, [r4, #65]	@ 0x41
 800cbca:	2a01      	cmp	r2, #1
 800cbcc:	d12a      	bne.n	800cc24 <HAL_QSPI_MemoryMapped+0x7a>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800cbce:	2200      	movs	r2, #0
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800cbd0:	2182      	movs	r1, #130	@ 0x82
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800cbd2:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800cbd4:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800cbd6:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800cbda:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800cbdc:	9100      	str	r1, [sp, #0]
 800cbde:	2120      	movs	r1, #32
 800cbe0:	f7ff fec0 	bl	800c964 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800cbe4:	4605      	mov	r5, r0
 800cbe6:	b9b8      	cbnz	r0, 800cc18 <HAL_QSPI_MemoryMapped+0x6e>
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800cbe8:	6823      	ldr	r3, [r4, #0]
 800cbea:	6872      	ldr	r2, [r6, #4]
 800cbec:	6818      	ldr	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800cbee:	2a08      	cmp	r2, #8
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800cbf0:	f020 0008 	bic.w	r0, r0, #8
 800cbf4:	ea40 0002 	orr.w	r0, r0, r2
 800cbf8:	6018      	str	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800cbfa:	d107      	bne.n	800cc0c <HAL_QSPI_MemoryMapped+0x62>
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 800cbfc:	6832      	ldr	r2, [r6, #0]
 800cbfe:	631a      	str	r2, [r3, #48]	@ 0x30
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 800cc00:	2210      	movs	r2, #16
 800cc02:	60da      	str	r2, [r3, #12]
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 800cc04:	681a      	ldr	r2, [r3, #0]
 800cc06:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800cc0a:	601a      	str	r2, [r3, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 800cc0c:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 800cc10:	4639      	mov	r1, r7
 800cc12:	4620      	mov	r0, r4
 800cc14:	f7ff fdec 	bl	800c7f0 <QSPI_Config>
  __HAL_UNLOCK(hqspi);
 800cc18:	2300      	movs	r3, #0
 800cc1a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800cc1e:	4628      	mov	r0, r5
 800cc20:	b003      	add	sp, #12
 800cc22:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_BUSY;
 800cc24:	2502      	movs	r5, #2
 800cc26:	e7f7      	b.n	800cc18 <HAL_QSPI_MemoryMapped+0x6e>
  __HAL_LOCK(hqspi);
 800cc28:	2502      	movs	r5, #2
 800cc2a:	e7f8      	b.n	800cc1e <HAL_QSPI_MemoryMapped+0x74>

0800cc2c <HAL_QSPI_Abort>:
{
 800cc2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cc2e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800cc30:	f7fc fe16 	bl	8009860 <HAL_GetTick>
 800cc34:	4605      	mov	r5, r0
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 800cc36:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800cc3a:	0798      	lsls	r0, r3, #30
 800cc3c:	d534      	bpl.n	800cca8 <HAL_QSPI_Abort+0x7c>
    __HAL_UNLOCK(hqspi);
 800cc3e:	2300      	movs	r3, #0
 800cc40:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800cc44:	6823      	ldr	r3, [r4, #0]
 800cc46:	681a      	ldr	r2, [r3, #0]
 800cc48:	0751      	lsls	r1, r2, #29
 800cc4a:	d507      	bpl.n	800cc5c <HAL_QSPI_Abort+0x30>
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800cc4c:	681a      	ldr	r2, [r3, #0]
      status = HAL_DMA_Abort(hqspi->hdma);
 800cc4e:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800cc50:	f022 0204 	bic.w	r2, r2, #4
 800cc54:	601a      	str	r2, [r3, #0]
      status = HAL_DMA_Abort(hqspi->hdma);
 800cc56:	f7fd f944 	bl	8009ee2 <HAL_DMA_Abort>
      if(status != HAL_OK)
 800cc5a:	bb40      	cbnz	r0, 800ccae <HAL_QSPI_Abort+0x82>
  HAL_StatusTypeDef status = HAL_OK;
 800cc5c:	2000      	movs	r0, #0
    if (__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_BUSY) != RESET)
 800cc5e:	6823      	ldr	r3, [r4, #0]
 800cc60:	689a      	ldr	r2, [r3, #8]
 800cc62:	0692      	lsls	r2, r2, #26
 800cc64:	d528      	bpl.n	800ccb8 <HAL_QSPI_Abort+0x8c>
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800cc66:	681a      	ldr	r2, [r3, #0]
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 800cc68:	2102      	movs	r1, #2
 800cc6a:	4620      	mov	r0, r4
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800cc6c:	f042 0202 	orr.w	r2, r2, #2
 800cc70:	601a      	str	r2, [r3, #0]
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 800cc72:	2201      	movs	r2, #1
 800cc74:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800cc76:	9300      	str	r3, [sp, #0]
 800cc78:	462b      	mov	r3, r5
 800cc7a:	f7ff fe73 	bl	800c964 <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 800cc7e:	b9a0      	cbnz	r0, 800ccaa <HAL_QSPI_Abort+0x7e>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800cc80:	6823      	ldr	r3, [r4, #0]
 800cc82:	2202      	movs	r2, #2
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800cc84:	2120      	movs	r1, #32
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800cc86:	60da      	str	r2, [r3, #12]
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800cc88:	4602      	mov	r2, r0
 800cc8a:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800cc8c:	4620      	mov	r0, r4
 800cc8e:	9300      	str	r3, [sp, #0]
 800cc90:	462b      	mov	r3, r5
 800cc92:	f7ff fe67 	bl	800c964 <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 800cc96:	b940      	cbnz	r0, 800ccaa <HAL_QSPI_Abort+0x7e>
        CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 800cc98:	6822      	ldr	r2, [r4, #0]
 800cc9a:	6953      	ldr	r3, [r2, #20]
 800cc9c:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 800cca0:	6153      	str	r3, [r2, #20]
        hqspi->State = HAL_QSPI_STATE_READY;
 800cca2:	2301      	movs	r3, #1
 800cca4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  HAL_StatusTypeDef status = HAL_OK;
 800cca8:	2000      	movs	r0, #0
}
 800ccaa:	b003      	add	sp, #12
 800ccac:	bd30      	pop	{r4, r5, pc}
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 800ccae:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800ccb0:	f043 0304 	orr.w	r3, r3, #4
 800ccb4:	6463      	str	r3, [r4, #68]	@ 0x44
 800ccb6:	e7d2      	b.n	800cc5e <HAL_QSPI_Abort+0x32>
      hqspi->State = HAL_QSPI_STATE_READY;
 800ccb8:	2301      	movs	r3, #1
 800ccba:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800ccbe:	e7f4      	b.n	800ccaa <HAL_QSPI_Abort+0x7e>

0800ccc0 <HAL_QSPI_Transmit>:
{
 800ccc0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800ccc4:	4604      	mov	r4, r0
 800ccc6:	4688      	mov	r8, r1
 800ccc8:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
 800ccca:	f7fc fdc9 	bl	8009860 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800ccce:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 800ccd2:	4606      	mov	r6, r0
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800ccd4:	6825      	ldr	r5, [r4, #0]
  __HAL_LOCK(hqspi);
 800ccd6:	2b01      	cmp	r3, #1
 800ccd8:	d04f      	beq.n	800cd7a <HAL_QSPI_Transmit+0xba>
 800ccda:	2301      	movs	r3, #1
 800ccdc:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800cce0:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800cce4:	2b01      	cmp	r3, #1
 800cce6:	b2d8      	uxtb	r0, r3
 800cce8:	d145      	bne.n	800cd76 <HAL_QSPI_Transmit+0xb6>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800ccea:	2300      	movs	r3, #0
 800ccec:	6463      	str	r3, [r4, #68]	@ 0x44
    if(pData != NULL )
 800ccee:	f1b8 0f00 	cmp.w	r8, #0
 800ccf2:	d03b      	beq.n	800cd6c <HAL_QSPI_Transmit+0xac>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800ccf4:	2312      	movs	r3, #18
 800ccf6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800ccfa:	692b      	ldr	r3, [r5, #16]
 800ccfc:	3301      	adds	r3, #1
 800ccfe:	62e3      	str	r3, [r4, #44]	@ 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800cd00:	692b      	ldr	r3, [r5, #16]
      hqspi->pTxBuffPtr = pData;
 800cd02:	f8c4 8024 	str.w	r8, [r4, #36]	@ 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800cd06:	3301      	adds	r3, #1
 800cd08:	62a3      	str	r3, [r4, #40]	@ 0x28
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800cd0a:	696b      	ldr	r3, [r5, #20]
 800cd0c:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 800cd10:	616b      	str	r3, [r5, #20]
      while(hqspi->TxXferCount > 0U)
 800cd12:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800cd14:	b9b3      	cbnz	r3, 800cd44 <HAL_QSPI_Transmit+0x84>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800cd16:	4633      	mov	r3, r6
 800cd18:	2201      	movs	r2, #1
 800cd1a:	2102      	movs	r1, #2
 800cd1c:	4620      	mov	r0, r4
 800cd1e:	9700      	str	r7, [sp, #0]
 800cd20:	f7ff fe20 	bl	800c964 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 800cd24:	b928      	cbnz	r0, 800cd32 <HAL_QSPI_Transmit+0x72>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800cd26:	6823      	ldr	r3, [r4, #0]
 800cd28:	2202      	movs	r2, #2
          status = HAL_QSPI_Abort(hqspi);
 800cd2a:	4620      	mov	r0, r4
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800cd2c:	60da      	str	r2, [r3, #12]
          status = HAL_QSPI_Abort(hqspi);
 800cd2e:	f7ff ff7d 	bl	800cc2c <HAL_QSPI_Abort>
      hqspi->State = HAL_QSPI_STATE_READY;
 800cd32:	2301      	movs	r3, #1
 800cd34:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 800cd38:	2300      	movs	r3, #0
 800cd3a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800cd3e:	b002      	add	sp, #8
 800cd40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800cd44:	4633      	mov	r3, r6
 800cd46:	2201      	movs	r2, #1
 800cd48:	2104      	movs	r1, #4
 800cd4a:	4620      	mov	r0, r4
 800cd4c:	9700      	str	r7, [sp, #0]
 800cd4e:	f7ff fe09 	bl	800c964 <QSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 800cd52:	2800      	cmp	r0, #0
 800cd54:	d1ed      	bne.n	800cd32 <HAL_QSPI_Transmit+0x72>
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800cd56:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800cd58:	781b      	ldrb	r3, [r3, #0]
 800cd5a:	f885 3020 	strb.w	r3, [r5, #32]
        hqspi->pTxBuffPtr++;
 800cd5e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800cd60:	3301      	adds	r3, #1
 800cd62:	6263      	str	r3, [r4, #36]	@ 0x24
        hqspi->TxXferCount--;
 800cd64:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800cd66:	3b01      	subs	r3, #1
 800cd68:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800cd6a:	e7d2      	b.n	800cd12 <HAL_QSPI_Transmit+0x52>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800cd6c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800cd6e:	f043 0308 	orr.w	r3, r3, #8
 800cd72:	6463      	str	r3, [r4, #68]	@ 0x44
      status = HAL_ERROR;
 800cd74:	e7e0      	b.n	800cd38 <HAL_QSPI_Transmit+0x78>
    status = HAL_BUSY;
 800cd76:	2002      	movs	r0, #2
 800cd78:	e7de      	b.n	800cd38 <HAL_QSPI_Transmit+0x78>
  __HAL_LOCK(hqspi);
 800cd7a:	2002      	movs	r0, #2
 800cd7c:	e7df      	b.n	800cd3e <HAL_QSPI_Transmit+0x7e>

0800cd7e <HAL_QSPI_Receive>:
{
 800cd7e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800cd82:	4604      	mov	r4, r0
 800cd84:	4616      	mov	r6, r2
 800cd86:	4688      	mov	r8, r1
  uint32_t tickstart = HAL_GetTick();
 800cd88:	f7fc fd6a 	bl	8009860 <HAL_GetTick>
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800cd8c:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 800cd8e:	4607      	mov	r7, r0
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800cd90:	69aa      	ldr	r2, [r5, #24]
  __HAL_LOCK(hqspi);
 800cd92:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800cd96:	2b01      	cmp	r3, #1
 800cd98:	d052      	beq.n	800ce40 <HAL_QSPI_Receive+0xc2>
 800cd9a:	2301      	movs	r3, #1
 800cd9c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800cda0:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800cda4:	2b01      	cmp	r3, #1
 800cda6:	b2d8      	uxtb	r0, r3
 800cda8:	d148      	bne.n	800ce3c <HAL_QSPI_Receive+0xbe>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800cdaa:	2300      	movs	r3, #0
 800cdac:	6463      	str	r3, [r4, #68]	@ 0x44
    if(pData != NULL )
 800cdae:	f1b8 0f00 	cmp.w	r8, #0
 800cdb2:	d03e      	beq.n	800ce32 <HAL_QSPI_Receive+0xb4>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800cdb4:	2322      	movs	r3, #34	@ 0x22
 800cdb6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800cdba:	692b      	ldr	r3, [r5, #16]
 800cdbc:	3301      	adds	r3, #1
 800cdbe:	63a3      	str	r3, [r4, #56]	@ 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800cdc0:	692b      	ldr	r3, [r5, #16]
      hqspi->pRxBuffPtr = pData;
 800cdc2:	f8c4 8030 	str.w	r8, [r4, #48]	@ 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800cdc6:	3301      	adds	r3, #1
 800cdc8:	6363      	str	r3, [r4, #52]	@ 0x34
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800cdca:	6969      	ldr	r1, [r5, #20]
 800cdcc:	f021 6140 	bic.w	r1, r1, #201326592	@ 0xc000000
 800cdd0:	f041 6180 	orr.w	r1, r1, #67108864	@ 0x4000000
 800cdd4:	6169      	str	r1, [r5, #20]
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800cdd6:	61aa      	str	r2, [r5, #24]
      while(hqspi->RxXferCount > 0U)
 800cdd8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800cdda:	b9b3      	cbnz	r3, 800ce0a <HAL_QSPI_Receive+0x8c>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800cddc:	463b      	mov	r3, r7
 800cdde:	2201      	movs	r2, #1
 800cde0:	2102      	movs	r1, #2
 800cde2:	4620      	mov	r0, r4
 800cde4:	9600      	str	r6, [sp, #0]
 800cde6:	f7ff fdbd 	bl	800c964 <QSPI_WaitFlagStateUntilTimeout>
        if  (status == HAL_OK)
 800cdea:	b928      	cbnz	r0, 800cdf8 <HAL_QSPI_Receive+0x7a>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800cdec:	6823      	ldr	r3, [r4, #0]
 800cdee:	2202      	movs	r2, #2
          status = HAL_QSPI_Abort(hqspi);
 800cdf0:	4620      	mov	r0, r4
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800cdf2:	60da      	str	r2, [r3, #12]
          status = HAL_QSPI_Abort(hqspi);
 800cdf4:	f7ff ff1a 	bl	800cc2c <HAL_QSPI_Abort>
      hqspi->State = HAL_QSPI_STATE_READY;
 800cdf8:	2301      	movs	r3, #1
 800cdfa:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 800cdfe:	2300      	movs	r3, #0
 800ce00:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800ce04:	b002      	add	sp, #8
 800ce06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800ce0a:	463b      	mov	r3, r7
 800ce0c:	2201      	movs	r2, #1
 800ce0e:	2106      	movs	r1, #6
 800ce10:	4620      	mov	r0, r4
 800ce12:	9600      	str	r6, [sp, #0]
 800ce14:	f7ff fda6 	bl	800c964 <QSPI_WaitFlagStateUntilTimeout>
        if  (status != HAL_OK)
 800ce18:	2800      	cmp	r0, #0
 800ce1a:	d1ed      	bne.n	800cdf8 <HAL_QSPI_Receive+0x7a>
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800ce1c:	f895 2020 	ldrb.w	r2, [r5, #32]
 800ce20:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800ce22:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800ce24:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800ce26:	3301      	adds	r3, #1
 800ce28:	6323      	str	r3, [r4, #48]	@ 0x30
        hqspi->RxXferCount--;
 800ce2a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800ce2c:	3b01      	subs	r3, #1
 800ce2e:	63a3      	str	r3, [r4, #56]	@ 0x38
 800ce30:	e7d2      	b.n	800cdd8 <HAL_QSPI_Receive+0x5a>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800ce32:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800ce34:	f043 0308 	orr.w	r3, r3, #8
 800ce38:	6463      	str	r3, [r4, #68]	@ 0x44
      status = HAL_ERROR;
 800ce3a:	e7e0      	b.n	800cdfe <HAL_QSPI_Receive+0x80>
    status = HAL_BUSY;
 800ce3c:	2002      	movs	r0, #2
 800ce3e:	e7de      	b.n	800cdfe <HAL_QSPI_Receive+0x80>
  __HAL_LOCK(hqspi);
 800ce40:	2002      	movs	r0, #2
 800ce42:	e7df      	b.n	800ce04 <HAL_QSPI_Receive+0x86>

0800ce44 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ce44:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800ce48:	4604      	mov	r4, r0
 800ce4a:	b340      	cbz	r0, 800ce9e <HAL_RCC_OscConfig+0x5a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ce4c:	6803      	ldr	r3, [r0, #0]
 800ce4e:	07de      	lsls	r6, r3, #31
 800ce50:	d410      	bmi.n	800ce74 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ce52:	6823      	ldr	r3, [r4, #0]
 800ce54:	079d      	lsls	r5, r3, #30
 800ce56:	d461      	bmi.n	800cf1c <HAL_RCC_OscConfig+0xd8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ce58:	6823      	ldr	r3, [r4, #0]
 800ce5a:	0719      	lsls	r1, r3, #28
 800ce5c:	f100 80a6 	bmi.w	800cfac <HAL_RCC_OscConfig+0x168>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ce60:	6823      	ldr	r3, [r4, #0]
 800ce62:	075a      	lsls	r2, r3, #29
 800ce64:	f100 80c7 	bmi.w	800cff6 <HAL_RCC_OscConfig+0x1b2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ce68:	69a2      	ldr	r2, [r4, #24]
 800ce6a:	2a00      	cmp	r2, #0
 800ce6c:	f040 8130 	bne.w	800d0d0 <HAL_RCC_OscConfig+0x28c>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 800ce70:	2000      	movs	r0, #0
 800ce72:	e02c      	b.n	800cece <HAL_RCC_OscConfig+0x8a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800ce74:	4b94      	ldr	r3, [pc, #592]	@ (800d0c8 <HAL_RCC_OscConfig+0x284>)
 800ce76:	689a      	ldr	r2, [r3, #8]
 800ce78:	f002 020c 	and.w	r2, r2, #12
 800ce7c:	2a04      	cmp	r2, #4
 800ce7e:	d007      	beq.n	800ce90 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ce80:	689a      	ldr	r2, [r3, #8]
 800ce82:	f002 020c 	and.w	r2, r2, #12
 800ce86:	2a08      	cmp	r2, #8
 800ce88:	d10b      	bne.n	800cea2 <HAL_RCC_OscConfig+0x5e>
 800ce8a:	685b      	ldr	r3, [r3, #4]
 800ce8c:	0259      	lsls	r1, r3, #9
 800ce8e:	d508      	bpl.n	800cea2 <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ce90:	4b8d      	ldr	r3, [pc, #564]	@ (800d0c8 <HAL_RCC_OscConfig+0x284>)
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	039a      	lsls	r2, r3, #14
 800ce96:	d5dc      	bpl.n	800ce52 <HAL_RCC_OscConfig+0xe>
 800ce98:	6863      	ldr	r3, [r4, #4]
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d1d9      	bne.n	800ce52 <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 800ce9e:	2001      	movs	r0, #1
 800cea0:	e015      	b.n	800cece <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800cea2:	6863      	ldr	r3, [r4, #4]
 800cea4:	4d88      	ldr	r5, [pc, #544]	@ (800d0c8 <HAL_RCC_OscConfig+0x284>)
 800cea6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ceaa:	d113      	bne.n	800ced4 <HAL_RCC_OscConfig+0x90>
 800ceac:	682b      	ldr	r3, [r5, #0]
 800ceae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ceb2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800ceb4:	f7fc fcd4 	bl	8009860 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ceb8:	4e83      	ldr	r6, [pc, #524]	@ (800d0c8 <HAL_RCC_OscConfig+0x284>)
        tickstart = HAL_GetTick();
 800ceba:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cebc:	6833      	ldr	r3, [r6, #0]
 800cebe:	039b      	lsls	r3, r3, #14
 800cec0:	d4c7      	bmi.n	800ce52 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800cec2:	f7fc fccd 	bl	8009860 <HAL_GetTick>
 800cec6:	1b40      	subs	r0, r0, r5
 800cec8:	2864      	cmp	r0, #100	@ 0x64
 800ceca:	d9f7      	bls.n	800cebc <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
 800cecc:	2003      	movs	r0, #3
}
 800cece:	b002      	add	sp, #8
 800ced0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ced4:	b99b      	cbnz	r3, 800cefe <HAL_RCC_OscConfig+0xba>
 800ced6:	682b      	ldr	r3, [r5, #0]
 800ced8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800cedc:	602b      	str	r3, [r5, #0]
 800cede:	682b      	ldr	r3, [r5, #0]
 800cee0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800cee4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800cee6:	f7fc fcbb 	bl	8009860 <HAL_GetTick>
 800ceea:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ceec:	682b      	ldr	r3, [r5, #0]
 800ceee:	039f      	lsls	r7, r3, #14
 800cef0:	d5af      	bpl.n	800ce52 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800cef2:	f7fc fcb5 	bl	8009860 <HAL_GetTick>
 800cef6:	1b80      	subs	r0, r0, r6
 800cef8:	2864      	cmp	r0, #100	@ 0x64
 800cefa:	d9f7      	bls.n	800ceec <HAL_RCC_OscConfig+0xa8>
 800cefc:	e7e6      	b.n	800cecc <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800cefe:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800cf02:	682b      	ldr	r3, [r5, #0]
 800cf04:	d103      	bne.n	800cf0e <HAL_RCC_OscConfig+0xca>
 800cf06:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800cf0a:	602b      	str	r3, [r5, #0]
 800cf0c:	e7ce      	b.n	800ceac <HAL_RCC_OscConfig+0x68>
 800cf0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800cf12:	602b      	str	r3, [r5, #0]
 800cf14:	682b      	ldr	r3, [r5, #0]
 800cf16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800cf1a:	e7ca      	b.n	800ceb2 <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800cf1c:	4b6a      	ldr	r3, [pc, #424]	@ (800d0c8 <HAL_RCC_OscConfig+0x284>)
 800cf1e:	689a      	ldr	r2, [r3, #8]
 800cf20:	f012 0f0c 	tst.w	r2, #12
 800cf24:	d007      	beq.n	800cf36 <HAL_RCC_OscConfig+0xf2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800cf26:	689a      	ldr	r2, [r3, #8]
 800cf28:	f002 020c 	and.w	r2, r2, #12
 800cf2c:	2a08      	cmp	r2, #8
 800cf2e:	d111      	bne.n	800cf54 <HAL_RCC_OscConfig+0x110>
 800cf30:	685b      	ldr	r3, [r3, #4]
 800cf32:	025d      	lsls	r5, r3, #9
 800cf34:	d40e      	bmi.n	800cf54 <HAL_RCC_OscConfig+0x110>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800cf36:	4a64      	ldr	r2, [pc, #400]	@ (800d0c8 <HAL_RCC_OscConfig+0x284>)
 800cf38:	6813      	ldr	r3, [r2, #0]
 800cf3a:	0799      	lsls	r1, r3, #30
 800cf3c:	d502      	bpl.n	800cf44 <HAL_RCC_OscConfig+0x100>
 800cf3e:	68e3      	ldr	r3, [r4, #12]
 800cf40:	2b01      	cmp	r3, #1
 800cf42:	d1ac      	bne.n	800ce9e <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cf44:	6813      	ldr	r3, [r2, #0]
 800cf46:	6921      	ldr	r1, [r4, #16]
 800cf48:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800cf4c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800cf50:	6013      	str	r3, [r2, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800cf52:	e781      	b.n	800ce58 <HAL_RCC_OscConfig+0x14>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800cf54:	68e3      	ldr	r3, [r4, #12]
 800cf56:	4d5c      	ldr	r5, [pc, #368]	@ (800d0c8 <HAL_RCC_OscConfig+0x284>)
 800cf58:	b1bb      	cbz	r3, 800cf8a <HAL_RCC_OscConfig+0x146>
        __HAL_RCC_HSI_ENABLE();
 800cf5a:	682b      	ldr	r3, [r5, #0]
 800cf5c:	f043 0301 	orr.w	r3, r3, #1
 800cf60:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800cf62:	f7fc fc7d 	bl	8009860 <HAL_GetTick>
 800cf66:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cf68:	682b      	ldr	r3, [r5, #0]
 800cf6a:	079b      	lsls	r3, r3, #30
 800cf6c:	d507      	bpl.n	800cf7e <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cf6e:	682b      	ldr	r3, [r5, #0]
 800cf70:	6922      	ldr	r2, [r4, #16]
 800cf72:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800cf76:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800cf7a:	602b      	str	r3, [r5, #0]
 800cf7c:	e76c      	b.n	800ce58 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cf7e:	f7fc fc6f 	bl	8009860 <HAL_GetTick>
 800cf82:	1b80      	subs	r0, r0, r6
 800cf84:	2802      	cmp	r0, #2
 800cf86:	d9ef      	bls.n	800cf68 <HAL_RCC_OscConfig+0x124>
 800cf88:	e7a0      	b.n	800cecc <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_DISABLE();
 800cf8a:	682b      	ldr	r3, [r5, #0]
 800cf8c:	f023 0301 	bic.w	r3, r3, #1
 800cf90:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800cf92:	f7fc fc65 	bl	8009860 <HAL_GetTick>
 800cf96:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800cf98:	682b      	ldr	r3, [r5, #0]
 800cf9a:	079f      	lsls	r7, r3, #30
 800cf9c:	f57f af5c 	bpl.w	800ce58 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cfa0:	f7fc fc5e 	bl	8009860 <HAL_GetTick>
 800cfa4:	1b80      	subs	r0, r0, r6
 800cfa6:	2802      	cmp	r0, #2
 800cfa8:	d9f6      	bls.n	800cf98 <HAL_RCC_OscConfig+0x154>
 800cfaa:	e78f      	b.n	800cecc <HAL_RCC_OscConfig+0x88>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800cfac:	6963      	ldr	r3, [r4, #20]
 800cfae:	4d46      	ldr	r5, [pc, #280]	@ (800d0c8 <HAL_RCC_OscConfig+0x284>)
 800cfb0:	b183      	cbz	r3, 800cfd4 <HAL_RCC_OscConfig+0x190>
      __HAL_RCC_LSI_ENABLE();
 800cfb2:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800cfb4:	f043 0301 	orr.w	r3, r3, #1
 800cfb8:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 800cfba:	f7fc fc51 	bl	8009860 <HAL_GetTick>
 800cfbe:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800cfc0:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800cfc2:	079b      	lsls	r3, r3, #30
 800cfc4:	f53f af4c 	bmi.w	800ce60 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cfc8:	f7fc fc4a 	bl	8009860 <HAL_GetTick>
 800cfcc:	1b80      	subs	r0, r0, r6
 800cfce:	2802      	cmp	r0, #2
 800cfd0:	d9f6      	bls.n	800cfc0 <HAL_RCC_OscConfig+0x17c>
 800cfd2:	e77b      	b.n	800cecc <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_LSI_DISABLE();
 800cfd4:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800cfd6:	f023 0301 	bic.w	r3, r3, #1
 800cfda:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 800cfdc:	f7fc fc40 	bl	8009860 <HAL_GetTick>
 800cfe0:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800cfe2:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800cfe4:	079f      	lsls	r7, r3, #30
 800cfe6:	f57f af3b 	bpl.w	800ce60 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cfea:	f7fc fc39 	bl	8009860 <HAL_GetTick>
 800cfee:	1b80      	subs	r0, r0, r6
 800cff0:	2802      	cmp	r0, #2
 800cff2:	d9f6      	bls.n	800cfe2 <HAL_RCC_OscConfig+0x19e>
 800cff4:	e76a      	b.n	800cecc <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800cff6:	4b34      	ldr	r3, [pc, #208]	@ (800d0c8 <HAL_RCC_OscConfig+0x284>)
 800cff8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800cffa:	00d5      	lsls	r5, r2, #3
 800cffc:	d427      	bmi.n	800d04e <HAL_RCC_OscConfig+0x20a>
      __HAL_RCC_PWR_CLK_ENABLE();
 800cffe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
      pwrclkchanged = SET;
 800d000:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800d002:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800d006:	641a      	str	r2, [r3, #64]	@ 0x40
 800d008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d00a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d00e:	9301      	str	r3, [sp, #4]
 800d010:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d012:	4d2e      	ldr	r5, [pc, #184]	@ (800d0cc <HAL_RCC_OscConfig+0x288>)
 800d014:	682b      	ldr	r3, [r5, #0]
 800d016:	05d8      	lsls	r0, r3, #23
 800d018:	d51b      	bpl.n	800d052 <HAL_RCC_OscConfig+0x20e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d01a:	68a3      	ldr	r3, [r4, #8]
 800d01c:	4d2a      	ldr	r5, [pc, #168]	@ (800d0c8 <HAL_RCC_OscConfig+0x284>)
 800d01e:	2b01      	cmp	r3, #1
 800d020:	d127      	bne.n	800d072 <HAL_RCC_OscConfig+0x22e>
 800d022:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800d024:	f043 0301 	orr.w	r3, r3, #1
 800d028:	672b      	str	r3, [r5, #112]	@ 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d02a:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 800d02e:	f7fc fc17 	bl	8009860 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d032:	4e25      	ldr	r6, [pc, #148]	@ (800d0c8 <HAL_RCC_OscConfig+0x284>)
      tickstart = HAL_GetTick();
 800d034:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d036:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 800d038:	079a      	lsls	r2, r3, #30
 800d03a:	d53f      	bpl.n	800d0bc <HAL_RCC_OscConfig+0x278>
    if (pwrclkchanged == SET)
 800d03c:	2f00      	cmp	r7, #0
 800d03e:	f43f af13 	beq.w	800ce68 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 800d042:	4a21      	ldr	r2, [pc, #132]	@ (800d0c8 <HAL_RCC_OscConfig+0x284>)
 800d044:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800d046:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d04a:	6413      	str	r3, [r2, #64]	@ 0x40
 800d04c:	e70c      	b.n	800ce68 <HAL_RCC_OscConfig+0x24>
  FlagStatus pwrclkchanged = RESET;
 800d04e:	2700      	movs	r7, #0
 800d050:	e7df      	b.n	800d012 <HAL_RCC_OscConfig+0x1ce>
      PWR->CR1 |= PWR_CR1_DBP;
 800d052:	682b      	ldr	r3, [r5, #0]
 800d054:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d058:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800d05a:	f7fc fc01 	bl	8009860 <HAL_GetTick>
 800d05e:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d060:	682b      	ldr	r3, [r5, #0]
 800d062:	05d9      	lsls	r1, r3, #23
 800d064:	d4d9      	bmi.n	800d01a <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d066:	f7fc fbfb 	bl	8009860 <HAL_GetTick>
 800d06a:	1b80      	subs	r0, r0, r6
 800d06c:	2864      	cmp	r0, #100	@ 0x64
 800d06e:	d9f7      	bls.n	800d060 <HAL_RCC_OscConfig+0x21c>
 800d070:	e72c      	b.n	800cecc <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d072:	b9ab      	cbnz	r3, 800d0a0 <HAL_RCC_OscConfig+0x25c>
 800d074:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d076:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d07a:	f023 0301 	bic.w	r3, r3, #1
 800d07e:	672b      	str	r3, [r5, #112]	@ 0x70
 800d080:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800d082:	f023 0304 	bic.w	r3, r3, #4
 800d086:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 800d088:	f7fc fbea 	bl	8009860 <HAL_GetTick>
 800d08c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d08e:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800d090:	079b      	lsls	r3, r3, #30
 800d092:	d5d3      	bpl.n	800d03c <HAL_RCC_OscConfig+0x1f8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d094:	f7fc fbe4 	bl	8009860 <HAL_GetTick>
 800d098:	1b80      	subs	r0, r0, r6
 800d09a:	4540      	cmp	r0, r8
 800d09c:	d9f7      	bls.n	800d08e <HAL_RCC_OscConfig+0x24a>
 800d09e:	e715      	b.n	800cecc <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d0a0:	2b05      	cmp	r3, #5
 800d0a2:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800d0a4:	d103      	bne.n	800d0ae <HAL_RCC_OscConfig+0x26a>
 800d0a6:	f043 0304 	orr.w	r3, r3, #4
 800d0aa:	672b      	str	r3, [r5, #112]	@ 0x70
 800d0ac:	e7b9      	b.n	800d022 <HAL_RCC_OscConfig+0x1de>
 800d0ae:	f023 0301 	bic.w	r3, r3, #1
 800d0b2:	672b      	str	r3, [r5, #112]	@ 0x70
 800d0b4:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800d0b6:	f023 0304 	bic.w	r3, r3, #4
 800d0ba:	e7b5      	b.n	800d028 <HAL_RCC_OscConfig+0x1e4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d0bc:	f7fc fbd0 	bl	8009860 <HAL_GetTick>
 800d0c0:	1b40      	subs	r0, r0, r5
 800d0c2:	4540      	cmp	r0, r8
 800d0c4:	d9b7      	bls.n	800d036 <HAL_RCC_OscConfig+0x1f2>
 800d0c6:	e701      	b.n	800cecc <HAL_RCC_OscConfig+0x88>
 800d0c8:	40023800 	.word	0x40023800
 800d0cc:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800d0d0:	4d38      	ldr	r5, [pc, #224]	@ (800d1b4 <HAL_RCC_OscConfig+0x370>)
 800d0d2:	68ab      	ldr	r3, [r5, #8]
 800d0d4:	f003 030c 	and.w	r3, r3, #12
 800d0d8:	2b08      	cmp	r3, #8
 800d0da:	d041      	beq.n	800d160 <HAL_RCC_OscConfig+0x31c>
        __HAL_RCC_PLL_DISABLE();
 800d0dc:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d0de:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800d0e0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800d0e4:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d0e6:	d12e      	bne.n	800d146 <HAL_RCC_OscConfig+0x302>
        tickstart = HAL_GetTick();
 800d0e8:	f7fc fbba 	bl	8009860 <HAL_GetTick>
 800d0ec:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d0ee:	682b      	ldr	r3, [r5, #0]
 800d0f0:	0199      	lsls	r1, r3, #6
 800d0f2:	d422      	bmi.n	800d13a <HAL_RCC_OscConfig+0x2f6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d0f4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800d0f6:	085b      	lsrs	r3, r3, #1
 800d0f8:	1e5a      	subs	r2, r3, #1
 800d0fa:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 800d0fe:	430b      	orrs	r3, r1
 800d100:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d104:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800d106:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800d10a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800d10c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d110:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800d114:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800d116:	682b      	ldr	r3, [r5, #0]
 800d118:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d11c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800d11e:	f7fc fb9f 	bl	8009860 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d122:	4d24      	ldr	r5, [pc, #144]	@ (800d1b4 <HAL_RCC_OscConfig+0x370>)
        tickstart = HAL_GetTick();
 800d124:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d126:	682b      	ldr	r3, [r5, #0]
 800d128:	019a      	lsls	r2, r3, #6
 800d12a:	f53f aea1 	bmi.w	800ce70 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d12e:	f7fc fb97 	bl	8009860 <HAL_GetTick>
 800d132:	1b00      	subs	r0, r0, r4
 800d134:	2802      	cmp	r0, #2
 800d136:	d9f6      	bls.n	800d126 <HAL_RCC_OscConfig+0x2e2>
 800d138:	e6c8      	b.n	800cecc <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d13a:	f7fc fb91 	bl	8009860 <HAL_GetTick>
 800d13e:	1b80      	subs	r0, r0, r6
 800d140:	2802      	cmp	r0, #2
 800d142:	d9d4      	bls.n	800d0ee <HAL_RCC_OscConfig+0x2aa>
 800d144:	e6c2      	b.n	800cecc <HAL_RCC_OscConfig+0x88>
        tickstart = HAL_GetTick();
 800d146:	f7fc fb8b 	bl	8009860 <HAL_GetTick>
 800d14a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d14c:	682b      	ldr	r3, [r5, #0]
 800d14e:	019b      	lsls	r3, r3, #6
 800d150:	f57f ae8e 	bpl.w	800ce70 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d154:	f7fc fb84 	bl	8009860 <HAL_GetTick>
 800d158:	1b00      	subs	r0, r0, r4
 800d15a:	2802      	cmp	r0, #2
 800d15c:	d9f6      	bls.n	800d14c <HAL_RCC_OscConfig+0x308>
 800d15e:	e6b5      	b.n	800cecc <HAL_RCC_OscConfig+0x88>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d160:	2a01      	cmp	r2, #1
      pll_config = RCC->PLLCFGR;
 800d162:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d164:	f43f ae9b 	beq.w	800ce9e <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d168:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d16c:	69e1      	ldr	r1, [r4, #28]
 800d16e:	428a      	cmp	r2, r1
 800d170:	f47f ae95 	bne.w	800ce9e <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800d174:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d178:	6a21      	ldr	r1, [r4, #32]
 800d17a:	428a      	cmp	r2, r1
 800d17c:	f47f ae8f 	bne.w	800ce9e <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800d180:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800d184:	6a61      	ldr	r1, [r4, #36]	@ 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800d186:	401a      	ands	r2, r3
 800d188:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 800d18c:	f47f ae87 	bne.w	800ce9e <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800d190:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800d192:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 800d196:	0852      	lsrs	r2, r2, #1
 800d198:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800d19a:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 800d19e:	f47f ae7e 	bne.w	800ce9e <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800d1a2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800d1a4:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800d1a8:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 800d1ac:	bf14      	ite	ne
 800d1ae:	2001      	movne	r0, #1
 800d1b0:	2000      	moveq	r0, #0
 800d1b2:	e68c      	b.n	800cece <HAL_RCC_OscConfig+0x8a>
 800d1b4:	40023800 	.word	0x40023800

0800d1b8 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d1b8:	4913      	ldr	r1, [pc, #76]	@ (800d208 <HAL_RCC_GetSysClockFreq+0x50>)
{
 800d1ba:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d1bc:	688b      	ldr	r3, [r1, #8]
 800d1be:	f003 030c 	and.w	r3, r3, #12
 800d1c2:	2b04      	cmp	r3, #4
 800d1c4:	d01b      	beq.n	800d1fe <HAL_RCC_GetSysClockFreq+0x46>
 800d1c6:	2b08      	cmp	r3, #8
 800d1c8:	d11b      	bne.n	800d202 <HAL_RCC_GetSysClockFreq+0x4a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800d1ca:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800d1cc:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d1ce:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800d1d0:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800d1d4:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d1d8:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800d1dc:	bf1a      	itte	ne
 800d1de:	480b      	ldrne	r0, [pc, #44]	@ (800d20c <HAL_RCC_GetSysClockFreq+0x54>)
 800d1e0:	2300      	movne	r3, #0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d1e2:	480b      	ldreq	r0, [pc, #44]	@ (800d210 <HAL_RCC_GetSysClockFreq+0x58>)
 800d1e4:	fba1 0100 	umull	r0, r1, r1, r0
 800d1e8:	f7f3 fd1e 	bl	8000c28 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800d1ec:	4b06      	ldr	r3, [pc, #24]	@ (800d208 <HAL_RCC_GetSysClockFreq+0x50>)
 800d1ee:	685b      	ldr	r3, [r3, #4]
 800d1f0:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800d1f4:	3301      	adds	r3, #1
 800d1f6:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 800d1f8:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800d1fc:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d1fe:	4803      	ldr	r0, [pc, #12]	@ (800d20c <HAL_RCC_GetSysClockFreq+0x54>)
 800d200:	e7fc      	b.n	800d1fc <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSI_VALUE;
 800d202:	4803      	ldr	r0, [pc, #12]	@ (800d210 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 800d204:	e7fa      	b.n	800d1fc <HAL_RCC_GetSysClockFreq+0x44>
 800d206:	bf00      	nop
 800d208:	40023800 	.word	0x40023800
 800d20c:	017d7840 	.word	0x017d7840
 800d210:	00f42400 	.word	0x00f42400

0800d214 <HAL_RCC_ClockConfig>:
{
 800d214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d218:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800d21a:	4604      	mov	r4, r0
 800d21c:	b910      	cbnz	r0, 800d224 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800d21e:	2001      	movs	r0, #1
}
 800d220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800d224:	4a45      	ldr	r2, [pc, #276]	@ (800d33c <HAL_RCC_ClockConfig+0x128>)
 800d226:	6813      	ldr	r3, [r2, #0]
 800d228:	f003 030f 	and.w	r3, r3, #15
 800d22c:	428b      	cmp	r3, r1
 800d22e:	d328      	bcc.n	800d282 <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d230:	6821      	ldr	r1, [r4, #0]
 800d232:	078f      	lsls	r7, r1, #30
 800d234:	d430      	bmi.n	800d298 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d236:	07c8      	lsls	r0, r1, #31
 800d238:	d443      	bmi.n	800d2c2 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800d23a:	4a40      	ldr	r2, [pc, #256]	@ (800d33c <HAL_RCC_ClockConfig+0x128>)
 800d23c:	6813      	ldr	r3, [r2, #0]
 800d23e:	f003 030f 	and.w	r3, r3, #15
 800d242:	42ab      	cmp	r3, r5
 800d244:	d866      	bhi.n	800d314 <HAL_RCC_ClockConfig+0x100>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d246:	6822      	ldr	r2, [r4, #0]
 800d248:	0751      	lsls	r1, r2, #29
 800d24a:	d46f      	bmi.n	800d32c <HAL_RCC_ClockConfig+0x118>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d24c:	0713      	lsls	r3, r2, #28
 800d24e:	d507      	bpl.n	800d260 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800d250:	4a3b      	ldr	r2, [pc, #236]	@ (800d340 <HAL_RCC_ClockConfig+0x12c>)
 800d252:	6921      	ldr	r1, [r4, #16]
 800d254:	6893      	ldr	r3, [r2, #8]
 800d256:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800d25a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800d25e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800d260:	f7ff ffaa 	bl	800d1b8 <HAL_RCC_GetSysClockFreq>
 800d264:	4b36      	ldr	r3, [pc, #216]	@ (800d340 <HAL_RCC_ClockConfig+0x12c>)
 800d266:	4a37      	ldr	r2, [pc, #220]	@ (800d344 <HAL_RCC_ClockConfig+0x130>)
 800d268:	689b      	ldr	r3, [r3, #8]
 800d26a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800d26e:	5cd3      	ldrb	r3, [r2, r3]
 800d270:	40d8      	lsrs	r0, r3
 800d272:	4b35      	ldr	r3, [pc, #212]	@ (800d348 <HAL_RCC_ClockConfig+0x134>)
 800d274:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800d276:	4b35      	ldr	r3, [pc, #212]	@ (800d34c <HAL_RCC_ClockConfig+0x138>)
 800d278:	6818      	ldr	r0, [r3, #0]
 800d27a:	f7f5 fe59 	bl	8002f30 <HAL_InitTick>
  return HAL_OK;
 800d27e:	2000      	movs	r0, #0
 800d280:	e7ce      	b.n	800d220 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d282:	6813      	ldr	r3, [r2, #0]
 800d284:	f023 030f 	bic.w	r3, r3, #15
 800d288:	430b      	orrs	r3, r1
 800d28a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d28c:	6813      	ldr	r3, [r2, #0]
 800d28e:	f003 030f 	and.w	r3, r3, #15
 800d292:	428b      	cmp	r3, r1
 800d294:	d1c3      	bne.n	800d21e <HAL_RCC_ClockConfig+0xa>
 800d296:	e7cb      	b.n	800d230 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d298:	f011 0f04 	tst.w	r1, #4
 800d29c:	4b28      	ldr	r3, [pc, #160]	@ (800d340 <HAL_RCC_ClockConfig+0x12c>)
 800d29e:	d003      	beq.n	800d2a8 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800d2a0:	689a      	ldr	r2, [r3, #8]
 800d2a2:	f442 52e0 	orr.w	r2, r2, #7168	@ 0x1c00
 800d2a6:	609a      	str	r2, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d2a8:	070e      	lsls	r6, r1, #28
 800d2aa:	d503      	bpl.n	800d2b4 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800d2ac:	689a      	ldr	r2, [r3, #8]
 800d2ae:	f442 4260 	orr.w	r2, r2, #57344	@ 0xe000
 800d2b2:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d2b4:	689a      	ldr	r2, [r3, #8]
 800d2b6:	68a0      	ldr	r0, [r4, #8]
 800d2b8:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800d2bc:	4302      	orrs	r2, r0
 800d2be:	609a      	str	r2, [r3, #8]
 800d2c0:	e7b9      	b.n	800d236 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d2c2:	6861      	ldr	r1, [r4, #4]
 800d2c4:	4b1e      	ldr	r3, [pc, #120]	@ (800d340 <HAL_RCC_ClockConfig+0x12c>)
 800d2c6:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d2c8:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d2ca:	d11b      	bne.n	800d304 <HAL_RCC_ClockConfig+0xf0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d2cc:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d2d0:	d0a5      	beq.n	800d21e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800d2d2:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d2d4:	f241 3888 	movw	r8, #5000	@ 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d2d8:	4f19      	ldr	r7, [pc, #100]	@ (800d340 <HAL_RCC_ClockConfig+0x12c>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800d2da:	f022 0203 	bic.w	r2, r2, #3
 800d2de:	430a      	orrs	r2, r1
 800d2e0:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800d2e2:	f7fc fabd 	bl	8009860 <HAL_GetTick>
 800d2e6:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d2e8:	68bb      	ldr	r3, [r7, #8]
 800d2ea:	6862      	ldr	r2, [r4, #4]
 800d2ec:	f003 030c 	and.w	r3, r3, #12
 800d2f0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800d2f4:	d0a1      	beq.n	800d23a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d2f6:	f7fc fab3 	bl	8009860 <HAL_GetTick>
 800d2fa:	1b80      	subs	r0, r0, r6
 800d2fc:	4540      	cmp	r0, r8
 800d2fe:	d9f3      	bls.n	800d2e8 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 800d300:	2003      	movs	r0, #3
 800d302:	e78d      	b.n	800d220 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d304:	2902      	cmp	r1, #2
 800d306:	d102      	bne.n	800d30e <HAL_RCC_ClockConfig+0xfa>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d308:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 800d30c:	e7e0      	b.n	800d2d0 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d30e:	f012 0f02 	tst.w	r2, #2
 800d312:	e7dd      	b.n	800d2d0 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d314:	6813      	ldr	r3, [r2, #0]
 800d316:	f023 030f 	bic.w	r3, r3, #15
 800d31a:	432b      	orrs	r3, r5
 800d31c:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d31e:	6813      	ldr	r3, [r2, #0]
 800d320:	f003 030f 	and.w	r3, r3, #15
 800d324:	42ab      	cmp	r3, r5
 800d326:	f47f af7a 	bne.w	800d21e <HAL_RCC_ClockConfig+0xa>
 800d32a:	e78c      	b.n	800d246 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d32c:	4904      	ldr	r1, [pc, #16]	@ (800d340 <HAL_RCC_ClockConfig+0x12c>)
 800d32e:	68e0      	ldr	r0, [r4, #12]
 800d330:	688b      	ldr	r3, [r1, #8]
 800d332:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 800d336:	4303      	orrs	r3, r0
 800d338:	608b      	str	r3, [r1, #8]
 800d33a:	e787      	b.n	800d24c <HAL_RCC_ClockConfig+0x38>
 800d33c:	40023c00 	.word	0x40023c00
 800d340:	40023800 	.word	0x40023800
 800d344:	080412e5 	.word	0x080412e5
 800d348:	20007a64 	.word	0x20007a64
 800d34c:	20007a94 	.word	0x20007a94

0800d350 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800d350:	4b04      	ldr	r3, [pc, #16]	@ (800d364 <HAL_RCC_GetPCLK1Freq+0x14>)
 800d352:	4a05      	ldr	r2, [pc, #20]	@ (800d368 <HAL_RCC_GetPCLK1Freq+0x18>)
 800d354:	689b      	ldr	r3, [r3, #8]
 800d356:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800d35a:	5cd3      	ldrb	r3, [r2, r3]
 800d35c:	4a03      	ldr	r2, [pc, #12]	@ (800d36c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800d35e:	6810      	ldr	r0, [r2, #0]
}
 800d360:	40d8      	lsrs	r0, r3
 800d362:	4770      	bx	lr
 800d364:	40023800 	.word	0x40023800
 800d368:	080412dd 	.word	0x080412dd
 800d36c:	20007a64 	.word	0x20007a64

0800d370 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800d370:	4b04      	ldr	r3, [pc, #16]	@ (800d384 <HAL_RCC_GetPCLK2Freq+0x14>)
 800d372:	4a05      	ldr	r2, [pc, #20]	@ (800d388 <HAL_RCC_GetPCLK2Freq+0x18>)
 800d374:	689b      	ldr	r3, [r3, #8]
 800d376:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800d37a:	5cd3      	ldrb	r3, [r2, r3]
 800d37c:	4a03      	ldr	r2, [pc, #12]	@ (800d38c <HAL_RCC_GetPCLK2Freq+0x1c>)
 800d37e:	6810      	ldr	r0, [r2, #0]
}
 800d380:	40d8      	lsrs	r0, r3
 800d382:	4770      	bx	lr
 800d384:	40023800 	.word	0x40023800
 800d388:	080412dd 	.word	0x080412dd
 800d38c:	20007a64 	.word	0x20007a64

0800d390 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800d390:	230f      	movs	r3, #15
 800d392:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800d394:	4b0b      	ldr	r3, [pc, #44]	@ (800d3c4 <HAL_RCC_GetClockConfig+0x34>)
 800d396:	689a      	ldr	r2, [r3, #8]
 800d398:	f002 0203 	and.w	r2, r2, #3
 800d39c:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800d39e:	689a      	ldr	r2, [r3, #8]
 800d3a0:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 800d3a4:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800d3a6:	689a      	ldr	r2, [r3, #8]
 800d3a8:	f402 52e0 	and.w	r2, r2, #7168	@ 0x1c00
 800d3ac:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800d3ae:	689b      	ldr	r3, [r3, #8]
 800d3b0:	08db      	lsrs	r3, r3, #3
 800d3b2:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 800d3b6:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800d3b8:	4b03      	ldr	r3, [pc, #12]	@ (800d3c8 <HAL_RCC_GetClockConfig+0x38>)
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	f003 030f 	and.w	r3, r3, #15
 800d3c0:	600b      	str	r3, [r1, #0]
}
 800d3c2:	4770      	bx	lr
 800d3c4:	40023800 	.word	0x40023800
 800d3c8:	40023c00 	.word	0x40023c00

0800d3cc <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800d3cc:	6803      	ldr	r3, [r0, #0]
{
 800d3ce:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800d3d2:	f013 0601 	ands.w	r6, r3, #1
{
 800d3d6:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800d3d8:	d00b      	beq.n	800d3f2 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800d3da:	4aad      	ldr	r2, [pc, #692]	@ (800d690 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800d3dc:	6891      	ldr	r1, [r2, #8]
 800d3de:	f421 0100 	bic.w	r1, r1, #8388608	@ 0x800000
 800d3e2:	6091      	str	r1, [r2, #8]
 800d3e4:	6b46      	ldr	r6, [r0, #52]	@ 0x34
 800d3e6:	6891      	ldr	r1, [r2, #8]
 800d3e8:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800d3ea:	fab6 f686 	clz	r6, r6
 800d3ee:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800d3f0:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800d3f2:	f413 2500 	ands.w	r5, r3, #524288	@ 0x80000
 800d3f6:	d012      	beq.n	800d41e <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d3f8:	49a5      	ldr	r1, [pc, #660]	@ (800d690 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800d3fa:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 800d3fc:	f8d1 208c 	ldr.w	r2, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800d400:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d404:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
    {
      plli2sused = 1;
 800d408:	bf08      	it	eq
 800d40a:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d40c:	ea42 0205 	orr.w	r2, r2, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800d410:	bf16      	itet	ne
 800d412:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 800d416:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800d418:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d41a:	f8c1 208c 	str.w	r2, [r1, #140]	@ 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800d41e:	02d8      	lsls	r0, r3, #11
 800d420:	d510      	bpl.n	800d444 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800d422:	489b      	ldr	r0, [pc, #620]	@ (800d690 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800d424:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 800d426:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800d42a:	f5b1 0f80 	cmp.w	r1, #4194304	@ 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800d42e:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 800d432:	ea42 0201 	orr.w	r2, r2, r1
 800d436:	f8c0 208c 	str.w	r2, [r0, #140]	@ 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800d43a:	f000 8186 	beq.w	800d74a <HAL_RCCEx_PeriphCLKConfig+0x37e>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 800d43e:	2900      	cmp	r1, #0
 800d440:	bf08      	it	eq
 800d442:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 800d444:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 800d448:	bf18      	it	ne
 800d44a:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800d44c:	0699      	lsls	r1, r3, #26
 800d44e:	d532      	bpl.n	800d4b6 <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800d450:	4b8f      	ldr	r3, [pc, #572]	@ (800d690 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800d452:	4f90      	ldr	r7, [pc, #576]	@ (800d694 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
    __HAL_RCC_PWR_CLK_ENABLE();
 800d454:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d456:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800d45a:	641a      	str	r2, [r3, #64]	@ 0x40
 800d45c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d45e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d462:	9301      	str	r3, [sp, #4]
 800d464:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 800d466:	683b      	ldr	r3, [r7, #0]
 800d468:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d46c:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d46e:	f7fc f9f7 	bl	8009860 <HAL_GetTick>
 800d472:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800d474:	683b      	ldr	r3, [r7, #0]
 800d476:	05da      	lsls	r2, r3, #23
 800d478:	f140 8169 	bpl.w	800d74e <HAL_RCCEx_PeriphCLKConfig+0x382>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800d47c:	4f84      	ldr	r7, [pc, #528]	@ (800d690 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800d47e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800d480:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800d482:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 800d486:	f040 816d 	bne.w	800d764 <HAL_RCCEx_PeriphCLKConfig+0x398>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d48a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800d48c:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 800d490:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 800d494:	4a7e      	ldr	r2, [pc, #504]	@ (800d690 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800d496:	f040 818a 	bne.w	800d7ae <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 800d49a:	6891      	ldr	r1, [r2, #8]
 800d49c:	f023 4070 	bic.w	r0, r3, #4026531840	@ 0xf0000000
 800d4a0:	f421 11f8 	bic.w	r1, r1, #2031616	@ 0x1f0000
 800d4a4:	f420 7040 	bic.w	r0, r0, #768	@ 0x300
 800d4a8:	4301      	orrs	r1, r0
 800d4aa:	6091      	str	r1, [r2, #8]
 800d4ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d4b0:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 800d4b2:	430b      	orrs	r3, r1
 800d4b4:	6713      	str	r3, [r2, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800d4b6:	6823      	ldr	r3, [r4, #0]
 800d4b8:	06d9      	lsls	r1, r3, #27
 800d4ba:	d50c      	bpl.n	800d4d6 <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800d4bc:	4a74      	ldr	r2, [pc, #464]	@ (800d690 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800d4be:	f8d2 108c 	ldr.w	r1, [r2, #140]	@ 0x8c
 800d4c2:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 800d4c6:	f8c2 108c 	str.w	r1, [r2, #140]	@ 0x8c
 800d4ca:	f8d2 108c 	ldr.w	r1, [r2, #140]	@ 0x8c
 800d4ce:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800d4d0:	4301      	orrs	r1, r0
 800d4d2:	f8c2 108c 	str.w	r1, [r2, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800d4d6:	045a      	lsls	r2, r3, #17
 800d4d8:	d508      	bpl.n	800d4ec <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800d4da:	496d      	ldr	r1, [pc, #436]	@ (800d690 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800d4dc:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 800d4de:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800d4e2:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 800d4e6:	4302      	orrs	r2, r0
 800d4e8:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800d4ec:	041f      	lsls	r7, r3, #16
 800d4ee:	d508      	bpl.n	800d502 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800d4f0:	4967      	ldr	r1, [pc, #412]	@ (800d690 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800d4f2:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 800d4f4:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800d4f8:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 800d4fc:	4302      	orrs	r2, r0
 800d4fe:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800d502:	03d8      	lsls	r0, r3, #15
 800d504:	d508      	bpl.n	800d518 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800d506:	4962      	ldr	r1, [pc, #392]	@ (800d690 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800d508:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 800d50a:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800d50e:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 800d512:	4302      	orrs	r2, r0
 800d514:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800d518:	0399      	lsls	r1, r3, #14
 800d51a:	d508      	bpl.n	800d52e <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800d51c:	495c      	ldr	r1, [pc, #368]	@ (800d690 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800d51e:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 800d520:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800d524:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 800d528:	4302      	orrs	r2, r0
 800d52a:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800d52e:	065a      	lsls	r2, r3, #25
 800d530:	d508      	bpl.n	800d544 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800d532:	4957      	ldr	r1, [pc, #348]	@ (800d690 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800d534:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 800d536:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800d53a:	f022 0203 	bic.w	r2, r2, #3
 800d53e:	4302      	orrs	r2, r0
 800d540:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800d544:	061f      	lsls	r7, r3, #24
 800d546:	d508      	bpl.n	800d55a <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800d548:	4951      	ldr	r1, [pc, #324]	@ (800d690 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800d54a:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 800d54c:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800d550:	f022 020c 	bic.w	r2, r2, #12
 800d554:	4302      	orrs	r2, r0
 800d556:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800d55a:	05d8      	lsls	r0, r3, #23
 800d55c:	d508      	bpl.n	800d570 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800d55e:	494c      	ldr	r1, [pc, #304]	@ (800d690 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800d560:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 800d562:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800d566:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 800d56a:	4302      	orrs	r2, r0
 800d56c:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800d570:	0599      	lsls	r1, r3, #22
 800d572:	d508      	bpl.n	800d586 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800d574:	4946      	ldr	r1, [pc, #280]	@ (800d690 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800d576:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 800d578:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800d57c:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 800d580:	4302      	orrs	r2, r0
 800d582:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800d586:	055a      	lsls	r2, r3, #21
 800d588:	d508      	bpl.n	800d59c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800d58a:	4941      	ldr	r1, [pc, #260]	@ (800d690 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800d58c:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 800d58e:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800d592:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800d596:	4302      	orrs	r2, r0
 800d598:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800d59c:	051f      	lsls	r7, r3, #20
 800d59e:	d508      	bpl.n	800d5b2 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800d5a0:	493b      	ldr	r1, [pc, #236]	@ (800d690 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800d5a2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d5a4:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800d5a8:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800d5ac:	4302      	orrs	r2, r0
 800d5ae:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800d5b2:	04d8      	lsls	r0, r3, #19
 800d5b4:	d508      	bpl.n	800d5c8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800d5b6:	4936      	ldr	r1, [pc, #216]	@ (800d690 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800d5b8:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 800d5ba:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800d5be:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 800d5c2:	4302      	orrs	r2, r0
 800d5c4:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800d5c8:	0499      	lsls	r1, r3, #18
 800d5ca:	d508      	bpl.n	800d5de <HAL_RCCEx_PeriphCLKConfig+0x212>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800d5cc:	4930      	ldr	r1, [pc, #192]	@ (800d690 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800d5ce:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 800d5d0:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800d5d4:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800d5d8:	4302      	orrs	r2, r0
 800d5da:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800d5de:	025a      	lsls	r2, r3, #9
 800d5e0:	d508      	bpl.n	800d5f4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800d5e2:	492b      	ldr	r1, [pc, #172]	@ (800d690 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800d5e4:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 800d5e6:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800d5ea:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 800d5ee:	4302      	orrs	r2, r0
 800d5f0:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800d5f4:	029f      	lsls	r7, r3, #10
 800d5f6:	d50c      	bpl.n	800d612 <HAL_RCCEx_PeriphCLKConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800d5f8:	4825      	ldr	r0, [pc, #148]	@ (800d690 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800d5fa:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 800d5fc:	f8d0 2090 	ldr.w	r2, [r0, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 800d600:	f1b1 6f00 	cmp.w	r1, #134217728	@ 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800d604:	f022 6200 	bic.w	r2, r2, #134217728	@ 0x8000000
      pllsaiused = 1;
 800d608:	bf08      	it	eq
 800d60a:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800d60c:	430a      	orrs	r2, r1
 800d60e:	f8c0 2090 	str.w	r2, [r0, #144]	@ 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 800d612:	f013 0f08 	tst.w	r3, #8
 800d616:	bf18      	it	ne
 800d618:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800d61a:	0358      	lsls	r0, r3, #13
 800d61c:	d508      	bpl.n	800d630 <HAL_RCCEx_PeriphCLKConfig+0x264>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d61e:	491c      	ldr	r1, [pc, #112]	@ (800d690 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800d620:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800d622:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800d626:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800d62a:	4302      	orrs	r2, r0
 800d62c:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800d630:	0219      	lsls	r1, r3, #8
 800d632:	d509      	bpl.n	800d648 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800d634:	4916      	ldr	r1, [pc, #88]	@ (800d690 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800d636:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 800d63a:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800d63e:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800d642:	4302      	orrs	r2, r0
 800d644:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800d648:	2e01      	cmp	r6, #1
 800d64a:	f000 80b4 	beq.w	800d7b6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800d64e:	019a      	lsls	r2, r3, #6
 800d650:	f100 80b1 	bmi.w	800d7b6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800d654:	2d01      	cmp	r5, #1
 800d656:	d176      	bne.n	800d746 <HAL_RCCEx_PeriphCLKConfig+0x37a>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800d658:	4d0d      	ldr	r5, [pc, #52]	@ (800d690 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800d65a:	682b      	ldr	r3, [r5, #0]
 800d65c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d660:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d662:	f7fc f8fd 	bl	8009860 <HAL_GetTick>
 800d666:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800d668:	682b      	ldr	r3, [r5, #0]
 800d66a:	009f      	lsls	r7, r3, #2
 800d66c:	f100 8127 	bmi.w	800d8be <HAL_RCCEx_PeriphCLKConfig+0x4f2>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800d670:	6821      	ldr	r1, [r4, #0]
 800d672:	030e      	lsls	r6, r1, #12
 800d674:	d501      	bpl.n	800d67a <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 800d676:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800d678:	b11b      	cbz	r3, 800d682 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 800d67a:	02cd      	lsls	r5, r1, #11
 800d67c:	d523      	bpl.n	800d6c6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800d67e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d680:	bb0b      	cbnz	r3, 800d6c6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800d682:	4a03      	ldr	r2, [pc, #12]	@ (800d690 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800d684:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800d688:	f8d2 0088 	ldr.w	r0, [r2, #136]	@ 0x88
 800d68c:	e004      	b.n	800d698 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800d68e:	bf00      	nop
 800d690:	40023800 	.word	0x40023800
 800d694:	40007000 	.word	0x40007000
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800d698:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800d69c:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 800d6a0:	4303      	orrs	r3, r0
 800d6a2:	6960      	ldr	r0, [r4, #20]
 800d6a4:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800d6a8:	69a0      	ldr	r0, [r4, #24]
 800d6aa:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800d6ae:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800d6b2:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 800d6b6:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800d6b8:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 800d6bc:	3801      	subs	r0, #1
 800d6be:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800d6c2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800d6c6:	0288      	lsls	r0, r1, #10
 800d6c8:	d515      	bpl.n	800d6f6 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 800d6ca:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 800d6cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d6d0:	d111      	bne.n	800d6f6 <HAL_RCCEx_PeriphCLKConfig+0x32a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800d6d2:	4a82      	ldr	r2, [pc, #520]	@ (800d8dc <HAL_RCCEx_PeriphCLKConfig+0x510>)
 800d6d4:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800d6d8:	f8d2 0088 	ldr.w	r0, [r2, #136]	@ 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800d6dc:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 800d6e0:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 800d6e4:	4303      	orrs	r3, r0
 800d6e6:	6960      	ldr	r0, [r4, #20]
 800d6e8:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800d6ec:	6a20      	ldr	r0, [r4, #32]
 800d6ee:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d6f2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800d6f6:	070a      	lsls	r2, r1, #28
 800d6f8:	d519      	bpl.n	800d72e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800d6fa:	4a78      	ldr	r2, [pc, #480]	@ (800d8dc <HAL_RCCEx_PeriphCLKConfig+0x510>)
 800d6fc:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800d700:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800d704:	f001 6170 	and.w	r1, r1, #251658240	@ 0xf000000
 800d708:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800d70c:	430b      	orrs	r3, r1
 800d70e:	6961      	ldr	r1, [r4, #20]
 800d710:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 800d714:	69e1      	ldr	r1, [r4, #28]
 800d716:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800d71a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800d71e:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 800d722:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800d724:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800d728:	430b      	orrs	r3, r1
 800d72a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800d72e:	4c6b      	ldr	r4, [pc, #428]	@ (800d8dc <HAL_RCCEx_PeriphCLKConfig+0x510>)
 800d730:	6823      	ldr	r3, [r4, #0]
 800d732:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d736:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d738:	f7fc f892 	bl	8009860 <HAL_GetTick>
 800d73c:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800d73e:	6823      	ldr	r3, [r4, #0]
 800d740:	009b      	lsls	r3, r3, #2
 800d742:	f140 80c3 	bpl.w	800d8cc <HAL_RCCEx_PeriphCLKConfig+0x500>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800d746:	2000      	movs	r0, #0
 800d748:	e009      	b.n	800d75e <HAL_RCCEx_PeriphCLKConfig+0x392>
      plli2sused = 1;
 800d74a:	2601      	movs	r6, #1
 800d74c:	e67a      	b.n	800d444 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d74e:	f7fc f887 	bl	8009860 <HAL_GetTick>
 800d752:	eba0 0008 	sub.w	r0, r0, r8
 800d756:	2864      	cmp	r0, #100	@ 0x64
 800d758:	f67f ae8c 	bls.w	800d474 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 800d75c:	2003      	movs	r0, #3
}
 800d75e:	b003      	add	sp, #12
 800d760:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800d764:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 800d768:	4293      	cmp	r3, r2
 800d76a:	f43f ae8e 	beq.w	800d48a <HAL_RCCEx_PeriphCLKConfig+0xbe>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800d76e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 800d770:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800d772:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 800d776:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800d77a:	673a      	str	r2, [r7, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800d77c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800d77e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800d782:	673a      	str	r2, [r7, #112]	@ 0x70
      RCC->BDCR = tmpreg0;
 800d784:	673b      	str	r3, [r7, #112]	@ 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800d786:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d788:	07db      	lsls	r3, r3, #31
 800d78a:	f57f ae7e 	bpl.w	800d48a <HAL_RCCEx_PeriphCLKConfig+0xbe>
        tickstart = HAL_GetTick();
 800d78e:	f7fc f867 	bl	8009860 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d792:	f241 3988 	movw	r9, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 800d796:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d798:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d79a:	0798      	lsls	r0, r3, #30
 800d79c:	f53f ae75 	bmi.w	800d48a <HAL_RCCEx_PeriphCLKConfig+0xbe>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d7a0:	f7fc f85e 	bl	8009860 <HAL_GetTick>
 800d7a4:	eba0 0008 	sub.w	r0, r0, r8
 800d7a8:	4548      	cmp	r0, r9
 800d7aa:	d9f5      	bls.n	800d798 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800d7ac:	e7d6      	b.n	800d75c <HAL_RCCEx_PeriphCLKConfig+0x390>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d7ae:	6891      	ldr	r1, [r2, #8]
 800d7b0:	f421 11f8 	bic.w	r1, r1, #2031616	@ 0x1f0000
 800d7b4:	e679      	b.n	800d4aa <HAL_RCCEx_PeriphCLKConfig+0xde>
    __HAL_RCC_PLLI2S_DISABLE();
 800d7b6:	4e49      	ldr	r6, [pc, #292]	@ (800d8dc <HAL_RCCEx_PeriphCLKConfig+0x510>)
 800d7b8:	6833      	ldr	r3, [r6, #0]
 800d7ba:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d7be:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800d7c0:	f7fc f84e 	bl	8009860 <HAL_GetTick>
 800d7c4:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800d7c6:	6833      	ldr	r3, [r6, #0]
 800d7c8:	011b      	lsls	r3, r3, #4
 800d7ca:	d472      	bmi.n	800d8b2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800d7cc:	6822      	ldr	r2, [r4, #0]
 800d7ce:	07d7      	lsls	r7, r2, #31
 800d7d0:	d512      	bpl.n	800d7f8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 800d7d2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d7d4:	b983      	cbnz	r3, 800d7f8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800d7d6:	f8d6 3084 	ldr.w	r3, [r6, #132]	@ 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800d7da:	f8d6 1084 	ldr.w	r1, [r6, #132]	@ 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800d7de:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800d7e2:	f001 6170 	and.w	r1, r1, #251658240	@ 0xf000000
 800d7e6:	430b      	orrs	r3, r1
 800d7e8:	6861      	ldr	r1, [r4, #4]
 800d7ea:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 800d7ee:	68a1      	ldr	r1, [r4, #8]
 800d7f0:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800d7f4:	f8c6 3084 	str.w	r3, [r6, #132]	@ 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800d7f8:	0316      	lsls	r6, r2, #12
 800d7fa:	d503      	bpl.n	800d804 <HAL_RCCEx_PeriphCLKConfig+0x438>
 800d7fc:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800d7fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d802:	d005      	beq.n	800d810 <HAL_RCCEx_PeriphCLKConfig+0x444>
 800d804:	02d0      	lsls	r0, r2, #11
 800d806:	d51e      	bpl.n	800d846 <HAL_RCCEx_PeriphCLKConfig+0x47a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800d808:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d80a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d80e:	d11a      	bne.n	800d846 <HAL_RCCEx_PeriphCLKConfig+0x47a>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800d810:	4932      	ldr	r1, [pc, #200]	@ (800d8dc <HAL_RCCEx_PeriphCLKConfig+0x510>)
 800d812:	f8d1 3084 	ldr.w	r3, [r1, #132]	@ 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800d816:	f8d1 0084 	ldr.w	r0, [r1, #132]	@ 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800d81a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800d81e:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 800d822:	4303      	orrs	r3, r0
 800d824:	6860      	ldr	r0, [r4, #4]
 800d826:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800d82a:	68e0      	ldr	r0, [r4, #12]
 800d82c:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800d830:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800d834:	f8d1 008c 	ldr.w	r0, [r1, #140]	@ 0x8c
 800d838:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800d83a:	f020 001f 	bic.w	r0, r0, #31
 800d83e:	3b01      	subs	r3, #1
 800d840:	4303      	orrs	r3, r0
 800d842:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800d846:	01d1      	lsls	r1, r2, #7
 800d848:	d511      	bpl.n	800d86e <HAL_RCCEx_PeriphCLKConfig+0x4a2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800d84a:	4924      	ldr	r1, [pc, #144]	@ (800d8dc <HAL_RCCEx_PeriphCLKConfig+0x510>)
 800d84c:	f8d1 3084 	ldr.w	r3, [r1, #132]	@ 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800d850:	f8d1 0084 	ldr.w	r0, [r1, #132]	@ 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800d854:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 800d858:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 800d85c:	4303      	orrs	r3, r0
 800d85e:	6860      	ldr	r0, [r4, #4]
 800d860:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800d864:	6920      	ldr	r0, [r4, #16]
 800d866:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d86a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800d86e:	0192      	lsls	r2, r2, #6
 800d870:	d50d      	bpl.n	800d88e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800d872:	6923      	ldr	r3, [r4, #16]
 800d874:	6862      	ldr	r2, [r4, #4]
 800d876:	041b      	lsls	r3, r3, #16
 800d878:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800d87c:	68e2      	ldr	r2, [r4, #12]
 800d87e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d882:	68a2      	ldr	r2, [r4, #8]
 800d884:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800d888:	4a14      	ldr	r2, [pc, #80]	@ (800d8dc <HAL_RCCEx_PeriphCLKConfig+0x510>)
 800d88a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 800d88e:	4e13      	ldr	r6, [pc, #76]	@ (800d8dc <HAL_RCCEx_PeriphCLKConfig+0x510>)
 800d890:	6833      	ldr	r3, [r6, #0]
 800d892:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800d896:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800d898:	f7fb ffe2 	bl	8009860 <HAL_GetTick>
 800d89c:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800d89e:	6833      	ldr	r3, [r6, #0]
 800d8a0:	011b      	lsls	r3, r3, #4
 800d8a2:	f53f aed7 	bmi.w	800d654 <HAL_RCCEx_PeriphCLKConfig+0x288>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800d8a6:	f7fb ffdb 	bl	8009860 <HAL_GetTick>
 800d8aa:	1bc0      	subs	r0, r0, r7
 800d8ac:	2864      	cmp	r0, #100	@ 0x64
 800d8ae:	d9f6      	bls.n	800d89e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800d8b0:	e754      	b.n	800d75c <HAL_RCCEx_PeriphCLKConfig+0x390>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800d8b2:	f7fb ffd5 	bl	8009860 <HAL_GetTick>
 800d8b6:	1bc0      	subs	r0, r0, r7
 800d8b8:	2864      	cmp	r0, #100	@ 0x64
 800d8ba:	d984      	bls.n	800d7c6 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800d8bc:	e74e      	b.n	800d75c <HAL_RCCEx_PeriphCLKConfig+0x390>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800d8be:	f7fb ffcf 	bl	8009860 <HAL_GetTick>
 800d8c2:	1b80      	subs	r0, r0, r6
 800d8c4:	2864      	cmp	r0, #100	@ 0x64
 800d8c6:	f67f aecf 	bls.w	800d668 <HAL_RCCEx_PeriphCLKConfig+0x29c>
 800d8ca:	e747      	b.n	800d75c <HAL_RCCEx_PeriphCLKConfig+0x390>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800d8cc:	f7fb ffc8 	bl	8009860 <HAL_GetTick>
 800d8d0:	1b40      	subs	r0, r0, r5
 800d8d2:	2864      	cmp	r0, #100	@ 0x64
 800d8d4:	f67f af33 	bls.w	800d73e <HAL_RCCEx_PeriphCLKConfig+0x372>
 800d8d8:	e740      	b.n	800d75c <HAL_RCCEx_PeriphCLKConfig+0x390>
 800d8da:	bf00      	nop
 800d8dc:	40023800 	.word	0x40023800

0800d8e0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800d8e0:	b538      	push	{r3, r4, r5, lr}
 800d8e2:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800d8e4:	4604      	mov	r4, r0
 800d8e6:	b1c8      	cbz	r0, 800d91c <HAL_SDRAM_Init+0x3c>
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800d8e8:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 800d8ec:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800d8f0:	b91b      	cbnz	r3, 800d8fa <HAL_SDRAM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800d8f2:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800d8f6:	f7f5 fab3 	bl	8002e60 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d8fa:	2302      	movs	r3, #2

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800d8fc:	1d21      	adds	r1, r4, #4
 800d8fe:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d900:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800d904:	f001 f9d0 	bl	800eca8 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800d908:	6862      	ldr	r2, [r4, #4]
 800d90a:	4629      	mov	r1, r5
 800d90c:	6820      	ldr	r0, [r4, #0]
 800d90e:	f001 fa03 	bl	800ed18 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800d912:	2301      	movs	r3, #1

  return HAL_OK;
 800d914:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 800d916:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
}
 800d91a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800d91c:	2001      	movs	r0, #1
 800d91e:	e7fc      	b.n	800d91a <HAL_SDRAM_Init+0x3a>

0800d920 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800d920:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800d922:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
{
 800d926:	4605      	mov	r5, r0
 800d928:	460e      	mov	r6, r1

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800d92a:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800d92c:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 800d92e:	d010      	beq.n	800d952 <HAL_SDRAM_SendCommand+0x32>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800d930:	f000 04fb 	and.w	r4, r0, #251	@ 0xfb
 800d934:	2c01      	cmp	r4, #1
 800d936:	d110      	bne.n	800d95a <HAL_SDRAM_SendCommand+0x3a>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d938:	2302      	movs	r3, #2

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800d93a:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d93c:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800d940:	f001 fa20 	bl	800ed84 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800d944:	6833      	ldr	r3, [r6, #0]
 800d946:	2b02      	cmp	r3, #2
 800d948:	d104      	bne.n	800d954 <HAL_SDRAM_SendCommand+0x34>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800d94a:	2305      	movs	r3, #5
 800d94c:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800d950:	2000      	movs	r0, #0
}
 800d952:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_READY;
 800d954:	f885 402c 	strb.w	r4, [r5, #44]	@ 0x2c
 800d958:	e7fa      	b.n	800d950 <HAL_SDRAM_SendCommand+0x30>
    return HAL_ERROR;
 800d95a:	2001      	movs	r0, #1
 800d95c:	e7f9      	b.n	800d952 <HAL_SDRAM_SendCommand+0x32>

0800d95e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800d95e:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800d960:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
{
 800d964:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800d966:	2b02      	cmp	r3, #2
 800d968:	b2d8      	uxtb	r0, r3
 800d96a:	d00d      	beq.n	800d988 <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800d96c:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800d970:	2b01      	cmp	r3, #1
 800d972:	b2dd      	uxtb	r5, r3
 800d974:	d109      	bne.n	800d98a <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d976:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800d978:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d97a:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800d97e:	f001 fa13 	bl	800eda8 <FMC_SDRAM_ProgramRefreshRate>
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800d982:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 800d984:	f884 502c 	strb.w	r5, [r4, #44]	@ 0x2c
}
 800d988:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800d98a:	2001      	movs	r0, #1
 800d98c:	e7fc      	b.n	800d988 <HAL_SDRAM_ProgramRefreshRate+0x2a>
	...

0800d990 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d990:	6a03      	ldr	r3, [r0, #32]
 800d992:	f023 0301 	bic.w	r3, r3, #1
{
 800d996:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d998:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d99a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d99c:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d99e:	6984      	ldr	r4, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d9a0:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx |= OC_Config->OCMode;
 800d9a4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d9a6:	f424 3480 	bic.w	r4, r4, #65536	@ 0x10000
 800d9aa:	f024 0473 	bic.w	r4, r4, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 800d9ae:	432c      	orrs	r4, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d9b0:	688d      	ldr	r5, [r1, #8]
 800d9b2:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d9b4:	4d0e      	ldr	r5, [pc, #56]	@ (800d9f0 <TIM_OC1_SetConfig+0x60>)
 800d9b6:	42a8      	cmp	r0, r5
 800d9b8:	d002      	beq.n	800d9c0 <TIM_OC1_SetConfig+0x30>
 800d9ba:	4e0e      	ldr	r6, [pc, #56]	@ (800d9f4 <TIM_OC1_SetConfig+0x64>)
 800d9bc:	42b0      	cmp	r0, r6
 800d9be:	d111      	bne.n	800d9e4 <TIM_OC1_SetConfig+0x54>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d9c0:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d9c4:	68ce      	ldr	r6, [r1, #12]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d9c6:	42a8      	cmp	r0, r5
    tmpccer |= OC_Config->OCNPolarity;
 800d9c8:	ea43 0306 	orr.w	r3, r3, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 800d9cc:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d9d0:	d002      	beq.n	800d9d8 <TIM_OC1_SetConfig+0x48>
 800d9d2:	4d08      	ldr	r5, [pc, #32]	@ (800d9f4 <TIM_OC1_SetConfig+0x64>)
 800d9d4:	42a8      	cmp	r0, r5
 800d9d6:	d105      	bne.n	800d9e4 <TIM_OC1_SetConfig+0x54>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d9d8:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d9dc:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 800d9e0:	4335      	orrs	r5, r6
 800d9e2:	432a      	orrs	r2, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d9e4:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d9e6:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 800d9e8:	6184      	str	r4, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 800d9ea:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d9ec:	6203      	str	r3, [r0, #32]
}
 800d9ee:	bd70      	pop	{r4, r5, r6, pc}
 800d9f0:	40010000 	.word	0x40010000
 800d9f4:	40010400 	.word	0x40010400

0800d9f8 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d9f8:	6a03      	ldr	r3, [r0, #32]
 800d9fa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
{
 800d9fe:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800da00:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800da02:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800da04:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800da06:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800da08:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  tmpccmrx |= OC_Config->OCMode;
 800da0c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800da0e:	f424 3480 	bic.w	r4, r4, #65536	@ 0x10000
 800da12:	f024 0473 	bic.w	r4, r4, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 800da16:	432c      	orrs	r4, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800da18:	688d      	ldr	r5, [r1, #8]
 800da1a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800da1e:	4d11      	ldr	r5, [pc, #68]	@ (800da64 <TIM_OC3_SetConfig+0x6c>)
 800da20:	42a8      	cmp	r0, r5
 800da22:	d003      	beq.n	800da2c <TIM_OC3_SetConfig+0x34>
 800da24:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800da28:	42a8      	cmp	r0, r5
 800da2a:	d114      	bne.n	800da56 <TIM_OC3_SetConfig+0x5e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800da2c:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800da2e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800da32:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800da36:	4d0b      	ldr	r5, [pc, #44]	@ (800da64 <TIM_OC3_SetConfig+0x6c>)
 800da38:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 800da3a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800da3e:	d003      	beq.n	800da48 <TIM_OC3_SetConfig+0x50>
 800da40:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800da44:	42a8      	cmp	r0, r5
 800da46:	d106      	bne.n	800da56 <TIM_OC3_SetConfig+0x5e>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800da48:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800da4c:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 800da50:	4335      	orrs	r5, r6
 800da52:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800da56:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800da58:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 800da5a:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 800da5c:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800da5e:	6203      	str	r3, [r0, #32]
}
 800da60:	bd70      	pop	{r4, r5, r6, pc}
 800da62:	bf00      	nop
 800da64:	40010000 	.word	0x40010000

0800da68 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800da68:	6a03      	ldr	r3, [r0, #32]
 800da6a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
{
 800da6e:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800da70:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800da72:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800da74:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800da76:	69c3      	ldr	r3, [r0, #28]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800da78:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800da7c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800da7e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800da82:	f423 43e6 	bic.w	r3, r3, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800da86:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800da8a:	688d      	ldr	r5, [r1, #8]
 800da8c:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800da90:	4d08      	ldr	r5, [pc, #32]	@ (800dab4 <TIM_OC4_SetConfig+0x4c>)
 800da92:	42a8      	cmp	r0, r5
 800da94:	d003      	beq.n	800da9e <TIM_OC4_SetConfig+0x36>
 800da96:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800da9a:	42a8      	cmp	r0, r5
 800da9c:	d104      	bne.n	800daa8 <TIM_OC4_SetConfig+0x40>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800da9e:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800daa2:	694d      	ldr	r5, [r1, #20]
 800daa4:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800daa8:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800daaa:	61c3      	str	r3, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800daac:	684b      	ldr	r3, [r1, #4]
 800daae:	6403      	str	r3, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dab0:	6202      	str	r2, [r0, #32]
}
 800dab2:	bd30      	pop	{r4, r5, pc}
 800dab4:	40010000 	.word	0x40010000

0800dab8 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800dab8:	6a03      	ldr	r3, [r0, #32]
 800daba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
{
 800dabe:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800dac0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dac2:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dac4:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800dac6:	6d43      	ldr	r3, [r0, #84]	@ 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800dac8:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
  tmpccmrx |= OC_Config->OCMode;
 800dacc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800dace:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800dad2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpccmrx |= OC_Config->OCMode;
 800dad6:	432b      	orrs	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800dad8:	688d      	ldr	r5, [r1, #8]
 800dada:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dade:	4d09      	ldr	r5, [pc, #36]	@ (800db04 <TIM_OC5_SetConfig+0x4c>)
 800dae0:	42a8      	cmp	r0, r5
 800dae2:	d003      	beq.n	800daec <TIM_OC5_SetConfig+0x34>
 800dae4:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800dae8:	42a8      	cmp	r0, r5
 800daea:	d104      	bne.n	800daf6 <TIM_OC5_SetConfig+0x3e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800daec:	f424 3480 	bic.w	r4, r4, #65536	@ 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800daf0:	694d      	ldr	r5, [r1, #20]
 800daf2:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800daf6:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800daf8:	6543      	str	r3, [r0, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800dafa:	684b      	ldr	r3, [r1, #4]
 800dafc:	6583      	str	r3, [r0, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dafe:	6202      	str	r2, [r0, #32]
}
 800db00:	bd30      	pop	{r4, r5, pc}
 800db02:	bf00      	nop
 800db04:	40010000 	.word	0x40010000

0800db08 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800db08:	6a03      	ldr	r3, [r0, #32]
 800db0a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
{
 800db0e:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800db10:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800db12:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800db14:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800db16:	6d43      	ldr	r3, [r0, #84]	@ 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800db18:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800db1c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800db1e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800db22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800db26:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800db2a:	688d      	ldr	r5, [r1, #8]
 800db2c:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800db30:	4d08      	ldr	r5, [pc, #32]	@ (800db54 <TIM_OC6_SetConfig+0x4c>)
 800db32:	42a8      	cmp	r0, r5
 800db34:	d003      	beq.n	800db3e <TIM_OC6_SetConfig+0x36>
 800db36:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800db3a:	42a8      	cmp	r0, r5
 800db3c:	d104      	bne.n	800db48 <TIM_OC6_SetConfig+0x40>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800db3e:	f424 2480 	bic.w	r4, r4, #262144	@ 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800db42:	694d      	ldr	r5, [r1, #20]
 800db44:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800db48:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800db4a:	6543      	str	r3, [r0, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800db4c:	684b      	ldr	r3, [r1, #4]
 800db4e:	65c3      	str	r3, [r0, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800db50:	6202      	str	r2, [r0, #32]
}
 800db52:	bd30      	pop	{r4, r5, pc}
 800db54:	40010000 	.word	0x40010000

0800db58 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 800db58:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800db5c:	2b01      	cmp	r3, #1
 800db5e:	d12f      	bne.n	800dbc0 <HAL_TIM_Base_Start+0x68>
  htim->State = HAL_TIM_STATE_BUSY;
 800db60:	2302      	movs	r3, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800db62:	4a18      	ldr	r2, [pc, #96]	@ (800dbc4 <HAL_TIM_Base_Start+0x6c>)
  htim->State = HAL_TIM_STATE_BUSY;
 800db64:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800db68:	6803      	ldr	r3, [r0, #0]
 800db6a:	4293      	cmp	r3, r2
 800db6c:	d01a      	beq.n	800dba4 <HAL_TIM_Base_Start+0x4c>
 800db6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800db72:	d017      	beq.n	800dba4 <HAL_TIM_Base_Start+0x4c>
 800db74:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800db78:	4293      	cmp	r3, r2
 800db7a:	d013      	beq.n	800dba4 <HAL_TIM_Base_Start+0x4c>
 800db7c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800db80:	4293      	cmp	r3, r2
 800db82:	d00f      	beq.n	800dba4 <HAL_TIM_Base_Start+0x4c>
 800db84:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800db88:	4293      	cmp	r3, r2
 800db8a:	d00b      	beq.n	800dba4 <HAL_TIM_Base_Start+0x4c>
 800db8c:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800db90:	4293      	cmp	r3, r2
 800db92:	d007      	beq.n	800dba4 <HAL_TIM_Base_Start+0x4c>
 800db94:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 800db98:	4293      	cmp	r3, r2
 800db9a:	d003      	beq.n	800dba4 <HAL_TIM_Base_Start+0x4c>
 800db9c:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 800dba0:	4293      	cmp	r3, r2
 800dba2:	d107      	bne.n	800dbb4 <HAL_TIM_Base_Start+0x5c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dba4:	6899      	ldr	r1, [r3, #8]
 800dba6:	4a08      	ldr	r2, [pc, #32]	@ (800dbc8 <HAL_TIM_Base_Start+0x70>)
 800dba8:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dbaa:	2a06      	cmp	r2, #6
 800dbac:	d006      	beq.n	800dbbc <HAL_TIM_Base_Start+0x64>
 800dbae:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800dbb2:	d003      	beq.n	800dbbc <HAL_TIM_Base_Start+0x64>
      __HAL_TIM_ENABLE(htim);
 800dbb4:	681a      	ldr	r2, [r3, #0]
 800dbb6:	f042 0201 	orr.w	r2, r2, #1
 800dbba:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800dbbc:	2000      	movs	r0, #0
 800dbbe:	4770      	bx	lr
    return HAL_ERROR;
 800dbc0:	2001      	movs	r0, #1
}
 800dbc2:	4770      	bx	lr
 800dbc4:	40010000 	.word	0x40010000
 800dbc8:	00010007 	.word	0x00010007

0800dbcc <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 800dbcc:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800dbd0:	2b01      	cmp	r3, #1
 800dbd2:	d133      	bne.n	800dc3c <HAL_TIM_Base_Start_IT+0x70>
  htim->State = HAL_TIM_STATE_BUSY;
 800dbd4:	2302      	movs	r3, #2
 800dbd6:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800dbda:	6803      	ldr	r3, [r0, #0]
 800dbdc:	68da      	ldr	r2, [r3, #12]
 800dbde:	f042 0201 	orr.w	r2, r2, #1
 800dbe2:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dbe4:	4a16      	ldr	r2, [pc, #88]	@ (800dc40 <HAL_TIM_Base_Start_IT+0x74>)
 800dbe6:	4293      	cmp	r3, r2
 800dbe8:	d01a      	beq.n	800dc20 <HAL_TIM_Base_Start_IT+0x54>
 800dbea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dbee:	d017      	beq.n	800dc20 <HAL_TIM_Base_Start_IT+0x54>
 800dbf0:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800dbf4:	4293      	cmp	r3, r2
 800dbf6:	d013      	beq.n	800dc20 <HAL_TIM_Base_Start_IT+0x54>
 800dbf8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800dbfc:	4293      	cmp	r3, r2
 800dbfe:	d00f      	beq.n	800dc20 <HAL_TIM_Base_Start_IT+0x54>
 800dc00:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800dc04:	4293      	cmp	r3, r2
 800dc06:	d00b      	beq.n	800dc20 <HAL_TIM_Base_Start_IT+0x54>
 800dc08:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800dc0c:	4293      	cmp	r3, r2
 800dc0e:	d007      	beq.n	800dc20 <HAL_TIM_Base_Start_IT+0x54>
 800dc10:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 800dc14:	4293      	cmp	r3, r2
 800dc16:	d003      	beq.n	800dc20 <HAL_TIM_Base_Start_IT+0x54>
 800dc18:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 800dc1c:	4293      	cmp	r3, r2
 800dc1e:	d107      	bne.n	800dc30 <HAL_TIM_Base_Start_IT+0x64>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dc20:	6899      	ldr	r1, [r3, #8]
 800dc22:	4a08      	ldr	r2, [pc, #32]	@ (800dc44 <HAL_TIM_Base_Start_IT+0x78>)
 800dc24:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dc26:	2a06      	cmp	r2, #6
 800dc28:	d006      	beq.n	800dc38 <HAL_TIM_Base_Start_IT+0x6c>
 800dc2a:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800dc2e:	d003      	beq.n	800dc38 <HAL_TIM_Base_Start_IT+0x6c>
      __HAL_TIM_ENABLE(htim);
 800dc30:	681a      	ldr	r2, [r3, #0]
 800dc32:	f042 0201 	orr.w	r2, r2, #1
 800dc36:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800dc38:	2000      	movs	r0, #0
 800dc3a:	4770      	bx	lr
    return HAL_ERROR;
 800dc3c:	2001      	movs	r0, #1
}
 800dc3e:	4770      	bx	lr
 800dc40:	40010000 	.word	0x40010000
 800dc44:	00010007 	.word	0x00010007

0800dc48 <HAL_TIM_PWM_MspInit>:
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
 800dc48:	4770      	bx	lr

0800dc4a <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 800dc4a:	4770      	bx	lr

0800dc4c <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 800dc4c:	4770      	bx	lr

0800dc4e <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 800dc4e:	4770      	bx	lr

0800dc50 <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 800dc50:	4770      	bx	lr

0800dc52 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800dc52:	6803      	ldr	r3, [r0, #0]
 800dc54:	691a      	ldr	r2, [r3, #16]
 800dc56:	0791      	lsls	r1, r2, #30
{
 800dc58:	b510      	push	{r4, lr}
 800dc5a:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800dc5c:	d50f      	bpl.n	800dc7e <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800dc5e:	68da      	ldr	r2, [r3, #12]
 800dc60:	0792      	lsls	r2, r2, #30
 800dc62:	d50c      	bpl.n	800dc7e <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800dc64:	f06f 0202 	mvn.w	r2, #2
 800dc68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800dc6a:	2201      	movs	r2, #1
 800dc6c:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800dc6e:	699b      	ldr	r3, [r3, #24]
 800dc70:	0799      	lsls	r1, r3, #30
 800dc72:	f000 8085 	beq.w	800dd80 <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 800dc76:	f7ff ffe9 	bl	800dc4c <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dc7a:	2300      	movs	r3, #0
 800dc7c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800dc7e:	6823      	ldr	r3, [r4, #0]
 800dc80:	691a      	ldr	r2, [r3, #16]
 800dc82:	0752      	lsls	r2, r2, #29
 800dc84:	d510      	bpl.n	800dca8 <HAL_TIM_IRQHandler+0x56>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800dc86:	68da      	ldr	r2, [r3, #12]
 800dc88:	0750      	lsls	r0, r2, #29
 800dc8a:	d50d      	bpl.n	800dca8 <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800dc8c:	f06f 0204 	mvn.w	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 800dc90:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800dc92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800dc94:	2202      	movs	r2, #2
 800dc96:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800dc98:	699b      	ldr	r3, [r3, #24]
 800dc9a:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800dc9e:	d075      	beq.n	800dd8c <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 800dca0:	f7ff ffd4 	bl	800dc4c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dca4:	2300      	movs	r3, #0
 800dca6:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800dca8:	6823      	ldr	r3, [r4, #0]
 800dcaa:	691a      	ldr	r2, [r3, #16]
 800dcac:	0711      	lsls	r1, r2, #28
 800dcae:	d50f      	bpl.n	800dcd0 <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800dcb0:	68da      	ldr	r2, [r3, #12]
 800dcb2:	0712      	lsls	r2, r2, #28
 800dcb4:	d50c      	bpl.n	800dcd0 <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800dcb6:	f06f 0208 	mvn.w	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 800dcba:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800dcbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800dcbe:	2204      	movs	r2, #4
 800dcc0:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800dcc2:	69db      	ldr	r3, [r3, #28]
 800dcc4:	079b      	lsls	r3, r3, #30
 800dcc6:	d067      	beq.n	800dd98 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800dcc8:	f7ff ffc0 	bl	800dc4c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dccc:	2300      	movs	r3, #0
 800dcce:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800dcd0:	6823      	ldr	r3, [r4, #0]
 800dcd2:	691a      	ldr	r2, [r3, #16]
 800dcd4:	06d0      	lsls	r0, r2, #27
 800dcd6:	d510      	bpl.n	800dcfa <HAL_TIM_IRQHandler+0xa8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800dcd8:	68da      	ldr	r2, [r3, #12]
 800dcda:	06d1      	lsls	r1, r2, #27
 800dcdc:	d50d      	bpl.n	800dcfa <HAL_TIM_IRQHandler+0xa8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800dcde:	f06f 0210 	mvn.w	r2, #16
        HAL_TIM_IC_CaptureCallback(htim);
 800dce2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800dce4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800dce6:	2208      	movs	r2, #8
 800dce8:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800dcea:	69db      	ldr	r3, [r3, #28]
 800dcec:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800dcf0:	d058      	beq.n	800dda4 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 800dcf2:	f7ff ffab 	bl	800dc4c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dcf6:	2300      	movs	r3, #0
 800dcf8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800dcfa:	6823      	ldr	r3, [r4, #0]
 800dcfc:	691a      	ldr	r2, [r3, #16]
 800dcfe:	07d2      	lsls	r2, r2, #31
 800dd00:	d508      	bpl.n	800dd14 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800dd02:	68da      	ldr	r2, [r3, #12]
 800dd04:	07d0      	lsls	r0, r2, #31
 800dd06:	d505      	bpl.n	800dd14 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800dd08:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800dd0c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800dd0e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800dd10:	f7f4 f9d4 	bl	80020bc <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800dd14:	6823      	ldr	r3, [r4, #0]
 800dd16:	691a      	ldr	r2, [r3, #16]
 800dd18:	0611      	lsls	r1, r2, #24
 800dd1a:	d508      	bpl.n	800dd2e <HAL_TIM_IRQHandler+0xdc>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800dd1c:	68da      	ldr	r2, [r3, #12]
 800dd1e:	0612      	lsls	r2, r2, #24
 800dd20:	d505      	bpl.n	800dd2e <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800dd22:	f06f 0280 	mvn.w	r2, #128	@ 0x80
      HAL_TIMEx_BreakCallback(htim);
 800dd26:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800dd28:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800dd2a:	f000 fbce 	bl	800e4ca <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800dd2e:	6823      	ldr	r3, [r4, #0]
 800dd30:	691a      	ldr	r2, [r3, #16]
 800dd32:	05d0      	lsls	r0, r2, #23
 800dd34:	d508      	bpl.n	800dd48 <HAL_TIM_IRQHandler+0xf6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800dd36:	68da      	ldr	r2, [r3, #12]
 800dd38:	0611      	lsls	r1, r2, #24
 800dd3a:	d505      	bpl.n	800dd48 <HAL_TIM_IRQHandler+0xf6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800dd3c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
      HAL_TIMEx_Break2Callback(htim);
 800dd40:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800dd42:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800dd44:	f000 fbc2 	bl	800e4cc <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800dd48:	6823      	ldr	r3, [r4, #0]
 800dd4a:	691a      	ldr	r2, [r3, #16]
 800dd4c:	0652      	lsls	r2, r2, #25
 800dd4e:	d508      	bpl.n	800dd62 <HAL_TIM_IRQHandler+0x110>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800dd50:	68da      	ldr	r2, [r3, #12]
 800dd52:	0650      	lsls	r0, r2, #25
 800dd54:	d505      	bpl.n	800dd62 <HAL_TIM_IRQHandler+0x110>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800dd56:	f06f 0240 	mvn.w	r2, #64	@ 0x40
      HAL_TIM_TriggerCallback(htim);
 800dd5a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800dd5c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800dd5e:	f7ff ff77 	bl	800dc50 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800dd62:	6823      	ldr	r3, [r4, #0]
 800dd64:	691a      	ldr	r2, [r3, #16]
 800dd66:	0691      	lsls	r1, r2, #26
 800dd68:	d522      	bpl.n	800ddb0 <HAL_TIM_IRQHandler+0x15e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800dd6a:	68da      	ldr	r2, [r3, #12]
 800dd6c:	0692      	lsls	r2, r2, #26
 800dd6e:	d51f      	bpl.n	800ddb0 <HAL_TIM_IRQHandler+0x15e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800dd70:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800dd74:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800dd76:	611a      	str	r2, [r3, #16]
}
 800dd78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800dd7c:	f000 bba4 	b.w	800e4c8 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800dd80:	f7ff ff63 	bl	800dc4a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dd84:	4620      	mov	r0, r4
 800dd86:	f7ff ff62 	bl	800dc4e <HAL_TIM_PWM_PulseFinishedCallback>
 800dd8a:	e776      	b.n	800dc7a <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dd8c:	f7ff ff5d 	bl	800dc4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dd90:	4620      	mov	r0, r4
 800dd92:	f7ff ff5c 	bl	800dc4e <HAL_TIM_PWM_PulseFinishedCallback>
 800dd96:	e785      	b.n	800dca4 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dd98:	f7ff ff57 	bl	800dc4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dd9c:	4620      	mov	r0, r4
 800dd9e:	f7ff ff56 	bl	800dc4e <HAL_TIM_PWM_PulseFinishedCallback>
 800dda2:	e793      	b.n	800dccc <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dda4:	f7ff ff51 	bl	800dc4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dda8:	4620      	mov	r0, r4
 800ddaa:	f7ff ff50 	bl	800dc4e <HAL_TIM_PWM_PulseFinishedCallback>
 800ddae:	e7a2      	b.n	800dcf6 <HAL_TIM_IRQHandler+0xa4>
}
 800ddb0:	bd10      	pop	{r4, pc}
	...

0800ddb4 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ddb4:	4a30      	ldr	r2, [pc, #192]	@ (800de78 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 800ddb6:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ddb8:	4290      	cmp	r0, r2
 800ddba:	d012      	beq.n	800dde2 <TIM_Base_SetConfig+0x2e>
 800ddbc:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800ddc0:	d00f      	beq.n	800dde2 <TIM_Base_SetConfig+0x2e>
 800ddc2:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800ddc6:	4290      	cmp	r0, r2
 800ddc8:	d00b      	beq.n	800dde2 <TIM_Base_SetConfig+0x2e>
 800ddca:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800ddce:	4290      	cmp	r0, r2
 800ddd0:	d007      	beq.n	800dde2 <TIM_Base_SetConfig+0x2e>
 800ddd2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800ddd6:	4290      	cmp	r0, r2
 800ddd8:	d003      	beq.n	800dde2 <TIM_Base_SetConfig+0x2e>
 800ddda:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800ddde:	4290      	cmp	r0, r2
 800dde0:	d119      	bne.n	800de16 <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 800dde2:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800dde4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800dde8:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ddea:	4a23      	ldr	r2, [pc, #140]	@ (800de78 <TIM_Base_SetConfig+0xc4>)
 800ddec:	4290      	cmp	r0, r2
 800ddee:	d029      	beq.n	800de44 <TIM_Base_SetConfig+0x90>
 800ddf0:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800ddf4:	d026      	beq.n	800de44 <TIM_Base_SetConfig+0x90>
 800ddf6:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800ddfa:	4290      	cmp	r0, r2
 800ddfc:	d022      	beq.n	800de44 <TIM_Base_SetConfig+0x90>
 800ddfe:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800de02:	4290      	cmp	r0, r2
 800de04:	d01e      	beq.n	800de44 <TIM_Base_SetConfig+0x90>
 800de06:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800de0a:	4290      	cmp	r0, r2
 800de0c:	d01a      	beq.n	800de44 <TIM_Base_SetConfig+0x90>
 800de0e:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800de12:	4290      	cmp	r0, r2
 800de14:	d016      	beq.n	800de44 <TIM_Base_SetConfig+0x90>
 800de16:	4a19      	ldr	r2, [pc, #100]	@ (800de7c <TIM_Base_SetConfig+0xc8>)
 800de18:	4290      	cmp	r0, r2
 800de1a:	d013      	beq.n	800de44 <TIM_Base_SetConfig+0x90>
 800de1c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800de20:	4290      	cmp	r0, r2
 800de22:	d00f      	beq.n	800de44 <TIM_Base_SetConfig+0x90>
 800de24:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800de28:	4290      	cmp	r0, r2
 800de2a:	d00b      	beq.n	800de44 <TIM_Base_SetConfig+0x90>
 800de2c:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 800de30:	4290      	cmp	r0, r2
 800de32:	d007      	beq.n	800de44 <TIM_Base_SetConfig+0x90>
 800de34:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800de38:	4290      	cmp	r0, r2
 800de3a:	d003      	beq.n	800de44 <TIM_Base_SetConfig+0x90>
 800de3c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800de40:	4290      	cmp	r0, r2
 800de42:	d103      	bne.n	800de4c <TIM_Base_SetConfig+0x98>
    tmpcr1 &= ~TIM_CR1_CKD;
 800de44:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800de48:	68ca      	ldr	r2, [r1, #12]
 800de4a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800de4c:	694a      	ldr	r2, [r1, #20]
 800de4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800de52:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800de54:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800de56:	688b      	ldr	r3, [r1, #8]
 800de58:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800de5a:	680b      	ldr	r3, [r1, #0]
 800de5c:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800de5e:	4b06      	ldr	r3, [pc, #24]	@ (800de78 <TIM_Base_SetConfig+0xc4>)
 800de60:	4298      	cmp	r0, r3
 800de62:	d003      	beq.n	800de6c <TIM_Base_SetConfig+0xb8>
 800de64:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800de68:	4298      	cmp	r0, r3
 800de6a:	d101      	bne.n	800de70 <TIM_Base_SetConfig+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 800de6c:	690b      	ldr	r3, [r1, #16]
 800de6e:	6303      	str	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 800de70:	2301      	movs	r3, #1
 800de72:	6143      	str	r3, [r0, #20]
}
 800de74:	4770      	bx	lr
 800de76:	bf00      	nop
 800de78:	40010000 	.word	0x40010000
 800de7c:	40014000 	.word	0x40014000

0800de80 <HAL_TIM_Base_Init>:
{
 800de80:	b510      	push	{r4, lr}
  if (htim == NULL)
 800de82:	4604      	mov	r4, r0
 800de84:	b350      	cbz	r0, 800dedc <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800de86:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800de8a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800de8e:	b91b      	cbnz	r3, 800de98 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800de90:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800de94:	f7f4 ff18 	bl	8002cc8 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800de98:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800de9a:	6820      	ldr	r0, [r4, #0]
 800de9c:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800de9e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dea2:	f7ff ff87 	bl	800ddb4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800dea6:	2301      	movs	r3, #1
  return HAL_OK;
 800dea8:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800deaa:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800deae:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800deb2:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800deb6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800deba:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800debe:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800dec2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dec6:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800deca:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800dece:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 800ded2:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 800ded6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 800deda:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800dedc:	2001      	movs	r0, #1
 800dede:	e7fc      	b.n	800deda <HAL_TIM_Base_Init+0x5a>

0800dee0 <HAL_TIM_PWM_Init>:
{
 800dee0:	b510      	push	{r4, lr}
  if (htim == NULL)
 800dee2:	4604      	mov	r4, r0
 800dee4:	b350      	cbz	r0, 800df3c <HAL_TIM_PWM_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800dee6:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800deea:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800deee:	b91b      	cbnz	r3, 800def8 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800def0:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800def4:	f7ff fea8 	bl	800dc48 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800def8:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800defa:	6820      	ldr	r0, [r4, #0]
 800defc:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800defe:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800df02:	f7ff ff57 	bl	800ddb4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800df06:	2301      	movs	r3, #1
  return HAL_OK;
 800df08:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800df0a:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800df0e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800df12:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800df16:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800df1a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800df1e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800df22:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800df26:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800df2a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800df2e:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 800df32:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 800df36:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 800df3a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800df3c:	2001      	movs	r0, #1
 800df3e:	e7fc      	b.n	800df3a <HAL_TIM_PWM_Init+0x5a>

0800df40 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800df40:	6a03      	ldr	r3, [r0, #32]
 800df42:	f023 0310 	bic.w	r3, r3, #16
{
 800df46:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800df48:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800df4a:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800df4c:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800df4e:	6984      	ldr	r4, [r0, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 800df50:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800df54:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800df56:	f024 7480 	bic.w	r4, r4, #16777216	@ 0x1000000
 800df5a:	f424 44e6 	bic.w	r4, r4, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800df5e:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800df62:	688d      	ldr	r5, [r1, #8]
 800df64:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800df68:	4d10      	ldr	r5, [pc, #64]	@ (800dfac <TIM_OC2_SetConfig+0x6c>)
 800df6a:	42a8      	cmp	r0, r5
 800df6c:	d003      	beq.n	800df76 <TIM_OC2_SetConfig+0x36>
 800df6e:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800df72:	42a8      	cmp	r0, r5
 800df74:	d114      	bne.n	800dfa0 <TIM_OC2_SetConfig+0x60>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800df76:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 800df78:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800df7c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800df80:	4d0a      	ldr	r5, [pc, #40]	@ (800dfac <TIM_OC2_SetConfig+0x6c>)
 800df82:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 800df84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800df88:	d003      	beq.n	800df92 <TIM_OC2_SetConfig+0x52>
 800df8a:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800df8e:	42a8      	cmp	r0, r5
 800df90:	d106      	bne.n	800dfa0 <TIM_OC2_SetConfig+0x60>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800df92:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800df96:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 800df9a:	4335      	orrs	r5, r6
 800df9c:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 800dfa0:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 800dfa2:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 800dfa4:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800dfa6:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 800dfa8:	6203      	str	r3, [r0, #32]
}
 800dfaa:	bd70      	pop	{r4, r5, r6, pc}
 800dfac:	40010000 	.word	0x40010000

0800dfb0 <HAL_TIM_PWM_ConfigChannel>:
{
 800dfb0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800dfb2:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
{
 800dfb6:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800dfb8:	2b01      	cmp	r3, #1
 800dfba:	d073      	beq.n	800e0a4 <HAL_TIM_PWM_ConfigChannel+0xf4>
 800dfbc:	2001      	movs	r0, #1
  switch (Channel)
 800dfbe:	2a0c      	cmp	r2, #12
  __HAL_LOCK(htim);
 800dfc0:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
  switch (Channel)
 800dfc4:	d04e      	beq.n	800e064 <HAL_TIM_PWM_ConfigChannel+0xb4>
 800dfc6:	d808      	bhi.n	800dfda <HAL_TIM_PWM_ConfigChannel+0x2a>
 800dfc8:	2a04      	cmp	r2, #4
 800dfca:	d02b      	beq.n	800e024 <HAL_TIM_PWM_ConfigChannel+0x74>
 800dfcc:	2a08      	cmp	r2, #8
 800dfce:	d039      	beq.n	800e044 <HAL_TIM_PWM_ConfigChannel+0x94>
 800dfd0:	b1ba      	cbz	r2, 800e002 <HAL_TIM_PWM_ConfigChannel+0x52>
  __HAL_UNLOCK(htim);
 800dfd2:	2300      	movs	r3, #0
 800dfd4:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 800dfd8:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 800dfda:	2a10      	cmp	r2, #16
 800dfdc:	d052      	beq.n	800e084 <HAL_TIM_PWM_ConfigChannel+0xd4>
 800dfde:	2a14      	cmp	r2, #20
 800dfe0:	d1f7      	bne.n	800dfd2 <HAL_TIM_PWM_ConfigChannel+0x22>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800dfe2:	6820      	ldr	r0, [r4, #0]
 800dfe4:	f7ff fd90 	bl	800db08 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800dfe8:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800dfea:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800dfec:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800dff0:	6543      	str	r3, [r0, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800dff2:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800dff4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800dff8:	6543      	str	r3, [r0, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800dffa:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800dffc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e000:	e04e      	b.n	800e0a0 <HAL_TIM_PWM_ConfigChannel+0xf0>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e002:	6820      	ldr	r0, [r4, #0]
 800e004:	f7ff fcc4 	bl	800d990 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e008:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e00a:	6983      	ldr	r3, [r0, #24]
 800e00c:	f043 0308 	orr.w	r3, r3, #8
 800e010:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e012:	6983      	ldr	r3, [r0, #24]
 800e014:	f023 0304 	bic.w	r3, r3, #4
 800e018:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e01a:	6983      	ldr	r3, [r0, #24]
 800e01c:	4313      	orrs	r3, r2
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e01e:	6183      	str	r3, [r0, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800e020:	2000      	movs	r0, #0
 800e022:	e7d6      	b.n	800dfd2 <HAL_TIM_PWM_ConfigChannel+0x22>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e024:	6820      	ldr	r0, [r4, #0]
 800e026:	f7ff ff8b 	bl	800df40 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e02a:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e02c:	6983      	ldr	r3, [r0, #24]
 800e02e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800e032:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e034:	6983      	ldr	r3, [r0, #24]
 800e036:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e03a:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e03c:	6983      	ldr	r3, [r0, #24]
 800e03e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e042:	e7ec      	b.n	800e01e <HAL_TIM_PWM_ConfigChannel+0x6e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e044:	6820      	ldr	r0, [r4, #0]
 800e046:	f7ff fcd7 	bl	800d9f8 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e04a:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e04c:	69c3      	ldr	r3, [r0, #28]
 800e04e:	f043 0308 	orr.w	r3, r3, #8
 800e052:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e054:	69c3      	ldr	r3, [r0, #28]
 800e056:	f023 0304 	bic.w	r3, r3, #4
 800e05a:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e05c:	69c3      	ldr	r3, [r0, #28]
 800e05e:	4313      	orrs	r3, r2
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e060:	61c3      	str	r3, [r0, #28]
      break;
 800e062:	e7dd      	b.n	800e020 <HAL_TIM_PWM_ConfigChannel+0x70>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e064:	6820      	ldr	r0, [r4, #0]
 800e066:	f7ff fcff 	bl	800da68 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e06a:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e06c:	69c3      	ldr	r3, [r0, #28]
 800e06e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800e072:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e074:	69c3      	ldr	r3, [r0, #28]
 800e076:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e07a:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e07c:	69c3      	ldr	r3, [r0, #28]
 800e07e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e082:	e7ed      	b.n	800e060 <HAL_TIM_PWM_ConfigChannel+0xb0>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e084:	6820      	ldr	r0, [r4, #0]
 800e086:	f7ff fd17 	bl	800dab8 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e08a:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e08c:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800e08e:	f043 0308 	orr.w	r3, r3, #8
 800e092:	6543      	str	r3, [r0, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e094:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800e096:	f023 0304 	bic.w	r3, r3, #4
 800e09a:	6543      	str	r3, [r0, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e09c:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800e09e:	4313      	orrs	r3, r2
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e0a0:	6543      	str	r3, [r0, #84]	@ 0x54
      break;
 800e0a2:	e7bd      	b.n	800e020 <HAL_TIM_PWM_ConfigChannel+0x70>
  __HAL_LOCK(htim);
 800e0a4:	2002      	movs	r0, #2
 800e0a6:	e797      	b.n	800dfd8 <HAL_TIM_PWM_ConfigChannel+0x28>

0800e0a8 <TIM_ETR_SetConfig>:

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e0a8:	430a      	orrs	r2, r1
{
 800e0aa:	b510      	push	{r4, lr}
  tmpsmcr = TIMx->SMCR;
 800e0ac:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e0ae:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e0b2:	f424 447f 	bic.w	r4, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e0b6:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e0b8:	6082      	str	r2, [r0, #8]
}
 800e0ba:	bd10      	pop	{r4, pc}

0800e0bc <HAL_TIM_ConfigClockSource>:
{
 800e0bc:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800e0be:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
{
 800e0c2:	4604      	mov	r4, r0
 800e0c4:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 800e0c6:	2b01      	cmp	r3, #1
 800e0c8:	f000 808c 	beq.w	800e1e4 <HAL_TIM_ConfigClockSource+0x128>
  htim->State = HAL_TIM_STATE_BUSY;
 800e0cc:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  __HAL_LOCK(htim);
 800e0d0:	2201      	movs	r2, #1
  tmpsmcr = htim->Instance->SMCR;
 800e0d2:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 800e0d4:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e0d8:	4b43      	ldr	r3, [pc, #268]	@ (800e1e8 <HAL_TIM_ConfigClockSource+0x12c>)
  tmpsmcr = htim->Instance->SMCR;
 800e0da:	6885      	ldr	r5, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e0dc:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 800e0de:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 800e0e0:	680b      	ldr	r3, [r1, #0]
 800e0e2:	2b60      	cmp	r3, #96	@ 0x60
 800e0e4:	d04f      	beq.n	800e186 <HAL_TIM_ConfigClockSource+0xca>
 800e0e6:	d832      	bhi.n	800e14e <HAL_TIM_ConfigClockSource+0x92>
 800e0e8:	2b40      	cmp	r3, #64	@ 0x40
 800e0ea:	d064      	beq.n	800e1b6 <HAL_TIM_ConfigClockSource+0xfa>
 800e0ec:	d816      	bhi.n	800e11c <HAL_TIM_ConfigClockSource+0x60>
 800e0ee:	2b20      	cmp	r3, #32
 800e0f0:	d00d      	beq.n	800e10e <HAL_TIM_ConfigClockSource+0x52>
 800e0f2:	d80a      	bhi.n	800e10a <HAL_TIM_ConfigClockSource+0x4e>
 800e0f4:	f033 0110 	bics.w	r1, r3, #16
 800e0f8:	d009      	beq.n	800e10e <HAL_TIM_ConfigClockSource+0x52>
  htim->State = HAL_TIM_STATE_READY;
 800e0fa:	2301      	movs	r3, #1
 800e0fc:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 800e100:	2300      	movs	r3, #0
 800e102:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 800e106:	4610      	mov	r0, r2
 800e108:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 800e10a:	2b30      	cmp	r3, #48	@ 0x30
 800e10c:	d1f5      	bne.n	800e0fa <HAL_TIM_ConfigClockSource+0x3e>
  tmpsmcr = TIMx->SMCR;
 800e10e:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800e110:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e114:	4313      	orrs	r3, r2
 800e116:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 800e11a:	e028      	b.n	800e16e <HAL_TIM_ConfigClockSource+0xb2>
  switch (sClockSourceConfig->ClockSource)
 800e11c:	2b50      	cmp	r3, #80	@ 0x50
 800e11e:	d1ec      	bne.n	800e0fa <HAL_TIM_ConfigClockSource+0x3e>
                               sClockSourceConfig->ClockPolarity,
 800e120:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 800e122:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 800e124:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e126:	6a03      	ldr	r3, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e128:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e12c:	f023 0301 	bic.w	r3, r3, #1
  tmpccer |= TIM_ICPolarity;
 800e130:	430a      	orrs	r2, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e132:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e134:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e136:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e13a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800e13e:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800e140:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800e142:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800e144:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e148:	f043 0357 	orr.w	r3, r3, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 800e14c:	e00f      	b.n	800e16e <HAL_TIM_ConfigClockSource+0xb2>
  switch (sClockSourceConfig->ClockSource)
 800e14e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e152:	d00d      	beq.n	800e170 <HAL_TIM_ConfigClockSource+0xb4>
 800e154:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e158:	d00c      	beq.n	800e174 <HAL_TIM_ConfigClockSource+0xb8>
 800e15a:	2b70      	cmp	r3, #112	@ 0x70
 800e15c:	d1cd      	bne.n	800e0fa <HAL_TIM_ConfigClockSource+0x3e>
      TIM_ETR_SetConfig(htim->Instance,
 800e15e:	68cb      	ldr	r3, [r1, #12]
 800e160:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800e164:	f7ff ffa0 	bl	800e0a8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800e168:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e16a:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 800e16e:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800e170:	2200      	movs	r2, #0
 800e172:	e7c2      	b.n	800e0fa <HAL_TIM_ConfigClockSource+0x3e>
      TIM_ETR_SetConfig(htim->Instance,
 800e174:	68cb      	ldr	r3, [r1, #12]
 800e176:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800e17a:	f7ff ff95 	bl	800e0a8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e17e:	6883      	ldr	r3, [r0, #8]
 800e180:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800e184:	e7f3      	b.n	800e16e <HAL_TIM_ConfigClockSource+0xb2>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e186:	6a03      	ldr	r3, [r0, #32]
                               sClockSourceConfig->ClockPolarity,
 800e188:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e18a:	f023 0310 	bic.w	r3, r3, #16
                               sClockSourceConfig->ClockFilter);
 800e18e:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e190:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e192:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 800e194:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e196:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e19a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e19e:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 800e1a2:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 800e1a6:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800e1a8:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800e1aa:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800e1ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e1b0:	f043 0367 	orr.w	r3, r3, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 800e1b4:	e7db      	b.n	800e16e <HAL_TIM_ConfigClockSource+0xb2>
                               sClockSourceConfig->ClockPolarity,
 800e1b6:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 800e1b8:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 800e1ba:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e1bc:	6a03      	ldr	r3, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e1be:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e1c2:	f023 0301 	bic.w	r3, r3, #1
  tmpccer |= TIM_ICPolarity;
 800e1c6:	430a      	orrs	r2, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e1c8:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e1ca:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e1cc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e1d0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800e1d4:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800e1d6:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800e1d8:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800e1da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e1de:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 800e1e2:	e7c4      	b.n	800e16e <HAL_TIM_ConfigClockSource+0xb2>
  __HAL_LOCK(htim);
 800e1e4:	4602      	mov	r2, r0
 800e1e6:	e78e      	b.n	800e106 <HAL_TIM_ConfigClockSource+0x4a>
 800e1e8:	fffe0088 	.word	0xfffe0088

0800e1ec <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e1ec:	f001 011f 	and.w	r1, r1, #31

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800e1f0:	6a03      	ldr	r3, [r0, #32]
{
 800e1f2:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e1f4:	2401      	movs	r4, #1

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800e1f6:	408a      	lsls	r2, r1
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e1f8:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 800e1fa:	ea23 0304 	bic.w	r3, r3, r4
 800e1fe:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800e200:	6a03      	ldr	r3, [r0, #32]
 800e202:	431a      	orrs	r2, r3
 800e204:	6202      	str	r2, [r0, #32]
}
 800e206:	bd10      	pop	{r4, pc}

0800e208 <HAL_TIM_OC_Start>:
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e208:	2908      	cmp	r1, #8
{
 800e20a:	b508      	push	{r3, lr}
 800e20c:	d018      	beq.n	800e240 <HAL_TIM_OC_Start+0x38>
 800e20e:	d805      	bhi.n	800e21c <HAL_TIM_OC_Start+0x14>
 800e210:	b159      	cbz	r1, 800e22a <HAL_TIM_OC_Start+0x22>
 800e212:	2904      	cmp	r1, #4
 800e214:	d011      	beq.n	800e23a <HAL_TIM_OC_Start+0x32>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e216:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800e21a:	e008      	b.n	800e22e <HAL_TIM_OC_Start+0x26>
 800e21c:	290c      	cmp	r1, #12
 800e21e:	d012      	beq.n	800e246 <HAL_TIM_OC_Start+0x3e>
 800e220:	2910      	cmp	r1, #16
 800e222:	d1f8      	bne.n	800e216 <HAL_TIM_OC_Start+0xe>
 800e224:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800e228:	e001      	b.n	800e22e <HAL_TIM_OC_Start+0x26>
 800e22a:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 800e22e:	3b01      	subs	r3, #1
 800e230:	bf18      	it	ne
 800e232:	2301      	movne	r3, #1
 800e234:	b153      	cbz	r3, 800e24c <HAL_TIM_OC_Start+0x44>
    return HAL_ERROR;
 800e236:	2001      	movs	r0, #1
 800e238:	e030      	b.n	800e29c <HAL_TIM_OC_Start+0x94>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e23a:	f890 303f 	ldrb.w	r3, [r0, #63]	@ 0x3f
 800e23e:	e7f6      	b.n	800e22e <HAL_TIM_OC_Start+0x26>
 800e240:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800e244:	e7f3      	b.n	800e22e <HAL_TIM_OC_Start+0x26>
 800e246:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800e24a:	e7f0      	b.n	800e22e <HAL_TIM_OC_Start+0x26>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e24c:	2908      	cmp	r1, #8
 800e24e:	f04f 0302 	mov.w	r3, #2
 800e252:	d027      	beq.n	800e2a4 <HAL_TIM_OC_Start+0x9c>
 800e254:	d806      	bhi.n	800e264 <HAL_TIM_OC_Start+0x5c>
 800e256:	b161      	cbz	r1, 800e272 <HAL_TIM_OC_Start+0x6a>
 800e258:	2904      	cmp	r1, #4
 800e25a:	d020      	beq.n	800e29e <HAL_TIM_OC_Start+0x96>
 800e25c:	2302      	movs	r3, #2
 800e25e:	f880 3043 	strb.w	r3, [r0, #67]	@ 0x43
 800e262:	e008      	b.n	800e276 <HAL_TIM_OC_Start+0x6e>
 800e264:	290c      	cmp	r1, #12
 800e266:	d020      	beq.n	800e2aa <HAL_TIM_OC_Start+0xa2>
 800e268:	2910      	cmp	r1, #16
 800e26a:	d1f7      	bne.n	800e25c <HAL_TIM_OC_Start+0x54>
 800e26c:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
 800e270:	e001      	b.n	800e276 <HAL_TIM_OC_Start+0x6e>
 800e272:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e276:	6800      	ldr	r0, [r0, #0]
 800e278:	2201      	movs	r2, #1
 800e27a:	f7ff ffb7 	bl	800e1ec <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e27e:	4a20      	ldr	r2, [pc, #128]	@ (800e300 <HAL_TIM_OC_Start+0xf8>)
 800e280:	4290      	cmp	r0, r2
 800e282:	d015      	beq.n	800e2b0 <HAL_TIM_OC_Start+0xa8>
 800e284:	4b1f      	ldr	r3, [pc, #124]	@ (800e304 <HAL_TIM_OC_Start+0xfc>)
 800e286:	4298      	cmp	r0, r3
 800e288:	d012      	beq.n	800e2b0 <HAL_TIM_OC_Start+0xa8>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e28a:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800e28e:	d116      	bne.n	800e2be <HAL_TIM_OC_Start+0xb6>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e290:	6882      	ldr	r2, [r0, #8]
 800e292:	4b1d      	ldr	r3, [pc, #116]	@ (800e308 <HAL_TIM_OC_Start+0x100>)
 800e294:	4013      	ands	r3, r2
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e296:	2b06      	cmp	r3, #6
 800e298:	d12d      	bne.n	800e2f6 <HAL_TIM_OC_Start+0xee>
  return HAL_OK;
 800e29a:	2000      	movs	r0, #0
}
 800e29c:	bd08      	pop	{r3, pc}
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e29e:	f880 303f 	strb.w	r3, [r0, #63]	@ 0x3f
 800e2a2:	e7e8      	b.n	800e276 <HAL_TIM_OC_Start+0x6e>
 800e2a4:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 800e2a8:	e7e5      	b.n	800e276 <HAL_TIM_OC_Start+0x6e>
 800e2aa:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
 800e2ae:	e7e2      	b.n	800e276 <HAL_TIM_OC_Start+0x6e>
    __HAL_TIM_MOE_ENABLE(htim);
 800e2b0:	6c43      	ldr	r3, [r0, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e2b2:	4290      	cmp	r0, r2
    __HAL_TIM_MOE_ENABLE(htim);
 800e2b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e2b8:	6443      	str	r3, [r0, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e2ba:	d0e9      	beq.n	800e290 <HAL_TIM_OC_Start+0x88>
 800e2bc:	e7e5      	b.n	800e28a <HAL_TIM_OC_Start+0x82>
 800e2be:	4b13      	ldr	r3, [pc, #76]	@ (800e30c <HAL_TIM_OC_Start+0x104>)
 800e2c0:	4298      	cmp	r0, r3
 800e2c2:	d0e5      	beq.n	800e290 <HAL_TIM_OC_Start+0x88>
 800e2c4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e2c8:	4298      	cmp	r0, r3
 800e2ca:	d0e1      	beq.n	800e290 <HAL_TIM_OC_Start+0x88>
 800e2cc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e2d0:	4298      	cmp	r0, r3
 800e2d2:	d0dd      	beq.n	800e290 <HAL_TIM_OC_Start+0x88>
 800e2d4:	f503 4378 	add.w	r3, r3, #63488	@ 0xf800
 800e2d8:	4298      	cmp	r0, r3
 800e2da:	d0d9      	beq.n	800e290 <HAL_TIM_OC_Start+0x88>
 800e2dc:	f503 5370 	add.w	r3, r3, #15360	@ 0x3c00
 800e2e0:	4298      	cmp	r0, r3
 800e2e2:	d0d5      	beq.n	800e290 <HAL_TIM_OC_Start+0x88>
 800e2e4:	f5a3 3394 	sub.w	r3, r3, #75776	@ 0x12800
 800e2e8:	4298      	cmp	r0, r3
 800e2ea:	d0d1      	beq.n	800e290 <HAL_TIM_OC_Start+0x88>
      __HAL_TIM_ENABLE(htim);
 800e2ec:	6803      	ldr	r3, [r0, #0]
 800e2ee:	f043 0301 	orr.w	r3, r3, #1
 800e2f2:	6003      	str	r3, [r0, #0]
 800e2f4:	e7d1      	b.n	800e29a <HAL_TIM_OC_Start+0x92>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e2f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e2fa:	d1f7      	bne.n	800e2ec <HAL_TIM_OC_Start+0xe4>
 800e2fc:	e7cd      	b.n	800e29a <HAL_TIM_OC_Start+0x92>
 800e2fe:	bf00      	nop
 800e300:	40010000 	.word	0x40010000
 800e304:	40010400 	.word	0x40010400
 800e308:	00010007 	.word	0x00010007
 800e30c:	40000400 	.word	0x40000400

0800e310 <HAL_TIM_PWM_Start>:
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
 800e310:	f7ff bf7a 	b.w	800e208 <HAL_TIM_OC_Start>

0800e314 <HAL_TIM_OC_Stop>:
{
 800e314:	b538      	push	{r3, r4, r5, lr}
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800e316:	2200      	movs	r2, #0
{
 800e318:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800e31a:	6800      	ldr	r0, [r0, #0]
{
 800e31c:	460d      	mov	r5, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800e31e:	f7ff ff65 	bl	800e1ec <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e322:	4b21      	ldr	r3, [pc, #132]	@ (800e3a8 <HAL_TIM_OC_Stop+0x94>)
 800e324:	4298      	cmp	r0, r3
 800e326:	d003      	beq.n	800e330 <HAL_TIM_OC_Stop+0x1c>
 800e328:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e32c:	4298      	cmp	r0, r3
 800e32e:	d10d      	bne.n	800e34c <HAL_TIM_OC_Stop+0x38>
    __HAL_TIM_MOE_DISABLE(htim);
 800e330:	6a02      	ldr	r2, [r0, #32]
 800e332:	f241 1311 	movw	r3, #4369	@ 0x1111
 800e336:	421a      	tst	r2, r3
 800e338:	d108      	bne.n	800e34c <HAL_TIM_OC_Stop+0x38>
 800e33a:	6a02      	ldr	r2, [r0, #32]
 800e33c:	f240 4344 	movw	r3, #1092	@ 0x444
 800e340:	421a      	tst	r2, r3
 800e342:	d103      	bne.n	800e34c <HAL_TIM_OC_Stop+0x38>
 800e344:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800e346:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800e34a:	6443      	str	r3, [r0, #68]	@ 0x44
  __HAL_TIM_DISABLE(htim);
 800e34c:	6a02      	ldr	r2, [r0, #32]
 800e34e:	f241 1311 	movw	r3, #4369	@ 0x1111
 800e352:	421a      	tst	r2, r3
 800e354:	d108      	bne.n	800e368 <HAL_TIM_OC_Stop+0x54>
 800e356:	6a02      	ldr	r2, [r0, #32]
 800e358:	f240 4344 	movw	r3, #1092	@ 0x444
 800e35c:	421a      	tst	r2, r3
 800e35e:	d103      	bne.n	800e368 <HAL_TIM_OC_Stop+0x54>
 800e360:	6803      	ldr	r3, [r0, #0]
 800e362:	f023 0301 	bic.w	r3, r3, #1
 800e366:	6003      	str	r3, [r0, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800e368:	2301      	movs	r3, #1
 800e36a:	b91d      	cbnz	r5, 800e374 <HAL_TIM_OC_Stop+0x60>
 800e36c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
}
 800e370:	2000      	movs	r0, #0
 800e372:	bd38      	pop	{r3, r4, r5, pc}
 800e374:	2d0c      	cmp	r5, #12
 800e376:	d013      	beq.n	800e3a0 <HAL_TIM_OC_Stop+0x8c>
 800e378:	d807      	bhi.n	800e38a <HAL_TIM_OC_Stop+0x76>
 800e37a:	2d04      	cmp	r5, #4
 800e37c:	d00a      	beq.n	800e394 <HAL_TIM_OC_Stop+0x80>
 800e37e:	2d08      	cmp	r5, #8
 800e380:	d00b      	beq.n	800e39a <HAL_TIM_OC_Stop+0x86>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800e382:	2301      	movs	r3, #1
 800e384:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e388:	e7f2      	b.n	800e370 <HAL_TIM_OC_Stop+0x5c>
 800e38a:	2d10      	cmp	r5, #16
 800e38c:	d1f9      	bne.n	800e382 <HAL_TIM_OC_Stop+0x6e>
 800e38e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e392:	e7ed      	b.n	800e370 <HAL_TIM_OC_Stop+0x5c>
 800e394:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800e398:	e7ea      	b.n	800e370 <HAL_TIM_OC_Stop+0x5c>
 800e39a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800e39e:	e7e7      	b.n	800e370 <HAL_TIM_OC_Stop+0x5c>
 800e3a0:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800e3a4:	e7e4      	b.n	800e370 <HAL_TIM_OC_Stop+0x5c>
 800e3a6:	bf00      	nop
 800e3a8:	40010000 	.word	0x40010000

0800e3ac <HAL_TIM_PWM_Stop>:
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
 800e3ac:	f7ff bfb2 	b.w	800e314 <HAL_TIM_OC_Stop>

0800e3b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e3b0:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e3b2:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
{
 800e3b6:	4604      	mov	r4, r0
 800e3b8:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 800e3ba:	2b01      	cmp	r3, #1
 800e3bc:	d03b      	beq.n	800e436 <HAL_TIMEx_MasterConfigSynchronization+0x86>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e3be:	6823      	ldr	r3, [r4, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e3c0:	4d1d      	ldr	r5, [pc, #116]	@ (800e438 <HAL_TIMEx_MasterConfigSynchronization+0x88>)
  htim->State = HAL_TIM_STATE_BUSY;
 800e3c2:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e3c6:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 800e3c8:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 800e3ca:	6898      	ldr	r0, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e3cc:	d002      	beq.n	800e3d4 <HAL_TIMEx_MasterConfigSynchronization+0x24>
 800e3ce:	4e1b      	ldr	r6, [pc, #108]	@ (800e43c <HAL_TIMEx_MasterConfigSynchronization+0x8c>)
 800e3d0:	42b3      	cmp	r3, r6
 800e3d2:	d103      	bne.n	800e3dc <HAL_TIMEx_MasterConfigSynchronization+0x2c>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e3d4:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e3d8:	684e      	ldr	r6, [r1, #4]
 800e3da:	4332      	orrs	r2, r6
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e3dc:	680e      	ldr	r6, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800e3de:	f022 0270 	bic.w	r2, r2, #112	@ 0x70

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e3e2:	42ab      	cmp	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e3e4:	ea42 0206 	orr.w	r2, r2, r6
  htim->Instance->CR2 = tmpcr2;
 800e3e8:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e3ea:	d019      	beq.n	800e420 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800e3ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e3f0:	d016      	beq.n	800e420 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800e3f2:	4a13      	ldr	r2, [pc, #76]	@ (800e440 <HAL_TIMEx_MasterConfigSynchronization+0x90>)
 800e3f4:	4293      	cmp	r3, r2
 800e3f6:	d013      	beq.n	800e420 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800e3f8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800e3fc:	4293      	cmp	r3, r2
 800e3fe:	d00f      	beq.n	800e420 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800e400:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800e404:	4293      	cmp	r3, r2
 800e406:	d00b      	beq.n	800e420 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800e408:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800e40c:	4293      	cmp	r3, r2
 800e40e:	d007      	beq.n	800e420 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800e410:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 800e414:	4293      	cmp	r3, r2
 800e416:	d003      	beq.n	800e420 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800e418:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 800e41c:	4293      	cmp	r3, r2
 800e41e:	d104      	bne.n	800e42a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e420:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e422:	f020 0280 	bic.w	r2, r0, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e426:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e428:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e42a:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 800e42c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800e42e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 800e432:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c

  return HAL_OK;
}
 800e436:	bd70      	pop	{r4, r5, r6, pc}
 800e438:	40010000 	.word	0x40010000
 800e43c:	40010400 	.word	0x40010400
 800e440:	40000400 	.word	0x40000400

0800e444 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800e444:	b510      	push	{r4, lr}
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800e446:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
{
 800e44a:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 800e44c:	2b01      	cmp	r3, #1
 800e44e:	d037      	beq.n	800e4c0 <HAL_TIMEx_ConfigBreakDeadTime+0x7c>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800e450:	68cb      	ldr	r3, [r1, #12]
 800e452:	6888      	ldr	r0, [r1, #8]
 800e454:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800e458:	4c1a      	ldr	r4, [pc, #104]	@ (800e4c4 <HAL_TIMEx_ConfigBreakDeadTime+0x80>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800e45a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800e45c:	6848      	ldr	r0, [r1, #4]
 800e45e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e462:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800e464:	6808      	ldr	r0, [r1, #0]
 800e466:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e46a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800e46c:	6908      	ldr	r0, [r1, #16]
 800e46e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e472:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800e474:	6948      	ldr	r0, [r1, #20]
 800e476:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e47a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800e47c:	6a88      	ldr	r0, [r1, #40]	@ 0x28
 800e47e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e482:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800e484:	6988      	ldr	r0, [r1, #24]
 800e486:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 800e48a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800e48e:	6810      	ldr	r0, [r2, #0]
 800e490:	42a0      	cmp	r0, r4
 800e492:	d003      	beq.n	800e49c <HAL_TIMEx_ConfigBreakDeadTime+0x58>
 800e494:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800e498:	42a0      	cmp	r0, r4
 800e49a:	d10c      	bne.n	800e4b6 <HAL_TIMEx_ConfigBreakDeadTime+0x72>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800e49c:	6a4c      	ldr	r4, [r1, #36]	@ 0x24
 800e49e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800e4a2:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800e4a6:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800e4a8:	6a09      	ldr	r1, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800e4aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800e4ae:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800e4b0:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800e4b4:	430b      	orrs	r3, r1
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800e4b6:	6443      	str	r3, [r0, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800e4b8:	2000      	movs	r0, #0
 800e4ba:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c

  return HAL_OK;
}
 800e4be:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 800e4c0:	2002      	movs	r0, #2
 800e4c2:	e7fc      	b.n	800e4be <HAL_TIMEx_ConfigBreakDeadTime+0x7a>
 800e4c4:	40010000 	.word	0x40010000

0800e4c8 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 800e4c8:	4770      	bx	lr

0800e4ca <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 800e4ca:	4770      	bx	lr

0800e4cc <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 800e4cc:	4770      	bx	lr

0800e4ce <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e4ce:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4d0:	e852 3f00 	ldrex	r3, [r2]
 800e4d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4d8:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 800e4dc:	6802      	ldr	r2, [r0, #0]
 800e4de:	2900      	cmp	r1, #0
 800e4e0:	d1f5      	bne.n	800e4ce <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4e2:	f102 0308 	add.w	r3, r2, #8
 800e4e6:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e4ea:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4ee:	f102 0c08 	add.w	ip, r2, #8
 800e4f2:	e84c 3100 	strex	r1, r3, [ip]
 800e4f6:	2900      	cmp	r1, #0
 800e4f8:	d1f3      	bne.n	800e4e2 <UART_EndRxTransfer+0x14>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e4fa:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 800e4fc:	2b01      	cmp	r3, #1
 800e4fe:	d107      	bne.n	800e510 <UART_EndRxTransfer+0x42>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e500:	e852 3f00 	ldrex	r3, [r2]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e504:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e508:	e842 3100 	strex	r1, r3, [r2]
 800e50c:	2900      	cmp	r1, #0
 800e50e:	d1f7      	bne.n	800e500 <UART_EndRxTransfer+0x32>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e510:	2320      	movs	r3, #32
 800e512:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e516:	2300      	movs	r3, #0
 800e518:	6603      	str	r3, [r0, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e51a:	6683      	str	r3, [r0, #104]	@ 0x68
}
 800e51c:	4770      	bx	lr

0800e51e <HAL_UART_TxCpltCallback>:
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
 800e51e:	4770      	bx	lr

0800e520 <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 800e520:	4770      	bx	lr

0800e522 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e522:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e524:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  huart->RxXferCount = 0U;
 800e526:	2300      	movs	r3, #0
 800e528:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800e52c:	f8a0 3052 	strh.w	r3, [r0, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e530:	f7ff fff6 	bl	800e520 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e534:	bd08      	pop	{r3, pc}

0800e536 <HAL_UARTEx_RxEventCallback>:
}
 800e536:	4770      	bx	lr

0800e538 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e538:	6803      	ldr	r3, [r0, #0]
{
 800e53a:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e53c:	69da      	ldr	r2, [r3, #28]
  if (errorflags == 0U)
 800e53e:	f640 060f 	movw	r6, #2063	@ 0x80f
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e542:	6819      	ldr	r1, [r3, #0]
{
 800e544:	4604      	mov	r4, r0
  if (errorflags == 0U)
 800e546:	4232      	tst	r2, r6
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e548:	689d      	ldr	r5, [r3, #8]
  if (errorflags == 0U)
 800e54a:	d10b      	bne.n	800e564 <HAL_UART_IRQHandler+0x2c>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800e54c:	0696      	lsls	r6, r2, #26
 800e54e:	f140 8088 	bpl.w	800e662 <HAL_UART_IRQHandler+0x12a>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800e552:	068d      	lsls	r5, r1, #26
 800e554:	f140 8085 	bpl.w	800e662 <HAL_UART_IRQHandler+0x12a>
      if (huart->RxISR != NULL)
 800e558:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d07b      	beq.n	800e656 <HAL_UART_IRQHandler+0x11e>
}
 800e55e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 800e562:	4718      	bx	r3
      && (((cr3its & USART_CR3_EIE) != 0U)
 800e564:	f005 0001 	and.w	r0, r5, #1
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800e568:	4d93      	ldr	r5, [pc, #588]	@ (800e7b8 <HAL_UART_IRQHandler+0x280>)
 800e56a:	400d      	ands	r5, r1
 800e56c:	4305      	orrs	r5, r0
 800e56e:	d078      	beq.n	800e662 <HAL_UART_IRQHandler+0x12a>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e570:	07d6      	lsls	r6, r2, #31
 800e572:	d509      	bpl.n	800e588 <HAL_UART_IRQHandler+0x50>
 800e574:	05cd      	lsls	r5, r1, #23
 800e576:	d507      	bpl.n	800e588 <HAL_UART_IRQHandler+0x50>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e578:	2501      	movs	r5, #1
 800e57a:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e57c:	f8d4 5084 	ldr.w	r5, [r4, #132]	@ 0x84
 800e580:	f045 0501 	orr.w	r5, r5, #1
 800e584:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e588:	0796      	lsls	r6, r2, #30
 800e58a:	d508      	bpl.n	800e59e <HAL_UART_IRQHandler+0x66>
 800e58c:	b138      	cbz	r0, 800e59e <HAL_UART_IRQHandler+0x66>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e58e:	2502      	movs	r5, #2
 800e590:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e592:	f8d4 5084 	ldr.w	r5, [r4, #132]	@ 0x84
 800e596:	f045 0504 	orr.w	r5, r5, #4
 800e59a:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e59e:	0755      	lsls	r5, r2, #29
 800e5a0:	d508      	bpl.n	800e5b4 <HAL_UART_IRQHandler+0x7c>
 800e5a2:	b138      	cbz	r0, 800e5b4 <HAL_UART_IRQHandler+0x7c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e5a4:	2504      	movs	r5, #4
 800e5a6:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e5a8:	f8d4 5084 	ldr.w	r5, [r4, #132]	@ 0x84
 800e5ac:	f045 0502 	orr.w	r5, r5, #2
 800e5b0:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e5b4:	0716      	lsls	r6, r2, #28
 800e5b6:	d50b      	bpl.n	800e5d0 <HAL_UART_IRQHandler+0x98>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800e5b8:	f001 0520 	and.w	r5, r1, #32
 800e5bc:	4305      	orrs	r5, r0
 800e5be:	d007      	beq.n	800e5d0 <HAL_UART_IRQHandler+0x98>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e5c0:	2008      	movs	r0, #8
 800e5c2:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e5c4:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 800e5c8:	f040 0008 	orr.w	r0, r0, #8
 800e5cc:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e5d0:	0515      	lsls	r5, r2, #20
 800e5d2:	d50a      	bpl.n	800e5ea <HAL_UART_IRQHandler+0xb2>
 800e5d4:	0148      	lsls	r0, r1, #5
 800e5d6:	d508      	bpl.n	800e5ea <HAL_UART_IRQHandler+0xb2>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e5d8:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800e5dc:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e5de:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800e5e2:	f043 0320 	orr.w	r3, r3, #32
 800e5e6:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e5ea:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d031      	beq.n	800e656 <HAL_UART_IRQHandler+0x11e>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800e5f2:	0692      	lsls	r2, r2, #26
 800e5f4:	d505      	bpl.n	800e602 <HAL_UART_IRQHandler+0xca>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800e5f6:	068b      	lsls	r3, r1, #26
 800e5f8:	d503      	bpl.n	800e602 <HAL_UART_IRQHandler+0xca>
        if (huart->RxISR != NULL)
 800e5fa:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 800e5fc:	b10b      	cbz	r3, 800e602 <HAL_UART_IRQHandler+0xca>
          huart->RxISR(huart);
 800e5fe:	4620      	mov	r0, r4
 800e600:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e602:	6826      	ldr	r6, [r4, #0]
        UART_EndRxTransfer(huart);
 800e604:	4620      	mov	r0, r4
      errorcode = huart->ErrorCode;
 800e606:	f8d4 2084 	ldr.w	r2, [r4, #132]	@ 0x84
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e60a:	68b3      	ldr	r3, [r6, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e60c:	f002 0228 	and.w	r2, r2, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e610:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e614:	ea53 0502 	orrs.w	r5, r3, r2
 800e618:	d01e      	beq.n	800e658 <HAL_UART_IRQHandler+0x120>
        UART_EndRxTransfer(huart);
 800e61a:	f7ff ff58 	bl	800e4ce <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e61e:	68b3      	ldr	r3, [r6, #8]
 800e620:	065e      	lsls	r6, r3, #25
 800e622:	d515      	bpl.n	800e650 <HAL_UART_IRQHandler+0x118>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e624:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e626:	f102 0308 	add.w	r3, r2, #8
 800e62a:	e853 3f00 	ldrex	r3, [r3]
 800e62e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e632:	3208      	adds	r2, #8
 800e634:	e842 3100 	strex	r1, r3, [r2]
 800e638:	2900      	cmp	r1, #0
 800e63a:	d1f3      	bne.n	800e624 <HAL_UART_IRQHandler+0xec>
          if (huart->hdmarx != NULL)
 800e63c:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800e63e:	b138      	cbz	r0, 800e650 <HAL_UART_IRQHandler+0x118>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e640:	4b5e      	ldr	r3, [pc, #376]	@ (800e7bc <HAL_UART_IRQHandler+0x284>)
 800e642:	6503      	str	r3, [r0, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e644:	f7fb fc8b 	bl	8009f5e <HAL_DMA_Abort_IT>
 800e648:	b128      	cbz	r0, 800e656 <HAL_UART_IRQHandler+0x11e>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e64a:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800e64c:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800e64e:	e786      	b.n	800e55e <HAL_UART_IRQHandler+0x26>
            HAL_UART_ErrorCallback(huart);
 800e650:	4620      	mov	r0, r4
 800e652:	f7ff ff65 	bl	800e520 <HAL_UART_ErrorCallback>
}
 800e656:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 800e658:	f7ff ff62 	bl	800e520 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e65c:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
 800e660:	e7f9      	b.n	800e656 <HAL_UART_IRQHandler+0x11e>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e662:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 800e664:	2801      	cmp	r0, #1
 800e666:	f040 8088 	bne.w	800e77a <HAL_UART_IRQHandler+0x242>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e66a:	06d5      	lsls	r5, r2, #27
 800e66c:	f140 8085 	bpl.w	800e77a <HAL_UART_IRQHandler+0x242>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e670:	06c8      	lsls	r0, r1, #27
 800e672:	f140 8082 	bpl.w	800e77a <HAL_UART_IRQHandler+0x242>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e676:	2210      	movs	r2, #16
 800e678:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e67a:	689a      	ldr	r2, [r3, #8]
 800e67c:	0652      	lsls	r2, r2, #25
 800e67e:	d54a      	bpl.n	800e716 <HAL_UART_IRQHandler+0x1de>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e680:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 800e682:	680a      	ldr	r2, [r1, #0]
 800e684:	6852      	ldr	r2, [r2, #4]
 800e686:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 800e688:	2a00      	cmp	r2, #0
 800e68a:	d0e4      	beq.n	800e656 <HAL_UART_IRQHandler+0x11e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e68c:	f8b4 0058 	ldrh.w	r0, [r4, #88]	@ 0x58
 800e690:	4290      	cmp	r0, r2
 800e692:	d9e0      	bls.n	800e656 <HAL_UART_IRQHandler+0x11e>
        huart->RxXferCount = nb_remaining_rx_data;
 800e694:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e698:	69ca      	ldr	r2, [r1, #28]
 800e69a:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 800e69e:	d02e      	beq.n	800e6fe <HAL_UART_IRQHandler+0x1c6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6a0:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e6a4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6a8:	e843 2100 	strex	r1, r2, [r3]
 800e6ac:	2900      	cmp	r1, #0
 800e6ae:	d1f7      	bne.n	800e6a0 <HAL_UART_IRQHandler+0x168>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6b0:	f103 0208 	add.w	r2, r3, #8
 800e6b4:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e6b8:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6bc:	f103 0008 	add.w	r0, r3, #8
 800e6c0:	e840 2100 	strex	r1, r2, [r0]
 800e6c4:	2900      	cmp	r1, #0
 800e6c6:	d1f3      	bne.n	800e6b0 <HAL_UART_IRQHandler+0x178>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6c8:	f103 0208 	add.w	r2, r3, #8
 800e6cc:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e6d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6d4:	f103 0008 	add.w	r0, r3, #8
 800e6d8:	e840 2100 	strex	r1, r2, [r0]
 800e6dc:	2900      	cmp	r1, #0
 800e6de:	d1f3      	bne.n	800e6c8 <HAL_UART_IRQHandler+0x190>
          huart->RxState = HAL_UART_STATE_READY;
 800e6e0:	2220      	movs	r2, #32
 800e6e2:	f8c4 2080 	str.w	r2, [r4, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e6e6:	6621      	str	r1, [r4, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6e8:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e6ec:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6f0:	e843 2100 	strex	r1, r2, [r3]
 800e6f4:	2900      	cmp	r1, #0
 800e6f6:	d1f7      	bne.n	800e6e8 <HAL_UART_IRQHandler+0x1b0>
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e6f8:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800e6fa:	f7fb fbf2 	bl	8009ee2 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e6fe:	2302      	movs	r3, #2
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e700:	f8b4 1058 	ldrh.w	r1, [r4, #88]	@ 0x58
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e704:	6663      	str	r3, [r4, #100]	@ 0x64
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e706:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 800e70a:	1ac9      	subs	r1, r1, r3
 800e70c:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e70e:	4620      	mov	r0, r4
 800e710:	f7ff ff11 	bl	800e536 <HAL_UARTEx_RxEventCallback>
 800e714:	e79f      	b.n	800e656 <HAL_UART_IRQHandler+0x11e>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e716:	f8b4 205a 	ldrh.w	r2, [r4, #90]	@ 0x5a
      if ((huart->RxXferCount > 0U)
 800e71a:	f8b4 005a 	ldrh.w	r0, [r4, #90]	@ 0x5a
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e71e:	f8b4 1058 	ldrh.w	r1, [r4, #88]	@ 0x58
 800e722:	b292      	uxth	r2, r2
      if ((huart->RxXferCount > 0U)
 800e724:	b280      	uxth	r0, r0
 800e726:	2800      	cmp	r0, #0
 800e728:	d095      	beq.n	800e656 <HAL_UART_IRQHandler+0x11e>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e72a:	1a89      	subs	r1, r1, r2
 800e72c:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 800e72e:	2900      	cmp	r1, #0
 800e730:	d091      	beq.n	800e656 <HAL_UART_IRQHandler+0x11e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e732:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e736:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e73a:	e843 2000 	strex	r0, r2, [r3]
 800e73e:	2800      	cmp	r0, #0
 800e740:	d1f7      	bne.n	800e732 <HAL_UART_IRQHandler+0x1fa>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e742:	f103 0208 	add.w	r2, r3, #8
 800e746:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e74a:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e74e:	f103 0508 	add.w	r5, r3, #8
 800e752:	e845 2000 	strex	r0, r2, [r5]
 800e756:	2800      	cmp	r0, #0
 800e758:	d1f3      	bne.n	800e742 <HAL_UART_IRQHandler+0x20a>
        huart->RxState = HAL_UART_STATE_READY;
 800e75a:	2220      	movs	r2, #32
        huart->RxISR = NULL;
 800e75c:	66a0      	str	r0, [r4, #104]	@ 0x68
        huart->RxState = HAL_UART_STATE_READY;
 800e75e:	f8c4 2080 	str.w	r2, [r4, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e762:	6620      	str	r0, [r4, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e764:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e768:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e76c:	e843 2000 	strex	r0, r2, [r3]
 800e770:	2800      	cmp	r0, #0
 800e772:	d1f7      	bne.n	800e764 <HAL_UART_IRQHandler+0x22c>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e774:	2302      	movs	r3, #2
 800e776:	6663      	str	r3, [r4, #100]	@ 0x64
 800e778:	e7c9      	b.n	800e70e <HAL_UART_IRQHandler+0x1d6>
  if (((isrflags & USART_ISR_TXE) != 0U)
 800e77a:	0616      	lsls	r6, r2, #24
 800e77c:	d507      	bpl.n	800e78e <HAL_UART_IRQHandler+0x256>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800e77e:	060d      	lsls	r5, r1, #24
 800e780:	d505      	bpl.n	800e78e <HAL_UART_IRQHandler+0x256>
    if (huart->TxISR != NULL)
 800e782:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800e784:	2b00      	cmp	r3, #0
 800e786:	f43f af66 	beq.w	800e656 <HAL_UART_IRQHandler+0x11e>
      huart->TxISR(huart);
 800e78a:	4620      	mov	r0, r4
 800e78c:	e6e7      	b.n	800e55e <HAL_UART_IRQHandler+0x26>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e78e:	0650      	lsls	r0, r2, #25
 800e790:	f57f af61 	bpl.w	800e656 <HAL_UART_IRQHandler+0x11e>
 800e794:	064a      	lsls	r2, r1, #25
 800e796:	f57f af5e 	bpl.w	800e656 <HAL_UART_IRQHandler+0x11e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e79a:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e79e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7a2:	e843 2100 	strex	r1, r2, [r3]
 800e7a6:	2900      	cmp	r1, #0
 800e7a8:	d1f7      	bne.n	800e79a <HAL_UART_IRQHandler+0x262>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e7aa:	2320      	movs	r3, #32
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e7ac:	4620      	mov	r0, r4
  huart->TxISR = NULL;
 800e7ae:	66e1      	str	r1, [r4, #108]	@ 0x6c
  huart->gState = HAL_UART_STATE_READY;
 800e7b0:	67e3      	str	r3, [r4, #124]	@ 0x7c
  HAL_UART_TxCpltCallback(huart);
 800e7b2:	f7ff feb4 	bl	800e51e <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e7b6:	e74e      	b.n	800e656 <HAL_UART_IRQHandler+0x11e>
 800e7b8:	04000120 	.word	0x04000120
 800e7bc:	0800e523 	.word	0x0800e523

0800e7c0 <UART_SetConfig>:
{
 800e7c0:	b538      	push	{r3, r4, r5, lr}
 800e7c2:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e7c4:	69c0      	ldr	r0, [r0, #28]
 800e7c6:	6921      	ldr	r1, [r4, #16]
 800e7c8:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e7ca:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e7cc:	430a      	orrs	r2, r1
 800e7ce:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e7d0:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e7d2:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e7d4:	497d      	ldr	r1, [pc, #500]	@ (800e9cc <UART_SetConfig+0x20c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e7d6:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e7d8:	4029      	ands	r1, r5
  tmpreg |= huart->Init.OneBitSampling;
 800e7da:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e7dc:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e7de:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e7e0:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e7e2:	685a      	ldr	r2, [r3, #4]
 800e7e4:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 800e7e8:	430a      	orrs	r2, r1
 800e7ea:	605a      	str	r2, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e7ec:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e7ee:	6899      	ldr	r1, [r3, #8]
  tmpreg |= huart->Init.OneBitSampling;
 800e7f0:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e7f2:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800e7f6:	430a      	orrs	r2, r1
 800e7f8:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e7fa:	4a75      	ldr	r2, [pc, #468]	@ (800e9d0 <UART_SetConfig+0x210>)
 800e7fc:	4293      	cmp	r3, r2
 800e7fe:	d113      	bne.n	800e828 <UART_SetConfig+0x68>
 800e800:	4b74      	ldr	r3, [pc, #464]	@ (800e9d4 <UART_SetConfig+0x214>)
 800e802:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e806:	f003 0303 	and.w	r3, r3, #3
 800e80a:	2b02      	cmp	r3, #2
 800e80c:	f000 80a8 	beq.w	800e960 <UART_SetConfig+0x1a0>
 800e810:	2b03      	cmp	r3, #3
 800e812:	d021      	beq.n	800e858 <UART_SetConfig+0x98>
 800e814:	2b01      	cmp	r3, #1
 800e816:	f040 80bd 	bne.w	800e994 <UART_SetConfig+0x1d4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e81a:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800e81e:	f040 809c 	bne.w	800e95a <UART_SetConfig+0x19a>
        pclk = HAL_RCC_GetSysClockFreq();
 800e822:	f7fe fcc9 	bl	800d1b8 <HAL_RCC_GetSysClockFreq>
        break;
 800e826:	e092      	b.n	800e94e <UART_SetConfig+0x18e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e828:	4a6b      	ldr	r2, [pc, #428]	@ (800e9d8 <UART_SetConfig+0x218>)
 800e82a:	4293      	cmp	r3, r2
 800e82c:	d11b      	bne.n	800e866 <UART_SetConfig+0xa6>
 800e82e:	4b69      	ldr	r3, [pc, #420]	@ (800e9d4 <UART_SetConfig+0x214>)
 800e830:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e834:	f003 030c 	and.w	r3, r3, #12
 800e838:	2b08      	cmp	r3, #8
 800e83a:	f000 8091 	beq.w	800e960 <UART_SetConfig+0x1a0>
 800e83e:	d809      	bhi.n	800e854 <UART_SetConfig+0x94>
 800e840:	2b00      	cmp	r3, #0
 800e842:	f000 80ad 	beq.w	800e9a0 <UART_SetConfig+0x1e0>
 800e846:	2b04      	cmp	r3, #4
 800e848:	d0e7      	beq.n	800e81a <UART_SetConfig+0x5a>
        ret = HAL_ERROR;
 800e84a:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 800e84c:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 800e84e:	e9c4 331a 	strd	r3, r3, [r4, #104]	@ 0x68
}
 800e852:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e854:	2b0c      	cmp	r3, #12
 800e856:	d1f8      	bne.n	800e84a <UART_SetConfig+0x8a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e858:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800e85c:	f000 8084 	beq.w	800e968 <UART_SetConfig+0x1a8>
        pclk = (uint32_t) LSE_VALUE;
 800e860:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800e864:	e0a3      	b.n	800e9ae <UART_SetConfig+0x1ee>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e866:	4a5d      	ldr	r2, [pc, #372]	@ (800e9dc <UART_SetConfig+0x21c>)
 800e868:	4293      	cmp	r3, r2
 800e86a:	d10e      	bne.n	800e88a <UART_SetConfig+0xca>
 800e86c:	4b59      	ldr	r3, [pc, #356]	@ (800e9d4 <UART_SetConfig+0x214>)
 800e86e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e872:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800e876:	2b20      	cmp	r3, #32
 800e878:	d072      	beq.n	800e960 <UART_SetConfig+0x1a0>
 800e87a:	d804      	bhi.n	800e886 <UART_SetConfig+0xc6>
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	f000 808f 	beq.w	800e9a0 <UART_SetConfig+0x1e0>
 800e882:	2b10      	cmp	r3, #16
 800e884:	e7e0      	b.n	800e848 <UART_SetConfig+0x88>
 800e886:	2b30      	cmp	r3, #48	@ 0x30
 800e888:	e7e5      	b.n	800e856 <UART_SetConfig+0x96>
 800e88a:	4a55      	ldr	r2, [pc, #340]	@ (800e9e0 <UART_SetConfig+0x220>)
 800e88c:	4293      	cmp	r3, r2
 800e88e:	d10d      	bne.n	800e8ac <UART_SetConfig+0xec>
 800e890:	4b50      	ldr	r3, [pc, #320]	@ (800e9d4 <UART_SetConfig+0x214>)
 800e892:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e896:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800e89a:	2b80      	cmp	r3, #128	@ 0x80
 800e89c:	d060      	beq.n	800e960 <UART_SetConfig+0x1a0>
 800e89e:	d803      	bhi.n	800e8a8 <UART_SetConfig+0xe8>
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d07d      	beq.n	800e9a0 <UART_SetConfig+0x1e0>
 800e8a4:	2b40      	cmp	r3, #64	@ 0x40
 800e8a6:	e7cf      	b.n	800e848 <UART_SetConfig+0x88>
 800e8a8:	2bc0      	cmp	r3, #192	@ 0xc0
 800e8aa:	e7d4      	b.n	800e856 <UART_SetConfig+0x96>
 800e8ac:	4a4d      	ldr	r2, [pc, #308]	@ (800e9e4 <UART_SetConfig+0x224>)
 800e8ae:	4293      	cmp	r3, r2
 800e8b0:	d110      	bne.n	800e8d4 <UART_SetConfig+0x114>
 800e8b2:	4b48      	ldr	r3, [pc, #288]	@ (800e9d4 <UART_SetConfig+0x214>)
 800e8b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e8b8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e8bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e8c0:	d04e      	beq.n	800e960 <UART_SetConfig+0x1a0>
 800e8c2:	d804      	bhi.n	800e8ce <UART_SetConfig+0x10e>
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d06b      	beq.n	800e9a0 <UART_SetConfig+0x1e0>
 800e8c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e8cc:	e7bc      	b.n	800e848 <UART_SetConfig+0x88>
 800e8ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e8d2:	e7c0      	b.n	800e856 <UART_SetConfig+0x96>
 800e8d4:	4a44      	ldr	r2, [pc, #272]	@ (800e9e8 <UART_SetConfig+0x228>)
 800e8d6:	4293      	cmp	r3, r2
 800e8d8:	d110      	bne.n	800e8fc <UART_SetConfig+0x13c>
 800e8da:	4b3e      	ldr	r3, [pc, #248]	@ (800e9d4 <UART_SetConfig+0x214>)
 800e8dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e8e0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800e8e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e8e8:	d03a      	beq.n	800e960 <UART_SetConfig+0x1a0>
 800e8ea:	d804      	bhi.n	800e8f6 <UART_SetConfig+0x136>
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d051      	beq.n	800e994 <UART_SetConfig+0x1d4>
 800e8f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e8f4:	e7a8      	b.n	800e848 <UART_SetConfig+0x88>
 800e8f6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800e8fa:	e7ac      	b.n	800e856 <UART_SetConfig+0x96>
 800e8fc:	4a3b      	ldr	r2, [pc, #236]	@ (800e9ec <UART_SetConfig+0x22c>)
 800e8fe:	4293      	cmp	r3, r2
 800e900:	d110      	bne.n	800e924 <UART_SetConfig+0x164>
 800e902:	4b34      	ldr	r3, [pc, #208]	@ (800e9d4 <UART_SetConfig+0x214>)
 800e904:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e908:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800e90c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e910:	d026      	beq.n	800e960 <UART_SetConfig+0x1a0>
 800e912:	d804      	bhi.n	800e91e <UART_SetConfig+0x15e>
 800e914:	2b00      	cmp	r3, #0
 800e916:	d043      	beq.n	800e9a0 <UART_SetConfig+0x1e0>
 800e918:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e91c:	e794      	b.n	800e848 <UART_SetConfig+0x88>
 800e91e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800e922:	e798      	b.n	800e856 <UART_SetConfig+0x96>
 800e924:	4a32      	ldr	r2, [pc, #200]	@ (800e9f0 <UART_SetConfig+0x230>)
 800e926:	4293      	cmp	r3, r2
 800e928:	d18f      	bne.n	800e84a <UART_SetConfig+0x8a>
 800e92a:	4b2a      	ldr	r3, [pc, #168]	@ (800e9d4 <UART_SetConfig+0x214>)
 800e92c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e930:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800e934:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e938:	d012      	beq.n	800e960 <UART_SetConfig+0x1a0>
 800e93a:	d803      	bhi.n	800e944 <UART_SetConfig+0x184>
 800e93c:	b383      	cbz	r3, 800e9a0 <UART_SetConfig+0x1e0>
 800e93e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e942:	e781      	b.n	800e848 <UART_SetConfig+0x88>
 800e944:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800e948:	e785      	b.n	800e856 <UART_SetConfig+0x96>
        pclk = HAL_RCC_GetPCLK1Freq();
 800e94a:	f7fe fd01 	bl	800d350 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800e94e:	b958      	cbnz	r0, 800e968 <UART_SetConfig+0x1a8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e950:	2000      	movs	r0, #0
 800e952:	e77b      	b.n	800e84c <UART_SetConfig+0x8c>
        pclk = HAL_RCC_GetPCLK2Freq();
 800e954:	f7fe fd0c 	bl	800d370 <HAL_RCC_GetPCLK2Freq>
        break;
 800e958:	e027      	b.n	800e9aa <UART_SetConfig+0x1ea>
        pclk = HAL_RCC_GetSysClockFreq();
 800e95a:	f7fe fc2d 	bl	800d1b8 <HAL_RCC_GetSysClockFreq>
        break;
 800e95e:	e024      	b.n	800e9aa <UART_SetConfig+0x1ea>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e960:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
        pclk = (uint32_t) HSI_VALUE;
 800e964:	4823      	ldr	r0, [pc, #140]	@ (800e9f4 <UART_SetConfig+0x234>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e966:	d122      	bne.n	800e9ae <UART_SetConfig+0x1ee>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800e968:	6862      	ldr	r2, [r4, #4]
 800e96a:	0853      	lsrs	r3, r2, #1
 800e96c:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800e970:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e974:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 800e978:	f1a3 0110 	sub.w	r1, r3, #16
 800e97c:	4291      	cmp	r1, r2
 800e97e:	f63f af64 	bhi.w	800e84a <UART_SetConfig+0x8a>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e982:	f023 020f 	bic.w	r2, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e986:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 800e98a:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e98c:	b292      	uxth	r2, r2
        huart->Instance->BRR = brrtemp;
 800e98e:	4313      	orrs	r3, r2
 800e990:	60cb      	str	r3, [r1, #12]
 800e992:	e7dd      	b.n	800e950 <UART_SetConfig+0x190>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e994:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800e998:	d1dc      	bne.n	800e954 <UART_SetConfig+0x194>
        pclk = HAL_RCC_GetPCLK2Freq();
 800e99a:	f7fe fce9 	bl	800d370 <HAL_RCC_GetPCLK2Freq>
        break;
 800e99e:	e7d6      	b.n	800e94e <UART_SetConfig+0x18e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e9a0:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800e9a4:	d0d1      	beq.n	800e94a <UART_SetConfig+0x18a>
        pclk = HAL_RCC_GetPCLK1Freq();
 800e9a6:	f7fe fcd3 	bl	800d350 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800e9aa:	2800      	cmp	r0, #0
 800e9ac:	d0d0      	beq.n	800e950 <UART_SetConfig+0x190>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800e9ae:	6862      	ldr	r2, [r4, #4]
 800e9b0:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 800e9b4:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e9b8:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 800e9bc:	f1a3 0110 	sub.w	r1, r3, #16
 800e9c0:	4291      	cmp	r1, r2
 800e9c2:	f63f af42 	bhi.w	800e84a <UART_SetConfig+0x8a>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e9c6:	6822      	ldr	r2, [r4, #0]
 800e9c8:	60d3      	str	r3, [r2, #12]
 800e9ca:	e7c1      	b.n	800e950 <UART_SetConfig+0x190>
 800e9cc:	efff69f3 	.word	0xefff69f3
 800e9d0:	40011000 	.word	0x40011000
 800e9d4:	40023800 	.word	0x40023800
 800e9d8:	40004400 	.word	0x40004400
 800e9dc:	40004800 	.word	0x40004800
 800e9e0:	40004c00 	.word	0x40004c00
 800e9e4:	40005000 	.word	0x40005000
 800e9e8:	40011400 	.word	0x40011400
 800e9ec:	40007800 	.word	0x40007800
 800e9f0:	40007c00 	.word	0x40007c00
 800e9f4:	00f42400 	.word	0x00f42400

0800e9f8 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e9f8:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800e9fa:	07da      	lsls	r2, r3, #31
{
 800e9fc:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e9fe:	d506      	bpl.n	800ea0e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ea00:	6801      	ldr	r1, [r0, #0]
 800ea02:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800ea04:	684a      	ldr	r2, [r1, #4]
 800ea06:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800ea0a:	4322      	orrs	r2, r4
 800ea0c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ea0e:	079c      	lsls	r4, r3, #30
 800ea10:	d506      	bpl.n	800ea20 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ea12:	6801      	ldr	r1, [r0, #0]
 800ea14:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 800ea16:	684a      	ldr	r2, [r1, #4]
 800ea18:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800ea1c:	4322      	orrs	r2, r4
 800ea1e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ea20:	0759      	lsls	r1, r3, #29
 800ea22:	d506      	bpl.n	800ea32 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ea24:	6801      	ldr	r1, [r0, #0]
 800ea26:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 800ea28:	684a      	ldr	r2, [r1, #4]
 800ea2a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800ea2e:	4322      	orrs	r2, r4
 800ea30:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ea32:	071a      	lsls	r2, r3, #28
 800ea34:	d506      	bpl.n	800ea44 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ea36:	6801      	ldr	r1, [r0, #0]
 800ea38:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 800ea3a:	684a      	ldr	r2, [r1, #4]
 800ea3c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800ea40:	4322      	orrs	r2, r4
 800ea42:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ea44:	06dc      	lsls	r4, r3, #27
 800ea46:	d506      	bpl.n	800ea56 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ea48:	6801      	ldr	r1, [r0, #0]
 800ea4a:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 800ea4c:	688a      	ldr	r2, [r1, #8]
 800ea4e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800ea52:	4322      	orrs	r2, r4
 800ea54:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ea56:	0699      	lsls	r1, r3, #26
 800ea58:	d506      	bpl.n	800ea68 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ea5a:	6801      	ldr	r1, [r0, #0]
 800ea5c:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 800ea5e:	688a      	ldr	r2, [r1, #8]
 800ea60:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800ea64:	4322      	orrs	r2, r4
 800ea66:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ea68:	065a      	lsls	r2, r3, #25
 800ea6a:	d510      	bpl.n	800ea8e <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ea6c:	6801      	ldr	r1, [r0, #0]
 800ea6e:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 800ea70:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ea72:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ea76:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 800ea7a:	ea42 0204 	orr.w	r2, r2, r4
 800ea7e:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ea80:	d105      	bne.n	800ea8e <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ea82:	684a      	ldr	r2, [r1, #4]
 800ea84:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 800ea86:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 800ea8a:	4322      	orrs	r2, r4
 800ea8c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ea8e:	061b      	lsls	r3, r3, #24
 800ea90:	d506      	bpl.n	800eaa0 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ea92:	6802      	ldr	r2, [r0, #0]
 800ea94:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 800ea96:	6853      	ldr	r3, [r2, #4]
 800ea98:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 800ea9c:	430b      	orrs	r3, r1
 800ea9e:	6053      	str	r3, [r2, #4]
}
 800eaa0:	bd10      	pop	{r4, pc}

0800eaa2 <UART_WaitOnFlagUntilTimeout>:
{
 800eaa2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eaa6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800eaaa:	4605      	mov	r5, r0
 800eaac:	460f      	mov	r7, r1
 800eaae:	4616      	mov	r6, r2
 800eab0:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800eab2:	682a      	ldr	r2, [r5, #0]
 800eab4:	69d3      	ldr	r3, [r2, #28]
 800eab6:	ea37 0303 	bics.w	r3, r7, r3
 800eaba:	bf0c      	ite	eq
 800eabc:	2301      	moveq	r3, #1
 800eabe:	2300      	movne	r3, #0
 800eac0:	42b3      	cmp	r3, r6
 800eac2:	d001      	beq.n	800eac8 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 800eac4:	2000      	movs	r0, #0
 800eac6:	e028      	b.n	800eb1a <UART_WaitOnFlagUntilTimeout+0x78>
    if (Timeout != HAL_MAX_DELAY)
 800eac8:	f1b9 3fff 	cmp.w	r9, #4294967295
 800eacc:	d0f2      	beq.n	800eab4 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800eace:	f7fa fec7 	bl	8009860 <HAL_GetTick>
 800ead2:	eba0 0008 	sub.w	r0, r0, r8
 800ead6:	682c      	ldr	r4, [r5, #0]
 800ead8:	4548      	cmp	r0, r9
 800eada:	d802      	bhi.n	800eae2 <UART_WaitOnFlagUntilTimeout+0x40>
 800eadc:	f1b9 0f00 	cmp.w	r9, #0
 800eae0:	d11d      	bne.n	800eb1e <UART_WaitOnFlagUntilTimeout+0x7c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eae2:	e854 3f00 	ldrex	r3, [r4]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800eae6:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eaea:	e844 3200 	strex	r2, r3, [r4]
 800eaee:	2a00      	cmp	r2, #0
 800eaf0:	d1f7      	bne.n	800eae2 <UART_WaitOnFlagUntilTimeout+0x40>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eaf2:	f104 0308 	add.w	r3, r4, #8
 800eaf6:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eafa:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eafe:	f104 0108 	add.w	r1, r4, #8
 800eb02:	e841 3200 	strex	r2, r3, [r1]
 800eb06:	2a00      	cmp	r2, #0
 800eb08:	d1f3      	bne.n	800eaf2 <UART_WaitOnFlagUntilTimeout+0x50>
        huart->gState = HAL_UART_STATE_READY;
 800eb0a:	2320      	movs	r3, #32
 800eb0c:	67eb      	str	r3, [r5, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800eb0e:	f8c5 3080 	str.w	r3, [r5, #128]	@ 0x80
          __HAL_UNLOCK(huart);
 800eb12:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 800eb14:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 800eb16:	f885 3078 	strb.w	r3, [r5, #120]	@ 0x78
}
 800eb1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800eb1e:	6823      	ldr	r3, [r4, #0]
 800eb20:	075a      	lsls	r2, r3, #29
 800eb22:	d5c6      	bpl.n	800eab2 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800eb24:	69e3      	ldr	r3, [r4, #28]
 800eb26:	051b      	lsls	r3, r3, #20
 800eb28:	d5c3      	bpl.n	800eab2 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800eb2a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800eb2e:	6223      	str	r3, [r4, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb30:	e854 3f00 	ldrex	r3, [r4]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800eb34:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb38:	e844 3200 	strex	r2, r3, [r4]
 800eb3c:	2a00      	cmp	r2, #0
 800eb3e:	d1f7      	bne.n	800eb30 <UART_WaitOnFlagUntilTimeout+0x8e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb40:	f104 0308 	add.w	r3, r4, #8
 800eb44:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eb48:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb4c:	f104 0108 	add.w	r1, r4, #8
 800eb50:	e841 3200 	strex	r2, r3, [r1]
 800eb54:	2a00      	cmp	r2, #0
 800eb56:	d1f3      	bne.n	800eb40 <UART_WaitOnFlagUntilTimeout+0x9e>
          huart->gState = HAL_UART_STATE_READY;
 800eb58:	2320      	movs	r3, #32
 800eb5a:	67eb      	str	r3, [r5, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800eb5c:	f8c5 3080 	str.w	r3, [r5, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800eb60:	f8c5 3084 	str.w	r3, [r5, #132]	@ 0x84
          return HAL_TIMEOUT;
 800eb64:	e7d5      	b.n	800eb12 <UART_WaitOnFlagUntilTimeout+0x70>

0800eb66 <HAL_UART_Transmit>:
{
 800eb66:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800eb6a:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800eb6c:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
{
 800eb6e:	4604      	mov	r4, r0
 800eb70:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 800eb72:	2b20      	cmp	r3, #32
{
 800eb74:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800eb76:	d141      	bne.n	800ebfc <HAL_UART_Transmit+0x96>
    if ((pData == NULL) || (Size == 0U))
 800eb78:	2900      	cmp	r1, #0
 800eb7a:	d041      	beq.n	800ec00 <HAL_UART_Transmit+0x9a>
 800eb7c:	2a00      	cmp	r2, #0
 800eb7e:	d03f      	beq.n	800ec00 <HAL_UART_Transmit+0x9a>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800eb80:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eb82:	2500      	movs	r5, #0
 800eb84:	f8c0 5084 	str.w	r5, [r0, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800eb88:	67c3      	str	r3, [r0, #124]	@ 0x7c
    tickstart = HAL_GetTick();
 800eb8a:	f7fa fe69 	bl	8009860 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800eb8e:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 800eb90:	4681      	mov	r9, r0
    huart->TxXferSize  = Size;
 800eb92:	f8a4 7050 	strh.w	r7, [r4, #80]	@ 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800eb96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    huart->TxXferCount = Size;
 800eb9a:	f8a4 7052 	strh.w	r7, [r4, #82]	@ 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800eb9e:	d103      	bne.n	800eba8 <HAL_UART_Transmit+0x42>
 800eba0:	6923      	ldr	r3, [r4, #16]
 800eba2:	b90b      	cbnz	r3, 800eba8 <HAL_UART_Transmit+0x42>
 800eba4:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 800eba6:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 800eba8:	f8b4 2052 	ldrh.w	r2, [r4, #82]	@ 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ebac:	464b      	mov	r3, r9
 800ebae:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 800ebb2:	b292      	uxth	r2, r2
 800ebb4:	b93a      	cbnz	r2, 800ebc6 <HAL_UART_Transmit+0x60>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ebb6:	2140      	movs	r1, #64	@ 0x40
 800ebb8:	4620      	mov	r0, r4
 800ebba:	f7ff ff72 	bl	800eaa2 <UART_WaitOnFlagUntilTimeout>
 800ebbe:	b940      	cbnz	r0, 800ebd2 <HAL_UART_Transmit+0x6c>
    huart->gState = HAL_UART_STATE_READY;
 800ebc0:	2320      	movs	r3, #32
 800ebc2:	67e3      	str	r3, [r4, #124]	@ 0x7c
    return HAL_OK;
 800ebc4:	e006      	b.n	800ebd4 <HAL_UART_Transmit+0x6e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ebc6:	2200      	movs	r2, #0
 800ebc8:	2180      	movs	r1, #128	@ 0x80
 800ebca:	4620      	mov	r0, r4
 800ebcc:	f7ff ff69 	bl	800eaa2 <UART_WaitOnFlagUntilTimeout>
 800ebd0:	b118      	cbz	r0, 800ebda <HAL_UART_Transmit+0x74>
        return HAL_TIMEOUT;
 800ebd2:	2003      	movs	r0, #3
}
 800ebd4:	b003      	add	sp, #12
 800ebd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ebda:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 800ebdc:	b95e      	cbnz	r6, 800ebf6 <HAL_UART_Transmit+0x90>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ebde:	f835 3b02 	ldrh.w	r3, [r5], #2
 800ebe2:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ebe6:	6293      	str	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 800ebe8:	f8b4 2052 	ldrh.w	r2, [r4, #82]	@ 0x52
 800ebec:	3a01      	subs	r2, #1
 800ebee:	b292      	uxth	r2, r2
 800ebf0:	f8a4 2052 	strh.w	r2, [r4, #82]	@ 0x52
 800ebf4:	e7d8      	b.n	800eba8 <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ebf6:	f816 3b01 	ldrb.w	r3, [r6], #1
 800ebfa:	e7f4      	b.n	800ebe6 <HAL_UART_Transmit+0x80>
    return HAL_BUSY;
 800ebfc:	2002      	movs	r0, #2
 800ebfe:	e7e9      	b.n	800ebd4 <HAL_UART_Transmit+0x6e>
      return  HAL_ERROR;
 800ec00:	2001      	movs	r0, #1
 800ec02:	e7e7      	b.n	800ebd4 <HAL_UART_Transmit+0x6e>

0800ec04 <UART_CheckIdleState>:
{
 800ec04:	b537      	push	{r0, r1, r2, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ec06:	2500      	movs	r5, #0
{
 800ec08:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ec0a:	f8c0 5084 	str.w	r5, [r0, #132]	@ 0x84
  tickstart = HAL_GetTick();
 800ec0e:	f7fa fe27 	bl	8009860 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ec12:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 800ec14:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ec16:	6812      	ldr	r2, [r2, #0]
 800ec18:	0712      	lsls	r2, r2, #28
 800ec1a:	d40a      	bmi.n	800ec32 <UART_CheckIdleState+0x2e>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ec1c:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800ec1e:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800ec20:	f884 0078 	strb.w	r0, [r4, #120]	@ 0x78
  huart->gState = HAL_UART_STATE_READY;
 800ec24:	67e3      	str	r3, [r4, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800ec26:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ec2a:	6620      	str	r0, [r4, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ec2c:	6660      	str	r0, [r4, #100]	@ 0x64
}
 800ec2e:	b003      	add	sp, #12
 800ec30:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ec32:	f06f 427e 	mvn.w	r2, #4261412864	@ 0xfe000000
 800ec36:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800ec3a:	4620      	mov	r0, r4
 800ec3c:	9200      	str	r2, [sp, #0]
 800ec3e:	462a      	mov	r2, r5
 800ec40:	f7ff ff2f 	bl	800eaa2 <UART_WaitOnFlagUntilTimeout>
 800ec44:	2800      	cmp	r0, #0
 800ec46:	d0e9      	beq.n	800ec1c <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 800ec48:	2003      	movs	r0, #3
 800ec4a:	e7f0      	b.n	800ec2e <UART_CheckIdleState+0x2a>

0800ec4c <HAL_UART_Init>:
{
 800ec4c:	b510      	push	{r4, lr}
  if (huart == NULL)
 800ec4e:	4604      	mov	r4, r0
 800ec50:	b340      	cbz	r0, 800eca4 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800ec52:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 800ec54:	b91b      	cbnz	r3, 800ec5e <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 800ec56:	f880 3078 	strb.w	r3, [r0, #120]	@ 0x78
    HAL_UART_MspInit(huart);
 800ec5a:	f7f4 f8a1 	bl	8002da0 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800ec5e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800ec60:	2324      	movs	r3, #36	@ 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ec62:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 800ec64:	67e3      	str	r3, [r4, #124]	@ 0x7c
  __HAL_UART_DISABLE(huart);
 800ec66:	6813      	ldr	r3, [r2, #0]
 800ec68:	f023 0301 	bic.w	r3, r3, #1
 800ec6c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ec6e:	f7ff fda7 	bl	800e7c0 <UART_SetConfig>
 800ec72:	2801      	cmp	r0, #1
 800ec74:	d016      	beq.n	800eca4 <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ec76:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800ec78:	b113      	cbz	r3, 800ec80 <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 800ec7a:	4620      	mov	r0, r4
 800ec7c:	f7ff febc 	bl	800e9f8 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ec80:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 800ec82:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ec84:	685a      	ldr	r2, [r3, #4]
 800ec86:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ec8a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ec8c:	689a      	ldr	r2, [r3, #8]
 800ec8e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ec92:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800ec94:	681a      	ldr	r2, [r3, #0]
 800ec96:	f042 0201 	orr.w	r2, r2, #1
}
 800ec9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 800ec9e:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800eca0:	f7ff bfb0 	b.w	800ec04 <UART_CheckIdleState>
}
 800eca4:	2001      	movs	r0, #1
 800eca6:	bd10      	pop	{r4, pc}

0800eca8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800eca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800ecac:	e9d1 2c01 	ldrd	r2, ip, [r1, #4]
 800ecb0:	e9d1 3807 	ldrd	r3, r8, [r1, #28]
 800ecb4:	f8d1 e024 	ldr.w	lr, [r1, #36]	@ 0x24
 800ecb8:	ea43 0308 	orr.w	r3, r3, r8
 800ecbc:	e9d1 7603 	ldrd	r7, r6, [r1, #12]
 800ecc0:	e9d1 5405 	ldrd	r5, r4, [r1, #20]
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800ecc4:	6809      	ldr	r1, [r1, #0]
 800ecc6:	b991      	cbnz	r1, 800ecee <FMC_SDRAM_Init+0x46>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800ecc8:	ea43 030e 	orr.w	r3, r3, lr
 800eccc:	6801      	ldr	r1, [r0, #0]
 800ecce:	4313      	orrs	r3, r2
 800ecd0:	f421 41ff 	bic.w	r1, r1, #32640	@ 0x7f80
 800ecd4:	ea43 030c 	orr.w	r3, r3, ip
 800ecd8:	f021 017f 	bic.w	r1, r1, #127	@ 0x7f
 800ecdc:	433b      	orrs	r3, r7
 800ecde:	4333      	orrs	r3, r6
 800ece0:	432b      	orrs	r3, r5
 800ece2:	4323      	orrs	r3, r4
 800ece4:	430b      	orrs	r3, r1
 800ece6:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 800ece8:	2000      	movs	r0, #0
 800ecea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800ecee:	6801      	ldr	r1, [r0, #0]
 800ecf0:	ea43 030e 	orr.w	r3, r3, lr
 800ecf4:	f421 41f8 	bic.w	r1, r1, #31744	@ 0x7c00
 800ecf8:	430b      	orrs	r3, r1
 800ecfa:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800ecfc:	ea42 030c 	orr.w	r3, r2, ip
 800ed00:	6841      	ldr	r1, [r0, #4]
 800ed02:	433b      	orrs	r3, r7
 800ed04:	f421 42ff 	bic.w	r2, r1, #32640	@ 0x7f80
 800ed08:	4333      	orrs	r3, r6
 800ed0a:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 800ed0e:	432b      	orrs	r3, r5
 800ed10:	4323      	orrs	r3, r4
 800ed12:	4313      	orrs	r3, r2
 800ed14:	6043      	str	r3, [r0, #4]
 800ed16:	e7e7      	b.n	800ece8 <FMC_SDRAM_Init+0x40>

0800ed18 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800ed18:	68cb      	ldr	r3, [r1, #12]
 800ed1a:	f103 3cff 	add.w	ip, r3, #4294967295
 800ed1e:	694b      	ldr	r3, [r1, #20]
{
 800ed20:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800ed22:	3b01      	subs	r3, #1
 800ed24:	680f      	ldr	r7, [r1, #0]
 800ed26:	684c      	ldr	r4, [r1, #4]
 800ed28:	688e      	ldr	r6, [r1, #8]
 800ed2a:	051b      	lsls	r3, r3, #20
 800ed2c:	690d      	ldr	r5, [r1, #16]
 800ed2e:	3c01      	subs	r4, #1
 800ed30:	6989      	ldr	r1, [r1, #24]
 800ed32:	3e01      	subs	r6, #1
 800ed34:	3d01      	subs	r5, #1
 800ed36:	3f01      	subs	r7, #1
 800ed38:	3901      	subs	r1, #1
 800ed3a:	0124      	lsls	r4, r4, #4
 800ed3c:	0236      	lsls	r6, r6, #8
 800ed3e:	042d      	lsls	r5, r5, #16
 800ed40:	0609      	lsls	r1, r1, #24
 800ed42:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 800ed46:	b95a      	cbnz	r2, 800ed60 <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800ed48:	433b      	orrs	r3, r7
 800ed4a:	6882      	ldr	r2, [r0, #8]
 800ed4c:	4323      	orrs	r3, r4
 800ed4e:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 800ed52:	4333      	orrs	r3, r6
 800ed54:	432b      	orrs	r3, r5
 800ed56:	430b      	orrs	r3, r1
 800ed58:	4313      	orrs	r3, r2
 800ed5a:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
}
 800ed5c:	2000      	movs	r0, #0
 800ed5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800ed60:	6882      	ldr	r2, [r0, #8]
 800ed62:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800ed66:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
 800ed6a:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800ed6c:	ea44 0306 	orr.w	r3, r4, r6
 800ed70:	433b      	orrs	r3, r7
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800ed72:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800ed74:	68c2      	ldr	r2, [r0, #12]
 800ed76:	432b      	orrs	r3, r5
 800ed78:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 800ed7c:	430b      	orrs	r3, r1
 800ed7e:	4313      	orrs	r3, r2
 800ed80:	60c3      	str	r3, [r0, #12]
 800ed82:	e7eb      	b.n	800ed5c <FMC_SDRAM_Timing_Init+0x44>

0800ed84 <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800ed84:	6902      	ldr	r2, [r0, #16]
{
 800ed86:	b510      	push	{r4, lr}
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800ed88:	e9d1 3400 	ldrd	r3, r4, [r1]
 800ed8c:	0d92      	lsrs	r2, r2, #22
 800ed8e:	4323      	orrs	r3, r4
 800ed90:	68cc      	ldr	r4, [r1, #12]
 800ed92:	0592      	lsls	r2, r2, #22
 800ed94:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 800ed98:	4313      	orrs	r3, r2
 800ed9a:	688a      	ldr	r2, [r1, #8]
 800ed9c:	3a01      	subs	r2, #1
 800ed9e:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800eda2:	6103      	str	r3, [r0, #16]
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 800eda4:	2000      	movs	r0, #0
 800eda6:	bd10      	pop	{r4, pc}

0800eda8 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800eda8:	6943      	ldr	r3, [r0, #20]
 800edaa:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800edae:	f023 033e 	bic.w	r3, r3, #62	@ 0x3e
 800edb2:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 800edb6:	6143      	str	r3, [r0, #20]

  return HAL_OK;
}
 800edb8:	2000      	movs	r0, #0
 800edba:	4770      	bx	lr

0800edbc <execute_reg_op_sequence>:

/**
  * @brief Function to execute the operation sequence.
  * @param seq Operation sequence that needs to be executed
  */
static void execute_reg_op_sequence(const struct sequence seq) {
 800edbc:	b530      	push	{r4, r5, lr}
 800edbe:	b085      	sub	sp, #20
	for(unsigned int i = 0; i < seq.len; i++) {
 800edc0:	4604      	mov	r4, r0
 800edc2:	2500      	movs	r5, #0
static void execute_reg_op_sequence(const struct sequence seq) {
 800edc4:	466b      	mov	r3, sp
 800edc6:	e883 0003 	stmia.w	r3, {r0, r1}
	for(unsigned int i = 0; i < seq.len; i++) {
 800edca:	9b01      	ldr	r3, [sp, #4]
 800edcc:	42ab      	cmp	r3, r5
 800edce:	d801      	bhi.n	800edd4 <execute_reg_op_sequence+0x18>
			psee_sleep_ms_imp(delay_ms);

		}
		psee_sleep_ms_imp(1);
	}
}
 800edd0:	b005      	add	sp, #20
 800edd2:	bd30      	pop	{r4, r5, pc}
		if(seq.ops[i].op == WRITE) {
 800edd4:	7823      	ldrb	r3, [r4, #0]
 800edd6:	2b01      	cmp	r3, #1
 800edd8:	d109      	bne.n	800edee <execute_reg_op_sequence+0x32>
			psee_sensor_write(seq.ops[i].args.write.addr, seq.ops[i].args.write.data);
 800edda:	68a1      	ldr	r1, [r4, #8]
 800eddc:	88a0      	ldrh	r0, [r4, #4]
 800edde:	f7f3 fb2b 	bl	8002438 <psee_sensor_write>
		psee_sleep_ms_imp(1);
 800ede2:	2001      	movs	r0, #1
	for(unsigned int i = 0; i < seq.len; i++) {
 800ede4:	3501      	adds	r5, #1
 800ede6:	3410      	adds	r4, #16
		psee_sleep_ms_imp(1);
 800ede8:	f7f3 fb24 	bl	8002434 <psee_sleep_ms_imp>
	for(unsigned int i = 0; i < seq.len; i++) {
 800edec:	e7ed      	b.n	800edca <execute_reg_op_sequence+0xe>
		else if (seq.ops[i].op == READ) {
 800edee:	b92b      	cbnz	r3, 800edfc <execute_reg_op_sequence+0x40>
			psee_sensor_read(seq.ops[i].args.write.addr, &data);
 800edf0:	a903      	add	r1, sp, #12
 800edf2:	88a0      	ldrh	r0, [r4, #4]
			uint32_t data = 0;
 800edf4:	9303      	str	r3, [sp, #12]
			psee_sensor_read(seq.ops[i].args.write.addr, &data);
 800edf6:	f7f3 fb45 	bl	8002484 <psee_sensor_read>
			(void)data;
 800edfa:	e7f2      	b.n	800ede2 <execute_reg_op_sequence+0x26>
		else if (seq.ops[i].op == DELAY) {
 800edfc:	2b02      	cmp	r3, #2
 800edfe:	d1f0      	bne.n	800ede2 <execute_reg_op_sequence+0x26>
			uint32_t delay_ms = seq.ops[i].args.delay.us/1000<1?1:seq.ops[i].args.delay.us/1000;
 800ee00:	6860      	ldr	r0, [r4, #4]
 800ee02:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800ee06:	bf2a      	itet	cs
 800ee08:	f44f 737a 	movcs.w	r3, #1000	@ 0x3e8
 800ee0c:	2001      	movcc	r0, #1
 800ee0e:	fbb0 f0f3 	udivcs	r0, r0, r3
			psee_sleep_ms_imp(delay_ms);
 800ee12:	f7f3 fb0f 	bl	8002434 <psee_sleep_ms_imp>
 800ee16:	e7e4      	b.n	800ede2 <execute_reg_op_sequence+0x26>

0800ee18 <psee_sleep_us_imp>:
void __attribute__((weak)) psee_sleep_us_imp(uint32_t duration) {
 800ee18:	4770      	bx	lr

0800ee1a <psee_sensor_start>:

/**
  * @brief Function to execute the Start sequence of the ISSD.
  */
void psee_sensor_start(const struct issd *issd) {
	if (issd)
 800ee1a:	b118      	cbz	r0, 800ee24 <psee_sensor_start+0xa>
		execute_reg_op_sequence(issd->start);
 800ee1c:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
 800ee20:	f7ff bfcc 	b.w	800edbc <execute_reg_op_sequence>
}
 800ee24:	4770      	bx	lr

0800ee26 <psee_sensor_set_biases>:
};

/**
  * @brief Function to set the standard biases
  */
void psee_sensor_set_biases(const BIAS_Params_t *bias) {
 800ee26:	b510      	push	{r4, lr}

	/* PR */
	psee_sensor_write(BIAS_BIAS_PR_HV0, 		(0x03010000 + bias->pr) | BIAS_PR_HV0_SINGLE_Msk);
 800ee28:	7801      	ldrb	r1, [r0, #0]
void psee_sensor_set_biases(const BIAS_Params_t *bias) {
 800ee2a:	4604      	mov	r4, r0
	psee_sensor_write(BIAS_BIAS_PR_HV0, 		(0x03010000 + bias->pr) | BIAS_PR_HV0_SINGLE_Msk);
 800ee2c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800ee30:	f101 7140 	add.w	r1, r1, #50331648	@ 0x3000000
 800ee34:	f501 3180 	add.w	r1, r1, #65536	@ 0x10000
 800ee38:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 800ee3c:	f7f3 fafc 	bl	8002438 <psee_sensor_write>
	/* FO */
  	psee_sensor_write(BIAS_BIAS_FO_HV0, 		(0x03010000 + bias->fo) | BIAS_FO_HV0_SINGLE_Msk);
 800ee40:	7861      	ldrb	r1, [r4, #1]
 800ee42:	f241 0004 	movw	r0, #4100	@ 0x1004
 800ee46:	f101 7140 	add.w	r1, r1, #50331648	@ 0x3000000
 800ee4a:	f501 3180 	add.w	r1, r1, #65536	@ 0x10000
 800ee4e:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 800ee52:	f7f3 faf1 	bl	8002438 <psee_sensor_write>
  	/* FES */
  	psee_sensor_write(BIAS_BIAS_FES_HV0, 		(0x01010000 + bias->fes) | BIAS_FES_HV0_SINGLE_Msk);
 800ee56:	78a1      	ldrb	r1, [r4, #2]
 800ee58:	f241 0008 	movw	r0, #4104	@ 0x1008
 800ee5c:	f101 7180 	add.w	r1, r1, #16777216	@ 0x1000000
 800ee60:	f501 3180 	add.w	r1, r1, #65536	@ 0x10000
 800ee64:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 800ee68:	f7f3 fae6 	bl	8002438 <psee_sensor_write>
  	/* HPF */
  	psee_sensor_write(BIAS_BIAS_HPF_LV0, 		(0x03010000 + bias->hpf) | BIAS_HPF_LV0_SINGLE_Msk);
 800ee6c:	78e1      	ldrb	r1, [r4, #3]
 800ee6e:	f44f 5088 	mov.w	r0, #4352	@ 0x1100
 800ee72:	f101 7140 	add.w	r1, r1, #50331648	@ 0x3000000
 800ee76:	f501 3180 	add.w	r1, r1, #65536	@ 0x10000
 800ee7a:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 800ee7e:	f7f3 fadb 	bl	8002438 <psee_sensor_write>
  	/* DIFF ON */
  	psee_sensor_write(BIAS_BIAS_DIFF_ON_LV1, 	(0x01010000 + bias->diff_on) | BIAS_DIFF_ON_LV1_SINGLE_Msk);
 800ee82:	7921      	ldrb	r1, [r4, #4]
 800ee84:	f241 1028 	movw	r0, #4392	@ 0x1128
 800ee88:	f101 7180 	add.w	r1, r1, #16777216	@ 0x1000000
 800ee8c:	f501 3180 	add.w	r1, r1, #65536	@ 0x10000
 800ee90:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 800ee94:	f7f3 fad0 	bl	8002438 <psee_sensor_write>
  	/* DIFF */
  	psee_sensor_write(BIAS_BIAS_DIFF_LV1, 		(0x01010000 + bias->diff) | BIAS_DIFF_LV1_SINGLE_Msk);
 800ee98:	7961      	ldrb	r1, [r4, #5]
 800ee9a:	f241 102c 	movw	r0, #4396	@ 0x112c
 800ee9e:	f101 7180 	add.w	r1, r1, #16777216	@ 0x1000000
 800eea2:	f501 3180 	add.w	r1, r1, #65536	@ 0x10000
 800eea6:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 800eeaa:	f7f3 fac5 	bl	8002438 <psee_sensor_write>
  	/* DIFF OFF */
  	psee_sensor_write(BIAS_BIAS_DIFF_OFF_LV1,	(0x01010000 + bias->diff_off) | BIAS_DIFF_OFF_LV1_SINGLE_Msk);
 800eeae:	79a1      	ldrb	r1, [r4, #6]
 800eeb0:	f241 1030 	movw	r0, #4400	@ 0x1130
 800eeb4:	f101 7180 	add.w	r1, r1, #16777216	@ 0x1000000
 800eeb8:	f501 3180 	add.w	r1, r1, #65536	@ 0x10000
 800eebc:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 800eec0:	f7f3 faba 	bl	8002438 <psee_sensor_write>
  	/* INV */
  	psee_sensor_write(BIAS_BIAS_INV_LV0, 		(0x01010000 + bias->inv) | BIAS_INV_LV0_SINGLE_Msk);
 800eec4:	79e1      	ldrb	r1, [r4, #7]
 800eec6:	f241 1010 	movw	r0, #4368	@ 0x1110
 800eeca:	f101 7180 	add.w	r1, r1, #16777216	@ 0x1000000
 800eece:	f501 3180 	add.w	r1, r1, #65536	@ 0x10000
 800eed2:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 800eed6:	f7f3 faaf 	bl	8002438 <psee_sensor_write>
  	/* REFR */
  	psee_sensor_write(BIAS_BIAS_REFR_LV0, 		(0x03010000 + bias->refr) | BIAS_REFR_LV0_SINGLE_Msk);
 800eeda:	7a21      	ldrb	r1, [r4, #8]
 800eedc:	f241 1014 	movw	r0, #4372	@ 0x1114
 800eee0:	f101 7140 	add.w	r1, r1, #50331648	@ 0x3000000
 800eee4:	f501 3180 	add.w	r1, r1, #65536	@ 0x10000
 800eee8:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 800eeec:	f7f3 faa4 	bl	8002438 <psee_sensor_write>
  	/* INVP */
	psee_sensor_write(BIAS_BIAS_INVP_LV0, 		(0x03010000 + bias->invp) | BIAS_INVP_LV0_SINGLE_Msk);
 800eef0:	7a61      	ldrb	r1, [r4, #9]
 800eef2:	f241 1018 	movw	r0, #4376	@ 0x1118
 800eef6:	f101 7140 	add.w	r1, r1, #50331648	@ 0x3000000
 800eefa:	f501 3180 	add.w	r1, r1, #65536	@ 0x10000
 800eefe:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 800ef02:	f7f3 fa99 	bl	8002438 <psee_sensor_write>
	/* REQ_PU */
	psee_sensor_write(BIAS_BIAS_REQ_PU_LV0, 	(0x03010000 + bias->req_pu) | BIAS_REQ_PU_LV0_SINGLE_Msk);
 800ef06:	7aa1      	ldrb	r1, [r4, #10]
 800ef08:	f241 101c 	movw	r0, #4380	@ 0x111c
 800ef0c:	f101 7140 	add.w	r1, r1, #50331648	@ 0x3000000
 800ef10:	f501 3180 	add.w	r1, r1, #65536	@ 0x10000
 800ef14:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 800ef18:	f7f3 fa8e 	bl	8002438 <psee_sensor_write>
	/* SM_PDy */
	psee_sensor_write(BIAS_BIAS_SM_PDY_LV0, 	(0x01010000 + bias->sm_pdy) | BIAS_SM_PDY_LV0_SINGLE_Msk);
 800ef1c:	7ae1      	ldrb	r1, [r4, #11]
 800ef1e:	f44f 5089 	mov.w	r0, #4384	@ 0x1120
 800ef22:	f101 7180 	add.w	r1, r1, #16777216	@ 0x1000000
 800ef26:	f501 3180 	add.w	r1, r1, #65536	@ 0x10000
 800ef2a:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 800ef2e:	f7f3 fa83 	bl	8002438 <psee_sensor_write>

}
 800ef32:	bd10      	pop	{r4, pc}

0800ef34 <psee_sensor_set_bias>:

/**
  * @brief Function to change the Bias setting
  */
void psee_sensor_set_bias(BIAS_Name_t bias, uint32_t val) {
 800ef34:	b508      	push	{r3, lr}
	switch(bias) {
 800ef36:	280b      	cmp	r0, #11
 800ef38:	d811      	bhi.n	800ef5e <psee_sensor_set_bias+0x2a>
 800ef3a:	e8df f000 	tbb	[pc, r0]
 800ef3e:	1106      	.short	0x1106
 800ef40:	352c231a 	.word	0x352c231a
 800ef44:	5950473e 	.word	0x5950473e
 800ef48:	6b62      	.short	0x6b62
	case PR:
		psee_sensor_write(BIAS_BIAS_PR_HV0, 		(0x03010000 + val) | BIAS_PR_HV0_SINGLE_Msk);
 800ef4a:	f101 7140 	add.w	r1, r1, #50331648	@ 0x3000000
 800ef4e:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800ef52:	f501 3180 	add.w	r1, r1, #65536	@ 0x10000
 800ef56:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
		break;
	case REQ_PU:
		psee_sensor_write(BIAS_BIAS_REQ_PU_LV0, 	(0x03010000 + val) | BIAS_REQ_PU_LV0_SINGLE_Msk);
		break;
	case SM_PDY:
		psee_sensor_write(BIAS_BIAS_SM_PDY_LV0, 	(0x01010000 + val) | BIAS_SM_PDY_LV0_SINGLE_Msk);
 800ef5a:	f7f3 fa6d 	bl	8002438 <psee_sensor_write>
		break;
	default:
		break;
	}
}
 800ef5e:	bd08      	pop	{r3, pc}
		psee_sensor_write(BIAS_BIAS_FO_HV0, 		(0x03010000 + val) | BIAS_FO_HV0_SINGLE_Msk);
 800ef60:	f101 7140 	add.w	r1, r1, #50331648	@ 0x3000000
 800ef64:	f241 0004 	movw	r0, #4100	@ 0x1004
 800ef68:	f501 3180 	add.w	r1, r1, #65536	@ 0x10000
 800ef6c:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 800ef70:	e7f3      	b.n	800ef5a <psee_sensor_set_bias+0x26>
		psee_sensor_write(BIAS_BIAS_FES_HV0, 		(0x01010000 + val) | BIAS_FES_HV0_SINGLE_Msk);
 800ef72:	f101 7180 	add.w	r1, r1, #16777216	@ 0x1000000
 800ef76:	f241 0008 	movw	r0, #4104	@ 0x1008
 800ef7a:	f501 3180 	add.w	r1, r1, #65536	@ 0x10000
 800ef7e:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 800ef82:	e7ea      	b.n	800ef5a <psee_sensor_set_bias+0x26>
		psee_sensor_write(BIAS_BIAS_HPF_LV0, 		(0x03010000 + val) | BIAS_HPF_LV0_SINGLE_Msk);
 800ef84:	f101 7140 	add.w	r1, r1, #50331648	@ 0x3000000
 800ef88:	f44f 5088 	mov.w	r0, #4352	@ 0x1100
 800ef8c:	f501 3180 	add.w	r1, r1, #65536	@ 0x10000
 800ef90:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 800ef94:	e7e1      	b.n	800ef5a <psee_sensor_set_bias+0x26>
		psee_sensor_write(BIAS_BIAS_DIFF_ON_LV1, 	(0x01010000 + val) | BIAS_DIFF_ON_LV1_SINGLE_Msk);
 800ef96:	f101 7180 	add.w	r1, r1, #16777216	@ 0x1000000
 800ef9a:	f241 1028 	movw	r0, #4392	@ 0x1128
 800ef9e:	f501 3180 	add.w	r1, r1, #65536	@ 0x10000
 800efa2:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 800efa6:	e7d8      	b.n	800ef5a <psee_sensor_set_bias+0x26>
		psee_sensor_write(BIAS_BIAS_DIFF_LV1, 		(0x01010000 + val) | BIAS_DIFF_LV1_SINGLE_Msk);
 800efa8:	f101 7180 	add.w	r1, r1, #16777216	@ 0x1000000
 800efac:	f241 102c 	movw	r0, #4396	@ 0x112c
 800efb0:	f501 3180 	add.w	r1, r1, #65536	@ 0x10000
 800efb4:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 800efb8:	e7cf      	b.n	800ef5a <psee_sensor_set_bias+0x26>
		psee_sensor_write(BIAS_BIAS_DIFF_OFF_LV1,	(0x01010000 + val) | BIAS_DIFF_OFF_LV1_SINGLE_Msk);
 800efba:	f101 7180 	add.w	r1, r1, #16777216	@ 0x1000000
 800efbe:	f241 1030 	movw	r0, #4400	@ 0x1130
 800efc2:	f501 3180 	add.w	r1, r1, #65536	@ 0x10000
 800efc6:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 800efca:	e7c6      	b.n	800ef5a <psee_sensor_set_bias+0x26>
		psee_sensor_write(BIAS_BIAS_INV_LV0, 		(0x01010000 + val) | BIAS_INV_LV0_SINGLE_Msk);
 800efcc:	f101 7180 	add.w	r1, r1, #16777216	@ 0x1000000
 800efd0:	f241 1010 	movw	r0, #4368	@ 0x1110
 800efd4:	f501 3180 	add.w	r1, r1, #65536	@ 0x10000
 800efd8:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 800efdc:	e7bd      	b.n	800ef5a <psee_sensor_set_bias+0x26>
		psee_sensor_write(BIAS_BIAS_REFR_LV0, 		(0x03010000 + val) | BIAS_REFR_LV0_SINGLE_Msk);
 800efde:	f101 7140 	add.w	r1, r1, #50331648	@ 0x3000000
 800efe2:	f241 1014 	movw	r0, #4372	@ 0x1114
 800efe6:	f501 3180 	add.w	r1, r1, #65536	@ 0x10000
 800efea:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 800efee:	e7b4      	b.n	800ef5a <psee_sensor_set_bias+0x26>
		psee_sensor_write(BIAS_BIAS_INVP_LV0, 		(0x03010000 + val) | BIAS_INVP_LV0_SINGLE_Msk);
 800eff0:	f101 7140 	add.w	r1, r1, #50331648	@ 0x3000000
 800eff4:	f241 1018 	movw	r0, #4376	@ 0x1118
 800eff8:	f501 3180 	add.w	r1, r1, #65536	@ 0x10000
 800effc:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 800f000:	e7ab      	b.n	800ef5a <psee_sensor_set_bias+0x26>
		psee_sensor_write(BIAS_BIAS_REQ_PU_LV0, 	(0x03010000 + val) | BIAS_REQ_PU_LV0_SINGLE_Msk);
 800f002:	f101 7140 	add.w	r1, r1, #50331648	@ 0x3000000
 800f006:	f241 101c 	movw	r0, #4380	@ 0x111c
 800f00a:	f501 3180 	add.w	r1, r1, #65536	@ 0x10000
 800f00e:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 800f012:	e7a2      	b.n	800ef5a <psee_sensor_set_bias+0x26>
		psee_sensor_write(BIAS_BIAS_SM_PDY_LV0, 	(0x01010000 + val) | BIAS_SM_PDY_LV0_SINGLE_Msk);
 800f014:	f101 7180 	add.w	r1, r1, #16777216	@ 0x1000000
 800f018:	f44f 5089 	mov.w	r0, #4384	@ 0x1120
 800f01c:	f501 3180 	add.w	r1, r1, #65536	@ 0x10000
 800f020:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 800f024:	e799      	b.n	800ef5a <psee_sensor_set_bias+0x26>

0800f026 <psee_sensor_set_CPI_EVT20>:

/**
  * @brief Function to configure the CPI and configure the sensor data format in EVT2.0
  */
void psee_sensor_set_CPI_EVT20() {
 800f026:	b508      	push	{r3, lr}

	/* Set EVT20 mode */
  	psee_sensor_write(EDF_CONTROL, 				0x00UL);											/* Event Format : Legacy EVT2.0 */
 800f028:	2100      	movs	r1, #0
 800f02a:	f247 0044 	movw	r0, #28740	@ 0x7044
 800f02e:	f7f3 fa03 	bl	8002438 <psee_sensor_write>

	/* Configure Packet and Frame sizes */
  	psee_sensor_write(CPI_FRAME_SIZE_CONTROL, 	0x4UL);												/* Frame Size in Packets : 4 Packets */
 800f032:	2104      	movs	r1, #4
 800f034:	f248 0010 	movw	r0, #32784	@ 0x8010
 800f038:	f7f3 f9fe 	bl	8002438 <psee_sensor_write>

	/* Polarities fr VSYNC & HSYNC */
  	psee_sensor_write(CPI_OUTPUT_IF_CONTROL, 	CPI_OUTPUT_IF_CONTROL_HSYNC_POL |					/* HSYNC polarity control : Synchronize at active high */
 800f03c:	2103      	movs	r1, #3
 800f03e:	f248 0018 	movw	r0, #32792	@ 0x8018
 800f042:	f7f3 f9f9 	bl	8002438 <psee_sensor_write>
  												CPI_OUTPUT_IF_CONTROL_VSYNC_POL						/* VSYNC polarity control : Synchronize at active high */
												);

	/* Enable dropping */
  	psee_sensor_write(RO_READOUT_CTRL, 			RO_READOUT_CTRL_DIGITAL_PIPE_EN |					/* Enable Whole Readout block */
 800f046:	f44f 5158 	mov.w	r1, #13824	@ 0x3600
 800f04a:	f44f 4010 	mov.w	r0, #36864	@ 0x9000
 800f04e:	f7f3 f9f3 	bl	8002438 <psee_sensor_write>
												RO_READOUT_CTRL_DROP_EN |							/* Drop all events at the output of the RO except first events and timer high */
												RO_READOUT_CTRL_DROP_ON_FULL_EN						/* Drop a packet only if cannot be accepted by the following stage */
												);

  	/* Configure CPI Pipeline */
	psee_sensor_write(CPI_PIPELINE_CONTROL, 	CPI_PIPELINE_CONTROL_ENABLE |						/* Enable Output Interface */
 800f052:	f240 61a1 	movw	r1, #1697	@ 0x6a1
 800f056:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800f05a:	f7f3 f9ed 	bl	8002438 <psee_sensor_write>
												CPI_PIPELINE_CONTROL_OUTPUT_IF_MODE |				/* Output Interface Mode : DCMI */
												CPI_PIPELINE_CONTROL_PACKET_FIXED_SIZE_ENABLE |		/* Fixed Packet Size */
												CPI_PIPELINE_CONTROL_FRAME_FIXED_SIZE_ENABLE |		/* Fixed Frame Size */
												CPI_PIPELINE_CONTROL_CLK_OUT_EN						/* Enable Clock Out */
												);
}
 800f05e:	bd08      	pop	{r3, pc}

0800f060 <psee_sensor_set_flip>:
/**
  * @brief Function to flip
  * @param flip_x To indicate that x axis needs to be flipped
  * @param flip_y To indicate that y axis needs to be flipped
  */
void psee_sensor_set_flip(uint32_t flip_x, uint32_t flip_y) {
 800f060:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f062:	4605      	mov	r5, r0
 800f064:	460c      	mov	r4, r1
	uint32_t reg_val;

	/* Read the old value*/
	psee_sensor_read(RO_READOUT_CTRL, &reg_val );
 800f066:	f44f 4010 	mov.w	r0, #36864	@ 0x9000
 800f06a:	a901      	add	r1, sp, #4
 800f06c:	f7f3 fa0a 	bl	8002484 <psee_sensor_read>
	reg_val &= 0x003FF6FF;
 800f070:	4907      	ldr	r1, [pc, #28]	@ (800f090 <psee_sensor_set_flip+0x30>)
 800f072:	9b01      	ldr	r3, [sp, #4]
 800f074:	4019      	ands	r1, r3

	/* Check if it is a X axis flip*/
	if(flip_x)	reg_val |= (flip_x << 6);
 800f076:	b10d      	cbz	r5, 800f07c <psee_sensor_set_flip+0x1c>
 800f078:	ea41 1185 	orr.w	r1, r1, r5, lsl #6
	else 		reg_val &= ~(flip_x << 6);

	/* Check if it is a Y axis flip*/
	if(flip_y) 	reg_val |= (flip_y << 7);
 800f07c:	b10c      	cbz	r4, 800f082 <psee_sensor_set_flip+0x22>
 800f07e:	ea41 11c4 	orr.w	r1, r1, r4, lsl #7
	else 		reg_val &= ~(flip_y << 7);

	/* Update the new value*/
	psee_sensor_write(RO_READOUT_CTRL, reg_val);
 800f082:	f44f 4010 	mov.w	r0, #36864	@ 0x9000
	if(flip_y) 	reg_val |= (flip_y << 7);
 800f086:	9101      	str	r1, [sp, #4]
	psee_sensor_write(RO_READOUT_CTRL, reg_val);
 800f088:	f7f3 f9d6 	bl	8002438 <psee_sensor_write>
}
 800f08c:	b003      	add	sp, #12
 800f08e:	bd30      	pop	{r4, r5, pc}
 800f090:	003ff6ff 	.word	0x003ff6ff

0800f094 <psee_sensor_destroy>:
}

/**
  * @brief Function to execute the destroy sequence of the ISSD.
  */
void psee_sensor_destroy() {
 800f094:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	psee_sensor_write(MIPI_CSI_POWER,		(0UL << MIPI_CSI_POWER_CL_ENABLE_Pos) |					/* Clock lane power up input signal */
 800f098:	2100      	movs	r1, #0
void psee_sensor_destroy() {
 800f09a:	b085      	sub	sp, #20
	psee_sensor_write(MIPI_CSI_POWER,		(0UL << MIPI_CSI_POWER_CL_ENABLE_Pos) |					/* Clock lane power up input signal */
 800f09c:	f24b 0030 	movw	r0, #45104	@ 0xb030
	uint32_t sys_clk_ctrl = 0, sys_clk_switch = 0, sys_clk_auto_mode = 0;
 800f0a0:	2400      	movs	r4, #0
	psee_sensor_write(MIPI_CSI_POWER,		(0UL << MIPI_CSI_POWER_CL_ENABLE_Pos) |					/* Clock lane power up input signal */
 800f0a2:	f7f3 f9c9 	bl	8002438 <psee_sensor_write>
	psee_sensor_write(MIPI_CSI_CLK_CTRL,	(0UL << MIPI_CSI_CLK_CTRL_STBUS_EN_Pos)  |				/* STbus clock */
 800f0a6:	2100      	movs	r1, #0
 800f0a8:	f24b 000c 	movw	r0, #45068	@ 0xb00c
 800f0ac:	f7f3 f9c4 	bl	8002438 <psee_sensor_write>
	psee_sensor_write(MIPI_CSI_POWER,		(0UL << MIPI_CSI_POWER_CL_RSTN_Pos) |					/* Asynchronous Reset of Clock Lane */
 800f0b0:	2100      	movs	r1, #0
 800f0b2:	f24b 0030 	movw	r0, #45104	@ 0xb030
 800f0b6:	f7f3 f9bf 	bl	8002438 <psee_sensor_write>
	psee_sensor_write(MIPI_CSI_CLK_CTRL,	(0UL << MIPI_CSI_CLK_CTRL_TXCLKESC_EN_Pos) );			/* Escape clock */
 800f0ba:	2100      	movs	r1, #0
 800f0bc:	f24b 000c 	movw	r0, #45068	@ 0xb00c
 800f0c0:	f7f3 f9ba 	bl	8002438 <psee_sensor_write>
	psee_sensor_write(LDO_PMU,				(0UL << LDO_PMU_V2I_CAL_EN_Pos) );						/* Calibration to adjust resistor value */
 800f0c4:	2100      	movs	r1, #0
 800f0c6:	f24a 001c 	movw	r0, #40988	@ 0xa01c
 800f0ca:	f7f3 f9b5 	bl	8002438 <psee_sensor_write>
	psee_sensor_write(ADC_CONTROL,			(0UL << ADC_CONTROL_CLK_EN_Pos) );						/* ADC Clock */
 800f0ce:	2100      	movs	r1, #0
 800f0d0:	204c      	movs	r0, #76	@ 0x4c
 800f0d2:	f7f3 f9b1 	bl	8002438 <psee_sensor_write>
	psee_sensor_write(MIPI_CSI_POWER,		(0UL << MIPI_CSI_POWER_CUR_EN_Pos) );					/* MIPI Bias */
 800f0d6:	2100      	movs	r1, #0
 800f0d8:	f24b 0030 	movw	r0, #45104	@ 0xb030
 800f0dc:	f7f3 f9ac 	bl	8002438 <psee_sensor_write>
	psee_sensor_write(LDO_PMU,				(0UL << LDO_PMU_ICGM_EN_Pos) |							/* CGM Current */
 800f0e0:	2100      	movs	r1, #0
 800f0e2:	f24a 001c 	movw	r0, #40988	@ 0xa01c
 800f0e6:	f7f3 f9a7 	bl	8002438 <psee_sensor_write>
	psee_sensor_write(LDO_BG,				(0UL << LDO_BG_EN_Pos) |								/* Bandgap */
 800f0ea:	2100      	movs	r1, #0
 800f0ec:	f44f 4020 	mov.w	r0, #40960	@ 0xa000
 800f0f0:	f7f3 f9a2 	bl	8002438 <psee_sensor_write>
	psee_sensor_read(SYS_CLK_CTRL, &sys_clk_ctrl);
 800f0f4:	4669      	mov	r1, sp
 800f0f6:	f44f 7001 	mov.w	r0, #516	@ 0x204
	uint32_t sys_clk_ctrl = 0, sys_clk_switch = 0, sys_clk_auto_mode = 0;
 800f0fa:	9400      	str	r4, [sp, #0]
	psee_sensor_read(SYS_CLK_CTRL, &sys_clk_ctrl);
 800f0fc:	f7f3 f9c2 	bl	8002484 <psee_sensor_read>
	sys_clk_switch = (sys_clk_ctrl & SYS_CLK_CTRL_SWITCH_Msk) >> SYS_CLK_CTRL_SWITCH_Pos;
 800f100:	9b00      	ldr	r3, [sp, #0]
	if(sys_clk_switch == 0) {
 800f102:	0799      	lsls	r1, r3, #30
	sys_clk_switch = (sys_clk_ctrl & SYS_CLK_CTRL_SWITCH_Msk) >> SYS_CLK_CTRL_SWITCH_Pos;
 800f104:	f3c3 0740 	ubfx	r7, r3, #1, #1
	if(sys_clk_switch == 0) {
 800f108:	d545      	bpl.n	800f196 <psee_sensor_destroy+0x102>
		psee_sensor_read(REF_CLK_CTRL, &ref_clk_ctrl);
 800f10a:	a902      	add	r1, sp, #8
 800f10c:	f44f 7000 	mov.w	r0, #512	@ 0x200
		uint32_t ref_clk_ctrl = 0, ref_clk_switch = 0, ref_clk_div = 0;
 800f110:	9402      	str	r4, [sp, #8]
		psee_sensor_read(REF_CLK_CTRL, &ref_clk_ctrl);
 800f112:	f7f3 f9b7 	bl	8002484 <psee_sensor_read>
		ref_clk_switch = (ref_clk_ctrl & REF_CLK_CTRL_SWITCH_Msk) >> REF_CLK_CTRL_SWITCH_Pos;
 800f116:	9b02      	ldr	r3, [sp, #8]
		if(ref_clk_switch == 0) {
 800f118:	250a      	movs	r5, #10
		psee_sensor_read(PLL_CTRL, &pll_ctrl);
 800f11a:	a903      	add	r1, sp, #12
 800f11c:	f44f 7005 	mov.w	r0, #532	@ 0x214
		if(ref_clk_switch == 0) {
 800f120:	f013 0f02 	tst.w	r3, #2
			ref_clk_div = (ref_clk_ctrl & REF_CLK_CTRL_DIV_Msk) >> REF_CLK_CTRL_DIV_Pos;
 800f124:	bf1c      	itt	ne
 800f126:	f3c3 0383 	ubfxne	r3, r3, #2, #4
			clk_freq.pll_in_freq = clk_freq.in_freq / ref_clk_div;
 800f12a:	fbb5 f5f3 	udivne	r5, r5, r3
		uint32_t pll_ctrl = 0, pl_ndiv = 0, pl_odf = 0;
 800f12e:	2300      	movs	r3, #0
 800f130:	9303      	str	r3, [sp, #12]
		psee_sensor_read(PLL_CTRL, &pll_ctrl);
 800f132:	f7f3 f9a7 	bl	8002484 <psee_sensor_read>
		phy_clk_div2 = (sys_clk_ctrl & SYS_CLK_CTRL_PHY_DIV2_Msk) >> SYS_CLK_CTRL_PHY_DIV2_Pos;
 800f136:	9a00      	ldr	r2, [sp, #0]
		pl_ndiv = (pll_ctrl & PLL_CTRL_PL_NDIV_Msk) >> PLL_CTRL_PL_NDIV_Pos;
 800f138:	9c03      	ldr	r4, [sp, #12]
		phy_clk_off_count = (sys_clk_ctrl & SYS_CLK_CTRL_PHY_OFF_COUNT_Msk) >> SYS_CLK_CTRL_PHY_OFF_COUNT_Pos;
 800f13a:	f3c2 0385 	ubfx	r3, r2, #2, #6
		if(phy_clk_div2 == 0) {
 800f13e:	f412 4f80 	tst.w	r2, #16384	@ 0x4000
		pl_ndiv = (pll_ctrl & PLL_CTRL_PL_NDIV_Msk) >> PLL_CTRL_PL_NDIV_Pos;
 800f142:	f3c4 0447 	ubfx	r4, r4, #1, #8
 800f146:	f103 0303 	add.w	r3, r3, #3
		clk_freq.pll_vco_freq = clk_freq.pll_in_freq * pl_ndiv * 2;
 800f14a:	fb05 f404 	mul.w	r4, r5, r4
			phy_freq_divider = ((phy_clk_off_count + 3) << 1);
 800f14e:	bf18      	it	ne
 800f150:	005b      	lslne	r3, r3, #1
		clk_freq.pll_vco_freq = clk_freq.pll_in_freq * pl_ndiv * 2;
 800f152:	0066      	lsls	r6, r4, #1
		clk_freq.sys_freq = clk_freq.phy_freq / phy_freq_divider;
 800f154:	fbb4 f4f3 	udiv	r4, r4, r3
	sys_clk_auto_mode = (sys_clk_ctrl & SYS_CLK_CTRL_AUTO_MODE_Msk) >> SYS_CLK_CTRL_AUTO_MODE_Pos;
 800f158:	9b00      	ldr	r3, [sp, #0]
	uint32_t evt_icn_clk_ctrl = 0, evt_icn_clk_switch = 0, esp_clk_en = 0;
 800f15a:	2500      	movs	r5, #0
	psee_sensor_read(EVT_ICN_CLK_CTRL, &evt_icn_clk_ctrl);
 800f15c:	a901      	add	r1, sp, #4
 800f15e:	f44f 7004 	mov.w	r0, #528	@ 0x210
	sys_clk_auto_mode = (sys_clk_ctrl & SYS_CLK_CTRL_AUTO_MODE_Msk) >> SYS_CLK_CTRL_AUTO_MODE_Pos;
 800f162:	f3c3 39c0 	ubfx	r9, r3, #15, #1
	uint32_t evt_icn_clk_ctrl = 0, evt_icn_clk_switch = 0, esp_clk_en = 0;
 800f166:	9501      	str	r5, [sp, #4]
	psee_sensor_read(EVT_ICN_CLK_CTRL, &evt_icn_clk_ctrl);
 800f168:	f7f3 f98c 	bl	8002484 <psee_sensor_read>
	psee_sensor_read(CPU_SS_CLK_CTRL, &cpu_ss_clk_ctrl);
 800f16c:	a902      	add	r1, sp, #8
 800f16e:	f44f 7002 	mov.w	r0, #520	@ 0x208
	uint32_t cpu_ss_clk_ctrl = 0, cpu_ss_clk_switch = 0;
 800f172:	9502      	str	r5, [sp, #8]
	evt_icn_clk_switch = (evt_icn_clk_ctrl & EVT_ICN_CLK_CTRL_SWITCH_Msk) >> EVT_ICN_CLK_CTRL_SWITCH_Pos;
 800f174:	f8dd 8004 	ldr.w	r8, [sp, #4]
	psee_sensor_read(CPU_SS_CLK_CTRL, &cpu_ss_clk_ctrl);
 800f178:	f7f3 f984 	bl	8002484 <psee_sensor_read>
	cpu_ss_clk_switch = (cpu_ss_clk_ctrl & CPU_SS_CLK_CTRL_SWITCH_Msk) >> CPU_SS_CLK_CTRL_SWITCH_Pos;
 800f17c:	e9dd 3501 	ldrd	r3, r5, [sp, #4]
	if (((sys_clk_auto_mode == 0) && (evt_icn_clk_switch == 1)) || ((sys_clk_auto_mode == 1) && (sys_clk_switch == 1))) {
 800f180:	f1b9 0f00 	cmp.w	r9, #0
 800f184:	d10a      	bne.n	800f19c <psee_sensor_destroy+0x108>
 800f186:	f018 0f02 	tst.w	r8, #2
 800f18a:	d109      	bne.n	800f1a0 <psee_sensor_destroy+0x10c>
		clk_freq.evt_icn_freq = clk_freq.sys_freq;
 800f18c:	46a0      	mov	r8, r4
    if (((sys_clk_auto_mode == 0) && (cpu_ss_clk_switch == 1)) || ((sys_clk_auto_mode == 1) && (sys_clk_switch == 1))) {
 800f18e:	07aa      	lsls	r2, r5, #30
 800f190:	d40f      	bmi.n	800f1b2 <psee_sensor_destroy+0x11e>
 800f192:	4625      	mov	r5, r4
 800f194:	e011      	b.n	800f1ba <psee_sensor_destroy+0x126>
	clk_freq.pll_vco_freq = 0;
 800f196:	463e      	mov	r6, r7
		clk_freq.sys_freq = clk_freq.in_freq;
 800f198:	240a      	movs	r4, #10
 800f19a:	e7dd      	b.n	800f158 <psee_sensor_destroy+0xc4>
	if (((sys_clk_auto_mode == 0) && (evt_icn_clk_switch == 1)) || ((sys_clk_auto_mode == 1) && (sys_clk_switch == 1))) {
 800f19c:	2f00      	cmp	r7, #0
 800f19e:	d044      	beq.n	800f22a <psee_sensor_destroy+0x196>
		uint32_t evt_icn_clk_div = (evt_icn_clk_ctrl & CPU_SS_CLK_CTRL_DIV_Msk) >> CPU_SS_CLK_CTRL_DIV_Pos;
 800f1a0:	f3c3 0887 	ubfx	r8, r3, #2, #8
		clk_freq.evt_icn_freq = clk_freq.sys_freq / evt_icn_clk_div;
 800f1a4:	fbb4 f8f8 	udiv	r8, r4, r8
    if (((sys_clk_auto_mode == 0) && (cpu_ss_clk_switch == 1)) || ((sys_clk_auto_mode == 1) && (sys_clk_switch == 1))) {
 800f1a8:	f1b9 0f00 	cmp.w	r9, #0
 800f1ac:	d0ef      	beq.n	800f18e <psee_sensor_destroy+0xfa>
 800f1ae:	2f00      	cmp	r7, #0
 800f1b0:	d0ef      	beq.n	800f192 <psee_sensor_destroy+0xfe>
    	uint32_t cpu_ss_clk_div = (cpu_ss_clk_ctrl & CPU_SS_CLK_CTRL_DIV_Msk) >> CPU_SS_CLK_CTRL_DIV_Pos;
 800f1b2:	f3c5 0587 	ubfx	r5, r5, #2, #8
    	clk_freq.cpu_ss_freq = clk_freq.sys_freq / cpu_ss_clk_div;
 800f1b6:	fbb4 f5f5 	udiv	r5, r4, r5
    if (esp_clk_en == 1) {
 800f1ba:	07db      	lsls	r3, r3, #31
 800f1bc:	d506      	bpl.n	800f1cc <psee_sensor_destroy+0x138>
    	uint32_t mipi_csi_clk_ctrl = 0, txclkesc_en = 0;
 800f1be:	2300      	movs	r3, #0
    	psee_sensor_read(MIPI_CSI_CLK_CTRL, &mipi_csi_clk_ctrl);
 800f1c0:	a903      	add	r1, sp, #12
 800f1c2:	f24b 000c 	movw	r0, #45068	@ 0xb00c
    	uint32_t mipi_csi_clk_ctrl = 0, txclkesc_en = 0;
 800f1c6:	9303      	str	r3, [sp, #12]
    	psee_sensor_read(MIPI_CSI_CLK_CTRL, &mipi_csi_clk_ctrl);
 800f1c8:	f7f3 f95c 	bl	8002484 <psee_sensor_read>
	if(clk_freq.sys_freq != clk_freq.cpu_ss_freq) {
 800f1cc:	42ac      	cmp	r4, r5
 800f1ce:	d004      	beq.n	800f1da <psee_sensor_destroy+0x146>
		psee_sensor_write(CPU_SS_CLK_CTRL, (2UL << CPU_SS_CLK_CTRL_DIV_Pos) );
 800f1d0:	2108      	movs	r1, #8
 800f1d2:	f44f 7002 	mov.w	r0, #520	@ 0x208
 800f1d6:	f7f3 f92f 	bl	8002438 <psee_sensor_write>
	if(clk_freq.sys_freq != clk_freq.evt_icn_freq) {
 800f1da:	45a0      	cmp	r8, r4
 800f1dc:	d004      	beq.n	800f1e8 <psee_sensor_destroy+0x154>
		psee_sensor_write(EVT_ICN_CLK_CTRL, (2UL << EVT_ICN_CLK_CTRL_DIV_Pos));
 800f1de:	2108      	movs	r1, #8
 800f1e0:	f44f 7004 	mov.w	r0, #528	@ 0x210
 800f1e4:	f7f3 f928 	bl	8002438 <psee_sensor_write>
	if(clk_freq.pll_vco_freq != 0) {
 800f1e8:	b176      	cbz	r6, 800f208 <psee_sensor_destroy+0x174>
		psee_sensor_write(SYS_CLK_CTRL, 			(1UL << SYS_CLK_CTRL_EN_Pos)  |
 800f1ea:	2101      	movs	r1, #1
 800f1ec:	f44f 7001 	mov.w	r0, #516	@ 0x204
 800f1f0:	f7f3 f922 	bl	8002438 <psee_sensor_write>
		psee_sensor_write(SYS_CLK_CTRL, 			(0UL << SYS_CLK_CTRL_EN_Pos)  |
 800f1f4:	2100      	movs	r1, #0
 800f1f6:	f44f 7001 	mov.w	r0, #516	@ 0x204
 800f1fa:	f7f3 f91d 	bl	8002438 <psee_sensor_write>
		psee_sensor_write(PLL_CTRL, 				(0UL << PLL_CTRL_PL_ENABLE_Pos));
 800f1fe:	2100      	movs	r1, #0
 800f200:	f44f 7005 	mov.w	r0, #532	@ 0x214
 800f204:	f7f3 f918 	bl	8002438 <psee_sensor_write>
	if(clk_freq.sys_freq != clk_freq.cpu_ss_freq) {
 800f208:	42ac      	cmp	r4, r5
 800f20a:	d004      	beq.n	800f216 <psee_sensor_destroy+0x182>
		psee_sensor_write(CPU_SS_CLK_CTRL, 			(0UL << CPU_SS_CLK_CTRL_SWITCH_Pos));
 800f20c:	2100      	movs	r1, #0
 800f20e:	f44f 7002 	mov.w	r0, #520	@ 0x208
 800f212:	f7f3 f911 	bl	8002438 <psee_sensor_write>
	if(clk_freq.sys_freq != clk_freq.evt_icn_freq) {
 800f216:	45a0      	cmp	r8, r4
 800f218:	d004      	beq.n	800f224 <psee_sensor_destroy+0x190>
		psee_sensor_write(EVT_ICN_CLK_CTRL, 		(0UL << EVT_ICN_CLK_CTRL_SWITCH_Pos));
 800f21a:	2100      	movs	r1, #0
 800f21c:	f44f 7004 	mov.w	r0, #528	@ 0x210
 800f220:	f7f3 f90a 	bl	8002438 <psee_sensor_write>
	mipi_dphy_power_down();

	/* PLL power down and switch */
	pll_power_down_and_switch(10);

}
 800f224:	b005      	add	sp, #20
 800f226:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		clk_freq.evt_icn_freq = clk_freq.sys_freq;
 800f22a:	46a0      	mov	r8, r4
 800f22c:	e7b1      	b.n	800f192 <psee_sensor_destroy+0xfe>
	...

0800f230 <psee_sensor_reconfig>:

/**
  * @brief Function to reconfigure the sensor.
  */
void psee_sensor_reconfig() {
 800f230:	b510      	push	{r4, lr}

	/* Execute the DESTROY sequence of the ISSD */
	psee_sensor_destroy();

	/* Execute the INIT sequence of the ISSD */
	init(current_issd);
 800f232:	4c0b      	ldr	r4, [pc, #44]	@ (800f260 <psee_sensor_reconfig+0x30>)
	psee_sensor_destroy();
 800f234:	f7ff ff2e 	bl	800f094 <psee_sensor_destroy>
	init(current_issd);
 800f238:	6823      	ldr	r3, [r4, #0]
	if (issd)
 800f23a:	b11b      	cbz	r3, 800f244 <psee_sensor_reconfig+0x14>
		execute_reg_op_sequence(issd->init);
 800f23c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f240:	f7ff fdbc 	bl	800edbc <execute_reg_op_sequence>

	/* Configure CPI for event streaming */
	psee_sensor_set_CPI_EVT20();
 800f244:	f7ff feef 	bl	800f026 <psee_sensor_set_CPI_EVT20>

	/* Set Standard biases */
	psee_sensor_set_biases(&genx320_default_biases);
 800f248:	4806      	ldr	r0, [pc, #24]	@ (800f264 <psee_sensor_reconfig+0x34>)
 800f24a:	f7ff fdec 	bl	800ee26 <psee_sensor_set_biases>

	/* Start the sensor */
	psee_sensor_start(current_issd);
 800f24e:	6820      	ldr	r0, [r4, #0]
 800f250:	f7ff fde3 	bl	800ee1a <psee_sensor_start>

	/* Set Flip */
	psee_sensor_set_flip(0,0);
 800f254:	2100      	movs	r1, #0

}
 800f256:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	psee_sensor_set_flip(0,0);
 800f25a:	4608      	mov	r0, r1
 800f25c:	f7ff bf00 	b.w	800f060 <psee_sensor_set_flip>
 800f260:	20016b84 	.word	0x20016b84
 800f264:	20016be1 	.word	0x20016be1

0800f268 <psee_PM3C_config>:
	 * ESP 		- ON
	 * CPI 		- ON
	 */

	/* CPI Default Pipeline Setting */
	psee_sensor_write(CPI_PIPELINE_CONTROL, CPI_PIPELINE_CONTROL_ENABLE |							/* Enable Output Interface */
 800f268:	f240 61a1 	movw	r1, #1697	@ 0x6a1
 800f26c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
void psee_PM3C_config() {
 800f270:	b508      	push	{r3, lr}
	psee_sensor_write(CPI_PIPELINE_CONTROL, CPI_PIPELINE_CONTROL_ENABLE |							/* Enable Output Interface */
 800f272:	f7f3 f8e1 	bl	8002438 <psee_sensor_write>
											CPI_PIPELINE_CONTROL_PACKET_FIXED_SIZE_ENABLE |			/* Fixed Packet Size */
											CPI_PIPELINE_CONTROL_FRAME_FIXED_SIZE_ENABLE |			/* Fixed Frame Size */
											CPI_PIPELINE_CONTROL_CLK_OUT_EN							/* Enable Clock Out */
											);

}
 800f276:	bd08      	pop	{r3, pc}

0800f278 <psee_PM2_config>:
	 * ESP 		- OFF
	 * CPI 		- OFF
	 */

	/* CPI Hot Disable */
	psee_sensor_write(CPI_PIPELINE_CONTROL, (0x0UL << CPI_PIPELINE_CONTROL_ENABLE_Pos) |			/* Disable Output Interface */
 800f278:	4903      	ldr	r1, [pc, #12]	@ (800f288 <psee_PM2_config+0x10>)
 800f27a:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
void psee_PM2_config() {
 800f27e:	b508      	push	{r3, lr}
	psee_sensor_write(CPI_PIPELINE_CONTROL, (0x0UL << CPI_PIPELINE_CONTROL_ENABLE_Pos) |			/* Disable Output Interface */
 800f280:	f7f3 f8da 	bl	8002438 <psee_sensor_write>
											CPI_PIPELINE_CONTROL_DROP_NBACKPRESSURE |				/* Drop the back-pressure when the block is disabled */
											CPI_PIPELINE_CONTROL_HOT_DISABLE_ENABLE					/* Hot Disable Mode */
											);

}
 800f284:	bd08      	pop	{r3, pc}
 800f286:	bf00      	nop
 800f288:	00400002 	.word	0x00400002

0800f28c <psee_write_firmware>:
/**
  * @brief  Function to read and flash the firmware from a string.
  * @param  firmwareArray Pointer to the firmware array
  * @param  n_bytes Size of the firmware
  */
FW_StatusTypeDef psee_write_firmware(const Firmware *firmwareArray, uint32_t n_bytes) {
 800f28c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f290:	460c      	mov	r4, r1
 800f292:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c

    /* Check for invalid pointer */
    if (firmwareArray == NULL) {
 800f296:	4606      	mov	r6, r0
 800f298:	2800      	cmp	r0, #0
 800f29a:	d06e      	beq.n	800f37a <psee_write_firmware+0xee>
        return fw_Error_InvalidPointer;
    }

	/* Check for invalid size */
    if (n_bytes == 0) {
 800f29c:	2900      	cmp	r1, #0
 800f29e:	d06e      	beq.n	800f37e <psee_write_firmware+0xf2>
        return fw_Error_InvalidSize;
    }

	uint32_t mem_bank_size[80] = {0};
 800f2a0:	af42      	add	r7, sp, #264	@ 0x108
	uint32_t mem_bank_index = 0;
	uint32_t count = 0;
	uint32_t write_count = 0;

	uint32_t reg;
	uint8_t buff[258] = {0};
 800f2a2:	2500      	movs	r5, #0
	uint32_t mem_bank_size[80] = {0};
 800f2a4:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800f2a8:	2100      	movs	r1, #0
 800f2aa:	4638      	mov	r0, r7
	uint32_t bank = (firmwareArray[0].address - IMEM_START) / 0x100;

	/* Calculate number of Memory banks required and its corresponding size */
	for(uint32_t i = 0; i < n_bytes ; i ++ ){

		if(firmwareArray[i].address == (IMEM_START+0x100) + (mem_bank_index * 0x100) ){
 800f2ac:	f242 0801 	movw	r8, #8193	@ 0x2001
	uint32_t mem_bank_size[80] = {0};
 800f2b0:	f01c f936 	bl	802b520 <memset>
	uint8_t buff[258] = {0};
 800f2b4:	22fe      	movs	r2, #254	@ 0xfe
 800f2b6:	4629      	mov	r1, r5
 800f2b8:	a802      	add	r0, sp, #8
 800f2ba:	9501      	str	r5, [sp, #4]
 800f2bc:	f01c f930 	bl	802b520 <memset>
	uint32_t bank = (firmwareArray[0].address - IMEM_START) / 0x100;
 800f2c0:	6833      	ldr	r3, [r6, #0]
	for(uint32_t i = 0; i < n_bytes ; i ++ ){
 800f2c2:	4629      	mov	r1, r5
	uint32_t bank = (firmwareArray[0].address - IMEM_START) / 0x100;
 800f2c4:	f5a3 1300 	sub.w	r3, r3, #2097152	@ 0x200000
 800f2c8:	ea4f 2c13 	mov.w	ip, r3, lsr #8
			mem_bank_size[mem_bank_index] = count;
			count = 0;
			mem_bank_index ++;

		}else if(firmwareArray[i].address == firmwareArray[n_bytes-1].address)
 800f2cc:	f104 5300 	add.w	r3, r4, #536870912	@ 0x20000000
 800f2d0:	3b01      	subs	r3, #1
 800f2d2:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
	uint32_t count = 0;
 800f2d6:	462b      	mov	r3, r5
		if(firmwareArray[i].address == (IMEM_START+0x100) + (mem_bank_index * 0x100) ){
 800f2d8:	f856 e031 	ldr.w	lr, [r6, r1, lsl #3]
 800f2dc:	eb05 0008 	add.w	r0, r5, r8
 800f2e0:	ebbe 2f00 	cmp.w	lr, r0, lsl #8
 800f2e4:	d11a      	bne.n	800f31c <psee_write_firmware+0x90>
		{
			mem_bank_size[mem_bank_index] = count + 1;
 800f2e6:	f847 3025 	str.w	r3, [r7, r5, lsl #2]
			count = 0;
			mem_bank_index ++;
 800f2ea:	3501      	adds	r5, #1
			count = 0;
 800f2ec:	2300      	movs	r3, #0
	for(uint32_t i = 0; i < n_bytes ; i ++ ){
 800f2ee:	3101      	adds	r1, #1
		}
		count ++;
 800f2f0:	3301      	adds	r3, #1
	for(uint32_t i = 0; i < n_bytes ; i ++ ){
 800f2f2:	428c      	cmp	r4, r1
 800f2f4:	d1f0      	bne.n	800f2d8 <psee_write_firmware+0x4c>
 800f2f6:	f10c 5400 	add.w	r4, ip, #536870912	@ 0x20000000
	uint32_t write_count = 0;
 800f2fa:	f04f 0900 	mov.w	r9, #0
		psee_sensor_write(MEM_BANK_SELECT, ((0x2 << 28) + (bank+b_index)));

		reg = MEM_BANK_MEM0;

		/* Send the Register Address */
		buff[0] = (uint8_t)((reg & 0x0000ff00) >> 8);
 800f2fe:	f04f 08f9 	mov.w	r8, #249	@ 0xf9
 800f302:	4425      	add	r5, r4
	for(uint32_t b_index = 0; b_index < mem_bank_index; b_index++)
 800f304:	42ac      	cmp	r4, r5
 800f306:	d10e      	bne.n	800f326 <psee_write_firmware+0x9a>
		psee_sensor_sequential_write(buff,((mem_bank_size[b_index]*4)+2));

	}

	/* Reset Memory Bank */
	psee_sensor_write(MEM_BANK_SELECT, 0x00000000);
 800f308:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 800f30c:	2100      	movs	r1, #0
 800f30e:	f7f3 f893 	bl	8002438 <psee_sensor_write>

	return fw_OK;
 800f312:	2000      	movs	r0, #0
}
 800f314:	f50d 7d13 	add.w	sp, sp, #588	@ 0x24c
 800f318:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		}else if(firmwareArray[i].address == firmwareArray[n_bytes-1].address)
 800f31c:	6810      	ldr	r0, [r2, #0]
 800f31e:	4586      	cmp	lr, r0
 800f320:	d1e5      	bne.n	800f2ee <psee_write_firmware+0x62>
			mem_bank_size[mem_bank_index] = count + 1;
 800f322:	3301      	adds	r3, #1
 800f324:	e7df      	b.n	800f2e6 <psee_write_firmware+0x5a>
		psee_sensor_write(MEM_BANK_SELECT, ((0x2 << 28) + (bank+b_index)));
 800f326:	4621      	mov	r1, r4
 800f328:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 800f32c:	f7f3 f884 	bl	8002438 <psee_sensor_write>
		for(uint32_t d_index = 0; d_index < mem_bank_size[b_index] ; d_index ++)
 800f330:	f857 1b04 	ldr.w	r1, [r7], #4
 800f334:	eb06 02c9 	add.w	r2, r6, r9, lsl #3
 800f338:	ab01      	add	r3, sp, #4
 800f33a:	4489      	add	r9, r1
		buff[0] = (uint8_t)((reg & 0x0000ff00) >> 8);
 800f33c:	f8ad 8004 	strh.w	r8, [sp, #4]
		for(uint32_t d_index = 0; d_index < mem_bank_size[b_index] ; d_index ++)
 800f340:	eb06 0cc9 	add.w	ip, r6, r9, lsl #3
 800f344:	4562      	cmp	r2, ip
 800f346:	d107      	bne.n	800f358 <psee_write_firmware+0xcc>
		psee_sensor_sequential_write(buff,((mem_bank_size[b_index]*4)+2));
 800f348:	0089      	lsls	r1, r1, #2
 800f34a:	a801      	add	r0, sp, #4
 800f34c:	3401      	adds	r4, #1
 800f34e:	3102      	adds	r1, #2
 800f350:	b289      	uxth	r1, r1
 800f352:	f7f3 f8f3 	bl	800253c <psee_sensor_sequential_write>
	for(uint32_t b_index = 0; b_index < mem_bank_index; b_index++)
 800f356:	e7d5      	b.n	800f304 <psee_write_firmware+0x78>
			buff[2 + (d_index*4)] = (uint8_t)((firmwareArray[write_count].value & 0xff000000) >> 24);
 800f358:	6850      	ldr	r0, [r2, #4]
 800f35a:	3304      	adds	r3, #4
 800f35c:	3208      	adds	r2, #8
 800f35e:	ea4f 6e10 	mov.w	lr, r0, lsr #24
			buff[5 + (d_index*4)] = (uint8_t)(firmwareArray[write_count].value & 0x000000ff);
 800f362:	7058      	strb	r0, [r3, #1]
			buff[2 + (d_index*4)] = (uint8_t)((firmwareArray[write_count].value & 0xff000000) >> 24);
 800f364:	f803 ec02 	strb.w	lr, [r3, #-2]
			buff[3 + (d_index*4)] = (uint8_t)((firmwareArray[write_count].value & 0x00ff0000) >> 16);
 800f368:	ea4f 4e10 	mov.w	lr, r0, lsr #16
 800f36c:	f803 ec01 	strb.w	lr, [r3, #-1]
			buff[4 + (d_index*4)] = (uint8_t)((firmwareArray[write_count].value & 0x0000ff00) >> 8);
 800f370:	ea4f 2e10 	mov.w	lr, r0, lsr #8
 800f374:	f883 e000 	strb.w	lr, [r3]
		for(uint32_t d_index = 0; d_index < mem_bank_size[b_index] ; d_index ++)
 800f378:	e7e4      	b.n	800f344 <psee_write_firmware+0xb8>
        return fw_Error_InvalidPointer;
 800f37a:	2002      	movs	r0, #2
 800f37c:	e7ca      	b.n	800f314 <psee_write_firmware+0x88>
        return fw_Error_InvalidSize;
 800f37e:	2001      	movs	r0, #1
 800f380:	e7c8      	b.n	800f314 <psee_write_firmware+0x88>

0800f382 <psee_reset_firmware>:
  * @retval FW status
  */
FW_StatusTypeDef psee_reset_firmware(Boot_Mode boot_mode) {

	/* Check the boot mode and reset the FW accordingly */
	if(boot_mode == IMEM_BOOT) {
 800f382:	2801      	cmp	r0, #1
FW_StatusTypeDef psee_reset_firmware(Boot_Mode boot_mode) {
 800f384:	b510      	push	{r4, lr}
 800f386:	4604      	mov	r4, r0
	if(boot_mode == IMEM_BOOT) {
 800f388:	d10b      	bne.n	800f3a2 <psee_reset_firmware+0x20>
	psee_sensor_write(MBX_CPU_START_EN, (0UL << MBX_CPU_START_EN_Pos));
 800f38a:	2100      	movs	r1, #0
 800f38c:	f44f 4070 	mov.w	r0, #61440	@ 0xf000
 800f390:	f7f3 f852 	bl	8002438 <psee_sensor_write>
	psee_sensor_write(MBX_CPU_SOFT_RESET, MBX_CPU_SOFT_RESET_Msk);
 800f394:	4621      	mov	r1, r4
 800f396:	f24f 0004 	movw	r0, #61444	@ 0xf004
 800f39a:	f7f3 f84d 	bl	8002438 <psee_sensor_write>
	}
	else if(boot_mode == ROM_BOOT) {
		psee_reset_fw_rom();
	}
	return fw_OK;
}
 800f39e:	2000      	movs	r0, #0
 800f3a0:	bd10      	pop	{r4, pc}
	else if(boot_mode == ROM_BOOT) {
 800f3a2:	2800      	cmp	r0, #0
 800f3a4:	d1fb      	bne.n	800f39e <psee_reset_firmware+0x1c>
	psee_sensor_write(MBX_CPU_SOFT_RESET, MBX_CPU_SOFT_RESET_Msk);
 800f3a6:	2101      	movs	r1, #1
 800f3a8:	f24f 0004 	movw	r0, #61444	@ 0xf004
 800f3ac:	f7f3 f844 	bl	8002438 <psee_sensor_write>
	psee_sleep_ms_imp(1);
 800f3b0:	2001      	movs	r0, #1
 800f3b2:	f7f3 f83f 	bl	8002434 <psee_sleep_ms_imp>
	return fw_OK;
 800f3b6:	e7f2      	b.n	800f39e <psee_reset_firmware+0x1c>

0800f3b8 <psee_get_mbx_misc>:
/**
  * @brief  Function to read the 32-bit value from the Mailbox misc register.
  * @retval  Value of Mailbox misc register
  */
uint32_t psee_get_mbx_misc() {
	uint32_t mbx_misc = 0;
 800f3b8:	2300      	movs	r3, #0
uint32_t psee_get_mbx_misc() {
 800f3ba:	b507      	push	{r0, r1, r2, lr}
	psee_sensor_read(MBX_MISC, &mbx_misc);
 800f3bc:	f24f 0010 	movw	r0, #61456	@ 0xf010
 800f3c0:	a901      	add	r1, sp, #4
	uint32_t mbx_misc = 0;
 800f3c2:	9301      	str	r3, [sp, #4]
	psee_sensor_read(MBX_MISC, &mbx_misc);
 800f3c4:	f7f3 f85e 	bl	8002484 <psee_sensor_read>
	return mbx_misc;
}
 800f3c8:	9801      	ldr	r0, [sp, #4]
 800f3ca:	b003      	add	sp, #12
 800f3cc:	f85d fb04 	ldr.w	pc, [sp], #4

0800f3d0 <psee_open_evt>:
const struct issd *psee_open_evt() {
 800f3d0:	b513      	push	{r0, r1, r4, lr}
	psee_sensor_platform_init();
 800f3d2:	f7f3 f8cd 	bl	8002570 <psee_sensor_platform_init>
	psee_sleep_ms_imp(100);
 800f3d6:	2064      	movs	r0, #100	@ 0x64
 800f3d8:	f7f3 f82c 	bl	8002434 <psee_sleep_ms_imp>
   psee_sensor_read(SAPHIR_CHIP_ID, &chip_id);
 800f3dc:	a901      	add	r1, sp, #4
 800f3de:	2014      	movs	r0, #20
 800f3e0:	4c17      	ldr	r4, [pc, #92]	@ (800f440 <psee_open_evt+0x70>)
 800f3e2:	f7f3 f84f 	bl	8002484 <psee_sensor_read>
   printf("Sensor ID : %lX \n\r",chip_id);
 800f3e6:	9901      	ldr	r1, [sp, #4]
 800f3e8:	4816      	ldr	r0, [pc, #88]	@ (800f444 <psee_open_evt+0x74>)
 800f3ea:	f01b ffaf 	bl	802b34c <iprintf>
   if ((chip_id != SAPHIR_MP_ID) && (chip_id != SAPHIR_ES_ID)) {
 800f3ee:	9b01      	ldr	r3, [sp, #4]
 800f3f0:	4a15      	ldr	r2, [pc, #84]	@ (800f448 <psee_open_evt+0x78>)
 800f3f2:	4293      	cmp	r3, r2
 800f3f4:	d002      	beq.n	800f3fc <psee_open_evt+0x2c>
 800f3f6:	42a3      	cmp	r3, r4
 800f3f8:	d000      	beq.n	800f3fc <psee_open_evt+0x2c>
       while(1);
 800f3fa:	e7fe      	b.n	800f3fa <psee_open_evt+0x2a>
	uint32_t boot_value = psee_get_mbx_misc();
 800f3fc:	f7ff ffdc 	bl	800f3b8 <psee_get_mbx_misc>
	if(boot_value == 0) {
 800f400:	fab0 f080 	clz	r0, r0
 800f404:	4b11      	ldr	r3, [pc, #68]	@ (800f44c <psee_open_evt+0x7c>)
 800f406:	0940      	lsrs	r0, r0, #5
 800f408:	7018      	strb	r0, [r3, #0]
   psee_sensor_write(TOP_CHICKEN, 0x03E8000A); //EVT
 800f40a:	2064      	movs	r0, #100	@ 0x64
   if(chip_id == SAPHIR_ES_ID) {
 800f40c:	9b01      	ldr	r3, [sp, #4]
 800f40e:	42a3      	cmp	r3, r4
 800f410:	4b0f      	ldr	r3, [pc, #60]	@ (800f450 <psee_open_evt+0x80>)
		execute_reg_op_sequence(issd->init);
 800f412:	4c10      	ldr	r4, [pc, #64]	@ (800f454 <psee_open_evt+0x84>)
	   genx320_default_biases = genx320es_default_biases;
 800f414:	bf0c      	ite	eq
 800f416:	4910      	ldreq	r1, [pc, #64]	@ (800f458 <psee_open_evt+0x88>)
	   genx320_default_biases = genx320mp_default_biases;
 800f418:	4910      	ldrne	r1, [pc, #64]	@ (800f45c <psee_open_evt+0x8c>)
 800f41a:	680a      	ldr	r2, [r1, #0]
 800f41c:	601a      	str	r2, [r3, #0]
 800f41e:	684a      	ldr	r2, [r1, #4]
 800f420:	605a      	str	r2, [r3, #4]
 800f422:	688a      	ldr	r2, [r1, #8]
   psee_sensor_write(TOP_CHICKEN, 0x03E8000A); //EVT
 800f424:	490e      	ldr	r1, [pc, #56]	@ (800f460 <psee_open_evt+0x90>)
	   genx320_default_biases = genx320mp_default_biases;
 800f426:	609a      	str	r2, [r3, #8]
   psee_sensor_write(TOP_CHICKEN, 0x03E8000A); //EVT
 800f428:	f7f3 f806 	bl	8002438 <psee_sensor_write>
		execute_reg_op_sequence(issd->init);
 800f42c:	e894 0003 	ldmia.w	r4, {r0, r1}
 800f430:	f7ff fcc4 	bl	800edbc <execute_reg_op_sequence>
   psee_sensor_set_CPI_EVT20();
 800f434:	f7ff fdf7 	bl	800f026 <psee_sensor_set_CPI_EVT20>
}
 800f438:	4620      	mov	r0, r4
 800f43a:	b002      	add	sp, #8
 800f43c:	bd10      	pop	{r4, pc}
 800f43e:	bf00      	nop
 800f440:	30501c01 	.word	0x30501c01
 800f444:	080412fd 	.word	0x080412fd
 800f448:	b0602003 	.word	0xb0602003
 800f44c:	20016be0 	.word	0x20016be0
 800f450:	20016be1 	.word	0x20016be1
 800f454:	08041328 	.word	0x08041328
 800f458:	0804131c 	.word	0x0804131c
 800f45c:	08041310 	.word	0x08041310
 800f460:	03e8000a 	.word	0x03e8000a

0800f464 <psee_start_firmware>:
	if(boot_mode == IMEM_BOOT) {
 800f464:	2801      	cmp	r0, #1
FW_StatusTypeDef psee_start_firmware(Boot_Mode boot_mode) {
 800f466:	b510      	push	{r4, lr}
 800f468:	4604      	mov	r4, r0
	if(boot_mode == IMEM_BOOT) {
 800f46a:	d10b      	bne.n	800f484 <psee_start_firmware+0x20>
	psee_sensor_write(MBX_CPU_SOFT_RESET, (0UL << MBX_CPU_SOFT_RESET_Pos) );
 800f46c:	2100      	movs	r1, #0
 800f46e:	f24f 0004 	movw	r0, #61444	@ 0xf004
 800f472:	f7f2 ffe1 	bl	8002438 <psee_sensor_write>
	psee_sensor_write(MBX_CPU_START_EN, MBX_CPU_START_EN_Msk);
 800f476:	4621      	mov	r1, r4
 800f478:	f44f 4070 	mov.w	r0, #61440	@ 0xf000
 800f47c:	f7f2 ffdc 	bl	8002438 <psee_sensor_write>
}
 800f480:	2000      	movs	r0, #0
 800f482:	bd10      	pop	{r4, pc}
	else if(boot_mode == ROM_BOOT) {
 800f484:	2800      	cmp	r0, #0
 800f486:	d1fb      	bne.n	800f480 <psee_start_firmware+0x1c>
	while(mbx_misc_val != 0xCAFEBABE) {
 800f488:	4c0c      	ldr	r4, [pc, #48]	@ (800f4bc <psee_start_firmware+0x58>)
	psee_sensor_write(MBX_CPU_SOFT_RESET, (0UL << MBX_CPU_SOFT_RESET_Pos));
 800f48a:	4601      	mov	r1, r0
 800f48c:	f24f 0004 	movw	r0, #61444	@ 0xf004
 800f490:	f7f2 ffd2 	bl	8002438 <psee_sensor_write>
	uint32_t mbx_misc_val = psee_get_mbx_misc();
 800f494:	f7ff ff90 	bl	800f3b8 <psee_get_mbx_misc>
	while(mbx_misc_val != 0xCAFEBABE) {
 800f498:	42a0      	cmp	r0, r4
 800f49a:	d10b      	bne.n	800f4b4 <psee_start_firmware+0x50>
	psee_sensor_reconfig();
 800f49c:	f7ff fec8 	bl	800f230 <psee_sensor_reconfig>
	psee_sensor_write(MBX_CMD_PTR, (0x7 << 28) | 0x200200);
 800f4a0:	4907      	ldr	r1, [pc, #28]	@ (800f4c0 <psee_start_firmware+0x5c>)
 800f4a2:	f24f 0008 	movw	r0, #61448	@ 0xf008
 800f4a6:	f7f2 ffc7 	bl	8002438 <psee_sensor_write>
		mbx_val = psee_get_mbx_misc();
 800f4aa:	f7ff ff85 	bl	800f3b8 <psee_get_mbx_misc>
	while(mbx_val == 0xCAFEBABE) {
 800f4ae:	42a0      	cmp	r0, r4
 800f4b0:	d0fb      	beq.n	800f4aa <psee_start_firmware+0x46>
 800f4b2:	e7e5      	b.n	800f480 <psee_start_firmware+0x1c>
		mbx_misc_val = psee_get_mbx_misc();
 800f4b4:	f7ff ff80 	bl	800f3b8 <psee_get_mbx_misc>
 800f4b8:	e7ee      	b.n	800f498 <psee_start_firmware+0x34>
 800f4ba:	bf00      	nop
 800f4bc:	cafebabe 	.word	0xcafebabe
 800f4c0:	70200200 	.word	0x70200200

0800f4c4 <psee_set_mbx_misc>:

/**
  * @brief  Function to write a 32-bit value on the Mailbox misc register.
  * @param  val Data to be written on the Mailbox misc register
  */
void psee_set_mbx_misc(uint32_t val) {
 800f4c4:	4601      	mov	r1, r0
	psee_sensor_write(MBX_MISC, val);
 800f4c6:	f24f 0010 	movw	r0, #61456	@ 0xf010
void psee_set_mbx_misc(uint32_t val) {
 800f4ca:	b508      	push	{r3, lr}
	psee_sensor_write(MBX_MISC, val);
 800f4cc:	f7f2 ffb4 	bl	8002438 <psee_sensor_write>
}
 800f4d0:	bd08      	pop	{r3, pc}

0800f4d2 <psee_read_ro_lp_evt_cnt>:
  */
void psee_read_ro_lp_evt_cnt(uint32_t *p_data) {

	uint16_t total_counters = 16;
	uint32_t start_address = RO_LP_CNT00;
	uint32_t ro_shadow_status = 0;
 800f4d2:	2300      	movs	r3, #0
void psee_read_ro_lp_evt_cnt(uint32_t *p_data) {
 800f4d4:	b513      	push	{r0, r1, r4, lr}
 800f4d6:	4604      	mov	r4, r0

	/* Check if shadow status is valid */
	psee_sensor_read(RO_SHADOW_STATUS, &ro_shadow_status);
 800f4d8:	a901      	add	r1, sp, #4
 800f4da:	f249 005c 	movw	r0, #36956	@ 0x905c
	uint32_t ro_shadow_status = 0;
 800f4de:	9301      	str	r3, [sp, #4]
	psee_sensor_read(RO_SHADOW_STATUS, &ro_shadow_status);
 800f4e0:	f7f2 ffd0 	bl	8002484 <psee_sensor_read>
	while((ro_shadow_status & 1) != 1) {
 800f4e4:	9b01      	ldr	r3, [sp, #4]
 800f4e6:	07db      	lsls	r3, r3, #31
 800f4e8:	d507      	bpl.n	800f4fa <psee_read_ro_lp_evt_cnt+0x28>
		psee_sensor_read(RO_SHADOW_STATUS, &ro_shadow_status );
		psee_sleep_ms_imp(1);
	}

	/* If shadow status is valid read the counter values*/
	psee_sensor_sequential_read(start_address, p_data, total_counters);
 800f4ea:	2210      	movs	r2, #16
 800f4ec:	4621      	mov	r1, r4
 800f4ee:	f44f 4012 	mov.w	r0, #37376	@ 0x9200
 800f4f2:	f7f2 fff1 	bl	80024d8 <psee_sensor_sequential_read>

}
 800f4f6:	b002      	add	sp, #8
 800f4f8:	bd10      	pop	{r4, pc}
		psee_sensor_read(RO_SHADOW_STATUS, &ro_shadow_status );
 800f4fa:	a901      	add	r1, sp, #4
 800f4fc:	f249 005c 	movw	r0, #36956	@ 0x905c
 800f500:	f7f2 ffc0 	bl	8002484 <psee_sensor_read>
		psee_sleep_ms_imp(1);
 800f504:	2001      	movs	r0, #1
 800f506:	f7f2 ff95 	bl	8002434 <psee_sleep_ms_imp>
 800f50a:	e7eb      	b.n	800f4e4 <psee_read_ro_lp_evt_cnt+0x12>

0800f50c <psee_read_ro_evt_cd_cnt>:

/**
  * @brief  Reads the value from the RO_EVT_CD_CNT register
  * @retval  Value of the RO_EVT_CD_CNT register
  */
uint32_t psee_read_ro_evt_cd_cnt() {
 800f50c:	b507      	push	{r0, r1, r2, lr}
	uint32_t evt_cd_cnt;

	psee_sensor_read(RO_EVT_CD_CNT, &evt_cd_cnt);
 800f50e:	f249 2044 	movw	r0, #37444	@ 0x9244
 800f512:	a901      	add	r1, sp, #4
 800f514:	f7f2 ffb6 	bl	8002484 <psee_sensor_read>
	return evt_cd_cnt;
}
 800f518:	9801      	ldr	r0, [sp, #4]
 800f51a:	b003      	add	sp, #12
 800f51c:	f85d fb04 	ldr.w	pc, [sp], #4

0800f520 <psee_read_afk_flicker_evt_cnt>:

/**
  * @brief  Reads the value from the AFK_FLICKER_EVT_CNT register
  * @retval  Value of the AFK_FLICKER_EVT_CNT register
  */
uint32_t psee_read_afk_flicker_evt_cnt() {
 800f520:	b507      	push	{r0, r1, r2, lr}
	uint32_t flicker_evt_cnt;

	psee_sensor_read(AFK_FLICKER_EVT_CNT, &flicker_evt_cnt);
 800f522:	f24c 00e4 	movw	r0, #49380	@ 0xc0e4
 800f526:	a901      	add	r1, sp, #4
 800f528:	f7f2 ffac 	bl	8002484 <psee_sensor_read>
	return flicker_evt_cnt;
}
 800f52c:	9801      	ldr	r0, [sp, #4]
 800f52e:	b003      	add	sp, #12
 800f530:	f85d fb04 	ldr.w	pc, [sp], #4

0800f534 <psee_read_afk_total_evt_cnt>:

/**
  * @brief  Reads the value from the AFK_TOTAL_EVT_CNT register
  * @retval  Value of the AFK_TOTAL_EVT_CNT register
  */
uint32_t psee_read_afk_total_evt_cnt() {
 800f534:	b507      	push	{r0, r1, r2, lr}
	uint32_t total_evt_cnt;

	psee_sensor_read(AFK_TOTAL_EVT_CNT, &total_evt_cnt);
 800f536:	f24c 00e0 	movw	r0, #49376	@ 0xc0e0
 800f53a:	a901      	add	r1, sp, #4
 800f53c:	f7f2 ffa2 	bl	8002484 <psee_sensor_read>
	return total_evt_cnt;
}
 800f540:	9801      	ldr	r0, [sp, #4]
 800f542:	b003      	add	sp, #12
 800f544:	f85d fb04 	ldr.w	pc, [sp], #4

0800f548 <psee_configure_activity_map>:
  */

/**
  * @brief  Function to enable and configure the Activity map
  */
void psee_configure_activity_map() {
 800f548:	b508      	push	{r3, lr}

	/* Enable Low power control*/
	psee_sensor_write(RO_RO_LP_CTRL, 	RO_LP_CTRL_CNT_EN |												/* Enable the 16 event counters */
 800f54a:	2105      	movs	r1, #5
 800f54c:	f249 0028 	movw	r0, #36904	@ 0x9028
 800f550:	f7f2 ff72 	bl	8002438 <psee_sensor_write>
										RO_LP_CTRL_KEEP_TH												/* Keep timer high and trash all the rest when in lp_out_disable mode */
										);

	/* Enable Shadow control*/
	psee_sensor_write(RO_SHADOW_CTRL,	RO_SHADOW_CTRL_TIMER_EN |										/* Enable microsecond-based timer */
 800f554:	2105      	movs	r1, #5
 800f556:	f249 0054 	movw	r0, #36948	@ 0x9054
 800f55a:	f7f2 ff6d 	bl	8002438 <psee_sensor_write>
										RO_SHADOW_CTRL_RESET_ON_COPY									/* Reset the counters after a copy&reset IRQ */
										);

	/* Set Shadow Timer Threshold - Accumulation Time */
	psee_sensor_write(RO_SHADOW_TIMER_THRESHOLD,25000);
 800f55e:	f246 11a8 	movw	r1, #25000	@ 0x61a8
 800f562:	f249 0058 	movw	r0, #36952	@ 0x9058
 800f566:	f7f2 ff67 	bl	8002438 <psee_sensor_write>
}
 800f56a:	bd08      	pop	{r3, pc}

0800f56c <psee_set_default_XY_borders>:
};

/**
  * @brief  Function to set the default X and Y borders for the Activity map
  */
void psee_set_default_XY_borders(AM_Borders_t *border) {
 800f56c:	b510      	push	{r4, lr}
 800f56e:	4604      	mov	r4, r0

	/* Set the default X borders */
	psee_sensor_write(RO_LP_X0, border->x0);
 800f570:	8801      	ldrh	r1, [r0, #0]
 800f572:	f249 002c 	movw	r0, #36908	@ 0x902c
 800f576:	f7f2 ff5f 	bl	8002438 <psee_sensor_write>
	psee_sensor_write(RO_LP_X1, border->x1);
 800f57a:	8861      	ldrh	r1, [r4, #2]
 800f57c:	f249 0030 	movw	r0, #36912	@ 0x9030
 800f580:	f7f2 ff5a 	bl	8002438 <psee_sensor_write>
	psee_sensor_write(RO_LP_X2, border->x2);
 800f584:	88a1      	ldrh	r1, [r4, #4]
 800f586:	f249 0034 	movw	r0, #36916	@ 0x9034
 800f58a:	f7f2 ff55 	bl	8002438 <psee_sensor_write>
	psee_sensor_write(RO_LP_X3, border->x3);
 800f58e:	88e1      	ldrh	r1, [r4, #6]
 800f590:	f249 0038 	movw	r0, #36920	@ 0x9038
 800f594:	f7f2 ff50 	bl	8002438 <psee_sensor_write>
	psee_sensor_write(RO_LP_X4, border->x4);
 800f598:	8921      	ldrh	r1, [r4, #8]
 800f59a:	f249 003c 	movw	r0, #36924	@ 0x903c
 800f59e:	f7f2 ff4b 	bl	8002438 <psee_sensor_write>

	/* Set the default Y borders */
	psee_sensor_write(RO_LP_Y0, border->y0);
 800f5a2:	8961      	ldrh	r1, [r4, #10]
 800f5a4:	f249 0040 	movw	r0, #36928	@ 0x9040
 800f5a8:	f7f2 ff46 	bl	8002438 <psee_sensor_write>
	psee_sensor_write(RO_LP_Y1, border->y1);
 800f5ac:	89a1      	ldrh	r1, [r4, #12]
 800f5ae:	f249 0044 	movw	r0, #36932	@ 0x9044
 800f5b2:	f7f2 ff41 	bl	8002438 <psee_sensor_write>
	psee_sensor_write(RO_LP_Y2, border->y2);
 800f5b6:	89e1      	ldrh	r1, [r4, #14]
 800f5b8:	f249 0048 	movw	r0, #36936	@ 0x9048
 800f5bc:	f7f2 ff3c 	bl	8002438 <psee_sensor_write>
	psee_sensor_write(RO_LP_Y3, border->y3);
 800f5c0:	8a21      	ldrh	r1, [r4, #16]
 800f5c2:	f249 004c 	movw	r0, #36940	@ 0x904c
 800f5c6:	f7f2 ff37 	bl	8002438 <psee_sensor_write>
	psee_sensor_write(RO_LP_Y4, border->y4);
 800f5ca:	8a61      	ldrh	r1, [r4, #18]
 800f5cc:	f249 0050 	movw	r0, #36944	@ 0x9050
 800f5d0:	f7f2 ff32 	bl	8002438 <psee_sensor_write>

}
 800f5d4:	bd10      	pop	{r4, pc}
	...

0800f5d8 <psee_enable_afk>:
}

/**
  * @brief  Function to enable and configure the Anti-Flickering Filter(AFK)
  */
volatile void psee_enable_afk(uint16_t min_freq, uint16_t max_freq) {
 800f5d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f5da:	460d      	mov	r5, r1

	/* Disable/bypass the block in order to configure AFK parameters */
	psee_sensor_write(AFK_PIPELINE_CONTROL, AFK_PIPELINE_CONTROL_BYPASS);							/* Bypass the block */

	/* SRAM Powerup */
	uint32_t sram_initn = 0;
 800f5dc:	2600      	movs	r6, #0
volatile void psee_enable_afk(uint16_t min_freq, uint16_t max_freq) {
 800f5de:	4604      	mov	r4, r0
	psee_sensor_write(AFK_PIPELINE_CONTROL, AFK_PIPELINE_CONTROL_BYPASS);							/* Bypass the block */
 800f5e0:	2104      	movs	r1, #4
 800f5e2:	f44f 4040 	mov.w	r0, #49152	@ 0xc000
 800f5e6:	f7f2 ff27 	bl	8002438 <psee_sensor_write>
	psee_sensor_read(SRAM_INITN, &sram_initn);
 800f5ea:	a901      	add	r1, sp, #4
 800f5ec:	20b8      	movs	r0, #184	@ 0xb8
	uint32_t sram_initn = 0;
 800f5ee:	9601      	str	r6, [sp, #4]
	psee_sensor_read(SRAM_INITN, &sram_initn);
 800f5f0:	f7f2 ff48 	bl	8002484 <psee_sensor_read>
	psee_sensor_write(SRAM_INITN, 			sram_initn |											/* Previous State of SRAM_INITN */
 800f5f4:	9901      	ldr	r1, [sp, #4]
 800f5f6:	20b8      	movs	r0, #184	@ 0xb8
 800f5f8:	f041 0101 	orr.w	r1, r1, #1
 800f5fc:	f7f2 ff1c 	bl	8002438 <psee_sensor_write>
											(1UL << SRAM_INITN_AFK_Pos)								/* Initialize the memory state machine : AFK's SRAM control init_n */
											);

	psee_sensor_write(SRAM_PD0, 			(0UL << SRAM_PD0_AFK_ALR_PD_Pos) |						/* SRAM's Power Down Register : 0 - AFK's SRAM cuts are supplied */
 800f600:	4631      	mov	r1, r6
 800f602:	20bc      	movs	r0, #188	@ 0xbc
 800f604:	f7f2 ff18 	bl	8002438 <psee_sensor_write>
	uint32_t period = 1000000 / freq;
 800f608:	4b25      	ldr	r3, [pc, #148]	@ (800f6a0 <psee_enable_afk+0xc8>)
											);

	/* Set the AFK Frequency Bandwidth */
	uint32_t min_period = psee_freq_to_period(max_freq);
	uint32_t max_period = psee_freq_to_period(min_freq);
	psee_sensor_write(AFK_FILTER_PERIOD, 	(min_period << AFK_FILTER_PERIOD_MIN_CUTOFF_Pos) |		/* AntiFlickering Filter : Minimum cutoff period of undesired flickering light */
 800f60a:	f24c 000c 	movw	r0, #49164	@ 0xc00c
	uint32_t period = 1000000 / freq;
 800f60e:	fbb3 f4f4 	udiv	r4, r3, r4
 800f612:	fbb3 f3f5 	udiv	r3, r3, r5
    return period >> 7;
 800f616:	09e4      	lsrs	r4, r4, #7
											(max_period << AFK_FILTER_PERIOD_MAX_CUTOFF_Pos) |		/* AntiFlickering Filter : Maximum  cutoff period of undesired flickering light */
 800f618:	0221      	lsls	r1, r4, #8
	psee_sensor_write(AFK_FILTER_PERIOD, 	(min_period << AFK_FILTER_PERIOD_MIN_CUTOFF_Pos) |		/* AntiFlickering Filter : Minimum cutoff period of undesired flickering light */
 800f61a:	ea41 11d3 	orr.w	r1, r1, r3, lsr #7
 800f61e:	f441 2100 	orr.w	r1, r1, #524288	@ 0x80000
 800f622:	f7f2 ff09 	bl	8002438 <psee_sensor_write>
        (((2 << 15) - (128 * (3 + max_cutoff_period))) * in_parallel * 1000) / (160 * 5 * clk_period_ns);
 800f626:	481f      	ldr	r0, [pc, #124]	@ (800f6a4 <psee_enable_afk+0xcc>)
 800f628:	4b1f      	ldr	r3, [pc, #124]	@ (800f6a8 <psee_enable_afk+0xd0>)
 800f62a:	4360      	muls	r0, r4
 800f62c:	f100 7078 	add.w	r0, r0, #65011712	@ 0x3e00000
 800f630:	f500 3009 	add.w	r0, r0, #140288	@ 0x22400
 800f634:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800f638:	fbb0 f0f3 	udiv	r0, r0, r3
    result.df_timeout = floor(invalidation_period) - result.df_wait_time;
 800f63c:	ee07 0a90 	vmov	s15, r0
 800f640:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f644:	ee17 0a90 	vmov	r0, s15
 800f648:	f7f0 ff9e 	bl	8000588 <__aeabi_f2d>
 800f64c:	2200      	movs	r2, #0
 800f64e:	4b17      	ldr	r3, [pc, #92]	@ (800f6ac <psee_enable_afk+0xd4>)
 800f650:	f7f0 fe3a 	bl	80002c8 <__aeabi_dsub>
 800f654:	f7f1 fac8 	bl	8000be8 <__aeabi_d2uiz>
    if (result.df_timeout > 4095) {
 800f658:	f640 73ff 	movw	r3, #4095	@ 0xfff
											);

	/* Configure the AFK Invalidation */
	afk_invalidation = compute_invalidation(max_period,10);

	psee_sensor_write(AFK_INVALIDATION, 	(afk_invalidation.df_wait_time << AFK_INVALIDATION_DT_FIFO_WAIT_TIME_Pos) |		/* Deadtime fifo wait time, in unit of clock cycle */
 800f65c:	4914      	ldr	r1, [pc, #80]	@ (800f6b0 <psee_enable_afk+0xd8>)
    if (result.df_timeout > 4095) {
 800f65e:	4298      	cmp	r0, r3
 800f660:	bf28      	it	cs
 800f662:	4618      	movcs	r0, r3
	psee_sensor_write(AFK_INVALIDATION, 	(afk_invalidation.df_wait_time << AFK_INVALIDATION_DT_FIFO_WAIT_TIME_Pos) |		/* Deadtime fifo wait time, in unit of clock cycle */
 800f664:	ea41 3100 	orr.w	r1, r1, r0, lsl #12
 800f668:	f24c 00c0 	movw	r0, #49344	@ 0xc0c0
 800f66c:	f7f2 fee4 	bl	8002438 <psee_sensor_write>
											(afk_invalidation.df_timeout << AFK_INVALIDATION_DT_FIFO_TIMEOUT_Pos) |			/* Deadtime fifo time out, in unit of clock cycles */
											(5UL << AFK_INVALIDATION_IN_PARALLEL_Pos)										/* Number of ram invalidated together this is then changed into one hot, in unit of SRAM cut on parallel */
											);

	/* Configure the AFK parameters */
	psee_sensor_write(AFK_AFK_PARAM, 		(6UL << AFK_PARAM_COUNTER_HIGH_Pos) |					/* Hysteresis threshold above which we consider the block flickering */
 800f670:	2134      	movs	r1, #52	@ 0x34
 800f672:	f24c 0008 	movw	r0, #49160	@ 0xc008
 800f676:	f7f2 fedf 	bl	8002438 <psee_sensor_write>
											(4UL << AFK_PARAM_COUNTER_LOW_Pos) |					/* Hysteresis threshold below which we consider the block is not flickering anymore */
											(0UL << AFK_PARAM_INVERT_Pos)							/* Invert the output of anti-flicker filter : 0 No-flickering event pass */
											);

	/* Configure the Atomic Register */
	psee_sensor_write(AFK_SHADOW_CTRL, 		AFK_SHADOW_CTRL_TIMER_EN |								/* Enable Microsecond-based Timer */
 800f67a:	2105      	movs	r1, #5
 800f67c:	f24c 00d4 	movw	r0, #49364	@ 0xc0d4
 800f680:	f7f2 feda 	bl	8002438 <psee_sensor_write>
											AFK_SHADOW_CTRL_RESET_ON_COPY							/* Reset the Counters after a copy&reset IRQ */
											);

	/* Set Shadow Timer Threshold - Accumulation Time */
	psee_sensor_write(AFK_SHADOW_TIMER_THRESHOLD, 20000UL);											/* Accumulation time in Microseconds */
 800f684:	f644 6120 	movw	r1, #20000	@ 0x4e20
 800f688:	f24c 00d8 	movw	r0, #49368	@ 0xc0d8
 800f68c:	f7f2 fed4 	bl	8002438 <psee_sensor_write>

	/* Enable the AFK_PIPELINE_CONTROL */
	psee_sensor_write(AFK_PIPELINE_CONTROL, AFK_PIPELINE_CONTROL_ENABLE);							/* Enable the block */
 800f690:	2101      	movs	r1, #1
 800f692:	f44f 4040 	mov.w	r0, #49152	@ 0xc000
 800f696:	f7f2 fecf 	bl	8002438 <psee_sensor_write>

}
 800f69a:	b002      	add	sp, #8
 800f69c:	bd70      	pop	{r4, r5, r6, pc}
 800f69e:	bf00      	nop
 800f6a0:	000f4240 	.word	0x000f4240
 800f6a4:	fffe0c00 	.word	0xfffe0c00
 800f6a8:	00013880 	.word	0x00013880
 800f6ac:	40100000 	.word	0x40100000
 800f6b0:	05000004 	.word	0x05000004

0800f6b4 <psee_disable_afk>:
  * @brief  Function to disable the Anti-Flickering Filter(AFK)
  */
volatile void psee_disable_afk() {

	/* Disable AFK Output */
	psee_sensor_write(AFK_PIPELINE_CONTROL,	AFK_PIPELINE_CONTROL_ENABLE |							/* Enable the block */
 800f6b4:	2105      	movs	r1, #5
 800f6b6:	f44f 4040 	mov.w	r0, #49152	@ 0xc000
volatile void psee_disable_afk() {
 800f6ba:	b508      	push	{r3, lr}
	psee_sensor_write(AFK_PIPELINE_CONTROL,	AFK_PIPELINE_CONTROL_ENABLE |							/* Enable the block */
 800f6bc:	f7f2 febc 	bl	8002438 <psee_sensor_write>
											AFK_PIPELINE_CONTROL_BYPASS								/* Bypass the block */
											);

}
 800f6c0:	bd08      	pop	{r3, pc}
	...

0800f6c4 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f6c4:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800f6c8:	b113      	cbz	r3, 800f6d0 <osKernelInitialize+0xc>
    stat = osErrorISR;
 800f6ca:	f06f 0005 	mvn.w	r0, #5
 800f6ce:	4770      	bx	lr
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f6d0:	f3ef 8210 	mrs	r2, PRIMASK
  return(result);
 800f6d4:	4b07      	ldr	r3, [pc, #28]	@ (800f6f4 <osKernelInitialize+0x30>)
  if (IS_IRQ()) {
 800f6d6:	b912      	cbnz	r2, 800f6de <osKernelInitialize+0x1a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f6d8:	f3ef 8211 	mrs	r2, BASEPRI
 800f6dc:	b112      	cbz	r2, 800f6e4 <osKernelInitialize+0x20>
 800f6de:	681a      	ldr	r2, [r3, #0]
 800f6e0:	2a02      	cmp	r2, #2
 800f6e2:	d0f2      	beq.n	800f6ca <osKernelInitialize+0x6>
  }
  else {
    if (KernelState == osKernelInactive) {
 800f6e4:	6818      	ldr	r0, [r3, #0]
 800f6e6:	b910      	cbnz	r0, 800f6ee <osKernelInitialize+0x2a>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800f6e8:	2201      	movs	r2, #1
 800f6ea:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800f6ec:	4770      	bx	lr
    } else {
      stat = osError;
 800f6ee:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 800f6f2:	4770      	bx	lr
 800f6f4:	20017348 	.word	0x20017348

0800f6f8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800f6f8:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f6fa:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800f6fe:	b113      	cbz	r3, 800f706 <osKernelStart+0xe>
    stat = osErrorISR;
 800f700:	f06f 0005 	mvn.w	r0, #5
      stat = osError;
    }
  }

  return (stat);
}
 800f704:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f706:	f3ef 8210 	mrs	r2, PRIMASK
  return(result);
 800f70a:	4b0a      	ldr	r3, [pc, #40]	@ (800f734 <osKernelStart+0x3c>)
  if (IS_IRQ()) {
 800f70c:	b912      	cbnz	r2, 800f714 <osKernelStart+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f70e:	f3ef 8211 	mrs	r2, BASEPRI
 800f712:	b112      	cbz	r2, 800f71a <osKernelStart+0x22>
 800f714:	681a      	ldr	r2, [r3, #0]
 800f716:	2a02      	cmp	r2, #2
 800f718:	d0f2      	beq.n	800f700 <osKernelStart+0x8>
    if (KernelState == osKernelReady) {
 800f71a:	681a      	ldr	r2, [r3, #0]
 800f71c:	2a01      	cmp	r2, #1
 800f71e:	d105      	bne.n	800f72c <osKernelStart+0x34>
      KernelState = osKernelRunning;
 800f720:	2202      	movs	r2, #2
 800f722:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800f724:	f001 fe5a 	bl	80113dc <vTaskStartScheduler>
      stat = osOK;
 800f728:	2000      	movs	r0, #0
 800f72a:	e7eb      	b.n	800f704 <osKernelStart+0xc>
      stat = osError;
 800f72c:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 800f730:	e7e8      	b.n	800f704 <osKernelStart+0xc>
 800f732:	bf00      	nop
 800f734:	20017348 	.word	0x20017348

0800f738 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800f738:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f73a:	4614      	mov	r4, r2
 800f73c:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800f73e:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800f740:	460b      	mov	r3, r1
  hTask = NULL;
 800f742:	9205      	str	r2, [sp, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f744:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 800f748:	bb1a      	cbnz	r2, 800f792 <osThreadNew+0x5a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f74a:	f3ef 8210 	mrs	r2, PRIMASK
 800f74e:	b912      	cbnz	r2, 800f756 <osThreadNew+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f750:	f3ef 8211 	mrs	r2, BASEPRI
 800f754:	b11a      	cbz	r2, 800f75e <osThreadNew+0x26>
 800f756:	4a21      	ldr	r2, [pc, #132]	@ (800f7dc <osThreadNew+0xa4>)
 800f758:	6812      	ldr	r2, [r2, #0]
 800f75a:	2a02      	cmp	r2, #2
 800f75c:	d019      	beq.n	800f792 <osThreadNew+0x5a>
 800f75e:	b1c0      	cbz	r0, 800f792 <osThreadNew+0x5a>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 800f760:	b36c      	cbz	r4, 800f7be <osThreadNew+0x86>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 800f762:	69a5      	ldr	r5, [r4, #24]
 800f764:	2d00      	cmp	r5, #0
 800f766:	bf08      	it	eq
 800f768:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800f76a:	1e6a      	subs	r2, r5, #1
 800f76c:	46ac      	mov	ip, r5
 800f76e:	2a37      	cmp	r2, #55	@ 0x37
 800f770:	d82a      	bhi.n	800f7c8 <osThreadNew+0x90>
 800f772:	6862      	ldr	r2, [r4, #4]
 800f774:	07d2      	lsls	r2, r2, #31
 800f776:	d427      	bmi.n	800f7c8 <osThreadNew+0x90>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 800f778:	6966      	ldr	r6, [r4, #20]
 800f77a:	b16e      	cbz	r6, 800f798 <osThreadNew+0x60>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800f77c:	08b2      	lsrs	r2, r6, #2
      if (attr->name != NULL) {
 800f77e:	6821      	ldr	r1, [r4, #0]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f780:	e9d4 7e02 	ldrd	r7, lr, [r4, #8]
 800f784:	b157      	cbz	r7, 800f79c <osThreadNew+0x64>
 800f786:	f1be 0fab 	cmp.w	lr, #171	@ 0xab
 800f78a:	d902      	bls.n	800f792 <osThreadNew+0x5a>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f78c:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f78e:	b104      	cbz	r4, 800f792 <osThreadNew+0x5a>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f790:	b9e6      	cbnz	r6, 800f7cc <osThreadNew+0x94>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800f792:	9805      	ldr	r0, [sp, #20]
}
 800f794:	b007      	add	sp, #28
 800f796:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 800f798:	2280      	movs	r2, #128	@ 0x80
 800f79a:	e7f0      	b.n	800f77e <osThreadNew+0x46>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800f79c:	f1be 0f00 	cmp.w	lr, #0
 800f7a0:	d1f7      	bne.n	800f792 <osThreadNew+0x5a>
      if (mem == 0) {
 800f7a2:	6924      	ldr	r4, [r4, #16]
 800f7a4:	2c00      	cmp	r4, #0
 800f7a6:	d1f4      	bne.n	800f792 <osThreadNew+0x5a>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800f7a8:	ac05      	add	r4, sp, #20
 800f7aa:	b292      	uxth	r2, r2
 800f7ac:	e9cd c400 	strd	ip, r4, [sp]
 800f7b0:	f001 fc54 	bl	801105c <xTaskCreate>
 800f7b4:	2801      	cmp	r0, #1
          hTask = NULL;
 800f7b6:	bf1c      	itt	ne
 800f7b8:	2300      	movne	r3, #0
 800f7ba:	9305      	strne	r3, [sp, #20]
 800f7bc:	e7e9      	b.n	800f792 <osThreadNew+0x5a>
    name = NULL;
 800f7be:	4621      	mov	r1, r4
    prio  = (UBaseType_t)osPriorityNormal;
 800f7c0:	f04f 0c18 	mov.w	ip, #24
    stack = configMINIMAL_STACK_SIZE;
 800f7c4:	2280      	movs	r2, #128	@ 0x80
 800f7c6:	e7ef      	b.n	800f7a8 <osThreadNew+0x70>
        return (NULL);
 800f7c8:	2000      	movs	r0, #0
 800f7ca:	e7e3      	b.n	800f794 <osThreadNew+0x5c>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f7cc:	e9cd 4701 	strd	r4, r7, [sp, #4]
 800f7d0:	9500      	str	r5, [sp, #0]
 800f7d2:	f001 fc05 	bl	8010fe0 <xTaskCreateStatic>
 800f7d6:	9005      	str	r0, [sp, #20]
 800f7d8:	e7db      	b.n	800f792 <osThreadNew+0x5a>
 800f7da:	bf00      	nop
 800f7dc:	20017348 	.word	0x20017348

0800f7e0 <osThreadSuspend>:
  }

  return (stat);
}

osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 800f7e0:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f7e2:	f3ef 8305 	mrs	r3, IPSR
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
  osStatus_t stat;

  if (IS_IRQ()) {
 800f7e6:	b113      	cbz	r3, 800f7ee <osThreadSuspend+0xe>
    stat = osErrorISR;
 800f7e8:	f06f 0005 	mvn.w	r0, #5
    stat = osOK;
    vTaskSuspend (hTask);
  }

  return (stat);
}
 800f7ec:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f7ee:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 800f7f2:	b913      	cbnz	r3, 800f7fa <osThreadSuspend+0x1a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f7f4:	f3ef 8311 	mrs	r3, BASEPRI
 800f7f8:	b11b      	cbz	r3, 800f802 <osThreadSuspend+0x22>
 800f7fa:	4b06      	ldr	r3, [pc, #24]	@ (800f814 <osThreadSuspend+0x34>)
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	2b02      	cmp	r3, #2
 800f800:	d0f2      	beq.n	800f7e8 <osThreadSuspend+0x8>
  else if (hTask == NULL) {
 800f802:	b118      	cbz	r0, 800f80c <osThreadSuspend+0x2c>
    vTaskSuspend (hTask);
 800f804:	f001 fe8c 	bl	8011520 <vTaskSuspend>
    stat = osOK;
 800f808:	2000      	movs	r0, #0
 800f80a:	e7ef      	b.n	800f7ec <osThreadSuspend+0xc>
    stat = osErrorParameter;
 800f80c:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800f810:	e7ec      	b.n	800f7ec <osThreadSuspend+0xc>
 800f812:	bf00      	nop
 800f814:	20017348 	.word	0x20017348

0800f818 <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 800f818:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f81a:	f3ef 8305 	mrs	r3, IPSR
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
  osStatus_t stat;

  if (IS_IRQ()) {
 800f81e:	b113      	cbz	r3, 800f826 <osThreadResume+0xe>
    stat = osErrorISR;
 800f820:	f06f 0005 	mvn.w	r0, #5
    stat = osOK;
    vTaskResume (hTask);
  }

  return (stat);
}
 800f824:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f826:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 800f82a:	b913      	cbnz	r3, 800f832 <osThreadResume+0x1a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f82c:	f3ef 8311 	mrs	r3, BASEPRI
 800f830:	b11b      	cbz	r3, 800f83a <osThreadResume+0x22>
 800f832:	4b06      	ldr	r3, [pc, #24]	@ (800f84c <osThreadResume+0x34>)
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	2b02      	cmp	r3, #2
 800f838:	d0f2      	beq.n	800f820 <osThreadResume+0x8>
  else if (hTask == NULL) {
 800f83a:	b118      	cbz	r0, 800f844 <osThreadResume+0x2c>
    vTaskResume (hTask);
 800f83c:	f001 fc3c 	bl	80110b8 <vTaskResume>
    stat = osOK;
 800f840:	2000      	movs	r0, #0
 800f842:	e7ef      	b.n	800f824 <osThreadResume+0xc>
    stat = osErrorParameter;
 800f844:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800f848:	e7ec      	b.n	800f824 <osThreadResume+0xc>
 800f84a:	bf00      	nop
 800f84c:	20017348 	.word	0x20017348

0800f850 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800f850:	b570      	push	{r4, r5, r6, lr}
 800f852:	4605      	mov	r5, r0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f854:	f3ef 8605 	mrs	r6, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 800f858:	b116      	cbz	r6, 800f860 <osMutexNew+0x10>
  hMutex = NULL;
 800f85a:	2400      	movs	r4, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 800f85c:	4620      	mov	r0, r4
 800f85e:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f860:	f3ef 8210 	mrs	r2, PRIMASK
  if (!IS_IRQ()) {
 800f864:	b912      	cbnz	r2, 800f86c <osMutexNew+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f866:	f3ef 8211 	mrs	r2, BASEPRI
 800f86a:	b11a      	cbz	r2, 800f874 <osMutexNew+0x24>
 800f86c:	4a18      	ldr	r2, [pc, #96]	@ (800f8d0 <osMutexNew+0x80>)
 800f86e:	6812      	ldr	r2, [r2, #0]
 800f870:	2a02      	cmp	r2, #2
 800f872:	d0f2      	beq.n	800f85a <osMutexNew+0xa>
    if (attr != NULL) {
 800f874:	b115      	cbz	r5, 800f87c <osMutexNew+0x2c>
      type = attr->attr_bits;
 800f876:	686e      	ldr	r6, [r5, #4]
    if ((type & osMutexRobust) != osMutexRobust) {
 800f878:	0733      	lsls	r3, r6, #28
 800f87a:	d4ee      	bmi.n	800f85a <osMutexNew+0xa>
    if ((type & osMutexRecursive) == osMutexRecursive) {
 800f87c:	f006 0601 	and.w	r6, r6, #1
      if (attr != NULL) {
 800f880:	b17d      	cbz	r5, 800f8a2 <osMutexNew+0x52>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800f882:	e9d5 1302 	ldrd	r1, r3, [r5, #8]
 800f886:	b151      	cbz	r1, 800f89e <osMutexNew+0x4e>
 800f888:	2b4f      	cmp	r3, #79	@ 0x4f
 800f88a:	d9e6      	bls.n	800f85a <osMutexNew+0xa>
        if (rmtx != 0U) {
 800f88c:	b1de      	cbz	r6, 800f8c6 <osMutexNew+0x76>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800f88e:	2004      	movs	r0, #4
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800f890:	f000 feed 	bl	801066e <xQueueCreateMutexStatic>
 800f894:	4604      	mov	r4, r0
      if (hMutex != NULL) {
 800f896:	2800      	cmp	r0, #0
 800f898:	d0df      	beq.n	800f85a <osMutexNew+0xa>
          name = attr->name;
 800f89a:	682d      	ldr	r5, [r5, #0]
 800f89c:	e00a      	b.n	800f8b4 <osMutexNew+0x64>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d1db      	bne.n	800f85a <osMutexNew+0xa>
          if (rmtx != 0U) {
 800f8a2:	b196      	cbz	r6, 800f8ca <osMutexNew+0x7a>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800f8a4:	2004      	movs	r0, #4
            hMutex = xSemaphoreCreateMutex ();
 800f8a6:	f000 fef7 	bl	8010698 <xQueueCreateMutex>
 800f8aa:	4604      	mov	r4, r0
      if (hMutex != NULL) {
 800f8ac:	2800      	cmp	r0, #0
 800f8ae:	d0d4      	beq.n	800f85a <osMutexNew+0xa>
        if (attr != NULL) {
 800f8b0:	2d00      	cmp	r5, #0
 800f8b2:	d1f2      	bne.n	800f89a <osMutexNew+0x4a>
        vQueueAddToRegistry (hMutex, name);
 800f8b4:	4629      	mov	r1, r5
 800f8b6:	4620      	mov	r0, r4
 800f8b8:	f001 f99a 	bl	8010bf0 <vQueueAddToRegistry>
      if ((hMutex != NULL) && (rmtx != 0U)) {
 800f8bc:	2e00      	cmp	r6, #0
 800f8be:	d0cd      	beq.n	800f85c <osMutexNew+0xc>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800f8c0:	f044 0401 	orr.w	r4, r4, #1
  return ((osMutexId_t)hMutex);
 800f8c4:	e7ca      	b.n	800f85c <osMutexNew+0xc>
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800f8c6:	2001      	movs	r0, #1
 800f8c8:	e7e2      	b.n	800f890 <osMutexNew+0x40>
            hMutex = xSemaphoreCreateMutex ();
 800f8ca:	2001      	movs	r0, #1
 800f8cc:	e7eb      	b.n	800f8a6 <osMutexNew+0x56>
 800f8ce:	bf00      	nop
 800f8d0:	20017348 	.word	0x20017348

0800f8d4 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800f8d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f8d6:	460e      	mov	r6, r1
 800f8d8:	4615      	mov	r5, r2
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f8da:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800f8de:	b993      	cbnz	r3, 800f906 <osSemaphoreNew+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f8e0:	f3ef 8310 	mrs	r3, PRIMASK
 800f8e4:	b913      	cbnz	r3, 800f8ec <osSemaphoreNew+0x18>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f8e6:	f3ef 8311 	mrs	r3, BASEPRI
 800f8ea:	b11b      	cbz	r3, 800f8f4 <osSemaphoreNew+0x20>
 800f8ec:	4b24      	ldr	r3, [pc, #144]	@ (800f980 <osSemaphoreNew+0xac>)
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	2b02      	cmp	r3, #2
 800f8f2:	d008      	beq.n	800f906 <osSemaphoreNew+0x32>
 800f8f4:	b138      	cbz	r0, 800f906 <osSemaphoreNew+0x32>
 800f8f6:	42b0      	cmp	r0, r6
 800f8f8:	d305      	bcc.n	800f906 <osSemaphoreNew+0x32>
    mem = -1;

    if (attr != NULL) {
 800f8fa:	b155      	cbz	r5, 800f912 <osSemaphoreNew+0x3e>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800f8fc:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 800f900:	b12b      	cbz	r3, 800f90e <osSemaphoreNew+0x3a>
 800f902:	2a4f      	cmp	r2, #79	@ 0x4f
 800f904:	d823      	bhi.n	800f94e <osSemaphoreNew+0x7a>
  hSemaphore = NULL;
 800f906:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 800f908:	4620      	mov	r0, r4
 800f90a:	b002      	add	sp, #8
 800f90c:	bd70      	pop	{r4, r5, r6, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800f90e:	2a00      	cmp	r2, #0
 800f910:	d1f9      	bne.n	800f906 <osSemaphoreNew+0x32>
      if (max_count == 1U) {
 800f912:	2801      	cmp	r0, #1
 800f914:	d10e      	bne.n	800f934 <osSemaphoreNew+0x60>
          hSemaphore = xSemaphoreCreateBinary();
 800f916:	2203      	movs	r2, #3
 800f918:	2100      	movs	r1, #0
 800f91a:	2001      	movs	r0, #1
 800f91c:	f000 fd7c 	bl	8010418 <xQueueGenericCreate>
 800f920:	e01d      	b.n	800f95e <osSemaphoreNew+0x8a>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800f922:	461a      	mov	r2, r3
 800f924:	4631      	mov	r1, r6
 800f926:	f000 fda0 	bl	801046a <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 800f92a:	4604      	mov	r4, r0
 800f92c:	2800      	cmp	r0, #0
 800f92e:	d0ea      	beq.n	800f906 <osSemaphoreNew+0x32>
          name = attr->name;
 800f930:	682d      	ldr	r5, [r5, #0]
 800f932:	e007      	b.n	800f944 <osSemaphoreNew+0x70>
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800f934:	4631      	mov	r1, r6
 800f936:	f000 fdbe 	bl	80104b6 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 800f93a:	4604      	mov	r4, r0
 800f93c:	2800      	cmp	r0, #0
 800f93e:	d0e2      	beq.n	800f906 <osSemaphoreNew+0x32>
        if (attr != NULL) {
 800f940:	2d00      	cmp	r5, #0
 800f942:	d1f5      	bne.n	800f930 <osSemaphoreNew+0x5c>
        vQueueAddToRegistry (hSemaphore, name);
 800f944:	4629      	mov	r1, r5
 800f946:	4620      	mov	r0, r4
 800f948:	f001 f952 	bl	8010bf0 <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 800f94c:	e7dc      	b.n	800f908 <osSemaphoreNew+0x34>
      if (max_count == 1U) {
 800f94e:	2801      	cmp	r0, #1
 800f950:	d1e7      	bne.n	800f922 <osSemaphoreNew+0x4e>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800f952:	2203      	movs	r2, #3
 800f954:	9200      	str	r2, [sp, #0]
 800f956:	2200      	movs	r2, #0
 800f958:	4611      	mov	r1, r2
 800f95a:	f000 fd49 	bl	80103f0 <xQueueGenericCreateStatic>
          hSemaphore = xSemaphoreCreateBinary();
 800f95e:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800f960:	2800      	cmp	r0, #0
 800f962:	d0d0      	beq.n	800f906 <osSemaphoreNew+0x32>
 800f964:	2e00      	cmp	r6, #0
 800f966:	d0eb      	beq.n	800f940 <osSemaphoreNew+0x6c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800f968:	2300      	movs	r3, #0
 800f96a:	461a      	mov	r2, r3
 800f96c:	4619      	mov	r1, r3
 800f96e:	f000 fdc4 	bl	80104fa <xQueueGenericSend>
 800f972:	2801      	cmp	r0, #1
 800f974:	d0e4      	beq.n	800f940 <osSemaphoreNew+0x6c>
            vSemaphoreDelete (hSemaphore);
 800f976:	4620      	mov	r0, r4
 800f978:	f001 f964 	bl	8010c44 <vQueueDelete>
      if (hSemaphore != NULL) {
 800f97c:	e7c3      	b.n	800f906 <osSemaphoreNew+0x32>
 800f97e:	bf00      	nop
 800f980:	20017348 	.word	0x20017348

0800f984 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800f984:	b513      	push	{r0, r1, r4, lr}
 800f986:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800f988:	b918      	cbnz	r0, 800f992 <osSemaphoreAcquire+0xe>
    stat = osErrorParameter;
 800f98a:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 800f98e:	b002      	add	sp, #8
 800f990:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f992:	f3ef 8305 	mrs	r3, IPSR
  else if (IS_IRQ()) {
 800f996:	b15b      	cbz	r3, 800f9b0 <osSemaphoreAcquire+0x2c>
    if (timeout != 0U) {
 800f998:	2c00      	cmp	r4, #0
 800f99a:	d1f6      	bne.n	800f98a <osSemaphoreAcquire+0x6>
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800f99c:	aa01      	add	r2, sp, #4
 800f99e:	4621      	mov	r1, r4
      yield = pdFALSE;
 800f9a0:	9401      	str	r4, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800f9a2:	f001 f8bc 	bl	8010b1e <xQueueReceiveFromISR>
 800f9a6:	2801      	cmp	r0, #1
 800f9a8:	d016      	beq.n	800f9d8 <osSemaphoreAcquire+0x54>
        stat = osErrorResource;
 800f9aa:	f06f 0002 	mvn.w	r0, #2
 800f9ae:	e7ee      	b.n	800f98e <osSemaphoreAcquire+0xa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f9b0:	f3ef 8310 	mrs	r3, PRIMASK
  else if (IS_IRQ()) {
 800f9b4:	b913      	cbnz	r3, 800f9bc <osSemaphoreAcquire+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f9b6:	f3ef 8311 	mrs	r3, BASEPRI
 800f9ba:	b11b      	cbz	r3, 800f9c4 <osSemaphoreAcquire+0x40>
 800f9bc:	4b0e      	ldr	r3, [pc, #56]	@ (800f9f8 <osSemaphoreAcquire+0x74>)
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	2b02      	cmp	r3, #2
 800f9c2:	d0e9      	beq.n	800f998 <osSemaphoreAcquire+0x14>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800f9c4:	4621      	mov	r1, r4
 800f9c6:	f000 ffe5 	bl	8010994 <xQueueSemaphoreTake>
 800f9ca:	2801      	cmp	r0, #1
 800f9cc:	d006      	beq.n	800f9dc <osSemaphoreAcquire+0x58>
      if (timeout != 0U) {
 800f9ce:	2c00      	cmp	r4, #0
 800f9d0:	d0eb      	beq.n	800f9aa <osSemaphoreAcquire+0x26>
        stat = osErrorTimeout;
 800f9d2:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 800f9d6:	e7da      	b.n	800f98e <osSemaphoreAcquire+0xa>
        portYIELD_FROM_ISR (yield);
 800f9d8:	9b01      	ldr	r3, [sp, #4]
 800f9da:	b90b      	cbnz	r3, 800f9e0 <osSemaphoreAcquire+0x5c>
  stat = osOK;
 800f9dc:	2000      	movs	r0, #0
 800f9de:	e7d6      	b.n	800f98e <osSemaphoreAcquire+0xa>
        portYIELD_FROM_ISR (yield);
 800f9e0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800f9e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f9e8:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800f9ec:	f3bf 8f4f 	dsb	sy
 800f9f0:	f3bf 8f6f 	isb	sy
 800f9f4:	e7f2      	b.n	800f9dc <osSemaphoreAcquire+0x58>
 800f9f6:	bf00      	nop
 800f9f8:	20017348 	.word	0x20017348

0800f9fc <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800f9fc:	b507      	push	{r0, r1, r2, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800f9fe:	b370      	cbz	r0, 800fa5e <osSemaphoreRelease+0x62>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fa00:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800fa04:	b15b      	cbz	r3, 800fa1e <osSemaphoreRelease+0x22>
    yield = pdFALSE;
 800fa06:	2300      	movs	r3, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800fa08:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 800fa0a:	9301      	str	r3, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800fa0c:	f000 fec5 	bl	801079a <xQueueGiveFromISR>
 800fa10:	2801      	cmp	r0, #1
 800fa12:	d016      	beq.n	800fa42 <osSemaphoreRelease+0x46>
      portYIELD_FROM_ISR (yield);
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
      stat = osErrorResource;
 800fa14:	f06f 0002 	mvn.w	r0, #2
    }
  }

  return (stat);
}
 800fa18:	b003      	add	sp, #12
 800fa1a:	f85d fb04 	ldr.w	pc, [sp], #4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fa1e:	f3ef 8310 	mrs	r3, PRIMASK
  else if (IS_IRQ()) {
 800fa22:	b913      	cbnz	r3, 800fa2a <osSemaphoreRelease+0x2e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800fa24:	f3ef 8311 	mrs	r3, BASEPRI
 800fa28:	b11b      	cbz	r3, 800fa32 <osSemaphoreRelease+0x36>
 800fa2a:	4b0e      	ldr	r3, [pc, #56]	@ (800fa64 <osSemaphoreRelease+0x68>)
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	2b02      	cmp	r3, #2
 800fa30:	d0e9      	beq.n	800fa06 <osSemaphoreRelease+0xa>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800fa32:	2300      	movs	r3, #0
 800fa34:	461a      	mov	r2, r3
 800fa36:	4619      	mov	r1, r3
 800fa38:	f000 fd5f 	bl	80104fa <xQueueGenericSend>
 800fa3c:	2801      	cmp	r0, #1
 800fa3e:	d00c      	beq.n	800fa5a <osSemaphoreRelease+0x5e>
 800fa40:	e7e8      	b.n	800fa14 <osSemaphoreRelease+0x18>
      portYIELD_FROM_ISR (yield);
 800fa42:	9b01      	ldr	r3, [sp, #4]
 800fa44:	b14b      	cbz	r3, 800fa5a <osSemaphoreRelease+0x5e>
 800fa46:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800fa4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fa4e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800fa52:	f3bf 8f4f 	dsb	sy
 800fa56:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800fa5a:	2000      	movs	r0, #0
 800fa5c:	e7dc      	b.n	800fa18 <osSemaphoreRelease+0x1c>
    stat = osErrorParameter;
 800fa5e:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800fa62:	e7d9      	b.n	800fa18 <osSemaphoreRelease+0x1c>
 800fa64:	20017348 	.word	0x20017348

0800fa68 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800fa68:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fa6a:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fa6c:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800fa70:	b11b      	cbz	r3, 800fa7a <osMessageQueueNew+0x12>
  hQueue = NULL;
 800fa72:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 800fa74:	4628      	mov	r0, r5
 800fa76:	b002      	add	sp, #8
 800fa78:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fa7a:	f3ef 8310 	mrs	r3, PRIMASK
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800fa7e:	b913      	cbnz	r3, 800fa86 <osMessageQueueNew+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800fa80:	f3ef 8311 	mrs	r3, BASEPRI
 800fa84:	b11b      	cbz	r3, 800fa8e <osMessageQueueNew+0x26>
 800fa86:	4b1a      	ldr	r3, [pc, #104]	@ (800faf0 <osMessageQueueNew+0x88>)
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	2b02      	cmp	r3, #2
 800fa8c:	d0f1      	beq.n	800fa72 <osMessageQueueNew+0xa>
 800fa8e:	2800      	cmp	r0, #0
 800fa90:	d0ef      	beq.n	800fa72 <osMessageQueueNew+0xa>
 800fa92:	2900      	cmp	r1, #0
 800fa94:	d0ed      	beq.n	800fa72 <osMessageQueueNew+0xa>
    if (attr != NULL) {
 800fa96:	b1ec      	cbz	r4, 800fad4 <osMessageQueueNew+0x6c>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800fa98:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 800fa9c:	b193      	cbz	r3, 800fac4 <osMessageQueueNew+0x5c>
 800fa9e:	2a4f      	cmp	r2, #79	@ 0x4f
 800faa0:	d9e7      	bls.n	800fa72 <osMessageQueueNew+0xa>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800faa2:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800faa4:	2a00      	cmp	r2, #0
 800faa6:	d0e4      	beq.n	800fa72 <osMessageQueueNew+0xa>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800faa8:	fb01 f500 	mul.w	r5, r1, r0
 800faac:	6966      	ldr	r6, [r4, #20]
 800faae:	42ae      	cmp	r6, r5
 800fab0:	d3df      	bcc.n	800fa72 <osMessageQueueNew+0xa>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800fab2:	2500      	movs	r5, #0
 800fab4:	9500      	str	r5, [sp, #0]
 800fab6:	f000 fc9b 	bl	80103f0 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 800faba:	4605      	mov	r5, r0
 800fabc:	2800      	cmp	r0, #0
 800fabe:	d0d8      	beq.n	800fa72 <osMessageQueueNew+0xa>
        name = attr->name;
 800fac0:	6824      	ldr	r4, [r4, #0]
 800fac2:	e00f      	b.n	800fae4 <osMessageQueueNew+0x7c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800fac4:	2a00      	cmp	r2, #0
 800fac6:	d1d4      	bne.n	800fa72 <osMessageQueueNew+0xa>
 800fac8:	6923      	ldr	r3, [r4, #16]
 800faca:	2b00      	cmp	r3, #0
 800facc:	d1d1      	bne.n	800fa72 <osMessageQueueNew+0xa>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800face:	6963      	ldr	r3, [r4, #20]
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	d1ce      	bne.n	800fa72 <osMessageQueueNew+0xa>
        hQueue = xQueueCreate (msg_count, msg_size);
 800fad4:	2200      	movs	r2, #0
 800fad6:	f000 fc9f 	bl	8010418 <xQueueGenericCreate>
    if (hQueue != NULL) {
 800fada:	4605      	mov	r5, r0
 800fadc:	2800      	cmp	r0, #0
 800fade:	d0c8      	beq.n	800fa72 <osMessageQueueNew+0xa>
      if (attr != NULL) {
 800fae0:	2c00      	cmp	r4, #0
 800fae2:	d1ed      	bne.n	800fac0 <osMessageQueueNew+0x58>
      vQueueAddToRegistry (hQueue, name);
 800fae4:	4621      	mov	r1, r4
 800fae6:	4628      	mov	r0, r5
 800fae8:	f001 f882 	bl	8010bf0 <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 800faec:	e7c2      	b.n	800fa74 <osMessageQueueNew+0xc>
 800faee:	bf00      	nop
 800faf0:	20017348 	.word	0x20017348

0800faf4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800faf4:	b513      	push	{r0, r1, r4, lr}
 800faf6:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800faf8:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800fafc:	b123      	cbz	r3, 800fb08 <osMessageQueuePut+0x14>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800fafe:	b9d8      	cbnz	r0, 800fb38 <osMessageQueuePut+0x44>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
      stat = osErrorParameter;
 800fb00:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 800fb04:	b002      	add	sp, #8
 800fb06:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fb08:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 800fb0c:	b913      	cbnz	r3, 800fb14 <osMessageQueuePut+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800fb0e:	f3ef 8311 	mrs	r3, BASEPRI
 800fb12:	b11b      	cbz	r3, 800fb1c <osMessageQueuePut+0x28>
 800fb14:	4b17      	ldr	r3, [pc, #92]	@ (800fb74 <osMessageQueuePut+0x80>)
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	2b02      	cmp	r3, #2
 800fb1a:	d0f0      	beq.n	800fafe <osMessageQueuePut+0xa>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800fb1c:	2800      	cmp	r0, #0
 800fb1e:	d0ef      	beq.n	800fb00 <osMessageQueuePut+0xc>
 800fb20:	2900      	cmp	r1, #0
 800fb22:	d0ed      	beq.n	800fb00 <osMessageQueuePut+0xc>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800fb24:	2300      	movs	r3, #0
 800fb26:	4622      	mov	r2, r4
 800fb28:	f000 fce7 	bl	80104fa <xQueueGenericSend>
 800fb2c:	2801      	cmp	r0, #1
 800fb2e:	d013      	beq.n	800fb58 <osMessageQueuePut+0x64>
        if (timeout != 0U) {
 800fb30:	b16c      	cbz	r4, 800fb4e <osMessageQueuePut+0x5a>
          stat = osErrorTimeout;
 800fb32:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 800fb36:	e7e5      	b.n	800fb04 <osMessageQueuePut+0x10>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800fb38:	2900      	cmp	r1, #0
 800fb3a:	d0e1      	beq.n	800fb00 <osMessageQueuePut+0xc>
 800fb3c:	2c00      	cmp	r4, #0
 800fb3e:	d1df      	bne.n	800fb00 <osMessageQueuePut+0xc>
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800fb40:	4623      	mov	r3, r4
 800fb42:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800fb44:	9401      	str	r4, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800fb46:	f000 fdc4 	bl	80106d2 <xQueueGenericSendFromISR>
 800fb4a:	2801      	cmp	r0, #1
 800fb4c:	d002      	beq.n	800fb54 <osMessageQueuePut+0x60>
        stat = osErrorResource;
 800fb4e:	f06f 0002 	mvn.w	r0, #2
 800fb52:	e7d7      	b.n	800fb04 <osMessageQueuePut+0x10>
        portYIELD_FROM_ISR (yield);
 800fb54:	9b01      	ldr	r3, [sp, #4]
 800fb56:	b90b      	cbnz	r3, 800fb5c <osMessageQueuePut+0x68>
  stat = osOK;
 800fb58:	2000      	movs	r0, #0
 800fb5a:	e7d3      	b.n	800fb04 <osMessageQueuePut+0x10>
        portYIELD_FROM_ISR (yield);
 800fb5c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800fb60:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fb64:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800fb68:	f3bf 8f4f 	dsb	sy
 800fb6c:	f3bf 8f6f 	isb	sy
 800fb70:	e7f2      	b.n	800fb58 <osMessageQueuePut+0x64>
 800fb72:	bf00      	nop
 800fb74:	20017348 	.word	0x20017348

0800fb78 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800fb78:	b513      	push	{r0, r1, r4, lr}
 800fb7a:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fb7c:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800fb80:	b123      	cbz	r3, 800fb8c <osMessageQueueGet+0x14>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800fb82:	b9d0      	cbnz	r0, 800fbba <osMessageQueueGet+0x42>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
      stat = osErrorParameter;
 800fb84:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 800fb88:	b002      	add	sp, #8
 800fb8a:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fb8c:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 800fb90:	b913      	cbnz	r3, 800fb98 <osMessageQueueGet+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800fb92:	f3ef 8311 	mrs	r3, BASEPRI
 800fb96:	b11b      	cbz	r3, 800fba0 <osMessageQueueGet+0x28>
 800fb98:	4b16      	ldr	r3, [pc, #88]	@ (800fbf4 <osMessageQueueGet+0x7c>)
 800fb9a:	681b      	ldr	r3, [r3, #0]
 800fb9c:	2b02      	cmp	r3, #2
 800fb9e:	d0f0      	beq.n	800fb82 <osMessageQueueGet+0xa>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800fba0:	2800      	cmp	r0, #0
 800fba2:	d0ef      	beq.n	800fb84 <osMessageQueueGet+0xc>
 800fba4:	2900      	cmp	r1, #0
 800fba6:	d0ed      	beq.n	800fb84 <osMessageQueueGet+0xc>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800fba8:	4622      	mov	r2, r4
 800fbaa:	f000 fe4f 	bl	801084c <xQueueReceive>
 800fbae:	2801      	cmp	r0, #1
 800fbb0:	d012      	beq.n	800fbd8 <osMessageQueueGet+0x60>
        if (timeout != 0U) {
 800fbb2:	b164      	cbz	r4, 800fbce <osMessageQueueGet+0x56>
          stat = osErrorTimeout;
 800fbb4:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 800fbb8:	e7e6      	b.n	800fb88 <osMessageQueueGet+0x10>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800fbba:	2900      	cmp	r1, #0
 800fbbc:	d0e2      	beq.n	800fb84 <osMessageQueueGet+0xc>
 800fbbe:	2c00      	cmp	r4, #0
 800fbc0:	d1e0      	bne.n	800fb84 <osMessageQueueGet+0xc>
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800fbc2:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800fbc4:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800fbc6:	f000 ffaa 	bl	8010b1e <xQueueReceiveFromISR>
 800fbca:	2801      	cmp	r0, #1
 800fbcc:	d002      	beq.n	800fbd4 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800fbce:	f06f 0002 	mvn.w	r0, #2
 800fbd2:	e7d9      	b.n	800fb88 <osMessageQueueGet+0x10>
        portYIELD_FROM_ISR (yield);
 800fbd4:	9b01      	ldr	r3, [sp, #4]
 800fbd6:	b90b      	cbnz	r3, 800fbdc <osMessageQueueGet+0x64>
  stat = osOK;
 800fbd8:	2000      	movs	r0, #0
 800fbda:	e7d5      	b.n	800fb88 <osMessageQueueGet+0x10>
        portYIELD_FROM_ISR (yield);
 800fbdc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800fbe0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fbe4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800fbe8:	f3bf 8f4f 	dsb	sy
 800fbec:	f3bf 8f6f 	isb	sy
 800fbf0:	e7f2      	b.n	800fbd8 <osMessageQueueGet+0x60>
 800fbf2:	bf00      	nop
 800fbf4:	20017348 	.word	0x20017348

0800fbf8 <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800fbf8:	4b03      	ldr	r3, [pc, #12]	@ (800fc08 <vApplicationGetIdleTaskMemory+0x10>)
 800fbfa:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800fbfc:	4b03      	ldr	r3, [pc, #12]	@ (800fc0c <vApplicationGetIdleTaskMemory+0x14>)
 800fbfe:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800fc00:	2380      	movs	r3, #128	@ 0x80
 800fc02:	6013      	str	r3, [r2, #0]
}
 800fc04:	4770      	bx	lr
 800fc06:	bf00      	nop
 800fc08:	2001729c 	.word	0x2001729c
 800fc0c:	2001709c 	.word	0x2001709c

0800fc10 <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800fc10:	4b03      	ldr	r3, [pc, #12]	@ (800fc20 <vApplicationGetTimerTaskMemory+0x10>)
 800fc12:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800fc14:	4b03      	ldr	r3, [pc, #12]	@ (800fc24 <vApplicationGetTimerTaskMemory+0x14>)
 800fc16:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800fc18:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fc1c:	6013      	str	r3, [r2, #0]
}
 800fc1e:	4770      	bx	lr
 800fc20:	20016ff0 	.word	0x20016ff0
 800fc24:	20016bf0 	.word	0x20016bf0

0800fc28 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800fc28:	4b10      	ldr	r3, [pc, #64]	@ (800fc6c <prvInsertBlockIntoFreeList+0x44>)
{
 800fc2a:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800fc2c:	461a      	mov	r2, r3
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	4283      	cmp	r3, r0
 800fc32:	d3fb      	bcc.n	800fc2c <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800fc34:	6854      	ldr	r4, [r2, #4]
 800fc36:	1911      	adds	r1, r2, r4
 800fc38:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800fc3a:	bf01      	itttt	eq
 800fc3c:	6841      	ldreq	r1, [r0, #4]
 800fc3e:	4610      	moveq	r0, r2
 800fc40:	1909      	addeq	r1, r1, r4
 800fc42:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800fc44:	6844      	ldr	r4, [r0, #4]
 800fc46:	1901      	adds	r1, r0, r4
 800fc48:	428b      	cmp	r3, r1
 800fc4a:	d10c      	bne.n	800fc66 <prvInsertBlockIntoFreeList+0x3e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800fc4c:	4908      	ldr	r1, [pc, #32]	@ (800fc70 <prvInsertBlockIntoFreeList+0x48>)
 800fc4e:	6809      	ldr	r1, [r1, #0]
 800fc50:	428b      	cmp	r3, r1
 800fc52:	d003      	beq.n	800fc5c <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800fc54:	6859      	ldr	r1, [r3, #4]
 800fc56:	4421      	add	r1, r4
 800fc58:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800fc5a:	6819      	ldr	r1, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800fc5c:	4290      	cmp	r0, r2
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800fc5e:	6001      	str	r1, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800fc60:	bf18      	it	ne
 800fc62:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fc64:	bd10      	pop	{r4, pc}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800fc66:	4619      	mov	r1, r3
 800fc68:	e7f8      	b.n	800fc5c <prvInsertBlockIntoFreeList+0x34>
 800fc6a:	bf00      	nop
 800fc6c:	2001735c 	.word	0x2001735c
 800fc70:	20017358 	.word	0x20017358

0800fc74 <pvPortMalloc>:
{
 800fc74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc78:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800fc7a:	f001 fa61 	bl	8011140 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800fc7e:	4940      	ldr	r1, [pc, #256]	@ (800fd80 <pvPortMalloc+0x10c>)
 800fc80:	4d40      	ldr	r5, [pc, #256]	@ (800fd84 <pvPortMalloc+0x110>)
 800fc82:	680b      	ldr	r3, [r1, #0]
 800fc84:	b9f3      	cbnz	r3, 800fcc4 <pvPortMalloc+0x50>
	uxAddress = ( size_t ) ucHeap;
 800fc86:	4a40      	ldr	r2, [pc, #256]	@ (800fd88 <pvPortMalloc+0x114>)
	xStart.xBlockSize = ( size_t ) 0;
 800fc88:	2000      	movs	r0, #0
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800fc8a:	0756      	lsls	r6, r2, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800fc8c:	4e3f      	ldr	r6, [pc, #252]	@ (800fd8c <pvPortMalloc+0x118>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800fc8e:	bf1b      	ittet	ne
 800fc90:	3207      	addne	r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800fc92:	4b3f      	ldrne	r3, [pc, #252]	@ (800fd90 <pvPortMalloc+0x11c>)
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800fc94:	4b3f      	ldreq	r3, [pc, #252]	@ (800fd94 <pvPortMalloc+0x120>)
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fc96:	f022 0207 	bicne.w	r2, r2, #7
	xStart.xBlockSize = ( size_t ) 0;
 800fc9a:	6070      	str	r0, [r6, #4]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800fc9c:	bf18      	it	ne
 800fc9e:	1a9b      	subne	r3, r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800fca0:	6032      	str	r2, [r6, #0]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800fca2:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800fca4:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fca6:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 800fcaa:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800fcae:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 800fcb0:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800fcb2:	e9c2 3000 	strd	r3, r0, [r2]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fcb6:	4b38      	ldr	r3, [pc, #224]	@ (800fd98 <pvPortMalloc+0x124>)
 800fcb8:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fcba:	4b38      	ldr	r3, [pc, #224]	@ (800fd9c <pvPortMalloc+0x128>)
 800fcbc:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800fcbe:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800fcc2:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800fcc4:	682e      	ldr	r6, [r5, #0]
 800fcc6:	4226      	tst	r6, r4
 800fcc8:	d154      	bne.n	800fd74 <pvPortMalloc+0x100>
			if( xWantedSize > 0 )
 800fcca:	2c00      	cmp	r4, #0
 800fccc:	d043      	beq.n	800fd56 <pvPortMalloc+0xe2>
				xWantedSize += xHeapStructSize;
 800fcce:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800fcd2:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800fcd4:	bf1c      	itt	ne
 800fcd6:	f023 0307 	bicne.w	r3, r3, #7
 800fcda:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d049      	beq.n	800fd74 <pvPortMalloc+0x100>
 800fce0:	4f2e      	ldr	r7, [pc, #184]	@ (800fd9c <pvPortMalloc+0x128>)
 800fce2:	683c      	ldr	r4, [r7, #0]
 800fce4:	429c      	cmp	r4, r3
 800fce6:	d345      	bcc.n	800fd74 <pvPortMalloc+0x100>
				pxBlock = xStart.pxNextFreeBlock;
 800fce8:	4a28      	ldr	r2, [pc, #160]	@ (800fd8c <pvPortMalloc+0x118>)
 800fcea:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fcec:	6868      	ldr	r0, [r5, #4]
 800fcee:	4298      	cmp	r0, r3
 800fcf0:	d204      	bcs.n	800fcfc <pvPortMalloc+0x88>
 800fcf2:	f8d5 c000 	ldr.w	ip, [r5]
 800fcf6:	f1bc 0f00 	cmp.w	ip, #0
 800fcfa:	d117      	bne.n	800fd2c <pvPortMalloc+0xb8>
				if( pxBlock != pxEnd )
 800fcfc:	6809      	ldr	r1, [r1, #0]
 800fcfe:	42a9      	cmp	r1, r5
 800fd00:	d038      	beq.n	800fd74 <pvPortMalloc+0x100>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800fd02:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800fd04:	f8d2 8000 	ldr.w	r8, [r2]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800fd08:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800fd0a:	1ac2      	subs	r2, r0, r3
 800fd0c:	2a10      	cmp	r2, #16
 800fd0e:	d914      	bls.n	800fd3a <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800fd10:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fd12:	0741      	lsls	r1, r0, #29
 800fd14:	d00d      	beq.n	800fd32 <pvPortMalloc+0xbe>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800fd16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd1a:	b672      	cpsid	i
 800fd1c:	f383 8811 	msr	BASEPRI, r3
 800fd20:	f3bf 8f6f 	isb	sy
 800fd24:	f3bf 8f4f 	dsb	sy
 800fd28:	b662      	cpsie	i
 800fd2a:	e7fe      	b.n	800fd2a <pvPortMalloc+0xb6>
 800fd2c:	462a      	mov	r2, r5
 800fd2e:	4665      	mov	r5, ip
 800fd30:	e7dc      	b.n	800fcec <pvPortMalloc+0x78>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800fd32:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800fd34:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800fd36:	f7ff ff77 	bl	800fc28 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800fd3a:	686a      	ldr	r2, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800fd3c:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800fd3e:	4916      	ldr	r1, [pc, #88]	@ (800fd98 <pvPortMalloc+0x124>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800fd40:	1aa4      	subs	r4, r4, r2
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800fd42:	4316      	orrs	r6, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800fd44:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800fd46:	603c      	str	r4, [r7, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800fd48:	4284      	cmp	r4, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800fd4a:	606e      	str	r6, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800fd4c:	602b      	str	r3, [r5, #0]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800fd4e:	bf38      	it	cc
 800fd50:	600c      	strcc	r4, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800fd52:	f108 0408 	add.w	r4, r8, #8
	( void ) xTaskResumeAll();
 800fd56:	f001 fa99 	bl	801128c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800fd5a:	0763      	lsls	r3, r4, #29
 800fd5c:	d00c      	beq.n	800fd78 <pvPortMalloc+0x104>
 800fd5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd62:	b672      	cpsid	i
 800fd64:	f383 8811 	msr	BASEPRI, r3
 800fd68:	f3bf 8f6f 	isb	sy
 800fd6c:	f3bf 8f4f 	dsb	sy
 800fd70:	b662      	cpsie	i
 800fd72:	e7fe      	b.n	800fd72 <pvPortMalloc+0xfe>
void *pvReturn = NULL;
 800fd74:	2400      	movs	r4, #0
 800fd76:	e7ee      	b.n	800fd56 <pvPortMalloc+0xe2>
}
 800fd78:	4620      	mov	r0, r4
 800fd7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd7e:	bf00      	nop
 800fd80:	20017358 	.word	0x20017358
 800fd84:	2001734c 	.word	0x2001734c
 800fd88:	20017364 	.word	0x20017364
 800fd8c:	2001735c 	.word	0x2001735c
 800fd90:	2002985c 	.word	0x2002985c
 800fd94:	000124f8 	.word	0x000124f8
 800fd98:	20017350 	.word	0x20017350
 800fd9c:	20017354 	.word	0x20017354

0800fda0 <vPortFree>:
{
 800fda0:	b510      	push	{r4, lr}
	if( pv != NULL )
 800fda2:	4604      	mov	r4, r0
 800fda4:	2800      	cmp	r0, #0
 800fda6:	d032      	beq.n	800fe0e <vPortFree+0x6e>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800fda8:	4a19      	ldr	r2, [pc, #100]	@ (800fe10 <vPortFree+0x70>)
 800fdaa:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800fdae:	6812      	ldr	r2, [r2, #0]
 800fdb0:	4213      	tst	r3, r2
 800fdb2:	d10a      	bne.n	800fdca <vPortFree+0x2a>
 800fdb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fdb8:	b672      	cpsid	i
 800fdba:	f383 8811 	msr	BASEPRI, r3
 800fdbe:	f3bf 8f6f 	isb	sy
 800fdc2:	f3bf 8f4f 	dsb	sy
 800fdc6:	b662      	cpsie	i
 800fdc8:	e7fe      	b.n	800fdc8 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800fdca:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800fdce:	b151      	cbz	r1, 800fde6 <vPortFree+0x46>
 800fdd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fdd4:	b672      	cpsid	i
 800fdd6:	f383 8811 	msr	BASEPRI, r3
 800fdda:	f3bf 8f6f 	isb	sy
 800fdde:	f3bf 8f4f 	dsb	sy
 800fde2:	b662      	cpsie	i
 800fde4:	e7fe      	b.n	800fde4 <vPortFree+0x44>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800fde6:	ea23 0302 	bic.w	r3, r3, r2
 800fdea:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800fdee:	f001 f9a7 	bl	8011140 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800fdf2:	4a08      	ldr	r2, [pc, #32]	@ (800fe14 <vPortFree+0x74>)
 800fdf4:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800fdf8:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800fdfc:	6811      	ldr	r1, [r2, #0]
 800fdfe:	440b      	add	r3, r1
 800fe00:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800fe02:	f7ff ff11 	bl	800fc28 <prvInsertBlockIntoFreeList>
}
 800fe06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 800fe0a:	f001 ba3f 	b.w	801128c <xTaskResumeAll>
}
 800fe0e:	bd10      	pop	{r4, pc}
 800fe10:	2001734c 	.word	0x2001734c
 800fe14:	20017354 	.word	0x20017354

0800fe18 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fe18:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800fe1c:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fe20:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fe22:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fe24:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800fe28:	2300      	movs	r3, #0
 800fe2a:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800fe2c:	4770      	bx	lr

0800fe2e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800fe2e:	2300      	movs	r3, #0
 800fe30:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800fe32:	4770      	bx	lr

0800fe34 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800fe34:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800fe36:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 800fe38:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800fe3a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800fe3c:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800fe3e:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800fe40:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800fe42:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800fe44:	3301      	adds	r3, #1
 800fe46:	6003      	str	r3, [r0, #0]
}
 800fe48:	4770      	bx	lr

0800fe4a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800fe4a:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800fe4c:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800fe4e:	1c63      	adds	r3, r4, #1
 800fe50:	d10a      	bne.n	800fe68 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800fe52:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800fe54:	685a      	ldr	r2, [r3, #4]
 800fe56:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800fe58:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800fe5a:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800fe5c:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800fe5e:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800fe60:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800fe62:	3301      	adds	r3, #1
 800fe64:	6003      	str	r3, [r0, #0]
}
 800fe66:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800fe68:	f100 0208 	add.w	r2, r0, #8
 800fe6c:	4613      	mov	r3, r2
 800fe6e:	6852      	ldr	r2, [r2, #4]
 800fe70:	6815      	ldr	r5, [r2, #0]
 800fe72:	42a5      	cmp	r5, r4
 800fe74:	d9fa      	bls.n	800fe6c <vListInsert+0x22>
 800fe76:	e7ed      	b.n	800fe54 <vListInsert+0xa>

0800fe78 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800fe78:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800fe7a:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 800fe7e:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800fe80:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800fe82:	6859      	ldr	r1, [r3, #4]
 800fe84:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800fe86:	bf08      	it	eq
 800fe88:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800fe8a:	2200      	movs	r2, #0
 800fe8c:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800fe8e:	681a      	ldr	r2, [r3, #0]
 800fe90:	3a01      	subs	r2, #1
 800fe92:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800fe94:	6818      	ldr	r0, [r3, #0]
}
 800fe96:	4770      	bx	lr

0800fe98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800fe98:	4808      	ldr	r0, [pc, #32]	@ (800febc <prvPortStartFirstTask+0x24>)
 800fe9a:	6800      	ldr	r0, [r0, #0]
 800fe9c:	6800      	ldr	r0, [r0, #0]
 800fe9e:	f380 8808 	msr	MSP, r0
 800fea2:	f04f 0000 	mov.w	r0, #0
 800fea6:	f380 8814 	msr	CONTROL, r0
 800feaa:	b662      	cpsie	i
 800feac:	b661      	cpsie	f
 800feae:	f3bf 8f4f 	dsb	sy
 800feb2:	f3bf 8f6f 	isb	sy
 800feb6:	df00      	svc	0
 800feb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800feba:	0000      	.short	0x0000
 800febc:	e000ed08 	.word	0xe000ed08

0800fec0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800fec0:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800fed0 <vPortEnableVFP+0x10>
 800fec4:	6801      	ldr	r1, [r0, #0]
 800fec6:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800feca:	6001      	str	r1, [r0, #0]
 800fecc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800fece:	0000      	.short	0x0000
 800fed0:	e000ed88 	.word	0xe000ed88

0800fed4 <prvTaskExitError>:
volatile uint32_t ulDummy = 0;
 800fed4:	2300      	movs	r3, #0
{
 800fed6:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800fed8:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 800feda:	4b0f      	ldr	r3, [pc, #60]	@ (800ff18 <prvTaskExitError+0x44>)
 800fedc:	681b      	ldr	r3, [r3, #0]
 800fede:	3301      	adds	r3, #1
 800fee0:	d00a      	beq.n	800fef8 <prvTaskExitError+0x24>
 800fee2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fee6:	b672      	cpsid	i
 800fee8:	f383 8811 	msr	BASEPRI, r3
 800feec:	f3bf 8f6f 	isb	sy
 800fef0:	f3bf 8f4f 	dsb	sy
 800fef4:	b662      	cpsie	i
 800fef6:	e7fe      	b.n	800fef6 <prvTaskExitError+0x22>
 800fef8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fefc:	b672      	cpsid	i
 800fefe:	f383 8811 	msr	BASEPRI, r3
 800ff02:	f3bf 8f6f 	isb	sy
 800ff06:	f3bf 8f4f 	dsb	sy
 800ff0a:	b662      	cpsie	i
	while( ulDummy == 0 )
 800ff0c:	9b01      	ldr	r3, [sp, #4]
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d0fc      	beq.n	800ff0c <prvTaskExitError+0x38>
}
 800ff12:	b002      	add	sp, #8
 800ff14:	4770      	bx	lr
 800ff16:	bf00      	nop
 800ff18:	20007aac 	.word	0x20007aac

0800ff1c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ff1c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ff20:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ff24:	f840 2c20 	str.w	r2, [r0, #-32]
}
 800ff28:	3844      	subs	r0, #68	@ 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ff2a:	6403      	str	r3, [r0, #64]	@ 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ff2c:	4b03      	ldr	r3, [pc, #12]	@ (800ff3c <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ff2e:	63c1      	str	r1, [r0, #60]	@ 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ff30:	6383      	str	r3, [r0, #56]	@ 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ff32:	f06f 0302 	mvn.w	r3, #2
 800ff36:	6203      	str	r3, [r0, #32]
}
 800ff38:	4770      	bx	lr
 800ff3a:	bf00      	nop
 800ff3c:	0800fed5 	.word	0x0800fed5

0800ff40 <SVC_Handler>:
	__asm volatile (
 800ff40:	4b07      	ldr	r3, [pc, #28]	@ (800ff60 <pxCurrentTCBConst2>)
 800ff42:	6819      	ldr	r1, [r3, #0]
 800ff44:	6808      	ldr	r0, [r1, #0]
 800ff46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff4a:	f380 8809 	msr	PSP, r0
 800ff4e:	f3bf 8f6f 	isb	sy
 800ff52:	f04f 0000 	mov.w	r0, #0
 800ff56:	f380 8811 	msr	BASEPRI, r0
 800ff5a:	4770      	bx	lr
 800ff5c:	f3af 8000 	nop.w

0800ff60 <pxCurrentTCBConst2>:
 800ff60:	20029d9c 	.word	0x20029d9c

0800ff64 <vPortEnterCritical>:
 800ff64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff68:	b672      	cpsid	i
 800ff6a:	f383 8811 	msr	BASEPRI, r3
 800ff6e:	f3bf 8f6f 	isb	sy
 800ff72:	f3bf 8f4f 	dsb	sy
 800ff76:	b662      	cpsie	i
	uxCriticalNesting++;
 800ff78:	4a0b      	ldr	r2, [pc, #44]	@ (800ffa8 <vPortEnterCritical+0x44>)
 800ff7a:	6813      	ldr	r3, [r2, #0]
 800ff7c:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800ff7e:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800ff80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800ff82:	d110      	bne.n	800ffa6 <vPortEnterCritical+0x42>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ff84:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800ff88:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 800ff8c:	b2db      	uxtb	r3, r3
 800ff8e:	b153      	cbz	r3, 800ffa6 <vPortEnterCritical+0x42>
 800ff90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff94:	b672      	cpsid	i
 800ff96:	f383 8811 	msr	BASEPRI, r3
 800ff9a:	f3bf 8f6f 	isb	sy
 800ff9e:	f3bf 8f4f 	dsb	sy
 800ffa2:	b662      	cpsie	i
 800ffa4:	e7fe      	b.n	800ffa4 <vPortEnterCritical+0x40>
}
 800ffa6:	4770      	bx	lr
 800ffa8:	20007aac 	.word	0x20007aac

0800ffac <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800ffac:	4a09      	ldr	r2, [pc, #36]	@ (800ffd4 <vPortExitCritical+0x28>)
 800ffae:	6813      	ldr	r3, [r2, #0]
 800ffb0:	b953      	cbnz	r3, 800ffc8 <vPortExitCritical+0x1c>
 800ffb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ffb6:	b672      	cpsid	i
 800ffb8:	f383 8811 	msr	BASEPRI, r3
 800ffbc:	f3bf 8f6f 	isb	sy
 800ffc0:	f3bf 8f4f 	dsb	sy
 800ffc4:	b662      	cpsie	i
 800ffc6:	e7fe      	b.n	800ffc6 <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 800ffc8:	3b01      	subs	r3, #1
 800ffca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ffcc:	b90b      	cbnz	r3, 800ffd2 <vPortExitCritical+0x26>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ffce:	f383 8811 	msr	BASEPRI, r3
}
 800ffd2:	4770      	bx	lr
 800ffd4:	20007aac 	.word	0x20007aac
	...

0800ffe0 <PendSV_Handler>:
	__asm volatile
 800ffe0:	f3ef 8009 	mrs	r0, PSP
 800ffe4:	f3bf 8f6f 	isb	sy
 800ffe8:	4b15      	ldr	r3, [pc, #84]	@ (8010040 <pxCurrentTCBConst>)
 800ffea:	681a      	ldr	r2, [r3, #0]
 800ffec:	f01e 0f10 	tst.w	lr, #16
 800fff0:	bf08      	it	eq
 800fff2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800fff6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fffa:	6010      	str	r0, [r2, #0]
 800fffc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010000:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8010004:	b672      	cpsid	i
 8010006:	f380 8811 	msr	BASEPRI, r0
 801000a:	f3bf 8f4f 	dsb	sy
 801000e:	f3bf 8f6f 	isb	sy
 8010012:	b662      	cpsie	i
 8010014:	f001 fa3a 	bl	801148c <vTaskSwitchContext>
 8010018:	f04f 0000 	mov.w	r0, #0
 801001c:	f380 8811 	msr	BASEPRI, r0
 8010020:	bc09      	pop	{r0, r3}
 8010022:	6819      	ldr	r1, [r3, #0]
 8010024:	6808      	ldr	r0, [r1, #0]
 8010026:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801002a:	f01e 0f10 	tst.w	lr, #16
 801002e:	bf08      	it	eq
 8010030:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010034:	f380 8809 	msr	PSP, r0
 8010038:	f3bf 8f6f 	isb	sy
 801003c:	4770      	bx	lr
 801003e:	bf00      	nop

08010040 <pxCurrentTCBConst>:
 8010040:	20029d9c 	.word	0x20029d9c

08010044 <SysTick_Handler>:
{
 8010044:	b508      	push	{r3, lr}
	__asm volatile
 8010046:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801004a:	b672      	cpsid	i
 801004c:	f383 8811 	msr	BASEPRI, r3
 8010050:	f3bf 8f6f 	isb	sy
 8010054:	f3bf 8f4f 	dsb	sy
 8010058:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 801005a:	f001 f87f 	bl	801115c <xTaskIncrementTick>
 801005e:	b128      	cbz	r0, 801006c <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010060:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8010064:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010068:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 801006c:	2300      	movs	r3, #0
 801006e:	f383 8811 	msr	BASEPRI, r3
}
 8010072:	bd08      	pop	{r3, pc}

08010074 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010074:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8010078:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801007a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801007e:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010080:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010082:	4b04      	ldr	r3, [pc, #16]	@ (8010094 <vPortSetupTimerInterrupt+0x20>)
 8010084:	681b      	ldr	r3, [r3, #0]
 8010086:	fbb3 f3f1 	udiv	r3, r3, r1
 801008a:	3b01      	subs	r3, #1
 801008c:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801008e:	2307      	movs	r3, #7
 8010090:	6113      	str	r3, [r2, #16]
}
 8010092:	4770      	bx	lr
 8010094:	20007a64 	.word	0x20007a64

08010098 <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8010098:	4b2c      	ldr	r3, [pc, #176]	@ (801014c <xPortStartScheduler+0xb4>)
{
 801009a:	b537      	push	{r0, r1, r2, r4, r5, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801009c:	781a      	ldrb	r2, [r3, #0]
 801009e:	b2d2      	uxtb	r2, r2
 80100a0:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80100a2:	22ff      	movs	r2, #255	@ 0xff
 80100a4:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80100a6:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80100a8:	4a29      	ldr	r2, [pc, #164]	@ (8010150 <xPortStartScheduler+0xb8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80100aa:	b2db      	uxtb	r3, r3
 80100ac:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80100b0:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80100b4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80100b8:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80100ba:	2307      	movs	r3, #7
 80100bc:	4a25      	ldr	r2, [pc, #148]	@ (8010154 <xPortStartScheduler+0xbc>)
 80100be:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80100c0:	f89d 1003 	ldrb.w	r1, [sp, #3]
			ulMaxPRIGROUPValue--;
 80100c4:	6813      	ldr	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80100c6:	0609      	lsls	r1, r1, #24
 80100c8:	d40c      	bmi.n	80100e4 <xPortStartScheduler+0x4c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80100ca:	2b03      	cmp	r3, #3
 80100cc:	d013      	beq.n	80100f6 <xPortStartScheduler+0x5e>
	__asm volatile
 80100ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80100d2:	b672      	cpsid	i
 80100d4:	f383 8811 	msr	BASEPRI, r3
 80100d8:	f3bf 8f6f 	isb	sy
 80100dc:	f3bf 8f4f 	dsb	sy
 80100e0:	b662      	cpsie	i
 80100e2:	e7fe      	b.n	80100e2 <xPortStartScheduler+0x4a>
			ulMaxPRIGROUPValue--;
 80100e4:	3b01      	subs	r3, #1
 80100e6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80100e8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80100ec:	005b      	lsls	r3, r3, #1
 80100ee:	b2db      	uxtb	r3, r3
 80100f0:	f88d 3003 	strb.w	r3, [sp, #3]
 80100f4:	e7e4      	b.n	80100c0 <xPortStartScheduler+0x28>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80100f6:	f44f 7340 	mov.w	r3, #768	@ 0x300
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80100fa:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
	uxCriticalNesting = 0;
 80100fe:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010100:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010102:	9b01      	ldr	r3, [sp, #4]
 8010104:	4a11      	ldr	r2, [pc, #68]	@ (801014c <xPortStartScheduler+0xb4>)
 8010106:	b2db      	uxtb	r3, r3
 8010108:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801010a:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 801010e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8010112:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010116:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 801011a:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 801011e:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 8010122:	f7ff ffa7 	bl	8010074 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8010126:	4b0c      	ldr	r3, [pc, #48]	@ (8010158 <xPortStartScheduler+0xc0>)
 8010128:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 801012a:	f7ff fec9 	bl	800fec0 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801012e:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 8010132:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8010136:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 801013a:	f7ff fead 	bl	800fe98 <prvPortStartFirstTask>
	vTaskSwitchContext();
 801013e:	f001 f9a5 	bl	801148c <vTaskSwitchContext>
}
 8010142:	4628      	mov	r0, r5
	prvTaskExitError();
 8010144:	f7ff fec6 	bl	800fed4 <prvTaskExitError>
}
 8010148:	b003      	add	sp, #12
 801014a:	bd30      	pop	{r4, r5, pc}
 801014c:	e000e400 	.word	0xe000e400
 8010150:	20029860 	.word	0x20029860
 8010154:	2002985c 	.word	0x2002985c
 8010158:	20007aac 	.word	0x20007aac

0801015c <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801015c:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010160:	2b0f      	cmp	r3, #15
 8010162:	d910      	bls.n	8010186 <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8010164:	4a13      	ldr	r2, [pc, #76]	@ (80101b4 <vPortValidateInterruptPriority+0x58>)
 8010166:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010168:	4a13      	ldr	r2, [pc, #76]	@ (80101b8 <vPortValidateInterruptPriority+0x5c>)
 801016a:	7812      	ldrb	r2, [r2, #0]
 801016c:	429a      	cmp	r2, r3
 801016e:	d90a      	bls.n	8010186 <vPortValidateInterruptPriority+0x2a>
 8010170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010174:	b672      	cpsid	i
 8010176:	f383 8811 	msr	BASEPRI, r3
 801017a:	f3bf 8f6f 	isb	sy
 801017e:	f3bf 8f4f 	dsb	sy
 8010182:	b662      	cpsie	i
 8010184:	e7fe      	b.n	8010184 <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010186:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801018a:	4a0c      	ldr	r2, [pc, #48]	@ (80101bc <vPortValidateInterruptPriority+0x60>)
 801018c:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 8010190:	6812      	ldr	r2, [r2, #0]
 8010192:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8010196:	4293      	cmp	r3, r2
 8010198:	d90a      	bls.n	80101b0 <vPortValidateInterruptPriority+0x54>
 801019a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801019e:	b672      	cpsid	i
 80101a0:	f383 8811 	msr	BASEPRI, r3
 80101a4:	f3bf 8f6f 	isb	sy
 80101a8:	f3bf 8f4f 	dsb	sy
 80101ac:	b662      	cpsie	i
 80101ae:	e7fe      	b.n	80101ae <vPortValidateInterruptPriority+0x52>
	}
 80101b0:	4770      	bx	lr
 80101b2:	bf00      	nop
 80101b4:	e000e3f0 	.word	0xe000e3f0
 80101b8:	20029860 	.word	0x20029860
 80101bc:	2002985c 	.word	0x2002985c

080101c0 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80101c0:	b510      	push	{r4, lr}
 80101c2:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80101c4:	f7ff fece 	bl	800ff64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80101c8:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80101ca:	f7ff feef 	bl	800ffac <vPortExitCritical>

	return xReturn;
}
 80101ce:	fab4 f084 	clz	r0, r4
 80101d2:	0940      	lsrs	r0, r0, #5
 80101d4:	bd10      	pop	{r4, pc}

080101d6 <prvCopyDataToQueue>:
{
 80101d6:	b570      	push	{r4, r5, r6, lr}
 80101d8:	4616      	mov	r6, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80101da:	6c02      	ldr	r2, [r0, #64]	@ 0x40
{
 80101dc:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80101de:	6b85      	ldr	r5, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80101e0:	b942      	cbnz	r2, 80101f4 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80101e2:	6806      	ldr	r6, [r0, #0]
 80101e4:	b99e      	cbnz	r6, 801020e <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80101e6:	6880      	ldr	r0, [r0, #8]
 80101e8:	f001 fb16 	bl	8011818 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80101ec:	60a6      	str	r6, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80101ee:	3501      	adds	r5, #1
 80101f0:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 80101f2:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 80101f4:	b96e      	cbnz	r6, 8010212 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80101f6:	6840      	ldr	r0, [r0, #4]
 80101f8:	f01b fabb 	bl	802b772 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80101fc:	6863      	ldr	r3, [r4, #4]
 80101fe:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8010200:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010202:	68a2      	ldr	r2, [r4, #8]
 8010204:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010206:	6063      	str	r3, [r4, #4]
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8010208:	bf24      	itt	cs
 801020a:	6823      	ldrcs	r3, [r4, #0]
 801020c:	6063      	strcs	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 801020e:	2000      	movs	r0, #0
 8010210:	e7ed      	b.n	80101ee <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8010212:	68c0      	ldr	r0, [r0, #12]
 8010214:	f01b faad 	bl	802b772 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010218:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 801021a:	68e3      	ldr	r3, [r4, #12]
 801021c:	4251      	negs	r1, r2
 801021e:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010220:	6822      	ldr	r2, [r4, #0]
 8010222:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010224:	60e3      	str	r3, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8010226:	bf3e      	ittt	cc
 8010228:	68a3      	ldrcc	r3, [r4, #8]
 801022a:	185b      	addcc	r3, r3, r1
 801022c:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 801022e:	2e02      	cmp	r6, #2
 8010230:	d1ed      	bne.n	801020e <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010232:	b10d      	cbz	r5, 8010238 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 8010234:	3d01      	subs	r5, #1
 8010236:	e7ea      	b.n	801020e <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 8010238:	4628      	mov	r0, r5
 801023a:	e7d8      	b.n	80101ee <prvCopyDataToQueue+0x18>

0801023c <prvCopyDataFromQueue>:
{
 801023c:	4603      	mov	r3, r0
 801023e:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010240:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 8010242:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010244:	b162      	cbz	r2, 8010260 <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010246:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010248:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801024a:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801024c:	428c      	cmp	r4, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801024e:	60dc      	str	r4, [r3, #12]
}
 8010250:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8010254:	bf24      	itt	cs
 8010256:	6819      	ldrcs	r1, [r3, #0]
 8010258:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801025a:	68d9      	ldr	r1, [r3, #12]
 801025c:	f01b ba89 	b.w	802b772 <memcpy>
}
 8010260:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010264:	4770      	bx	lr

08010266 <prvUnlockQueue>:
{
 8010266:	b570      	push	{r4, r5, r6, lr}
 8010268:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 801026a:	f7ff fe7b 	bl	800ff64 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 801026e:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010272:	f104 0624 	add.w	r6, r4, #36	@ 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8010276:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010278:	2d00      	cmp	r5, #0
 801027a:	dc14      	bgt.n	80102a6 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 801027c:	23ff      	movs	r3, #255	@ 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801027e:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 8010282:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 8010286:	f7ff fe91 	bl	800ffac <vPortExitCritical>
	taskENTER_CRITICAL();
 801028a:	f7ff fe6b 	bl	800ff64 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 801028e:	f894 5044 	ldrb.w	r5, [r4, #68]	@ 0x44
 8010292:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010294:	2d00      	cmp	r5, #0
 8010296:	dc12      	bgt.n	80102be <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 8010298:	23ff      	movs	r3, #255	@ 0xff
 801029a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
}
 801029e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 80102a2:	f7ff be83 	b.w	800ffac <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80102a6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	d0e7      	beq.n	801027c <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80102ac:	4630      	mov	r0, r6
 80102ae:	f001 f9cf 	bl	8011650 <xTaskRemoveFromEventList>
 80102b2:	b108      	cbz	r0, 80102b8 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 80102b4:	f001 fa5c 	bl	8011770 <vTaskMissedYield>
			--cTxLock;
 80102b8:	3d01      	subs	r5, #1
 80102ba:	b26d      	sxtb	r5, r5
 80102bc:	e7dc      	b.n	8010278 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80102be:	6923      	ldr	r3, [r4, #16]
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d0e9      	beq.n	8010298 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80102c4:	4630      	mov	r0, r6
 80102c6:	f001 f9c3 	bl	8011650 <xTaskRemoveFromEventList>
 80102ca:	b108      	cbz	r0, 80102d0 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 80102cc:	f001 fa50 	bl	8011770 <vTaskMissedYield>
				--cRxLock;
 80102d0:	3d01      	subs	r5, #1
 80102d2:	b26d      	sxtb	r5, r5
 80102d4:	e7de      	b.n	8010294 <prvUnlockQueue+0x2e>

080102d6 <xQueueGenericReset>:
{
 80102d6:	b538      	push	{r3, r4, r5, lr}
 80102d8:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 80102da:	4604      	mov	r4, r0
 80102dc:	b950      	cbnz	r0, 80102f4 <xQueueGenericReset+0x1e>
 80102de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80102e2:	b672      	cpsid	i
 80102e4:	f383 8811 	msr	BASEPRI, r3
 80102e8:	f3bf 8f6f 	isb	sy
 80102ec:	f3bf 8f4f 	dsb	sy
 80102f0:	b662      	cpsie	i
 80102f2:	e7fe      	b.n	80102f2 <xQueueGenericReset+0x1c>
	taskENTER_CRITICAL();
 80102f4:	f7ff fe36 	bl	800ff64 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80102f8:	6822      	ldr	r2, [r4, #0]
 80102fa:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80102fe:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010300:	434b      	muls	r3, r1
 8010302:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010304:	1a5b      	subs	r3, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010306:	60a0      	str	r0, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010308:	441a      	add	r2, r3
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801030a:	2000      	movs	r0, #0
		pxQueue->cRxLock = queueUNLOCKED;
 801030c:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801030e:	60e2      	str	r2, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8010310:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8010312:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8010316:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 801031a:	b9a5      	cbnz	r5, 8010346 <xQueueGenericReset+0x70>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801031c:	6923      	ldr	r3, [r4, #16]
 801031e:	b173      	cbz	r3, 801033e <xQueueGenericReset+0x68>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010320:	f104 0010 	add.w	r0, r4, #16
 8010324:	f001 f994 	bl	8011650 <xTaskRemoveFromEventList>
 8010328:	b148      	cbz	r0, 801033e <xQueueGenericReset+0x68>
					queueYIELD_IF_USING_PREEMPTION();
 801032a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801032e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010332:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8010336:	f3bf 8f4f 	dsb	sy
 801033a:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 801033e:	f7ff fe35 	bl	800ffac <vPortExitCritical>
}
 8010342:	2001      	movs	r0, #1
 8010344:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8010346:	f104 0010 	add.w	r0, r4, #16
 801034a:	f7ff fd65 	bl	800fe18 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801034e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8010352:	f7ff fd61 	bl	800fe18 <vListInitialise>
 8010356:	e7f2      	b.n	801033e <xQueueGenericReset+0x68>

08010358 <xQueueGenericCreateStatic.part.0>:
	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
 8010358:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801035a:	460d      	mov	r5, r1
		configASSERT( pxStaticQueue != NULL );
 801035c:	461c      	mov	r4, r3
 801035e:	b953      	cbnz	r3, 8010376 <xQueueGenericCreateStatic.part.0+0x1e>
 8010360:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010364:	b672      	cpsid	i
 8010366:	f383 8811 	msr	BASEPRI, r3
 801036a:	f3bf 8f6f 	isb	sy
 801036e:	f3bf 8f4f 	dsb	sy
 8010372:	b662      	cpsie	i
 8010374:	e7fe      	b.n	8010374 <xQueueGenericCreateStatic.part.0+0x1c>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8010376:	b15a      	cbz	r2, 8010390 <xQueueGenericCreateStatic.part.0+0x38>
 8010378:	b9b1      	cbnz	r1, 80103a8 <xQueueGenericCreateStatic.part.0+0x50>
 801037a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801037e:	b672      	cpsid	i
 8010380:	f383 8811 	msr	BASEPRI, r3
 8010384:	f3bf 8f6f 	isb	sy
 8010388:	f3bf 8f4f 	dsb	sy
 801038c:	b662      	cpsie	i
 801038e:	e7fe      	b.n	801038e <xQueueGenericCreateStatic.part.0+0x36>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8010390:	b151      	cbz	r1, 80103a8 <xQueueGenericCreateStatic.part.0+0x50>
 8010392:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010396:	b672      	cpsid	i
 8010398:	f383 8811 	msr	BASEPRI, r3
 801039c:	f3bf 8f6f 	isb	sy
 80103a0:	f3bf 8f4f 	dsb	sy
 80103a4:	b662      	cpsie	i
 80103a6:	e7fe      	b.n	80103a6 <xQueueGenericCreateStatic.part.0+0x4e>
			volatile size_t xSize = sizeof( StaticQueue_t );
 80103a8:	2350      	movs	r3, #80	@ 0x50
 80103aa:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 80103ac:	9b01      	ldr	r3, [sp, #4]
 80103ae:	2b50      	cmp	r3, #80	@ 0x50
 80103b0:	d00a      	beq.n	80103c8 <xQueueGenericCreateStatic.part.0+0x70>
 80103b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80103b6:	b672      	cpsid	i
 80103b8:	f383 8811 	msr	BASEPRI, r3
 80103bc:	f3bf 8f6f 	isb	sy
 80103c0:	f3bf 8f4f 	dsb	sy
 80103c4:	b662      	cpsie	i
 80103c6:	e7fe      	b.n	80103c6 <xQueueGenericCreateStatic.part.0+0x6e>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80103c8:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80103ca:	2d00      	cmp	r5, #0
 80103cc:	bf08      	it	eq
 80103ce:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80103d0:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80103d2:	f884 1046 	strb.w	r1, [r4, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 80103d6:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 80103d8:	e9c4 050f 	strd	r0, r5, [r4, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80103dc:	4620      	mov	r0, r4
 80103de:	f7ff ff7a 	bl	80102d6 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 80103e2:	f89d 3018 	ldrb.w	r3, [sp, #24]
	}
 80103e6:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 80103e8:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
	}
 80103ec:	b003      	add	sp, #12
 80103ee:	bd30      	pop	{r4, r5, pc}

080103f0 <xQueueGenericCreateStatic>:
	{
 80103f0:	b410      	push	{r4}
 80103f2:	f89d 4004 	ldrb.w	r4, [sp, #4]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80103f6:	b950      	cbnz	r0, 801040e <xQueueGenericCreateStatic+0x1e>
 80103f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80103fc:	b672      	cpsid	i
 80103fe:	f383 8811 	msr	BASEPRI, r3
 8010402:	f3bf 8f6f 	isb	sy
 8010406:	f3bf 8f4f 	dsb	sy
 801040a:	b662      	cpsie	i
 801040c:	e7fe      	b.n	801040c <xQueueGenericCreateStatic+0x1c>
 801040e:	9401      	str	r4, [sp, #4]
	}
 8010410:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010414:	f7ff bfa0 	b.w	8010358 <xQueueGenericCreateStatic.part.0>

08010418 <xQueueGenericCreate>:
	{
 8010418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801041a:	460d      	mov	r5, r1
 801041c:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801041e:	4606      	mov	r6, r0
 8010420:	b950      	cbnz	r0, 8010438 <xQueueGenericCreate+0x20>
 8010422:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010426:	b672      	cpsid	i
 8010428:	f383 8811 	msr	BASEPRI, r3
 801042c:	f3bf 8f6f 	isb	sy
 8010430:	f3bf 8f4f 	dsb	sy
 8010434:	b662      	cpsie	i
 8010436:	e7fe      	b.n	8010436 <xQueueGenericCreate+0x1e>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010438:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 801043a:	3050      	adds	r0, #80	@ 0x50
 801043c:	f7ff fc1a 	bl	800fc74 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8010440:	4604      	mov	r4, r0
 8010442:	b170      	cbz	r0, 8010462 <xQueueGenericCreate+0x4a>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8010444:	2300      	movs	r3, #0
 8010446:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 801044a:	b165      	cbz	r5, 8010466 <xQueueGenericCreate+0x4e>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801044c:	f100 0350 	add.w	r3, r0, #80	@ 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010450:	2101      	movs	r1, #1
 8010452:	4620      	mov	r0, r4
 8010454:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 8010456:	e9c4 650f 	strd	r6, r5, [r4, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801045a:	f7ff ff3c 	bl	80102d6 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 801045e:	f884 704c 	strb.w	r7, [r4, #76]	@ 0x4c
	}
 8010462:	4620      	mov	r0, r4
 8010464:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010466:	4603      	mov	r3, r0
 8010468:	e7f2      	b.n	8010450 <xQueueGenericCreate+0x38>

0801046a <xQueueCreateCountingSemaphoreStatic>:
	{
 801046a:	b513      	push	{r0, r1, r4, lr}
 801046c:	4613      	mov	r3, r2
 801046e:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 8010470:	b950      	cbnz	r0, 8010488 <xQueueCreateCountingSemaphoreStatic+0x1e>
 8010472:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010476:	b672      	cpsid	i
 8010478:	f383 8811 	msr	BASEPRI, r3
 801047c:	f3bf 8f6f 	isb	sy
 8010480:	f3bf 8f4f 	dsb	sy
 8010484:	b662      	cpsie	i
 8010486:	e7fe      	b.n	8010486 <xQueueCreateCountingSemaphoreStatic+0x1c>
		configASSERT( uxInitialCount <= uxMaxCount );
 8010488:	4288      	cmp	r0, r1
 801048a:	d20a      	bcs.n	80104a2 <xQueueCreateCountingSemaphoreStatic+0x38>
 801048c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010490:	b672      	cpsid	i
 8010492:	f383 8811 	msr	BASEPRI, r3
 8010496:	f3bf 8f6f 	isb	sy
 801049a:	f3bf 8f4f 	dsb	sy
 801049e:	b662      	cpsie	i
 80104a0:	e7fe      	b.n	80104a0 <xQueueCreateCountingSemaphoreStatic+0x36>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80104a2:	2202      	movs	r2, #2
 80104a4:	9200      	str	r2, [sp, #0]
 80104a6:	2200      	movs	r2, #0
 80104a8:	4611      	mov	r1, r2
 80104aa:	f7ff ffa1 	bl	80103f0 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 80104ae:	b100      	cbz	r0, 80104b2 <xQueueCreateCountingSemaphoreStatic+0x48>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80104b0:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 80104b2:	b002      	add	sp, #8
 80104b4:	bd10      	pop	{r4, pc}

080104b6 <xQueueCreateCountingSemaphore>:
	{
 80104b6:	b510      	push	{r4, lr}
 80104b8:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 80104ba:	b950      	cbnz	r0, 80104d2 <xQueueCreateCountingSemaphore+0x1c>
 80104bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80104c0:	b672      	cpsid	i
 80104c2:	f383 8811 	msr	BASEPRI, r3
 80104c6:	f3bf 8f6f 	isb	sy
 80104ca:	f3bf 8f4f 	dsb	sy
 80104ce:	b662      	cpsie	i
 80104d0:	e7fe      	b.n	80104d0 <xQueueCreateCountingSemaphore+0x1a>
		configASSERT( uxInitialCount <= uxMaxCount );
 80104d2:	4288      	cmp	r0, r1
 80104d4:	d20a      	bcs.n	80104ec <xQueueCreateCountingSemaphore+0x36>
 80104d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80104da:	b672      	cpsid	i
 80104dc:	f383 8811 	msr	BASEPRI, r3
 80104e0:	f3bf 8f6f 	isb	sy
 80104e4:	f3bf 8f4f 	dsb	sy
 80104e8:	b662      	cpsie	i
 80104ea:	e7fe      	b.n	80104ea <xQueueCreateCountingSemaphore+0x34>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80104ec:	2202      	movs	r2, #2
 80104ee:	2100      	movs	r1, #0
 80104f0:	f7ff ff92 	bl	8010418 <xQueueGenericCreate>
		if( xHandle != NULL )
 80104f4:	b100      	cbz	r0, 80104f8 <xQueueCreateCountingSemaphore+0x42>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80104f6:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 80104f8:	bd10      	pop	{r4, pc}

080104fa <xQueueGenericSend>:
{
 80104fa:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80104fe:	460f      	mov	r7, r1
 8010500:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 8010502:	4604      	mov	r4, r0
{
 8010504:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8010506:	b950      	cbnz	r0, 801051e <xQueueGenericSend+0x24>
 8010508:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801050c:	b672      	cpsid	i
 801050e:	f383 8811 	msr	BASEPRI, r3
 8010512:	f3bf 8f6f 	isb	sy
 8010516:	f3bf 8f4f 	dsb	sy
 801051a:	b662      	cpsie	i
 801051c:	e7fe      	b.n	801051c <xQueueGenericSend+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801051e:	b961      	cbnz	r1, 801053a <xQueueGenericSend+0x40>
 8010520:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8010522:	b153      	cbz	r3, 801053a <xQueueGenericSend+0x40>
 8010524:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010528:	b672      	cpsid	i
 801052a:	f383 8811 	msr	BASEPRI, r3
 801052e:	f3bf 8f6f 	isb	sy
 8010532:	f3bf 8f4f 	dsb	sy
 8010536:	b662      	cpsie	i
 8010538:	e7fe      	b.n	8010538 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801053a:	2e02      	cmp	r6, #2
 801053c:	d10d      	bne.n	801055a <xQueueGenericSend+0x60>
 801053e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8010540:	2b01      	cmp	r3, #1
 8010542:	d00a      	beq.n	801055a <xQueueGenericSend+0x60>
 8010544:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010548:	b672      	cpsid	i
 801054a:	f383 8811 	msr	BASEPRI, r3
 801054e:	f3bf 8f6f 	isb	sy
 8010552:	f3bf 8f4f 	dsb	sy
 8010556:	b662      	cpsie	i
 8010558:	e7fe      	b.n	8010558 <xQueueGenericSend+0x5e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801055a:	f001 f90f 	bl	801177c <xTaskGetSchedulerState>
 801055e:	4605      	mov	r5, r0
 8010560:	b330      	cbz	r0, 80105b0 <xQueueGenericSend+0xb6>
 8010562:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 8010564:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 8010568:	f7ff fcfc 	bl	800ff64 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801056c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 801056e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8010570:	429a      	cmp	r2, r3
 8010572:	d301      	bcc.n	8010578 <xQueueGenericSend+0x7e>
 8010574:	2e02      	cmp	r6, #2
 8010576:	d129      	bne.n	80105cc <xQueueGenericSend+0xd2>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010578:	4632      	mov	r2, r6
 801057a:	4639      	mov	r1, r7
 801057c:	4620      	mov	r0, r4
 801057e:	f7ff fe2a 	bl	80101d6 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010582:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8010584:	b11b      	cbz	r3, 801058e <xQueueGenericSend+0x94>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010586:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 801058a:	f001 f861 	bl	8011650 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 801058e:	b148      	cbz	r0, 80105a4 <xQueueGenericSend+0xaa>
						queueYIELD_IF_USING_PREEMPTION();
 8010590:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8010594:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010598:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 801059c:	f3bf 8f4f 	dsb	sy
 80105a0:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80105a4:	f7ff fd02 	bl	800ffac <vPortExitCritical>
				return pdPASS;
 80105a8:	2001      	movs	r0, #1
}
 80105aa:	b004      	add	sp, #16
 80105ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80105b0:	9b01      	ldr	r3, [sp, #4]
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d0d6      	beq.n	8010564 <xQueueGenericSend+0x6a>
 80105b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80105ba:	b672      	cpsid	i
 80105bc:	f383 8811 	msr	BASEPRI, r3
 80105c0:	f3bf 8f6f 	isb	sy
 80105c4:	f3bf 8f4f 	dsb	sy
 80105c8:	b662      	cpsie	i
 80105ca:	e7fe      	b.n	80105ca <xQueueGenericSend+0xd0>
				if( xTicksToWait == ( TickType_t ) 0 )
 80105cc:	9b01      	ldr	r3, [sp, #4]
 80105ce:	b91b      	cbnz	r3, 80105d8 <xQueueGenericSend+0xde>
					taskEXIT_CRITICAL();
 80105d0:	f7ff fcec 	bl	800ffac <vPortExitCritical>
					return errQUEUE_FULL;
 80105d4:	2000      	movs	r0, #0
 80105d6:	e7e8      	b.n	80105aa <xQueueGenericSend+0xb0>
				else if( xEntryTimeSet == pdFALSE )
 80105d8:	b915      	cbnz	r5, 80105e0 <xQueueGenericSend+0xe6>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80105da:	a802      	add	r0, sp, #8
 80105dc:	f001 f87c 	bl	80116d8 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80105e0:	f7ff fce4 	bl	800ffac <vPortExitCritical>
		vTaskSuspendAll();
 80105e4:	f000 fdac 	bl	8011140 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80105e8:	f7ff fcbc 	bl	800ff64 <vPortEnterCritical>
 80105ec:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80105f0:	2bff      	cmp	r3, #255	@ 0xff
 80105f2:	d101      	bne.n	80105f8 <xQueueGenericSend+0xfe>
 80105f4:	f884 8044 	strb.w	r8, [r4, #68]	@ 0x44
 80105f8:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80105fc:	2bff      	cmp	r3, #255	@ 0xff
 80105fe:	d101      	bne.n	8010604 <xQueueGenericSend+0x10a>
 8010600:	f884 8045 	strb.w	r8, [r4, #69]	@ 0x45
 8010604:	f7ff fcd2 	bl	800ffac <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010608:	a901      	add	r1, sp, #4
 801060a:	a802      	add	r0, sp, #8
 801060c:	f001 f870 	bl	80116f0 <xTaskCheckForTimeOut>
 8010610:	bb38      	cbnz	r0, 8010662 <xQueueGenericSend+0x168>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010612:	f7ff fca7 	bl	800ff64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8010616:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8010618:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801061a:	429a      	cmp	r2, r3
 801061c:	d10e      	bne.n	801063c <xQueueGenericSend+0x142>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 801061e:	f7ff fcc5 	bl	800ffac <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010622:	9901      	ldr	r1, [sp, #4]
 8010624:	f104 0010 	add.w	r0, r4, #16
 8010628:	f000 ffd6 	bl	80115d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801062c:	4620      	mov	r0, r4
 801062e:	f7ff fe1a 	bl	8010266 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010632:	f000 fe2b 	bl	801128c <xTaskResumeAll>
 8010636:	b148      	cbz	r0, 801064c <xQueueGenericSend+0x152>
 8010638:	2501      	movs	r5, #1
 801063a:	e795      	b.n	8010568 <xQueueGenericSend+0x6e>
	taskEXIT_CRITICAL();
 801063c:	f7ff fcb6 	bl	800ffac <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8010640:	4620      	mov	r0, r4
 8010642:	f7ff fe10 	bl	8010266 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010646:	f000 fe21 	bl	801128c <xTaskResumeAll>
 801064a:	e7f5      	b.n	8010638 <xQueueGenericSend+0x13e>
					portYIELD_WITHIN_API();
 801064c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8010650:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010654:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8010658:	f3bf 8f4f 	dsb	sy
 801065c:	f3bf 8f6f 	isb	sy
 8010660:	e7ea      	b.n	8010638 <xQueueGenericSend+0x13e>
			prvUnlockQueue( pxQueue );
 8010662:	4620      	mov	r0, r4
 8010664:	f7ff fdff 	bl	8010266 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010668:	f000 fe10 	bl	801128c <xTaskResumeAll>
			return errQUEUE_FULL;
 801066c:	e7b2      	b.n	80105d4 <xQueueGenericSend+0xda>

0801066e <xQueueCreateMutexStatic>:
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 801066e:	2200      	movs	r2, #0
	{
 8010670:	460b      	mov	r3, r1
 8010672:	b513      	push	{r0, r1, r4, lr}
 8010674:	4611      	mov	r1, r2
 8010676:	9000      	str	r0, [sp, #0]
 8010678:	2001      	movs	r0, #1
 801067a:	f7ff fe6d 	bl	8010358 <xQueueGenericCreateStatic.part.0>
		if( pxNewQueue != NULL )
 801067e:	4604      	mov	r4, r0
 8010680:	b138      	cbz	r0, 8010692 <xQueueCreateMutexStatic+0x24>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8010682:	2300      	movs	r3, #0
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8010684:	461a      	mov	r2, r3
 8010686:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8010688:	6083      	str	r3, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 801068a:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 801068c:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 801068e:	f7ff ff34 	bl	80104fa <xQueueGenericSend>
	}
 8010692:	4620      	mov	r0, r4
 8010694:	b002      	add	sp, #8
 8010696:	bd10      	pop	{r4, pc}

08010698 <xQueueCreateMutex>:
	{
 8010698:	b570      	push	{r4, r5, r6, lr}
 801069a:	4606      	mov	r6, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 801069c:	2050      	movs	r0, #80	@ 0x50
 801069e:	f7ff fae9 	bl	800fc74 <pvPortMalloc>
 80106a2:	4604      	mov	r4, r0
		if( pxNewQueue != NULL )
 80106a4:	b198      	cbz	r0, 80106ce <xQueueCreateMutex+0x36>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80106a6:	2500      	movs	r5, #0
	pxNewQueue->uxLength = uxQueueLength;
 80106a8:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80106aa:	6000      	str	r0, [r0, #0]
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80106ac:	f880 5046 	strb.w	r5, [r0, #70]	@ 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 80106b0:	e9c0 150f 	strd	r1, r5, [r0, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80106b4:	f7ff fe0f 	bl	80102d6 <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80106b8:	462b      	mov	r3, r5
 80106ba:	462a      	mov	r2, r5
 80106bc:	4629      	mov	r1, r5
 80106be:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 80106c0:	f884 604c 	strb.w	r6, [r4, #76]	@ 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80106c4:	60a5      	str	r5, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80106c6:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80106c8:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80106ca:	f7ff ff16 	bl	80104fa <xQueueGenericSend>
	}
 80106ce:	4620      	mov	r0, r4
 80106d0:	bd70      	pop	{r4, r5, r6, pc}

080106d2 <xQueueGenericSendFromISR>:
{
 80106d2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80106d6:	4689      	mov	r9, r1
 80106d8:	4617      	mov	r7, r2
 80106da:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 80106dc:	4604      	mov	r4, r0
 80106de:	b950      	cbnz	r0, 80106f6 <xQueueGenericSendFromISR+0x24>
 80106e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80106e4:	b672      	cpsid	i
 80106e6:	f383 8811 	msr	BASEPRI, r3
 80106ea:	f3bf 8f6f 	isb	sy
 80106ee:	f3bf 8f4f 	dsb	sy
 80106f2:	b662      	cpsie	i
 80106f4:	e7fe      	b.n	80106f4 <xQueueGenericSendFromISR+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80106f6:	b961      	cbnz	r1, 8010712 <xQueueGenericSendFromISR+0x40>
 80106f8:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80106fa:	b153      	cbz	r3, 8010712 <xQueueGenericSendFromISR+0x40>
 80106fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010700:	b672      	cpsid	i
 8010702:	f383 8811 	msr	BASEPRI, r3
 8010706:	f3bf 8f6f 	isb	sy
 801070a:	f3bf 8f4f 	dsb	sy
 801070e:	b662      	cpsie	i
 8010710:	e7fe      	b.n	8010710 <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010712:	2e02      	cmp	r6, #2
 8010714:	d10d      	bne.n	8010732 <xQueueGenericSendFromISR+0x60>
 8010716:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8010718:	2b01      	cmp	r3, #1
 801071a:	d00a      	beq.n	8010732 <xQueueGenericSendFromISR+0x60>
 801071c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010720:	b672      	cpsid	i
 8010722:	f383 8811 	msr	BASEPRI, r3
 8010726:	f3bf 8f6f 	isb	sy
 801072a:	f3bf 8f4f 	dsb	sy
 801072e:	b662      	cpsie	i
 8010730:	e7fe      	b.n	8010730 <xQueueGenericSendFromISR+0x5e>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010732:	f7ff fd13 	bl	801015c <vPortValidateInterruptPriority>
	__asm volatile
 8010736:	f3ef 8811 	mrs	r8, BASEPRI
 801073a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801073e:	b672      	cpsid	i
 8010740:	f383 8811 	msr	BASEPRI, r3
 8010744:	f3bf 8f6f 	isb	sy
 8010748:	f3bf 8f4f 	dsb	sy
 801074c:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801074e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8010750:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8010752:	429a      	cmp	r2, r3
 8010754:	d301      	bcc.n	801075a <xQueueGenericSendFromISR+0x88>
 8010756:	2e02      	cmp	r6, #2
 8010758:	d11d      	bne.n	8010796 <xQueueGenericSendFromISR+0xc4>
			const int8_t cTxLock = pxQueue->cTxLock;
 801075a:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801075e:	4632      	mov	r2, r6
 8010760:	4649      	mov	r1, r9
 8010762:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 8010764:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010766:	f7ff fd36 	bl	80101d6 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 801076a:	1c6b      	adds	r3, r5, #1
 801076c:	d10e      	bne.n	801078c <xQueueGenericSendFromISR+0xba>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801076e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8010770:	b13b      	cbz	r3, 8010782 <xQueueGenericSendFromISR+0xb0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010772:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8010776:	f000 ff6b 	bl	8011650 <xTaskRemoveFromEventList>
 801077a:	b110      	cbz	r0, 8010782 <xQueueGenericSendFromISR+0xb0>
							if( pxHigherPriorityTaskWoken != NULL )
 801077c:	b10f      	cbz	r7, 8010782 <xQueueGenericSendFromISR+0xb0>
								*pxHigherPriorityTaskWoken = pdTRUE;
 801077e:	2301      	movs	r3, #1
 8010780:	603b      	str	r3, [r7, #0]
			xReturn = pdPASS;
 8010782:	2001      	movs	r0, #1
	__asm volatile
 8010784:	f388 8811 	msr	BASEPRI, r8
}
 8010788:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801078c:	3501      	adds	r5, #1
 801078e:	b26d      	sxtb	r5, r5
 8010790:	f884 5045 	strb.w	r5, [r4, #69]	@ 0x45
 8010794:	e7f5      	b.n	8010782 <xQueueGenericSendFromISR+0xb0>
			xReturn = errQUEUE_FULL;
 8010796:	2000      	movs	r0, #0
 8010798:	e7f4      	b.n	8010784 <xQueueGenericSendFromISR+0xb2>

0801079a <xQueueGiveFromISR>:
{
 801079a:	b570      	push	{r4, r5, r6, lr}
 801079c:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 801079e:	4604      	mov	r4, r0
 80107a0:	b950      	cbnz	r0, 80107b8 <xQueueGiveFromISR+0x1e>
	__asm volatile
 80107a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80107a6:	b672      	cpsid	i
 80107a8:	f383 8811 	msr	BASEPRI, r3
 80107ac:	f3bf 8f6f 	isb	sy
 80107b0:	f3bf 8f4f 	dsb	sy
 80107b4:	b662      	cpsie	i
 80107b6:	e7fe      	b.n	80107b6 <xQueueGiveFromISR+0x1c>
	configASSERT( pxQueue->uxItemSize == 0 );
 80107b8:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80107ba:	b153      	cbz	r3, 80107d2 <xQueueGiveFromISR+0x38>
 80107bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80107c0:	b672      	cpsid	i
 80107c2:	f383 8811 	msr	BASEPRI, r3
 80107c6:	f3bf 8f6f 	isb	sy
 80107ca:	f3bf 8f4f 	dsb	sy
 80107ce:	b662      	cpsie	i
 80107d0:	e7fe      	b.n	80107d0 <xQueueGiveFromISR+0x36>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80107d2:	6803      	ldr	r3, [r0, #0]
 80107d4:	b963      	cbnz	r3, 80107f0 <xQueueGiveFromISR+0x56>
 80107d6:	6883      	ldr	r3, [r0, #8]
 80107d8:	b153      	cbz	r3, 80107f0 <xQueueGiveFromISR+0x56>
 80107da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80107de:	b672      	cpsid	i
 80107e0:	f383 8811 	msr	BASEPRI, r3
 80107e4:	f3bf 8f6f 	isb	sy
 80107e8:	f3bf 8f4f 	dsb	sy
 80107ec:	b662      	cpsie	i
 80107ee:	e7fe      	b.n	80107ee <xQueueGiveFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80107f0:	f7ff fcb4 	bl	801015c <vPortValidateInterruptPriority>
	__asm volatile
 80107f4:	f3ef 8611 	mrs	r6, BASEPRI
 80107f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80107fc:	b672      	cpsid	i
 80107fe:	f383 8811 	msr	BASEPRI, r3
 8010802:	f3bf 8f6f 	isb	sy
 8010806:	f3bf 8f4f 	dsb	sy
 801080a:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801080c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 801080e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8010810:	4293      	cmp	r3, r2
 8010812:	d919      	bls.n	8010848 <xQueueGiveFromISR+0xae>
			const int8_t cTxLock = pxQueue->cTxLock;
 8010814:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010818:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 801081a:	29ff      	cmp	r1, #255	@ 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 801081c:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801081e:	63a2      	str	r2, [r4, #56]	@ 0x38
			if( cTxLock == queueUNLOCKED )
 8010820:	d10d      	bne.n	801083e <xQueueGiveFromISR+0xa4>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010822:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8010824:	b13b      	cbz	r3, 8010836 <xQueueGiveFromISR+0x9c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010826:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 801082a:	f000 ff11 	bl	8011650 <xTaskRemoveFromEventList>
 801082e:	b110      	cbz	r0, 8010836 <xQueueGiveFromISR+0x9c>
							if( pxHigherPriorityTaskWoken != NULL )
 8010830:	b10d      	cbz	r5, 8010836 <xQueueGiveFromISR+0x9c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010832:	2301      	movs	r3, #1
 8010834:	602b      	str	r3, [r5, #0]
			xReturn = pdPASS;
 8010836:	2001      	movs	r0, #1
	__asm volatile
 8010838:	f386 8811 	msr	BASEPRI, r6
}
 801083c:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801083e:	3301      	adds	r3, #1
 8010840:	b25b      	sxtb	r3, r3
 8010842:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8010846:	e7f6      	b.n	8010836 <xQueueGiveFromISR+0x9c>
			xReturn = errQUEUE_FULL;
 8010848:	2000      	movs	r0, #0
 801084a:	e7f5      	b.n	8010838 <xQueueGiveFromISR+0x9e>

0801084c <xQueueReceive>:
{
 801084c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8010850:	460e      	mov	r6, r1
	configASSERT( ( pxQueue ) );
 8010852:	4604      	mov	r4, r0
{
 8010854:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8010856:	b950      	cbnz	r0, 801086e <xQueueReceive+0x22>
	__asm volatile
 8010858:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801085c:	b672      	cpsid	i
 801085e:	f383 8811 	msr	BASEPRI, r3
 8010862:	f3bf 8f6f 	isb	sy
 8010866:	f3bf 8f4f 	dsb	sy
 801086a:	b662      	cpsie	i
 801086c:	e7fe      	b.n	801086c <xQueueReceive+0x20>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801086e:	b961      	cbnz	r1, 801088a <xQueueReceive+0x3e>
 8010870:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8010872:	b153      	cbz	r3, 801088a <xQueueReceive+0x3e>
 8010874:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010878:	b672      	cpsid	i
 801087a:	f383 8811 	msr	BASEPRI, r3
 801087e:	f3bf 8f6f 	isb	sy
 8010882:	f3bf 8f4f 	dsb	sy
 8010886:	b662      	cpsie	i
 8010888:	e7fe      	b.n	8010888 <xQueueReceive+0x3c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801088a:	f000 ff77 	bl	801177c <xTaskGetSchedulerState>
 801088e:	4605      	mov	r5, r0
 8010890:	b318      	cbz	r0, 80108da <xQueueReceive+0x8e>
 8010892:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 8010894:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 8010898:	f7ff fb64 	bl	800ff64 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801089c:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801089e:	b357      	cbz	r7, 80108f6 <xQueueReceive+0xaa>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80108a0:	3f01      	subs	r7, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80108a2:	4631      	mov	r1, r6
 80108a4:	4620      	mov	r0, r4
 80108a6:	f7ff fcc9 	bl	801023c <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80108aa:	63a7      	str	r7, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80108ac:	6923      	ldr	r3, [r4, #16]
 80108ae:	b173      	cbz	r3, 80108ce <xQueueReceive+0x82>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80108b0:	f104 0010 	add.w	r0, r4, #16
 80108b4:	f000 fecc 	bl	8011650 <xTaskRemoveFromEventList>
 80108b8:	b148      	cbz	r0, 80108ce <xQueueReceive+0x82>
						queueYIELD_IF_USING_PREEMPTION();
 80108ba:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80108be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80108c2:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80108c6:	f3bf 8f4f 	dsb	sy
 80108ca:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80108ce:	f7ff fb6d 	bl	800ffac <vPortExitCritical>
				return pdPASS;
 80108d2:	2001      	movs	r0, #1
}
 80108d4:	b004      	add	sp, #16
 80108d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80108da:	9b01      	ldr	r3, [sp, #4]
 80108dc:	2b00      	cmp	r3, #0
 80108de:	d0d9      	beq.n	8010894 <xQueueReceive+0x48>
 80108e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80108e4:	b672      	cpsid	i
 80108e6:	f383 8811 	msr	BASEPRI, r3
 80108ea:	f3bf 8f6f 	isb	sy
 80108ee:	f3bf 8f4f 	dsb	sy
 80108f2:	b662      	cpsie	i
 80108f4:	e7fe      	b.n	80108f4 <xQueueReceive+0xa8>
				if( xTicksToWait == ( TickType_t ) 0 )
 80108f6:	9b01      	ldr	r3, [sp, #4]
 80108f8:	b91b      	cbnz	r3, 8010902 <xQueueReceive+0xb6>
					taskEXIT_CRITICAL();
 80108fa:	f7ff fb57 	bl	800ffac <vPortExitCritical>
					return errQUEUE_EMPTY;
 80108fe:	2000      	movs	r0, #0
 8010900:	e7e8      	b.n	80108d4 <xQueueReceive+0x88>
				else if( xEntryTimeSet == pdFALSE )
 8010902:	b915      	cbnz	r5, 801090a <xQueueReceive+0xbe>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010904:	a802      	add	r0, sp, #8
 8010906:	f000 fee7 	bl	80116d8 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 801090a:	f7ff fb4f 	bl	800ffac <vPortExitCritical>
		vTaskSuspendAll();
 801090e:	f000 fc17 	bl	8011140 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010912:	f7ff fb27 	bl	800ff64 <vPortEnterCritical>
 8010916:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801091a:	2bff      	cmp	r3, #255	@ 0xff
 801091c:	d101      	bne.n	8010922 <xQueueReceive+0xd6>
 801091e:	f884 8044 	strb.w	r8, [r4, #68]	@ 0x44
 8010922:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8010926:	2bff      	cmp	r3, #255	@ 0xff
 8010928:	d101      	bne.n	801092e <xQueueReceive+0xe2>
 801092a:	f884 8045 	strb.w	r8, [r4, #69]	@ 0x45
 801092e:	f7ff fb3d 	bl	800ffac <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010932:	a901      	add	r1, sp, #4
 8010934:	a802      	add	r0, sp, #8
 8010936:	f000 fedb 	bl	80116f0 <xTaskCheckForTimeOut>
 801093a:	bb00      	cbnz	r0, 801097e <xQueueReceive+0x132>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801093c:	4620      	mov	r0, r4
 801093e:	f7ff fc3f 	bl	80101c0 <prvIsQueueEmpty>
 8010942:	b1b0      	cbz	r0, 8010972 <xQueueReceive+0x126>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010944:	9901      	ldr	r1, [sp, #4]
 8010946:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 801094a:	f000 fe45 	bl	80115d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801094e:	4620      	mov	r0, r4
 8010950:	f7ff fc89 	bl	8010266 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010954:	f000 fc9a 	bl	801128c <xTaskResumeAll>
 8010958:	b948      	cbnz	r0, 801096e <xQueueReceive+0x122>
					portYIELD_WITHIN_API();
 801095a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801095e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010962:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8010966:	f3bf 8f4f 	dsb	sy
 801096a:	f3bf 8f6f 	isb	sy
 801096e:	2501      	movs	r5, #1
 8010970:	e792      	b.n	8010898 <xQueueReceive+0x4c>
				prvUnlockQueue( pxQueue );
 8010972:	4620      	mov	r0, r4
 8010974:	f7ff fc77 	bl	8010266 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010978:	f000 fc88 	bl	801128c <xTaskResumeAll>
 801097c:	e7f7      	b.n	801096e <xQueueReceive+0x122>
			prvUnlockQueue( pxQueue );
 801097e:	4620      	mov	r0, r4
 8010980:	f7ff fc71 	bl	8010266 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010984:	f000 fc82 	bl	801128c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010988:	4620      	mov	r0, r4
 801098a:	f7ff fc19 	bl	80101c0 <prvIsQueueEmpty>
 801098e:	2800      	cmp	r0, #0
 8010990:	d0ed      	beq.n	801096e <xQueueReceive+0x122>
 8010992:	e7b4      	b.n	80108fe <xQueueReceive+0xb2>

08010994 <xQueueSemaphoreTake>:
{
 8010994:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010996:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 8010998:	4604      	mov	r4, r0
{
 801099a:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 801099c:	b950      	cbnz	r0, 80109b4 <xQueueSemaphoreTake+0x20>
 801099e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80109a2:	b672      	cpsid	i
 80109a4:	f383 8811 	msr	BASEPRI, r3
 80109a8:	f3bf 8f6f 	isb	sy
 80109ac:	f3bf 8f4f 	dsb	sy
 80109b0:	b662      	cpsie	i
 80109b2:	e7fe      	b.n	80109b2 <xQueueSemaphoreTake+0x1e>
	configASSERT( pxQueue->uxItemSize == 0 );
 80109b4:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 80109b6:	b155      	cbz	r5, 80109ce <xQueueSemaphoreTake+0x3a>
 80109b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80109bc:	b672      	cpsid	i
 80109be:	f383 8811 	msr	BASEPRI, r3
 80109c2:	f3bf 8f6f 	isb	sy
 80109c6:	f3bf 8f4f 	dsb	sy
 80109ca:	b662      	cpsie	i
 80109cc:	e7fe      	b.n	80109cc <xQueueSemaphoreTake+0x38>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80109ce:	f000 fed5 	bl	801177c <xTaskGetSchedulerState>
 80109d2:	4606      	mov	r6, r0
 80109d4:	b320      	cbz	r0, 8010a20 <xQueueSemaphoreTake+0x8c>
 80109d6:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 80109d8:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
 80109da:	f7ff fac3 	bl	800ff64 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80109de:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80109e0:	b363      	cbz	r3, 8010a3c <xQueueSemaphoreTake+0xa8>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80109e2:	3b01      	subs	r3, #1
 80109e4:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80109e6:	6823      	ldr	r3, [r4, #0]
 80109e8:	b913      	cbnz	r3, 80109f0 <xQueueSemaphoreTake+0x5c>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80109ea:	f000 ffad 	bl	8011948 <pvTaskIncrementMutexHeldCount>
 80109ee:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80109f0:	6923      	ldr	r3, [r4, #16]
 80109f2:	b173      	cbz	r3, 8010a12 <xQueueSemaphoreTake+0x7e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80109f4:	f104 0010 	add.w	r0, r4, #16
 80109f8:	f000 fe2a 	bl	8011650 <xTaskRemoveFromEventList>
 80109fc:	b148      	cbz	r0, 8010a12 <xQueueSemaphoreTake+0x7e>
						queueYIELD_IF_USING_PREEMPTION();
 80109fe:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8010a02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010a06:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8010a0a:	f3bf 8f4f 	dsb	sy
 8010a0e:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8010a12:	f7ff facb 	bl	800ffac <vPortExitCritical>
				return pdPASS;
 8010a16:	2001      	movs	r0, #1
}
 8010a18:	b005      	add	sp, #20
 8010a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010a1c:	4635      	mov	r5, r6
 8010a1e:	e7db      	b.n	80109d8 <xQueueSemaphoreTake+0x44>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010a20:	9b01      	ldr	r3, [sp, #4]
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	d0fa      	beq.n	8010a1c <xQueueSemaphoreTake+0x88>
 8010a26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a2a:	b672      	cpsid	i
 8010a2c:	f383 8811 	msr	BASEPRI, r3
 8010a30:	f3bf 8f6f 	isb	sy
 8010a34:	f3bf 8f4f 	dsb	sy
 8010a38:	b662      	cpsie	i
 8010a3a:	e7fe      	b.n	8010a3a <xQueueSemaphoreTake+0xa6>
				if( xTicksToWait == ( TickType_t ) 0 )
 8010a3c:	9b01      	ldr	r3, [sp, #4]
 8010a3e:	b963      	cbnz	r3, 8010a5a <xQueueSemaphoreTake+0xc6>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8010a40:	2d00      	cmp	r5, #0
 8010a42:	d068      	beq.n	8010b16 <xQueueSemaphoreTake+0x182>
 8010a44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a48:	b672      	cpsid	i
 8010a4a:	f383 8811 	msr	BASEPRI, r3
 8010a4e:	f3bf 8f6f 	isb	sy
 8010a52:	f3bf 8f4f 	dsb	sy
 8010a56:	b662      	cpsie	i
 8010a58:	e7fe      	b.n	8010a58 <xQueueSemaphoreTake+0xc4>
				else if( xEntryTimeSet == pdFALSE )
 8010a5a:	b916      	cbnz	r6, 8010a62 <xQueueSemaphoreTake+0xce>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010a5c:	a802      	add	r0, sp, #8
 8010a5e:	f000 fe3b 	bl	80116d8 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8010a62:	f7ff faa3 	bl	800ffac <vPortExitCritical>
		vTaskSuspendAll();
 8010a66:	f000 fb6b 	bl	8011140 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010a6a:	f7ff fa7b 	bl	800ff64 <vPortEnterCritical>
 8010a6e:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8010a72:	2bff      	cmp	r3, #255	@ 0xff
 8010a74:	d101      	bne.n	8010a7a <xQueueSemaphoreTake+0xe6>
 8010a76:	f884 7044 	strb.w	r7, [r4, #68]	@ 0x44
 8010a7a:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8010a7e:	2bff      	cmp	r3, #255	@ 0xff
 8010a80:	d101      	bne.n	8010a86 <xQueueSemaphoreTake+0xf2>
 8010a82:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010a86:	f7ff fa91 	bl	800ffac <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010a8a:	a901      	add	r1, sp, #4
 8010a8c:	a802      	add	r0, sp, #8
 8010a8e:	f000 fe2f 	bl	80116f0 <xTaskCheckForTimeOut>
 8010a92:	bb50      	cbnz	r0, 8010aea <xQueueSemaphoreTake+0x156>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010a94:	4620      	mov	r0, r4
 8010a96:	f7ff fb93 	bl	80101c0 <prvIsQueueEmpty>
 8010a9a:	b300      	cbz	r0, 8010ade <xQueueSemaphoreTake+0x14a>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010a9c:	6823      	ldr	r3, [r4, #0]
 8010a9e:	b93b      	cbnz	r3, 8010ab0 <xQueueSemaphoreTake+0x11c>
						taskENTER_CRITICAL();
 8010aa0:	f7ff fa60 	bl	800ff64 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010aa4:	68a0      	ldr	r0, [r4, #8]
 8010aa6:	f000 fe79 	bl	801179c <xTaskPriorityInherit>
 8010aaa:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8010aac:	f7ff fa7e 	bl	800ffac <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010ab0:	9901      	ldr	r1, [sp, #4]
 8010ab2:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8010ab6:	f000 fd8f 	bl	80115d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010aba:	4620      	mov	r0, r4
 8010abc:	f7ff fbd3 	bl	8010266 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010ac0:	f000 fbe4 	bl	801128c <xTaskResumeAll>
 8010ac4:	b948      	cbnz	r0, 8010ada <xQueueSemaphoreTake+0x146>
					portYIELD_WITHIN_API();
 8010ac6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8010aca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010ace:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8010ad2:	f3bf 8f4f 	dsb	sy
 8010ad6:	f3bf 8f6f 	isb	sy
 8010ada:	2601      	movs	r6, #1
 8010adc:	e77d      	b.n	80109da <xQueueSemaphoreTake+0x46>
				prvUnlockQueue( pxQueue );
 8010ade:	4620      	mov	r0, r4
 8010ae0:	f7ff fbc1 	bl	8010266 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010ae4:	f000 fbd2 	bl	801128c <xTaskResumeAll>
 8010ae8:	e7f7      	b.n	8010ada <xQueueSemaphoreTake+0x146>
			prvUnlockQueue( pxQueue );
 8010aea:	4620      	mov	r0, r4
 8010aec:	f7ff fbbb 	bl	8010266 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010af0:	f000 fbcc 	bl	801128c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010af4:	4620      	mov	r0, r4
 8010af6:	f7ff fb63 	bl	80101c0 <prvIsQueueEmpty>
 8010afa:	2800      	cmp	r0, #0
 8010afc:	d0ed      	beq.n	8010ada <xQueueSemaphoreTake+0x146>
					if( xInheritanceOccurred != pdFALSE )
 8010afe:	b165      	cbz	r5, 8010b1a <xQueueSemaphoreTake+0x186>
						taskENTER_CRITICAL();
 8010b00:	f7ff fa30 	bl	800ff64 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8010b04:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8010b06:	b119      	cbz	r1, 8010b10 <xQueueSemaphoreTake+0x17c>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8010b08:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010b0a:	6819      	ldr	r1, [r3, #0]
 8010b0c:	f1c1 0138 	rsb	r1, r1, #56	@ 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8010b10:	68a0      	ldr	r0, [r4, #8]
 8010b12:	f000 fec7 	bl	80118a4 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8010b16:	f7ff fa49 	bl	800ffac <vPortExitCritical>
					return errQUEUE_EMPTY;
 8010b1a:	2000      	movs	r0, #0
 8010b1c:	e77c      	b.n	8010a18 <xQueueSemaphoreTake+0x84>

08010b1e <xQueueReceiveFromISR>:
{
 8010b1e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010b22:	4689      	mov	r9, r1
 8010b24:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 8010b26:	4604      	mov	r4, r0
 8010b28:	b950      	cbnz	r0, 8010b40 <xQueueReceiveFromISR+0x22>
 8010b2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b2e:	b672      	cpsid	i
 8010b30:	f383 8811 	msr	BASEPRI, r3
 8010b34:	f3bf 8f6f 	isb	sy
 8010b38:	f3bf 8f4f 	dsb	sy
 8010b3c:	b662      	cpsie	i
 8010b3e:	e7fe      	b.n	8010b3e <xQueueReceiveFromISR+0x20>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010b40:	b961      	cbnz	r1, 8010b5c <xQueueReceiveFromISR+0x3e>
 8010b42:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8010b44:	b153      	cbz	r3, 8010b5c <xQueueReceiveFromISR+0x3e>
 8010b46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b4a:	b672      	cpsid	i
 8010b4c:	f383 8811 	msr	BASEPRI, r3
 8010b50:	f3bf 8f6f 	isb	sy
 8010b54:	f3bf 8f4f 	dsb	sy
 8010b58:	b662      	cpsie	i
 8010b5a:	e7fe      	b.n	8010b5a <xQueueReceiveFromISR+0x3c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010b5c:	f7ff fafe 	bl	801015c <vPortValidateInterruptPriority>
	__asm volatile
 8010b60:	f3ef 8711 	mrs	r7, BASEPRI
 8010b64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b68:	b672      	cpsid	i
 8010b6a:	f383 8811 	msr	BASEPRI, r3
 8010b6e:	f3bf 8f6f 	isb	sy
 8010b72:	f3bf 8f4f 	dsb	sy
 8010b76:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010b78:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010b7a:	b30d      	cbz	r5, 8010bc0 <xQueueReceiveFromISR+0xa2>
			const int8_t cRxLock = pxQueue->cRxLock;
 8010b7c:	f894 6044 	ldrb.w	r6, [r4, #68]	@ 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010b80:	4649      	mov	r1, r9
 8010b82:	4620      	mov	r0, r4
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010b84:	3d01      	subs	r5, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 8010b86:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010b88:	f7ff fb58 	bl	801023c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010b8c:	63a5      	str	r5, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 8010b8e:	1c73      	adds	r3, r6, #1
 8010b90:	d111      	bne.n	8010bb6 <xQueueReceiveFromISR+0x98>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010b92:	6923      	ldr	r3, [r4, #16]
 8010b94:	b153      	cbz	r3, 8010bac <xQueueReceiveFromISR+0x8e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010b96:	f104 0010 	add.w	r0, r4, #16
 8010b9a:	f000 fd59 	bl	8011650 <xTaskRemoveFromEventList>
 8010b9e:	b128      	cbz	r0, 8010bac <xQueueReceiveFromISR+0x8e>
						if( pxHigherPriorityTaskWoken != NULL )
 8010ba0:	f1b8 0f00 	cmp.w	r8, #0
 8010ba4:	d002      	beq.n	8010bac <xQueueReceiveFromISR+0x8e>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8010ba6:	2301      	movs	r3, #1
 8010ba8:	f8c8 3000 	str.w	r3, [r8]
			xReturn = pdPASS;
 8010bac:	2001      	movs	r0, #1
	__asm volatile
 8010bae:	f387 8811 	msr	BASEPRI, r7
}
 8010bb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8010bb6:	3601      	adds	r6, #1
 8010bb8:	b276      	sxtb	r6, r6
 8010bba:	f884 6044 	strb.w	r6, [r4, #68]	@ 0x44
 8010bbe:	e7f5      	b.n	8010bac <xQueueReceiveFromISR+0x8e>
			xReturn = pdFAIL;
 8010bc0:	4628      	mov	r0, r5
 8010bc2:	e7f4      	b.n	8010bae <xQueueReceiveFromISR+0x90>

08010bc4 <uxQueueMessagesWaiting>:
{
 8010bc4:	b510      	push	{r4, lr}
	configASSERT( xQueue );
 8010bc6:	4604      	mov	r4, r0
 8010bc8:	b950      	cbnz	r0, 8010be0 <uxQueueMessagesWaiting+0x1c>
	__asm volatile
 8010bca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010bce:	b672      	cpsid	i
 8010bd0:	f383 8811 	msr	BASEPRI, r3
 8010bd4:	f3bf 8f6f 	isb	sy
 8010bd8:	f3bf 8f4f 	dsb	sy
 8010bdc:	b662      	cpsie	i
 8010bde:	e7fe      	b.n	8010bde <uxQueueMessagesWaiting+0x1a>
	taskENTER_CRITICAL();
 8010be0:	f7ff f9c0 	bl	800ff64 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8010be4:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
	taskEXIT_CRITICAL();
 8010be6:	f7ff f9e1 	bl	800ffac <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8010bea:	4620      	mov	r0, r4
 8010bec:	bd10      	pop	{r4, pc}
	...

08010bf0 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010bf0:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8010bf2:	4a07      	ldr	r2, [pc, #28]	@ (8010c10 <vQueueAddToRegistry+0x20>)
	{
 8010bf4:	b530      	push	{r4, r5, lr}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8010bf6:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 8010bfa:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 8010bfe:	b91d      	cbnz	r5, 8010c08 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8010c00:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8010c04:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8010c06:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010c08:	3301      	adds	r3, #1
 8010c0a:	2b08      	cmp	r3, #8
 8010c0c:	d1f3      	bne.n	8010bf6 <vQueueAddToRegistry+0x6>
 8010c0e:	e7fa      	b.n	8010c06 <vQueueAddToRegistry+0x16>
 8010c10:	20029864 	.word	0x20029864

08010c14 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010c14:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8010c16:	4a09      	ldr	r2, [pc, #36]	@ (8010c3c <vQueueUnregisterQueue+0x28>)
	{
 8010c18:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8010c1a:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8010c1e:	00dc      	lsls	r4, r3, #3
 8010c20:	4281      	cmp	r1, r0
 8010c22:	d106      	bne.n	8010c32 <vQueueUnregisterQueue+0x1e>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8010c24:	4a06      	ldr	r2, [pc, #24]	@ (8010c40 <vQueueUnregisterQueue+0x2c>)
 8010c26:	2100      	movs	r1, #0
 8010c28:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8010c2c:	4422      	add	r2, r4
 8010c2e:	6051      	str	r1, [r2, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8010c30:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010c32:	3301      	adds	r3, #1
 8010c34:	2b08      	cmp	r3, #8
 8010c36:	d1f0      	bne.n	8010c1a <vQueueUnregisterQueue+0x6>
 8010c38:	e7fa      	b.n	8010c30 <vQueueUnregisterQueue+0x1c>
 8010c3a:	bf00      	nop
 8010c3c:	20029868 	.word	0x20029868
 8010c40:	20029864 	.word	0x20029864

08010c44 <vQueueDelete>:
{
 8010c44:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 8010c46:	b950      	cbnz	r0, 8010c5e <vQueueDelete+0x1a>
 8010c48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c4c:	b672      	cpsid	i
 8010c4e:	f383 8811 	msr	BASEPRI, r3
 8010c52:	f3bf 8f6f 	isb	sy
 8010c56:	f3bf 8f4f 	dsb	sy
 8010c5a:	b662      	cpsie	i
 8010c5c:	e7fe      	b.n	8010c5c <vQueueDelete+0x18>
		vQueueUnregisterQueue( pxQueue );
 8010c5e:	f7ff ffd9 	bl	8010c14 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8010c62:	f890 3046 	ldrb.w	r3, [r0, #70]	@ 0x46
 8010c66:	b91b      	cbnz	r3, 8010c70 <vQueueDelete+0x2c>
}
 8010c68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 8010c6c:	f7ff b898 	b.w	800fda0 <vPortFree>
}
 8010c70:	bd10      	pop	{r4, pc}

08010c72 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010c72:	b570      	push	{r4, r5, r6, lr}
 8010c74:	4604      	mov	r4, r0
 8010c76:	460d      	mov	r5, r1
 8010c78:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8010c7a:	f7ff f973 	bl	800ff64 <vPortEnterCritical>
 8010c7e:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8010c82:	2bff      	cmp	r3, #255	@ 0xff
 8010c84:	d102      	bne.n	8010c8c <vQueueWaitForMessageRestricted+0x1a>
 8010c86:	2300      	movs	r3, #0
 8010c88:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8010c8c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8010c90:	2bff      	cmp	r3, #255	@ 0xff
 8010c92:	d102      	bne.n	8010c9a <vQueueWaitForMessageRestricted+0x28>
 8010c94:	2300      	movs	r3, #0
 8010c96:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8010c9a:	f7ff f987 	bl	800ffac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8010c9e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8010ca0:	b92b      	cbnz	r3, 8010cae <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8010ca2:	4632      	mov	r2, r6
 8010ca4:	4629      	mov	r1, r5
 8010ca6:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8010caa:	f000 fcb1 	bl	8011610 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8010cae:	4620      	mov	r0, r4
	}
 8010cb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8010cb4:	f7ff bad7 	b.w	8010266 <prvUnlockQueue>

08010cb8 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010cbc:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010cbe:	f7ff f951 	bl	800ff64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010cc2:	4b2f      	ldr	r3, [pc, #188]	@ (8010d80 <prvAddNewTaskToReadyList+0xc8>)
		if( pxCurrentTCB == NULL )
 8010cc4:	4e2f      	ldr	r6, [pc, #188]	@ (8010d84 <prvAddNewTaskToReadyList+0xcc>)
		uxCurrentNumberOfTasks++;
 8010cc6:	681a      	ldr	r2, [r3, #0]
 8010cc8:	4f2f      	ldr	r7, [pc, #188]	@ (8010d88 <prvAddNewTaskToReadyList+0xd0>)
 8010cca:	3201      	adds	r2, #1
 8010ccc:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8010cce:	6835      	ldr	r5, [r6, #0]
 8010cd0:	2d00      	cmp	r5, #0
 8010cd2:	d14a      	bne.n	8010d6a <prvAddNewTaskToReadyList+0xb2>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010cd4:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010cd6:	681b      	ldr	r3, [r3, #0]
 8010cd8:	2b01      	cmp	r3, #1
 8010cda:	d11f      	bne.n	8010d1c <prvAddNewTaskToReadyList+0x64>
 8010cdc:	46b8      	mov	r8, r7

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010cde:	3501      	adds	r5, #1
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010ce0:	4640      	mov	r0, r8
 8010ce2:	f7ff f899 	bl	800fe18 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010ce6:	f108 0814 	add.w	r8, r8, #20
 8010cea:	2d38      	cmp	r5, #56	@ 0x38
 8010cec:	d1f7      	bne.n	8010cde <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010cee:	f8df 80c0 	ldr.w	r8, [pc, #192]	@ 8010db0 <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 8010cf2:	4d26      	ldr	r5, [pc, #152]	@ (8010d8c <prvAddNewTaskToReadyList+0xd4>)
	vListInitialise( &xDelayedTaskList1 );
 8010cf4:	4640      	mov	r0, r8
 8010cf6:	f7ff f88f 	bl	800fe18 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010cfa:	4628      	mov	r0, r5
 8010cfc:	f7ff f88c 	bl	800fe18 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010d00:	4823      	ldr	r0, [pc, #140]	@ (8010d90 <prvAddNewTaskToReadyList+0xd8>)
 8010d02:	f7ff f889 	bl	800fe18 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8010d06:	4823      	ldr	r0, [pc, #140]	@ (8010d94 <prvAddNewTaskToReadyList+0xdc>)
 8010d08:	f7ff f886 	bl	800fe18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010d0c:	4822      	ldr	r0, [pc, #136]	@ (8010d98 <prvAddNewTaskToReadyList+0xe0>)
 8010d0e:	f7ff f883 	bl	800fe18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010d12:	4b22      	ldr	r3, [pc, #136]	@ (8010d9c <prvAddNewTaskToReadyList+0xe4>)
 8010d14:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010d18:	4b21      	ldr	r3, [pc, #132]	@ (8010da0 <prvAddNewTaskToReadyList+0xe8>)
 8010d1a:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8010d1c:	4a21      	ldr	r2, [pc, #132]	@ (8010da4 <prvAddNewTaskToReadyList+0xec>)
 8010d1e:	6813      	ldr	r3, [r2, #0]
 8010d20:	3301      	adds	r3, #1
 8010d22:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8010d24:	4a20      	ldr	r2, [pc, #128]	@ (8010da8 <prvAddNewTaskToReadyList+0xf0>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8010d26:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8010d28:	6811      	ldr	r1, [r2, #0]
 8010d2a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8010d2c:	428b      	cmp	r3, r1
 8010d2e:	d900      	bls.n	8010d32 <prvAddNewTaskToReadyList+0x7a>
 8010d30:	6013      	str	r3, [r2, #0]
 8010d32:	2014      	movs	r0, #20
 8010d34:	1d21      	adds	r1, r4, #4
 8010d36:	fb00 7003 	mla	r0, r0, r3, r7
 8010d3a:	f7ff f87b 	bl	800fe34 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8010d3e:	f7ff f935 	bl	800ffac <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8010d42:	4b1a      	ldr	r3, [pc, #104]	@ (8010dac <prvAddNewTaskToReadyList+0xf4>)
 8010d44:	681b      	ldr	r3, [r3, #0]
 8010d46:	b173      	cbz	r3, 8010d66 <prvAddNewTaskToReadyList+0xae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010d48:	6833      	ldr	r3, [r6, #0]
 8010d4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010d4c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8010d4e:	429a      	cmp	r2, r3
 8010d50:	d209      	bcs.n	8010d66 <prvAddNewTaskToReadyList+0xae>
			taskYIELD_IF_USING_PREEMPTION();
 8010d52:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8010d56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010d5a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8010d5e:	f3bf 8f4f 	dsb	sy
 8010d62:	f3bf 8f6f 	isb	sy
}
 8010d66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8010d6a:	4b10      	ldr	r3, [pc, #64]	@ (8010dac <prvAddNewTaskToReadyList+0xf4>)
 8010d6c:	681a      	ldr	r2, [r3, #0]
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010d6e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 8010d70:	2a00      	cmp	r2, #0
 8010d72:	d1d3      	bne.n	8010d1c <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010d74:	6832      	ldr	r2, [r6, #0]
 8010d76:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8010d78:	429a      	cmp	r2, r3
 8010d7a:	d8cf      	bhi.n	8010d1c <prvAddNewTaskToReadyList+0x64>
					pxCurrentTCB = pxNewTCB;
 8010d7c:	6034      	str	r4, [r6, #0]
 8010d7e:	e7cd      	b.n	8010d1c <prvAddNewTaskToReadyList+0x64>
 8010d80:	200298c8 	.word	0x200298c8
 8010d84:	20029d9c 	.word	0x20029d9c
 8010d88:	2002993c 	.word	0x2002993c
 8010d8c:	20029914 	.word	0x20029914
 8010d90:	200298f8 	.word	0x200298f8
 8010d94:	200298e4 	.word	0x200298e4
 8010d98:	200298cc 	.word	0x200298cc
 8010d9c:	20029910 	.word	0x20029910
 8010da0:	2002990c 	.word	0x2002990c
 8010da4:	200298ac 	.word	0x200298ac
 8010da8:	200298c0 	.word	0x200298c0
 8010dac:	200298bc 	.word	0x200298bc
 8010db0:	20029928 	.word	0x20029928

08010db4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010db6:	4b15      	ldr	r3, [pc, #84]	@ (8010e0c <prvAddCurrentTaskToDelayedList+0x58>)
{
 8010db8:	4606      	mov	r6, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010dba:	4d15      	ldr	r5, [pc, #84]	@ (8010e10 <prvAddCurrentTaskToDelayedList+0x5c>)
{
 8010dbc:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 8010dbe:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010dc0:	6828      	ldr	r0, [r5, #0]
 8010dc2:	3004      	adds	r0, #4
 8010dc4:	f7ff f858 	bl	800fe78 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010dc8:	1c73      	adds	r3, r6, #1
 8010dca:	d107      	bne.n	8010ddc <prvAddCurrentTaskToDelayedList+0x28>
 8010dcc:	b137      	cbz	r7, 8010ddc <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010dce:	6829      	ldr	r1, [r5, #0]
 8010dd0:	4810      	ldr	r0, [pc, #64]	@ (8010e14 <prvAddCurrentTaskToDelayedList+0x60>)
 8010dd2:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010dd4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010dd8:	f7ff b82c 	b.w	800fe34 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010ddc:	19a4      	adds	r4, r4, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010dde:	682b      	ldr	r3, [r5, #0]
 8010de0:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010de2:	d307      	bcc.n	8010df4 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010de4:	4b0c      	ldr	r3, [pc, #48]	@ (8010e18 <prvAddCurrentTaskToDelayedList+0x64>)
 8010de6:	6818      	ldr	r0, [r3, #0]
 8010de8:	6829      	ldr	r1, [r5, #0]
}
 8010dea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010dee:	3104      	adds	r1, #4
 8010df0:	f7ff b82b 	b.w	800fe4a <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010df4:	4b09      	ldr	r3, [pc, #36]	@ (8010e1c <prvAddCurrentTaskToDelayedList+0x68>)
 8010df6:	6818      	ldr	r0, [r3, #0]
 8010df8:	6829      	ldr	r1, [r5, #0]
 8010dfa:	3104      	adds	r1, #4
 8010dfc:	f7ff f825 	bl	800fe4a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010e00:	4b07      	ldr	r3, [pc, #28]	@ (8010e20 <prvAddCurrentTaskToDelayedList+0x6c>)
 8010e02:	681a      	ldr	r2, [r3, #0]
 8010e04:	42a2      	cmp	r2, r4
 8010e06:	d900      	bls.n	8010e0a <prvAddCurrentTaskToDelayedList+0x56>
					xNextTaskUnblockTime = xTimeToWake;
 8010e08:	601c      	str	r4, [r3, #0]
}
 8010e0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010e0c:	200298c4 	.word	0x200298c4
 8010e10:	20029d9c 	.word	0x20029d9c
 8010e14:	200298cc 	.word	0x200298cc
 8010e18:	2002990c 	.word	0x2002990c
 8010e1c:	20029910 	.word	0x20029910
 8010e20:	200298a8 	.word	0x200298a8

08010e24 <prvTaskIsTaskSuspended>:
		configASSERT( xTask );
 8010e24:	b950      	cbnz	r0, 8010e3c <prvTaskIsTaskSuspended+0x18>
 8010e26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e2a:	b672      	cpsid	i
 8010e2c:	f383 8811 	msr	BASEPRI, r3
 8010e30:	f3bf 8f6f 	isb	sy
 8010e34:	f3bf 8f4f 	dsb	sy
 8010e38:	b662      	cpsie	i
 8010e3a:	e7fe      	b.n	8010e3a <prvTaskIsTaskSuspended+0x16>
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010e3c:	6942      	ldr	r2, [r0, #20]
 8010e3e:	4b06      	ldr	r3, [pc, #24]	@ (8010e58 <prvTaskIsTaskSuspended+0x34>)
 8010e40:	429a      	cmp	r2, r3
 8010e42:	d107      	bne.n	8010e54 <prvTaskIsTaskSuspended+0x30>
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8010e44:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8010e46:	4b05      	ldr	r3, [pc, #20]	@ (8010e5c <prvTaskIsTaskSuspended+0x38>)
 8010e48:	4298      	cmp	r0, r3
 8010e4a:	d003      	beq.n	8010e54 <prvTaskIsTaskSuspended+0x30>
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8010e4c:	fab0 f080 	clz	r0, r0
 8010e50:	0940      	lsrs	r0, r0, #5
 8010e52:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 8010e54:	2000      	movs	r0, #0
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8010e56:	4770      	bx	lr
 8010e58:	200298cc 	.word	0x200298cc
 8010e5c:	200298f8 	.word	0x200298f8

08010e60 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010e60:	4a06      	ldr	r2, [pc, #24]	@ (8010e7c <prvResetNextTaskUnblockTime+0x1c>)
 8010e62:	6813      	ldr	r3, [r2, #0]
 8010e64:	6819      	ldr	r1, [r3, #0]
 8010e66:	4b06      	ldr	r3, [pc, #24]	@ (8010e80 <prvResetNextTaskUnblockTime+0x20>)
 8010e68:	b919      	cbnz	r1, 8010e72 <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 8010e6a:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010e6e:	601a      	str	r2, [r3, #0]
}
 8010e70:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010e72:	6812      	ldr	r2, [r2, #0]
 8010e74:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010e76:	68d2      	ldr	r2, [r2, #12]
 8010e78:	6852      	ldr	r2, [r2, #4]
 8010e7a:	e7f8      	b.n	8010e6e <prvResetNextTaskUnblockTime+0xe>
 8010e7c:	20029910 	.word	0x20029910
 8010e80:	200298a8 	.word	0x200298a8

08010e84 <prvDeleteTCB>:
	{
 8010e84:	b510      	push	{r4, lr}
 8010e86:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8010e88:	3058      	adds	r0, #88	@ 0x58
 8010e8a:	f01a fb95 	bl	802b5b8 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8010e8e:	f894 30a9 	ldrb.w	r3, [r4, #169]	@ 0xa9
 8010e92:	b93b      	cbnz	r3, 8010ea4 <prvDeleteTCB+0x20>
				vPortFree( pxTCB->pxStack );
 8010e94:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8010e96:	f7fe ff83 	bl	800fda0 <vPortFree>
				vPortFree( pxTCB );
 8010e9a:	4620      	mov	r0, r4
	}
 8010e9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8010ea0:	f7fe bf7e 	b.w	800fda0 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8010ea4:	2b01      	cmp	r3, #1
 8010ea6:	d0f8      	beq.n	8010e9a <prvDeleteTCB+0x16>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8010ea8:	2b02      	cmp	r3, #2
 8010eaa:	d00a      	beq.n	8010ec2 <prvDeleteTCB+0x3e>
 8010eac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010eb0:	b672      	cpsid	i
 8010eb2:	f383 8811 	msr	BASEPRI, r3
 8010eb6:	f3bf 8f6f 	isb	sy
 8010eba:	f3bf 8f4f 	dsb	sy
 8010ebe:	b662      	cpsie	i
 8010ec0:	e7fe      	b.n	8010ec0 <prvDeleteTCB+0x3c>
	}
 8010ec2:	bd10      	pop	{r4, pc}

08010ec4 <prvIdleTask>:
{
 8010ec4:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010ec6:	4c13      	ldr	r4, [pc, #76]	@ (8010f14 <prvIdleTask+0x50>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010ec8:	4f13      	ldr	r7, [pc, #76]	@ (8010f18 <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 8010eca:	4d14      	ldr	r5, [pc, #80]	@ (8010f1c <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010ecc:	6823      	ldr	r3, [r4, #0]
 8010ece:	b973      	cbnz	r3, 8010eee <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010ed0:	4b13      	ldr	r3, [pc, #76]	@ (8010f20 <prvIdleTask+0x5c>)
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	2b01      	cmp	r3, #1
 8010ed6:	d9f8      	bls.n	8010eca <prvIdleTask+0x6>
				taskYIELD();
 8010ed8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8010edc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010ee0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8010ee4:	f3bf 8f4f 	dsb	sy
 8010ee8:	f3bf 8f6f 	isb	sy
 8010eec:	e7ed      	b.n	8010eca <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 8010eee:	f7ff f839 	bl	800ff64 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010ef2:	68fb      	ldr	r3, [r7, #12]
 8010ef4:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010ef6:	1d30      	adds	r0, r6, #4
 8010ef8:	f7fe ffbe 	bl	800fe78 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8010efc:	682b      	ldr	r3, [r5, #0]
 8010efe:	3b01      	subs	r3, #1
 8010f00:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010f02:	6823      	ldr	r3, [r4, #0]
 8010f04:	3b01      	subs	r3, #1
 8010f06:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8010f08:	f7ff f850 	bl	800ffac <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8010f0c:	4630      	mov	r0, r6
 8010f0e:	f7ff ffb9 	bl	8010e84 <prvDeleteTCB>
 8010f12:	e7db      	b.n	8010ecc <prvIdleTask+0x8>
 8010f14:	200298e0 	.word	0x200298e0
 8010f18:	200298e4 	.word	0x200298e4
 8010f1c:	200298c8 	.word	0x200298c8
 8010f20:	2002993c 	.word	0x2002993c

08010f24 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8010f24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010f28:	0096      	lsls	r6, r2, #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8010f2a:	4607      	mov	r7, r0
 8010f2c:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010f2e:	21a5      	movs	r1, #165	@ 0xa5
 8010f30:	4632      	mov	r2, r6
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8010f32:	4698      	mov	r8, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010f34:	3e04      	subs	r6, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8010f36:	e9dd 9409 	ldrd	r9, r4, [sp, #36]	@ 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010f3a:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8010f3c:	f01a faf0 	bl	802b520 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010f40:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010f42:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010f44:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 8010f48:	2d00      	cmp	r5, #0
 8010f4a:	d043      	beq.n	8010fd4 <prvInitialiseNewTask.constprop.0+0xb0>
 8010f4c:	1e6b      	subs	r3, r5, #1
 8010f4e:	f104 0233 	add.w	r2, r4, #51	@ 0x33
 8010f52:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010f54:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8010f58:	f802 1f01 	strb.w	r1, [r2, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 8010f5c:	b109      	cbz	r1, 8010f62 <prvInitialiseNewTask.constprop.0+0x3e>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010f5e:	42ab      	cmp	r3, r5
 8010f60:	d1f8      	bne.n	8010f54 <prvInitialiseNewTask.constprop.0+0x30>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010f62:	2300      	movs	r3, #0
 8010f64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010f68:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 8010f6a:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010f6e:	1d20      	adds	r0, r4, #4
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010f70:	2d37      	cmp	r5, #55	@ 0x37
		pxNewTCB->uxMutexesHeld = 0;
 8010f72:	f8c4 a050 	str.w	sl, [r4, #80]	@ 0x50
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010f76:	bf28      	it	cs
 8010f78:	2537      	movcs	r5, #55	@ 0x37
	pxNewTCB->uxPriority = uxPriority;
 8010f7a:	62e5      	str	r5, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8010f7c:	64e5      	str	r5, [r4, #76]	@ 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010f7e:	f1c5 0538 	rsb	r5, r5, #56	@ 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010f82:	f7fe ff54 	bl	800fe2e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010f86:	f104 0018 	add.w	r0, r4, #24
 8010f8a:	f7fe ff50 	bl	800fe2e <vListInitialiseItem>
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8010f8e:	224c      	movs	r2, #76	@ 0x4c
 8010f90:	4651      	mov	r1, sl
		pxNewTCB->ulNotifiedValue = 0;
 8010f92:	f8c4 a0a4 	str.w	sl, [r4, #164]	@ 0xa4
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8010f96:	f104 0058 	add.w	r0, r4, #88	@ 0x58
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010f9a:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010f9c:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010f9e:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->pxTaskTag = NULL;
 8010fa0:	f8c4 a054 	str.w	sl, [r4, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010fa4:	f884 a0a8 	strb.w	sl, [r4, #168]	@ 0xa8
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8010fa8:	f01a faba 	bl	802b520 <memset>
 8010fac:	4b0b      	ldr	r3, [pc, #44]	@ (8010fdc <prvInitialiseNewTask.constprop.0+0xb8>)
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010fae:	4639      	mov	r1, r7
 8010fb0:	4630      	mov	r0, r6
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8010fb2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8010fb6:	65e3      	str	r3, [r4, #92]	@ 0x5c
 8010fb8:	33d0      	adds	r3, #208	@ 0xd0
 8010fba:	6622      	str	r2, [r4, #96]	@ 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010fbc:	4642      	mov	r2, r8
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8010fbe:	6663      	str	r3, [r4, #100]	@ 0x64
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010fc0:	f7fe ffac 	bl	800ff1c <pxPortInitialiseStack>
 8010fc4:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8010fc6:	f1b9 0f00 	cmp.w	r9, #0
 8010fca:	d001      	beq.n	8010fd0 <prvInitialiseNewTask.constprop.0+0xac>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010fcc:	f8c9 4000 	str.w	r4, [r9]
}
 8010fd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8010fd4:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
 8010fd8:	e7c6      	b.n	8010f68 <prvInitialiseNewTask.constprop.0+0x44>
 8010fda:	bf00      	nop
 8010fdc:	2002a838 	.word	0x2002a838

08010fe0 <xTaskCreateStatic>:
	{
 8010fe0:	b570      	push	{r4, r5, r6, lr}
 8010fe2:	b086      	sub	sp, #24
 8010fe4:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 8010fe8:	b955      	cbnz	r5, 8011000 <xTaskCreateStatic+0x20>
 8010fea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010fee:	b672      	cpsid	i
 8010ff0:	f383 8811 	msr	BASEPRI, r3
 8010ff4:	f3bf 8f6f 	isb	sy
 8010ff8:	f3bf 8f4f 	dsb	sy
 8010ffc:	b662      	cpsie	i
 8010ffe:	e7fe      	b.n	8010ffe <xTaskCreateStatic+0x1e>
		configASSERT( pxTaskBuffer != NULL );
 8011000:	b954      	cbnz	r4, 8011018 <xTaskCreateStatic+0x38>
 8011002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011006:	b672      	cpsid	i
 8011008:	f383 8811 	msr	BASEPRI, r3
 801100c:	f3bf 8f6f 	isb	sy
 8011010:	f3bf 8f4f 	dsb	sy
 8011014:	b662      	cpsie	i
 8011016:	e7fe      	b.n	8011016 <xTaskCreateStatic+0x36>
			volatile size_t xSize = sizeof( StaticTask_t );
 8011018:	26ac      	movs	r6, #172	@ 0xac
 801101a:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 801101c:	9e05      	ldr	r6, [sp, #20]
 801101e:	2eac      	cmp	r6, #172	@ 0xac
 8011020:	d00a      	beq.n	8011038 <xTaskCreateStatic+0x58>
 8011022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011026:	b672      	cpsid	i
 8011028:	f383 8811 	msr	BASEPRI, r3
 801102c:	f3bf 8f6f 	isb	sy
 8011030:	f3bf 8f4f 	dsb	sy
 8011034:	b662      	cpsie	i
 8011036:	e7fe      	b.n	8011036 <xTaskCreateStatic+0x56>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8011038:	6325      	str	r5, [r4, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801103a:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801103c:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801103e:	f884 50a9 	strb.w	r5, [r4, #169]	@ 0xa9
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8011042:	ad04      	add	r5, sp, #16
 8011044:	9402      	str	r4, [sp, #8]
 8011046:	9501      	str	r5, [sp, #4]
 8011048:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801104a:	9500      	str	r5, [sp, #0]
 801104c:	f7ff ff6a 	bl	8010f24 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011050:	4620      	mov	r0, r4
 8011052:	f7ff fe31 	bl	8010cb8 <prvAddNewTaskToReadyList>
	}
 8011056:	9804      	ldr	r0, [sp, #16]
 8011058:	b006      	add	sp, #24
 801105a:	bd70      	pop	{r4, r5, r6, pc}

0801105c <xTaskCreate>:
	{
 801105c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011060:	4607      	mov	r7, r0
 8011062:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8011064:	0090      	lsls	r0, r2, #2
	{
 8011066:	4688      	mov	r8, r1
 8011068:	4616      	mov	r6, r2
 801106a:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801106c:	f7fe fe02 	bl	800fc74 <pvPortMalloc>
			if( pxStack != NULL )
 8011070:	4605      	mov	r5, r0
 8011072:	b920      	cbnz	r0, 801107e <xTaskCreate+0x22>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8011074:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8011078:	b005      	add	sp, #20
 801107a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801107e:	20ac      	movs	r0, #172	@ 0xac
 8011080:	f7fe fdf8 	bl	800fc74 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8011084:	4604      	mov	r4, r0
 8011086:	b198      	cbz	r0, 80110b0 <xTaskCreate+0x54>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8011088:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 801108a:	6305      	str	r5, [r0, #48]	@ 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801108c:	4632      	mov	r2, r6
 801108e:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8011090:	f880 30a9 	strb.w	r3, [r0, #169]	@ 0xa9
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8011094:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011096:	9002      	str	r0, [sp, #8]
 8011098:	4638      	mov	r0, r7
 801109a:	9301      	str	r3, [sp, #4]
 801109c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801109e:	9300      	str	r3, [sp, #0]
 80110a0:	464b      	mov	r3, r9
 80110a2:	f7ff ff3f 	bl	8010f24 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 80110a6:	4620      	mov	r0, r4
 80110a8:	f7ff fe06 	bl	8010cb8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80110ac:	2001      	movs	r0, #1
 80110ae:	e7e3      	b.n	8011078 <xTaskCreate+0x1c>
					vPortFree( pxStack );
 80110b0:	4628      	mov	r0, r5
 80110b2:	f7fe fe75 	bl	800fda0 <vPortFree>
		if( pxNewTCB != NULL )
 80110b6:	e7dd      	b.n	8011074 <xTaskCreate+0x18>

080110b8 <vTaskResume>:
	{
 80110b8:	b570      	push	{r4, r5, r6, lr}
		configASSERT( xTaskToResume );
 80110ba:	4604      	mov	r4, r0
 80110bc:	b950      	cbnz	r0, 80110d4 <vTaskResume+0x1c>
 80110be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80110c2:	b672      	cpsid	i
 80110c4:	f383 8811 	msr	BASEPRI, r3
 80110c8:	f3bf 8f6f 	isb	sy
 80110cc:	f3bf 8f4f 	dsb	sy
 80110d0:	b662      	cpsie	i
 80110d2:	e7fe      	b.n	80110d2 <vTaskResume+0x1a>
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 80110d4:	4d17      	ldr	r5, [pc, #92]	@ (8011134 <vTaskResume+0x7c>)
 80110d6:	682b      	ldr	r3, [r5, #0]
 80110d8:	4283      	cmp	r3, r0
 80110da:	d029      	beq.n	8011130 <vTaskResume+0x78>
			taskENTER_CRITICAL();
 80110dc:	f7fe ff42 	bl	800ff64 <vPortEnterCritical>
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80110e0:	4620      	mov	r0, r4
 80110e2:	f7ff fe9f 	bl	8010e24 <prvTaskIsTaskSuspended>
 80110e6:	b1f8      	cbz	r0, 8011128 <vTaskResume+0x70>
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 80110e8:	1d26      	adds	r6, r4, #4
 80110ea:	4630      	mov	r0, r6
 80110ec:	f7fe fec4 	bl	800fe78 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80110f0:	4a11      	ldr	r2, [pc, #68]	@ (8011138 <vTaskResume+0x80>)
 80110f2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80110f4:	6811      	ldr	r1, [r2, #0]
 80110f6:	428b      	cmp	r3, r1
 80110f8:	d900      	bls.n	80110fc <vTaskResume+0x44>
 80110fa:	6013      	str	r3, [r2, #0]
 80110fc:	4a0f      	ldr	r2, [pc, #60]	@ (801113c <vTaskResume+0x84>)
 80110fe:	2014      	movs	r0, #20
 8011100:	4631      	mov	r1, r6
 8011102:	fb00 2003 	mla	r0, r0, r3, r2
 8011106:	f7fe fe95 	bl	800fe34 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801110a:	682b      	ldr	r3, [r5, #0]
 801110c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801110e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011110:	429a      	cmp	r2, r3
 8011112:	d309      	bcc.n	8011128 <vTaskResume+0x70>
						taskYIELD_IF_USING_PREEMPTION();
 8011114:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8011118:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801111c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8011120:	f3bf 8f4f 	dsb	sy
 8011124:	f3bf 8f6f 	isb	sy
	}
 8011128:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			taskEXIT_CRITICAL();
 801112c:	f7fe bf3e 	b.w	800ffac <vPortExitCritical>
	}
 8011130:	bd70      	pop	{r4, r5, r6, pc}
 8011132:	bf00      	nop
 8011134:	20029d9c 	.word	0x20029d9c
 8011138:	200298c0 	.word	0x200298c0
 801113c:	2002993c 	.word	0x2002993c

08011140 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8011140:	4a02      	ldr	r2, [pc, #8]	@ (801114c <vTaskSuspendAll+0xc>)
 8011142:	6813      	ldr	r3, [r2, #0]
 8011144:	3301      	adds	r3, #1
 8011146:	6013      	str	r3, [r2, #0]
}
 8011148:	4770      	bx	lr
 801114a:	bf00      	nop
 801114c:	200298a4 	.word	0x200298a4

08011150 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8011150:	4b01      	ldr	r3, [pc, #4]	@ (8011158 <xTaskGetTickCount+0x8>)
 8011152:	6818      	ldr	r0, [r3, #0]
}
 8011154:	4770      	bx	lr
 8011156:	bf00      	nop
 8011158:	200298c4 	.word	0x200298c4

0801115c <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801115c:	4b40      	ldr	r3, [pc, #256]	@ (8011260 <xTaskIncrementTick+0x104>)
 801115e:	681b      	ldr	r3, [r3, #0]
{
 8011160:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011164:	2b00      	cmp	r3, #0
 8011166:	d173      	bne.n	8011250 <xTaskIncrementTick+0xf4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011168:	4b3e      	ldr	r3, [pc, #248]	@ (8011264 <xTaskIncrementTick+0x108>)
 801116a:	681c      	ldr	r4, [r3, #0]
 801116c:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 801116e:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8011170:	b9cc      	cbnz	r4, 80111a6 <xTaskIncrementTick+0x4a>
			taskSWITCH_DELAYED_LISTS();
 8011172:	4b3d      	ldr	r3, [pc, #244]	@ (8011268 <xTaskIncrementTick+0x10c>)
 8011174:	681a      	ldr	r2, [r3, #0]
 8011176:	6812      	ldr	r2, [r2, #0]
 8011178:	b152      	cbz	r2, 8011190 <xTaskIncrementTick+0x34>
 801117a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801117e:	b672      	cpsid	i
 8011180:	f383 8811 	msr	BASEPRI, r3
 8011184:	f3bf 8f6f 	isb	sy
 8011188:	f3bf 8f4f 	dsb	sy
 801118c:	b662      	cpsie	i
 801118e:	e7fe      	b.n	801118e <xTaskIncrementTick+0x32>
 8011190:	4a36      	ldr	r2, [pc, #216]	@ (801126c <xTaskIncrementTick+0x110>)
 8011192:	6819      	ldr	r1, [r3, #0]
 8011194:	6810      	ldr	r0, [r2, #0]
 8011196:	6018      	str	r0, [r3, #0]
 8011198:	6011      	str	r1, [r2, #0]
 801119a:	4a35      	ldr	r2, [pc, #212]	@ (8011270 <xTaskIncrementTick+0x114>)
 801119c:	6813      	ldr	r3, [r2, #0]
 801119e:	3301      	adds	r3, #1
 80111a0:	6013      	str	r3, [r2, #0]
 80111a2:	f7ff fe5d 	bl	8010e60 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80111a6:	4d33      	ldr	r5, [pc, #204]	@ (8011274 <xTaskIncrementTick+0x118>)
BaseType_t xSwitchRequired = pdFALSE;
 80111a8:	f04f 0b00 	mov.w	fp, #0
 80111ac:	4e32      	ldr	r6, [pc, #200]	@ (8011278 <xTaskIncrementTick+0x11c>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 80111ae:	682b      	ldr	r3, [r5, #0]
 80111b0:	4f32      	ldr	r7, [pc, #200]	@ (801127c <xTaskIncrementTick+0x120>)
 80111b2:	42a3      	cmp	r3, r4
 80111b4:	d911      	bls.n	80111da <xTaskIncrementTick+0x7e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80111b6:	683a      	ldr	r2, [r7, #0]
 80111b8:	2114      	movs	r1, #20
 80111ba:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80111bc:	434a      	muls	r2, r1
 80111be:	58b2      	ldr	r2, [r6, r2]
				xSwitchRequired = pdTRUE;
 80111c0:	2a02      	cmp	r2, #2
 80111c2:	bf28      	it	cs
 80111c4:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 80111c8:	4a2d      	ldr	r2, [pc, #180]	@ (8011280 <xTaskIncrementTick+0x124>)
 80111ca:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 80111cc:	2a00      	cmp	r2, #0
}
 80111ce:	bf0c      	ite	eq
 80111d0:	4658      	moveq	r0, fp
 80111d2:	2001      	movne	r0, #1
 80111d4:	b003      	add	sp, #12
 80111d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80111da:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 8011268 <xTaskIncrementTick+0x10c>
					prvAddTaskToReadyList( pxTCB );
 80111de:	f8df a0a8 	ldr.w	sl, [pc, #168]	@ 8011288 <xTaskIncrementTick+0x12c>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80111e2:	f8d9 2000 	ldr.w	r2, [r9]
 80111e6:	6812      	ldr	r2, [r2, #0]
 80111e8:	b91a      	cbnz	r2, 80111f2 <xTaskIncrementTick+0x96>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80111ea:	f04f 32ff 	mov.w	r2, #4294967295
 80111ee:	602a      	str	r2, [r5, #0]
					break;
 80111f0:	e7e1      	b.n	80111b6 <xTaskIncrementTick+0x5a>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80111f2:	f8d9 2000 	ldr.w	r2, [r9]
 80111f6:	68d2      	ldr	r2, [r2, #12]
 80111f8:	f8d2 800c 	ldr.w	r8, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80111fc:	f8d8 1004 	ldr.w	r1, [r8, #4]
					if( xConstTickCount < xItemValue )
 8011200:	428c      	cmp	r4, r1
 8011202:	d201      	bcs.n	8011208 <xTaskIncrementTick+0xac>
						xNextTaskUnblockTime = xItemValue;
 8011204:	6029      	str	r1, [r5, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8011206:	e7d6      	b.n	80111b6 <xTaskIncrementTick+0x5a>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011208:	f108 0304 	add.w	r3, r8, #4
 801120c:	4618      	mov	r0, r3
 801120e:	9301      	str	r3, [sp, #4]
 8011210:	f7fe fe32 	bl	800fe78 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011214:	f8d8 1028 	ldr.w	r1, [r8, #40]	@ 0x28
 8011218:	b119      	cbz	r1, 8011222 <xTaskIncrementTick+0xc6>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801121a:	f108 0018 	add.w	r0, r8, #24
 801121e:	f7fe fe2b 	bl	800fe78 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011222:	f8d8 002c 	ldr.w	r0, [r8, #44]	@ 0x2c
 8011226:	f8da 1000 	ldr.w	r1, [sl]
 801122a:	4288      	cmp	r0, r1
 801122c:	d901      	bls.n	8011232 <xTaskIncrementTick+0xd6>
 801122e:	f8ca 0000 	str.w	r0, [sl]
 8011232:	2314      	movs	r3, #20
 8011234:	9901      	ldr	r1, [sp, #4]
 8011236:	fb03 6000 	mla	r0, r3, r0, r6
 801123a:	f7fe fdfb 	bl	800fe34 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801123e:	6838      	ldr	r0, [r7, #0]
 8011240:	f8d8 102c 	ldr.w	r1, [r8, #44]	@ 0x2c
 8011244:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
							xSwitchRequired = pdTRUE;
 8011246:	4291      	cmp	r1, r2
 8011248:	bf28      	it	cs
 801124a:	f04f 0b01 	movcs.w	fp, #1
 801124e:	e7c8      	b.n	80111e2 <xTaskIncrementTick+0x86>
		++uxPendedTicks;
 8011250:	4a0c      	ldr	r2, [pc, #48]	@ (8011284 <xTaskIncrementTick+0x128>)
BaseType_t xSwitchRequired = pdFALSE;
 8011252:	f04f 0b00 	mov.w	fp, #0
		++uxPendedTicks;
 8011256:	6813      	ldr	r3, [r2, #0]
 8011258:	3301      	adds	r3, #1
 801125a:	6013      	str	r3, [r2, #0]
 801125c:	e7b4      	b.n	80111c8 <xTaskIncrementTick+0x6c>
 801125e:	bf00      	nop
 8011260:	200298a4 	.word	0x200298a4
 8011264:	200298c4 	.word	0x200298c4
 8011268:	20029910 	.word	0x20029910
 801126c:	2002990c 	.word	0x2002990c
 8011270:	200298b0 	.word	0x200298b0
 8011274:	200298a8 	.word	0x200298a8
 8011278:	2002993c 	.word	0x2002993c
 801127c:	20029d9c 	.word	0x20029d9c
 8011280:	200298b4 	.word	0x200298b4
 8011284:	200298b8 	.word	0x200298b8
 8011288:	200298c0 	.word	0x200298c0

0801128c <xTaskResumeAll>:
{
 801128c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 8011290:	4c31      	ldr	r4, [pc, #196]	@ (8011358 <xTaskResumeAll+0xcc>)
 8011292:	6823      	ldr	r3, [r4, #0]
 8011294:	b953      	cbnz	r3, 80112ac <xTaskResumeAll+0x20>
 8011296:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801129a:	b672      	cpsid	i
 801129c:	f383 8811 	msr	BASEPRI, r3
 80112a0:	f3bf 8f6f 	isb	sy
 80112a4:	f3bf 8f4f 	dsb	sy
 80112a8:	b662      	cpsie	i
 80112aa:	e7fe      	b.n	80112aa <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
 80112ac:	f7fe fe5a 	bl	800ff64 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80112b0:	6823      	ldr	r3, [r4, #0]
 80112b2:	3b01      	subs	r3, #1
 80112b4:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80112b6:	6824      	ldr	r4, [r4, #0]
 80112b8:	b12c      	cbz	r4, 80112c6 <xTaskResumeAll+0x3a>
BaseType_t xAlreadyYielded = pdFALSE;
 80112ba:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80112bc:	f7fe fe76 	bl	800ffac <vPortExitCritical>
}
 80112c0:	4620      	mov	r0, r4
 80112c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80112c6:	4b25      	ldr	r3, [pc, #148]	@ (801135c <xTaskResumeAll+0xd0>)
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	d0f5      	beq.n	80112ba <xTaskResumeAll+0x2e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80112ce:	4d24      	ldr	r5, [pc, #144]	@ (8011360 <xTaskResumeAll+0xd4>)
					prvAddTaskToReadyList( pxTCB );
 80112d0:	4e24      	ldr	r6, [pc, #144]	@ (8011364 <xTaskResumeAll+0xd8>)
 80112d2:	f8df 80a0 	ldr.w	r8, [pc, #160]	@ 8011374 <xTaskResumeAll+0xe8>
 80112d6:	e01d      	b.n	8011314 <xTaskResumeAll+0x88>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80112d8:	68eb      	ldr	r3, [r5, #12]
 80112da:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80112dc:	1d27      	adds	r7, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80112de:	f104 0018 	add.w	r0, r4, #24
 80112e2:	f7fe fdc9 	bl	800fe78 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80112e6:	4638      	mov	r0, r7
 80112e8:	f7fe fdc6 	bl	800fe78 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80112ec:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80112ee:	6832      	ldr	r2, [r6, #0]
 80112f0:	4293      	cmp	r3, r2
 80112f2:	d900      	bls.n	80112f6 <xTaskResumeAll+0x6a>
 80112f4:	6033      	str	r3, [r6, #0]
 80112f6:	2014      	movs	r0, #20
 80112f8:	4639      	mov	r1, r7
 80112fa:	fb00 8003 	mla	r0, r0, r3, r8
 80112fe:	f7fe fd99 	bl	800fe34 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011302:	4b19      	ldr	r3, [pc, #100]	@ (8011368 <xTaskResumeAll+0xdc>)
 8011304:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8011306:	681b      	ldr	r3, [r3, #0]
 8011308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801130a:	429a      	cmp	r2, r3
 801130c:	d302      	bcc.n	8011314 <xTaskResumeAll+0x88>
						xYieldPending = pdTRUE;
 801130e:	4b17      	ldr	r3, [pc, #92]	@ (801136c <xTaskResumeAll+0xe0>)
 8011310:	2201      	movs	r2, #1
 8011312:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011314:	682b      	ldr	r3, [r5, #0]
 8011316:	2b00      	cmp	r3, #0
 8011318:	d1de      	bne.n	80112d8 <xTaskResumeAll+0x4c>
				if( pxTCB != NULL )
 801131a:	b10c      	cbz	r4, 8011320 <xTaskResumeAll+0x94>
					prvResetNextTaskUnblockTime();
 801131c:	f7ff fda0 	bl	8010e60 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8011320:	4d13      	ldr	r5, [pc, #76]	@ (8011370 <xTaskResumeAll+0xe4>)
 8011322:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8011324:	b144      	cbz	r4, 8011338 <xTaskResumeAll+0xac>
								xYieldPending = pdTRUE;
 8011326:	4e11      	ldr	r6, [pc, #68]	@ (801136c <xTaskResumeAll+0xe0>)
 8011328:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 801132a:	f7ff ff17 	bl	801115c <xTaskIncrementTick>
 801132e:	b100      	cbz	r0, 8011332 <xTaskResumeAll+0xa6>
								xYieldPending = pdTRUE;
 8011330:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8011332:	3c01      	subs	r4, #1
 8011334:	d1f9      	bne.n	801132a <xTaskResumeAll+0x9e>
						uxPendedTicks = 0;
 8011336:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8011338:	4b0c      	ldr	r3, [pc, #48]	@ (801136c <xTaskResumeAll+0xe0>)
 801133a:	681b      	ldr	r3, [r3, #0]
 801133c:	2b00      	cmp	r3, #0
 801133e:	d0bc      	beq.n	80112ba <xTaskResumeAll+0x2e>
					taskYIELD_IF_USING_PREEMPTION();
 8011340:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8011344:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011348:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 801134c:	f3bf 8f4f 	dsb	sy
 8011350:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8011354:	2401      	movs	r4, #1
 8011356:	e7b1      	b.n	80112bc <xTaskResumeAll+0x30>
 8011358:	200298a4 	.word	0x200298a4
 801135c:	200298c8 	.word	0x200298c8
 8011360:	200298f8 	.word	0x200298f8
 8011364:	200298c0 	.word	0x200298c0
 8011368:	20029d9c 	.word	0x20029d9c
 801136c:	200298b4 	.word	0x200298b4
 8011370:	200298b8 	.word	0x200298b8
 8011374:	2002993c 	.word	0x2002993c

08011378 <vTaskDelay>:
	{
 8011378:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 801137a:	b950      	cbnz	r0, 8011392 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 801137c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8011380:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011384:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8011388:	f3bf 8f4f 	dsb	sy
 801138c:	f3bf 8f6f 	isb	sy
	}
 8011390:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8011392:	4b0b      	ldr	r3, [pc, #44]	@ (80113c0 <vTaskDelay+0x48>)
 8011394:	6819      	ldr	r1, [r3, #0]
 8011396:	b151      	cbz	r1, 80113ae <vTaskDelay+0x36>
 8011398:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801139c:	b672      	cpsid	i
 801139e:	f383 8811 	msr	BASEPRI, r3
 80113a2:	f3bf 8f6f 	isb	sy
 80113a6:	f3bf 8f4f 	dsb	sy
 80113aa:	b662      	cpsie	i
 80113ac:	e7fe      	b.n	80113ac <vTaskDelay+0x34>
			vTaskSuspendAll();
 80113ae:	f7ff fec7 	bl	8011140 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80113b2:	f7ff fcff 	bl	8010db4 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80113b6:	f7ff ff69 	bl	801128c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80113ba:	2800      	cmp	r0, #0
 80113bc:	d0de      	beq.n	801137c <vTaskDelay+0x4>
 80113be:	e7e7      	b.n	8011390 <vTaskDelay+0x18>
 80113c0:	200298a4 	.word	0x200298a4

080113c4 <xTaskCallApplicationTaskHook>:
	{
 80113c4:	4603      	mov	r3, r0
 80113c6:	4608      	mov	r0, r1
		if( xTask == NULL )
 80113c8:	b90b      	cbnz	r3, 80113ce <xTaskCallApplicationTaskHook+0xa>
			xTCB = pxCurrentTCB;
 80113ca:	4b03      	ldr	r3, [pc, #12]	@ (80113d8 <xTaskCallApplicationTaskHook+0x14>)
 80113cc:	681b      	ldr	r3, [r3, #0]
		if( xTCB->pxTaskTag != NULL )
 80113ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80113d0:	b103      	cbz	r3, 80113d4 <xTaskCallApplicationTaskHook+0x10>
			xReturn = xTCB->pxTaskTag( pvParameter );
 80113d2:	4718      	bx	r3
	}
 80113d4:	4618      	mov	r0, r3
 80113d6:	4770      	bx	lr
 80113d8:	20029d9c 	.word	0x20029d9c

080113dc <vTaskStartScheduler>:
{
 80113dc:	b510      	push	{r4, lr}
 80113de:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80113e0:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80113e2:	aa07      	add	r2, sp, #28
 80113e4:	a906      	add	r1, sp, #24
 80113e6:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80113e8:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80113ec:	f7fe fc04 	bl	800fbf8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80113f0:	9b05      	ldr	r3, [sp, #20]
 80113f2:	9a07      	ldr	r2, [sp, #28]
 80113f4:	9302      	str	r3, [sp, #8]
 80113f6:	9b06      	ldr	r3, [sp, #24]
 80113f8:	491d      	ldr	r1, [pc, #116]	@ (8011470 <vTaskStartScheduler+0x94>)
 80113fa:	481e      	ldr	r0, [pc, #120]	@ (8011474 <vTaskStartScheduler+0x98>)
 80113fc:	e9cd 4300 	strd	r4, r3, [sp]
 8011400:	4623      	mov	r3, r4
 8011402:	f7ff fded 	bl	8010fe0 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8011406:	2800      	cmp	r0, #0
 8011408:	d030      	beq.n	801146c <vTaskStartScheduler+0x90>
			xReturn = xTimerCreateTimerTask();
 801140a:	f000 fafb 	bl	8011a04 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 801140e:	2801      	cmp	r0, #1
 8011410:	d11f      	bne.n	8011452 <vTaskStartScheduler+0x76>
 8011412:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011416:	b672      	cpsid	i
 8011418:	f383 8811 	msr	BASEPRI, r3
 801141c:	f3bf 8f6f 	isb	sy
 8011420:	f3bf 8f4f 	dsb	sy
 8011424:	b662      	cpsie	i
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8011426:	4a14      	ldr	r2, [pc, #80]	@ (8011478 <vTaskStartScheduler+0x9c>)
 8011428:	4914      	ldr	r1, [pc, #80]	@ (801147c <vTaskStartScheduler+0xa0>)
 801142a:	6813      	ldr	r3, [r2, #0]
 801142c:	3358      	adds	r3, #88	@ 0x58
 801142e:	600b      	str	r3, [r1, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8011430:	f04f 31ff 	mov.w	r1, #4294967295
 8011434:	4b12      	ldr	r3, [pc, #72]	@ (8011480 <vTaskStartScheduler+0xa4>)
 8011436:	6019      	str	r1, [r3, #0]
		traceTASK_SWITCHED_IN();
 8011438:	4621      	mov	r1, r4
		xSchedulerRunning = pdTRUE;
 801143a:	4b12      	ldr	r3, [pc, #72]	@ (8011484 <vTaskStartScheduler+0xa8>)
 801143c:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801143e:	4b12      	ldr	r3, [pc, #72]	@ (8011488 <vTaskStartScheduler+0xac>)
 8011440:	601c      	str	r4, [r3, #0]
		traceTASK_SWITCHED_IN();
 8011442:	6810      	ldr	r0, [r2, #0]
 8011444:	f7ff ffbe 	bl	80113c4 <xTaskCallApplicationTaskHook>
}
 8011448:	b008      	add	sp, #32
 801144a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 801144e:	f7fe be23 	b.w	8010098 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8011452:	3001      	adds	r0, #1
 8011454:	d10a      	bne.n	801146c <vTaskStartScheduler+0x90>
 8011456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801145a:	b672      	cpsid	i
 801145c:	f383 8811 	msr	BASEPRI, r3
 8011460:	f3bf 8f6f 	isb	sy
 8011464:	f3bf 8f4f 	dsb	sy
 8011468:	b662      	cpsie	i
 801146a:	e7fe      	b.n	801146a <vTaskStartScheduler+0x8e>
}
 801146c:	b008      	add	sp, #32
 801146e:	bd10      	pop	{r4, pc}
 8011470:	08041ab8 	.word	0x08041ab8
 8011474:	08010ec5 	.word	0x08010ec5
 8011478:	20029d9c 	.word	0x20029d9c
 801147c:	20007b3c 	.word	0x20007b3c
 8011480:	200298a8 	.word	0x200298a8
 8011484:	200298bc 	.word	0x200298bc
 8011488:	200298c4 	.word	0x200298c4

0801148c <vTaskSwitchContext>:
{
 801148c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801148e:	4b1e      	ldr	r3, [pc, #120]	@ (8011508 <vTaskSwitchContext+0x7c>)
 8011490:	681a      	ldr	r2, [r3, #0]
 8011492:	4b1e      	ldr	r3, [pc, #120]	@ (801150c <vTaskSwitchContext+0x80>)
 8011494:	b112      	cbz	r2, 801149c <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8011496:	2201      	movs	r2, #1
 8011498:	601a      	str	r2, [r3, #0]
}
 801149a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		traceTASK_SWITCHED_OUT();
 801149c:	4c1c      	ldr	r4, [pc, #112]	@ (8011510 <vTaskSwitchContext+0x84>)
 801149e:	2101      	movs	r1, #1
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80114a0:	4e1c      	ldr	r6, [pc, #112]	@ (8011514 <vTaskSwitchContext+0x88>)
 80114a2:	2714      	movs	r7, #20
		xYieldPending = pdFALSE;
 80114a4:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 80114a6:	6820      	ldr	r0, [r4, #0]
 80114a8:	f7ff ff8c 	bl	80113c4 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80114ac:	6832      	ldr	r2, [r6, #0]
 80114ae:	491a      	ldr	r1, [pc, #104]	@ (8011518 <vTaskSwitchContext+0x8c>)
 80114b0:	fb07 f302 	mul.w	r3, r7, r2
 80114b4:	58cd      	ldr	r5, [r1, r3]
 80114b6:	18c8      	adds	r0, r1, r3
 80114b8:	b1c5      	cbz	r5, 80114ec <vTaskSwitchContext+0x60>
 80114ba:	6845      	ldr	r5, [r0, #4]
 80114bc:	3308      	adds	r3, #8
 80114be:	686d      	ldr	r5, [r5, #4]
 80114c0:	440b      	add	r3, r1
 80114c2:	429d      	cmp	r5, r3
 80114c4:	6045      	str	r5, [r0, #4]
 80114c6:	bf04      	itt	eq
 80114c8:	686b      	ldreq	r3, [r5, #4]
 80114ca:	6043      	streq	r3, [r0, #4]
 80114cc:	2314      	movs	r3, #20
 80114ce:	fb03 1102 	mla	r1, r3, r2, r1
 80114d2:	684b      	ldr	r3, [r1, #4]
		traceTASK_SWITCHED_IN();
 80114d4:	2100      	movs	r1, #0
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80114d6:	68db      	ldr	r3, [r3, #12]
 80114d8:	6023      	str	r3, [r4, #0]
 80114da:	6032      	str	r2, [r6, #0]
		traceTASK_SWITCHED_IN();
 80114dc:	6820      	ldr	r0, [r4, #0]
 80114de:	f7ff ff71 	bl	80113c4 <xTaskCallApplicationTaskHook>
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80114e2:	6823      	ldr	r3, [r4, #0]
 80114e4:	4a0d      	ldr	r2, [pc, #52]	@ (801151c <vTaskSwitchContext+0x90>)
 80114e6:	3358      	adds	r3, #88	@ 0x58
 80114e8:	6013      	str	r3, [r2, #0]
}
 80114ea:	e7d6      	b.n	801149a <vTaskSwitchContext+0xe>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80114ec:	b952      	cbnz	r2, 8011504 <vTaskSwitchContext+0x78>
 80114ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80114f2:	b672      	cpsid	i
 80114f4:	f383 8811 	msr	BASEPRI, r3
 80114f8:	f3bf 8f6f 	isb	sy
 80114fc:	f3bf 8f4f 	dsb	sy
 8011500:	b662      	cpsie	i
 8011502:	e7fe      	b.n	8011502 <vTaskSwitchContext+0x76>
 8011504:	3a01      	subs	r2, #1
 8011506:	e7d3      	b.n	80114b0 <vTaskSwitchContext+0x24>
 8011508:	200298a4 	.word	0x200298a4
 801150c:	200298b4 	.word	0x200298b4
 8011510:	20029d9c 	.word	0x20029d9c
 8011514:	200298c0 	.word	0x200298c0
 8011518:	2002993c 	.word	0x2002993c
 801151c:	20007b3c 	.word	0x20007b3c

08011520 <vTaskSuspend>:
	{
 8011520:	b570      	push	{r4, r5, r6, lr}
 8011522:	4604      	mov	r4, r0
 8011524:	4d27      	ldr	r5, [pc, #156]	@ (80115c4 <vTaskSuspend+0xa4>)
		taskENTER_CRITICAL();
 8011526:	f7fe fd1d 	bl	800ff64 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 801152a:	b904      	cbnz	r4, 801152e <vTaskSuspend+0xe>
 801152c:	682c      	ldr	r4, [r5, #0]
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801152e:	1d26      	adds	r6, r4, #4
 8011530:	4630      	mov	r0, r6
 8011532:	f7fe fca1 	bl	800fe78 <uxListRemove>
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011536:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8011538:	b11b      	cbz	r3, 8011542 <vTaskSuspend+0x22>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801153a:	f104 0018 	add.w	r0, r4, #24
 801153e:	f7fe fc9b 	bl	800fe78 <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8011542:	4631      	mov	r1, r6
 8011544:	4820      	ldr	r0, [pc, #128]	@ (80115c8 <vTaskSuspend+0xa8>)
 8011546:	f7fe fc75 	bl	800fe34 <vListInsertEnd>
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 801154a:	f894 30a8 	ldrb.w	r3, [r4, #168]	@ 0xa8
 801154e:	2b01      	cmp	r3, #1
 8011550:	d102      	bne.n	8011558 <vTaskSuspend+0x38>
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011552:	2300      	movs	r3, #0
 8011554:	f884 30a8 	strb.w	r3, [r4, #168]	@ 0xa8
		if( xSchedulerRunning != pdFALSE )
 8011558:	4e1c      	ldr	r6, [pc, #112]	@ (80115cc <vTaskSuspend+0xac>)
		taskEXIT_CRITICAL();
 801155a:	f7fe fd27 	bl	800ffac <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 801155e:	6833      	ldr	r3, [r6, #0]
 8011560:	b12b      	cbz	r3, 801156e <vTaskSuspend+0x4e>
			taskENTER_CRITICAL();
 8011562:	f7fe fcff 	bl	800ff64 <vPortEnterCritical>
				prvResetNextTaskUnblockTime();
 8011566:	f7ff fc7b 	bl	8010e60 <prvResetNextTaskUnblockTime>
			taskEXIT_CRITICAL();
 801156a:	f7fe fd1f 	bl	800ffac <vPortExitCritical>
		if( pxTCB == pxCurrentTCB )
 801156e:	682b      	ldr	r3, [r5, #0]
 8011570:	42a3      	cmp	r3, r4
 8011572:	d119      	bne.n	80115a8 <vTaskSuspend+0x88>
			if( xSchedulerRunning != pdFALSE )
 8011574:	6833      	ldr	r3, [r6, #0]
 8011576:	b1c3      	cbz	r3, 80115aa <vTaskSuspend+0x8a>
				configASSERT( uxSchedulerSuspended == 0 );
 8011578:	4b15      	ldr	r3, [pc, #84]	@ (80115d0 <vTaskSuspend+0xb0>)
 801157a:	681b      	ldr	r3, [r3, #0]
 801157c:	b153      	cbz	r3, 8011594 <vTaskSuspend+0x74>
 801157e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011582:	b672      	cpsid	i
 8011584:	f383 8811 	msr	BASEPRI, r3
 8011588:	f3bf 8f6f 	isb	sy
 801158c:	f3bf 8f4f 	dsb	sy
 8011590:	b662      	cpsie	i
 8011592:	e7fe      	b.n	8011592 <vTaskSuspend+0x72>
				portYIELD_WITHIN_API();
 8011594:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8011598:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801159c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80115a0:	f3bf 8f4f 	dsb	sy
 80115a4:	f3bf 8f6f 	isb	sy
	}
 80115a8:	bd70      	pop	{r4, r5, r6, pc}
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80115aa:	4a07      	ldr	r2, [pc, #28]	@ (80115c8 <vTaskSuspend+0xa8>)
 80115ac:	6811      	ldr	r1, [r2, #0]
 80115ae:	4a09      	ldr	r2, [pc, #36]	@ (80115d4 <vTaskSuspend+0xb4>)
 80115b0:	6812      	ldr	r2, [r2, #0]
 80115b2:	4291      	cmp	r1, r2
 80115b4:	d101      	bne.n	80115ba <vTaskSuspend+0x9a>
					pxCurrentTCB = NULL;
 80115b6:	602b      	str	r3, [r5, #0]
 80115b8:	e7f6      	b.n	80115a8 <vTaskSuspend+0x88>
	}
 80115ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					vTaskSwitchContext();
 80115be:	f7ff bf65 	b.w	801148c <vTaskSwitchContext>
 80115c2:	bf00      	nop
 80115c4:	20029d9c 	.word	0x20029d9c
 80115c8:	200298cc 	.word	0x200298cc
 80115cc:	200298bc 	.word	0x200298bc
 80115d0:	200298a4 	.word	0x200298a4
 80115d4:	200298c8 	.word	0x200298c8

080115d8 <vTaskPlaceOnEventList>:
{
 80115d8:	b510      	push	{r4, lr}
 80115da:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 80115dc:	b950      	cbnz	r0, 80115f4 <vTaskPlaceOnEventList+0x1c>
 80115de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80115e2:	b672      	cpsid	i
 80115e4:	f383 8811 	msr	BASEPRI, r3
 80115e8:	f3bf 8f6f 	isb	sy
 80115ec:	f3bf 8f4f 	dsb	sy
 80115f0:	b662      	cpsie	i
 80115f2:	e7fe      	b.n	80115f2 <vTaskPlaceOnEventList+0x1a>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80115f4:	4b05      	ldr	r3, [pc, #20]	@ (801160c <vTaskPlaceOnEventList+0x34>)
 80115f6:	6819      	ldr	r1, [r3, #0]
 80115f8:	3118      	adds	r1, #24
 80115fa:	f7fe fc26 	bl	800fe4a <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80115fe:	4620      	mov	r0, r4
 8011600:	2101      	movs	r1, #1
}
 8011602:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011606:	f7ff bbd5 	b.w	8010db4 <prvAddCurrentTaskToDelayedList>
 801160a:	bf00      	nop
 801160c:	20029d9c 	.word	0x20029d9c

08011610 <vTaskPlaceOnEventListRestricted>:
	{
 8011610:	b538      	push	{r3, r4, r5, lr}
 8011612:	460d      	mov	r5, r1
 8011614:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 8011616:	b950      	cbnz	r0, 801162e <vTaskPlaceOnEventListRestricted+0x1e>
 8011618:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801161c:	b672      	cpsid	i
 801161e:	f383 8811 	msr	BASEPRI, r3
 8011622:	f3bf 8f6f 	isb	sy
 8011626:	f3bf 8f4f 	dsb	sy
 801162a:	b662      	cpsie	i
 801162c:	e7fe      	b.n	801162c <vTaskPlaceOnEventListRestricted+0x1c>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801162e:	4b07      	ldr	r3, [pc, #28]	@ (801164c <vTaskPlaceOnEventListRestricted+0x3c>)
 8011630:	6819      	ldr	r1, [r3, #0]
 8011632:	3118      	adds	r1, #24
 8011634:	f7fe fbfe 	bl	800fe34 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8011638:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801163a:	4621      	mov	r1, r4
 801163c:	bf0c      	ite	eq
 801163e:	4628      	moveq	r0, r5
 8011640:	f04f 30ff 	movne.w	r0, #4294967295
	}
 8011644:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8011648:	f7ff bbb4 	b.w	8010db4 <prvAddCurrentTaskToDelayedList>
 801164c:	20029d9c 	.word	0x20029d9c

08011650 <xTaskRemoveFromEventList>:
{
 8011650:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011652:	68c3      	ldr	r3, [r0, #12]
 8011654:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8011656:	b954      	cbnz	r4, 801166e <xTaskRemoveFromEventList+0x1e>
 8011658:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801165c:	b672      	cpsid	i
 801165e:	f383 8811 	msr	BASEPRI, r3
 8011662:	f3bf 8f6f 	isb	sy
 8011666:	f3bf 8f4f 	dsb	sy
 801166a:	b662      	cpsie	i
 801166c:	e7fe      	b.n	801166c <xTaskRemoveFromEventList+0x1c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801166e:	f104 0518 	add.w	r5, r4, #24
 8011672:	4628      	mov	r0, r5
 8011674:	f7fe fc00 	bl	800fe78 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011678:	4b11      	ldr	r3, [pc, #68]	@ (80116c0 <xTaskRemoveFromEventList+0x70>)
 801167a:	681b      	ldr	r3, [r3, #0]
 801167c:	b9d3      	cbnz	r3, 80116b4 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801167e:	1d25      	adds	r5, r4, #4
 8011680:	4628      	mov	r0, r5
 8011682:	f7fe fbf9 	bl	800fe78 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011686:	4a0f      	ldr	r2, [pc, #60]	@ (80116c4 <xTaskRemoveFromEventList+0x74>)
 8011688:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801168a:	6811      	ldr	r1, [r2, #0]
 801168c:	428b      	cmp	r3, r1
 801168e:	d900      	bls.n	8011692 <xTaskRemoveFromEventList+0x42>
 8011690:	6013      	str	r3, [r2, #0]
 8011692:	2014      	movs	r0, #20
 8011694:	4a0c      	ldr	r2, [pc, #48]	@ (80116c8 <xTaskRemoveFromEventList+0x78>)
 8011696:	4629      	mov	r1, r5
 8011698:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801169c:	f7fe fbca 	bl	800fe34 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80116a0:	4b0a      	ldr	r3, [pc, #40]	@ (80116cc <xTaskRemoveFromEventList+0x7c>)
 80116a2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80116a4:	681b      	ldr	r3, [r3, #0]
 80116a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80116a8:	429a      	cmp	r2, r3
 80116aa:	d906      	bls.n	80116ba <xTaskRemoveFromEventList+0x6a>
		xYieldPending = pdTRUE;
 80116ac:	2001      	movs	r0, #1
 80116ae:	4b08      	ldr	r3, [pc, #32]	@ (80116d0 <xTaskRemoveFromEventList+0x80>)
 80116b0:	6018      	str	r0, [r3, #0]
}
 80116b2:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80116b4:	4629      	mov	r1, r5
 80116b6:	4807      	ldr	r0, [pc, #28]	@ (80116d4 <xTaskRemoveFromEventList+0x84>)
 80116b8:	e7f0      	b.n	801169c <xTaskRemoveFromEventList+0x4c>
		xReturn = pdFALSE;
 80116ba:	2000      	movs	r0, #0
	return xReturn;
 80116bc:	e7f9      	b.n	80116b2 <xTaskRemoveFromEventList+0x62>
 80116be:	bf00      	nop
 80116c0:	200298a4 	.word	0x200298a4
 80116c4:	200298c0 	.word	0x200298c0
 80116c8:	2002993c 	.word	0x2002993c
 80116cc:	20029d9c 	.word	0x20029d9c
 80116d0:	200298b4 	.word	0x200298b4
 80116d4:	200298f8 	.word	0x200298f8

080116d8 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80116d8:	4b03      	ldr	r3, [pc, #12]	@ (80116e8 <vTaskInternalSetTimeOutState+0x10>)
 80116da:	681b      	ldr	r3, [r3, #0]
 80116dc:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80116de:	4b03      	ldr	r3, [pc, #12]	@ (80116ec <vTaskInternalSetTimeOutState+0x14>)
 80116e0:	681b      	ldr	r3, [r3, #0]
 80116e2:	6043      	str	r3, [r0, #4]
}
 80116e4:	4770      	bx	lr
 80116e6:	bf00      	nop
 80116e8:	200298b0 	.word	0x200298b0
 80116ec:	200298c4 	.word	0x200298c4

080116f0 <xTaskCheckForTimeOut>:
{
 80116f0:	b570      	push	{r4, r5, r6, lr}
 80116f2:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 80116f4:	4605      	mov	r5, r0
 80116f6:	b950      	cbnz	r0, 801170e <xTaskCheckForTimeOut+0x1e>
 80116f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80116fc:	b672      	cpsid	i
 80116fe:	f383 8811 	msr	BASEPRI, r3
 8011702:	f3bf 8f6f 	isb	sy
 8011706:	f3bf 8f4f 	dsb	sy
 801170a:	b662      	cpsie	i
 801170c:	e7fe      	b.n	801170c <xTaskCheckForTimeOut+0x1c>
	configASSERT( pxTicksToWait );
 801170e:	b951      	cbnz	r1, 8011726 <xTaskCheckForTimeOut+0x36>
 8011710:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011714:	b672      	cpsid	i
 8011716:	f383 8811 	msr	BASEPRI, r3
 801171a:	f3bf 8f6f 	isb	sy
 801171e:	f3bf 8f4f 	dsb	sy
 8011722:	b662      	cpsie	i
 8011724:	e7fe      	b.n	8011724 <xTaskCheckForTimeOut+0x34>
	taskENTER_CRITICAL();
 8011726:	f7fe fc1d 	bl	800ff64 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 801172a:	4b0f      	ldr	r3, [pc, #60]	@ (8011768 <xTaskCheckForTimeOut+0x78>)
 801172c:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 801172e:	6823      	ldr	r3, [r4, #0]
 8011730:	1c5a      	adds	r2, r3, #1
 8011732:	d010      	beq.n	8011756 <xTaskCheckForTimeOut+0x66>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011734:	480d      	ldr	r0, [pc, #52]	@ (801176c <xTaskCheckForTimeOut+0x7c>)
 8011736:	682e      	ldr	r6, [r5, #0]
 8011738:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801173a:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801173c:	4286      	cmp	r6, r0
 801173e:	d001      	beq.n	8011744 <xTaskCheckForTimeOut+0x54>
 8011740:	428a      	cmp	r2, r1
 8011742:	d90f      	bls.n	8011764 <xTaskCheckForTimeOut+0x74>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011744:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8011746:	4283      	cmp	r3, r0
 8011748:	d90a      	bls.n	8011760 <xTaskCheckForTimeOut+0x70>
			*pxTicksToWait -= xElapsedTime;
 801174a:	1a5b      	subs	r3, r3, r1
			vTaskInternalSetTimeOutState( pxTimeOut );
 801174c:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 801174e:	4413      	add	r3, r2
 8011750:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011752:	f7ff ffc1 	bl	80116d8 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 8011756:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8011758:	f7fe fc28 	bl	800ffac <vPortExitCritical>
}
 801175c:	4620      	mov	r0, r4
 801175e:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 8011760:	2300      	movs	r3, #0
 8011762:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8011764:	2401      	movs	r4, #1
 8011766:	e7f7      	b.n	8011758 <xTaskCheckForTimeOut+0x68>
 8011768:	200298c4 	.word	0x200298c4
 801176c:	200298b0 	.word	0x200298b0

08011770 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8011770:	4b01      	ldr	r3, [pc, #4]	@ (8011778 <vTaskMissedYield+0x8>)
 8011772:	2201      	movs	r2, #1
 8011774:	601a      	str	r2, [r3, #0]
}
 8011776:	4770      	bx	lr
 8011778:	200298b4 	.word	0x200298b4

0801177c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 801177c:	4b05      	ldr	r3, [pc, #20]	@ (8011794 <xTaskGetSchedulerState+0x18>)
 801177e:	681b      	ldr	r3, [r3, #0]
 8011780:	b133      	cbz	r3, 8011790 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011782:	4b05      	ldr	r3, [pc, #20]	@ (8011798 <xTaskGetSchedulerState+0x1c>)
 8011784:	6818      	ldr	r0, [r3, #0]
 8011786:	fab0 f080 	clz	r0, r0
 801178a:	0940      	lsrs	r0, r0, #5
 801178c:	0040      	lsls	r0, r0, #1
 801178e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8011790:	2001      	movs	r0, #1
	}
 8011792:	4770      	bx	lr
 8011794:	200298bc 	.word	0x200298bc
 8011798:	200298a4 	.word	0x200298a4

0801179c <xTaskPriorityInherit>:
	{
 801179c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 801179e:	4604      	mov	r4, r0
 80117a0:	b338      	cbz	r0, 80117f2 <xTaskPriorityInherit+0x56>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80117a2:	4d1a      	ldr	r5, [pc, #104]	@ (801180c <xTaskPriorityInherit+0x70>)
 80117a4:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80117a6:	682a      	ldr	r2, [r5, #0]
 80117a8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80117aa:	4293      	cmp	r3, r2
 80117ac:	d226      	bcs.n	80117fc <xTaskPriorityInherit+0x60>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80117ae:	6982      	ldr	r2, [r0, #24]
 80117b0:	2a00      	cmp	r2, #0
 80117b2:	db04      	blt.n	80117be <xTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80117b4:	682a      	ldr	r2, [r5, #0]
 80117b6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80117b8:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 80117bc:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80117be:	2214      	movs	r2, #20
 80117c0:	4e13      	ldr	r6, [pc, #76]	@ (8011810 <xTaskPriorityInherit+0x74>)
 80117c2:	fb02 6303 	mla	r3, r2, r3, r6
 80117c6:	6962      	ldr	r2, [r4, #20]
 80117c8:	429a      	cmp	r2, r3
 80117ca:	d113      	bne.n	80117f4 <xTaskPriorityInherit+0x58>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80117cc:	1d27      	adds	r7, r4, #4
 80117ce:	4638      	mov	r0, r7
 80117d0:	f7fe fb52 	bl	800fe78 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80117d4:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80117d6:	4a0f      	ldr	r2, [pc, #60]	@ (8011814 <xTaskPriorityInherit+0x78>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80117d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80117da:	6811      	ldr	r1, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80117dc:	62e3      	str	r3, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80117de:	428b      	cmp	r3, r1
 80117e0:	d900      	bls.n	80117e4 <xTaskPriorityInherit+0x48>
 80117e2:	6013      	str	r3, [r2, #0]
 80117e4:	2014      	movs	r0, #20
 80117e6:	4639      	mov	r1, r7
 80117e8:	fb00 6003 	mla	r0, r0, r3, r6
 80117ec:	f7fe fb22 	bl	800fe34 <vListInsertEnd>
				xReturn = pdTRUE;
 80117f0:	2001      	movs	r0, #1
	}
 80117f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80117f4:	682b      	ldr	r3, [r5, #0]
 80117f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80117f8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80117fa:	e7f9      	b.n	80117f0 <xTaskPriorityInherit+0x54>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80117fc:	682b      	ldr	r3, [r5, #0]
 80117fe:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 8011800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011802:	4298      	cmp	r0, r3
 8011804:	bf2c      	ite	cs
 8011806:	2000      	movcs	r0, #0
 8011808:	2001      	movcc	r0, #1
 801180a:	e7f2      	b.n	80117f2 <xTaskPriorityInherit+0x56>
 801180c:	20029d9c 	.word	0x20029d9c
 8011810:	2002993c 	.word	0x2002993c
 8011814:	200298c0 	.word	0x200298c0

08011818 <xTaskPriorityDisinherit>:
	{
 8011818:	b538      	push	{r3, r4, r5, lr}
		if( pxMutexHolder != NULL )
 801181a:	b908      	cbnz	r0, 8011820 <xTaskPriorityDisinherit+0x8>
	BaseType_t xReturn = pdFALSE;
 801181c:	2000      	movs	r0, #0
	}
 801181e:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8011820:	4b1d      	ldr	r3, [pc, #116]	@ (8011898 <xTaskPriorityDisinherit+0x80>)
 8011822:	681c      	ldr	r4, [r3, #0]
 8011824:	4284      	cmp	r4, r0
 8011826:	d00a      	beq.n	801183e <xTaskPriorityDisinherit+0x26>
 8011828:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801182c:	b672      	cpsid	i
 801182e:	f383 8811 	msr	BASEPRI, r3
 8011832:	f3bf 8f6f 	isb	sy
 8011836:	f3bf 8f4f 	dsb	sy
 801183a:	b662      	cpsie	i
 801183c:	e7fe      	b.n	801183c <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
 801183e:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8011840:	b953      	cbnz	r3, 8011858 <xTaskPriorityDisinherit+0x40>
 8011842:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011846:	b672      	cpsid	i
 8011848:	f383 8811 	msr	BASEPRI, r3
 801184c:	f3bf 8f6f 	isb	sy
 8011850:	f3bf 8f4f 	dsb	sy
 8011854:	b662      	cpsie	i
 8011856:	e7fe      	b.n	8011856 <xTaskPriorityDisinherit+0x3e>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011858:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
			( pxTCB->uxMutexesHeld )--;
 801185a:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801185c:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
			( pxTCB->uxMutexesHeld )--;
 801185e:	6523      	str	r3, [r4, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011860:	4291      	cmp	r1, r2
 8011862:	d0db      	beq.n	801181c <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011864:	2b00      	cmp	r3, #0
 8011866:	d1d9      	bne.n	801181c <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011868:	1d25      	adds	r5, r4, #4
 801186a:	4628      	mov	r0, r5
 801186c:	f7fe fb04 	bl	800fe78 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011870:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011872:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011876:	62e3      	str	r3, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011878:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 801187a:	4a08      	ldr	r2, [pc, #32]	@ (801189c <xTaskPriorityDisinherit+0x84>)
 801187c:	6811      	ldr	r1, [r2, #0]
 801187e:	428b      	cmp	r3, r1
 8011880:	d900      	bls.n	8011884 <xTaskPriorityDisinherit+0x6c>
 8011882:	6013      	str	r3, [r2, #0]
 8011884:	4a06      	ldr	r2, [pc, #24]	@ (80118a0 <xTaskPriorityDisinherit+0x88>)
 8011886:	2014      	movs	r0, #20
 8011888:	4629      	mov	r1, r5
 801188a:	fb00 2003 	mla	r0, r0, r3, r2
 801188e:	f7fe fad1 	bl	800fe34 <vListInsertEnd>
					xReturn = pdTRUE;
 8011892:	2001      	movs	r0, #1
		return xReturn;
 8011894:	e7c3      	b.n	801181e <xTaskPriorityDisinherit+0x6>
 8011896:	bf00      	nop
 8011898:	20029d9c 	.word	0x20029d9c
 801189c:	200298c0 	.word	0x200298c0
 80118a0:	2002993c 	.word	0x2002993c

080118a4 <vTaskPriorityDisinheritAfterTimeout>:
	{
 80118a4:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 80118a6:	4604      	mov	r4, r0
 80118a8:	2800      	cmp	r0, #0
 80118aa:	d046      	beq.n	801193a <vTaskPriorityDisinheritAfterTimeout+0x96>
			configASSERT( pxTCB->uxMutexesHeld );
 80118ac:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 80118ae:	b952      	cbnz	r2, 80118c6 <vTaskPriorityDisinheritAfterTimeout+0x22>
 80118b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80118b4:	b672      	cpsid	i
 80118b6:	f383 8811 	msr	BASEPRI, r3
 80118ba:	f3bf 8f6f 	isb	sy
 80118be:	f3bf 8f4f 	dsb	sy
 80118c2:	b662      	cpsie	i
 80118c4:	e7fe      	b.n	80118c4 <vTaskPriorityDisinheritAfterTimeout+0x20>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80118c6:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 80118c8:	4299      	cmp	r1, r3
 80118ca:	bf38      	it	cc
 80118cc:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 80118ce:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80118d0:	428b      	cmp	r3, r1
 80118d2:	d032      	beq.n	801193a <vTaskPriorityDisinheritAfterTimeout+0x96>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80118d4:	2a01      	cmp	r2, #1
 80118d6:	d130      	bne.n	801193a <vTaskPriorityDisinheritAfterTimeout+0x96>
					configASSERT( pxTCB != pxCurrentTCB );
 80118d8:	4a18      	ldr	r2, [pc, #96]	@ (801193c <vTaskPriorityDisinheritAfterTimeout+0x98>)
 80118da:	6812      	ldr	r2, [r2, #0]
 80118dc:	4282      	cmp	r2, r0
 80118de:	d10a      	bne.n	80118f6 <vTaskPriorityDisinheritAfterTimeout+0x52>
 80118e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80118e4:	b672      	cpsid	i
 80118e6:	f383 8811 	msr	BASEPRI, r3
 80118ea:	f3bf 8f6f 	isb	sy
 80118ee:	f3bf 8f4f 	dsb	sy
 80118f2:	b662      	cpsie	i
 80118f4:	e7fe      	b.n	80118f4 <vTaskPriorityDisinheritAfterTimeout+0x50>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80118f6:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80118f8:	4d11      	ldr	r5, [pc, #68]	@ (8011940 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80118fa:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80118fc:	f04f 0214 	mov.w	r2, #20
					pxTCB->uxPriority = uxPriorityToUse;
 8011900:	62c1      	str	r1, [r0, #44]	@ 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8011902:	fb02 5303 	mla	r3, r2, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011906:	bfa8      	it	ge
 8011908:	f1c1 0138 	rsbge	r1, r1, #56	@ 0x38
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801190c:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801190e:	bfa8      	it	ge
 8011910:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8011912:	429a      	cmp	r2, r3
 8011914:	d111      	bne.n	801193a <vTaskPriorityDisinheritAfterTimeout+0x96>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011916:	1d06      	adds	r6, r0, #4
 8011918:	4630      	mov	r0, r6
 801191a:	f7fe faad 	bl	800fe78 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 801191e:	4a09      	ldr	r2, [pc, #36]	@ (8011944 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
 8011920:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8011922:	6811      	ldr	r1, [r2, #0]
 8011924:	428b      	cmp	r3, r1
 8011926:	d900      	bls.n	801192a <vTaskPriorityDisinheritAfterTimeout+0x86>
 8011928:	6013      	str	r3, [r2, #0]
 801192a:	2014      	movs	r0, #20
 801192c:	4631      	mov	r1, r6
 801192e:	fb00 5003 	mla	r0, r0, r3, r5
	}
 8011932:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						prvAddTaskToReadyList( pxTCB );
 8011936:	f7fe ba7d 	b.w	800fe34 <vListInsertEnd>
	}
 801193a:	bd70      	pop	{r4, r5, r6, pc}
 801193c:	20029d9c 	.word	0x20029d9c
 8011940:	2002993c 	.word	0x2002993c
 8011944:	200298c0 	.word	0x200298c0

08011948 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8011948:	4b04      	ldr	r3, [pc, #16]	@ (801195c <pvTaskIncrementMutexHeldCount+0x14>)
 801194a:	681a      	ldr	r2, [r3, #0]
 801194c:	b11a      	cbz	r2, 8011956 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 801194e:	6819      	ldr	r1, [r3, #0]
 8011950:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 8011952:	3201      	adds	r2, #1
 8011954:	650a      	str	r2, [r1, #80]	@ 0x50
		return pxCurrentTCB;
 8011956:	6818      	ldr	r0, [r3, #0]
	}
 8011958:	4770      	bx	lr
 801195a:	bf00      	nop
 801195c:	20029d9c 	.word	0x20029d9c

08011960 <prvInsertTimerInActiveList>:
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
 8011960:	4291      	cmp	r1, r2
{
 8011962:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8011964:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011966:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 8011968:	d80a      	bhi.n	8011980 <prvInsertTimerInActiveList+0x20>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801196a:	1ad2      	subs	r2, r2, r3
 801196c:	6983      	ldr	r3, [r0, #24]
 801196e:	429a      	cmp	r2, r3
 8011970:	d20d      	bcs.n	801198e <prvInsertTimerInActiveList+0x2e>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8011972:	1d01      	adds	r1, r0, #4
 8011974:	4b07      	ldr	r3, [pc, #28]	@ (8011994 <prvInsertTimerInActiveList+0x34>)
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011976:	6818      	ldr	r0, [r3, #0]
 8011978:	f7fe fa67 	bl	800fe4a <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 801197c:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
 801197e:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8011980:	429a      	cmp	r2, r3
 8011982:	d201      	bcs.n	8011988 <prvInsertTimerInActiveList+0x28>
 8011984:	4299      	cmp	r1, r3
 8011986:	d202      	bcs.n	801198e <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011988:	1d01      	adds	r1, r0, #4
 801198a:	4b03      	ldr	r3, [pc, #12]	@ (8011998 <prvInsertTimerInActiveList+0x38>)
 801198c:	e7f3      	b.n	8011976 <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 801198e:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8011990:	e7f5      	b.n	801197e <prvInsertTimerInActiveList+0x1e>
 8011992:	bf00      	nop
 8011994:	20029e9c 	.word	0x20029e9c
 8011998:	20029ea0 	.word	0x20029ea0

0801199c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801199c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 801199e:	4c11      	ldr	r4, [pc, #68]	@ (80119e4 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 80119a0:	f7fe fae0 	bl	800ff64 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 80119a4:	6825      	ldr	r5, [r4, #0]
 80119a6:	b9bd      	cbnz	r5, 80119d8 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 80119a8:	4f0f      	ldr	r7, [pc, #60]	@ (80119e8 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 80119aa:	4e10      	ldr	r6, [pc, #64]	@ (80119ec <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 80119ac:	4638      	mov	r0, r7
 80119ae:	f7fe fa33 	bl	800fe18 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80119b2:	4630      	mov	r0, r6
 80119b4:	f7fe fa30 	bl	800fe18 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80119b8:	4b0d      	ldr	r3, [pc, #52]	@ (80119f0 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80119ba:	4a0e      	ldr	r2, [pc, #56]	@ (80119f4 <prvCheckForValidListAndQueue+0x58>)
 80119bc:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 80119be:	601f      	str	r7, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80119c0:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 80119c2:	4b0d      	ldr	r3, [pc, #52]	@ (80119f8 <prvCheckForValidListAndQueue+0x5c>)
 80119c4:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80119c6:	4b0d      	ldr	r3, [pc, #52]	@ (80119fc <prvCheckForValidListAndQueue+0x60>)
 80119c8:	9500      	str	r5, [sp, #0]
 80119ca:	f7fe fd11 	bl	80103f0 <xQueueGenericCreateStatic>
 80119ce:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80119d0:	b110      	cbz	r0, 80119d8 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80119d2:	490b      	ldr	r1, [pc, #44]	@ (8011a00 <prvCheckForValidListAndQueue+0x64>)
 80119d4:	f7ff f90c 	bl	8010bf0 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 80119d8:	b003      	add	sp, #12
 80119da:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 80119de:	f7fe bae5 	b.w	800ffac <vPortExitCritical>
 80119e2:	bf00      	nop
 80119e4:	20029e98 	.word	0x20029e98
 80119e8:	20029eb8 	.word	0x20029eb8
 80119ec:	20029ea4 	.word	0x20029ea4
 80119f0:	20029ea0 	.word	0x20029ea0
 80119f4:	20029df0 	.word	0x20029df0
 80119f8:	20029e9c 	.word	0x20029e9c
 80119fc:	20029da0 	.word	0x20029da0
 8011a00:	08041abd 	.word	0x08041abd

08011a04 <xTimerCreateTimerTask>:
{
 8011a04:	b510      	push	{r4, lr}
 8011a06:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8011a08:	f7ff ffc8 	bl	801199c <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8011a0c:	4b13      	ldr	r3, [pc, #76]	@ (8011a5c <xTimerCreateTimerTask+0x58>)
 8011a0e:	681b      	ldr	r3, [r3, #0]
 8011a10:	b1b3      	cbz	r3, 8011a40 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8011a12:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8011a14:	aa07      	add	r2, sp, #28
 8011a16:	a906      	add	r1, sp, #24
 8011a18:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8011a1a:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8011a1e:	f7fe f8f7 	bl	800fc10 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8011a22:	9b05      	ldr	r3, [sp, #20]
 8011a24:	9a07      	ldr	r2, [sp, #28]
 8011a26:	9302      	str	r3, [sp, #8]
 8011a28:	9b06      	ldr	r3, [sp, #24]
 8011a2a:	490d      	ldr	r1, [pc, #52]	@ (8011a60 <xTimerCreateTimerTask+0x5c>)
 8011a2c:	9301      	str	r3, [sp, #4]
 8011a2e:	2302      	movs	r3, #2
 8011a30:	480c      	ldr	r0, [pc, #48]	@ (8011a64 <xTimerCreateTimerTask+0x60>)
 8011a32:	9300      	str	r3, [sp, #0]
 8011a34:	4623      	mov	r3, r4
 8011a36:	f7ff fad3 	bl	8010fe0 <xTaskCreateStatic>
 8011a3a:	4b0b      	ldr	r3, [pc, #44]	@ (8011a68 <xTimerCreateTimerTask+0x64>)
 8011a3c:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8011a3e:	b950      	cbnz	r0, 8011a56 <xTimerCreateTimerTask+0x52>
 8011a40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011a44:	b672      	cpsid	i
 8011a46:	f383 8811 	msr	BASEPRI, r3
 8011a4a:	f3bf 8f6f 	isb	sy
 8011a4e:	f3bf 8f4f 	dsb	sy
 8011a52:	b662      	cpsie	i
	configASSERT( xReturn );
 8011a54:	e7fe      	b.n	8011a54 <xTimerCreateTimerTask+0x50>
}
 8011a56:	2001      	movs	r0, #1
 8011a58:	b008      	add	sp, #32
 8011a5a:	bd10      	pop	{r4, pc}
 8011a5c:	20029e98 	.word	0x20029e98
 8011a60:	08041ac2 	.word	0x08041ac2
 8011a64:	08011b6d 	.word	0x08011b6d
 8011a68:	20029e94 	.word	0x20029e94

08011a6c <xTimerGenericCommand>:
{
 8011a6c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8011a6e:	4616      	mov	r6, r2
	configASSERT( xTimer );
 8011a70:	4604      	mov	r4, r0
{
 8011a72:	461a      	mov	r2, r3
	configASSERT( xTimer );
 8011a74:	b950      	cbnz	r0, 8011a8c <xTimerGenericCommand+0x20>
 8011a76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011a7a:	b672      	cpsid	i
 8011a7c:	f383 8811 	msr	BASEPRI, r3
 8011a80:	f3bf 8f6f 	isb	sy
 8011a84:	f3bf 8f4f 	dsb	sy
 8011a88:	b662      	cpsie	i
 8011a8a:	e7fe      	b.n	8011a8a <xTimerGenericCommand+0x1e>
	if( xTimerQueue != NULL )
 8011a8c:	4d0c      	ldr	r5, [pc, #48]	@ (8011ac0 <xTimerGenericCommand+0x54>)
 8011a8e:	6828      	ldr	r0, [r5, #0]
 8011a90:	b178      	cbz	r0, 8011ab2 <xTimerGenericCommand+0x46>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8011a92:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8011a94:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8011a96:	e9cd 1600 	strd	r1, r6, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8011a9a:	dc0c      	bgt.n	8011ab6 <xTimerGenericCommand+0x4a>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8011a9c:	f7ff fe6e 	bl	801177c <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8011aa0:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8011aa2:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8011aa4:	4669      	mov	r1, sp
 8011aa6:	6828      	ldr	r0, [r5, #0]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8011aa8:	bf0c      	ite	eq
 8011aaa:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8011aac:	461a      	movne	r2, r3
 8011aae:	f7fe fd24 	bl	80104fa <xQueueGenericSend>
}
 8011ab2:	b004      	add	sp, #16
 8011ab4:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8011ab6:	2300      	movs	r3, #0
 8011ab8:	4669      	mov	r1, sp
 8011aba:	f7fe fe0a 	bl	80106d2 <xQueueGenericSendFromISR>
 8011abe:	e7f8      	b.n	8011ab2 <xTimerGenericCommand+0x46>
 8011ac0:	20029e98 	.word	0x20029e98

08011ac4 <prvSampleTimeNow>:
{
 8011ac4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 8011ac8:	f8df 809c 	ldr.w	r8, [pc, #156]	@ 8011b68 <prvSampleTimeNow+0xa4>
{
 8011acc:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 8011ace:	f7ff fb3f 	bl	8011150 <xTaskGetTickCount>
 8011ad2:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 8011ad4:	f8d8 3000 	ldr.w	r3, [r8]
 8011ad8:	4283      	cmp	r3, r0
 8011ada:	d909      	bls.n	8011af0 <prvSampleTimeNow+0x2c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011adc:	4f20      	ldr	r7, [pc, #128]	@ (8011b60 <prvSampleTimeNow+0x9c>)
 8011ade:	683b      	ldr	r3, [r7, #0]
 8011ae0:	681a      	ldr	r2, [r3, #0]
 8011ae2:	b96a      	cbnz	r2, 8011b00 <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 8011ae4:	4a1f      	ldr	r2, [pc, #124]	@ (8011b64 <prvSampleTimeNow+0xa0>)
 8011ae6:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8011ae8:	6013      	str	r3, [r2, #0]
 8011aea:	2301      	movs	r3, #1
	pxCurrentTimerList = pxOverflowTimerList;
 8011aec:	6039      	str	r1, [r7, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 8011aee:	e000      	b.n	8011af2 <prvSampleTimeNow+0x2e>
 8011af0:	2300      	movs	r3, #0
}
 8011af2:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdTRUE;
 8011af4:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 8011af6:	f8c8 5000 	str.w	r5, [r8]
}
 8011afa:	b002      	add	sp, #8
 8011afc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011b00:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011b02:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011b04:	f8d3 9000 	ldr.w	r9, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011b08:	f104 0a04 	add.w	sl, r4, #4
 8011b0c:	4650      	mov	r0, sl
 8011b0e:	f7fe f9b3 	bl	800fe78 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011b12:	6a23      	ldr	r3, [r4, #32]
 8011b14:	4620      	mov	r0, r4
 8011b16:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011b18:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8011b1c:	075b      	lsls	r3, r3, #29
 8011b1e:	d5de      	bpl.n	8011ade <prvSampleTimeNow+0x1a>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8011b20:	69a3      	ldr	r3, [r4, #24]
 8011b22:	444b      	add	r3, r9
			if( xReloadTime > xNextExpireTime )
 8011b24:	4599      	cmp	r9, r3
 8011b26:	d206      	bcs.n	8011b36 <prvSampleTimeNow+0x72>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011b28:	4651      	mov	r1, sl
 8011b2a:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8011b2c:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011b2e:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011b30:	f7fe f98b 	bl	800fe4a <vListInsert>
 8011b34:	e7d3      	b.n	8011ade <prvSampleTimeNow+0x1a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011b36:	2300      	movs	r3, #0
 8011b38:	464a      	mov	r2, r9
 8011b3a:	4620      	mov	r0, r4
 8011b3c:	4619      	mov	r1, r3
 8011b3e:	9300      	str	r3, [sp, #0]
 8011b40:	f7ff ff94 	bl	8011a6c <xTimerGenericCommand>
				configASSERT( xResult );
 8011b44:	2800      	cmp	r0, #0
 8011b46:	d1ca      	bne.n	8011ade <prvSampleTimeNow+0x1a>
 8011b48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011b4c:	b672      	cpsid	i
 8011b4e:	f383 8811 	msr	BASEPRI, r3
 8011b52:	f3bf 8f6f 	isb	sy
 8011b56:	f3bf 8f4f 	dsb	sy
 8011b5a:	b662      	cpsie	i
 8011b5c:	e7fe      	b.n	8011b5c <prvSampleTimeNow+0x98>
 8011b5e:	bf00      	nop
 8011b60:	20029ea0 	.word	0x20029ea0
 8011b64:	20029e9c 	.word	0x20029e9c
 8011b68:	20029e90 	.word	0x20029e90

08011b6c <prvTimerTask>:
{
 8011b6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8011b70:	4d71      	ldr	r5, [pc, #452]	@ (8011d38 <prvTimerTask+0x1cc>)
{
 8011b72:	b089      	sub	sp, #36	@ 0x24
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8011b74:	4e71      	ldr	r6, [pc, #452]	@ (8011d3c <prvTimerTask+0x1d0>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8011b76:	682b      	ldr	r3, [r5, #0]
 8011b78:	f8d3 8000 	ldr.w	r8, [r3]
 8011b7c:	f1b8 0f00 	cmp.w	r8, #0
 8011b80:	d037      	beq.n	8011bf2 <prvTimerTask+0x86>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011b82:	68db      	ldr	r3, [r3, #12]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8011b84:	2400      	movs	r4, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011b86:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 8011b8a:	f7ff fad9 	bl	8011140 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011b8e:	a804      	add	r0, sp, #16
 8011b90:	f7ff ff98 	bl	8011ac4 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 8011b94:	9b04      	ldr	r3, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011b96:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	d16b      	bne.n	8011c74 <prvTimerTask+0x108>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8011b9c:	2c00      	cmp	r4, #0
 8011b9e:	d14e      	bne.n	8011c3e <prvTimerTask+0xd2>
 8011ba0:	4540      	cmp	r0, r8
 8011ba2:	d352      	bcc.n	8011c4a <prvTimerTask+0xde>
				( void ) xTaskResumeAll();
 8011ba4:	f7ff fb72 	bl	801128c <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011ba8:	682b      	ldr	r3, [r5, #0]
 8011baa:	68db      	ldr	r3, [r3, #12]
 8011bac:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011bae:	1d38      	adds	r0, r7, #4
 8011bb0:	f7fe f962 	bl	800fe78 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011bb4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8011bb8:	0758      	lsls	r0, r3, #29
 8011bba:	d51c      	bpl.n	8011bf6 <prvTimerTask+0x8a>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8011bbc:	69b9      	ldr	r1, [r7, #24]
 8011bbe:	4643      	mov	r3, r8
 8011bc0:	464a      	mov	r2, r9
 8011bc2:	4638      	mov	r0, r7
 8011bc4:	4441      	add	r1, r8
 8011bc6:	f7ff fecb 	bl	8011960 <prvInsertTimerInActiveList>
 8011bca:	b1c0      	cbz	r0, 8011bfe <prvTimerTask+0x92>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011bcc:	4623      	mov	r3, r4
 8011bce:	4642      	mov	r2, r8
 8011bd0:	4621      	mov	r1, r4
 8011bd2:	4638      	mov	r0, r7
 8011bd4:	9400      	str	r4, [sp, #0]
 8011bd6:	f7ff ff49 	bl	8011a6c <xTimerGenericCommand>
			configASSERT( xResult );
 8011bda:	b980      	cbnz	r0, 8011bfe <prvTimerTask+0x92>
 8011bdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011be0:	b672      	cpsid	i
 8011be2:	f383 8811 	msr	BASEPRI, r3
 8011be6:	f3bf 8f6f 	isb	sy
 8011bea:	f3bf 8f4f 	dsb	sy
 8011bee:	b662      	cpsie	i
 8011bf0:	e7fe      	b.n	8011bf0 <prvTimerTask+0x84>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8011bf2:	2401      	movs	r4, #1
 8011bf4:	e7c9      	b.n	8011b8a <prvTimerTask+0x1e>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011bf6:	f023 0301 	bic.w	r3, r3, #1
 8011bfa:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011bfe:	6a3b      	ldr	r3, [r7, #32]
 8011c00:	4638      	mov	r0, r7
 8011c02:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011c04:	2200      	movs	r2, #0
 8011c06:	a904      	add	r1, sp, #16
 8011c08:	6830      	ldr	r0, [r6, #0]
 8011c0a:	f7fe fe1f 	bl	801084c <xQueueReceive>
 8011c0e:	2800      	cmp	r0, #0
 8011c10:	d0b1      	beq.n	8011b76 <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8011c12:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8011c14:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	db2f      	blt.n	8011c7a <prvTimerTask+0x10e>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8011c1a:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8011c1c:	6963      	ldr	r3, [r4, #20]
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	d132      	bne.n	8011c88 <prvTimerTask+0x11c>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011c22:	a803      	add	r0, sp, #12
 8011c24:	f7ff ff4e 	bl	8011ac4 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8011c28:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011c2a:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 8011c2c:	2b09      	cmp	r3, #9
 8011c2e:	d8e9      	bhi.n	8011c04 <prvTimerTask+0x98>
 8011c30:	e8df f003 	tbb	[pc, r3]
 8011c34:	592e2e2e 	.word	0x592e2e2e
 8011c38:	2e2e7a60 	.word	0x2e2e7a60
 8011c3c:	6059      	.short	0x6059
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8011c3e:	4b40      	ldr	r3, [pc, #256]	@ (8011d40 <prvTimerTask+0x1d4>)
 8011c40:	681b      	ldr	r3, [r3, #0]
 8011c42:	681c      	ldr	r4, [r3, #0]
 8011c44:	fab4 f484 	clz	r4, r4
 8011c48:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8011c4a:	4622      	mov	r2, r4
 8011c4c:	eba8 0109 	sub.w	r1, r8, r9
 8011c50:	6830      	ldr	r0, [r6, #0]
 8011c52:	f7ff f80e 	bl	8010c72 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8011c56:	f7ff fb19 	bl	801128c <xTaskResumeAll>
 8011c5a:	2800      	cmp	r0, #0
 8011c5c:	d1d2      	bne.n	8011c04 <prvTimerTask+0x98>
					portYIELD_WITHIN_API();
 8011c5e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8011c62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011c66:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8011c6a:	f3bf 8f4f 	dsb	sy
 8011c6e:	f3bf 8f6f 	isb	sy
 8011c72:	e7c7      	b.n	8011c04 <prvTimerTask+0x98>
			( void ) xTaskResumeAll();
 8011c74:	f7ff fb0a 	bl	801128c <xTaskResumeAll>
}
 8011c78:	e7c4      	b.n	8011c04 <prvTimerTask+0x98>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8011c7a:	9b05      	ldr	r3, [sp, #20]
 8011c7c:	9907      	ldr	r1, [sp, #28]
 8011c7e:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8011c80:	9b04      	ldr	r3, [sp, #16]
 8011c82:	2b00      	cmp	r3, #0
 8011c84:	dbbe      	blt.n	8011c04 <prvTimerTask+0x98>
 8011c86:	e7c8      	b.n	8011c1a <prvTimerTask+0xae>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011c88:	1d20      	adds	r0, r4, #4
 8011c8a:	f7fe f8f5 	bl	800fe78 <uxListRemove>
 8011c8e:	e7c8      	b.n	8011c22 <prvTimerTask+0xb6>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011c90:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8011c94:	4620      	mov	r0, r4
 8011c96:	69a1      	ldr	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011c98:	f043 0301 	orr.w	r3, r3, #1
 8011c9c:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8011ca0:	9b05      	ldr	r3, [sp, #20]
 8011ca2:	4419      	add	r1, r3
 8011ca4:	f7ff fe5c 	bl	8011960 <prvInsertTimerInActiveList>
 8011ca8:	2800      	cmp	r0, #0
 8011caa:	d0ab      	beq.n	8011c04 <prvTimerTask+0x98>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011cac:	6a23      	ldr	r3, [r4, #32]
 8011cae:	4620      	mov	r0, r4
 8011cb0:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011cb2:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8011cb6:	0759      	lsls	r1, r3, #29
 8011cb8:	d5a4      	bpl.n	8011c04 <prvTimerTask+0x98>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8011cba:	69a2      	ldr	r2, [r4, #24]
 8011cbc:	2300      	movs	r3, #0
 8011cbe:	9905      	ldr	r1, [sp, #20]
 8011cc0:	4620      	mov	r0, r4
 8011cc2:	9300      	str	r3, [sp, #0]
 8011cc4:	440a      	add	r2, r1
 8011cc6:	4619      	mov	r1, r3
 8011cc8:	f7ff fed0 	bl	8011a6c <xTimerGenericCommand>
							configASSERT( xResult );
 8011ccc:	2800      	cmp	r0, #0
 8011cce:	d199      	bne.n	8011c04 <prvTimerTask+0x98>
 8011cd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011cd4:	b672      	cpsid	i
 8011cd6:	f383 8811 	msr	BASEPRI, r3
 8011cda:	f3bf 8f6f 	isb	sy
 8011cde:	f3bf 8f4f 	dsb	sy
 8011ce2:	b662      	cpsie	i
 8011ce4:	e7fe      	b.n	8011ce4 <prvTimerTask+0x178>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011ce6:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011cea:	f023 0301 	bic.w	r3, r3, #1
 8011cee:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 8011cf2:	e787      	b.n	8011c04 <prvTimerTask+0x98>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011cf4:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8011cf8:	f043 0301 	orr.w	r3, r3, #1
 8011cfc:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8011d00:	9905      	ldr	r1, [sp, #20]
 8011d02:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8011d04:	b951      	cbnz	r1, 8011d1c <prvTimerTask+0x1b0>
 8011d06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011d0a:	b672      	cpsid	i
 8011d0c:	f383 8811 	msr	BASEPRI, r3
 8011d10:	f3bf 8f6f 	isb	sy
 8011d14:	f3bf 8f4f 	dsb	sy
 8011d18:	b662      	cpsie	i
 8011d1a:	e7fe      	b.n	8011d1a <prvTimerTask+0x1ae>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8011d1c:	4603      	mov	r3, r0
 8011d1e:	4401      	add	r1, r0
 8011d20:	4620      	mov	r0, r4
 8011d22:	f7ff fe1d 	bl	8011960 <prvInsertTimerInActiveList>
					break;
 8011d26:	e76d      	b.n	8011c04 <prvTimerTask+0x98>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8011d28:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8011d2c:	079a      	lsls	r2, r3, #30
 8011d2e:	d4dc      	bmi.n	8011cea <prvTimerTask+0x17e>
							vPortFree( pxTimer );
 8011d30:	4620      	mov	r0, r4
 8011d32:	f7fe f835 	bl	800fda0 <vPortFree>
 8011d36:	e765      	b.n	8011c04 <prvTimerTask+0x98>
 8011d38:	20029ea0 	.word	0x20029ea0
 8011d3c:	20029e98 	.word	0x20029e98
 8011d40:	20029e9c 	.word	0x20029e9c

08011d44 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8011d44:	8880      	ldrh	r0, [r0, #4]
 8011d46:	4770      	bx	lr

08011d48 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8011d48:	b570      	push	{r4, r5, r6, lr}
 8011d4a:	6803      	ldr	r3, [r0, #0]
 8011d4c:	460c      	mov	r4, r1
 8011d4e:	2100      	movs	r1, #0
 8011d50:	4605      	mov	r5, r0
 8011d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011d54:	4798      	blx	r3
 8011d56:	4606      	mov	r6, r0
 8011d58:	682b      	ldr	r3, [r5, #0]
 8011d5a:	4628      	mov	r0, r5
 8011d5c:	1ba4      	subs	r4, r4, r6
 8011d5e:	6a1b      	ldr	r3, [r3, #32]
 8011d60:	b2a4      	uxth	r4, r4
 8011d62:	4798      	blx	r3
 8011d64:	fbb4 f0f0 	udiv	r0, r4, r0
 8011d68:	bd70      	pop	{r4, r5, r6, pc}

08011d6a <_ZN8touchgfx17AbstractPartition5clearEv>:
 8011d6a:	2300      	movs	r3, #0
 8011d6c:	8083      	strh	r3, [r0, #4]
 8011d6e:	4770      	bx	lr

08011d70 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8011d70:	b510      	push	{r4, lr}
 8011d72:	6803      	ldr	r3, [r0, #0]
 8011d74:	4604      	mov	r4, r0
 8011d76:	8881      	ldrh	r1, [r0, #4]
 8011d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011d7a:	4798      	blx	r3
 8011d7c:	88a3      	ldrh	r3, [r4, #4]
 8011d7e:	3301      	adds	r3, #1
 8011d80:	80a3      	strh	r3, [r4, #4]
 8011d82:	bd10      	pop	{r4, pc}

08011d84 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8011d84:	6803      	ldr	r3, [r0, #0]
 8011d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011d88:	4718      	bx	r3

08011d8a <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8011d8a:	4770      	bx	lr

08011d8c <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8011d8c:	4a02      	ldr	r2, [pc, #8]	@ (8011d98 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8011d8e:	6002      	str	r2, [r0, #0]
 8011d90:	2200      	movs	r2, #0
 8011d92:	8082      	strh	r2, [r0, #4]
 8011d94:	4770      	bx	lr
 8011d96:	bf00      	nop
 8011d98:	08041ad4 	.word	0x08041ad4

08011d9c <_ZNK8touchgfx25AbstractProgressIndicator17invalidateContentEv>:
 8011d9c:	b510      	push	{r4, lr}
 8011d9e:	6803      	ldr	r3, [r0, #0]
 8011da0:	4604      	mov	r4, r0
 8011da2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8011da6:	4798      	blx	r3
 8011da8:	b110      	cbz	r0, 8011db0 <_ZNK8touchgfx25AbstractProgressIndicator17invalidateContentEv+0x14>
 8011daa:	4620      	mov	r0, r4
 8011dac:	f7f3 f9fd 	bl	80051aa <_ZNK8touchgfx8Drawable17invalidateContentEv>
 8011db0:	bd10      	pop	{r4, pc}

08011db2 <_ZN8touchgfx11BoxProgress8setColorENS_9colortypeE>:
 8011db2:	f8c0 10e0 	str.w	r1, [r0, #224]	@ 0xe0
 8011db6:	4770      	bx	lr

08011db8 <_ZNK8touchgfx11BoxProgress8getColorEv>:
 8011db8:	f8d0 00e0 	ldr.w	r0, [r0, #224]	@ 0xe0
 8011dbc:	4770      	bx	lr

08011dbe <_ZN8touchgfx11BoxProgressD1Ev>:
 8011dbe:	4770      	bx	lr

08011dc0 <_ZN8touchgfx11BoxProgressD0Ev>:
 8011dc0:	b510      	push	{r4, lr}
 8011dc2:	4604      	mov	r4, r0
 8011dc4:	21e4      	movs	r1, #228	@ 0xe4
 8011dc6:	f018 fa7b 	bl	802a2c0 <_ZdlPvj>
 8011dca:	4620      	mov	r0, r4
 8011dcc:	bd10      	pop	{r4, pc}

08011dce <_ZN8touchgfx11BoxProgress8setAlphaEh>:
 8011dce:	b538      	push	{r3, r4, r5, lr}
 8011dd0:	4604      	mov	r4, r0
 8011dd2:	460d      	mov	r5, r1
 8011dd4:	f000 f962 	bl	801209c <_ZN8touchgfx25AbstractProgressIndicator8setAlphaEh>
 8011dd8:	f884 50de 	strb.w	r5, [r4, #222]	@ 0xde
 8011ddc:	bd38      	pop	{r3, r4, r5, pc}

08011dde <_ZN8touchgfx11BoxProgress28setProgressIndicatorPositionEssss>:
 8011dde:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8011de2:	4617      	mov	r7, r2
 8011de4:	f9bd 5020 	ldrsh.w	r5, [sp, #32]
 8011de8:	2200      	movs	r2, #0
 8011dea:	4604      	mov	r4, r0
 8011dec:	460e      	mov	r6, r1
 8011dee:	4698      	mov	r8, r3
 8011df0:	4611      	mov	r1, r2
 8011df2:	9500      	str	r5, [sp, #0]
 8011df4:	30b8      	adds	r0, #184	@ 0xb8
 8011df6:	f7f3 fa35 	bl	8005264 <_ZN8touchgfx8Drawable11setPositionEssss>
 8011dfa:	4643      	mov	r3, r8
 8011dfc:	463a      	mov	r2, r7
 8011dfe:	4631      	mov	r1, r6
 8011e00:	4620      	mov	r0, r4
 8011e02:	9508      	str	r5, [sp, #32]
 8011e04:	b002      	add	sp, #8
 8011e06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011e0a:	f000 ba3c 	b.w	8012286 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>

08011e0e <_ZN8touchgfx11BoxProgress8setValueEi>:
 8011e0e:	b530      	push	{r4, r5, lr}
 8011e10:	4604      	mov	r4, r0
 8011e12:	b085      	sub	sp, #20
 8011e14:	f000 f995 	bl	8012142 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 8011e18:	f894 30b4 	ldrb.w	r3, [r4, #180]	@ 0xb4
 8011e1c:	2b03      	cmp	r3, #3
 8011e1e:	d814      	bhi.n	8011e4a <_ZN8touchgfx11BoxProgress8setValueEi+0x3c>
 8011e20:	e8df f003 	tbb	[pc, r3]
 8011e24:	10100202 	.word	0x10100202
 8011e28:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
 8011e2c:	4620      	mov	r0, r4
 8011e2e:	f000 f9aa 	bl	8012186 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 8011e32:	b200      	sxth	r0, r0
 8011e34:	f894 30b4 	ldrb.w	r3, [r4, #180]	@ 0xb4
 8011e38:	2b03      	cmp	r3, #3
 8011e3a:	d830      	bhi.n	8011e9e <_ZN8touchgfx11BoxProgress8setValueEi+0x90>
 8011e3c:	e8df f003 	tbb	[pc, r3]
 8011e40:	64423107 	.word	0x64423107
 8011e44:	f8b4 1062 	ldrh.w	r1, [r4, #98]	@ 0x62
 8011e48:	e7f0      	b.n	8011e2c <_ZN8touchgfx11BoxProgress8setValueEi+0x1e>
 8011e4a:	2000      	movs	r0, #0
 8011e4c:	e7f2      	b.n	8011e34 <_ZN8touchgfx11BoxProgress8setValueEi+0x26>
 8011e4e:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	@ 0x62
 8011e52:	2200      	movs	r2, #0
 8011e54:	f9b4 50c0 	ldrsh.w	r5, [r4, #192]	@ 0xc0
 8011e58:	9300      	str	r3, [sp, #0]
 8011e5a:	4611      	mov	r1, r2
 8011e5c:	4603      	mov	r3, r0
 8011e5e:	f104 00b8 	add.w	r0, r4, #184	@ 0xb8
 8011e62:	f7f3 f9ff 	bl	8005264 <_ZN8touchgfx8Drawable11setPositionEssss>
 8011e66:	f9b4 30c0 	ldrsh.w	r3, [r4, #192]	@ 0xc0
 8011e6a:	4629      	mov	r1, r5
 8011e6c:	429d      	cmp	r5, r3
 8011e6e:	eba5 0503 	sub.w	r5, r5, r3
 8011e72:	f9b4 20c2 	ldrsh.w	r2, [r4, #194]	@ 0xc2
 8011e76:	bfa8      	it	ge
 8011e78:	4619      	movge	r1, r3
 8011e7a:	2d00      	cmp	r5, #0
 8011e7c:	f8ad 200e 	strh.w	r2, [sp, #14]
 8011e80:	f8ad 1008 	strh.w	r1, [sp, #8]
 8011e84:	f04f 0100 	mov.w	r1, #0
 8011e88:	bfb8      	it	lt
 8011e8a:	426d      	neglt	r5, r5
 8011e8c:	f8ad 100a 	strh.w	r1, [sp, #10]
 8011e90:	f8ad 500c 	strh.w	r5, [sp, #12]
 8011e94:	a902      	add	r1, sp, #8
 8011e96:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8011e9a:	f008 f823 	bl	8019ee4 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>
 8011e9e:	b005      	add	sp, #20
 8011ea0:	bd30      	pop	{r4, r5, pc}
 8011ea2:	8921      	ldrh	r1, [r4, #8]
 8011ea4:	2200      	movs	r2, #0
 8011ea6:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	@ 0x62
 8011eaa:	1a09      	subs	r1, r1, r0
 8011eac:	f9b4 50bc 	ldrsh.w	r5, [r4, #188]	@ 0xbc
 8011eb0:	9300      	str	r3, [sp, #0]
 8011eb2:	4603      	mov	r3, r0
 8011eb4:	b209      	sxth	r1, r1
 8011eb6:	f104 00b8 	add.w	r0, r4, #184	@ 0xb8
 8011eba:	f7f3 f9d3 	bl	8005264 <_ZN8touchgfx8Drawable11setPositionEssss>
 8011ebe:	f9b4 30bc 	ldrsh.w	r3, [r4, #188]	@ 0xbc
 8011ec2:	e7d2      	b.n	8011e6a <_ZN8touchgfx11BoxProgress8setValueEi+0x5c>
 8011ec4:	2200      	movs	r2, #0
 8011ec6:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	@ 0x60
 8011eca:	9000      	str	r0, [sp, #0]
 8011ecc:	f104 00b8 	add.w	r0, r4, #184	@ 0xb8
 8011ed0:	4611      	mov	r1, r2
 8011ed2:	f9b4 50c2 	ldrsh.w	r5, [r4, #194]	@ 0xc2
 8011ed6:	f7f3 f9c5 	bl	8005264 <_ZN8touchgfx8Drawable11setPositionEssss>
 8011eda:	f9b4 30c2 	ldrsh.w	r3, [r4, #194]	@ 0xc2
 8011ede:	2100      	movs	r1, #0
 8011ee0:	429d      	cmp	r5, r3
 8011ee2:	f9b4 20c0 	ldrsh.w	r2, [r4, #192]	@ 0xc0
 8011ee6:	f8ad 1008 	strh.w	r1, [sp, #8]
 8011eea:	4629      	mov	r1, r5
 8011eec:	eba5 0503 	sub.w	r5, r5, r3
 8011ef0:	bfa8      	it	ge
 8011ef2:	4619      	movge	r1, r3
 8011ef4:	f8ad 200c 	strh.w	r2, [sp, #12]
 8011ef8:	2d00      	cmp	r5, #0
 8011efa:	f8ad 100a 	strh.w	r1, [sp, #10]
 8011efe:	bfb8      	it	lt
 8011f00:	426d      	neglt	r5, r5
 8011f02:	f8ad 500e 	strh.w	r5, [sp, #14]
 8011f06:	e7c5      	b.n	8011e94 <_ZN8touchgfx11BoxProgress8setValueEi+0x86>
 8011f08:	f8b4 2062 	ldrh.w	r2, [r4, #98]	@ 0x62
 8011f0c:	2100      	movs	r1, #0
 8011f0e:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	@ 0x60
 8011f12:	1a12      	subs	r2, r2, r0
 8011f14:	9000      	str	r0, [sp, #0]
 8011f16:	f104 00b8 	add.w	r0, r4, #184	@ 0xb8
 8011f1a:	f9b4 50be 	ldrsh.w	r5, [r4, #190]	@ 0xbe
 8011f1e:	b212      	sxth	r2, r2
 8011f20:	f7f3 f9a0 	bl	8005264 <_ZN8touchgfx8Drawable11setPositionEssss>
 8011f24:	f9b4 30be 	ldrsh.w	r3, [r4, #190]	@ 0xbe
 8011f28:	e7d9      	b.n	8011ede <_ZN8touchgfx11BoxProgress8setValueEi+0xd0>
	...

08011f2c <_ZN8touchgfx11BoxProgressC1Ev>:
 8011f2c:	b510      	push	{r4, lr}
 8011f2e:	4604      	mov	r4, r0
 8011f30:	f000 f85a 	bl	8011fe8 <_ZN8touchgfx25AbstractDirectionProgressC1Ev>
 8011f34:	2201      	movs	r2, #1
 8011f36:	4b17      	ldr	r3, [pc, #92]	@ (8011f94 <_ZN8touchgfx11BoxProgressC1Ev+0x68>)
 8011f38:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8011f3c:	f104 01b8 	add.w	r1, r4, #184	@ 0xb8
 8011f40:	f884 20dd 	strb.w	r2, [r4, #221]	@ 0xdd
 8011f44:	4a14      	ldr	r2, [pc, #80]	@ (8011f98 <_ZN8touchgfx11BoxProgressC1Ev+0x6c>)
 8011f46:	6023      	str	r3, [r4, #0]
 8011f48:	2300      	movs	r3, #0
 8011f4a:	f8c4 20b8 	str.w	r2, [r4, #184]	@ 0xb8
 8011f4e:	22ff      	movs	r2, #255	@ 0xff
 8011f50:	f8a4 30bc 	strh.w	r3, [r4, #188]	@ 0xbc
 8011f54:	f8a4 30be 	strh.w	r3, [r4, #190]	@ 0xbe
 8011f58:	f8a4 30c0 	strh.w	r3, [r4, #192]	@ 0xc0
 8011f5c:	f8a4 30c2 	strh.w	r3, [r4, #194]	@ 0xc2
 8011f60:	f8a4 30c4 	strh.w	r3, [r4, #196]	@ 0xc4
 8011f64:	f8a4 30c6 	strh.w	r3, [r4, #198]	@ 0xc6
 8011f68:	f8a4 30c8 	strh.w	r3, [r4, #200]	@ 0xc8
 8011f6c:	f8a4 30ca 	strh.w	r3, [r4, #202]	@ 0xca
 8011f70:	f8c4 30d4 	str.w	r3, [r4, #212]	@ 0xd4
 8011f74:	f8a4 30d8 	strh.w	r3, [r4, #216]	@ 0xd8
 8011f78:	f8a4 30da 	strh.w	r3, [r4, #218]	@ 0xda
 8011f7c:	f884 30dc 	strb.w	r3, [r4, #220]	@ 0xdc
 8011f80:	f884 20de 	strb.w	r2, [r4, #222]	@ 0xde
 8011f84:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8011f88:	e9c4 3333 	strd	r3, r3, [r4, #204]	@ 0xcc
 8011f8c:	f000 fa08 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8011f90:	4620      	mov	r0, r4
 8011f92:	bd10      	pop	{r4, pc}
 8011f94:	08041b08 	.word	0x08041b08
 8011f98:	0804250c 	.word	0x0804250c

08011f9c <_ZNK8touchgfx25AbstractDirectionProgress12getDirectionEv>:
 8011f9c:	f890 00b4 	ldrb.w	r0, [r0, #180]	@ 0xb4
 8011fa0:	4770      	bx	lr

08011fa2 <_ZN8touchgfx25AbstractDirectionProgressD1Ev>:
 8011fa2:	4770      	bx	lr

08011fa4 <_ZN8touchgfx25AbstractDirectionProgressD0Ev>:
 8011fa4:	b510      	push	{r4, lr}
 8011fa6:	4604      	mov	r4, r0
 8011fa8:	21b8      	movs	r1, #184	@ 0xb8
 8011faa:	f018 f989 	bl	802a2c0 <_ZdlPvj>
 8011fae:	4620      	mov	r0, r4
 8011fb0:	bd10      	pop	{r4, pc}

08011fb2 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE.part.0>:
 8011fb2:	b570      	push	{r4, r5, r6, lr}
 8011fb4:	4604      	mov	r4, r0
 8011fb6:	f880 10b4 	strb.w	r1, [r0, #180]	@ 0xb4
 8011fba:	3058      	adds	r0, #88	@ 0x58
 8011fbc:	f007 ff40 	bl	8019e40 <_ZNK8touchgfx8Drawable10invalidateEv>
 8011fc0:	6823      	ldr	r3, [r4, #0]
 8011fc2:	4620      	mov	r0, r4
 8011fc4:	f8d3 50b0 	ldr.w	r5, [r3, #176]	@ 0xb0
 8011fc8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8011fcc:	4798      	blx	r3
 8011fce:	462b      	mov	r3, r5
 8011fd0:	4601      	mov	r1, r0
 8011fd2:	4620      	mov	r0, r4
 8011fd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011fd8:	4718      	bx	r3

08011fda <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>:
 8011fda:	f890 30b4 	ldrb.w	r3, [r0, #180]	@ 0xb4
 8011fde:	428b      	cmp	r3, r1
 8011fe0:	d001      	beq.n	8011fe6 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE+0xc>
 8011fe2:	f7ff bfe6 	b.w	8011fb2 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE.part.0>
 8011fe6:	4770      	bx	lr

08011fe8 <_ZN8touchgfx25AbstractDirectionProgressC1Ev>:
 8011fe8:	b510      	push	{r4, lr}
 8011fea:	4604      	mov	r4, r0
 8011fec:	f000 f978 	bl	80122e0 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>
 8011ff0:	4b03      	ldr	r3, [pc, #12]	@ (8012000 <_ZN8touchgfx25AbstractDirectionProgressC1Ev+0x18>)
 8011ff2:	4620      	mov	r0, r4
 8011ff4:	6023      	str	r3, [r4, #0]
 8011ff6:	2300      	movs	r3, #0
 8011ff8:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 8011ffc:	bd10      	pop	{r4, pc}
 8011ffe:	bf00      	nop
 8012000:	08041bec 	.word	0x08041bec

08012004 <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorXEv>:
 8012004:	f9b0 005c 	ldrsh.w	r0, [r0, #92]	@ 0x5c
 8012008:	4770      	bx	lr

0801200a <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorYEv>:
 801200a:	f9b0 005e 	ldrsh.w	r0, [r0, #94]	@ 0x5e
 801200e:	4770      	bx	lr

08012010 <_ZNK8touchgfx25AbstractProgressIndicator25getProgressIndicatorWidthEv>:
 8012010:	f9b0 0060 	ldrsh.w	r0, [r0, #96]	@ 0x60
 8012014:	4770      	bx	lr

08012016 <_ZNK8touchgfx25AbstractProgressIndicator26getProgressIndicatorHeightEv>:
 8012016:	f9b0 0062 	ldrsh.w	r0, [r0, #98]	@ 0x62
 801201a:	4770      	bx	lr

0801201c <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>:
 801201c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801201e:	461e      	mov	r6, r3
 8012020:	6803      	ldr	r3, [r0, #0]
 8012022:	460f      	mov	r7, r1
 8012024:	4604      	mov	r4, r0
 8012026:	4615      	mov	r5, r2
 8012028:	e9c0 1221 	strd	r1, r2, [r0, #132]	@ 0x84
 801202c:	f8d0 108c 	ldr.w	r1, [r0, #140]	@ 0x8c
 8012030:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8012034:	4798      	blx	r3
 8012036:	b93e      	cbnz	r6, 8012048 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x2c>
 8012038:	1bed      	subs	r5, r5, r7
 801203a:	f8a4 5090 	strh.w	r5, [r4, #144]	@ 0x90
 801203e:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8012042:	f8a4 3092 	strh.w	r3, [r4, #146]	@ 0x92
 8012046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012048:	f8a4 6090 	strh.w	r6, [r4, #144]	@ 0x90
 801204c:	e7f7      	b.n	801203e <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x22>

0801204e <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_RtS2_>:
 801204e:	b510      	push	{r4, lr}
 8012050:	f8d0 4084 	ldr.w	r4, [r0, #132]	@ 0x84
 8012054:	600c      	str	r4, [r1, #0]
 8012056:	f8d0 1088 	ldr.w	r1, [r0, #136]	@ 0x88
 801205a:	6011      	str	r1, [r2, #0]
 801205c:	f8b0 2090 	ldrh.w	r2, [r0, #144]	@ 0x90
 8012060:	801a      	strh	r2, [r3, #0]
 8012062:	9b02      	ldr	r3, [sp, #8]
 8012064:	f8b0 2092 	ldrh.w	r2, [r0, #146]	@ 0x92
 8012068:	801a      	strh	r2, [r3, #0]
 801206a:	bd10      	pop	{r4, pc}

0801206c <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_Rt>:
 801206c:	b510      	push	{r4, lr}
 801206e:	f8d0 4084 	ldr.w	r4, [r0, #132]	@ 0x84
 8012072:	600c      	str	r4, [r1, #0]
 8012074:	f8d0 1088 	ldr.w	r1, [r0, #136]	@ 0x88
 8012078:	6011      	str	r1, [r2, #0]
 801207a:	f8b0 2090 	ldrh.w	r2, [r0, #144]	@ 0x90
 801207e:	801a      	strh	r2, [r3, #0]
 8012080:	bd10      	pop	{r4, pc}

08012082 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_>:
 8012082:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 8012086:	600b      	str	r3, [r1, #0]
 8012088:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 801208c:	6013      	str	r3, [r2, #0]
 801208e:	4770      	bx	lr

08012090 <_ZN8touchgfx25AbstractProgressIndicator17setEasingEquationEPFstsstE>:
 8012090:	f8c0 1094 	str.w	r1, [r0, #148]	@ 0x94
 8012094:	4770      	bx	lr

08012096 <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>:
 8012096:	f8d0 008c 	ldr.w	r0, [r0, #140]	@ 0x8c
 801209a:	4770      	bx	lr

0801209c <_ZN8touchgfx25AbstractProgressIndicator8setAlphaEh>:
 801209c:	f880 1054 	strb.w	r1, [r0, #84]	@ 0x54
 80120a0:	4770      	bx	lr

080120a2 <_ZNK8touchgfx25AbstractProgressIndicator8getAlphaEv>:
 80120a2:	f890 0054 	ldrb.w	r0, [r0, #84]	@ 0x54
 80120a6:	4770      	bx	lr

080120a8 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>:
 80120a8:	4770      	bx	lr

080120aa <_ZN8touchgfx25AbstractProgressIndicatorD0Ev>:
 80120aa:	b510      	push	{r4, lr}
 80120ac:	4604      	mov	r4, r0
 80120ae:	21b4      	movs	r1, #180	@ 0xb4
 80120b0:	f018 f906 	bl	802a2c0 <_ZdlPvj>
 80120b4:	4620      	mov	r0, r4
 80120b6:	bd10      	pop	{r4, pc}

080120b8 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit>:
 80120b8:	b570      	push	{r4, r5, r6, lr}
 80120ba:	f8d0 5084 	ldr.w	r5, [r0, #132]	@ 0x84
 80120be:	4604      	mov	r4, r0
 80120c0:	4616      	mov	r6, r2
 80120c2:	428d      	cmp	r5, r1
 80120c4:	bfb8      	it	lt
 80120c6:	460d      	movlt	r5, r1
 80120c8:	f8d0 1088 	ldr.w	r1, [r0, #136]	@ 0x88
 80120cc:	428d      	cmp	r5, r1
 80120ce:	bfa8      	it	ge
 80120d0:	460d      	movge	r5, r1
 80120d2:	b99a      	cbnz	r2, 80120fc <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x44>
 80120d4:	6803      	ldr	r3, [r0, #0]
 80120d6:	4629      	mov	r1, r5
 80120d8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80120dc:	4798      	blx	r3
 80120de:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 80120e2:	b368      	cbz	r0, 8012140 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x88>
 80120e4:	6803      	ldr	r3, [r0, #0]
 80120e6:	68db      	ldr	r3, [r3, #12]
 80120e8:	4798      	blx	r3
 80120ea:	b348      	cbz	r0, 8012140 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x88>
 80120ec:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 80120f0:	4621      	mov	r1, r4
 80120f2:	6803      	ldr	r3, [r0, #0]
 80120f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80120f8:	689b      	ldr	r3, [r3, #8]
 80120fa:	4718      	bx	r3
 80120fc:	f8d0 30a4 	ldr.w	r3, [r0, #164]	@ 0xa4
 8012100:	2b00      	cmp	r3, #0
 8012102:	dd08      	ble.n	8012116 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x5e>
 8012104:	f006 fdfc 	bl	8018d00 <_ZN8touchgfx11Application11getInstanceEv>
 8012108:	4621      	mov	r1, r4
 801210a:	3004      	adds	r0, #4
 801210c:	f006 fe1d 	bl	8018d4a <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
 8012110:	2300      	movs	r3, #0
 8012112:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
 8012116:	6823      	ldr	r3, [r4, #0]
 8012118:	4620      	mov	r0, r4
 801211a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 801211e:	4798      	blx	r3
 8012120:	2300      	movs	r3, #0
 8012122:	f8c4 60a4 	str.w	r6, [r4, #164]	@ 0xa4
 8012126:	f8c4 30a8 	str.w	r3, [r4, #168]	@ 0xa8
 801212a:	e9c4 0527 	strd	r0, r5, [r4, #156]	@ 0x9c
 801212e:	f006 fde7 	bl	8018d00 <_ZN8touchgfx11Application11getInstanceEv>
 8012132:	4621      	mov	r1, r4
 8012134:	3004      	adds	r0, #4
 8012136:	f006 feb1 	bl	8018e9c <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>
 801213a:	2301      	movs	r3, #1
 801213c:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
 8012140:	bd70      	pop	{r4, r5, r6, pc}

08012142 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>:
 8012142:	b510      	push	{r4, lr}
 8012144:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 8012148:	4604      	mov	r4, r0
 801214a:	4299      	cmp	r1, r3
 801214c:	bfb8      	it	lt
 801214e:	4619      	movlt	r1, r3
 8012150:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 8012154:	4299      	cmp	r1, r3
 8012156:	bfa8      	it	ge
 8012158:	4619      	movge	r1, r3
 801215a:	f8d0 308c 	ldr.w	r3, [r0, #140]	@ 0x8c
 801215e:	428b      	cmp	r3, r1
 8012160:	d010      	beq.n	8012184 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 8012162:	f8c0 108c 	str.w	r1, [r0, #140]	@ 0x8c
 8012166:	f8d0 00ac 	ldr.w	r0, [r0, #172]	@ 0xac
 801216a:	b158      	cbz	r0, 8012184 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 801216c:	6803      	ldr	r3, [r0, #0]
 801216e:	68db      	ldr	r3, [r3, #12]
 8012170:	4798      	blx	r3
 8012172:	b138      	cbz	r0, 8012184 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 8012174:	f8d4 00ac 	ldr.w	r0, [r4, #172]	@ 0xac
 8012178:	4621      	mov	r1, r4
 801217a:	6803      	ldr	r3, [r0, #0]
 801217c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012180:	689b      	ldr	r3, [r3, #8]
 8012182:	4718      	bx	r3
 8012184:	bd10      	pop	{r4, pc}

08012186 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>:
 8012186:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012188:	4604      	mov	r4, r0
 801218a:	460d      	mov	r5, r1
 801218c:	b1a9      	cbz	r1, 80121ba <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt+0x34>
 801218e:	f8b0 6092 	ldrh.w	r6, [r0, #146]	@ 0x92
 8012192:	ab01      	add	r3, sp, #4
 8012194:	f8b4 1090 	ldrh.w	r1, [r4, #144]	@ 0x90
 8012198:	f8d4 708c 	ldr.w	r7, [r4, #140]	@ 0x8c
 801219c:	1b89      	subs	r1, r1, r6
 801219e:	e9d0 0221 	ldrd	r0, r2, [r0, #132]	@ 0x84
 80121a2:	1a12      	subs	r2, r2, r0
 80121a4:	1a38      	subs	r0, r7, r0
 80121a6:	f007 fff7 	bl	801a198 <_ZN8touchgfx6muldivElllRl>
 80121aa:	4629      	mov	r1, r5
 80121ac:	ab01      	add	r3, sp, #4
 80121ae:	f8b4 2090 	ldrh.w	r2, [r4, #144]	@ 0x90
 80121b2:	4430      	add	r0, r6
 80121b4:	f007 fff0 	bl	801a198 <_ZN8touchgfx6muldivElllRl>
 80121b8:	b285      	uxth	r5, r0
 80121ba:	4628      	mov	r0, r5
 80121bc:	b003      	add	sp, #12
 80121be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080121c0 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv>:
 80121c0:	b570      	push	{r4, r5, r6, lr}
 80121c2:	f890 3098 	ldrb.w	r3, [r0, #152]	@ 0x98
 80121c6:	4604      	mov	r4, r0
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	d035      	beq.n	8012238 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x78>
 80121cc:	f8d0 00a8 	ldr.w	r0, [r0, #168]	@ 0xa8
 80121d0:	2100      	movs	r1, #0
 80121d2:	f8d4 5094 	ldr.w	r5, [r4, #148]	@ 0x94
 80121d6:	3001      	adds	r0, #1
 80121d8:	e9d4 3227 	ldrd	r3, r2, [r4, #156]	@ 0x9c
 80121dc:	f8c4 00a8 	str.w	r0, [r4, #168]	@ 0xa8
 80121e0:	b280      	uxth	r0, r0
 80121e2:	1ad2      	subs	r2, r2, r3
 80121e4:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 80121e8:	b212      	sxth	r2, r2
 80121ea:	47a8      	blx	r5
 80121ec:	f8d4 109c 	ldr.w	r1, [r4, #156]	@ 0x9c
 80121f0:	6823      	ldr	r3, [r4, #0]
 80121f2:	4401      	add	r1, r0
 80121f4:	4620      	mov	r0, r4
 80121f6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80121fa:	4798      	blx	r3
 80121fc:	e9d4 3229 	ldrd	r3, r2, [r4, #164]	@ 0xa4
 8012200:	429a      	cmp	r2, r3
 8012202:	db19      	blt.n	8012238 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x78>
 8012204:	2500      	movs	r5, #0
 8012206:	e9c4 5529 	strd	r5, r5, [r4, #164]	@ 0xa4
 801220a:	f006 fd79 	bl	8018d00 <_ZN8touchgfx11Application11getInstanceEv>
 801220e:	4621      	mov	r1, r4
 8012210:	3004      	adds	r0, #4
 8012212:	f006 fd9a 	bl	8018d4a <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
 8012216:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 801221a:	f884 5098 	strb.w	r5, [r4, #152]	@ 0x98
 801221e:	b158      	cbz	r0, 8012238 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x78>
 8012220:	6803      	ldr	r3, [r0, #0]
 8012222:	68db      	ldr	r3, [r3, #12]
 8012224:	4798      	blx	r3
 8012226:	b138      	cbz	r0, 8012238 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x78>
 8012228:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 801222c:	4621      	mov	r1, r4
 801222e:	6803      	ldr	r3, [r0, #0]
 8012230:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012234:	689b      	ldr	r3, [r3, #8]
 8012236:	4718      	bx	r3
 8012238:	bd70      	pop	{r4, r5, r6, pc}
	...

0801223c <_ZN8touchgfx8DrawableC1Ev>:
 801223c:	4a0a      	ldr	r2, [pc, #40]	@ (8012268 <_ZN8touchgfx8DrawableC1Ev+0x2c>)
 801223e:	6002      	str	r2, [r0, #0]
 8012240:	2200      	movs	r2, #0
 8012242:	8082      	strh	r2, [r0, #4]
 8012244:	80c2      	strh	r2, [r0, #6]
 8012246:	8102      	strh	r2, [r0, #8]
 8012248:	8142      	strh	r2, [r0, #10]
 801224a:	8182      	strh	r2, [r0, #12]
 801224c:	81c2      	strh	r2, [r0, #14]
 801224e:	8202      	strh	r2, [r0, #16]
 8012250:	8242      	strh	r2, [r0, #18]
 8012252:	61c2      	str	r2, [r0, #28]
 8012254:	8402      	strh	r2, [r0, #32]
 8012256:	8442      	strh	r2, [r0, #34]	@ 0x22
 8012258:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
 801225c:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8012260:	2201      	movs	r2, #1
 8012262:	f880 2025 	strb.w	r2, [r0, #37]	@ 0x25
 8012266:	4770      	bx	lr
 8012268:	08042720 	.word	0x08042720

0801226c <_ZN8touchgfx8Drawable14setWidthHeightEss>:
 801226c:	b570      	push	{r4, r5, r6, lr}
 801226e:	6803      	ldr	r3, [r0, #0]
 8012270:	4604      	mov	r4, r0
 8012272:	4615      	mov	r5, r2
 8012274:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012276:	4798      	blx	r3
 8012278:	6823      	ldr	r3, [r4, #0]
 801227a:	4629      	mov	r1, r5
 801227c:	4620      	mov	r0, r4
 801227e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012280:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012284:	4718      	bx	r3

08012286 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>:
 8012286:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801228a:	4604      	mov	r4, r0
 801228c:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
 8012290:	4698      	mov	r8, r3
 8012292:	460e      	mov	r6, r1
 8012294:	4615      	mov	r5, r2
 8012296:	f8a4 105c 	strh.w	r1, [r4, #92]	@ 0x5c
 801229a:	f8a4 205e 	strh.w	r2, [r4, #94]	@ 0x5e
 801229e:	4619      	mov	r1, r3
 80122a0:	463a      	mov	r2, r7
 80122a2:	3058      	adds	r0, #88	@ 0x58
 80122a4:	f7ff ffe2 	bl	801226c <_ZN8touchgfx8Drawable14setWidthHeightEss>
 80122a8:	4446      	add	r6, r8
 80122aa:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80122ae:	443d      	add	r5, r7
 80122b0:	42b3      	cmp	r3, r6
 80122b2:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80122b6:	bfb8      	it	lt
 80122b8:	8126      	strhlt	r6, [r4, #8]
 80122ba:	42ab      	cmp	r3, r5
 80122bc:	bfb8      	it	lt
 80122be:	8165      	strhlt	r5, [r4, #10]
 80122c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080122c4 <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>:
 80122c4:	b510      	push	{r4, lr}
 80122c6:	4604      	mov	r4, r0
 80122c8:	302c      	adds	r0, #44	@ 0x2c
 80122ca:	f003 fd81 	bl	8015dd0 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80122ce:	f9b4 2036 	ldrsh.w	r2, [r4, #54]	@ 0x36
 80122d2:	4620      	mov	r0, r4
 80122d4:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	@ 0x34
 80122d8:	f7ff ffc8 	bl	801226c <_ZN8touchgfx8Drawable14setWidthHeightEss>
 80122dc:	bd10      	pop	{r4, pc}
	...

080122e0 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>:
 80122e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80122e2:	4604      	mov	r4, r0
 80122e4:	2500      	movs	r5, #0
 80122e6:	f7ff ffa9 	bl	801223c <_ZN8touchgfx8DrawableC1Ev>
 80122ea:	4b24      	ldr	r3, [pc, #144]	@ (801237c <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x9c>)
 80122ec:	4626      	mov	r6, r4
 80122ee:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 80122f2:	2226      	movs	r2, #38	@ 0x26
 80122f4:	4629      	mov	r1, r5
 80122f6:	62a5      	str	r5, [r4, #40]	@ 0x28
 80122f8:	f846 3b2c 	str.w	r3, [r6], #44
 80122fc:	4630      	mov	r0, r6
 80122fe:	f8ad 7004 	strh.w	r7, [sp, #4]
 8012302:	f019 f90d 	bl	802b520 <memset>
 8012306:	4630      	mov	r0, r6
 8012308:	f7ff ff98 	bl	801223c <_ZN8touchgfx8DrawableC1Ev>
 801230c:	a902      	add	r1, sp, #8
 801230e:	4b1c      	ldr	r3, [pc, #112]	@ (8012380 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa0>)
 8012310:	4630      	mov	r0, r6
 8012312:	f884 7054 	strb.w	r7, [r4, #84]	@ 0x54
 8012316:	f104 0758 	add.w	r7, r4, #88	@ 0x58
 801231a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801231c:	f831 3d04 	ldrh.w	r3, [r1, #-4]!
 8012320:	f8a4 3052 	strh.w	r3, [r4, #82]	@ 0x52
 8012324:	f003 fd54 	bl	8015dd0 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8012328:	4638      	mov	r0, r7
 801232a:	f7ff ff87 	bl	801223c <_ZN8touchgfx8DrawableC1Ev>
 801232e:	4b15      	ldr	r3, [pc, #84]	@ (8012384 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa4>)
 8012330:	4629      	mov	r1, r5
 8012332:	4630      	mov	r0, r6
 8012334:	65a3      	str	r3, [r4, #88]	@ 0x58
 8012336:	2364      	movs	r3, #100	@ 0x64
 8012338:	f884 5098 	strb.w	r5, [r4, #152]	@ 0x98
 801233c:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
 8012340:	e9c4 3522 	strd	r3, r5, [r4, #136]	@ 0x88
 8012344:	4b10      	ldr	r3, [pc, #64]	@ (8012388 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa8>)
 8012346:	e9c4 5520 	strd	r5, r5, [r4, #128]	@ 0x80
 801234a:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
 801234e:	e9c4 5527 	strd	r5, r5, [r4, #156]	@ 0x9c
 8012352:	e9c4 5529 	strd	r5, r5, [r4, #164]	@ 0xa4
 8012356:	e9c4 552b 	strd	r5, r5, [r4, #172]	@ 0xac
 801235a:	f7f2 fe8d 	bl	8005078 <_ZN8touchgfx8Drawable4setXEs>
 801235e:	4629      	mov	r1, r5
 8012360:	4630      	mov	r0, r6
 8012362:	f7f2 fe8b 	bl	800507c <_ZN8touchgfx8Drawable4setYEs>
 8012366:	4631      	mov	r1, r6
 8012368:	4620      	mov	r0, r4
 801236a:	f000 f819 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801236e:	4620      	mov	r0, r4
 8012370:	4639      	mov	r1, r7
 8012372:	f000 f815 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8012376:	4620      	mov	r0, r4
 8012378:	b003      	add	sp, #12
 801237a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801237c:	08041cc8 	.word	0x08041cc8
 8012380:	08042650 	.word	0x08042650
 8012384:	08041d9c 	.word	0x08041d9c
 8012388:	0801a891 	.word	0x0801a891

0801238c <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 801238c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 801238e:	2000      	movs	r0, #0
 8012390:	b12b      	cbz	r3, 801239e <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8012392:	b920      	cbnz	r0, 801239e <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8012394:	1a5a      	subs	r2, r3, r1
 8012396:	699b      	ldr	r3, [r3, #24]
 8012398:	4250      	negs	r0, r2
 801239a:	4150      	adcs	r0, r2
 801239c:	e7f8      	b.n	8012390 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 801239e:	4770      	bx	lr

080123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 80123a0:	2300      	movs	r3, #0
 80123a2:	6148      	str	r0, [r1, #20]
 80123a4:	618b      	str	r3, [r1, #24]
 80123a6:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80123a8:	b913      	cbnz	r3, 80123b0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 80123aa:	6281      	str	r1, [r0, #40]	@ 0x28
 80123ac:	4770      	bx	lr
 80123ae:	4613      	mov	r3, r2
 80123b0:	699a      	ldr	r2, [r3, #24]
 80123b2:	2a00      	cmp	r2, #0
 80123b4:	d1fb      	bne.n	80123ae <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 80123b6:	6199      	str	r1, [r3, #24]
 80123b8:	4770      	bx	lr

080123ba <_ZN8touchgfx9Container9removeAllEv>:
 80123ba:	2200      	movs	r2, #0
 80123bc:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80123be:	b123      	cbz	r3, 80123ca <_ZN8touchgfx9Container9removeAllEv+0x10>
 80123c0:	6999      	ldr	r1, [r3, #24]
 80123c2:	6281      	str	r1, [r0, #40]	@ 0x28
 80123c4:	e9c3 2205 	strd	r2, r2, [r3, #20]
 80123c8:	e7f8      	b.n	80123bc <_ZN8touchgfx9Container9removeAllEv+0x2>
 80123ca:	4770      	bx	lr

080123cc <_ZN8touchgfx9Container6unlinkEv>:
 80123cc:	2300      	movs	r3, #0
 80123ce:	6283      	str	r3, [r0, #40]	@ 0x28
 80123d0:	4770      	bx	lr

080123d2 <_ZNK8touchgfx9Container12getSolidRectEv>:
 80123d2:	2200      	movs	r2, #0
 80123d4:	8002      	strh	r2, [r0, #0]
 80123d6:	8042      	strh	r2, [r0, #2]
 80123d8:	8082      	strh	r2, [r0, #4]
 80123da:	80c2      	strh	r2, [r0, #6]
 80123dc:	4770      	bx	lr

080123de <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 80123de:	b570      	push	{r4, r5, r6, lr}
 80123e0:	460d      	mov	r5, r1
 80123e2:	4616      	mov	r6, r2
 80123e4:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 80123e6:	b13c      	cbz	r4, 80123f8 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 80123e8:	6823      	ldr	r3, [r4, #0]
 80123ea:	4620      	mov	r0, r4
 80123ec:	4632      	mov	r2, r6
 80123ee:	4629      	mov	r1, r5
 80123f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80123f2:	4798      	blx	r3
 80123f4:	69a4      	ldr	r4, [r4, #24]
 80123f6:	e7f6      	b.n	80123e6 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 80123f8:	bd70      	pop	{r4, r5, r6, pc}

080123fa <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 80123fa:	b538      	push	{r3, r4, r5, lr}
 80123fc:	460d      	mov	r5, r1
 80123fe:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8012400:	b134      	cbz	r4, 8012410 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8012402:	682b      	ldr	r3, [r5, #0]
 8012404:	4621      	mov	r1, r4
 8012406:	4628      	mov	r0, r5
 8012408:	689b      	ldr	r3, [r3, #8]
 801240a:	4798      	blx	r3
 801240c:	69a4      	ldr	r4, [r4, #24]
 801240e:	e7f7      	b.n	8012400 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8012410:	bd38      	pop	{r3, r4, r5, pc}

08012412 <_ZN8touchgfx9ContainerD1Ev>:
 8012412:	4770      	bx	lr

08012414 <_ZN8touchgfx9ContainerD0Ev>:
 8012414:	b510      	push	{r4, lr}
 8012416:	4604      	mov	r4, r0
 8012418:	212c      	movs	r1, #44	@ 0x2c
 801241a:	f017 ff51 	bl	802a2c0 <_ZdlPvj>
 801241e:	4620      	mov	r0, r4
 8012420:	bd10      	pop	{r4, pc}

08012422 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8012422:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8012424:	b19b      	cbz	r3, 801244e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8012426:	428b      	cmp	r3, r1
 8012428:	d109      	bne.n	801243e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 801242a:	699a      	ldr	r2, [r3, #24]
 801242c:	2100      	movs	r1, #0
 801242e:	6159      	str	r1, [r3, #20]
 8012430:	6282      	str	r2, [r0, #40]	@ 0x28
 8012432:	b902      	cbnz	r2, 8012436 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8012434:	4770      	bx	lr
 8012436:	6199      	str	r1, [r3, #24]
 8012438:	4770      	bx	lr
 801243a:	4613      	mov	r3, r2
 801243c:	b13a      	cbz	r2, 801244e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 801243e:	699a      	ldr	r2, [r3, #24]
 8012440:	428a      	cmp	r2, r1
 8012442:	d1fa      	bne.n	801243a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8012444:	698a      	ldr	r2, [r1, #24]
 8012446:	619a      	str	r2, [r3, #24]
 8012448:	2300      	movs	r3, #0
 801244a:	e9c1 3305 	strd	r3, r3, [r1, #20]
 801244e:	4770      	bx	lr

08012450 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8012450:	b410      	push	{r4}
 8012452:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8012454:	4604      	mov	r4, r0
 8012456:	b92b      	cbnz	r3, 8012464 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8012458:	6803      	ldr	r3, [r0, #0]
 801245a:	4611      	mov	r1, r2
 801245c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012460:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012462:	4718      	bx	r3
 8012464:	b941      	cbnz	r1, 8012478 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8012466:	6193      	str	r3, [r2, #24]
 8012468:	6282      	str	r2, [r0, #40]	@ 0x28
 801246a:	6154      	str	r4, [r2, #20]
 801246c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012470:	4770      	bx	lr
 8012472:	4603      	mov	r3, r0
 8012474:	2800      	cmp	r0, #0
 8012476:	d0f9      	beq.n	801246c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8012478:	4299      	cmp	r1, r3
 801247a:	6998      	ldr	r0, [r3, #24]
 801247c:	d1f9      	bne.n	8012472 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 801247e:	6190      	str	r0, [r2, #24]
 8012480:	618a      	str	r2, [r1, #24]
 8012482:	e7f2      	b.n	801246a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

08012484 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8012484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012488:	461f      	mov	r7, r3
 801248a:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 801248e:	460d      	mov	r5, r1
 8012490:	4616      	mov	r6, r2
 8012492:	b103      	cbz	r3, 8012496 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8012494:	6038      	str	r0, [r7, #0]
 8012496:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8012498:	b314      	cbz	r4, 80124e0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 801249a:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 801249e:	b1eb      	cbz	r3, 80124dc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80124a0:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80124a4:	428d      	cmp	r5, r1
 80124a6:	db19      	blt.n	80124dc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80124a8:	b289      	uxth	r1, r1
 80124aa:	8923      	ldrh	r3, [r4, #8]
 80124ac:	440b      	add	r3, r1
 80124ae:	b21b      	sxth	r3, r3
 80124b0:	429d      	cmp	r5, r3
 80124b2:	da13      	bge.n	80124dc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80124b4:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80124b8:	4296      	cmp	r6, r2
 80124ba:	db0f      	blt.n	80124dc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80124bc:	b292      	uxth	r2, r2
 80124be:	8963      	ldrh	r3, [r4, #10]
 80124c0:	4413      	add	r3, r2
 80124c2:	b21b      	sxth	r3, r3
 80124c4:	429e      	cmp	r6, r3
 80124c6:	da09      	bge.n	80124dc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80124c8:	6823      	ldr	r3, [r4, #0]
 80124ca:	1ab2      	subs	r2, r6, r2
 80124cc:	1a69      	subs	r1, r5, r1
 80124ce:	4620      	mov	r0, r4
 80124d0:	f8d3 8024 	ldr.w	r8, [r3, #36]	@ 0x24
 80124d4:	b212      	sxth	r2, r2
 80124d6:	463b      	mov	r3, r7
 80124d8:	b209      	sxth	r1, r1
 80124da:	47c0      	blx	r8
 80124dc:	69a4      	ldr	r4, [r4, #24]
 80124de:	e7db      	b.n	8012498 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 80124e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080124e4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 80124e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124e8:	4c6d      	ldr	r4, [pc, #436]	@ (80126a0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 80124ea:	b0a1      	sub	sp, #132	@ 0x84
 80124ec:	4606      	mov	r6, r0
 80124ee:	6824      	ldr	r4, [r4, #0]
 80124f0:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 80124f2:	f894 9049 	ldrb.w	r9, [r4, #73]	@ 0x49
 80124f6:	2400      	movs	r4, #0
 80124f8:	9303      	str	r3, [sp, #12]
 80124fa:	802c      	strh	r4, [r5, #0]
 80124fc:	9d2b      	ldr	r5, [sp, #172]	@ 0xac
 80124fe:	802c      	strh	r4, [r5, #0]
 8012500:	601c      	str	r4, [r3, #0]
 8012502:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8012506:	f7ff ffbd 	bl	8012484 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801250a:	f1b9 0f03 	cmp.w	r9, #3
 801250e:	f340 80c1 	ble.w	8012694 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 8012512:	4631      	mov	r1, r6
 8012514:	a80c      	add	r0, sp, #48	@ 0x30
 8012516:	f007 fd2f 	bl	8019f78 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801251a:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 801251e:	9306      	str	r3, [sp, #24]
 8012520:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8012524:	9307      	str	r3, [sp, #28]
 8012526:	9b03      	ldr	r3, [sp, #12]
 8012528:	f8d3 a000 	ldr.w	sl, [r3]
 801252c:	f1ba 0f00 	cmp.w	sl, #0
 8012530:	f000 80b3 	beq.w	801269a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 8012534:	4651      	mov	r1, sl
 8012536:	a810      	add	r0, sp, #64	@ 0x40
 8012538:	f007 fd1e 	bl	8019f78 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801253c:	2002      	movs	r0, #2
 801253e:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	@ 0x44
 8012542:	9b01      	ldr	r3, [sp, #4]
 8012544:	9a06      	ldr	r2, [sp, #24]
 8012546:	fb91 f1f0 	sdiv	r1, r1, r0
 801254a:	189d      	adds	r5, r3, r2
 801254c:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	@ 0x40
 8012550:	9a07      	ldr	r2, [sp, #28]
 8012552:	4419      	add	r1, r3
 8012554:	9b02      	ldr	r3, [sp, #8]
 8012556:	4413      	add	r3, r2
 8012558:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	@ 0x46
 801255c:	1a6d      	subs	r5, r5, r1
 801255e:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	@ 0x42
 8012562:	fb92 f2f0 	sdiv	r2, r2, r0
 8012566:	440a      	add	r2, r1
 8012568:	1a9b      	subs	r3, r3, r2
 801256a:	435b      	muls	r3, r3
 801256c:	fb05 3505 	mla	r5, r5, r5, r3
 8012570:	4f4c      	ldr	r7, [pc, #304]	@ (80126a4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 8012572:	ac10      	add	r4, sp, #64	@ 0x40
 8012574:	f1b9 0f0c 	cmp.w	r9, #12
 8012578:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801257a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801257c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801257e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012580:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8012582:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012584:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8012588:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801258c:	f04f 0303 	mov.w	r3, #3
 8012590:	bfd8      	it	le
 8012592:	f109 32ff 	addle.w	r2, r9, #4294967295
 8012596:	f04f 0400 	mov.w	r4, #0
 801259a:	f8cd 9000 	str.w	r9, [sp]
 801259e:	bfcc      	ite	gt
 80125a0:	4698      	movgt	r8, r3
 80125a2:	fb92 f8f3 	sdivle	r8, r2, r3
 80125a6:	1c63      	adds	r3, r4, #1
 80125a8:	aa10      	add	r2, sp, #64	@ 0x40
 80125aa:	f004 0401 	and.w	r4, r4, #1
 80125ae:	f04f 0b00 	mov.w	fp, #0
 80125b2:	9308      	str	r3, [sp, #32]
 80125b4:	9b00      	ldr	r3, [sp, #0]
 80125b6:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 80125ba:	fb93 f3f8 	sdiv	r3, r3, r8
 80125be:	3404      	adds	r4, #4
 80125c0:	b29b      	uxth	r3, r3
 80125c2:	9304      	str	r3, [sp, #16]
 80125c4:	9a04      	ldr	r2, [sp, #16]
 80125c6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80125ca:	fb13 f302 	smulbb	r3, r3, r2
 80125ce:	9a01      	ldr	r2, [sp, #4]
 80125d0:	b29b      	uxth	r3, r3
 80125d2:	1899      	adds	r1, r3, r2
 80125d4:	9305      	str	r3, [sp, #20]
 80125d6:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 80125da:	b209      	sxth	r1, r1
 80125dc:	4299      	cmp	r1, r3
 80125de:	db4d      	blt.n	801267c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80125e0:	8932      	ldrh	r2, [r6, #8]
 80125e2:	4413      	add	r3, r2
 80125e4:	b21b      	sxth	r3, r3
 80125e6:	4299      	cmp	r1, r3
 80125e8:	da48      	bge.n	801267c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80125ea:	9b04      	ldr	r3, [sp, #16]
 80125ec:	6827      	ldr	r7, [r4, #0]
 80125ee:	fb17 f703 	smulbb	r7, r7, r3
 80125f2:	9b02      	ldr	r3, [sp, #8]
 80125f4:	b2bf      	uxth	r7, r7
 80125f6:	18fa      	adds	r2, r7, r3
 80125f8:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 80125fc:	b212      	sxth	r2, r2
 80125fe:	429a      	cmp	r2, r3
 8012600:	db3c      	blt.n	801267c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8012602:	8970      	ldrh	r0, [r6, #10]
 8012604:	4403      	add	r3, r0
 8012606:	b21b      	sxth	r3, r3
 8012608:	429a      	cmp	r2, r3
 801260a:	da37      	bge.n	801267c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 801260c:	2300      	movs	r3, #0
 801260e:	4630      	mov	r0, r6
 8012610:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012612:	ab0b      	add	r3, sp, #44	@ 0x2c
 8012614:	f7ff ff36 	bl	8012484 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8012618:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801261a:	b37a      	cbz	r2, 801267c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 801261c:	4552      	cmp	r2, sl
 801261e:	d02d      	beq.n	801267c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8012620:	4611      	mov	r1, r2
 8012622:	a80e      	add	r0, sp, #56	@ 0x38
 8012624:	9209      	str	r2, [sp, #36]	@ 0x24
 8012626:	f007 fca7 	bl	8019f78 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801262a:	f04f 0e02 	mov.w	lr, #2
 801262e:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	@ 0x3c
 8012632:	9a06      	ldr	r2, [sp, #24]
 8012634:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	@ 0x38
 8012638:	9b01      	ldr	r3, [sp, #4]
 801263a:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	@ 0x3e
 801263e:	4413      	add	r3, r2
 8012640:	9a07      	ldr	r2, [sp, #28]
 8012642:	fb91 f1fe 	sdiv	r1, r1, lr
 8012646:	fb9c fcfe 	sdiv	ip, ip, lr
 801264a:	4401      	add	r1, r0
 801264c:	1a58      	subs	r0, r3, r1
 801264e:	9b02      	ldr	r3, [sp, #8]
 8012650:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	@ 0x3a
 8012654:	4413      	add	r3, r2
 8012656:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012658:	448c      	add	ip, r1
 801265a:	eba3 030c 	sub.w	r3, r3, ip
 801265e:	435b      	muls	r3, r3
 8012660:	fb00 3300 	mla	r3, r0, r0, r3
 8012664:	42ab      	cmp	r3, r5
 8012666:	d208      	bcs.n	801267a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 8012668:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801266a:	461d      	mov	r5, r3
 801266c:	9803      	ldr	r0, [sp, #12]
 801266e:	6001      	str	r1, [r0, #0]
 8012670:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 8012672:	9805      	ldr	r0, [sp, #20]
 8012674:	8008      	strh	r0, [r1, #0]
 8012676:	992b      	ldr	r1, [sp, #172]	@ 0xac
 8012678:	800f      	strh	r7, [r1, #0]
 801267a:	4692      	mov	sl, r2
 801267c:	f10b 0b01 	add.w	fp, fp, #1
 8012680:	3408      	adds	r4, #8
 8012682:	f1bb 0f04 	cmp.w	fp, #4
 8012686:	d19d      	bne.n	80125c4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 8012688:	9b00      	ldr	r3, [sp, #0]
 801268a:	9c08      	ldr	r4, [sp, #32]
 801268c:	444b      	add	r3, r9
 801268e:	4544      	cmp	r4, r8
 8012690:	9300      	str	r3, [sp, #0]
 8012692:	d188      	bne.n	80125a6 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 8012694:	b021      	add	sp, #132	@ 0x84
 8012696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801269a:	f04f 35ff 	mov.w	r5, #4294967295
 801269e:	e767      	b.n	8012570 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 80126a0:	20029ed8 	.word	0x20029ed8
 80126a4:	0802d088 	.word	0x0802d088

080126a8 <_ZN8touchgfx4RectaNERKS0_>:
 80126a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80126ac:	f9b1 7000 	ldrsh.w	r7, [r1]
 80126b0:	888c      	ldrh	r4, [r1, #4]
 80126b2:	f9b0 9000 	ldrsh.w	r9, [r0]
 80126b6:	443c      	add	r4, r7
 80126b8:	b2a4      	uxth	r4, r4
 80126ba:	fa0f f884 	sxth.w	r8, r4
 80126be:	45c1      	cmp	r9, r8
 80126c0:	da2f      	bge.n	8012722 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80126c2:	8882      	ldrh	r2, [r0, #4]
 80126c4:	444a      	add	r2, r9
 80126c6:	b292      	uxth	r2, r2
 80126c8:	fa0f fe82 	sxth.w	lr, r2
 80126cc:	4577      	cmp	r7, lr
 80126ce:	da28      	bge.n	8012722 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80126d0:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 80126d4:	88cb      	ldrh	r3, [r1, #6]
 80126d6:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80126da:	442b      	add	r3, r5
 80126dc:	b21b      	sxth	r3, r3
 80126de:	429e      	cmp	r6, r3
 80126e0:	da1f      	bge.n	8012722 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80126e2:	88c3      	ldrh	r3, [r0, #6]
 80126e4:	4433      	add	r3, r6
 80126e6:	b29b      	uxth	r3, r3
 80126e8:	fa0f fc83 	sxth.w	ip, r3
 80126ec:	4565      	cmp	r5, ip
 80126ee:	da18      	bge.n	8012722 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80126f0:	454f      	cmp	r7, r9
 80126f2:	bfb8      	it	lt
 80126f4:	464f      	movlt	r7, r9
 80126f6:	42b5      	cmp	r5, r6
 80126f8:	bfb8      	it	lt
 80126fa:	4635      	movlt	r5, r6
 80126fc:	45f0      	cmp	r8, lr
 80126fe:	bfd8      	it	le
 8012700:	4622      	movle	r2, r4
 8012702:	1bd2      	subs	r2, r2, r7
 8012704:	8082      	strh	r2, [r0, #4]
 8012706:	884a      	ldrh	r2, [r1, #2]
 8012708:	88c9      	ldrh	r1, [r1, #6]
 801270a:	8007      	strh	r7, [r0, #0]
 801270c:	440a      	add	r2, r1
 801270e:	8045      	strh	r5, [r0, #2]
 8012710:	b292      	uxth	r2, r2
 8012712:	b211      	sxth	r1, r2
 8012714:	458c      	cmp	ip, r1
 8012716:	bfa8      	it	ge
 8012718:	4613      	movge	r3, r2
 801271a:	1b5b      	subs	r3, r3, r5
 801271c:	80c3      	strh	r3, [r0, #6]
 801271e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012722:	2300      	movs	r3, #0
 8012724:	8003      	strh	r3, [r0, #0]
 8012726:	8043      	strh	r3, [r0, #2]
 8012728:	8083      	strh	r3, [r0, #4]
 801272a:	80c3      	strh	r3, [r0, #6]
 801272c:	e7f7      	b.n	801271e <_ZN8touchgfx4RectaNERKS0_+0x76>

0801272e <_ZNK8touchgfx4Rect7isEmptyEv>:
 801272e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8012732:	2b00      	cmp	r3, #0
 8012734:	dd06      	ble.n	8012744 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8012736:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 801273a:	2800      	cmp	r0, #0
 801273c:	bfcc      	ite	gt
 801273e:	2000      	movgt	r0, #0
 8012740:	2001      	movle	r0, #1
 8012742:	4770      	bx	lr
 8012744:	2001      	movs	r0, #1
 8012746:	4770      	bx	lr

08012748 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8012748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801274c:	2300      	movs	r3, #0
 801274e:	4604      	mov	r4, r0
 8012750:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 8012752:	8003      	strh	r3, [r0, #0]
 8012754:	8043      	strh	r3, [r0, #2]
 8012756:	8083      	strh	r3, [r0, #4]
 8012758:	80c3      	strh	r3, [r0, #6]
 801275a:	2d00      	cmp	r5, #0
 801275c:	d040      	beq.n	80127e0 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 801275e:	1d28      	adds	r0, r5, #4
 8012760:	f7ff ffe5 	bl	801272e <_ZNK8touchgfx4Rect7isEmptyEv>
 8012764:	b988      	cbnz	r0, 801278a <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8012766:	4620      	mov	r0, r4
 8012768:	f7ff ffe1 	bl	801272e <_ZNK8touchgfx4Rect7isEmptyEv>
 801276c:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8012770:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8012774:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8012778:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 801277c:	b138      	cbz	r0, 801278e <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 801277e:	8022      	strh	r2, [r4, #0]
 8012780:	8063      	strh	r3, [r4, #2]
 8012782:	f8a4 e004 	strh.w	lr, [r4, #4]
 8012786:	f8a4 c006 	strh.w	ip, [r4, #6]
 801278a:	69ad      	ldr	r5, [r5, #24]
 801278c:	e7e5      	b.n	801275a <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 801278e:	f9b4 0000 	ldrsh.w	r0, [r4]
 8012792:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8012796:	4290      	cmp	r0, r2
 8012798:	4607      	mov	r7, r0
 801279a:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 801279e:	460e      	mov	r6, r1
 80127a0:	bfa8      	it	ge
 80127a2:	4617      	movge	r7, r2
 80127a4:	4299      	cmp	r1, r3
 80127a6:	4472      	add	r2, lr
 80127a8:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 80127ac:	bfa8      	it	ge
 80127ae:	461e      	movge	r6, r3
 80127b0:	4440      	add	r0, r8
 80127b2:	4471      	add	r1, lr
 80127b4:	4463      	add	r3, ip
 80127b6:	b200      	sxth	r0, r0
 80127b8:	8027      	strh	r7, [r4, #0]
 80127ba:	b212      	sxth	r2, r2
 80127bc:	8066      	strh	r6, [r4, #2]
 80127be:	b209      	sxth	r1, r1
 80127c0:	b21b      	sxth	r3, r3
 80127c2:	4290      	cmp	r0, r2
 80127c4:	bfac      	ite	ge
 80127c6:	ebc7 0200 	rsbge	r2, r7, r0
 80127ca:	ebc7 0202 	rsblt	r2, r7, r2
 80127ce:	4299      	cmp	r1, r3
 80127d0:	bfac      	ite	ge
 80127d2:	ebc6 0301 	rsbge	r3, r6, r1
 80127d6:	ebc6 0303 	rsblt	r3, r6, r3
 80127da:	80a2      	strh	r2, [r4, #4]
 80127dc:	80e3      	strh	r3, [r4, #6]
 80127de:	e7d4      	b.n	801278a <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80127e0:	4620      	mov	r0, r4
 80127e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080127e6 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 80127e6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80127ea:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 80127ee:	b383      	cbz	r3, 8012852 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80127f0:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 80127f2:	b374      	cbz	r4, 8012852 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80127f4:	f9b1 5000 	ldrsh.w	r5, [r1]
 80127f8:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 80127fc:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8012800:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8012804:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8012808:	b303      	cbz	r3, 801284c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 801280a:	4668      	mov	r0, sp
 801280c:	1d21      	adds	r1, r4, #4
 801280e:	f8ad 5000 	strh.w	r5, [sp]
 8012812:	f8ad 6002 	strh.w	r6, [sp, #2]
 8012816:	f8ad 7004 	strh.w	r7, [sp, #4]
 801281a:	f8ad 8006 	strh.w	r8, [sp, #6]
 801281e:	f7ff ff43 	bl	80126a8 <_ZN8touchgfx4RectaNERKS0_>
 8012822:	4668      	mov	r0, sp
 8012824:	f7ff ff83 	bl	801272e <_ZNK8touchgfx4Rect7isEmptyEv>
 8012828:	b980      	cbnz	r0, 801284c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 801282a:	f8bd 3000 	ldrh.w	r3, [sp]
 801282e:	4669      	mov	r1, sp
 8012830:	88a2      	ldrh	r2, [r4, #4]
 8012832:	4620      	mov	r0, r4
 8012834:	1a9b      	subs	r3, r3, r2
 8012836:	88e2      	ldrh	r2, [r4, #6]
 8012838:	f8ad 3000 	strh.w	r3, [sp]
 801283c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8012840:	1a9b      	subs	r3, r3, r2
 8012842:	f8ad 3002 	strh.w	r3, [sp, #2]
 8012846:	6823      	ldr	r3, [r4, #0]
 8012848:	689b      	ldr	r3, [r3, #8]
 801284a:	4798      	blx	r3
 801284c:	69a4      	ldr	r4, [r4, #24]
 801284e:	2c00      	cmp	r4, #0
 8012850:	d1d8      	bne.n	8012804 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8012852:	b002      	add	sp, #8
 8012854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012858 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8012858:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801285a:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 801285e:	460d      	mov	r5, r1
 8012860:	4616      	mov	r6, r2
 8012862:	b323      	cbz	r3, 80128ae <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8012864:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8012866:	b314      	cbz	r4, 80128ae <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8012868:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 801286c:	b1eb      	cbz	r3, 80128aa <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 801286e:	6828      	ldr	r0, [r5, #0]
 8012870:	466b      	mov	r3, sp
 8012872:	6869      	ldr	r1, [r5, #4]
 8012874:	c303      	stmia	r3!, {r0, r1}
 8012876:	4668      	mov	r0, sp
 8012878:	1d21      	adds	r1, r4, #4
 801287a:	f7ff ff15 	bl	80126a8 <_ZN8touchgfx4RectaNERKS0_>
 801287e:	4668      	mov	r0, sp
 8012880:	f7ff ff55 	bl	801272e <_ZNK8touchgfx4Rect7isEmptyEv>
 8012884:	b988      	cbnz	r0, 80128aa <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8012886:	f8bd 3000 	ldrh.w	r3, [sp]
 801288a:	4669      	mov	r1, sp
 801288c:	88a2      	ldrh	r2, [r4, #4]
 801288e:	4620      	mov	r0, r4
 8012890:	1a9b      	subs	r3, r3, r2
 8012892:	88e2      	ldrh	r2, [r4, #6]
 8012894:	f8ad 3000 	strh.w	r3, [sp]
 8012898:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801289c:	1a9b      	subs	r3, r3, r2
 801289e:	4632      	mov	r2, r6
 80128a0:	f8ad 3002 	strh.w	r3, [sp, #2]
 80128a4:	6823      	ldr	r3, [r4, #0]
 80128a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80128a8:	4798      	blx	r3
 80128aa:	69a4      	ldr	r4, [r4, #24]
 80128ac:	e7db      	b.n	8012866 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 80128ae:	b002      	add	sp, #8
 80128b0:	bd70      	pop	{r4, r5, r6, pc}

080128b2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 80128b2:	6803      	ldr	r3, [r0, #0]
 80128b4:	b513      	push	{r0, r1, r4, lr}
 80128b6:	f8d3 40a8 	ldr.w	r4, [r3, #168]	@ 0xa8
 80128ba:	2300      	movs	r3, #0
 80128bc:	e9cd 3300 	strd	r3, r3, [sp]
 80128c0:	466b      	mov	r3, sp
 80128c2:	47a0      	blx	r4
 80128c4:	b002      	add	sp, #8
 80128c6:	bd10      	pop	{r4, pc}

080128c8 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 80128c8:	2301      	movs	r3, #1
 80128ca:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 80128ce:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 80128d2:	4770      	bx	lr

080128d4 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 80128d4:	2301      	movs	r3, #1
 80128d6:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 80128da:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 80128de:	4770      	bx	lr

080128e0 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 80128e0:	6843      	ldr	r3, [r0, #4]
 80128e2:	2201      	movs	r2, #1
 80128e4:	725a      	strb	r2, [r3, #9]
 80128e6:	6840      	ldr	r0, [r0, #4]
 80128e8:	6803      	ldr	r3, [r0, #0]
 80128ea:	691b      	ldr	r3, [r3, #16]
 80128ec:	4718      	bx	r3

080128ee <_ZN8touchgfx3HAL8flushDMAEv>:
 80128ee:	6840      	ldr	r0, [r0, #4]
 80128f0:	6803      	ldr	r3, [r0, #0]
 80128f2:	689b      	ldr	r3, [r3, #8]
 80128f4:	4718      	bx	r3

080128f6 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 80128f6:	b530      	push	{r4, r5, lr}
 80128f8:	b08b      	sub	sp, #44	@ 0x2c
 80128fa:	6804      	ldr	r4, [r0, #0]
 80128fc:	f89d 5058 	ldrb.w	r5, [sp, #88]	@ 0x58
 8012900:	9509      	str	r5, [sp, #36]	@ 0x24
 8012902:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 8012906:	9508      	str	r5, [sp, #32]
 8012908:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 801290c:	9507      	str	r5, [sp, #28]
 801290e:	f8bd 504c 	ldrh.w	r5, [sp, #76]	@ 0x4c
 8012912:	9506      	str	r5, [sp, #24]
 8012914:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 8012918:	9505      	str	r5, [sp, #20]
 801291a:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 801291e:	9504      	str	r5, [sp, #16]
 8012920:	f8bd 5040 	ldrh.w	r5, [sp, #64]	@ 0x40
 8012924:	9503      	str	r5, [sp, #12]
 8012926:	f8bd 503c 	ldrh.w	r5, [sp, #60]	@ 0x3c
 801292a:	9502      	str	r5, [sp, #8]
 801292c:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8012930:	e9cd 3500 	strd	r3, r5, [sp]
 8012934:	4613      	mov	r3, r2
 8012936:	6be4      	ldr	r4, [r4, #60]	@ 0x3c
 8012938:	2200      	movs	r2, #0
 801293a:	47a0      	blx	r4
 801293c:	b00b      	add	sp, #44	@ 0x2c
 801293e:	bd30      	pop	{r4, r5, pc}

08012940 <_ZN8touchgfx3HAL10beginFrameEv>:
 8012940:	4b04      	ldr	r3, [pc, #16]	@ (8012954 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8012942:	781b      	ldrb	r3, [r3, #0]
 8012944:	b123      	cbz	r3, 8012950 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8012946:	f890 006e 	ldrb.w	r0, [r0, #110]	@ 0x6e
 801294a:	f080 0001 	eor.w	r0, r0, #1
 801294e:	4770      	bx	lr
 8012950:	2001      	movs	r0, #1
 8012952:	4770      	bx	lr
 8012954:	20029ed6 	.word	0x20029ed6

08012958 <_ZN8touchgfx3HAL8endFrameEv>:
 8012958:	b510      	push	{r4, lr}
 801295a:	4604      	mov	r4, r0
 801295c:	6840      	ldr	r0, [r0, #4]
 801295e:	6803      	ldr	r3, [r0, #0]
 8012960:	689b      	ldr	r3, [r3, #8]
 8012962:	4798      	blx	r3
 8012964:	f894 306d 	ldrb.w	r3, [r4, #109]	@ 0x6d
 8012968:	b113      	cbz	r3, 8012970 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 801296a:	2301      	movs	r3, #1
 801296c:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 8012970:	bd10      	pop	{r4, pc}

08012972 <_ZN8touchgfx3HAL10initializeEv>:
 8012972:	b510      	push	{r4, lr}
 8012974:	4604      	mov	r4, r0
 8012976:	f7f1 f8a3 	bl	8003ac0 <_ZN8touchgfx10OSWrappers10initializeEv>
 801297a:	f7f0 ff8b 	bl	8003894 <_ZN8touchgfx4GPIO4initEv>
 801297e:	6860      	ldr	r0, [r4, #4]
 8012980:	6803      	ldr	r3, [r0, #0]
 8012982:	68db      	ldr	r3, [r3, #12]
 8012984:	4798      	blx	r3
 8012986:	68e0      	ldr	r0, [r4, #12]
 8012988:	6803      	ldr	r3, [r0, #0]
 801298a:	689b      	ldr	r3, [r3, #8]
 801298c:	4798      	blx	r3
 801298e:	6823      	ldr	r3, [r4, #0]
 8012990:	4620      	mov	r0, r4
 8012992:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012994:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012998:	4718      	bx	r3

0801299a <_ZN8touchgfx3HAL9taskEntryEv>:
 801299a:	b508      	push	{r3, lr}
 801299c:	6803      	ldr	r3, [r0, #0]
 801299e:	4604      	mov	r4, r0
 80129a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80129a4:	4798      	blx	r3
 80129a6:	6823      	ldr	r3, [r4, #0]
 80129a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80129aa:	4620      	mov	r0, r4
 80129ac:	4798      	blx	r3
 80129ae:	f7f1 f8d3 	bl	8003b58 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 80129b2:	6823      	ldr	r3, [r4, #0]
 80129b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80129b6:	e7f8      	b.n	80129aa <_ZN8touchgfx3HAL9taskEntryEv+0x10>

080129b8 <_ZN8touchgfx3HAL4tickEv>:
 80129b8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80129ba:	6803      	ldr	r3, [r0, #0]
 80129bc:	4604      	mov	r4, r0
 80129be:	4d5b      	ldr	r5, [pc, #364]	@ (8012b2c <_ZN8touchgfx3HAL4tickEv+0x174>)
 80129c0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80129c4:	4798      	blx	r3
 80129c6:	2800      	cmp	r0, #0
 80129c8:	f000 8095 	beq.w	8012af6 <_ZN8touchgfx3HAL4tickEv+0x13e>
 80129cc:	2001      	movs	r0, #1
 80129ce:	2600      	movs	r6, #0
 80129d0:	f7f0 fec6 	bl	8003760 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80129d4:	f894 306a 	ldrb.w	r3, [r4, #106]	@ 0x6a
 80129d8:	f884 604b 	strb.w	r6, [r4, #75]	@ 0x4b
 80129dc:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 80129e0:	f894 3079 	ldrb.w	r3, [r4, #121]	@ 0x79
 80129e4:	f884 606a 	strb.w	r6, [r4, #106]	@ 0x6a
 80129e8:	b133      	cbz	r3, 80129f8 <_ZN8touchgfx3HAL4tickEv+0x40>
 80129ea:	6823      	ldr	r3, [r4, #0]
 80129ec:	4620      	mov	r0, r4
 80129ee:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80129f2:	4798      	blx	r3
 80129f4:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 80129f8:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 80129fc:	2601      	movs	r6, #1
 80129fe:	6862      	ldr	r2, [r4, #4]
 8012a00:	f083 0301 	eor.w	r3, r3, #1
 8012a04:	702e      	strb	r6, [r5, #0]
 8012a06:	7253      	strb	r3, [r2, #9]
 8012a08:	f006 f97a 	bl	8018d00 <_ZN8touchgfx11Application11getInstanceEv>
 8012a0c:	6803      	ldr	r3, [r0, #0]
 8012a0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012a10:	4798      	blx	r3
 8012a12:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 8012a16:	b90b      	cbnz	r3, 8012a1c <_ZN8touchgfx3HAL4tickEv+0x64>
 8012a18:	f884 606b 	strb.w	r6, [r4, #107]	@ 0x6b
 8012a1c:	f006 f970 	bl	8018d00 <_ZN8touchgfx11Application11getInstanceEv>
 8012a20:	6803      	ldr	r3, [r0, #0]
 8012a22:	695b      	ldr	r3, [r3, #20]
 8012a24:	4798      	blx	r3
 8012a26:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8012a28:	6803      	ldr	r3, [r0, #0]
 8012a2a:	691b      	ldr	r3, [r3, #16]
 8012a2c:	4798      	blx	r3
 8012a2e:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 8012a32:	f894 206c 	ldrb.w	r2, [r4, #108]	@ 0x6c
 8012a36:	3b01      	subs	r3, #1
 8012a38:	b2db      	uxtb	r3, r3
 8012a3a:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 8012a3e:	b10a      	cbz	r2, 8012a44 <_ZN8touchgfx3HAL4tickEv+0x8c>
 8012a40:	2b00      	cmp	r3, #0
 8012a42:	d1eb      	bne.n	8012a1c <_ZN8touchgfx3HAL4tickEv+0x64>
 8012a44:	4a3a      	ldr	r2, [pc, #232]	@ (8012b30 <_ZN8touchgfx3HAL4tickEv+0x178>)
 8012a46:	f994 1068 	ldrsb.w	r1, [r4, #104]	@ 0x68
 8012a4a:	7813      	ldrb	r3, [r2, #0]
 8012a4c:	3301      	adds	r3, #1
 8012a4e:	b25b      	sxtb	r3, r3
 8012a50:	4299      	cmp	r1, r3
 8012a52:	7013      	strb	r3, [r2, #0]
 8012a54:	dc10      	bgt.n	8012a78 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8012a56:	2300      	movs	r3, #0
 8012a58:	68e0      	ldr	r0, [r4, #12]
 8012a5a:	a902      	add	r1, sp, #8
 8012a5c:	7013      	strb	r3, [r2, #0]
 8012a5e:	aa03      	add	r2, sp, #12
 8012a60:	6803      	ldr	r3, [r0, #0]
 8012a62:	68db      	ldr	r3, [r3, #12]
 8012a64:	4798      	blx	r3
 8012a66:	6823      	ldr	r3, [r4, #0]
 8012a68:	2800      	cmp	r0, #0
 8012a6a:	d050      	beq.n	8012b0e <_ZN8touchgfx3HAL4tickEv+0x156>
 8012a6c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8012a70:	4620      	mov	r0, r4
 8012a72:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8012a76:	4798      	blx	r3
 8012a78:	2300      	movs	r3, #0
 8012a7a:	6960      	ldr	r0, [r4, #20]
 8012a7c:	f88d 3007 	strb.w	r3, [sp, #7]
 8012a80:	b158      	cbz	r0, 8012a9a <_ZN8touchgfx3HAL4tickEv+0xe2>
 8012a82:	6803      	ldr	r3, [r0, #0]
 8012a84:	f10d 0107 	add.w	r1, sp, #7
 8012a88:	68db      	ldr	r3, [r3, #12]
 8012a8a:	4798      	blx	r3
 8012a8c:	b128      	cbz	r0, 8012a9a <_ZN8touchgfx3HAL4tickEv+0xe2>
 8012a8e:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8012a90:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8012a94:	6803      	ldr	r3, [r0, #0]
 8012a96:	68db      	ldr	r3, [r3, #12]
 8012a98:	4798      	blx	r3
 8012a9a:	f104 001c 	add.w	r0, r4, #28
 8012a9e:	f017 f813 	bl	8029ac8 <_ZN8touchgfx8Gestures4tickEv>
 8012aa2:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 8012aa6:	b30b      	cbz	r3, 8012aec <_ZN8touchgfx3HAL4tickEv+0x134>
 8012aa8:	6920      	ldr	r0, [r4, #16]
 8012aaa:	6803      	ldr	r3, [r0, #0]
 8012aac:	691b      	ldr	r3, [r3, #16]
 8012aae:	4798      	blx	r3
 8012ab0:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8012ab2:	4606      	mov	r6, r0
 8012ab4:	b903      	cbnz	r3, 8012ab8 <_ZN8touchgfx3HAL4tickEv+0x100>
 8012ab6:	6760      	str	r0, [r4, #116]	@ 0x74
 8012ab8:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8012aba:	4a1e      	ldr	r2, [pc, #120]	@ (8012b34 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8012abc:	1af3      	subs	r3, r6, r3
 8012abe:	4293      	cmp	r3, r2
 8012ac0:	d914      	bls.n	8012aec <_ZN8touchgfx3HAL4tickEv+0x134>
 8012ac2:	6920      	ldr	r0, [r4, #16]
 8012ac4:	6803      	ldr	r3, [r0, #0]
 8012ac6:	699b      	ldr	r3, [r3, #24]
 8012ac8:	4798      	blx	r3
 8012aca:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8012acc:	2264      	movs	r2, #100	@ 0x64
 8012ace:	1af3      	subs	r3, r6, r3
 8012ad0:	fbb3 f3f2 	udiv	r3, r3, r2
 8012ad4:	fbb0 f0f3 	udiv	r0, r0, r3
 8012ad8:	2800      	cmp	r0, #0
 8012ada:	dc1d      	bgt.n	8012b18 <_ZN8touchgfx3HAL4tickEv+0x160>
 8012adc:	f884 2069 	strb.w	r2, [r4, #105]	@ 0x69
 8012ae0:	6920      	ldr	r0, [r4, #16]
 8012ae2:	2100      	movs	r1, #0
 8012ae4:	6803      	ldr	r3, [r0, #0]
 8012ae6:	69db      	ldr	r3, [r3, #28]
 8012ae8:	4798      	blx	r3
 8012aea:	6766      	str	r6, [r4, #116]	@ 0x74
 8012aec:	f006 f908 	bl	8018d00 <_ZN8touchgfx11Application11getInstanceEv>
 8012af0:	6803      	ldr	r3, [r0, #0]
 8012af2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012af4:	4798      	blx	r3
 8012af6:	6823      	ldr	r3, [r4, #0]
 8012af8:	4620      	mov	r0, r4
 8012afa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8012afe:	4798      	blx	r3
 8012b00:	2001      	movs	r0, #1
 8012b02:	f7f0 fe5d 	bl	80037c0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8012b06:	2300      	movs	r3, #0
 8012b08:	702b      	strb	r3, [r5, #0]
 8012b0a:	b004      	add	sp, #16
 8012b0c:	bd70      	pop	{r4, r5, r6, pc}
 8012b0e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8012b12:	4620      	mov	r0, r4
 8012b14:	4798      	blx	r3
 8012b16:	e7af      	b.n	8012a78 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8012b18:	2863      	cmp	r0, #99	@ 0x63
 8012b1a:	bfcb      	itete	gt
 8012b1c:	2300      	movgt	r3, #0
 8012b1e:	f1c0 0064 	rsble	r0, r0, #100	@ 0x64
 8012b22:	f884 3069 	strbgt.w	r3, [r4, #105]	@ 0x69
 8012b26:	f884 0069 	strble.w	r0, [r4, #105]	@ 0x69
 8012b2a:	e7d9      	b.n	8012ae0 <_ZN8touchgfx3HAL4tickEv+0x128>
 8012b2c:	20029edc 	.word	0x20029edc
 8012b30:	20029edd 	.word	0x20029edd
 8012b34:	05f5e100 	.word	0x05f5e100

08012b38 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8012b38:	b510      	push	{r4, lr}
 8012b3a:	4604      	mov	r4, r0
 8012b3c:	f7f0 fff0 	bl	8003b20 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>
 8012b40:	2200      	movs	r2, #0
 8012b42:	6863      	ldr	r3, [r4, #4]
 8012b44:	729a      	strb	r2, [r3, #10]
 8012b46:	bd10      	pop	{r4, pc}

08012b48 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8012b48:	65c1      	str	r1, [r0, #92]	@ 0x5c
 8012b4a:	301c      	adds	r0, #28
 8012b4c:	f016 bfba 	b.w	8029ac4 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08012b50 <_ZN8touchgfx3HAL5touchEll>:
 8012b50:	b530      	push	{r4, r5, lr}
 8012b52:	b087      	sub	sp, #28
 8012b54:	4604      	mov	r4, r0
 8012b56:	a804      	add	r0, sp, #16
 8012b58:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8012b5c:	f005 fefe 	bl	801895c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8012b60:	9b04      	ldr	r3, [sp, #16]
 8012b62:	a906      	add	r1, sp, #24
 8012b64:	a803      	add	r0, sp, #12
 8012b66:	f8ad 300c 	strh.w	r3, [sp, #12]
 8012b6a:	9b05      	ldr	r3, [sp, #20]
 8012b6c:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8012b70:	f005 ff46 	bl	8018a00 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8012b74:	f894 106f 	ldrb.w	r1, [r4, #111]	@ 0x6f
 8012b78:	f104 001c 	add.w	r0, r4, #28
 8012b7c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8012b80:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8012b84:	b189      	cbz	r1, 8012baa <_ZN8touchgfx3HAL5touchEll+0x5a>
 8012b86:	f8b4 5064 	ldrh.w	r5, [r4, #100]	@ 0x64
 8012b8a:	9300      	str	r3, [sp, #0]
 8012b8c:	4613      	mov	r3, r2
 8012b8e:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
 8012b92:	462a      	mov	r2, r5
 8012b94:	f016 ffa6 	bl	8029ae4 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8012b98:	b128      	cbz	r0, 8012ba6 <_ZN8touchgfx3HAL5touchEll+0x56>
 8012b9a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8012b9e:	6623      	str	r3, [r4, #96]	@ 0x60
 8012ba0:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8012ba4:	6663      	str	r3, [r4, #100]	@ 0x64
 8012ba6:	b007      	add	sp, #28
 8012ba8:	bd30      	pop	{r4, r5, pc}
 8012baa:	f016 ffdb 	bl	8029b64 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8012bae:	2301      	movs	r3, #1
 8012bb0:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 8012bb4:	e7f1      	b.n	8012b9a <_ZN8touchgfx3HAL5touchEll+0x4a>

08012bb6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8012bb6:	b510      	push	{r4, lr}
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	d046      	beq.n	8012c4a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8012bbc:	ea81 0002 	eor.w	r0, r1, r2
 8012bc0:	07c4      	lsls	r4, r0, #31
 8012bc2:	d508      	bpl.n	8012bd6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8012bc4:	440b      	add	r3, r1
 8012bc6:	3a01      	subs	r2, #1
 8012bc8:	428b      	cmp	r3, r1
 8012bca:	d93e      	bls.n	8012c4a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8012bcc:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8012bd0:	f801 0b01 	strb.w	r0, [r1], #1
 8012bd4:	e7f8      	b.n	8012bc8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8012bd6:	07d0      	lsls	r0, r2, #31
 8012bd8:	bf42      	ittt	mi
 8012bda:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8012bde:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8012be2:	f801 0b01 	strbmi.w	r0, [r1], #1
 8012be6:	2b01      	cmp	r3, #1
 8012be8:	d911      	bls.n	8012c0e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8012bea:	ea81 0402 	eor.w	r4, r1, r2
 8012bee:	4610      	mov	r0, r2
 8012bf0:	07a4      	lsls	r4, r4, #30
 8012bf2:	d022      	beq.n	8012c3a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 8012bf4:	f023 0401 	bic.w	r4, r3, #1
 8012bf8:	440c      	add	r4, r1
 8012bfa:	428c      	cmp	r4, r1
 8012bfc:	4602      	mov	r2, r0
 8012bfe:	d904      	bls.n	8012c0a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 8012c00:	8812      	ldrh	r2, [r2, #0]
 8012c02:	3002      	adds	r0, #2
 8012c04:	f821 2b02 	strh.w	r2, [r1], #2
 8012c08:	e7f7      	b.n	8012bfa <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 8012c0a:	f003 0301 	and.w	r3, r3, #1
 8012c0e:	f023 0003 	bic.w	r0, r3, #3
 8012c12:	4408      	add	r0, r1
 8012c14:	4288      	cmp	r0, r1
 8012c16:	4614      	mov	r4, r2
 8012c18:	d904      	bls.n	8012c24 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 8012c1a:	6824      	ldr	r4, [r4, #0]
 8012c1c:	3204      	adds	r2, #4
 8012c1e:	f841 4b04 	str.w	r4, [r1], #4
 8012c22:	e7f7      	b.n	8012c14 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 8012c24:	f003 0303 	and.w	r3, r3, #3
 8012c28:	3a01      	subs	r2, #1
 8012c2a:	440b      	add	r3, r1
 8012c2c:	428b      	cmp	r3, r1
 8012c2e:	d90c      	bls.n	8012c4a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8012c30:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8012c34:	f801 0b01 	strb.w	r0, [r1], #1
 8012c38:	e7f8      	b.n	8012c2c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 8012c3a:	0790      	lsls	r0, r2, #30
 8012c3c:	d0e7      	beq.n	8012c0e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8012c3e:	f832 0b02 	ldrh.w	r0, [r2], #2
 8012c42:	3b02      	subs	r3, #2
 8012c44:	f821 0b02 	strh.w	r0, [r1], #2
 8012c48:	e7e1      	b.n	8012c0e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8012c4a:	2001      	movs	r0, #1
 8012c4c:	bd10      	pop	{r4, pc}

08012c4e <_ZN8touchgfx3HAL7noTouchEv>:
 8012c4e:	b510      	push	{r4, lr}
 8012c50:	f890 306f 	ldrb.w	r3, [r0, #111]	@ 0x6f
 8012c54:	4604      	mov	r4, r0
 8012c56:	b153      	cbz	r3, 8012c6e <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8012c58:	f8b0 3064 	ldrh.w	r3, [r0, #100]	@ 0x64
 8012c5c:	2101      	movs	r1, #1
 8012c5e:	f8b0 2060 	ldrh.w	r2, [r0, #96]	@ 0x60
 8012c62:	301c      	adds	r0, #28
 8012c64:	f016 ff7e 	bl	8029b64 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8012c68:	2300      	movs	r3, #0
 8012c6a:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 8012c6e:	bd10      	pop	{r4, pc}

08012c70 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8012c70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012c74:	b085      	sub	sp, #20
 8012c76:	4604      	mov	r4, r0
 8012c78:	2000      	movs	r0, #0
 8012c7a:	4699      	mov	r9, r3
 8012c7c:	ad04      	add	r5, sp, #16
 8012c7e:	460f      	mov	r7, r1
 8012c80:	4690      	mov	r8, r2
 8012c82:	f845 0d04 	str.w	r0, [r5, #-4]!
 8012c86:	69a0      	ldr	r0, [r4, #24]
 8012c88:	6806      	ldr	r6, [r0, #0]
 8012c8a:	9501      	str	r5, [sp, #4]
 8012c8c:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 8012c90:	9500      	str	r5, [sp, #0]
 8012c92:	6835      	ldr	r5, [r6, #0]
 8012c94:	47a8      	blx	r5
 8012c96:	4d10      	ldr	r5, [pc, #64]	@ (8012cd8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 8012c98:	4606      	mov	r6, r0
 8012c9a:	f8a5 9000 	strh.w	r9, [r5]
 8012c9e:	f7f1 fc53 	bl	8004548 <_ZN8touchgfx3HAL3lcdEv>
 8012ca2:	6803      	ldr	r3, [r0, #0]
 8012ca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012ca6:	4798      	blx	r3
 8012ca8:	b128      	cbz	r0, 8012cb6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 8012caa:	2801      	cmp	r0, #1
 8012cac:	d00b      	beq.n	8012cc6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 8012cae:	4630      	mov	r0, r6
 8012cb0:	b005      	add	sp, #20
 8012cb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012cb6:	882b      	ldrh	r3, [r5, #0]
 8012cb8:	fb08 7203 	mla	r2, r8, r3, r7
 8012cbc:	9b03      	ldr	r3, [sp, #12]
 8012cbe:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8012cc2:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8012cc4:	e7f3      	b.n	8012cae <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8012cc6:	882a      	ldrh	r2, [r5, #0]
 8012cc8:	9b03      	ldr	r3, [sp, #12]
 8012cca:	fb08 7202 	mla	r2, r8, r2, r7
 8012cce:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8012cd2:	1a9a      	subs	r2, r3, r2
 8012cd4:	63e2      	str	r2, [r4, #60]	@ 0x3c
 8012cd6:	e7ea      	b.n	8012cae <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8012cd8:	20029ed2 	.word	0x20029ed2

08012cdc <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 8012cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012cde:	b08b      	sub	sp, #44	@ 0x2c
 8012ce0:	4617      	mov	r7, r2
 8012ce2:	4604      	mov	r4, r0
 8012ce4:	460e      	mov	r6, r1
 8012ce6:	461d      	mov	r5, r3
 8012ce8:	f7f1 fc2e 	bl	8004548 <_ZN8touchgfx3HAL3lcdEv>
 8012cec:	6803      	ldr	r3, [r0, #0]
 8012cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012cf0:	4798      	blx	r3
 8012cf2:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 8012cf6:	9007      	str	r0, [sp, #28]
 8012cf8:	4631      	mov	r1, r6
 8012cfa:	6822      	ldr	r2, [r4, #0]
 8012cfc:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8012d00:	4b0c      	ldr	r3, [pc, #48]	@ (8012d34 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 8012d02:	4620      	mov	r0, r4
 8012d04:	881b      	ldrh	r3, [r3, #0]
 8012d06:	9306      	str	r3, [sp, #24]
 8012d08:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8012d0c:	9305      	str	r3, [sp, #20]
 8012d0e:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
 8012d12:	9304      	str	r3, [sp, #16]
 8012d14:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8012d18:	9303      	str	r3, [sp, #12]
 8012d1a:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8012d1e:	9302      	str	r3, [sp, #8]
 8012d20:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8012d24:	e9cd 5300 	strd	r5, r3, [sp]
 8012d28:	463b      	mov	r3, r7
 8012d2a:	6bd5      	ldr	r5, [r2, #60]	@ 0x3c
 8012d2c:	2200      	movs	r2, #0
 8012d2e:	47a8      	blx	r5
 8012d30:	b00b      	add	sp, #44	@ 0x2c
 8012d32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012d34:	20029ed2 	.word	0x20029ed2

08012d38 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8012d38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012d3c:	4698      	mov	r8, r3
 8012d3e:	6803      	ldr	r3, [r0, #0]
 8012d40:	b08b      	sub	sp, #44	@ 0x2c
 8012d42:	4617      	mov	r7, r2
 8012d44:	6bdd      	ldr	r5, [r3, #60]	@ 0x3c
 8012d46:	460e      	mov	r6, r1
 8012d48:	4b13      	ldr	r3, [pc, #76]	@ (8012d98 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 8012d4a:	4604      	mov	r4, r0
 8012d4c:	f8b3 9000 	ldrh.w	r9, [r3]
 8012d50:	f7f1 fbfa 	bl	8004548 <_ZN8touchgfx3HAL3lcdEv>
 8012d54:	6803      	ldr	r3, [r0, #0]
 8012d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012d58:	4798      	blx	r3
 8012d5a:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 8012d5e:	2200      	movs	r2, #0
 8012d60:	4631      	mov	r1, r6
 8012d62:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8012d66:	2302      	movs	r3, #2
 8012d68:	4620      	mov	r0, r4
 8012d6a:	e9cd 9306 	strd	r9, r3, [sp, #24]
 8012d6e:	2301      	movs	r3, #1
 8012d70:	9305      	str	r3, [sp, #20]
 8012d72:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 8012d76:	9304      	str	r3, [sp, #16]
 8012d78:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 8012d7c:	9303      	str	r3, [sp, #12]
 8012d7e:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8012d82:	9302      	str	r3, [sp, #8]
 8012d84:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8012d88:	e9cd 8300 	strd	r8, r3, [sp]
 8012d8c:	463b      	mov	r3, r7
 8012d8e:	47a8      	blx	r5
 8012d90:	b00b      	add	sp, #44	@ 0x2c
 8012d92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012d96:	bf00      	nop
 8012d98:	20029ed2 	.word	0x20029ed2

08012d9c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 8012d9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012da0:	4698      	mov	r8, r3
 8012da2:	6803      	ldr	r3, [r0, #0]
 8012da4:	b087      	sub	sp, #28
 8012da6:	460e      	mov	r6, r1
 8012da8:	6d9d      	ldr	r5, [r3, #88]	@ 0x58
 8012daa:	4617      	mov	r7, r2
 8012dac:	4b0f      	ldr	r3, [pc, #60]	@ (8012dec <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 8012dae:	4604      	mov	r4, r0
 8012db0:	f8b3 9000 	ldrh.w	r9, [r3]
 8012db4:	f7f1 fbc8 	bl	8004548 <_ZN8touchgfx3HAL3lcdEv>
 8012db8:	6803      	ldr	r3, [r0, #0]
 8012dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012dbc:	4798      	blx	r3
 8012dbe:	f89d 3044 	ldrb.w	r3, [sp, #68]	@ 0x44
 8012dc2:	463a      	mov	r2, r7
 8012dc4:	4631      	mov	r1, r6
 8012dc6:	f8cd 900c 	str.w	r9, [sp, #12]
 8012dca:	e9cd 0304 	strd	r0, r3, [sp, #16]
 8012dce:	f89d 3040 	ldrb.w	r3, [sp, #64]	@ 0x40
 8012dd2:	4620      	mov	r0, r4
 8012dd4:	9302      	str	r3, [sp, #8]
 8012dd6:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 8012dda:	9301      	str	r3, [sp, #4]
 8012ddc:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8012de0:	9300      	str	r3, [sp, #0]
 8012de2:	4643      	mov	r3, r8
 8012de4:	47a8      	blx	r5
 8012de6:	b007      	add	sp, #28
 8012de8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012dec:	20029ed2 	.word	0x20029ed2

08012df0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8012df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012df4:	4604      	mov	r4, r0
 8012df6:	b08f      	sub	sp, #60	@ 0x3c
 8012df8:	4610      	mov	r0, r2
 8012dfa:	460d      	mov	r5, r1
 8012dfc:	4691      	mov	r9, r2
 8012dfe:	461e      	mov	r6, r3
 8012e00:	f009 fcc8 	bl	801c794 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8012e04:	2800      	cmp	r0, #0
 8012e06:	f000 809d 	beq.w	8012f44 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 8012e0a:	6823      	ldr	r3, [r4, #0]
 8012e0c:	4620      	mov	r0, r4
 8012e0e:	f8df b198 	ldr.w	fp, [pc, #408]	@ 8012fa8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 8012e12:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 8012e16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012e18:	4798      	blx	r3
 8012e1a:	6823      	ldr	r3, [r4, #0]
 8012e1c:	4620      	mov	r0, r4
 8012e1e:	f8df a18c 	ldr.w	sl, [pc, #396]	@ 8012fac <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 8012e22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012e24:	4798      	blx	r3
 8012e26:	f8bb 3000 	ldrh.w	r3, [fp]
 8012e2a:	4f5c      	ldr	r7, [pc, #368]	@ (8012f9c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8012e2c:	9301      	str	r3, [sp, #4]
 8012e2e:	f8ba 3000 	ldrh.w	r3, [sl]
 8012e32:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 8012e36:	4640      	mov	r0, r8
 8012e38:	9302      	str	r3, [sp, #8]
 8012e3a:	883b      	ldrh	r3, [r7, #0]
 8012e3c:	9303      	str	r3, [sp, #12]
 8012e3e:	4b58      	ldr	r3, [pc, #352]	@ (8012fa0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8012e40:	881a      	ldrh	r2, [r3, #0]
 8012e42:	9305      	str	r3, [sp, #20]
 8012e44:	9204      	str	r2, [sp, #16]
 8012e46:	f009 fde9 	bl	801ca1c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8012e4a:	8038      	strh	r0, [r7, #0]
 8012e4c:	4640      	mov	r0, r8
 8012e4e:	f009 fe19 	bl	801ca84 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8012e52:	9b05      	ldr	r3, [sp, #20]
 8012e54:	b280      	uxth	r0, r0
 8012e56:	8018      	strh	r0, [r3, #0]
 8012e58:	4b52      	ldr	r3, [pc, #328]	@ (8012fa4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 8012e5a:	781b      	ldrb	r3, [r3, #0]
 8012e5c:	2b00      	cmp	r3, #0
 8012e5e:	d174      	bne.n	8012f4a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 8012e60:	883b      	ldrh	r3, [r7, #0]
 8012e62:	f8aa 0000 	strh.w	r0, [sl]
 8012e66:	f8ab 3000 	strh.w	r3, [fp]
 8012e6a:	4648      	mov	r0, r9
 8012e6c:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	@ 0x3c
 8012e70:	f009 fc90 	bl	801c794 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8012e74:	2200      	movs	r2, #0
 8012e76:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 8012e7a:	4611      	mov	r1, r2
 8012e7c:	4628      	mov	r0, r5
 8012e7e:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8012e82:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8012e86:	f7f2 f9e0 	bl	800524a <_ZN8touchgfx8Drawable5setXYEss>
 8012e8a:	2301      	movs	r3, #1
 8012e8c:	f895 b025 	ldrb.w	fp, [r5, #37]	@ 0x25
 8012e90:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 8012e94:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8012e98:	2b00      	cmp	r3, #0
 8012e9a:	dd5c      	ble.n	8012f56 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8012e9c:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8012ea0:	2b00      	cmp	r3, #0
 8012ea2:	dd58      	ble.n	8012f56 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8012ea4:	462a      	mov	r2, r5
 8012ea6:	ab0a      	add	r3, sp, #40	@ 0x28
 8012ea8:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8012eac:	6851      	ldr	r1, [r2, #4]
 8012eae:	c303      	stmia	r3!, {r0, r1}
 8012eb0:	4631      	mov	r1, r6
 8012eb2:	a80a      	add	r0, sp, #40	@ 0x28
 8012eb4:	f7ff fbf8 	bl	80126a8 <_ZN8touchgfx4RectaNERKS0_>
 8012eb8:	4b38      	ldr	r3, [pc, #224]	@ (8012f9c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8012eba:	2100      	movs	r1, #0
 8012ebc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012ec0:	4b37      	ldr	r3, [pc, #220]	@ (8012fa0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8012ec2:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 8012ec6:	aa0a      	add	r2, sp, #40	@ 0x28
 8012ec8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012ecc:	910c      	str	r1, [sp, #48]	@ 0x30
 8012ece:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8012ed2:	ab08      	add	r3, sp, #32
 8012ed4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012ed8:	e883 0003 	stmia.w	r3, {r0, r1}
 8012edc:	4618      	mov	r0, r3
 8012ede:	a90c      	add	r1, sp, #48	@ 0x30
 8012ee0:	f7ff fbe2 	bl	80126a8 <_ZN8touchgfx4RectaNERKS0_>
 8012ee4:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8012ee6:	2b00      	cmp	r3, #0
 8012ee8:	d13c      	bne.n	8012f64 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 8012eea:	2000      	movs	r0, #0
 8012eec:	f884 0058 	strb.w	r0, [r4, #88]	@ 0x58
 8012ef0:	2600      	movs	r6, #0
 8012ef2:	696b      	ldr	r3, [r5, #20]
 8012ef4:	a908      	add	r1, sp, #32
 8012ef6:	682a      	ldr	r2, [r5, #0]
 8012ef8:	4628      	mov	r0, r5
 8012efa:	9305      	str	r3, [sp, #20]
 8012efc:	616e      	str	r6, [r5, #20]
 8012efe:	6892      	ldr	r2, [r2, #8]
 8012f00:	4790      	blx	r2
 8012f02:	9b05      	ldr	r3, [sp, #20]
 8012f04:	4652      	mov	r2, sl
 8012f06:	4649      	mov	r1, r9
 8012f08:	616b      	str	r3, [r5, #20]
 8012f0a:	4628      	mov	r0, r5
 8012f0c:	f884 6058 	strb.w	r6, [r4, #88]	@ 0x58
 8012f10:	f885 b025 	strb.w	fp, [r5, #37]	@ 0x25
 8012f14:	f7f2 f999 	bl	800524a <_ZN8touchgfx8Drawable5setXYEss>
 8012f18:	9a01      	ldr	r2, [sp, #4]
 8012f1a:	4b23      	ldr	r3, [pc, #140]	@ (8012fa8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8012f1c:	4620      	mov	r0, r4
 8012f1e:	801a      	strh	r2, [r3, #0]
 8012f20:	9a02      	ldr	r2, [sp, #8]
 8012f22:	4b22      	ldr	r3, [pc, #136]	@ (8012fac <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 8012f24:	801a      	strh	r2, [r3, #0]
 8012f26:	9a03      	ldr	r2, [sp, #12]
 8012f28:	4b1c      	ldr	r3, [pc, #112]	@ (8012f9c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8012f2a:	801a      	strh	r2, [r3, #0]
 8012f2c:	4b1c      	ldr	r3, [pc, #112]	@ (8012fa0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8012f2e:	9a04      	ldr	r2, [sp, #16]
 8012f30:	801a      	strh	r2, [r3, #0]
 8012f32:	6823      	ldr	r3, [r4, #0]
 8012f34:	e9c4 870f 	strd	r8, r7, [r4, #60]	@ 0x3c
 8012f38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012f3a:	4798      	blx	r3
 8012f3c:	6823      	ldr	r3, [r4, #0]
 8012f3e:	4620      	mov	r0, r4
 8012f40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012f42:	4798      	blx	r3
 8012f44:	b00f      	add	sp, #60	@ 0x3c
 8012f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f4a:	883b      	ldrh	r3, [r7, #0]
 8012f4c:	f8ab 0000 	strh.w	r0, [fp]
 8012f50:	f8aa 3000 	strh.w	r3, [sl]
 8012f54:	e789      	b.n	8012e6a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 8012f56:	462a      	mov	r2, r5
 8012f58:	ab0a      	add	r3, sp, #40	@ 0x28
 8012f5a:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8012f5e:	6851      	ldr	r1, [r2, #4]
 8012f60:	c303      	stmia	r3!, {r0, r1}
 8012f62:	e7a9      	b.n	8012eb8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 8012f64:	a807      	add	r0, sp, #28
 8012f66:	f009 fec9 	bl	801ccfc <_ZNK8touchgfx6Bitmap9getFormatEv>
 8012f6a:	4606      	mov	r6, r0
 8012f6c:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8012f6e:	6803      	ldr	r3, [r0, #0]
 8012f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012f72:	4798      	blx	r3
 8012f74:	4286      	cmp	r6, r0
 8012f76:	d1b8      	bne.n	8012eea <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 8012f78:	f7f1 fae6 	bl	8004548 <_ZN8touchgfx3HAL3lcdEv>
 8012f7c:	6803      	ldr	r3, [r0, #0]
 8012f7e:	4606      	mov	r6, r0
 8012f80:	a807      	add	r0, sp, #28
 8012f82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012f84:	9305      	str	r3, [sp, #20]
 8012f86:	f009 feb9 	bl	801ccfc <_ZNK8touchgfx6Bitmap9getFormatEv>
 8012f8a:	9b05      	ldr	r3, [sp, #20]
 8012f8c:	4601      	mov	r1, r0
 8012f8e:	4630      	mov	r0, r6
 8012f90:	4798      	blx	r3
 8012f92:	f080 0001 	eor.w	r0, r0, #1
 8012f96:	b2c0      	uxtb	r0, r0
 8012f98:	e7a8      	b.n	8012eec <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 8012f9a:	bf00      	nop
 8012f9c:	20029ecc 	.word	0x20029ecc
 8012fa0:	20029ece 	.word	0x20029ece
 8012fa4:	20029ed0 	.word	0x20029ed0
 8012fa8:	20029ed2 	.word	0x20029ed2
 8012fac:	20029ed4 	.word	0x20029ed4

08012fb0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8012fb0:	4b07      	ldr	r3, [pc, #28]	@ (8012fd0 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8012fb2:	b510      	push	{r4, lr}
 8012fb4:	781b      	ldrb	r3, [r3, #0]
 8012fb6:	4604      	mov	r4, r0
 8012fb8:	b13b      	cbz	r3, 8012fca <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8012fba:	6803      	ldr	r3, [r0, #0]
 8012fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012fbe:	4798      	blx	r3
 8012fc0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8012fc2:	4283      	cmp	r3, r0
 8012fc4:	d101      	bne.n	8012fca <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8012fc6:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8012fc8:	bd10      	pop	{r4, pc}
 8012fca:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8012fcc:	e7fc      	b.n	8012fc8 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8012fce:	bf00      	nop
 8012fd0:	20029ed6 	.word	0x20029ed6

08012fd4 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8012fd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012fd8:	461d      	mov	r5, r3
 8012fda:	b08a      	sub	sp, #40	@ 0x28
 8012fdc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012fe0:	4690      	mov	r8, r2
 8012fe2:	f8bd 604c 	ldrh.w	r6, [sp, #76]	@ 0x4c
 8012fe6:	2400      	movs	r4, #0
 8012fe8:	4607      	mov	r7, r0
 8012fea:	fb06 8505 	mla	r5, r6, r5, r8
 8012fee:	9404      	str	r4, [sp, #16]
 8012ff0:	f88d 4020 	strb.w	r4, [sp, #32]
 8012ff4:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8012ff8:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8012ffc:	f8ad 3018 	strh.w	r3, [sp, #24]
 8013000:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8013004:	f8ad 301a 	strh.w	r3, [sp, #26]
 8013008:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 801300c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8013010:	f7ff ffce 	bl	8012fb0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8013014:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8013018:	6878      	ldr	r0, [r7, #4]
 801301a:	f8ad 601e 	strh.w	r6, [sp, #30]
 801301e:	a901      	add	r1, sp, #4
 8013020:	9505      	str	r5, [sp, #20]
 8013022:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8013026:	f88d 4021 	strb.w	r4, [sp, #33]	@ 0x21
 801302a:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 801302e:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 8013032:	6803      	ldr	r3, [r0, #0]
 8013034:	685b      	ldr	r3, [r3, #4]
 8013036:	4798      	blx	r3
 8013038:	b00a      	add	sp, #40	@ 0x28
 801303a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801303e <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 801303e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013042:	b08b      	sub	sp, #44	@ 0x2c
 8013044:	2400      	movs	r4, #0
 8013046:	4691      	mov	r9, r2
 8013048:	461d      	mov	r5, r3
 801304a:	f8bd 6050 	ldrh.w	r6, [sp, #80]	@ 0x50
 801304e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8013052:	4688      	mov	r8, r1
 8013054:	4607      	mov	r7, r0
 8013056:	9404      	str	r4, [sp, #16]
 8013058:	fb06 9505 	mla	r5, r6, r5, r9
 801305c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013060:	f7ff ffa6 	bl	8012fb0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8013064:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8013068:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801306c:	6878      	ldr	r0, [r7, #4]
 801306e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8013072:	a901      	add	r1, sp, #4
 8013074:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8013078:	9505      	str	r5, [sp, #20]
 801307a:	f8ad 301a 	strh.w	r3, [sp, #26]
 801307e:	f8ad 401c 	strh.w	r4, [sp, #28]
 8013082:	f8ad 601e 	strh.w	r6, [sp, #30]
 8013086:	f8cd 8010 	str.w	r8, [sp, #16]
 801308a:	f8ad 4020 	strh.w	r4, [sp, #32]
 801308e:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8013092:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 8013096:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 801309a:	6803      	ldr	r3, [r0, #0]
 801309c:	685b      	ldr	r3, [r3, #4]
 801309e:	4798      	blx	r3
 80130a0:	b00b      	add	sp, #44	@ 0x2c
 80130a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

080130a8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 80130a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80130ac:	b08a      	sub	sp, #40	@ 0x28
 80130ae:	4698      	mov	r8, r3
 80130b0:	2300      	movs	r3, #0
 80130b2:	4606      	mov	r6, r0
 80130b4:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 80130b8:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 80130bc:	2d0b      	cmp	r5, #11
 80130be:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 80130c2:	f8bd 7058 	ldrh.w	r7, [sp, #88]	@ 0x58
 80130c6:	f89d 4060 	ldrb.w	r4, [sp, #96]	@ 0x60
 80130ca:	9304      	str	r3, [sp, #16]
 80130cc:	d137      	bne.n	801313e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 80130ce:	2380      	movs	r3, #128	@ 0x80
 80130d0:	f88d 0020 	strb.w	r0, [sp, #32]
 80130d4:	4630      	mov	r0, r6
 80130d6:	9203      	str	r2, [sp, #12]
 80130d8:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80130dc:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 80130e0:	f8ad 3018 	strh.w	r3, [sp, #24]
 80130e4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 80130e8:	f8ad 301a 	strh.w	r3, [sp, #26]
 80130ec:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 80130f0:	f8ad 301c 	strh.w	r3, [sp, #28]
 80130f4:	f7ff ff5c 	bl	8012fb0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80130f8:	2c0b      	cmp	r4, #11
 80130fa:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 80130fe:	f8ad 701e 	strh.w	r7, [sp, #30]
 8013102:	bf94      	ite	ls
 8013104:	4b19      	ldrls	r3, [pc, #100]	@ (801316c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 8013106:	2100      	movhi	r1, #0
 8013108:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 801310c:	bf98      	it	ls
 801310e:	5d19      	ldrbls	r1, [r3, r4]
 8013110:	fb02 8307 	mla	r3, r2, r7, r8
 8013114:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8013118:	10c9      	asrs	r1, r1, #3
 801311a:	fb01 0003 	mla	r0, r1, r3, r0
 801311e:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 8013122:	a901      	add	r1, sp, #4
 8013124:	9005      	str	r0, [sp, #20]
 8013126:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 801312a:	2300      	movs	r3, #0
 801312c:	6870      	ldr	r0, [r6, #4]
 801312e:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8013132:	6803      	ldr	r3, [r0, #0]
 8013134:	685b      	ldr	r3, [r3, #4]
 8013136:	4798      	blx	r3
 8013138:	b00a      	add	sp, #40	@ 0x28
 801313a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801313e:	2d02      	cmp	r5, #2
 8013140:	d109      	bne.n	8013156 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 8013142:	28ff      	cmp	r0, #255	@ 0xff
 8013144:	d105      	bne.n	8013152 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 8013146:	f1bc 0f00 	cmp.w	ip, #0
 801314a:	bf14      	ite	ne
 801314c:	2340      	movne	r3, #64	@ 0x40
 801314e:	2320      	moveq	r3, #32
 8013150:	e7be      	b.n	80130d0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8013152:	2340      	movs	r3, #64	@ 0x40
 8013154:	e7bc      	b.n	80130d0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8013156:	28ff      	cmp	r0, #255	@ 0xff
 8013158:	d105      	bne.n	8013166 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 801315a:	f1bc 0f00 	cmp.w	ip, #0
 801315e:	bf14      	ite	ne
 8013160:	2304      	movne	r3, #4
 8013162:	2301      	moveq	r3, #1
 8013164:	e7b4      	b.n	80130d0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8013166:	2304      	movs	r3, #4
 8013168:	e7b2      	b.n	80130d0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801316a:	bf00      	nop
 801316c:	08041e24 	.word	0x08041e24

08013170 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8013170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013174:	b08b      	sub	sp, #44	@ 0x2c
 8013176:	461d      	mov	r5, r3
 8013178:	2400      	movs	r4, #0
 801317a:	4688      	mov	r8, r1
 801317c:	f89d 9058 	ldrb.w	r9, [sp, #88]	@ 0x58
 8013180:	4693      	mov	fp, r2
 8013182:	f89d 6060 	ldrb.w	r6, [sp, #96]	@ 0x60
 8013186:	4607      	mov	r7, r0
 8013188:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 801318c:	f8bd a05c 	ldrh.w	sl, [sp, #92]	@ 0x5c
 8013190:	9404      	str	r4, [sp, #16]
 8013192:	bf14      	ite	ne
 8013194:	2308      	movne	r3, #8
 8013196:	2302      	moveq	r3, #2
 8013198:	fb05 b50a 	mla	r5, r5, sl, fp
 801319c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80131a0:	f7ff ff06 	bl	8012fb0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80131a4:	2e0b      	cmp	r6, #11
 80131a6:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 80131aa:	a901      	add	r1, sp, #4
 80131ac:	bf98      	it	ls
 80131ae:	4b13      	ldrls	r3, [pc, #76]	@ (80131fc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 80131b0:	f8ad a01e 	strh.w	sl, [sp, #30]
 80131b4:	bf98      	it	ls
 80131b6:	5d9c      	ldrbls	r4, [r3, r6]
 80131b8:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 80131bc:	10e4      	asrs	r4, r4, #3
 80131be:	f8cd 8010 	str.w	r8, [sp, #16]
 80131c2:	f8ad 3018 	strh.w	r3, [sp, #24]
 80131c6:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 80131ca:	fb04 0405 	mla	r4, r4, r5, r0
 80131ce:	6878      	ldr	r0, [r7, #4]
 80131d0:	f8ad 301a 	strh.w	r3, [sp, #26]
 80131d4:	2300      	movs	r3, #0
 80131d6:	9405      	str	r4, [sp, #20]
 80131d8:	f8ad 301c 	strh.w	r3, [sp, #28]
 80131dc:	f88d 9020 	strb.w	r9, [sp, #32]
 80131e0:	f88d 2023 	strb.w	r2, [sp, #35]	@ 0x23
 80131e4:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 80131e8:	f88d 6021 	strb.w	r6, [sp, #33]	@ 0x21
 80131ec:	f88d 6022 	strb.w	r6, [sp, #34]	@ 0x22
 80131f0:	6803      	ldr	r3, [r0, #0]
 80131f2:	685b      	ldr	r3, [r3, #4]
 80131f4:	4798      	blx	r3
 80131f6:	b00b      	add	sp, #44	@ 0x2c
 80131f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131fc:	08041e24 	.word	0x08041e24

08013200 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8013200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013204:	461e      	mov	r6, r3
 8013206:	4b0a      	ldr	r3, [pc, #40]	@ (8013230 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 8013208:	460f      	mov	r7, r1
 801320a:	4690      	mov	r8, r2
 801320c:	881d      	ldrh	r5, [r3, #0]
 801320e:	f7f1 f99b 	bl	8004548 <_ZN8touchgfx3HAL3lcdEv>
 8013212:	6803      	ldr	r3, [r0, #0]
 8013214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013216:	4798      	blx	r3
 8013218:	280b      	cmp	r0, #11
 801321a:	bf96      	itet	ls
 801321c:	4b05      	ldrls	r3, [pc, #20]	@ (8013234 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 801321e:	2400      	movhi	r4, #0
 8013220:	5c1c      	ldrbls	r4, [r3, r0]
 8013222:	fb08 7005 	mla	r0, r8, r5, r7
 8013226:	10e4      	asrs	r4, r4, #3
 8013228:	fb04 6000 	mla	r0, r4, r0, r6
 801322c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013230:	20029ed2 	.word	0x20029ed2
 8013234:	08041e24 	.word	0x08041e24

08013238 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8013238:	b5f0      	push	{r4, r5, r6, r7, lr}
 801323a:	b08b      	sub	sp, #44	@ 0x2c
 801323c:	461f      	mov	r7, r3
 801323e:	4604      	mov	r4, r0
 8013240:	4616      	mov	r6, r2
 8013242:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 8013246:	2500      	movs	r5, #0
 8013248:	e9cd 3101 	strd	r3, r1, [sp, #4]
 801324c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8013250:	9504      	str	r5, [sp, #16]
 8013252:	f8ad 3018 	strh.w	r3, [sp, #24]
 8013256:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 801325a:	f8ad 301a 	strh.w	r3, [sp, #26]
 801325e:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8013262:	f8ad 301c 	strh.w	r3, [sp, #28]
 8013266:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 801326a:	f88d 3020 	strb.w	r3, [sp, #32]
 801326e:	f7ff fe9f 	bl	8012fb0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8013272:	463a      	mov	r2, r7
 8013274:	4631      	mov	r1, r6
 8013276:	4603      	mov	r3, r0
 8013278:	4620      	mov	r0, r4
 801327a:	f7ff ffc1 	bl	8013200 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801327e:	4b0e      	ldr	r3, [pc, #56]	@ (80132b8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 8013280:	9005      	str	r0, [sp, #20]
 8013282:	881b      	ldrh	r3, [r3, #0]
 8013284:	f8ad 301e 	strh.w	r3, [sp, #30]
 8013288:	f7f1 f95e 	bl	8004548 <_ZN8touchgfx3HAL3lcdEv>
 801328c:	6803      	ldr	r3, [r0, #0]
 801328e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013290:	4798      	blx	r3
 8013292:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8013294:	f88d 0022 	strb.w	r0, [sp, #34]	@ 0x22
 8013298:	a901      	add	r1, sp, #4
 801329a:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 801329e:	9304      	str	r3, [sp, #16]
 80132a0:	6860      	ldr	r0, [r4, #4]
 80132a2:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 80132a6:	f88d 5024 	strb.w	r5, [sp, #36]	@ 0x24
 80132aa:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 80132ae:	6803      	ldr	r3, [r0, #0]
 80132b0:	685b      	ldr	r3, [r3, #4]
 80132b2:	4798      	blx	r3
 80132b4:	b00b      	add	sp, #44	@ 0x2c
 80132b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80132b8:	20029ed2 	.word	0x20029ed2

080132bc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 80132bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80132be:	b08d      	sub	sp, #52	@ 0x34
 80132c0:	2501      	movs	r5, #1
 80132c2:	4604      	mov	r4, r0
 80132c4:	466b      	mov	r3, sp
 80132c6:	9503      	str	r5, [sp, #12]
 80132c8:	e883 0006 	stmia.w	r3, {r1, r2}
 80132cc:	2300      	movs	r3, #0
 80132ce:	f8bd 6000 	ldrh.w	r6, [sp]
 80132d2:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 80132d6:	9306      	str	r3, [sp, #24]
 80132d8:	6803      	ldr	r3, [r0, #0]
 80132da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80132dc:	4798      	blx	r3
 80132de:	463a      	mov	r2, r7
 80132e0:	4631      	mov	r1, r6
 80132e2:	4603      	mov	r3, r0
 80132e4:	4620      	mov	r0, r4
 80132e6:	f7ff ff8b 	bl	8013200 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80132ea:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80132ec:	9004      	str	r0, [sp, #16]
 80132ee:	9307      	str	r3, [sp, #28]
 80132f0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80132f4:	f8ad 3020 	strh.w	r3, [sp, #32]
 80132f8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80132fc:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8013300:	4b0e      	ldr	r3, [pc, #56]	@ (801333c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 8013302:	881b      	ldrh	r3, [r3, #0]
 8013304:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 8013308:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 801330c:	f7f1 f91c 	bl	8004548 <_ZN8touchgfx3HAL3lcdEv>
 8013310:	6803      	ldr	r3, [r0, #0]
 8013312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013314:	4798      	blx	r3
 8013316:	23ff      	movs	r3, #255	@ 0xff
 8013318:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 801331c:	a903      	add	r1, sp, #12
 801331e:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 8013322:	6860      	ldr	r0, [r4, #4]
 8013324:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 8013328:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 801332c:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 8013330:	6803      	ldr	r3, [r0, #0]
 8013332:	685b      	ldr	r3, [r3, #4]
 8013334:	4798      	blx	r3
 8013336:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8013338:	b00d      	add	sp, #52	@ 0x34
 801333a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801333c:	20029ed2 	.word	0x20029ed2

08013340 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8013340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013344:	b08c      	sub	sp, #48	@ 0x30
 8013346:	461e      	mov	r6, r3
 8013348:	2300      	movs	r3, #0
 801334a:	4604      	mov	r4, r0
 801334c:	466d      	mov	r5, sp
 801334e:	9306      	str	r3, [sp, #24]
 8013350:	6803      	ldr	r3, [r0, #0]
 8013352:	e885 0006 	stmia.w	r5, {r1, r2}
 8013356:	2501      	movs	r5, #1
 8013358:	f8bd 7000 	ldrh.w	r7, [sp]
 801335c:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 8013360:	9503      	str	r5, [sp, #12]
 8013362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013364:	4798      	blx	r3
 8013366:	4642      	mov	r2, r8
 8013368:	4639      	mov	r1, r7
 801336a:	4603      	mov	r3, r0
 801336c:	4620      	mov	r0, r4
 801336e:	f7ff ff47 	bl	8013200 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8013372:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8013376:	9004      	str	r0, [sp, #16]
 8013378:	f8ad 3020 	strh.w	r3, [sp, #32]
 801337c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8013380:	9607      	str	r6, [sp, #28]
 8013382:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8013386:	4b10      	ldr	r3, [pc, #64]	@ (80133c8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 8013388:	881b      	ldrh	r3, [r3, #0]
 801338a:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 801338e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8013390:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 8013394:	f7f1 f8d8 	bl	8004548 <_ZN8touchgfx3HAL3lcdEv>
 8013398:	6803      	ldr	r3, [r0, #0]
 801339a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801339c:	4798      	blx	r3
 801339e:	23ff      	movs	r3, #255	@ 0xff
 80133a0:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 80133a4:	a903      	add	r1, sp, #12
 80133a6:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 80133aa:	6860      	ldr	r0, [r4, #4]
 80133ac:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 80133b0:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 80133b4:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 80133b8:	6803      	ldr	r3, [r0, #0]
 80133ba:	685b      	ldr	r3, [r3, #4]
 80133bc:	4798      	blx	r3
 80133be:	4630      	mov	r0, r6
 80133c0:	b00c      	add	sp, #48	@ 0x30
 80133c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80133c6:	bf00      	nop
 80133c8:	20029ed2 	.word	0x20029ed2

080133cc <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 80133cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80133ce:	b085      	sub	sp, #20
 80133d0:	4605      	mov	r5, r0
 80133d2:	ac02      	add	r4, sp, #8
 80133d4:	e884 0006 	stmia.w	r4, {r1, r2}
 80133d8:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 80133dc:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 80133e0:	f7ff fde6 	bl	8012fb0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80133e4:	4631      	mov	r1, r6
 80133e6:	4603      	mov	r3, r0
 80133e8:	463a      	mov	r2, r7
 80133ea:	4628      	mov	r0, r5
 80133ec:	f7ff ff08 	bl	8013200 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80133f0:	4a05      	ldr	r2, [pc, #20]	@ (8013408 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 80133f2:	682b      	ldr	r3, [r5, #0]
 80133f4:	8812      	ldrh	r2, [r2, #0]
 80133f6:	9200      	str	r2, [sp, #0]
 80133f8:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 80133fa:	4603      	mov	r3, r0
 80133fc:	4628      	mov	r0, r5
 80133fe:	e894 0006 	ldmia.w	r4, {r1, r2}
 8013402:	47b0      	blx	r6
 8013404:	b005      	add	sp, #20
 8013406:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013408:	20029ed2 	.word	0x20029ed2

0801340c <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 801340c:	b570      	push	{r4, r5, r6, lr}
 801340e:	f890 306e 	ldrb.w	r3, [r0, #110]	@ 0x6e
 8013412:	4604      	mov	r4, r0
 8013414:	b19b      	cbz	r3, 801343e <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8013416:	2002      	movs	r0, #2
 8013418:	f7f0 fa02 	bl	8003820 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 801341c:	2300      	movs	r3, #0
 801341e:	4620      	mov	r0, r4
 8013420:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 8013424:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 8013428:	6823      	ldr	r3, [r4, #0]
 801342a:	f8d3 50b8 	ldr.w	r5, [r3, #184]	@ 0xb8
 801342e:	f7ff fdbf 	bl	8012fb0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8013432:	4601      	mov	r1, r0
 8013434:	4620      	mov	r0, r4
 8013436:	462b      	mov	r3, r5
 8013438:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801343c:	4718      	bx	r3
 801343e:	bd70      	pop	{r4, r5, r6, pc}

08013440 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8013440:	b538      	push	{r3, r4, r5, lr}
 8013442:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 8013446:	4604      	mov	r4, r0
 8013448:	460d      	mov	r5, r1
 801344a:	428b      	cmp	r3, r1
 801344c:	d006      	beq.n	801345c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 801344e:	6803      	ldr	r3, [r0, #0]
 8013450:	b929      	cbnz	r1, 801345e <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 8013452:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8013456:	4798      	blx	r3
 8013458:	f884 507b 	strb.w	r5, [r4, #123]	@ 0x7b
 801345c:	bd38      	pop	{r3, r4, r5, pc}
 801345e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8013462:	e7f8      	b.n	8013456 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

08013464 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8013464:	4b0d      	ldr	r3, [pc, #52]	@ (801349c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8013466:	b510      	push	{r4, lr}
 8013468:	781b      	ldrb	r3, [r3, #0]
 801346a:	4604      	mov	r4, r0
 801346c:	b95b      	cbnz	r3, 8013486 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801346e:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 8013472:	2b02      	cmp	r3, #2
 8013474:	d007      	beq.n	8013486 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8013476:	6840      	ldr	r0, [r0, #4]
 8013478:	f000 f92c 	bl	80136d4 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 801347c:	b118      	cbz	r0, 8013486 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801347e:	6862      	ldr	r2, [r4, #4]
 8013480:	7a53      	ldrb	r3, [r2, #9]
 8013482:	2b00      	cmp	r3, #0
 8013484:	d0fc      	beq.n	8013480 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8013486:	f7f0 fb43 	bl	8003b10 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801348a:	4620      	mov	r0, r4
 801348c:	2100      	movs	r1, #0
 801348e:	f7ff ffd7 	bl	8013440 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8013492:	4620      	mov	r0, r4
 8013494:	f7ff fd8c 	bl	8012fb0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8013498:	bd10      	pop	{r4, pc}
 801349a:	bf00      	nop
 801349c:	20029ed6 	.word	0x20029ed6

080134a0 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>:
 80134a0:	b570      	push	{r4, r5, r6, lr}
 80134a2:	4604      	mov	r4, r0
 80134a4:	6803      	ldr	r3, [r0, #0]
 80134a6:	b919      	cbnz	r1, 80134b0 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE+0x10>
 80134a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80134aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80134ae:	4718      	bx	r3
 80134b0:	2200      	movs	r2, #0
 80134b2:	f890 607b 	ldrb.w	r6, [r0, #123]	@ 0x7b
 80134b6:	f880 207b 	strb.w	r2, [r0, #123]	@ 0x7b
 80134ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80134bc:	4798      	blx	r3
 80134be:	6863      	ldr	r3, [r4, #4]
 80134c0:	2101      	movs	r1, #1
 80134c2:	4605      	mov	r5, r0
 80134c4:	4620      	mov	r0, r4
 80134c6:	7299      	strb	r1, [r3, #10]
 80134c8:	f884 607b 	strb.w	r6, [r4, #123]	@ 0x7b
 80134cc:	f7ff ffb8 	bl	8013440 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 80134d0:	4628      	mov	r0, r5
 80134d2:	bd70      	pop	{r4, r5, r6, pc}

080134d4 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 80134d4:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 80134d8:	1a13      	subs	r3, r2, r0
 80134da:	4258      	negs	r0, r3
 80134dc:	4158      	adcs	r0, r3
 80134de:	4770      	bx	lr

080134e0 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 80134e0:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 80134e4:	1a9b      	subs	r3, r3, r2
 80134e6:	2b00      	cmp	r3, #0
 80134e8:	bfdc      	itt	le
 80134ea:	6882      	ldrle	r2, [r0, #8]
 80134ec:	189b      	addle	r3, r3, r2
 80134ee:	2b01      	cmp	r3, #1
 80134f0:	bfcc      	ite	gt
 80134f2:	2000      	movgt	r0, #0
 80134f4:	2001      	movle	r0, #1
 80134f6:	4770      	bx	lr

080134f8 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 80134f8:	6902      	ldr	r2, [r0, #16]
 80134fa:	6843      	ldr	r3, [r0, #4]
 80134fc:	2024      	movs	r0, #36	@ 0x24
 80134fe:	fb00 3002 	mla	r0, r0, r2, r3
 8013502:	4770      	bx	lr

08013504 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8013504:	6803      	ldr	r3, [r0, #0]
 8013506:	691b      	ldr	r3, [r3, #16]
 8013508:	4718      	bx	r3

0801350a <_ZN8touchgfx13DMA_Interface7executeEv>:
 801350a:	2301      	movs	r3, #1
 801350c:	b570      	push	{r4, r5, r6, lr}
 801350e:	7203      	strb	r3, [r0, #8]
 8013510:	4604      	mov	r4, r0
 8013512:	6840      	ldr	r0, [r0, #4]
 8013514:	6803      	ldr	r3, [r0, #0]
 8013516:	699b      	ldr	r3, [r3, #24]
 8013518:	4798      	blx	r3
 801351a:	6803      	ldr	r3, [r0, #0]
 801351c:	4605      	mov	r5, r0
 801351e:	2b40      	cmp	r3, #64	@ 0x40
 8013520:	d00c      	beq.n	801353c <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8013522:	d810      	bhi.n	8013546 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8013524:	2b04      	cmp	r3, #4
 8013526:	d01d      	beq.n	8013564 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 8013528:	d804      	bhi.n	8013534 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 801352a:	2b01      	cmp	r3, #1
 801352c:	d006      	beq.n	801353c <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801352e:	2b02      	cmp	r3, #2
 8013530:	d02c      	beq.n	801358c <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 8013532:	bd70      	pop	{r4, r5, r6, pc}
 8013534:	2b08      	cmp	r3, #8
 8013536:	d01d      	beq.n	8013574 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 8013538:	2b20      	cmp	r3, #32
 801353a:	d1fa      	bne.n	8013532 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 801353c:	6823      	ldr	r3, [r4, #0]
 801353e:	4620      	mov	r0, r4
 8013540:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013542:	4798      	blx	r3
 8013544:	e013      	b.n	801356e <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8013546:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801354a:	d0f7      	beq.n	801353c <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801354c:	d804      	bhi.n	8013558 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 801354e:	2b80      	cmp	r3, #128	@ 0x80
 8013550:	d0f4      	beq.n	801353c <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8013552:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013556:	e7f0      	b.n	801353a <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 8013558:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801355c:	d0ee      	beq.n	801353c <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801355e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8013562:	e7e5      	b.n	8013530 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 8013564:	6823      	ldr	r3, [r4, #0]
 8013566:	7f01      	ldrb	r1, [r0, #28]
 8013568:	4620      	mov	r0, r4
 801356a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801356c:	4798      	blx	r3
 801356e:	6823      	ldr	r3, [r4, #0]
 8013570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013572:	e006      	b.n	8013582 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8013574:	6823      	ldr	r3, [r4, #0]
 8013576:	7f01      	ldrb	r1, [r0, #28]
 8013578:	4620      	mov	r0, r4
 801357a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801357c:	4798      	blx	r3
 801357e:	6823      	ldr	r3, [r4, #0]
 8013580:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013582:	4629      	mov	r1, r5
 8013584:	4620      	mov	r0, r4
 8013586:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801358a:	4718      	bx	r3
 801358c:	6823      	ldr	r3, [r4, #0]
 801358e:	4620      	mov	r0, r4
 8013590:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013592:	4798      	blx	r3
 8013594:	e7f3      	b.n	801357e <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

08013596 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8013596:	4770      	bx	lr

08013598 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8013598:	4770      	bx	lr

0801359a <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 801359a:	4770      	bx	lr

0801359c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 801359c:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 80135a0:	b510      	push	{r4, lr}
 80135a2:	1ad2      	subs	r2, r2, r3
 80135a4:	2a00      	cmp	r2, #0
 80135a6:	bfdc      	itt	le
 80135a8:	6884      	ldrle	r4, [r0, #8]
 80135aa:	1912      	addle	r2, r2, r4
 80135ac:	2a01      	cmp	r2, #1
 80135ae:	dd16      	ble.n	80135de <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 80135b0:	6842      	ldr	r2, [r0, #4]
 80135b2:	2424      	movs	r4, #36	@ 0x24
 80135b4:	fb04 2303 	mla	r3, r4, r3, r2
 80135b8:	f101 0220 	add.w	r2, r1, #32
 80135bc:	f851 4b04 	ldr.w	r4, [r1], #4
 80135c0:	4291      	cmp	r1, r2
 80135c2:	f843 4b04 	str.w	r4, [r3], #4
 80135c6:	d1f9      	bne.n	80135bc <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 80135c8:	780a      	ldrb	r2, [r1, #0]
 80135ca:	701a      	strb	r2, [r3, #0]
 80135cc:	68c3      	ldr	r3, [r0, #12]
 80135ce:	6882      	ldr	r2, [r0, #8]
 80135d0:	f3bf 8f5b 	dmb	ish
 80135d4:	3301      	adds	r3, #1
 80135d6:	429a      	cmp	r2, r3
 80135d8:	bfd8      	it	le
 80135da:	1a9b      	suble	r3, r3, r2
 80135dc:	60c3      	str	r3, [r0, #12]
 80135de:	bd10      	pop	{r4, pc}

080135e0 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 80135e0:	6903      	ldr	r3, [r0, #16]
 80135e2:	6882      	ldr	r2, [r0, #8]
 80135e4:	f3bf 8f5b 	dmb	ish
 80135e8:	3301      	adds	r3, #1
 80135ea:	429a      	cmp	r2, r3
 80135ec:	bfd8      	it	le
 80135ee:	1a9b      	suble	r3, r3, r2
 80135f0:	6103      	str	r3, [r0, #16]
 80135f2:	4770      	bx	lr

080135f4 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 80135f4:	b570      	push	{r4, r5, r6, lr}
 80135f6:	4604      	mov	r4, r0
 80135f8:	460e      	mov	r6, r1
 80135fa:	6860      	ldr	r0, [r4, #4]
 80135fc:	6803      	ldr	r3, [r0, #0]
 80135fe:	685b      	ldr	r3, [r3, #4]
 8013600:	4798      	blx	r3
 8013602:	2800      	cmp	r0, #0
 8013604:	d1f9      	bne.n	80135fa <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8013606:	4d0d      	ldr	r5, [pc, #52]	@ (801363c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8013608:	6828      	ldr	r0, [r5, #0]
 801360a:	6803      	ldr	r3, [r0, #0]
 801360c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801360e:	4798      	blx	r3
 8013610:	f7f0 fa8c 	bl	8003b2c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8013614:	6828      	ldr	r0, [r5, #0]
 8013616:	2101      	movs	r1, #1
 8013618:	f7ff ff12 	bl	8013440 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 801361c:	6860      	ldr	r0, [r4, #4]
 801361e:	4631      	mov	r1, r6
 8013620:	6803      	ldr	r3, [r0, #0]
 8013622:	689b      	ldr	r3, [r3, #8]
 8013624:	4798      	blx	r3
 8013626:	6823      	ldr	r3, [r4, #0]
 8013628:	4620      	mov	r0, r4
 801362a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801362c:	4798      	blx	r3
 801362e:	6828      	ldr	r0, [r5, #0]
 8013630:	6803      	ldr	r3, [r0, #0]
 8013632:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013636:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013638:	4718      	bx	r3
 801363a:	bf00      	nop
 801363c:	20029ed8 	.word	0x20029ed8

08013640 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8013640:	b508      	push	{r3, lr}
 8013642:	f7f0 fa65 	bl	8003b10 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8013646:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801364a:	f7f0 ba69 	b.w	8003b20 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801364e <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 801364e:	b510      	push	{r4, lr}
 8013650:	4604      	mov	r4, r0
 8013652:	2114      	movs	r1, #20
 8013654:	f016 fe34 	bl	802a2c0 <_ZdlPvj>
 8013658:	4620      	mov	r0, r4
 801365a:	bd10      	pop	{r4, pc}

0801365c <_ZN8touchgfx13DMA_Interface5startEv>:
 801365c:	b510      	push	{r4, lr}
 801365e:	4604      	mov	r4, r0
 8013660:	6840      	ldr	r0, [r0, #4]
 8013662:	6803      	ldr	r3, [r0, #0]
 8013664:	681b      	ldr	r3, [r3, #0]
 8013666:	4798      	blx	r3
 8013668:	b948      	cbnz	r0, 801367e <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801366a:	7a63      	ldrb	r3, [r4, #9]
 801366c:	b13b      	cbz	r3, 801367e <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801366e:	7a23      	ldrb	r3, [r4, #8]
 8013670:	b92b      	cbnz	r3, 801367e <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8013672:	6823      	ldr	r3, [r4, #0]
 8013674:	4620      	mov	r0, r4
 8013676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013678:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801367c:	4718      	bx	r3
 801367e:	bd10      	pop	{r4, pc}

08013680 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8013680:	b570      	push	{r4, r5, r6, lr}
 8013682:	4604      	mov	r4, r0
 8013684:	6840      	ldr	r0, [r0, #4]
 8013686:	6803      	ldr	r3, [r0, #0]
 8013688:	681b      	ldr	r3, [r3, #0]
 801368a:	4798      	blx	r3
 801368c:	4605      	mov	r5, r0
 801368e:	b930      	cbnz	r0, 801369e <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8013690:	7a23      	ldrb	r3, [r4, #8]
 8013692:	b123      	cbz	r3, 801369e <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8013694:	6860      	ldr	r0, [r4, #4]
 8013696:	6803      	ldr	r3, [r0, #0]
 8013698:	695b      	ldr	r3, [r3, #20]
 801369a:	4798      	blx	r3
 801369c:	7225      	strb	r5, [r4, #8]
 801369e:	6860      	ldr	r0, [r4, #4]
 80136a0:	6803      	ldr	r3, [r0, #0]
 80136a2:	681b      	ldr	r3, [r3, #0]
 80136a4:	4798      	blx	r3
 80136a6:	b928      	cbnz	r0, 80136b4 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 80136a8:	6823      	ldr	r3, [r4, #0]
 80136aa:	4620      	mov	r0, r4
 80136ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80136ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80136b2:	4718      	bx	r3
 80136b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80136b8:	f7f0 ba40 	b.w	8003b3c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

080136bc <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 80136bc:	b510      	push	{r4, lr}
 80136be:	6082      	str	r2, [r0, #8]
 80136c0:	2200      	movs	r2, #0
 80136c2:	4c03      	ldr	r4, [pc, #12]	@ (80136d0 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 80136c4:	e9c0 2203 	strd	r2, r2, [r0, #12]
 80136c8:	e9c0 4100 	strd	r4, r1, [r0]
 80136cc:	bd10      	pop	{r4, pc}
 80136ce:	bf00      	nop
 80136d0:	08041e38 	.word	0x08041e38

080136d4 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 80136d4:	6840      	ldr	r0, [r0, #4]
 80136d6:	6803      	ldr	r3, [r0, #0]
 80136d8:	681b      	ldr	r3, [r3, #0]
 80136da:	4718      	bx	r3

080136dc <_ZN8touchgfx15PainterARGB88888setColorENS_9colortypeE>:
 80136dc:	0c0b      	lsrs	r3, r1, #16
 80136de:	60c1      	str	r1, [r0, #12]
 80136e0:	7481      	strb	r1, [r0, #18]
 80136e2:	7403      	strb	r3, [r0, #16]
 80136e4:	0a0b      	lsrs	r3, r1, #8
 80136e6:	7443      	strb	r3, [r0, #17]
 80136e8:	4770      	bx	lr

080136ea <_ZThn8_N8touchgfx15PainterARGB88888setColorENS_9colortypeE>:
 80136ea:	f1a0 0008 	sub.w	r0, r0, #8
 80136ee:	e7f5      	b.n	80136dc <_ZN8touchgfx15PainterARGB88888setColorENS_9colortypeE>

080136f0 <_ZNK8touchgfx15PainterARGB88885paintEPhssssh>:
 80136f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80136f4:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80136f8:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 80136fc:	68c1      	ldr	r1, [r0, #12]
 80136fe:	f9bd c024 	ldrsh.w	ip, [sp, #36]	@ 0x24
 8013702:	2fff      	cmp	r7, #255	@ 0xff
 8013704:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8013708:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 801370c:	ea41 6107 	orr.w	r1, r1, r7, lsl #24
 8013710:	d105      	bne.n	801371e <_ZNK8touchgfx15PainterARGB88885paintEPhssssh+0x2e>
 8013712:	f842 1b04 	str.w	r1, [r2], #4
 8013716:	4594      	cmp	ip, r2
 8013718:	d8fb      	bhi.n	8013712 <_ZNK8touchgfx15PainterARGB88885paintEPhssssh+0x22>
 801371a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801371e:	6816      	ldr	r6, [r2, #0]
 8013720:	ea5f 6916 	movs.w	r9, r6, lsr #24
 8013724:	d104      	bne.n	8013730 <_ZNK8touchgfx15PainterARGB88885paintEPhssssh+0x40>
 8013726:	6011      	str	r1, [r2, #0]
 8013728:	3204      	adds	r2, #4
 801372a:	4594      	cmp	ip, r2
 801372c:	d8f7      	bhi.n	801371e <_ZNK8touchgfx15PainterARGB88885paintEPhssssh+0x2e>
 801372e:	e7f4      	b.n	801371a <_ZNK8touchgfx15PainterARGB88885paintEPhssssh+0x2a>
 8013730:	2f00      	cmp	r7, #0
 8013732:	d0f9      	beq.n	8013728 <_ZNK8touchgfx15PainterARGB88885paintEPhssssh+0x38>
 8013734:	fb07 f809 	mul.w	r8, r7, r9
 8013738:	b2f5      	uxtb	r5, r6
 801373a:	f3c6 2407 	ubfx	r4, r6, #8, #8
 801373e:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8013742:	f108 0301 	add.w	r3, r8, #1
 8013746:	fb09 fa05 	mul.w	sl, r9, r5
 801374a:	eb03 2328 	add.w	r3, r3, r8, asr #8
 801374e:	ea4f 2823 	mov.w	r8, r3, asr #8
 8013752:	eb07 0309 	add.w	r3, r7, r9
 8013756:	eba3 0308 	sub.w	r3, r3, r8
 801375a:	fa5f fe83 	uxtb.w	lr, r3
 801375e:	7c83      	ldrb	r3, [r0, #18]
 8013760:	fb03 a307 	mla	r3, r3, r7, sl
 8013764:	fb04 fa09 	mul.w	sl, r4, r9
 8013768:	fb08 3515 	mls	r5, r8, r5, r3
 801376c:	7c43      	ldrb	r3, [r0, #17]
 801376e:	fb03 a307 	mla	r3, r3, r7, sl
 8013772:	fb95 f5fe 	sdiv	r5, r5, lr
 8013776:	fb08 3414 	mls	r4, r8, r4, r3
 801377a:	ea45 650e 	orr.w	r5, r5, lr, lsl #24
 801377e:	fb06 f309 	mul.w	r3, r6, r9
 8013782:	fb94 f4fe 	sdiv	r4, r4, lr
 8013786:	ea45 2404 	orr.w	r4, r5, r4, lsl #8
 801378a:	7c05      	ldrb	r5, [r0, #16]
 801378c:	fb05 3307 	mla	r3, r5, r7, r3
 8013790:	fb08 3316 	mls	r3, r8, r6, r3
 8013794:	fb93 f3fe 	sdiv	r3, r3, lr
 8013798:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 801379c:	6013      	str	r3, [r2, #0]
 801379e:	e7c3      	b.n	8013728 <_ZNK8touchgfx15PainterARGB88885paintEPhssssh+0x38>

080137a0 <_ZN8touchgfx15PainterARGB8888D1Ev>:
 80137a0:	4770      	bx	lr

080137a2 <_ZThn8_N8touchgfx15PainterARGB8888D1Ev>:
 80137a2:	3808      	subs	r0, #8
 80137a4:	4770      	bx	lr

080137a6 <_ZN8touchgfx15PainterARGB8888D0Ev>:
 80137a6:	b510      	push	{r4, lr}
 80137a8:	4604      	mov	r4, r0
 80137aa:	2114      	movs	r1, #20
 80137ac:	f016 fd88 	bl	802a2c0 <_ZdlPvj>
 80137b0:	4620      	mov	r0, r4
 80137b2:	bd10      	pop	{r4, pc}

080137b4 <_ZThn8_N8touchgfx15PainterARGB8888D0Ev>:
 80137b4:	f1a0 0008 	sub.w	r0, r0, #8
 80137b8:	e7f5      	b.n	80137a6 <_ZN8touchgfx15PainterARGB8888D0Ev>
	...

080137bc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 80137bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80137be:	6803      	ldr	r3, [r0, #0]
 80137c0:	460d      	mov	r5, r1
 80137c2:	4604      	mov	r4, r0
 80137c4:	4601      	mov	r1, r0
 80137c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80137c8:	a802      	add	r0, sp, #8
 80137ca:	4798      	blx	r3
 80137cc:	6828      	ldr	r0, [r5, #0]
 80137ce:	6869      	ldr	r1, [r5, #4]
 80137d0:	466b      	mov	r3, sp
 80137d2:	c303      	stmia	r3!, {r0, r1}
 80137d4:	4668      	mov	r0, sp
 80137d6:	4619      	mov	r1, r3
 80137d8:	f7fe ff66 	bl	80126a8 <_ZN8touchgfx4RectaNERKS0_>
 80137dc:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80137de:	b188      	cbz	r0, 8013804 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 80137e0:	6803      	ldr	r3, [r0, #0]
 80137e2:	1d21      	adds	r1, r4, #4
 80137e4:	68db      	ldr	r3, [r3, #12]
 80137e6:	4798      	blx	r3
 80137e8:	b160      	cbz	r0, 8013804 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 80137ea:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80137ee:	2b00      	cmp	r3, #0
 80137f0:	dd08      	ble.n	8013804 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 80137f2:	f9bd 5006 	ldrsh.w	r5, [sp, #6]
 80137f6:	2d00      	cmp	r5, #0
 80137f8:	dd04      	ble.n	8013804 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 80137fa:	4a2b      	ldr	r2, [pc, #172]	@ (80138a8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>)
 80137fc:	7812      	ldrb	r2, [r2, #0]
 80137fe:	b11a      	cbz	r2, 8013808 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x4c>
 8013800:	2a01      	cmp	r2, #1
 8013802:	d029      	beq.n	8013858 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x9c>
 8013804:	b004      	add	sp, #16
 8013806:	bd70      	pop	{r4, r5, r6, pc}
 8013808:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801380c:	441d      	add	r5, r3
 801380e:	b2ad      	uxth	r5, r5
 8013810:	b22e      	sxth	r6, r5
 8013812:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8013816:	42b3      	cmp	r3, r6
 8013818:	daf4      	bge.n	8013804 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801381a:	6823      	ldr	r3, [r4, #0]
 801381c:	4669      	mov	r1, sp
 801381e:	4620      	mov	r0, r4
 8013820:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013822:	4798      	blx	r3
 8013824:	b940      	cbnz	r0, 8013838 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 8013826:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801382a:	2b01      	cmp	r3, #1
 801382c:	d004      	beq.n	8013838 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 801382e:	3301      	adds	r3, #1
 8013830:	105b      	asrs	r3, r3, #1
 8013832:	f8ad 3006 	strh.w	r3, [sp, #6]
 8013836:	e7f0      	b.n	801381a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 8013838:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801383c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8013840:	4413      	add	r3, r2
 8013842:	b29b      	uxth	r3, r3
 8013844:	441a      	add	r2, r3
 8013846:	f8ad 3002 	strh.w	r3, [sp, #2]
 801384a:	b212      	sxth	r2, r2
 801384c:	4296      	cmp	r6, r2
 801384e:	dae0      	bge.n	8013812 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 8013850:	1aeb      	subs	r3, r5, r3
 8013852:	f8ad 3006 	strh.w	r3, [sp, #6]
 8013856:	e7dc      	b.n	8013812 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 8013858:	f8bd 5000 	ldrh.w	r5, [sp]
 801385c:	441d      	add	r5, r3
 801385e:	b2ad      	uxth	r5, r5
 8013860:	b22e      	sxth	r6, r5
 8013862:	f9bd 3000 	ldrsh.w	r3, [sp]
 8013866:	42b3      	cmp	r3, r6
 8013868:	dacc      	bge.n	8013804 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801386a:	6823      	ldr	r3, [r4, #0]
 801386c:	4669      	mov	r1, sp
 801386e:	4620      	mov	r0, r4
 8013870:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013872:	4798      	blx	r3
 8013874:	b940      	cbnz	r0, 8013888 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 8013876:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801387a:	2b01      	cmp	r3, #1
 801387c:	d004      	beq.n	8013888 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 801387e:	3301      	adds	r3, #1
 8013880:	105b      	asrs	r3, r3, #1
 8013882:	f8ad 3004 	strh.w	r3, [sp, #4]
 8013886:	e7f0      	b.n	801386a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 8013888:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801388c:	f8bd 3000 	ldrh.w	r3, [sp]
 8013890:	4413      	add	r3, r2
 8013892:	b29b      	uxth	r3, r3
 8013894:	441a      	add	r2, r3
 8013896:	f8ad 3000 	strh.w	r3, [sp]
 801389a:	b212      	sxth	r2, r2
 801389c:	4296      	cmp	r6, r2
 801389e:	dae0      	bge.n	8013862 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 80138a0:	1aeb      	subs	r3, r5, r3
 80138a2:	f8ad 3004 	strh.w	r3, [sp, #4]
 80138a6:	e7dc      	b.n	8013862 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 80138a8:	20029ed0 	.word	0x20029ed0

080138ac <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 80138ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80138ae:	6803      	ldr	r3, [r0, #0]
 80138b0:	4604      	mov	r4, r0
 80138b2:	4601      	mov	r1, r0
 80138b4:	4668      	mov	r0, sp
 80138b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80138b8:	4798      	blx	r3
 80138ba:	2100      	movs	r1, #0
 80138bc:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 80138c0:	4668      	mov	r0, sp
 80138c2:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80138c6:	9102      	str	r1, [sp, #8]
 80138c8:	a902      	add	r1, sp, #8
 80138ca:	f8ad 200c 	strh.w	r2, [sp, #12]
 80138ce:	f8ad 300e 	strh.w	r3, [sp, #14]
 80138d2:	f7fe fee9 	bl	80126a8 <_ZN8touchgfx4RectaNERKS0_>
 80138d6:	6823      	ldr	r3, [r4, #0]
 80138d8:	4669      	mov	r1, sp
 80138da:	4620      	mov	r0, r4
 80138dc:	691b      	ldr	r3, [r3, #16]
 80138de:	4798      	blx	r3
 80138e0:	b004      	add	sp, #16
 80138e2:	bd10      	pop	{r4, pc}

080138e4 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 80138e4:	2101      	movs	r1, #1
 80138e6:	2200      	movs	r2, #0
 80138e8:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 80138ec:	490a      	ldr	r1, [pc, #40]	@ (8013918 <_ZN8touchgfx12CanvasWidgetC1Ev+0x34>)
 80138ee:	8082      	strh	r2, [r0, #4]
 80138f0:	6001      	str	r1, [r0, #0]
 80138f2:	21ff      	movs	r1, #255	@ 0xff
 80138f4:	80c2      	strh	r2, [r0, #6]
 80138f6:	8102      	strh	r2, [r0, #8]
 80138f8:	8142      	strh	r2, [r0, #10]
 80138fa:	8182      	strh	r2, [r0, #12]
 80138fc:	81c2      	strh	r2, [r0, #14]
 80138fe:	8202      	strh	r2, [r0, #16]
 8013900:	8242      	strh	r2, [r0, #18]
 8013902:	61c2      	str	r2, [r0, #28]
 8013904:	8402      	strh	r2, [r0, #32]
 8013906:	8442      	strh	r2, [r0, #34]	@ 0x22
 8013908:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
 801390c:	f880 1026 	strb.w	r1, [r0, #38]	@ 0x26
 8013910:	6282      	str	r2, [r0, #40]	@ 0x28
 8013912:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8013916:	4770      	bx	lr
 8013918:	08041e94 	.word	0x08041e94

0801391c <_ZNK8touchgfx4Line14getMinimalRectEv>:
 801391c:	f101 0364 	add.w	r3, r1, #100	@ 0x64
 8013920:	4602      	mov	r2, r0
 8013922:	cb03      	ldmia	r3!, {r0, r1}
 8013924:	6010      	str	r0, [r2, #0]
 8013926:	4610      	mov	r0, r2
 8013928:	6051      	str	r1, [r2, #4]
 801392a:	4770      	bx	lr

0801392c <_ZN8touchgfx4LineD1Ev>:
 801392c:	4770      	bx	lr

0801392e <_ZN8touchgfx4LineD0Ev>:
 801392e:	b510      	push	{r4, lr}
 8013930:	4604      	mov	r4, r0
 8013932:	2170      	movs	r1, #112	@ 0x70
 8013934:	f016 fcc4 	bl	802a2c0 <_ZdlPvj>
 8013938:	4620      	mov	r0, r4
 801393a:	bd10      	pop	{r4, pc}

0801393c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>:
 801393c:	b507      	push	{r0, r1, r2, lr}
 801393e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8013942:	ab01      	add	r3, sp, #4
 8013944:	6809      	ldr	r1, [r1, #0]
 8013946:	6800      	ldr	r0, [r0, #0]
 8013948:	f006 fc26 	bl	801a198 <_ZN8touchgfx6muldivElllRl>
 801394c:	b003      	add	sp, #12
 801394e:	f85d fb04 	ldr.w	pc, [sp], #4

08013952 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>:
 8013952:	6800      	ldr	r0, [r0, #0]
 8013954:	2800      	cmp	r0, #0
 8013956:	bfb9      	ittee	lt
 8013958:	2320      	movlt	r3, #32
 801395a:	fb90 f0f3 	sdivlt	r0, r0, r3
 801395e:	301f      	addge	r0, #31
 8013960:	1140      	asrge	r0, r0, #5
 8013962:	4770      	bx	lr

08013964 <_ZNK8touchgfx4Line17invalidateContentEv>:
 8013964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013968:	f890 3026 	ldrb.w	r3, [r0, #38]	@ 0x26
 801396c:	b089      	sub	sp, #36	@ 0x24
 801396e:	4604      	mov	r4, r0
 8013970:	b353      	cbz	r3, 80139c8 <_ZNK8touchgfx4Line17invalidateContentEv+0x64>
 8013972:	6803      	ldr	r3, [r0, #0]
 8013974:	4601      	mov	r1, r0
 8013976:	a802      	add	r0, sp, #8
 8013978:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801397a:	4798      	blx	r3
 801397c:	2220      	movs	r2, #32
 801397e:	f8d4 a02c 	ldr.w	sl, [r4, #44]	@ 0x2c
 8013982:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013984:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8013986:	f8d4 b000 	ldr.w	fp, [r4]
 801398a:	fb9a f0f2 	sdiv	r0, sl, r2
 801398e:	fb91 f5f2 	sdiv	r5, r1, r2
 8013992:	fb93 f6f2 	sdiv	r6, r3, r2
 8013996:	1b40      	subs	r0, r0, r5
 8013998:	0076      	lsls	r6, r6, #1
 801399a:	2800      	cmp	r0, #0
 801399c:	bfb8      	it	lt
 801399e:	4240      	neglt	r0, r0
 80139a0:	4286      	cmp	r6, r0
 80139a2:	dc0c      	bgt.n	80139be <_ZNK8touchgfx4Line17invalidateContentEv+0x5a>
 80139a4:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80139a6:	f8d4 8038 	ldr.w	r8, [r4, #56]	@ 0x38
 80139aa:	fb95 f0f2 	sdiv	r0, r5, r2
 80139ae:	fb98 f7f2 	sdiv	r7, r8, r2
 80139b2:	1bc0      	subs	r0, r0, r7
 80139b4:	2800      	cmp	r0, #0
 80139b6:	bfb8      	it	lt
 80139b8:	4240      	neglt	r0, r0
 80139ba:	4286      	cmp	r6, r0
 80139bc:	dd07      	ble.n	80139ce <_ZNK8touchgfx4Line17invalidateContentEv+0x6a>
 80139be:	f8db 3010 	ldr.w	r3, [fp, #16]
 80139c2:	a902      	add	r1, sp, #8
 80139c4:	4620      	mov	r0, r4
 80139c6:	4798      	blx	r3
 80139c8:	b009      	add	sp, #36	@ 0x24
 80139ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80139ce:	eb01 060a 	add.w	r6, r1, sl
 80139d2:	2002      	movs	r0, #2
 80139d4:	eb08 0705 	add.w	r7, r8, r5
 80139d8:	3301      	adds	r3, #1
 80139da:	f10d 0920 	add.w	r9, sp, #32
 80139de:	9101      	str	r1, [sp, #4]
 80139e0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80139e4:	fb96 f6f0 	sdiv	r6, r6, r0
 80139e8:	fb97 f7f0 	sdiv	r7, r7, r0
 80139ec:	4103      	asrs	r3, r0
 80139ee:	b236      	sxth	r6, r6
 80139f0:	b23f      	sxth	r7, r7
 80139f2:	f849 3d08 	str.w	r3, [r9, #-8]!
 80139f6:	4648      	mov	r0, r9
 80139f8:	fb96 f6f2 	sdiv	r6, r6, r2
 80139fc:	fb97 f7f2 	sdiv	r7, r7, r2
 8013a00:	f7ff ffa7 	bl	8013952 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 8013a04:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8013a08:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
 8013a0c:	fa1f fe87 	uxth.w	lr, r7
 8013a10:	9901      	ldr	r1, [sp, #4]
 8013a12:	fa1f fc86 	uxth.w	ip, r6
 8013a16:	4293      	cmp	r3, r2
 8013a18:	b280      	uxth	r0, r0
 8013a1a:	eba1 0a0a 	sub.w	sl, r1, sl
 8013a1e:	da54      	bge.n	8013aca <_ZNK8touchgfx4Line17invalidateContentEv+0x166>
 8013a20:	ebac 0100 	sub.w	r1, ip, r0
 8013a24:	f1ba 0f00 	cmp.w	sl, #0
 8013a28:	4460      	add	r0, ip
 8013a2a:	f9bd a008 	ldrsh.w	sl, [sp, #8]
 8013a2e:	b289      	uxth	r1, r1
 8013a30:	f9bd c00a 	ldrsh.w	ip, [sp, #10]
 8013a34:	b280      	uxth	r0, r0
 8013a36:	b20e      	sxth	r6, r1
 8013a38:	da29      	bge.n	8013a8e <_ZNK8touchgfx4Line17invalidateContentEv+0x12a>
 8013a3a:	eba8 0505 	sub.w	r5, r8, r5
 8013a3e:	2d00      	cmp	r5, #0
 8013a40:	da2a      	bge.n	8013a98 <_ZNK8touchgfx4Line17invalidateContentEv+0x134>
 8013a42:	fa1f f88a 	uxth.w	r8, sl
 8013a46:	f8ad a010 	strh.w	sl, [sp, #16]
 8013a4a:	fa1f f58c 	uxth.w	r5, ip
 8013a4e:	f8ad c012 	strh.w	ip, [sp, #18]
 8013a52:	eba0 0008 	sub.w	r0, r0, r8
 8013a56:	4443      	add	r3, r8
 8013a58:	f8ad 6018 	strh.w	r6, [sp, #24]
 8013a5c:	f8ad 0014 	strh.w	r0, [sp, #20]
 8013a60:	1a59      	subs	r1, r3, r1
 8013a62:	ebae 0005 	sub.w	r0, lr, r5
 8013a66:	f8ad 701a 	strh.w	r7, [sp, #26]
 8013a6a:	f8ad 101c 	strh.w	r1, [sp, #28]
 8013a6e:	f8ad 0016 	strh.w	r0, [sp, #22]
 8013a72:	442a      	add	r2, r5
 8013a74:	eba2 0e0e 	sub.w	lr, r2, lr
 8013a78:	f8ad e01e 	strh.w	lr, [sp, #30]
 8013a7c:	f8db 3010 	ldr.w	r3, [fp, #16]
 8013a80:	a904      	add	r1, sp, #16
 8013a82:	4620      	mov	r0, r4
 8013a84:	4798      	blx	r3
 8013a86:	6823      	ldr	r3, [r4, #0]
 8013a88:	4649      	mov	r1, r9
 8013a8a:	691b      	ldr	r3, [r3, #16]
 8013a8c:	e79a      	b.n	80139c4 <_ZNK8touchgfx4Line17invalidateContentEv+0x60>
 8013a8e:	d003      	beq.n	8013a98 <_ZNK8touchgfx4Line17invalidateContentEv+0x134>
 8013a90:	eba8 0505 	sub.w	r5, r8, r5
 8013a94:	2d00      	cmp	r5, #0
 8013a96:	dcd4      	bgt.n	8013a42 <_ZNK8touchgfx4Line17invalidateContentEv+0xde>
 8013a98:	fa1f f88a 	uxth.w	r8, sl
 8013a9c:	f8ad 6010 	strh.w	r6, [sp, #16]
 8013aa0:	fa1f f58c 	uxth.w	r5, ip
 8013aa4:	f8ad c012 	strh.w	ip, [sp, #18]
 8013aa8:	4443      	add	r3, r8
 8013aaa:	eba0 0008 	sub.w	r0, r0, r8
 8013aae:	f8ad a018 	strh.w	sl, [sp, #24]
 8013ab2:	1a59      	subs	r1, r3, r1
 8013ab4:	ebae 0305 	sub.w	r3, lr, r5
 8013ab8:	f8ad 701a 	strh.w	r7, [sp, #26]
 8013abc:	f8ad 1014 	strh.w	r1, [sp, #20]
 8013ac0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013ac4:	f8ad 001c 	strh.w	r0, [sp, #28]
 8013ac8:	e7d3      	b.n	8013a72 <_ZNK8touchgfx4Line17invalidateContentEv+0x10e>
 8013aca:	ebae 0100 	sub.w	r1, lr, r0
 8013ace:	f1ba 0f00 	cmp.w	sl, #0
 8013ad2:	4470      	add	r0, lr
 8013ad4:	f9bd a00a 	ldrsh.w	sl, [sp, #10]
 8013ad8:	b289      	uxth	r1, r1
 8013ada:	f9bd e008 	ldrsh.w	lr, [sp, #8]
 8013ade:	b280      	uxth	r0, r0
 8013ae0:	b20f      	sxth	r7, r1
 8013ae2:	da20      	bge.n	8013b26 <_ZNK8touchgfx4Line17invalidateContentEv+0x1c2>
 8013ae4:	eba8 0505 	sub.w	r5, r8, r5
 8013ae8:	2d00      	cmp	r5, #0
 8013aea:	da21      	bge.n	8013b30 <_ZNK8touchgfx4Line17invalidateContentEv+0x1cc>
 8013aec:	fa1f f88e 	uxth.w	r8, lr
 8013af0:	f8ad e010 	strh.w	lr, [sp, #16]
 8013af4:	fa1f f58a 	uxth.w	r5, sl
 8013af8:	f8ad a012 	strh.w	sl, [sp, #18]
 8013afc:	4443      	add	r3, r8
 8013afe:	ebac 0e08 	sub.w	lr, ip, r8
 8013b02:	442a      	add	r2, r5
 8013b04:	1b40      	subs	r0, r0, r5
 8013b06:	eba3 0c0c 	sub.w	ip, r3, ip
 8013b0a:	f8ad e014 	strh.w	lr, [sp, #20]
 8013b0e:	1a51      	subs	r1, r2, r1
 8013b10:	f8ad 0016 	strh.w	r0, [sp, #22]
 8013b14:	f8ad 6018 	strh.w	r6, [sp, #24]
 8013b18:	f8ad 701a 	strh.w	r7, [sp, #26]
 8013b1c:	f8ad c01c 	strh.w	ip, [sp, #28]
 8013b20:	f8ad 101e 	strh.w	r1, [sp, #30]
 8013b24:	e7aa      	b.n	8013a7c <_ZNK8touchgfx4Line17invalidateContentEv+0x118>
 8013b26:	d003      	beq.n	8013b30 <_ZNK8touchgfx4Line17invalidateContentEv+0x1cc>
 8013b28:	eba8 0505 	sub.w	r5, r8, r5
 8013b2c:	2d00      	cmp	r5, #0
 8013b2e:	dcdd      	bgt.n	8013aec <_ZNK8touchgfx4Line17invalidateContentEv+0x188>
 8013b30:	fa1f f58e 	uxth.w	r5, lr
 8013b34:	f8ad 7012 	strh.w	r7, [sp, #18]
 8013b38:	fa1f f88a 	uxth.w	r8, sl
 8013b3c:	f8ad e010 	strh.w	lr, [sp, #16]
 8013b40:	442b      	add	r3, r5
 8013b42:	ebac 0705 	sub.w	r7, ip, r5
 8013b46:	4442      	add	r2, r8
 8013b48:	eba0 0008 	sub.w	r0, r0, r8
 8013b4c:	eba3 0c0c 	sub.w	ip, r3, ip
 8013b50:	f8ad 7014 	strh.w	r7, [sp, #20]
 8013b54:	1a51      	subs	r1, r2, r1
 8013b56:	f8ad 6018 	strh.w	r6, [sp, #24]
 8013b5a:	f8ad a01a 	strh.w	sl, [sp, #26]
 8013b5e:	f8ad 1016 	strh.w	r1, [sp, #22]
 8013b62:	f8ad c01c 	strh.w	ip, [sp, #28]
 8013b66:	f8ad 001e 	strh.w	r0, [sp, #30]
 8013b6a:	e787      	b.n	8013a7c <_ZNK8touchgfx4Line17invalidateContentEv+0x118>

08013b6c <_ZN8touchgfx7CWRUtil4sineEi>:
 8013b6c:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 8013b70:	fb90 f2f3 	sdiv	r2, r0, r3
 8013b74:	fb02 0013 	mls	r0, r2, r3, r0
 8013b78:	2800      	cmp	r0, #0
 8013b7a:	bfb8      	it	lt
 8013b7c:	18c0      	addlt	r0, r0, r3
 8013b7e:	4b0a      	ldr	r3, [pc, #40]	@ (8013ba8 <_ZN8touchgfx7CWRUtil4sineEi+0x3c>)
 8013b80:	285a      	cmp	r0, #90	@ 0x5a
 8013b82:	dc02      	bgt.n	8013b8a <_ZN8touchgfx7CWRUtil4sineEi+0x1e>
 8013b84:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8013b88:	4770      	bx	lr
 8013b8a:	28b4      	cmp	r0, #180	@ 0xb4
 8013b8c:	dc02      	bgt.n	8013b94 <_ZN8touchgfx7CWRUtil4sineEi+0x28>
 8013b8e:	f1c0 00b4 	rsb	r0, r0, #180	@ 0xb4
 8013b92:	e7f7      	b.n	8013b84 <_ZN8touchgfx7CWRUtil4sineEi+0x18>
 8013b94:	f5b0 7f87 	cmp.w	r0, #270	@ 0x10e
 8013b98:	bfd4      	ite	le
 8013b9a:	38b4      	suble	r0, #180	@ 0xb4
 8013b9c:	f5c0 70b4 	rsbgt	r0, r0, #360	@ 0x168
 8013ba0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8013ba4:	4240      	negs	r0, r0
 8013ba6:	4770      	bx	lr
 8013ba8:	08041f60 	.word	0x08041f60

08013bac <_ZN8touchgfx7CWRUtil5isqrtEm>:
 8013bac:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8013bb0:	f04f 0300 	mov.w	r3, #0
 8013bb4:	bf2c      	ite	cs
 8013bb6:	f04f 4280 	movcs.w	r2, #1073741824	@ 0x40000000
 8013bba:	f44f 4280 	movcc.w	r2, #16384	@ 0x4000
 8013bbe:	1899      	adds	r1, r3, r2
 8013bc0:	4288      	cmp	r0, r1
 8013bc2:	bf24      	itt	cs
 8013bc4:	1853      	addcs	r3, r2, r1
 8013bc6:	1a40      	subcs	r0, r0, r1
 8013bc8:	0892      	lsrs	r2, r2, #2
 8013bca:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8013bce:	d1f6      	bne.n	8013bbe <_ZN8touchgfx7CWRUtil5isqrtEm+0x12>
 8013bd0:	4618      	mov	r0, r3
 8013bd2:	4770      	bx	lr

08013bd4 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>:
 8013bd4:	b510      	push	{r4, lr}
 8013bd6:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
 8013bda:	ea81 74e1 	eor.w	r4, r1, r1, asr #31
 8013bde:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
 8013be2:	eba4 74e1 	sub.w	r4, r4, r1, asr #31
 8013be6:	139b      	asrs	r3, r3, #14
 8013be8:	13a4      	asrs	r4, r4, #14
 8013bea:	429c      	cmp	r4, r3
 8013bec:	bfb8      	it	lt
 8013bee:	461c      	movlt	r4, r3
 8013bf0:	2c01      	cmp	r4, #1
 8013bf2:	dd07      	ble.n	8013c04 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x30>
 8013bf4:	fb91 f1f4 	sdiv	r1, r1, r4
 8013bf8:	fb90 f0f4 	sdiv	r0, r0, r4
 8013bfc:	f7ff ffea 	bl	8013bd4 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 8013c00:	4360      	muls	r0, r4
 8013c02:	bd10      	pop	{r4, pc}
 8013c04:	4340      	muls	r0, r0
 8013c06:	fb01 0001 	mla	r0, r1, r1, r0
 8013c0a:	f7ff ffcf 	bl	8013bac <_ZN8touchgfx7CWRUtil5isqrtEm>
 8013c0e:	e7f8      	b.n	8013c02 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x2e>

08013c10 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>:
 8013c10:	2800      	cmp	r0, #0
 8013c12:	b508      	push	{r3, lr}
 8013c14:	da05      	bge.n	8013c22 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x12>
 8013c16:	4240      	negs	r0, r0
 8013c18:	f7ff fffa 	bl	8013c10 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 8013c1c:	4240      	negs	r0, r0
 8013c1e:	b240      	sxtb	r0, r0
 8013c20:	bd08      	pop	{r3, pc}
 8013c22:	f5b0 6f80 	cmp.w	r0, #1024	@ 0x400
 8013c26:	dc11      	bgt.n	8013c4c <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x3c>
 8013c28:	f5b0 7f35 	cmp.w	r0, #724	@ 0x2d4
 8013c2c:	dd09      	ble.n	8013c42 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x32>
 8013c2e:	4340      	muls	r0, r0
 8013c30:	f5c0 1080 	rsb	r0, r0, #1048576	@ 0x100000
 8013c34:	f7ff ffba 	bl	8013bac <_ZN8touchgfx7CWRUtil5isqrtEm>
 8013c38:	f7ff ffea 	bl	8013c10 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 8013c3c:	f1c0 005a 	rsb	r0, r0, #90	@ 0x5a
 8013c40:	e7ed      	b.n	8013c1e <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0xe>
 8013c42:	3003      	adds	r0, #3
 8013c44:	4b02      	ldr	r3, [pc, #8]	@ (8013c50 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x40>)
 8013c46:	10c0      	asrs	r0, r0, #3
 8013c48:	5618      	ldrsb	r0, [r3, r0]
 8013c4a:	e7e9      	b.n	8013c20 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 8013c4c:	2000      	movs	r0, #0
 8013c4e:	e7e7      	b.n	8013c20 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 8013c50:	08041f04 	.word	0x08041f04

08013c54 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>:
 8013c54:	4281      	cmp	r1, r0
 8013c56:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013c58:	460c      	mov	r4, r1
 8013c5a:	4615      	mov	r5, r2
 8013c5c:	dd07      	ble.n	8013c6e <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x1a>
 8013c5e:	4601      	mov	r1, r0
 8013c60:	4620      	mov	r0, r4
 8013c62:	f7ff fff7 	bl	8013c54 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8013c66:	f1c0 005a 	rsb	r0, r0, #90	@ 0x5a
 8013c6a:	b003      	add	sp, #12
 8013c6c:	bd30      	pop	{r4, r5, pc}
 8013c6e:	f7ff ffb1 	bl	8013bd4 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 8013c72:	6028      	str	r0, [r5, #0]
 8013c74:	2800      	cmp	r0, #0
 8013c76:	d0f8      	beq.n	8013c6a <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x16>
 8013c78:	4602      	mov	r2, r0
 8013c7a:	ab01      	add	r3, sp, #4
 8013c7c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8013c80:	4620      	mov	r0, r4
 8013c82:	f006 fa89 	bl	801a198 <_ZN8touchgfx6muldivElllRl>
 8013c86:	f7ff ffc3 	bl	8013c10 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 8013c8a:	e7ee      	b.n	8013c6a <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x16>

08013c8c <_ZN8touchgfx4LineC1Ev>:
 8013c8c:	b510      	push	{r4, lr}
 8013c8e:	4604      	mov	r4, r0
 8013c90:	f7ff fe28 	bl	80138e4 <_ZN8touchgfx12CanvasWidgetC1Ev>
 8013c94:	4b0c      	ldr	r3, [pc, #48]	@ (8013cc8 <_ZN8touchgfx4LineC1Ev+0x3c>)
 8013c96:	2220      	movs	r2, #32
 8013c98:	4620      	mov	r0, r4
 8013c9a:	6023      	str	r3, [r4, #0]
 8013c9c:	2300      	movs	r3, #0
 8013c9e:	63e2      	str	r2, [r4, #60]	@ 0x3c
 8013ca0:	2212      	movs	r2, #18
 8013ca2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8013ca6:	66e2      	str	r2, [r4, #108]	@ 0x6c
 8013ca8:	60a3      	str	r3, [r4, #8]
 8013caa:	e9c4 330b 	strd	r3, r3, [r4, #44]	@ 0x2c
 8013cae:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 8013cb2:	e9c4 3311 	strd	r3, r3, [r4, #68]	@ 0x44
 8013cb6:	e9c4 3313 	strd	r3, r3, [r4, #76]	@ 0x4c
 8013cba:	e9c4 3315 	strd	r3, r3, [r4, #84]	@ 0x54
 8013cbe:	e9c4 3317 	strd	r3, r3, [r4, #92]	@ 0x5c
 8013cc2:	e9c4 3319 	strd	r3, r3, [r4, #100]	@ 0x64
 8013cc6:	bd10      	pop	{r4, pc}
 8013cc8:	08042020 	.word	0x08042020

08013ccc <_ZN8touchgfx4Line17updateCachedShapeEv>:
 8013ccc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8013cd0:	6b47      	ldr	r7, [r0, #52]	@ 0x34
 8013cd2:	4604      	mov	r4, r0
 8013cd4:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8013cd6:	6b85      	ldr	r5, [r0, #56]	@ 0x38
 8013cd8:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 8013cda:	1aff      	subs	r7, r7, r3
 8013cdc:	eba5 0502 	sub.w	r5, r5, r2
 8013ce0:	d142      	bne.n	8013d68 <_ZN8touchgfx4Line17updateCachedShapeEv+0x9c>
 8013ce2:	b955      	cbnz	r5, 8013cfa <_ZN8touchgfx4Line17updateCachedShapeEv+0x2e>
 8013ce4:	e9c0 3313 	strd	r3, r3, [r0, #76]	@ 0x4c
 8013ce8:	e9c0 3311 	strd	r3, r3, [r0, #68]	@ 0x44
 8013cec:	e9c0 2217 	strd	r2, r2, [r0, #92]	@ 0x5c
 8013cf0:	e9c0 2215 	strd	r2, r2, [r0, #84]	@ 0x54
 8013cf4:	b002      	add	sp, #8
 8013cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013cfa:	ea85 78e5 	eor.w	r8, r5, r5, asr #31
 8013cfe:	eba8 78e5 	sub.w	r8, r8, r5, asr #31
 8013d02:	4629      	mov	r1, r5
 8013d04:	2502      	movs	r5, #2
 8013d06:	4642      	mov	r2, r8
 8013d08:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8013d0a:	f006 fa64 	bl	801a1d6 <_ZN8touchgfx6muldivElll>
 8013d0e:	4642      	mov	r2, r8
 8013d10:	4639      	mov	r1, r7
 8013d12:	fb90 f6f5 	sdiv	r6, r0, r5
 8013d16:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8013d18:	f006 fa5d 	bl	801a1d6 <_ZN8touchgfx6muldivElll>
 8013d1c:	f894 9040 	ldrb.w	r9, [r4, #64]	@ 0x40
 8013d20:	fb90 f5f5 	sdiv	r5, r0, r5
 8013d24:	f1b9 0f00 	cmp.w	r9, #0
 8013d28:	d067      	beq.n	8013dfa <_ZN8touchgfx4Line17updateCachedShapeEv+0x12e>
 8013d2a:	f1b9 0f02 	cmp.w	r9, #2
 8013d2e:	d878      	bhi.n	8013e22 <_ZN8touchgfx4Line17updateCachedShapeEv+0x156>
 8013d30:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8013d32:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8013d34:	1b93      	subs	r3, r2, r6
 8013d36:	4432      	add	r2, r6
 8013d38:	1b5b      	subs	r3, r3, r5
 8013d3a:	1b52      	subs	r2, r2, r5
 8013d3c:	6463      	str	r3, [r4, #68]	@ 0x44
 8013d3e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013d40:	6522      	str	r2, [r4, #80]	@ 0x50
 8013d42:	18e9      	adds	r1, r5, r3
 8013d44:	1b5b      	subs	r3, r3, r5
 8013d46:	1b89      	subs	r1, r1, r6
 8013d48:	1b9b      	subs	r3, r3, r6
 8013d4a:	6561      	str	r1, [r4, #84]	@ 0x54
 8013d4c:	1b81      	subs	r1, r0, r6
 8013d4e:	4430      	add	r0, r6
 8013d50:	4429      	add	r1, r5
 8013d52:	4428      	add	r0, r5
 8013d54:	64a1      	str	r1, [r4, #72]	@ 0x48
 8013d56:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8013d58:	64e0      	str	r0, [r4, #76]	@ 0x4c
 8013d5a:	186f      	adds	r7, r5, r1
 8013d5c:	1b49      	subs	r1, r1, r5
 8013d5e:	4437      	add	r7, r6
 8013d60:	4431      	add	r1, r6
 8013d62:	65a7      	str	r7, [r4, #88]	@ 0x58
 8013d64:	65e1      	str	r1, [r4, #92]	@ 0x5c
 8013d66:	e05b      	b.n	8013e20 <_ZN8touchgfx4Line17updateCachedShapeEv+0x154>
 8013d68:	ea87 78e7 	eor.w	r8, r7, r7, asr #31
 8013d6c:	eba8 78e7 	sub.w	r8, r8, r7, asr #31
 8013d70:	2d00      	cmp	r5, #0
 8013d72:	d0c6      	beq.n	8013d02 <_ZN8touchgfx4Line17updateCachedShapeEv+0x36>
 8013d74:	ea85 73e5 	eor.w	r3, r5, r5, asr #31
 8013d78:	eba3 73e5 	sub.w	r3, r3, r5, asr #31
 8013d7c:	fb93 f2f8 	sdiv	r2, r3, r8
 8013d80:	fb08 3312 	mls	r3, r8, r2, r3
 8013d84:	b353      	cbz	r3, 8013ddc <_ZN8touchgfx4Line17updateCachedShapeEv+0x110>
 8013d86:	fb98 f2f3 	sdiv	r2, r8, r3
 8013d8a:	fb03 8812 	mls	r8, r3, r2, r8
 8013d8e:	f1b8 0f00 	cmp.w	r8, #0
 8013d92:	d1f3      	bne.n	8013d7c <_ZN8touchgfx4Line17updateCachedShapeEv+0xb0>
 8013d94:	2b01      	cmp	r3, #1
 8013d96:	f24b 5104 	movw	r1, #46340	@ 0xb504
 8013d9a:	bf1c      	itt	ne
 8013d9c:	fb97 f7f3 	sdivne	r7, r7, r3
 8013da0:	fb95 f5f3 	sdivne	r5, r5, r3
 8013da4:	ea87 73e7 	eor.w	r3, r7, r7, asr #31
 8013da8:	4608      	mov	r0, r1
 8013daa:	ea85 72e5 	eor.w	r2, r5, r5, asr #31
 8013dae:	eba3 73e7 	sub.w	r3, r3, r7, asr #31
 8013db2:	eba2 72e5 	sub.w	r2, r2, r5, asr #31
 8013db6:	428b      	cmp	r3, r1
 8013db8:	dd01      	ble.n	8013dbe <_ZN8touchgfx4Line17updateCachedShapeEv+0xf2>
 8013dba:	428a      	cmp	r2, r1
 8013dbc:	dc10      	bgt.n	8013de0 <_ZN8touchgfx4Line17updateCachedShapeEv+0x114>
 8013dbe:	fb90 f3f3 	sdiv	r3, r0, r3
 8013dc2:	fb90 f2f2 	sdiv	r2, r0, r2
 8013dc6:	4293      	cmp	r3, r2
 8013dc8:	bfa8      	it	ge
 8013dca:	4613      	movge	r3, r2
 8013dcc:	435f      	muls	r7, r3
 8013dce:	435d      	muls	r5, r3
 8013dd0:	4629      	mov	r1, r5
 8013dd2:	4638      	mov	r0, r7
 8013dd4:	f7ff fefe 	bl	8013bd4 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 8013dd8:	4680      	mov	r8, r0
 8013dda:	e792      	b.n	8013d02 <_ZN8touchgfx4Line17updateCachedShapeEv+0x36>
 8013ddc:	4643      	mov	r3, r8
 8013dde:	e7d9      	b.n	8013d94 <_ZN8touchgfx4Line17updateCachedShapeEv+0xc8>
 8013de0:	fb93 f3f1 	sdiv	r3, r3, r1
 8013de4:	fb92 f2f1 	sdiv	r2, r2, r1
 8013de8:	4293      	cmp	r3, r2
 8013dea:	bfcc      	ite	gt
 8013dec:	3301      	addgt	r3, #1
 8013dee:	1c53      	addle	r3, r2, #1
 8013df0:	fb97 f7f3 	sdiv	r7, r7, r3
 8013df4:	fb95 f5f3 	sdiv	r5, r5, r3
 8013df8:	e7ea      	b.n	8013dd0 <_ZN8touchgfx4Line17updateCachedShapeEv+0x104>
 8013dfa:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8013dfc:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8013dfe:	1b93      	subs	r3, r2, r6
 8013e00:	4432      	add	r2, r6
 8013e02:	6463      	str	r3, [r4, #68]	@ 0x44
 8013e04:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013e06:	6522      	str	r2, [r4, #80]	@ 0x50
 8013e08:	18e9      	adds	r1, r5, r3
 8013e0a:	1b5b      	subs	r3, r3, r5
 8013e0c:	6561      	str	r1, [r4, #84]	@ 0x54
 8013e0e:	1b81      	subs	r1, r0, r6
 8013e10:	4430      	add	r0, r6
 8013e12:	64a1      	str	r1, [r4, #72]	@ 0x48
 8013e14:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8013e16:	64e0      	str	r0, [r4, #76]	@ 0x4c
 8013e18:	186f      	adds	r7, r5, r1
 8013e1a:	1b49      	subs	r1, r1, r5
 8013e1c:	65a7      	str	r7, [r4, #88]	@ 0x58
 8013e1e:	65e1      	str	r1, [r4, #92]	@ 0x5c
 8013e20:	6623      	str	r3, [r4, #96]	@ 0x60
 8013e22:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8013e24:	f104 0148 	add.w	r1, r4, #72	@ 0x48
 8013e28:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8013e2a:	f104 0c54 	add.w	ip, r4, #84	@ 0x54
 8013e2e:	9200      	str	r2, [sp, #0]
 8013e30:	9301      	str	r3, [sp, #4]
 8013e32:	680f      	ldr	r7, [r1, #0]
 8013e34:	3104      	adds	r1, #4
 8013e36:	9800      	ldr	r0, [sp, #0]
 8013e38:	42ba      	cmp	r2, r7
 8013e3a:	bfa8      	it	ge
 8013e3c:	463a      	movge	r2, r7
 8013e3e:	4287      	cmp	r7, r0
 8013e40:	9801      	ldr	r0, [sp, #4]
 8013e42:	bfc8      	it	gt
 8013e44:	9700      	strgt	r7, [sp, #0]
 8013e46:	68cf      	ldr	r7, [r1, #12]
 8013e48:	42bb      	cmp	r3, r7
 8013e4a:	bfa8      	it	ge
 8013e4c:	463b      	movge	r3, r7
 8013e4e:	4287      	cmp	r7, r0
 8013e50:	bfc8      	it	gt
 8013e52:	9701      	strgt	r7, [sp, #4]
 8013e54:	458c      	cmp	ip, r1
 8013e56:	d1ec      	bne.n	8013e32 <_ZN8touchgfx4Line17updateCachedShapeEv+0x166>
 8013e58:	2720      	movs	r7, #32
 8013e5a:	4668      	mov	r0, sp
 8013e5c:	fb92 f8f7 	sdiv	r8, r2, r7
 8013e60:	fb93 f7f7 	sdiv	r7, r3, r7
 8013e64:	f7ff fd75 	bl	8013952 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 8013e68:	4682      	mov	sl, r0
 8013e6a:	a801      	add	r0, sp, #4
 8013e6c:	f7ff fd71 	bl	8013952 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 8013e70:	ebaa 0208 	sub.w	r2, sl, r8
 8013e74:	1bc0      	subs	r0, r0, r7
 8013e76:	f1b9 0f01 	cmp.w	r9, #1
 8013e7a:	f8a4 8064 	strh.w	r8, [r4, #100]	@ 0x64
 8013e7e:	f8a4 7066 	strh.w	r7, [r4, #102]	@ 0x66
 8013e82:	f8a4 2068 	strh.w	r2, [r4, #104]	@ 0x68
 8013e86:	f8a4 006a 	strh.w	r0, [r4, #106]	@ 0x6a
 8013e8a:	f47f af33 	bne.w	8013cf4 <_ZN8touchgfx4Line17updateCachedShapeEv+0x28>
 8013e8e:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8013e90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013e92:	1b83      	subs	r3, r0, r6
 8013e94:	6463      	str	r3, [r4, #68]	@ 0x44
 8013e96:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013e98:	18ea      	adds	r2, r5, r3
 8013e9a:	6562      	str	r2, [r4, #84]	@ 0x54
 8013e9c:	1b8a      	subs	r2, r1, r6
 8013e9e:	4431      	add	r1, r6
 8013ea0:	4406      	add	r6, r0
 8013ea2:	64a2      	str	r2, [r4, #72]	@ 0x48
 8013ea4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8013ea6:	64e1      	str	r1, [r4, #76]	@ 0x4c
 8013ea8:	18af      	adds	r7, r5, r2
 8013eaa:	1b52      	subs	r2, r2, r5
 8013eac:	1b5d      	subs	r5, r3, r5
 8013eae:	6526      	str	r6, [r4, #80]	@ 0x50
 8013eb0:	65a7      	str	r7, [r4, #88]	@ 0x58
 8013eb2:	65e2      	str	r2, [r4, #92]	@ 0x5c
 8013eb4:	6625      	str	r5, [r4, #96]	@ 0x60
 8013eb6:	e71d      	b.n	8013cf4 <_ZN8touchgfx4Line17updateCachedShapeEv+0x28>

08013eb8 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>:
 8013eb8:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8013eba:	428b      	cmp	r3, r1
 8013ebc:	d102      	bne.n	8013ec4 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0xc>
 8013ebe:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013ec0:	4293      	cmp	r3, r2
 8013ec2:	d003      	beq.n	8013ecc <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0x14>
 8013ec4:	e9c0 120b 	strd	r1, r2, [r0, #44]	@ 0x2c
 8013ec8:	f7ff bf00 	b.w	8013ccc <_ZN8touchgfx4Line17updateCachedShapeEv>
 8013ecc:	4770      	bx	lr

08013ece <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_>:
 8013ece:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8013ed0:	428b      	cmp	r3, r1
 8013ed2:	d102      	bne.n	8013eda <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_+0xc>
 8013ed4:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8013ed6:	4293      	cmp	r3, r2
 8013ed8:	d003      	beq.n	8013ee2 <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_+0x14>
 8013eda:	e9c0 120d 	strd	r1, r2, [r0, #52]	@ 0x34
 8013ede:	f7ff bef5 	b.w	8013ccc <_ZN8touchgfx4Line17updateCachedShapeEv>
 8013ee2:	4770      	bx	lr

08013ee4 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>:
 8013ee4:	f880 1040 	strb.w	r1, [r0, #64]	@ 0x40
 8013ee8:	f7ff bef0 	b.w	8013ccc <_ZN8touchgfx4Line17updateCachedShapeEv>

08013eec <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE>:
 8013eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ef0:	b0a0      	sub	sp, #128	@ 0x80
 8013ef2:	4604      	mov	r4, r0
 8013ef4:	460a      	mov	r2, r1
 8013ef6:	4601      	mov	r1, r0
 8013ef8:	a804      	add	r0, sp, #16
 8013efa:	f015 ff81 	bl	8029e00 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 8013efe:	2300      	movs	r3, #0
 8013f00:	9301      	str	r3, [sp, #4]
 8013f02:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8013f06:	2b01      	cmp	r3, #1
 8013f08:	d17c      	bne.n	8014004 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x118>
 8013f0a:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8013f0c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8013f0e:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8013f10:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8013f12:	1ac0      	subs	r0, r0, r3
 8013f14:	eba1 0102 	sub.w	r1, r1, r2
 8013f18:	d437      	bmi.n	8013f8a <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x9e>
 8013f1a:	2900      	cmp	r1, #0
 8013f1c:	aa01      	add	r2, sp, #4
 8013f1e:	db2e      	blt.n	8013f7e <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x92>
 8013f20:	f7ff fe98 	bl	8013c54 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8013f24:	f100 065a 	add.w	r6, r0, #90	@ 0x5a
 8013f28:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8013f2a:	a804      	add	r0, sp, #16
 8013f2c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8013f2e:	f016 f8e7 	bl	802a100 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8013f32:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8013f34:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8013f36:	a804      	add	r0, sp, #16
 8013f38:	f016 f92f 	bl	802a19a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8013f3c:	6ee5      	ldr	r5, [r4, #108]	@ 0x6c
 8013f3e:	2db3      	cmp	r5, #179	@ 0xb3
 8013f40:	dc33      	bgt.n	8013faa <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xbe>
 8013f42:	eba6 0805 	sub.w	r8, r6, r5
 8013f46:	4640      	mov	r0, r8
 8013f48:	f7ff fe10 	bl	8013b6c <_ZN8touchgfx7CWRUtil4sineEi>
 8013f4c:	a902      	add	r1, sp, #8
 8013f4e:	9002      	str	r0, [sp, #8]
 8013f50:	a801      	add	r0, sp, #4
 8013f52:	f7ff fcf3 	bl	801393c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8013f56:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013f58:	1847      	adds	r7, r0, r1
 8013f5a:	f1c8 005a 	rsb	r0, r8, #90	@ 0x5a
 8013f5e:	f7ff fe05 	bl	8013b6c <_ZN8touchgfx7CWRUtil4sineEi>
 8013f62:	a903      	add	r1, sp, #12
 8013f64:	9003      	str	r0, [sp, #12]
 8013f66:	a801      	add	r0, sp, #4
 8013f68:	f7ff fce8 	bl	801393c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8013f6c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8013f6e:	4639      	mov	r1, r7
 8013f70:	1a12      	subs	r2, r2, r0
 8013f72:	a804      	add	r0, sp, #16
 8013f74:	f016 f911 	bl	802a19a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8013f78:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8013f7a:	441d      	add	r5, r3
 8013f7c:	e7df      	b.n	8013f3e <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x52>
 8013f7e:	4249      	negs	r1, r1
 8013f80:	f7ff fe68 	bl	8013c54 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8013f84:	f1c0 065a 	rsb	r6, r0, #90	@ 0x5a
 8013f88:	e7ce      	b.n	8013f28 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x3c>
 8013f8a:	2900      	cmp	r1, #0
 8013f8c:	f1c0 0000 	rsb	r0, r0, #0
 8013f90:	aa01      	add	r2, sp, #4
 8013f92:	db04      	blt.n	8013f9e <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xb2>
 8013f94:	f7ff fe5e 	bl	8013c54 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8013f98:	f5c0 7687 	rsb	r6, r0, #270	@ 0x10e
 8013f9c:	e7c4      	b.n	8013f28 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x3c>
 8013f9e:	4249      	negs	r1, r1
 8013fa0:	f7ff fe58 	bl	8013c54 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8013fa4:	f500 7687 	add.w	r6, r0, #270	@ 0x10e
 8013fa8:	e7be      	b.n	8013f28 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x3c>
 8013faa:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8013fac:	a804      	add	r0, sp, #16
 8013fae:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8013fb0:	f016 f8f3 	bl	802a19a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8013fb4:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8013fb6:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8013fb8:	a804      	add	r0, sp, #16
 8013fba:	f016 f8ee 	bl	802a19a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8013fbe:	6ee5      	ldr	r5, [r4, #108]	@ 0x6c
 8013fc0:	f1c5 05b4 	rsb	r5, r5, #180	@ 0xb4
 8013fc4:	2d00      	cmp	r5, #0
 8013fc6:	dd31      	ble.n	801402c <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x140>
 8013fc8:	eb05 0806 	add.w	r8, r5, r6
 8013fcc:	4640      	mov	r0, r8
 8013fce:	f7ff fdcd 	bl	8013b6c <_ZN8touchgfx7CWRUtil4sineEi>
 8013fd2:	a902      	add	r1, sp, #8
 8013fd4:	9002      	str	r0, [sp, #8]
 8013fd6:	a801      	add	r0, sp, #4
 8013fd8:	f7ff fcb0 	bl	801393c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8013fdc:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8013fde:	1847      	adds	r7, r0, r1
 8013fe0:	f1c8 005a 	rsb	r0, r8, #90	@ 0x5a
 8013fe4:	f7ff fdc2 	bl	8013b6c <_ZN8touchgfx7CWRUtil4sineEi>
 8013fe8:	a903      	add	r1, sp, #12
 8013fea:	9003      	str	r0, [sp, #12]
 8013fec:	a801      	add	r0, sp, #4
 8013fee:	f7ff fca5 	bl	801393c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8013ff2:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8013ff4:	4639      	mov	r1, r7
 8013ff6:	1a12      	subs	r2, r2, r0
 8013ff8:	a804      	add	r0, sp, #16
 8013ffa:	f016 f8ce 	bl	802a19a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8013ffe:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8014000:	1aed      	subs	r5, r5, r3
 8014002:	e7df      	b.n	8013fc4 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xd8>
 8014004:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8014006:	a804      	add	r0, sp, #16
 8014008:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801400a:	f016 f879 	bl	802a100 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 801400e:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8014010:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8014012:	a804      	add	r0, sp, #16
 8014014:	f016 f8c1 	bl	802a19a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8014018:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 801401a:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 801401c:	a804      	add	r0, sp, #16
 801401e:	f016 f8bc 	bl	802a19a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8014022:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8014024:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8014026:	a804      	add	r0, sp, #16
 8014028:	f016 f8b7 	bl	802a19a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801402c:	21ff      	movs	r1, #255	@ 0xff
 801402e:	a804      	add	r0, sp, #16
 8014030:	f015 ffa2 	bl	8029f78 <_ZN8touchgfx6Canvas6renderEh>
 8014034:	4b04      	ldr	r3, [pc, #16]	@ (8014048 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x15c>)
 8014036:	4604      	mov	r4, r0
 8014038:	a80c      	add	r0, sp, #48	@ 0x30
 801403a:	9304      	str	r3, [sp, #16]
 801403c:	f001 ff46 	bl	8015ecc <_ZN8touchgfx7OutlineD1Ev>
 8014040:	4620      	mov	r0, r4
 8014042:	b020      	add	sp, #128	@ 0x80
 8014044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014048:	08042b34 	.word	0x08042b34

0801404c <_ZN8touchgfx17AbstractDataGraph9setScaleXEib>:
 801404c:	6301      	str	r1, [r0, #48]	@ 0x30
 801404e:	4770      	bx	lr

08014050 <_ZNK8touchgfx17AbstractDataGraph9getScaleXEv>:
 8014050:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8014052:	4770      	bx	lr

08014054 <_ZN8touchgfx17AbstractDataGraph9setScaleYEib>:
 8014054:	6341      	str	r1, [r0, #52]	@ 0x34
 8014056:	4770      	bx	lr

08014058 <_ZNK8touchgfx17AbstractDataGraph9getScaleYEv>:
 8014058:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 801405a:	4770      	bx	lr

0801405c <_ZN8touchgfx16DynamicDataGraph14beforeAddValueEv>:
 801405c:	4770      	bx	lr

0801405e <_ZNK8touchgfx16DynamicDataGraph18indexToGlobalIndexEs>:
 801405e:	4608      	mov	r0, r1
 8014060:	4770      	bx	lr

08014062 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE>:
 8014062:	b530      	push	{r4, r5, lr}
 8014064:	460d      	mov	r5, r1
 8014066:	8f83      	ldrh	r3, [r0, #60]	@ 0x3c
 8014068:	8949      	ldrh	r1, [r1, #10]
 801406a:	b085      	sub	sp, #20
 801406c:	4604      	mov	r4, r0
 801406e:	1ac9      	subs	r1, r1, r3
 8014070:	6803      	ldr	r3, [r0, #0]
 8014072:	f10d 0206 	add.w	r2, sp, #6
 8014076:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 801407a:	b209      	sxth	r1, r1
 801407c:	4798      	blx	r3
 801407e:	b1a0      	cbz	r0, 80140aa <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 8014080:	792b      	ldrb	r3, [r5, #4]
 8014082:	b993      	cbnz	r3, 80140aa <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 8014084:	f8d4 0128 	ldr.w	r0, [r4, #296]	@ 0x128
 8014088:	b178      	cbz	r0, 80140aa <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 801408a:	6803      	ldr	r3, [r0, #0]
 801408c:	68db      	ldr	r3, [r3, #12]
 801408e:	4798      	blx	r3
 8014090:	b158      	cbz	r0, 80140aa <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 8014092:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8014096:	aa02      	add	r2, sp, #8
 8014098:	f8d4 0128 	ldr.w	r0, [r4, #296]	@ 0x128
 801409c:	4621      	mov	r1, r4
 801409e:	f8ad 3008 	strh.w	r3, [sp, #8]
 80140a2:	9503      	str	r5, [sp, #12]
 80140a4:	6803      	ldr	r3, [r0, #0]
 80140a6:	689b      	ldr	r3, [r3, #8]
 80140a8:	4798      	blx	r3
 80140aa:	b005      	add	sp, #20
 80140ac:	bd30      	pop	{r4, r5, pc}

080140ae <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii>:
 80140ae:	428a      	cmp	r2, r1
 80140b0:	bfbc      	itt	lt
 80140b2:	460b      	movlt	r3, r1
 80140b4:	4611      	movlt	r1, r2
 80140b6:	b510      	push	{r4, lr}
 80140b8:	bfb8      	it	lt
 80140ba:	461a      	movlt	r2, r3
 80140bc:	f8d0 312c 	ldr.w	r3, [r0, #300]	@ 0x12c
 80140c0:	4604      	mov	r4, r0
 80140c2:	428b      	cmp	r3, r1
 80140c4:	d103      	bne.n	80140ce <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii+0x20>
 80140c6:	f8d0 3130 	ldr.w	r3, [r0, #304]	@ 0x130
 80140ca:	4293      	cmp	r3, r2
 80140cc:	d011      	beq.n	80140f2 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii+0x44>
 80140ce:	f8c4 112c 	str.w	r1, [r4, #300]	@ 0x12c
 80140d2:	f104 00bc 	add.w	r0, r4, #188	@ 0xbc
 80140d6:	f8c4 2130 	str.w	r2, [r4, #304]	@ 0x130
 80140da:	f005 feb1 	bl	8019e40 <_ZNK8touchgfx8Drawable10invalidateEv>
 80140de:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 80140e2:	f005 fead 	bl	8019e40 <_ZNK8touchgfx8Drawable10invalidateEv>
 80140e6:	f104 00e8 	add.w	r0, r4, #232	@ 0xe8
 80140ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80140ee:	f005 bea7 	b.w	8019e40 <_ZNK8touchgfx8Drawable10invalidateEv>
 80140f2:	bd10      	pop	{r4, pc}

080140f4 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii>:
 80140f4:	428a      	cmp	r2, r1
 80140f6:	bfbc      	itt	lt
 80140f8:	460b      	movlt	r3, r1
 80140fa:	4611      	movlt	r1, r2
 80140fc:	b510      	push	{r4, lr}
 80140fe:	bfb8      	it	lt
 8014100:	461a      	movlt	r2, r3
 8014102:	f8d0 3134 	ldr.w	r3, [r0, #308]	@ 0x134
 8014106:	4604      	mov	r4, r0
 8014108:	428b      	cmp	r3, r1
 801410a:	d103      	bne.n	8014114 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii+0x20>
 801410c:	f8d0 3138 	ldr.w	r3, [r0, #312]	@ 0x138
 8014110:	4293      	cmp	r3, r2
 8014112:	d011      	beq.n	8014138 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii+0x44>
 8014114:	f8c4 1134 	str.w	r1, [r4, #308]	@ 0x134
 8014118:	f104 0064 	add.w	r0, r4, #100	@ 0x64
 801411c:	f8c4 2138 	str.w	r2, [r4, #312]	@ 0x138
 8014120:	f005 fe8e 	bl	8019e40 <_ZNK8touchgfx8Drawable10invalidateEv>
 8014124:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8014128:	f005 fe8a 	bl	8019e40 <_ZNK8touchgfx8Drawable10invalidateEv>
 801412c:	f104 0090 	add.w	r0, r4, #144	@ 0x90
 8014130:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014134:	f005 be84 	b.w	8019e40 <_ZNK8touchgfx8Drawable10invalidateEv>
 8014138:	bd10      	pop	{r4, pc}

0801413a <_ZN8touchgfx17AbstractDataGraph5clearEv>:
 801413a:	2300      	movs	r3, #0
 801413c:	3038      	adds	r0, #56	@ 0x38
 801413e:	f8a0 30e6 	strh.w	r3, [r0, #230]	@ 0xe6
 8014142:	f005 be7d 	b.w	8019e40 <_ZNK8touchgfx8Drawable10invalidateEv>

08014146 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi>:
 8014146:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801414a:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	@ 0x11e
 801414e:	4605      	mov	r5, r0
 8014150:	460f      	mov	r7, r1
 8014152:	4616      	mov	r6, r2
 8014154:	2b00      	cmp	r3, #0
 8014156:	d03d      	beq.n	80141d4 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x8e>
 8014158:	6803      	ldr	r3, [r0, #0]
 801415a:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 801415e:	4798      	blx	r3
 8014160:	682b      	ldr	r3, [r5, #0]
 8014162:	b204      	sxth	r4, r0
 8014164:	4628      	mov	r0, r5
 8014166:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 801416a:	4798      	blx	r3
 801416c:	b203      	sxth	r3, r0
 801416e:	f9b5 011e 	ldrsh.w	r0, [r5, #286]	@ 0x11e
 8014172:	429c      	cmp	r4, r3
 8014174:	bfc4      	itt	gt
 8014176:	4622      	movgt	r2, r4
 8014178:	461c      	movgt	r4, r3
 801417a:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 801417e:	bfc8      	it	gt
 8014180:	4613      	movgt	r3, r2
 8014182:	4284      	cmp	r4, r0
 8014184:	da26      	bge.n	80141d4 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x8e>
 8014186:	4298      	cmp	r0, r3
 8014188:	bfa8      	it	ge
 801418a:	4618      	movge	r0, r3
 801418c:	2800      	cmp	r0, #0
 801418e:	db21      	blt.n	80141d4 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x8e>
 8014190:	b9ef      	cbnz	r7, 80141ce <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x88>
 8014192:	f8d5 3144 	ldr.w	r3, [r5, #324]	@ 0x144
 8014196:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801419a:	4619      	mov	r1, r3
 801419c:	42a0      	cmp	r0, r4
 801419e:	dd0b      	ble.n	80141b8 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x72>
 80141a0:	f8d5 2144 	ldr.w	r2, [r5, #324]	@ 0x144
 80141a4:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 80141a8:	3401      	adds	r4, #1
 80141aa:	4291      	cmp	r1, r2
 80141ac:	bfa8      	it	ge
 80141ae:	4611      	movge	r1, r2
 80141b0:	4293      	cmp	r3, r2
 80141b2:	bfb8      	it	lt
 80141b4:	4613      	movlt	r3, r2
 80141b6:	e7f1      	b.n	801419c <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x56>
 80141b8:	1b89      	subs	r1, r1, r6
 80141ba:	18f2      	adds	r2, r6, r3
 80141bc:	4291      	cmp	r1, r2
 80141be:	d009      	beq.n	80141d4 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x8e>
 80141c0:	682b      	ldr	r3, [r5, #0]
 80141c2:	4628      	mov	r0, r5
 80141c4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80141c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80141cc:	4718      	bx	r3
 80141ce:	4273      	negs	r3, r6
 80141d0:	4631      	mov	r1, r6
 80141d2:	e7e3      	b.n	801419c <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x56>
 80141d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080141d8 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE>:
 80141d8:	b530      	push	{r4, r5, lr}
 80141da:	790b      	ldrb	r3, [r1, #4]
 80141dc:	b085      	sub	sp, #20
 80141de:	4604      	mov	r4, r0
 80141e0:	460d      	mov	r5, r1
 80141e2:	2b02      	cmp	r3, #2
 80141e4:	d020      	beq.n	8014228 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 80141e6:	8f83      	ldrh	r3, [r0, #60]	@ 0x3c
 80141e8:	f10d 0206 	add.w	r2, sp, #6
 80141ec:	88c9      	ldrh	r1, [r1, #6]
 80141ee:	1ac9      	subs	r1, r1, r3
 80141f0:	6803      	ldr	r3, [r0, #0]
 80141f2:	b209      	sxth	r1, r1
 80141f4:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80141f8:	4798      	blx	r3
 80141fa:	b1a8      	cbz	r0, 8014228 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 80141fc:	792b      	ldrb	r3, [r5, #4]
 80141fe:	2b01      	cmp	r3, #1
 8014200:	d812      	bhi.n	8014228 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 8014202:	f8d4 0124 	ldr.w	r0, [r4, #292]	@ 0x124
 8014206:	b178      	cbz	r0, 8014228 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 8014208:	6803      	ldr	r3, [r0, #0]
 801420a:	68db      	ldr	r3, [r3, #12]
 801420c:	4798      	blx	r3
 801420e:	b158      	cbz	r0, 8014228 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 8014210:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8014214:	aa02      	add	r2, sp, #8
 8014216:	f8d4 0124 	ldr.w	r0, [r4, #292]	@ 0x124
 801421a:	4621      	mov	r1, r4
 801421c:	f8ad 3008 	strh.w	r3, [sp, #8]
 8014220:	9503      	str	r5, [sp, #12]
 8014222:	6803      	ldr	r3, [r0, #0]
 8014224:	689b      	ldr	r3, [r3, #8]
 8014226:	4798      	blx	r3
 8014228:	b005      	add	sp, #20
 801422a:	bd30      	pop	{r4, r5, pc}

0801422c <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_>:
 801422c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014230:	4604      	mov	r4, r0
 8014232:	f9b0 011e 	ldrsh.w	r0, [r0, #286]	@ 0x11e
 8014236:	4690      	mov	r8, r2
 8014238:	461f      	mov	r7, r3
 801423a:	9e06      	ldr	r6, [sp, #24]
 801423c:	b928      	cbnz	r0, 801424a <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1e>
 801423e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014242:	8033      	strh	r3, [r6, #0]
 8014244:	803b      	strh	r3, [r7, #0]
 8014246:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801424a:	f8b4 2118 	ldrh.w	r2, [r4, #280]	@ 0x118
 801424e:	f9b4 0116 	ldrsh.w	r0, [r4, #278]	@ 0x116
 8014252:	1883      	adds	r3, r0, r2
 8014254:	f8b4 2040 	ldrh.w	r2, [r4, #64]	@ 0x40
 8014258:	1ad2      	subs	r2, r2, r3
 801425a:	b212      	sxth	r2, r2
 801425c:	2a01      	cmp	r2, #1
 801425e:	dc07      	bgt.n	8014270 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x44>
 8014260:	2300      	movs	r3, #0
 8014262:	803b      	strh	r3, [r7, #0]
 8014264:	f8b4 311e 	ldrh.w	r3, [r4, #286]	@ 0x11e
 8014268:	3b01      	subs	r3, #1
 801426a:	8033      	strh	r3, [r6, #0]
 801426c:	2001      	movs	r0, #1
 801426e:	e7ea      	b.n	8014246 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>
 8014270:	1a08      	subs	r0, r1, r0
 8014272:	f8d4 3130 	ldr.w	r3, [r4, #304]	@ 0x130
 8014276:	f8d4 112c 	ldr.w	r1, [r4, #300]	@ 0x12c
 801427a:	0140      	lsls	r0, r0, #5
 801427c:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801427e:	1a5b      	subs	r3, r3, r1
 8014280:	d459      	bmi.n	8014336 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x10a>
 8014282:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8014286:	fb93 f1f5 	sdiv	r1, r3, r5
 801428a:	2302      	movs	r3, #2
 801428c:	fb91 f1f3 	sdiv	r1, r1, r3
 8014290:	3a01      	subs	r2, #1
 8014292:	f005 ffa0 	bl	801a1d6 <_ZN8touchgfx6muldivElll>
 8014296:	f8d4 112c 	ldr.w	r1, [r4, #300]	@ 0x12c
 801429a:	f8d4 c030 	ldr.w	ip, [r4, #48]	@ 0x30
 801429e:	2900      	cmp	r1, #0
 80142a0:	db55      	blt.n	801434e <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x122>
 80142a2:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
 80142a6:	2502      	movs	r5, #2
 80142a8:	fb93 f3fc 	sdiv	r3, r3, ip
 80142ac:	fb93 f3f5 	sdiv	r3, r3, r5
 80142b0:	eb00 1543 	add.w	r5, r0, r3, lsl #5
 80142b4:	f8d4 2130 	ldr.w	r2, [r4, #304]	@ 0x130
 80142b8:	f9b4 3116 	ldrsh.w	r3, [r4, #278]	@ 0x116
 80142bc:	1a52      	subs	r2, r2, r1
 80142be:	eba8 0003 	sub.w	r0, r8, r3
 80142c2:	ea4f 1040 	mov.w	r0, r0, lsl #5
 80142c6:	d44e      	bmi.n	8014366 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x13a>
 80142c8:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 80142cc:	fb92 f1fc 	sdiv	r1, r2, ip
 80142d0:	2202      	movs	r2, #2
 80142d2:	fb91 f1f2 	sdiv	r1, r1, r2
 80142d6:	f8b4 2118 	ldrh.w	r2, [r4, #280]	@ 0x118
 80142da:	4413      	add	r3, r2
 80142dc:	f8b4 2040 	ldrh.w	r2, [r4, #64]	@ 0x40
 80142e0:	1ad2      	subs	r2, r2, r3
 80142e2:	b212      	sxth	r2, r2
 80142e4:	3a01      	subs	r2, #1
 80142e6:	f005 ff76 	bl	801a1d6 <_ZN8touchgfx6muldivElll>
 80142ea:	f8d4 312c 	ldr.w	r3, [r4, #300]	@ 0x12c
 80142ee:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80142f0:	2b00      	cmp	r3, #0
 80142f2:	db44      	blt.n	801437e <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x152>
 80142f4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80142f8:	fb93 f3f2 	sdiv	r3, r3, r2
 80142fc:	2202      	movs	r2, #2
 80142fe:	fb93 f3f2 	sdiv	r3, r3, r2
 8014302:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8014306:	2020      	movs	r0, #32
 8014308:	429d      	cmp	r5, r3
 801430a:	bfde      	ittt	le
 801430c:	461a      	movle	r2, r3
 801430e:	462b      	movle	r3, r5
 8014310:	4615      	movle	r5, r2
 8014312:	b21b      	sxth	r3, r3
 8014314:	2d00      	cmp	r5, #0
 8014316:	bfaa      	itet	ge
 8014318:	351f      	addge	r5, #31
 801431a:	fb95 f5f0 	sdivlt	r5, r5, r0
 801431e:	116d      	asrge	r5, r5, #5
 8014320:	fb93 f3f0 	sdiv	r3, r3, r0
 8014324:	b22d      	sxth	r5, r5
 8014326:	803b      	strh	r3, [r7, #0]
 8014328:	2d00      	cmp	r5, #0
 801432a:	8035      	strh	r5, [r6, #0]
 801432c:	da33      	bge.n	8014396 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x16a>
 801432e:	2000      	movs	r0, #0
 8014330:	8030      	strh	r0, [r6, #0]
 8014332:	8038      	strh	r0, [r7, #0]
 8014334:	e787      	b.n	8014246 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>
 8014336:	f06f 0101 	mvn.w	r1, #1
 801433a:	fb01 5303 	mla	r3, r1, r3, r5
 801433e:	1e59      	subs	r1, r3, #1
 8014340:	2302      	movs	r3, #2
 8014342:	fb91 f1f5 	sdiv	r1, r1, r5
 8014346:	fb91 f1f3 	sdiv	r1, r1, r3
 801434a:	4249      	negs	r1, r1
 801434c:	e7a0      	b.n	8014290 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x64>
 801434e:	f06f 0301 	mvn.w	r3, #1
 8014352:	2502      	movs	r5, #2
 8014354:	fb03 c301 	mla	r3, r3, r1, ip
 8014358:	3b01      	subs	r3, #1
 801435a:	fb93 f3fc 	sdiv	r3, r3, ip
 801435e:	fb93 f3f5 	sdiv	r3, r3, r5
 8014362:	425b      	negs	r3, r3
 8014364:	e7a4      	b.n	80142b0 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x84>
 8014366:	f06f 0101 	mvn.w	r1, #1
 801436a:	fb01 c202 	mla	r2, r1, r2, ip
 801436e:	1e51      	subs	r1, r2, #1
 8014370:	2202      	movs	r2, #2
 8014372:	fb91 f1fc 	sdiv	r1, r1, ip
 8014376:	fb91 f1f2 	sdiv	r1, r1, r2
 801437a:	4249      	negs	r1, r1
 801437c:	e7ab      	b.n	80142d6 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0xaa>
 801437e:	f06f 0101 	mvn.w	r1, #1
 8014382:	fb01 2303 	mla	r3, r1, r3, r2
 8014386:	3b01      	subs	r3, #1
 8014388:	fb93 f3f2 	sdiv	r3, r3, r2
 801438c:	2202      	movs	r2, #2
 801438e:	fb93 f3f2 	sdiv	r3, r3, r2
 8014392:	425b      	negs	r3, r3
 8014394:	e7b5      	b.n	8014302 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0xd6>
 8014396:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	@ 0x11e
 801439a:	f9b7 2000 	ldrsh.w	r2, [r7]
 801439e:	4293      	cmp	r3, r2
 80143a0:	dc05      	bgt.n	80143ae <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x182>
 80143a2:	3b01      	subs	r3, #1
 80143a4:	2000      	movs	r0, #0
 80143a6:	b21b      	sxth	r3, r3
 80143a8:	8033      	strh	r3, [r6, #0]
 80143aa:	803b      	strh	r3, [r7, #0]
 80143ac:	e74b      	b.n	8014246 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>
 80143ae:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 80143b2:	803a      	strh	r2, [r7, #0]
 80143b4:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	@ 0x11e
 80143b8:	f9b6 2000 	ldrsh.w	r2, [r6]
 80143bc:	4293      	cmp	r3, r2
 80143be:	bfdc      	itt	le
 80143c0:	f103 33ff 	addle.w	r3, r3, #4294967295
 80143c4:	b21a      	sxthle	r2, r3
 80143c6:	8032      	strh	r2, [r6, #0]
 80143c8:	e750      	b.n	801426c <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x40>
	...

080143cc <_ZN8touchgfx9ContainerC1Ev>:
 80143cc:	2101      	movs	r1, #1
 80143ce:	2200      	movs	r2, #0
 80143d0:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 80143d4:	4909      	ldr	r1, [pc, #36]	@ (80143fc <_ZN8touchgfx9ContainerC1Ev+0x30>)
 80143d6:	8082      	strh	r2, [r0, #4]
 80143d8:	80c2      	strh	r2, [r0, #6]
 80143da:	8102      	strh	r2, [r0, #8]
 80143dc:	8142      	strh	r2, [r0, #10]
 80143de:	8182      	strh	r2, [r0, #12]
 80143e0:	81c2      	strh	r2, [r0, #14]
 80143e2:	8202      	strh	r2, [r0, #16]
 80143e4:	8242      	strh	r2, [r0, #18]
 80143e6:	61c2      	str	r2, [r0, #28]
 80143e8:	8402      	strh	r2, [r0, #32]
 80143ea:	8442      	strh	r2, [r0, #34]	@ 0x22
 80143ec:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
 80143f0:	6001      	str	r1, [r0, #0]
 80143f2:	6282      	str	r2, [r0, #40]	@ 0x28
 80143f4:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80143f8:	4770      	bx	lr
 80143fa:	bf00      	nop
 80143fc:	08041d9c 	.word	0x08041d9c

08014400 <_ZNK8touchgfx7CWRUtil2Q55roundEv>:
 8014400:	6800      	ldr	r0, [r0, #0]
 8014402:	2800      	cmp	r0, #0
 8014404:	bfbd      	ittte	lt
 8014406:	380f      	sublt	r0, #15
 8014408:	2320      	movlt	r3, #32
 801440a:	fb90 f0f3 	sdivlt	r0, r0, r3
 801440e:	3010      	addge	r0, #16
 8014410:	bfa8      	it	ge
 8014412:	1140      	asrge	r0, r0, #5
 8014414:	4770      	bx	lr

08014416 <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs>:
 8014416:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801441a:	4605      	mov	r5, r0
 801441c:	f9b0 011e 	ldrsh.w	r0, [r0, #286]	@ 0x11e
 8014420:	4688      	mov	r8, r1
 8014422:	4691      	mov	r9, r2
 8014424:	469a      	mov	sl, r3
 8014426:	b360      	cbz	r0, 8014482 <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x6c>
 8014428:	2700      	movs	r7, #0
 801442a:	f04f 3bff 	mov.w	fp, #4294967295
 801442e:	b23e      	sxth	r6, r7
 8014430:	f9b5 311e 	ldrsh.w	r3, [r5, #286]	@ 0x11e
 8014434:	42b3      	cmp	r3, r6
 8014436:	dd23      	ble.n	8014480 <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x6a>
 8014438:	682b      	ldr	r3, [r5, #0]
 801443a:	4631      	mov	r1, r6
 801443c:	4628      	mov	r0, r5
 801443e:	3701      	adds	r7, #1
 8014440:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8014444:	4798      	blx	r3
 8014446:	9001      	str	r0, [sp, #4]
 8014448:	a801      	add	r0, sp, #4
 801444a:	f7ff ffd9 	bl	8014400 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 801444e:	682b      	ldr	r3, [r5, #0]
 8014450:	eba0 0008 	sub.w	r0, r0, r8
 8014454:	4631      	mov	r1, r6
 8014456:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 801445a:	b204      	sxth	r4, r0
 801445c:	4628      	mov	r0, r5
 801445e:	4798      	blx	r3
 8014460:	9001      	str	r0, [sp, #4]
 8014462:	a801      	add	r0, sp, #4
 8014464:	f7ff ffcc 	bl	8014400 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8014468:	eba0 0009 	sub.w	r0, r0, r9
 801446c:	fb10 f000 	smulbb	r0, r0, r0
 8014470:	fb04 0404 	mla	r4, r4, r4, r0
 8014474:	455c      	cmp	r4, fp
 8014476:	bf3c      	itt	cc
 8014478:	f8aa 6000 	strhcc.w	r6, [sl]
 801447c:	46a3      	movcc	fp, r4
 801447e:	e7d6      	b.n	801442e <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x18>
 8014480:	2001      	movs	r0, #1
 8014482:	b003      	add	sp, #12
 8014484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014488 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs>:
 8014488:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801448c:	460e      	mov	r6, r1
 801448e:	2100      	movs	r1, #0
 8014490:	4605      	mov	r5, r0
 8014492:	4617      	mov	r7, r2
 8014494:	8011      	strh	r1, [r2, #0]
 8014496:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	@ 0x11e
 801449a:	b36b      	cbz	r3, 80144f8 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x70>
 801449c:	6803      	ldr	r3, [r0, #0]
 801449e:	f10d 0808 	add.w	r8, sp, #8
 80144a2:	2401      	movs	r4, #1
 80144a4:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 80144a8:	4798      	blx	r3
 80144aa:	f848 0d04 	str.w	r0, [r8, #-4]!
 80144ae:	4640      	mov	r0, r8
 80144b0:	f7ff ffa6 	bl	8014400 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 80144b4:	b200      	sxth	r0, r0
 80144b6:	1b80      	subs	r0, r0, r6
 80144b8:	ea80 79e0 	eor.w	r9, r0, r0, asr #31
 80144bc:	eba9 79e0 	sub.w	r9, r9, r0, asr #31
 80144c0:	f9b5 311e 	ldrsh.w	r3, [r5, #286]	@ 0x11e
 80144c4:	42a3      	cmp	r3, r4
 80144c6:	dd1b      	ble.n	8014500 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x78>
 80144c8:	682b      	ldr	r3, [r5, #0]
 80144ca:	4621      	mov	r1, r4
 80144cc:	4628      	mov	r0, r5
 80144ce:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 80144d2:	4798      	blx	r3
 80144d4:	9001      	str	r0, [sp, #4]
 80144d6:	4640      	mov	r0, r8
 80144d8:	f7ff ff92 	bl	8014400 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 80144dc:	b200      	sxth	r0, r0
 80144de:	1b80      	subs	r0, r0, r6
 80144e0:	2800      	cmp	r0, #0
 80144e2:	bfb8      	it	lt
 80144e4:	4240      	neglt	r0, r0
 80144e6:	4548      	cmp	r0, r9
 80144e8:	bf38      	it	cc
 80144ea:	803c      	strhcc	r4, [r7, #0]
 80144ec:	f104 0401 	add.w	r4, r4, #1
 80144f0:	bf38      	it	cc
 80144f2:	4681      	movcc	r9, r0
 80144f4:	b224      	sxth	r4, r4
 80144f6:	e7e3      	b.n	80144c0 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x38>
 80144f8:	4618      	mov	r0, r3
 80144fa:	b003      	add	sp, #12
 80144fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014500:	2001      	movs	r0, #1
 8014502:	e7fa      	b.n	80144fa <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x72>

08014504 <_ZN8touchgfx17AbstractDataGraph19setGraphAreaPaddingEssss>:
 8014504:	f8a0 3118 	strh.w	r3, [r0, #280]	@ 0x118
 8014508:	f9bd 3000 	ldrsh.w	r3, [sp]
 801450c:	f8a0 1114 	strh.w	r1, [r0, #276]	@ 0x114
 8014510:	f8a0 2116 	strh.w	r2, [r0, #278]	@ 0x116
 8014514:	f8a0 311a 	strh.w	r3, [r0, #282]	@ 0x11a
 8014518:	4770      	bx	lr

0801451a <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>:
 801451a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801451c:	4604      	mov	r4, r0
 801451e:	3038      	adds	r0, #56	@ 0x38
 8014520:	460d      	mov	r5, r1
 8014522:	f7fd ff3d 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8014526:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	@ 0x42
 801452a:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 801452e:	4628      	mov	r0, r5
 8014530:	9200      	str	r2, [sp, #0]
 8014532:	2200      	movs	r2, #0
 8014534:	4611      	mov	r1, r2
 8014536:	f7f0 fe95 	bl	8005264 <_ZN8touchgfx8Drawable11setPositionEssss>
 801453a:	b003      	add	sp, #12
 801453c:	bd30      	pop	{r4, r5, pc}

0801453e <_ZN8touchgfx17AbstractDataGraph14addLeftElementERNS_23AbstractGraphDecorationE>:
 801453e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014540:	4604      	mov	r4, r0
 8014542:	3064      	adds	r0, #100	@ 0x64
 8014544:	460d      	mov	r5, r1
 8014546:	f7fd ff2b 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801454a:	f9b4 206e 	ldrsh.w	r2, [r4, #110]	@ 0x6e
 801454e:	f9b4 306c 	ldrsh.w	r3, [r4, #108]	@ 0x6c
 8014552:	4628      	mov	r0, r5
 8014554:	9200      	str	r2, [sp, #0]
 8014556:	2200      	movs	r2, #0
 8014558:	4611      	mov	r1, r2
 801455a:	f7f0 fe83 	bl	8005264 <_ZN8touchgfx8Drawable11setPositionEssss>
 801455e:	b003      	add	sp, #12
 8014560:	bd30      	pop	{r4, r5, pc}

08014562 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs>:
 8014562:	b538      	push	{r3, r4, r5, lr}
 8014564:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	@ 0x11e
 8014568:	460d      	mov	r5, r1
 801456a:	428b      	cmp	r3, r1
 801456c:	dd08      	ble.n	8014580 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0x1e>
 801456e:	6e04      	ldr	r4, [r0, #96]	@ 0x60
 8014570:	b134      	cbz	r4, 8014580 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0x1e>
 8014572:	6823      	ldr	r3, [r4, #0]
 8014574:	4620      	mov	r0, r4
 8014576:	4629      	mov	r1, r5
 8014578:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801457a:	4798      	blx	r3
 801457c:	69a4      	ldr	r4, [r4, #24]
 801457e:	e7f7      	b.n	8014570 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0xe>
 8014580:	bd38      	pop	{r3, r4, r5, pc}

08014582 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs>:
 8014582:	b570      	push	{r4, r5, r6, lr}
 8014584:	4606      	mov	r6, r0
 8014586:	460d      	mov	r5, r1
 8014588:	f8d0 40e4 	ldr.w	r4, [r0, #228]	@ 0xe4
 801458c:	b134      	cbz	r4, 801459c <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0x1a>
 801458e:	6823      	ldr	r3, [r4, #0]
 8014590:	4620      	mov	r0, r4
 8014592:	4629      	mov	r1, r5
 8014594:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014596:	4798      	blx	r3
 8014598:	69a4      	ldr	r4, [r4, #24]
 801459a:	e7f7      	b.n	801458c <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0xa>
 801459c:	f8d6 4110 	ldr.w	r4, [r6, #272]	@ 0x110
 80145a0:	b134      	cbz	r4, 80145b0 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0x2e>
 80145a2:	6823      	ldr	r3, [r4, #0]
 80145a4:	4620      	mov	r0, r4
 80145a6:	4629      	mov	r1, r5
 80145a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80145aa:	4798      	blx	r3
 80145ac:	69a4      	ldr	r4, [r4, #24]
 80145ae:	e7f7      	b.n	80145a0 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0x1e>
 80145b0:	bd70      	pop	{r4, r5, r6, pc}

080145b2 <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv>:
 80145b2:	b538      	push	{r3, r4, r5, lr}
 80145b4:	4604      	mov	r4, r0
 80145b6:	2500      	movs	r5, #0
 80145b8:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	@ 0x11e
 80145bc:	42ab      	cmp	r3, r5
 80145be:	db05      	blt.n	80145cc <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv+0x1a>
 80145c0:	b229      	sxth	r1, r5
 80145c2:	4620      	mov	r0, r4
 80145c4:	f7ff ffdd 	bl	8014582 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs>
 80145c8:	3501      	adds	r5, #1
 80145ca:	e7f5      	b.n	80145b8 <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv+0x6>
 80145cc:	f104 00bc 	add.w	r0, r4, #188	@ 0xbc
 80145d0:	f005 fc36 	bl	8019e40 <_ZNK8touchgfx8Drawable10invalidateEv>
 80145d4:	f104 00e8 	add.w	r0, r4, #232	@ 0xe8
 80145d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80145dc:	f005 bc30 	b.w	8019e40 <_ZNK8touchgfx8Drawable10invalidateEv>

080145e0 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>:
 80145e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80145e2:	4604      	mov	r4, r0
 80145e4:	6e05      	ldr	r5, [r0, #96]	@ 0x60
 80145e6:	b15d      	cbz	r5, 8014600 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x20>
 80145e8:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	@ 0x42
 80145ec:	4628      	mov	r0, r5
 80145ee:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 80145f2:	9200      	str	r2, [sp, #0]
 80145f4:	2200      	movs	r2, #0
 80145f6:	4611      	mov	r1, r2
 80145f8:	f7f0 fe34 	bl	8005264 <_ZN8touchgfx8Drawable11setPositionEssss>
 80145fc:	69ad      	ldr	r5, [r5, #24]
 80145fe:	e7f2      	b.n	80145e6 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x6>
 8014600:	f8d4 50e4 	ldr.w	r5, [r4, #228]	@ 0xe4
 8014604:	b15d      	cbz	r5, 801461e <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x3e>
 8014606:	f9b4 20c6 	ldrsh.w	r2, [r4, #198]	@ 0xc6
 801460a:	4628      	mov	r0, r5
 801460c:	f9b4 30c4 	ldrsh.w	r3, [r4, #196]	@ 0xc4
 8014610:	9200      	str	r2, [sp, #0]
 8014612:	2200      	movs	r2, #0
 8014614:	4611      	mov	r1, r2
 8014616:	f7f0 fe25 	bl	8005264 <_ZN8touchgfx8Drawable11setPositionEssss>
 801461a:	69ad      	ldr	r5, [r5, #24]
 801461c:	e7f2      	b.n	8014604 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x24>
 801461e:	f8d4 508c 	ldr.w	r5, [r4, #140]	@ 0x8c
 8014622:	b15d      	cbz	r5, 801463c <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x5c>
 8014624:	f9b4 206e 	ldrsh.w	r2, [r4, #110]	@ 0x6e
 8014628:	4628      	mov	r0, r5
 801462a:	f9b4 306c 	ldrsh.w	r3, [r4, #108]	@ 0x6c
 801462e:	9200      	str	r2, [sp, #0]
 8014630:	2200      	movs	r2, #0
 8014632:	4611      	mov	r1, r2
 8014634:	f7f0 fe16 	bl	8005264 <_ZN8touchgfx8Drawable11setPositionEssss>
 8014638:	69ad      	ldr	r5, [r5, #24]
 801463a:	e7f2      	b.n	8014622 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x42>
 801463c:	f8d4 50b8 	ldr.w	r5, [r4, #184]	@ 0xb8
 8014640:	b15d      	cbz	r5, 801465a <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x7a>
 8014642:	f9b4 209a 	ldrsh.w	r2, [r4, #154]	@ 0x9a
 8014646:	4628      	mov	r0, r5
 8014648:	f9b4 3098 	ldrsh.w	r3, [r4, #152]	@ 0x98
 801464c:	9200      	str	r2, [sp, #0]
 801464e:	2200      	movs	r2, #0
 8014650:	4611      	mov	r1, r2
 8014652:	f7f0 fe07 	bl	8005264 <_ZN8touchgfx8Drawable11setPositionEssss>
 8014656:	69ad      	ldr	r5, [r5, #24]
 8014658:	e7f2      	b.n	8014640 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x60>
 801465a:	f8d4 5110 	ldr.w	r5, [r4, #272]	@ 0x110
 801465e:	b15d      	cbz	r5, 8014678 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x98>
 8014660:	f9b4 20f2 	ldrsh.w	r2, [r4, #242]	@ 0xf2
 8014664:	4628      	mov	r0, r5
 8014666:	f9b4 30f0 	ldrsh.w	r3, [r4, #240]	@ 0xf0
 801466a:	9200      	str	r2, [sp, #0]
 801466c:	2200      	movs	r2, #0
 801466e:	4611      	mov	r1, r2
 8014670:	f7f0 fdf8 	bl	8005264 <_ZN8touchgfx8Drawable11setPositionEssss>
 8014674:	69ad      	ldr	r5, [r5, #24]
 8014676:	e7f2      	b.n	801465e <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x7e>
 8014678:	6823      	ldr	r3, [r4, #0]
 801467a:	4620      	mov	r0, r4
 801467c:	695b      	ldr	r3, [r3, #20]
 801467e:	b003      	add	sp, #12
 8014680:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014684:	4718      	bx	r3

08014686 <_ZN8touchgfx17AbstractDataGraph8setWidthEs>:
 8014686:	b430      	push	{r4, r5}
 8014688:	b28a      	uxth	r2, r1
 801468a:	f8b0 4098 	ldrh.w	r4, [r0, #152]	@ 0x98
 801468e:	f8a0 10c4 	strh.w	r1, [r0, #196]	@ 0xc4
 8014692:	1b15      	subs	r5, r2, r4
 8014694:	f8a0 10f0 	strh.w	r1, [r0, #240]	@ 0xf0
 8014698:	8101      	strh	r1, [r0, #8]
 801469a:	f8a0 5094 	strh.w	r5, [r0, #148]	@ 0x94
 801469e:	f8b0 506c 	ldrh.w	r5, [r0, #108]	@ 0x6c
 80146a2:	442c      	add	r4, r5
 80146a4:	1b12      	subs	r2, r2, r4
 80146a6:	bc30      	pop	{r4, r5}
 80146a8:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 80146ac:	f7ff bf98 	b.w	80145e0 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>

080146b0 <_ZN8touchgfx17AbstractDataGraph9setHeightEs>:
 80146b0:	b430      	push	{r4, r5}
 80146b2:	b28a      	uxth	r2, r1
 80146b4:	f8b0 40f2 	ldrh.w	r4, [r0, #242]	@ 0xf2
 80146b8:	f8a0 106e 	strh.w	r1, [r0, #110]	@ 0x6e
 80146bc:	1b15      	subs	r5, r2, r4
 80146be:	f8a0 109a 	strh.w	r1, [r0, #154]	@ 0x9a
 80146c2:	8141      	strh	r1, [r0, #10]
 80146c4:	f8a0 50ee 	strh.w	r5, [r0, #238]	@ 0xee
 80146c8:	f8b0 50c6 	ldrh.w	r5, [r0, #198]	@ 0xc6
 80146cc:	442c      	add	r4, r5
 80146ce:	1b12      	subs	r2, r2, r4
 80146d0:	bc30      	pop	{r4, r5}
 80146d2:	f8a0 2042 	strh.w	r2, [r0, #66]	@ 0x42
 80146d6:	f7ff bf83 	b.w	80145e0 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>

080146da <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>:
 80146da:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80146de:	fa1f fa83 	uxth.w	sl, r3
 80146e2:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	@ 0x28
 80146e6:	4615      	mov	r5, r2
 80146e8:	4699      	mov	r9, r3
 80146ea:	fa1f f887 	uxth.w	r8, r7
 80146ee:	8903      	ldrh	r3, [r0, #8]
 80146f0:	4452      	add	r2, sl
 80146f2:	4604      	mov	r4, r0
 80146f4:	8940      	ldrh	r0, [r0, #10]
 80146f6:	460e      	mov	r6, r1
 80146f8:	1a9b      	subs	r3, r3, r2
 80146fa:	eb08 0201 	add.w	r2, r8, r1
 80146fe:	1a80      	subs	r0, r0, r2
 8014700:	b21b      	sxth	r3, r3
 8014702:	460a      	mov	r2, r1
 8014704:	4629      	mov	r1, r5
 8014706:	b200      	sxth	r0, r0
 8014708:	9000      	str	r0, [sp, #0]
 801470a:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 801470e:	f7f0 fda9 	bl	8005264 <_ZN8touchgfx8Drawable11setPositionEssss>
 8014712:	2200      	movs	r2, #0
 8014714:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8014718:	f104 00bc 	add.w	r0, r4, #188	@ 0xbc
 801471c:	4611      	mov	r1, r2
 801471e:	9600      	str	r6, [sp, #0]
 8014720:	f7f0 fda0 	bl	8005264 <_ZN8touchgfx8Drawable11setPositionEssss>
 8014724:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8014728:	2200      	movs	r2, #0
 801472a:	f104 0064 	add.w	r0, r4, #100	@ 0x64
 801472e:	9300      	str	r3, [sp, #0]
 8014730:	462b      	mov	r3, r5
 8014732:	4611      	mov	r1, r2
 8014734:	f7f0 fd96 	bl	8005264 <_ZN8touchgfx8Drawable11setPositionEssss>
 8014738:	8921      	ldrh	r1, [r4, #8]
 801473a:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801473e:	f104 0090 	add.w	r0, r4, #144	@ 0x90
 8014742:	eba1 010a 	sub.w	r1, r1, sl
 8014746:	2200      	movs	r2, #0
 8014748:	9300      	str	r3, [sp, #0]
 801474a:	464b      	mov	r3, r9
 801474c:	b209      	sxth	r1, r1
 801474e:	f7f0 fd89 	bl	8005264 <_ZN8touchgfx8Drawable11setPositionEssss>
 8014752:	8962      	ldrh	r2, [r4, #10]
 8014754:	f104 00e8 	add.w	r0, r4, #232	@ 0xe8
 8014758:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 801475c:	eba2 0208 	sub.w	r2, r2, r8
 8014760:	9700      	str	r7, [sp, #0]
 8014762:	2100      	movs	r1, #0
 8014764:	b212      	sxth	r2, r2
 8014766:	f7f0 fd7d 	bl	8005264 <_ZN8touchgfx8Drawable11setPositionEssss>
 801476a:	4620      	mov	r0, r4
 801476c:	b002      	add	sp, #8
 801476e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014772:	f7ff bf35 	b.w	80145e0 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>
	...

08014778 <_ZN8touchgfx17AbstractDataGraphC1Es>:
 8014778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801477c:	b085      	sub	sp, #20
 801477e:	4604      	mov	r4, r0
 8014780:	2601      	movs	r6, #1
 8014782:	2500      	movs	r5, #0
 8014784:	9103      	str	r1, [sp, #12]
 8014786:	f7ff fe21 	bl	80143cc <_ZN8touchgfx9ContainerC1Ev>
 801478a:	4b2c      	ldr	r3, [pc, #176]	@ (801483c <_ZN8touchgfx17AbstractDataGraphC1Es+0xc4>)
 801478c:	f104 0b38 	add.w	fp, r4, #56	@ 0x38
 8014790:	f104 0964 	add.w	r9, r4, #100	@ 0x64
 8014794:	f104 0890 	add.w	r8, r4, #144	@ 0x90
 8014798:	6023      	str	r3, [r4, #0]
 801479a:	23ff      	movs	r3, #255	@ 0xff
 801479c:	4658      	mov	r0, fp
 801479e:	f104 0abc 	add.w	sl, r4, #188	@ 0xbc
 80147a2:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 80147a6:	f104 07e8 	add.w	r7, r4, #232	@ 0xe8
 80147aa:	e9c4 660c 	strd	r6, r6, [r4, #48]	@ 0x30
 80147ae:	f7ff fe0d 	bl	80143cc <_ZN8touchgfx9ContainerC1Ev>
 80147b2:	4648      	mov	r0, r9
 80147b4:	f7ff fe0a 	bl	80143cc <_ZN8touchgfx9ContainerC1Ev>
 80147b8:	4640      	mov	r0, r8
 80147ba:	f7ff fe07 	bl	80143cc <_ZN8touchgfx9ContainerC1Ev>
 80147be:	4650      	mov	r0, sl
 80147c0:	f7ff fe04 	bl	80143cc <_ZN8touchgfx9ContainerC1Ev>
 80147c4:	4638      	mov	r0, r7
 80147c6:	f7ff fe01 	bl	80143cc <_ZN8touchgfx9ContainerC1Ev>
 80147ca:	9903      	ldr	r1, [sp, #12]
 80147cc:	4620      	mov	r0, r4
 80147ce:	f8c4 5114 	str.w	r5, [r4, #276]	@ 0x114
 80147d2:	f8a4 111c 	strh.w	r1, [r4, #284]	@ 0x11c
 80147d6:	4659      	mov	r1, fp
 80147d8:	f8c4 5118 	str.w	r5, [r4, #280]	@ 0x118
 80147dc:	f8a4 511e 	strh.w	r5, [r4, #286]	@ 0x11e
 80147e0:	f8a4 5120 	strh.w	r5, [r4, #288]	@ 0x120
 80147e4:	f8c4 5124 	str.w	r5, [r4, #292]	@ 0x124
 80147e8:	f8c4 5128 	str.w	r5, [r4, #296]	@ 0x128
 80147ec:	f8c4 512c 	str.w	r5, [r4, #300]	@ 0x12c
 80147f0:	f8c4 5130 	str.w	r5, [r4, #304]	@ 0x130
 80147f4:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
 80147f8:	f8c4 5138 	str.w	r5, [r4, #312]	@ 0x138
 80147fc:	f7fd fdd0 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8014800:	4651      	mov	r1, sl
 8014802:	4620      	mov	r0, r4
 8014804:	f7fd fdcc 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8014808:	4649      	mov	r1, r9
 801480a:	4620      	mov	r0, r4
 801480c:	f7fd fdc8 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8014810:	4641      	mov	r1, r8
 8014812:	4620      	mov	r0, r4
 8014814:	f7fd fdc4 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8014818:	4639      	mov	r1, r7
 801481a:	4620      	mov	r0, r4
 801481c:	f7fd fdc0 	bl	80123a0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8014820:	4620      	mov	r0, r4
 8014822:	9500      	str	r5, [sp, #0]
 8014824:	462b      	mov	r3, r5
 8014826:	462a      	mov	r2, r5
 8014828:	4629      	mov	r1, r5
 801482a:	f7ff ff56 	bl	80146da <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>
 801482e:	4620      	mov	r0, r4
 8014830:	f884 6024 	strb.w	r6, [r4, #36]	@ 0x24
 8014834:	b005      	add	sp, #20
 8014836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801483a:	bf00      	nop
 801483c:	08042230 	.word	0x08042230

08014840 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>:
 8014840:	4291      	cmp	r1, r2
 8014842:	4613      	mov	r3, r2
 8014844:	d003      	beq.n	801484e <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii+0xe>
 8014846:	460a      	mov	r2, r1
 8014848:	4619      	mov	r1, r3
 801484a:	f005 bcc4 	b.w	801a1d6 <_ZN8touchgfx6muldivElll>
 801484e:	4770      	bx	lr

08014850 <_ZN8touchgfx16DynamicDataGraph9setScaleXEib>:
 8014850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014854:	6803      	ldr	r3, [r0, #0]
 8014856:	460d      	mov	r5, r1
 8014858:	4604      	mov	r4, r0
 801485a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801485e:	4798      	blx	r3
 8014860:	42a8      	cmp	r0, r5
 8014862:	4606      	mov	r6, r0
 8014864:	d024      	beq.n	80148b0 <_ZN8touchgfx16DynamicDataGraph9setScaleXEib+0x60>
 8014866:	6823      	ldr	r3, [r4, #0]
 8014868:	4601      	mov	r1, r0
 801486a:	462a      	mov	r2, r5
 801486c:	f8d4 012c 	ldr.w	r0, [r4, #300]	@ 0x12c
 8014870:	f8d3 70a4 	ldr.w	r7, [r3, #164]	@ 0xa4
 8014874:	f7ff ffe4 	bl	8014840 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 8014878:	4680      	mov	r8, r0
 801487a:	462a      	mov	r2, r5
 801487c:	4631      	mov	r1, r6
 801487e:	f8d4 0130 	ldr.w	r0, [r4, #304]	@ 0x130
 8014882:	f7ff ffdd 	bl	8014840 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 8014886:	4641      	mov	r1, r8
 8014888:	4602      	mov	r2, r0
 801488a:	4620      	mov	r0, r4
 801488c:	47b8      	blx	r7
 801488e:	462a      	mov	r2, r5
 8014890:	4631      	mov	r1, r6
 8014892:	f8d4 013c 	ldr.w	r0, [r4, #316]	@ 0x13c
 8014896:	f7ff ffd3 	bl	8014840 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 801489a:	462a      	mov	r2, r5
 801489c:	f8c4 013c 	str.w	r0, [r4, #316]	@ 0x13c
 80148a0:	4631      	mov	r1, r6
 80148a2:	f8d4 0140 	ldr.w	r0, [r4, #320]	@ 0x140
 80148a6:	f7ff ffcb 	bl	8014840 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 80148aa:	6325      	str	r5, [r4, #48]	@ 0x30
 80148ac:	f8c4 0140 	str.w	r0, [r4, #320]	@ 0x140
 80148b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080148b4 <_ZN8touchgfx16DynamicDataGraph9setScaleYEib>:
 80148b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80148b8:	4604      	mov	r4, r0
 80148ba:	460f      	mov	r7, r1
 80148bc:	b1b2      	cbz	r2, 80148ec <_ZN8touchgfx16DynamicDataGraph9setScaleYEib+0x38>
 80148be:	6803      	ldr	r3, [r0, #0]
 80148c0:	2600      	movs	r6, #0
 80148c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80148c6:	4798      	blx	r3
 80148c8:	4681      	mov	r9, r0
 80148ca:	b235      	sxth	r5, r6
 80148cc:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	@ 0x11e
 80148d0:	3601      	adds	r6, #1
 80148d2:	42ab      	cmp	r3, r5
 80148d4:	dd0a      	ble.n	80148ec <_ZN8touchgfx16DynamicDataGraph9setScaleYEib+0x38>
 80148d6:	f8d4 8144 	ldr.w	r8, [r4, #324]	@ 0x144
 80148da:	463a      	mov	r2, r7
 80148dc:	4649      	mov	r1, r9
 80148de:	f858 0025 	ldr.w	r0, [r8, r5, lsl #2]
 80148e2:	f7ff ffad 	bl	8014840 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 80148e6:	f848 0025 	str.w	r0, [r8, r5, lsl #2]
 80148ea:	e7ee      	b.n	80148ca <_ZN8touchgfx16DynamicDataGraph9setScaleYEib+0x16>
 80148ec:	6367      	str	r7, [r4, #52]	@ 0x34
 80148ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080148f2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>:
 80148f2:	b570      	push	{r4, r5, r6, lr}
 80148f4:	6803      	ldr	r3, [r0, #0]
 80148f6:	4604      	mov	r4, r0
 80148f8:	460d      	mov	r5, r1
 80148fa:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 80148fe:	4798      	blx	r3
 8014900:	f8d4 3148 	ldr.w	r3, [r4, #328]	@ 0x148
 8014904:	4629      	mov	r1, r5
 8014906:	4620      	mov	r0, r4
 8014908:	3301      	adds	r3, #1
 801490a:	f8c4 3148 	str.w	r3, [r4, #328]	@ 0x148
 801490e:	6823      	ldr	r3, [r4, #0]
 8014910:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014914:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 8014918:	4718      	bx	r3

0801491a <_ZN8touchgfx16GraphElementLineD1Ev>:
 801491a:	4770      	bx	lr

0801491c <_ZN8touchgfx16GraphElementLineD0Ev>:
 801491c:	b510      	push	{r4, lr}
 801491e:	4604      	mov	r4, r0
 8014920:	2130      	movs	r1, #48	@ 0x30
 8014922:	f015 fccd 	bl	802a2c0 <_ZdlPvj>
 8014926:	4620      	mov	r0, r4
 8014928:	bd10      	pop	{r4, pc}

0801492a <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 801492a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801492c:	4604      	mov	r4, r0
 801492e:	4608      	mov	r0, r1
 8014930:	460d      	mov	r5, r1
 8014932:	f7fd fefc 	bl	801272e <_ZNK8touchgfx4Rect7isEmptyEv>
 8014936:	b978      	cbnz	r0, 8014958 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 8014938:	4620      	mov	r0, r4
 801493a:	f7fd fef8 	bl	801272e <_ZNK8touchgfx4Rect7isEmptyEv>
 801493e:	f9b5 6000 	ldrsh.w	r6, [r5]
 8014942:	b150      	cbz	r0, 801495a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 8014944:	8026      	strh	r6, [r4, #0]
 8014946:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801494a:	8063      	strh	r3, [r4, #2]
 801494c:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8014950:	80a3      	strh	r3, [r4, #4]
 8014952:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8014956:	80e3      	strh	r3, [r4, #6]
 8014958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801495a:	f9b4 1000 	ldrsh.w	r1, [r4]
 801495e:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8014962:	42b1      	cmp	r1, r6
 8014964:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8014968:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 801496c:	460f      	mov	r7, r1
 801496e:	88ed      	ldrh	r5, [r5, #6]
 8014970:	bfa8      	it	ge
 8014972:	4637      	movge	r7, r6
 8014974:	4293      	cmp	r3, r2
 8014976:	4618      	mov	r0, r3
 8014978:	4466      	add	r6, ip
 801497a:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801497e:	bfa8      	it	ge
 8014980:	4610      	movge	r0, r2
 8014982:	442a      	add	r2, r5
 8014984:	88e5      	ldrh	r5, [r4, #6]
 8014986:	4461      	add	r1, ip
 8014988:	b236      	sxth	r6, r6
 801498a:	8027      	strh	r7, [r4, #0]
 801498c:	442b      	add	r3, r5
 801498e:	b209      	sxth	r1, r1
 8014990:	b212      	sxth	r2, r2
 8014992:	8060      	strh	r0, [r4, #2]
 8014994:	b21b      	sxth	r3, r3
 8014996:	428e      	cmp	r6, r1
 8014998:	bfac      	ite	ge
 801499a:	ebc7 0106 	rsbge	r1, r7, r6
 801499e:	ebc7 0101 	rsblt	r1, r7, r1
 80149a2:	429a      	cmp	r2, r3
 80149a4:	bfac      	ite	ge
 80149a6:	ebc0 0202 	rsbge	r2, r0, r2
 80149aa:	ebc0 0203 	rsblt	r2, r0, r3
 80149ae:	80a1      	strh	r1, [r4, #4]
 80149b0:	80e2      	strh	r2, [r4, #6]
 80149b2:	e7d1      	b.n	8014958 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>

080149b4 <_ZNK8touchgfx20AbstractGraphElement21rectFromQ5CoordinatesENS_7CWRUtil2Q5ES2_S2_S2_>:
 80149b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80149b6:	9906      	ldr	r1, [sp, #24]
 80149b8:	4606      	mov	r6, r0
 80149ba:	461c      	mov	r4, r3
 80149bc:	2020      	movs	r0, #32
 80149be:	4291      	cmp	r1, r2
 80149c0:	bfbc      	itt	lt
 80149c2:	9206      	strlt	r2, [sp, #24]
 80149c4:	460a      	movlt	r2, r1
 80149c6:	9907      	ldr	r1, [sp, #28]
 80149c8:	428b      	cmp	r3, r1
 80149ca:	bfc4      	itt	gt
 80149cc:	460c      	movgt	r4, r1
 80149ce:	9307      	strgt	r3, [sp, #28]
 80149d0:	fb92 f5f0 	sdiv	r5, r2, r0
 80149d4:	fb94 f4f0 	sdiv	r4, r4, r0
 80149d8:	a806      	add	r0, sp, #24
 80149da:	f7fe ffba 	bl	8013952 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 80149de:	4607      	mov	r7, r0
 80149e0:	a807      	add	r0, sp, #28
 80149e2:	f7fe ffb6 	bl	8013952 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 80149e6:	1b7a      	subs	r2, r7, r5
 80149e8:	1b00      	subs	r0, r0, r4
 80149ea:	8035      	strh	r5, [r6, #0]
 80149ec:	8074      	strh	r4, [r6, #2]
 80149ee:	80f0      	strh	r0, [r6, #6]
 80149f0:	4630      	mov	r0, r6
 80149f2:	80b2      	strh	r2, [r6, #4]
 80149f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080149f6 <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>:
 80149f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80149f8:	9c08      	ldr	r4, [sp, #32]
 80149fa:	2602      	movs	r6, #2
 80149fc:	4605      	mov	r5, r0
 80149fe:	3401      	adds	r4, #1
 8014a00:	fb94 f4f6 	sdiv	r4, r4, r6
 8014a04:	18a6      	adds	r6, r4, r2
 8014a06:	191f      	adds	r7, r3, r4
 8014a08:	1b12      	subs	r2, r2, r4
 8014a0a:	1b1b      	subs	r3, r3, r4
 8014a0c:	e9cd 6700 	strd	r6, r7, [sp]
 8014a10:	f7ff ffd0 	bl	80149b4 <_ZNK8touchgfx20AbstractGraphElement21rectFromQ5CoordinatesENS_7CWRUtil2Q5ES2_S2_S2_>
 8014a14:	4628      	mov	r0, r5
 8014a16:	b003      	add	sp, #12
 8014a18:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014a1a <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs>:
 8014a1a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014a1e:	6943      	ldr	r3, [r0, #20]
 8014a20:	b087      	sub	sp, #28
 8014a22:	4606      	mov	r6, r0
 8014a24:	460d      	mov	r5, r1
 8014a26:	2b00      	cmp	r3, #0
 8014a28:	d072      	beq.n	8014b10 <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0xf6>
 8014a2a:	695c      	ldr	r4, [r3, #20]
 8014a2c:	f890 702c 	ldrb.w	r7, [r0, #44]	@ 0x2c
 8014a30:	6823      	ldr	r3, [r4, #0]
 8014a32:	4620      	mov	r0, r4
 8014a34:	017f      	lsls	r7, r7, #5
 8014a36:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8014a3a:	4798      	blx	r3
 8014a3c:	6823      	ldr	r3, [r4, #0]
 8014a3e:	4680      	mov	r8, r0
 8014a40:	4629      	mov	r1, r5
 8014a42:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8014a46:	4620      	mov	r0, r4
 8014a48:	4798      	blx	r3
 8014a4a:	9700      	str	r7, [sp, #0]
 8014a4c:	4603      	mov	r3, r0
 8014a4e:	4642      	mov	r2, r8
 8014a50:	4631      	mov	r1, r6
 8014a52:	a802      	add	r0, sp, #8
 8014a54:	f7ff ffcf 	bl	80149f6 <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
 8014a58:	2d00      	cmp	r5, #0
 8014a5a:	dd1b      	ble.n	8014a94 <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0x7a>
 8014a5c:	f105 38ff 	add.w	r8, r5, #4294967295
 8014a60:	6823      	ldr	r3, [r4, #0]
 8014a62:	4620      	mov	r0, r4
 8014a64:	fa0f f888 	sxth.w	r8, r8
 8014a68:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8014a6c:	4641      	mov	r1, r8
 8014a6e:	4798      	blx	r3
 8014a70:	6823      	ldr	r3, [r4, #0]
 8014a72:	4681      	mov	r9, r0
 8014a74:	4641      	mov	r1, r8
 8014a76:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8014a7a:	4620      	mov	r0, r4
 8014a7c:	4798      	blx	r3
 8014a7e:	4631      	mov	r1, r6
 8014a80:	4603      	mov	r3, r0
 8014a82:	9700      	str	r7, [sp, #0]
 8014a84:	a804      	add	r0, sp, #16
 8014a86:	464a      	mov	r2, r9
 8014a88:	f7ff ffb5 	bl	80149f6 <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
 8014a8c:	a904      	add	r1, sp, #16
 8014a8e:	a802      	add	r0, sp, #8
 8014a90:	f7ff ff4b 	bl	801492a <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8014a94:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	@ 0x11e
 8014a98:	3b01      	subs	r3, #1
 8014a9a:	429d      	cmp	r5, r3
 8014a9c:	da19      	bge.n	8014ad2 <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0xb8>
 8014a9e:	3501      	adds	r5, #1
 8014aa0:	6823      	ldr	r3, [r4, #0]
 8014aa2:	4620      	mov	r0, r4
 8014aa4:	b22d      	sxth	r5, r5
 8014aa6:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8014aaa:	4629      	mov	r1, r5
 8014aac:	4798      	blx	r3
 8014aae:	6823      	ldr	r3, [r4, #0]
 8014ab0:	4680      	mov	r8, r0
 8014ab2:	4629      	mov	r1, r5
 8014ab4:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8014ab8:	4620      	mov	r0, r4
 8014aba:	4798      	blx	r3
 8014abc:	4631      	mov	r1, r6
 8014abe:	4603      	mov	r3, r0
 8014ac0:	9700      	str	r7, [sp, #0]
 8014ac2:	a804      	add	r0, sp, #16
 8014ac4:	4642      	mov	r2, r8
 8014ac6:	f7ff ff96 	bl	80149f6 <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
 8014aca:	a904      	add	r1, sp, #16
 8014acc:	a802      	add	r0, sp, #8
 8014ace:	f7ff ff2c 	bl	801492a <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8014ad2:	f9b4 1114 	ldrsh.w	r1, [r4, #276]	@ 0x114
 8014ad6:	f8b4 311a 	ldrh.w	r3, [r4, #282]	@ 0x11a
 8014ada:	f9b4 0040 	ldrsh.w	r0, [r4, #64]	@ 0x40
 8014ade:	18ca      	adds	r2, r1, r3
 8014ae0:	f8b4 3042 	ldrh.w	r3, [r4, #66]	@ 0x42
 8014ae4:	f8ad 1012 	strh.w	r1, [sp, #18]
 8014ae8:	a904      	add	r1, sp, #16
 8014aea:	1a9b      	subs	r3, r3, r2
 8014aec:	2200      	movs	r2, #0
 8014aee:	f8ad 0014 	strh.w	r0, [sp, #20]
 8014af2:	a802      	add	r0, sp, #8
 8014af4:	f8ad 2010 	strh.w	r2, [sp, #16]
 8014af8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014afc:	f7fd fdd4 	bl	80126a8 <_ZN8touchgfx4RectaNERKS0_>
 8014b00:	6833      	ldr	r3, [r6, #0]
 8014b02:	a902      	add	r1, sp, #8
 8014b04:	4630      	mov	r0, r6
 8014b06:	691b      	ldr	r3, [r3, #16]
 8014b08:	4798      	blx	r3
 8014b0a:	b007      	add	sp, #28
 8014b0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014b10:	681b      	ldr	r3, [r3, #0]
 8014b12:	deff      	udf	#255	@ 0xff

08014b14 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>:
 8014b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b18:	b08b      	sub	sp, #44	@ 0x2c
 8014b1a:	461e      	mov	r6, r3
 8014b1c:	460f      	mov	r7, r1
 8014b1e:	4615      	mov	r5, r2
 8014b20:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	@ 0x50
 8014b24:	429e      	cmp	r6, r3
 8014b26:	9304      	str	r3, [sp, #16]
 8014b28:	d074      	beq.n	8014c14 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0x100>
 8014b2a:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8014b2e:	4631      	mov	r1, r6
 8014b30:	4610      	mov	r0, r2
 8014b32:	4634      	mov	r4, r6
 8014b34:	015b      	lsls	r3, r3, #5
 8014b36:	9303      	str	r3, [sp, #12]
 8014b38:	6813      	ldr	r3, [r2, #0]
 8014b3a:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8014b3e:	4798      	blx	r3
 8014b40:	ab0a      	add	r3, sp, #40	@ 0x28
 8014b42:	f843 0d10 	str.w	r0, [r3, #-16]!
 8014b46:	4618      	mov	r0, r3
 8014b48:	f7ff fc5a 	bl	8014400 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8014b4c:	682b      	ldr	r3, [r5, #0]
 8014b4e:	4631      	mov	r1, r6
 8014b50:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8014b54:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8014b58:	4628      	mov	r0, r5
 8014b5a:	4798      	blx	r3
 8014b5c:	ab0a      	add	r3, sp, #40	@ 0x28
 8014b5e:	f843 0d0c 	str.w	r0, [r3, #-12]!
 8014b62:	4618      	mov	r0, r3
 8014b64:	f7ff fc4c 	bl	8014400 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8014b68:	4641      	mov	r1, r8
 8014b6a:	ea4f 1940 	mov.w	r9, r0, lsl #5
 8014b6e:	4638      	mov	r0, r7
 8014b70:	464a      	mov	r2, r9
 8014b72:	f015 fac5 	bl	802a100 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8014b76:	2301      	movs	r3, #1
 8014b78:	9300      	str	r3, [sp, #0]
 8014b7a:	4628      	mov	r0, r5
 8014b7c:	9b00      	ldr	r3, [sp, #0]
 8014b7e:	441c      	add	r4, r3
 8014b80:	682b      	ldr	r3, [r5, #0]
 8014b82:	b224      	sxth	r4, r4
 8014b84:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8014b88:	4621      	mov	r1, r4
 8014b8a:	4798      	blx	r3
 8014b8c:	9008      	str	r0, [sp, #32]
 8014b8e:	a808      	add	r0, sp, #32
 8014b90:	f7ff fc36 	bl	8014400 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8014b94:	4621      	mov	r1, r4
 8014b96:	0143      	lsls	r3, r0, #5
 8014b98:	4628      	mov	r0, r5
 8014b9a:	9301      	str	r3, [sp, #4]
 8014b9c:	682b      	ldr	r3, [r5, #0]
 8014b9e:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8014ba2:	4798      	blx	r3
 8014ba4:	9009      	str	r0, [sp, #36]	@ 0x24
 8014ba6:	a809      	add	r0, sp, #36	@ 0x24
 8014ba8:	f7ff fc2a 	bl	8014400 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8014bac:	0143      	lsls	r3, r0, #5
 8014bae:	9302      	str	r3, [sp, #8]
 8014bb0:	9b01      	ldr	r3, [sp, #4]
 8014bb2:	eba3 0b08 	sub.w	fp, r3, r8
 8014bb6:	9b02      	ldr	r3, [sp, #8]
 8014bb8:	eba3 0a09 	sub.w	sl, r3, r9
 8014bbc:	4658      	mov	r0, fp
 8014bbe:	4651      	mov	r1, sl
 8014bc0:	f7ff f808 	bl	8013bd4 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 8014bc4:	b320      	cbz	r0, 8014c10 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0xfc>
 8014bc6:	4602      	mov	r2, r0
 8014bc8:	4651      	mov	r1, sl
 8014bca:	9005      	str	r0, [sp, #20]
 8014bcc:	9803      	ldr	r0, [sp, #12]
 8014bce:	f005 fb02 	bl	801a1d6 <_ZN8touchgfx6muldivElll>
 8014bd2:	2302      	movs	r3, #2
 8014bd4:	4659      	mov	r1, fp
 8014bd6:	fb90 faf3 	sdiv	sl, r0, r3
 8014bda:	9b05      	ldr	r3, [sp, #20]
 8014bdc:	9803      	ldr	r0, [sp, #12]
 8014bde:	461a      	mov	r2, r3
 8014be0:	f005 faf9 	bl	801a1d6 <_ZN8touchgfx6muldivElll>
 8014be4:	2302      	movs	r3, #2
 8014be6:	eba8 010a 	sub.w	r1, r8, sl
 8014bea:	fb90 fbf3 	sdiv	fp, r0, r3
 8014bee:	683b      	ldr	r3, [r7, #0]
 8014bf0:	eb0b 0209 	add.w	r2, fp, r9
 8014bf4:	4638      	mov	r0, r7
 8014bf6:	689b      	ldr	r3, [r3, #8]
 8014bf8:	4798      	blx	r3
 8014bfa:	683b      	ldr	r3, [r7, #0]
 8014bfc:	9a02      	ldr	r2, [sp, #8]
 8014bfe:	4638      	mov	r0, r7
 8014c00:	9901      	ldr	r1, [sp, #4]
 8014c02:	689b      	ldr	r3, [r3, #8]
 8014c04:	445a      	add	r2, fp
 8014c06:	eba1 010a 	sub.w	r1, r1, sl
 8014c0a:	4798      	blx	r3
 8014c0c:	e9dd 8901 	ldrd	r8, r9, [sp, #4]
 8014c10:	42a6      	cmp	r6, r4
 8014c12:	db02      	blt.n	8014c1a <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0x106>
 8014c14:	b00b      	add	sp, #44	@ 0x2c
 8014c16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c1a:	9b00      	ldr	r3, [sp, #0]
 8014c1c:	9a04      	ldr	r2, [sp, #16]
 8014c1e:	42a2      	cmp	r2, r4
 8014c20:	bf08      	it	eq
 8014c22:	f04f 33ff 	moveq.w	r3, #4294967295
 8014c26:	e7a7      	b.n	8014b78 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0x64>

08014c28 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE>:
 8014c28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c2c:	6943      	ldr	r3, [r0, #20]
 8014c2e:	b0a2      	sub	sp, #136	@ 0x88
 8014c30:	4606      	mov	r6, r0
 8014c32:	460f      	mov	r7, r1
 8014c34:	2b00      	cmp	r3, #0
 8014c36:	d06c      	beq.n	8014d12 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xea>
 8014c38:	695c      	ldr	r4, [r3, #20]
 8014c3a:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	@ 0x11e
 8014c3e:	2b01      	cmp	r3, #1
 8014c40:	dc04      	bgt.n	8014c4c <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x24>
 8014c42:	2401      	movs	r4, #1
 8014c44:	4620      	mov	r0, r4
 8014c46:	b022      	add	sp, #136	@ 0x88
 8014c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c4c:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8014c50:	ad22      	add	r5, sp, #136	@ 0x88
 8014c52:	011b      	lsls	r3, r3, #4
 8014c54:	f845 3d70 	str.w	r3, [r5, #-112]!
 8014c58:	4628      	mov	r0, r5
 8014c5a:	f7fe fe7a 	bl	8013952 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 8014c5e:	8839      	ldrh	r1, [r7, #0]
 8014c60:	88ba      	ldrh	r2, [r7, #4]
 8014c62:	b280      	uxth	r0, r0
 8014c64:	6823      	ldr	r3, [r4, #0]
 8014c66:	440a      	add	r2, r1
 8014c68:	1a09      	subs	r1, r1, r0
 8014c6a:	4402      	add	r2, r0
 8014c6c:	f10d 000e 	add.w	r0, sp, #14
 8014c70:	b209      	sxth	r1, r1
 8014c72:	9000      	str	r0, [sp, #0]
 8014c74:	b212      	sxth	r2, r2
 8014c76:	f8d3 8124 	ldr.w	r8, [r3, #292]	@ 0x124
 8014c7a:	4620      	mov	r0, r4
 8014c7c:	ab03      	add	r3, sp, #12
 8014c7e:	47c0      	blx	r8
 8014c80:	2800      	cmp	r0, #0
 8014c82:	d0de      	beq.n	8014c42 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x1a>
 8014c84:	f9b4 1114 	ldrsh.w	r1, [r4, #276]	@ 0x114
 8014c88:	f8b4 311a 	ldrh.w	r3, [r4, #282]	@ 0x11a
 8014c8c:	f9b4 0040 	ldrsh.w	r0, [r4, #64]	@ 0x40
 8014c90:	18ca      	adds	r2, r1, r3
 8014c92:	f8b4 3042 	ldrh.w	r3, [r4, #66]	@ 0x42
 8014c96:	f8ad 1012 	strh.w	r1, [sp, #18]
 8014c9a:	4639      	mov	r1, r7
 8014c9c:	1a9b      	subs	r3, r3, r2
 8014c9e:	2200      	movs	r2, #0
 8014ca0:	f8ad 0014 	strh.w	r0, [sp, #20]
 8014ca4:	a804      	add	r0, sp, #16
 8014ca6:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014caa:	f8ad 2010 	strh.w	r2, [sp, #16]
 8014cae:	f7fd fcfb 	bl	80126a8 <_ZN8touchgfx4RectaNERKS0_>
 8014cb2:	aa04      	add	r2, sp, #16
 8014cb4:	4631      	mov	r1, r6
 8014cb6:	4628      	mov	r0, r5
 8014cb8:	f015 f8a2 	bl	8029e00 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 8014cbc:	f9b4 7120 	ldrsh.w	r7, [r4, #288]	@ 0x120
 8014cc0:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8014cc4:	2f00      	cmp	r7, #0
 8014cc6:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
 8014cca:	dd03      	ble.n	8014cd4 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xac>
 8014ccc:	42bb      	cmp	r3, r7
 8014cce:	da01      	bge.n	8014cd4 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xac>
 8014cd0:	42ba      	cmp	r2, r7
 8014cd2:	da11      	bge.n	8014cf8 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xd0>
 8014cd4:	9200      	str	r2, [sp, #0]
 8014cd6:	4622      	mov	r2, r4
 8014cd8:	4629      	mov	r1, r5
 8014cda:	4630      	mov	r0, r6
 8014cdc:	f7ff ff1a 	bl	8014b14 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>
 8014ce0:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8014ce4:	4628      	mov	r0, r5
 8014ce6:	f015 f947 	bl	8029f78 <_ZN8touchgfx6Canvas6renderEh>
 8014cea:	4b0b      	ldr	r3, [pc, #44]	@ (8014d18 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xf0>)
 8014cec:	4604      	mov	r4, r0
 8014cee:	a80e      	add	r0, sp, #56	@ 0x38
 8014cf0:	9306      	str	r3, [sp, #24]
 8014cf2:	f001 f8eb 	bl	8015ecc <_ZN8touchgfx7OutlineD1Ev>
 8014cf6:	e7a5      	b.n	8014c44 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x1c>
 8014cf8:	1e7a      	subs	r2, r7, #1
 8014cfa:	4629      	mov	r1, r5
 8014cfc:	4630      	mov	r0, r6
 8014cfe:	b212      	sxth	r2, r2
 8014d00:	9200      	str	r2, [sp, #0]
 8014d02:	4622      	mov	r2, r4
 8014d04:	f7ff ff06 	bl	8014b14 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>
 8014d08:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8014d0c:	9300      	str	r3, [sp, #0]
 8014d0e:	463b      	mov	r3, r7
 8014d10:	e7e1      	b.n	8014cd6 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xae>
 8014d12:	f8b3 311e 	ldrh.w	r3, [r3, #286]	@ 0x11e
 8014d16:	deff      	udf	#255	@ 0xff
 8014d18:	08042b34 	.word	0x08042b34

08014d1c <_ZN8touchgfx15GraphLabelsBase22invalidateGraphPointAtEs>:
 8014d1c:	4770      	bx	lr

08014d1e <_ZNK8touchgfx15GraphLabelsBase31getCorrectlyScaledMajorIntervalEPKNS_17AbstractDataGraphE>:
 8014d1e:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 8014d20:	b118      	cbz	r0, 8014d2a <_ZNK8touchgfx15GraphLabelsBase31getCorrectlyScaledMajorIntervalEPKNS_17AbstractDataGraphE+0xc>
 8014d22:	6803      	ldr	r3, [r0, #0]
 8014d24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014d28:	4718      	bx	r3
 8014d2a:	4770      	bx	lr

08014d2c <_ZNK8touchgfx12GraphLabelsY22getGraphRangeMinScaledEPKNS_17AbstractDataGraphE>:
 8014d2c:	680b      	ldr	r3, [r1, #0]
 8014d2e:	4608      	mov	r0, r1
 8014d30:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8014d34:	4718      	bx	r3

08014d36 <_ZNK8touchgfx12GraphLabelsY22getGraphRangeMaxScaledEPKNS_17AbstractDataGraphE>:
 8014d36:	680b      	ldr	r3, [r1, #0]
 8014d38:	4608      	mov	r0, r1
 8014d3a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8014d3e:	4718      	bx	r3

08014d40 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE>:
 8014d40:	4a38      	ldr	r2, [pc, #224]	@ (8014e24 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0xe4>)
 8014d42:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d46:	8f83      	ldrh	r3, [r0, #60]	@ 0x3c
 8014d48:	b087      	sub	sp, #28
 8014d4a:	8812      	ldrh	r2, [r2, #0]
 8014d4c:	4604      	mov	r4, r0
 8014d4e:	4689      	mov	r9, r1
 8014d50:	429a      	cmp	r2, r3
 8014d52:	d937      	bls.n	8014dc4 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x84>
 8014d54:	4a34      	ldr	r2, [pc, #208]	@ (8014e28 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0xe8>)
 8014d56:	6812      	ldr	r2, [r2, #0]
 8014d58:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8014d5c:	4b33      	ldr	r3, [pc, #204]	@ (8014e2c <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0xec>)
 8014d5e:	681b      	ldr	r3, [r3, #0]
 8014d60:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
 8014d64:	f1b8 0f00 	cmp.w	r8, #0
 8014d68:	d02c      	beq.n	8014dc4 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x84>
 8014d6a:	6803      	ldr	r3, [r0, #0]
 8014d6c:	6945      	ldr	r5, [r0, #20]
 8014d6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014d70:	2d00      	cmp	r5, #0
 8014d72:	d052      	beq.n	8014e1a <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0xda>
 8014d74:	696f      	ldr	r7, [r5, #20]
 8014d76:	4798      	blx	r3
 8014d78:	f897 502c 	ldrb.w	r5, [r7, #44]	@ 0x2c
 8014d7c:	fb15 f000 	smulbb	r0, r5, r0
 8014d80:	b280      	uxth	r0, r0
 8014d82:	1c45      	adds	r5, r0, #1
 8014d84:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8014d88:	122d      	asrs	r5, r5, #8
 8014d8a:	d01b      	beq.n	8014dc4 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x84>
 8014d8c:	6823      	ldr	r3, [r4, #0]
 8014d8e:	4639      	mov	r1, r7
 8014d90:	4620      	mov	r0, r4
 8014d92:	b2ed      	uxtb	r5, r5
 8014d94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014d98:	4798      	blx	r3
 8014d9a:	6823      	ldr	r3, [r4, #0]
 8014d9c:	4606      	mov	r6, r0
 8014d9e:	4639      	mov	r1, r7
 8014da0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014da4:	4620      	mov	r0, r4
 8014da6:	4798      	blx	r3
 8014da8:	4683      	mov	fp, r0
 8014daa:	b970      	cbnz	r0, 8014dca <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x8a>
 8014dac:	b96e      	cbnz	r6, 8014dca <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x8a>
 8014dae:	6823      	ldr	r3, [r4, #0]
 8014db0:	4642      	mov	r2, r8
 8014db2:	9600      	str	r6, [sp, #0]
 8014db4:	4649      	mov	r1, r9
 8014db6:	4620      	mov	r0, r4
 8014db8:	e9cd 6501 	strd	r6, r5, [sp, #4]
 8014dbc:	f8d3 508c 	ldr.w	r5, [r3, #140]	@ 0x8c
 8014dc0:	463b      	mov	r3, r7
 8014dc2:	47a8      	blx	r5
 8014dc4:	b007      	add	sp, #28
 8014dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014dca:	2e00      	cmp	r6, #0
 8014dcc:	ddfa      	ble.n	8014dc4 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x84>
 8014dce:	6823      	ldr	r3, [r4, #0]
 8014dd0:	4639      	mov	r1, r7
 8014dd2:	4620      	mov	r0, r4
 8014dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014dd8:	4798      	blx	r3
 8014dda:	6823      	ldr	r3, [r4, #0]
 8014ddc:	4682      	mov	sl, r0
 8014dde:	4639      	mov	r1, r7
 8014de0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8014de4:	4620      	mov	r0, r4
 8014de6:	4798      	blx	r3
 8014de8:	4582      	cmp	sl, r0
 8014dea:	bfde      	ittt	le
 8014dec:	4603      	movle	r3, r0
 8014dee:	4650      	movle	r0, sl
 8014df0:	469a      	movle	sl, r3
 8014df2:	ebaa 0300 	sub.w	r3, sl, r0
 8014df6:	fb93 f3f6 	sdiv	r3, r3, r6
 8014dfa:	2b64      	cmp	r3, #100	@ 0x64
 8014dfc:	dce2      	bgt.n	8014dc4 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x84>
 8014dfe:	6823      	ldr	r3, [r4, #0]
 8014e00:	4642      	mov	r2, r8
 8014e02:	9000      	str	r0, [sp, #0]
 8014e04:	4649      	mov	r1, r9
 8014e06:	4620      	mov	r0, r4
 8014e08:	e9cd b503 	strd	fp, r5, [sp, #12]
 8014e0c:	e9cd a601 	strd	sl, r6, [sp, #4]
 8014e10:	f8d3 5088 	ldr.w	r5, [r3, #136]	@ 0x88
 8014e14:	463b      	mov	r3, r7
 8014e16:	47a8      	blx	r5
 8014e18:	e7d4      	b.n	8014dc4 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x84>
 8014e1a:	4798      	blx	r3
 8014e1c:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8014e20:	deff      	udf	#255	@ 0xff
 8014e22:	bf00      	nop
 8014e24:	20029f34 	.word	0x20029f34
 8014e28:	20029f30 	.word	0x20029f30
 8014e2c:	20029f38 	.word	0x20029f38

08014e30 <_ZN8touchgfx12GraphLabelsYD1Ev>:
 8014e30:	4770      	bx	lr

08014e32 <_ZNK8touchgfx12GraphLabelsY31getCorrectlyScaledLabelIntervalEPKNS_17AbstractDataGraphE>:
 8014e32:	b538      	push	{r3, r4, r5, lr}
 8014e34:	680a      	ldr	r2, [r1, #0]
 8014e36:	e9d0 540c 	ldrd	r5, r4, [r0, #48]	@ 0x30
 8014e3a:	f8d2 2094 	ldr.w	r2, [r2, #148]	@ 0x94
 8014e3e:	4608      	mov	r0, r1
 8014e40:	4790      	blx	r2
 8014e42:	4629      	mov	r1, r5
 8014e44:	4602      	mov	r2, r0
 8014e46:	4620      	mov	r0, r4
 8014e48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014e4c:	f7ff bcf8 	b.w	8014840 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>

08014e50 <_ZN8touchgfx12GraphLabelsYD0Ev>:
 8014e50:	b510      	push	{r4, lr}
 8014e52:	4604      	mov	r4, r0
 8014e54:	214c      	movs	r1, #76	@ 0x4c
 8014e56:	f015 fa33 	bl	802a2c0 <_ZdlPvj>
 8014e5a:	4620      	mov	r0, r4
 8014e5c:	bd10      	pop	{r4, pc}

08014e5e <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih>:
 8014e5e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e62:	b08d      	sub	sp, #52	@ 0x34
 8014e64:	4606      	mov	r6, r0
 8014e66:	9309      	str	r3, [sp, #36]	@ 0x24
 8014e68:	f89d 3068 	ldrb.w	r3, [sp, #104]	@ 0x68
 8014e6c:	e9dd 9a18 	ldrd	r9, sl, [sp, #96]	@ 0x60
 8014e70:	e9cd 1207 	strd	r1, r2, [sp, #28]
 8014e74:	e9dd 7816 	ldrd	r7, r8, [sp, #88]	@ 0x58
 8014e78:	930a      	str	r3, [sp, #40]	@ 0x28
 8014e7a:	f1b9 0f00 	cmp.w	r9, #0
 8014e7e:	d117      	bne.n	8014eb0 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x52>
 8014e80:	2f00      	cmp	r7, #0
 8014e82:	dc7c      	bgt.n	8014f7e <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x120>
 8014e84:	f1b8 0f00 	cmp.w	r8, #0
 8014e88:	da01      	bge.n	8014e8e <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x30>
 8014e8a:	2f00      	cmp	r7, #0
 8014e8c:	d17a      	bne.n	8014f84 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x126>
 8014e8e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014e90:	4630      	mov	r0, r6
 8014e92:	6832      	ldr	r2, [r6, #0]
 8014e94:	9318      	str	r3, [sp, #96]	@ 0x60
 8014e96:	2300      	movs	r3, #0
 8014e98:	9907      	ldr	r1, [sp, #28]
 8014e9a:	e9cd 3316 	strd	r3, r3, [sp, #88]	@ 0x58
 8014e9e:	f8d2 408c 	ldr.w	r4, [r2, #140]	@ 0x8c
 8014ea2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014ea6:	46a4      	mov	ip, r4
 8014ea8:	b00d      	add	sp, #52	@ 0x34
 8014eaa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014eae:	4760      	bx	ip
 8014eb0:	fb97 f4f9 	sdiv	r4, r7, r9
 8014eb4:	1e63      	subs	r3, r4, #1
 8014eb6:	9305      	str	r3, [sp, #20]
 8014eb8:	f1ba 0f00 	cmp.w	sl, #0
 8014ebc:	d122      	bne.n	8014f04 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xa6>
 8014ebe:	fb03 f509 	mul.w	r5, r3, r9
 8014ec2:	fb98 faf9 	sdiv	sl, r8, r9
 8014ec6:	f10a 0a02 	add.w	sl, sl, #2
 8014eca:	9b05      	ldr	r3, [sp, #20]
 8014ecc:	459a      	cmp	sl, r3
 8014ece:	d059      	beq.n	8014f84 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x126>
 8014ed0:	42af      	cmp	r7, r5
 8014ed2:	dc5a      	bgt.n	8014f8a <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x12c>
 8014ed4:	45a8      	cmp	r8, r5
 8014ed6:	da01      	bge.n	8014edc <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x7e>
 8014ed8:	42af      	cmp	r7, r5
 8014eda:	db0e      	blt.n	8014efa <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x9c>
 8014edc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014ede:	4630      	mov	r0, r6
 8014ee0:	9905      	ldr	r1, [sp, #20]
 8014ee2:	9302      	str	r3, [sp, #8]
 8014ee4:	6b73      	ldr	r3, [r6, #52]	@ 0x34
 8014ee6:	6832      	ldr	r2, [r6, #0]
 8014ee8:	434b      	muls	r3, r1
 8014eea:	9907      	ldr	r1, [sp, #28]
 8014eec:	e9cd 5300 	strd	r5, r3, [sp]
 8014ef0:	f8d2 b08c 	ldr.w	fp, [r2, #140]	@ 0x8c
 8014ef4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014ef8:	47d8      	blx	fp
 8014efa:	9b05      	ldr	r3, [sp, #20]
 8014efc:	444d      	add	r5, r9
 8014efe:	3301      	adds	r3, #1
 8014f00:	9305      	str	r3, [sp, #20]
 8014f02:	e7e2      	b.n	8014eca <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x6c>
 8014f04:	fb97 f3fa 	sdiv	r3, r7, sl
 8014f08:	3b01      	subs	r3, #1
 8014f0a:	9306      	str	r3, [sp, #24]
 8014f0c:	9a06      	ldr	r2, [sp, #24]
 8014f0e:	fb98 f3fa 	sdiv	r3, r8, sl
 8014f12:	fb02 fb0a 	mul.w	fp, r2, sl
 8014f16:	9a05      	ldr	r2, [sp, #20]
 8014f18:	3302      	adds	r3, #2
 8014f1a:	fb02 f509 	mul.w	r5, r2, r9
 8014f1e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014f20:	45ab      	cmp	fp, r5
 8014f22:	dd1d      	ble.n	8014f60 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x102>
 8014f24:	42af      	cmp	r7, r5
 8014f26:	dc08      	bgt.n	8014f3a <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xdc>
 8014f28:	45a8      	cmp	r8, r5
 8014f2a:	da08      	bge.n	8014f3e <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xe0>
 8014f2c:	42af      	cmp	r7, r5
 8014f2e:	da06      	bge.n	8014f3e <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xe0>
 8014f30:	9b05      	ldr	r3, [sp, #20]
 8014f32:	444d      	add	r5, r9
 8014f34:	3301      	adds	r3, #1
 8014f36:	9305      	str	r3, [sp, #20]
 8014f38:	e7f2      	b.n	8014f20 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xc2>
 8014f3a:	45a8      	cmp	r8, r5
 8014f3c:	dcf8      	bgt.n	8014f30 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xd2>
 8014f3e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014f40:	4630      	mov	r0, r6
 8014f42:	9905      	ldr	r1, [sp, #20]
 8014f44:	9302      	str	r3, [sp, #8]
 8014f46:	6b73      	ldr	r3, [r6, #52]	@ 0x34
 8014f48:	6832      	ldr	r2, [r6, #0]
 8014f4a:	434b      	muls	r3, r1
 8014f4c:	9907      	ldr	r1, [sp, #28]
 8014f4e:	e9cd 5300 	strd	r5, r3, [sp]
 8014f52:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 8014f56:	461c      	mov	r4, r3
 8014f58:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014f5c:	47a0      	blx	r4
 8014f5e:	e7e7      	b.n	8014f30 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xd2>
 8014f60:	45ab      	cmp	fp, r5
 8014f62:	db04      	blt.n	8014f6e <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x110>
 8014f64:	9b05      	ldr	r3, [sp, #20]
 8014f66:	444d      	add	r5, r9
 8014f68:	3301      	adds	r3, #1
 8014f6a:	9305      	str	r3, [sp, #20]
 8014f6c:	e7f8      	b.n	8014f60 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x102>
 8014f6e:	9b06      	ldr	r3, [sp, #24]
 8014f70:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8014f72:	3301      	adds	r3, #1
 8014f74:	4293      	cmp	r3, r2
 8014f76:	9306      	str	r3, [sp, #24]
 8014f78:	d004      	beq.n	8014f84 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x126>
 8014f7a:	44d3      	add	fp, sl
 8014f7c:	e7d0      	b.n	8014f20 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xc2>
 8014f7e:	f1b8 0f00 	cmp.w	r8, #0
 8014f82:	dd84      	ble.n	8014e8e <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x30>
 8014f84:	b00d      	add	sp, #52	@ 0x34
 8014f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f8a:	45a8      	cmp	r8, r5
 8014f8c:	dcb5      	bgt.n	8014efa <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x9c>
 8014f8e:	e7a5      	b.n	8014edc <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x7e>

08014f90 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti>:
 8014f90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014f94:	f1b3 0900 	subs.w	r9, r3, #0
 8014f98:	460d      	mov	r5, r1
 8014f9a:	4690      	mov	r8, r2
 8014f9c:	9f08      	ldr	r7, [sp, #32]
 8014f9e:	f8bd a024 	ldrh.w	sl, [sp, #36]	@ 0x24
 8014fa2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8014fa4:	da18      	bge.n	8014fd8 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0x48>
 8014fa6:	2a01      	cmp	r2, #1
 8014fa8:	dd16      	ble.n	8014fd8 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0x48>
 8014faa:	232d      	movs	r3, #45	@ 0x2d
 8014fac:	f1c9 0900 	rsb	r9, r9, #0
 8014fb0:	2001      	movs	r0, #1
 8014fb2:	800b      	strh	r3, [r1, #0]
 8014fb4:	2f00      	cmp	r7, #0
 8014fb6:	d111      	bne.n	8014fdc <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0x4c>
 8014fb8:	2302      	movs	r3, #2
 8014fba:	eba8 0100 	sub.w	r1, r8, r0
 8014fbe:	4a26      	ldr	r2, [pc, #152]	@ (8015058 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0xc8>)
 8014fc0:	eb05 0040 	add.w	r0, r5, r0, lsl #1
 8014fc4:	b289      	uxth	r1, r1
 8014fc6:	fb96 f3f3 	sdiv	r3, r6, r3
 8014fca:	444b      	add	r3, r9
 8014fcc:	fb93 f3f6 	sdiv	r3, r3, r6
 8014fd0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014fd4:	f007 bbb8 	b.w	801c748 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8014fd8:	2000      	movs	r0, #0
 8014fda:	e7eb      	b.n	8014fb4 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0x24>
 8014fdc:	dd39      	ble.n	8015052 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0xc2>
 8014fde:	eba8 0100 	sub.w	r1, r8, r0
 8014fe2:	4a1d      	ldr	r2, [pc, #116]	@ (8015058 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0xc8>)
 8014fe4:	eb05 0040 	add.w	r0, r5, r0, lsl #1
 8014fe8:	f108 38ff 	add.w	r8, r8, #4294967295
 8014fec:	b289      	uxth	r1, r1
 8014fee:	fb99 f4f6 	sdiv	r4, r9, r6
 8014ff2:	4623      	mov	r3, r4
 8014ff4:	f007 fba8 	bl	801c748 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8014ff8:	4628      	mov	r0, r5
 8014ffa:	f007 f839 	bl	801c070 <_ZN8touchgfx7Unicode6strlenEPKt>
 8014ffe:	4580      	cmp	r8, r0
 8015000:	dd27      	ble.n	8015052 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0xc2>
 8015002:	f04f 0e02 	mov.w	lr, #2
 8015006:	f825 a010 	strh.w	sl, [r5, r0, lsl #1]
 801500a:	fb06 9314 	mls	r3, r6, r4, r9
 801500e:	3001      	adds	r0, #1
 8015010:	2200      	movs	r2, #0
 8015012:	f04f 090a 	mov.w	r9, #10
 8015016:	f107 3aff 	add.w	sl, r7, #4294967295
 801501a:	fb96 fefe 	sdiv	lr, r6, lr
 801501e:	4580      	cmp	r8, r0
 8015020:	4684      	mov	ip, r0
 8015022:	dd13      	ble.n	801504c <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0xbc>
 8015024:	fb09 f303 	mul.w	r3, r9, r3
 8015028:	4592      	cmp	sl, r2
 801502a:	f102 0201 	add.w	r2, r2, #1
 801502e:	f100 0c01 	add.w	ip, r0, #1
 8015032:	bf08      	it	eq
 8015034:	4473      	addeq	r3, lr
 8015036:	4297      	cmp	r7, r2
 8015038:	fb93 f4f6 	sdiv	r4, r3, r6
 801503c:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8015040:	fb06 3314 	mls	r3, r6, r4, r3
 8015044:	f825 1010 	strh.w	r1, [r5, r0, lsl #1]
 8015048:	4660      	mov	r0, ip
 801504a:	d1e8      	bne.n	801501e <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0x8e>
 801504c:	2300      	movs	r3, #0
 801504e:	f825 301c 	strh.w	r3, [r5, ip, lsl #1]
 8015052:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015056:	bf00      	nop
 8015058:	08040d70 	.word	0x08040d70

0801505c <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih>:
 801505c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015060:	b09b      	sub	sp, #108	@ 0x6c
 8015062:	4698      	mov	r8, r3
 8015064:	681b      	ldr	r3, [r3, #0]
 8015066:	4604      	mov	r4, r0
 8015068:	ae1a      	add	r6, sp, #104	@ 0x68
 801506a:	9104      	str	r1, [sp, #16]
 801506c:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8015070:	4640      	mov	r0, r8
 8015072:	9924      	ldr	r1, [sp, #144]	@ 0x90
 8015074:	4617      	mov	r7, r2
 8015076:	4798      	blx	r3
 8015078:	f846 0d28 	str.w	r0, [r6, #-40]!
 801507c:	4630      	mov	r0, r6
 801507e:	f7ff f9bf 	bl	8014400 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8015082:	f8b8 3114 	ldrh.w	r3, [r8, #276]	@ 0x114
 8015086:	1ac0      	subs	r0, r0, r3
 8015088:	b200      	sxth	r0, r0
 801508a:	2800      	cmp	r0, #0
 801508c:	f2c0 80ba 	blt.w	8015204 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1a8>
 8015090:	f8b8 211a 	ldrh.w	r2, [r8, #282]	@ 0x11a
 8015094:	441a      	add	r2, r3
 8015096:	f8b8 3042 	ldrh.w	r3, [r8, #66]	@ 0x42
 801509a:	1a9b      	subs	r3, r3, r2
 801509c:	b21b      	sxth	r3, r3
 801509e:	4298      	cmp	r0, r3
 80150a0:	f280 80b0 	bge.w	8015204 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1a8>
 80150a4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80150a6:	2214      	movs	r2, #20
 80150a8:	4631      	mov	r1, r6
 80150aa:	4620      	mov	r0, r4
 80150ac:	9302      	str	r3, [sp, #8]
 80150ae:	f8b4 3044 	ldrh.w	r3, [r4, #68]	@ 0x44
 80150b2:	9301      	str	r3, [sp, #4]
 80150b4:	f8b4 3042 	ldrh.w	r3, [r4, #66]	@ 0x42
 80150b8:	9300      	str	r3, [sp, #0]
 80150ba:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80150bc:	f7ff ff68 	bl	8014f90 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti>
 80150c0:	4b55      	ldr	r3, [pc, #340]	@ (8015218 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1bc>)
 80150c2:	8fa1      	ldrh	r1, [r4, #60]	@ 0x3c
 80150c4:	6818      	ldr	r0, [r3, #0]
 80150c6:	f7f3 f8a3 	bl	8008210 <_ZNK8touchgfx5Texts7getTextEt>
 80150ca:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80150ce:	4681      	mov	r9, r0
 80150d0:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 80150d4:	683b      	ldr	r3, [r7, #0]
 80150d6:	f040 8098 	bne.w	801520a <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1ae>
 80150da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80150dc:	4638      	mov	r0, r7
 80150de:	4798      	blx	r3
 80150e0:	683b      	ldr	r3, [r7, #0]
 80150e2:	4605      	mov	r5, r0
 80150e4:	4632      	mov	r2, r6
 80150e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80150e8:	4649      	mov	r1, r9
 80150ea:	4638      	mov	r0, r7
 80150ec:	4798      	blx	r3
 80150ee:	fb15 f500 	smulbb	r5, r5, r0
 80150f2:	683b      	ldr	r3, [r7, #0]
 80150f4:	4632      	mov	r2, r6
 80150f6:	b2ad      	uxth	r5, r5
 80150f8:	4649      	mov	r1, r9
 80150fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80150fc:	4638      	mov	r0, r7
 80150fe:	4798      	blx	r3
 8015100:	4405      	add	r5, r0
 8015102:	b22d      	sxth	r5, r5
 8015104:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8015108:	2002      	movs	r0, #2
 801510a:	f8d8 2000 	ldr.w	r2, [r8]
 801510e:	f10d 0a68 	add.w	sl, sp, #104	@ 0x68
 8015112:	2b01      	cmp	r3, #1
 8015114:	f8b8 30c6 	ldrh.w	r3, [r8, #198]	@ 0xc6
 8015118:	f8d2 2118 	ldr.w	r2, [r2, #280]	@ 0x118
 801511c:	bf88      	it	hi
 801511e:	f105 0b01 	addhi.w	fp, r5, #1
 8015122:	9305      	str	r3, [sp, #20]
 8015124:	9924      	ldr	r1, [sp, #144]	@ 0x90
 8015126:	bf8c      	ite	hi
 8015128:	fb9b fbf0 	sdivhi	fp, fp, r0
 801512c:	fb95 fbf0 	sdivls	fp, r5, r0
 8015130:	4640      	mov	r0, r8
 8015132:	bf88      	it	hi
 8015134:	fa0f fb8b 	sxthhi.w	fp, fp
 8015138:	4790      	blx	r2
 801513a:	f84a 0d3c 	str.w	r0, [sl, #-60]!
 801513e:	4650      	mov	r0, sl
 8015140:	f04f 0800 	mov.w	r8, #0
 8015144:	f7ff f95c 	bl	8014400 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8015148:	9b05      	ldr	r3, [sp, #20]
 801514a:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 801514e:	4418      	add	r0, r3
 8015150:	f8ad 5022 	strh.w	r5, [sp, #34]	@ 0x22
 8015154:	ad07      	add	r5, sp, #28
 8015156:	f8ad 801c 	strh.w	r8, [sp, #28]
 801515a:	eba0 0b0b 	sub.w	fp, r0, fp
 801515e:	f8ad 1020 	strh.w	r1, [sp, #32]
 8015162:	f8ad b01e 	strh.w	fp, [sp, #30]
 8015166:	f10d 0b24 	add.w	fp, sp, #36	@ 0x24
 801516a:	e895 0003 	ldmia.w	r5, {r0, r1}
 801516e:	e88b 0003 	stmia.w	fp, {r0, r1}
 8015172:	9904      	ldr	r1, [sp, #16]
 8015174:	4658      	mov	r0, fp
 8015176:	f7fd fa97 	bl	80126a8 <_ZN8touchgfx4RectaNERKS0_>
 801517a:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 801517e:	4543      	cmp	r3, r8
 8015180:	dd40      	ble.n	8015204 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1a8>
 8015182:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	@ 0x2a
 8015186:	4543      	cmp	r3, r8
 8015188:	dd3c      	ble.n	8015204 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1a8>
 801518a:	f8bd 3024 	ldrh.w	r3, [sp, #36]	@ 0x24
 801518e:	4620      	mov	r0, r4
 8015190:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8015194:	1a5b      	subs	r3, r3, r1
 8015196:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 801519a:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 801519e:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 80151a2:	1a5b      	subs	r3, r3, r1
 80151a4:	4629      	mov	r1, r5
 80151a6:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 80151aa:	6823      	ldr	r3, [r4, #0]
 80151ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80151ae:	4798      	blx	r3
 80151b0:	4b1a      	ldr	r3, [pc, #104]	@ (801521c <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1c0>)
 80151b2:	8fa1      	ldrh	r1, [r4, #60]	@ 0x3c
 80151b4:	681b      	ldr	r3, [r3, #0]
 80151b6:	f894 0040 	ldrb.w	r0, [r4, #64]	@ 0x40
 80151ba:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 80151be:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80151c0:	785b      	ldrb	r3, [r3, #1]
 80151c2:	910d      	str	r1, [sp, #52]	@ 0x34
 80151c4:	f3c3 0c01 	ubfx	ip, r3, #0, #2
 80151c8:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80151cc:	970b      	str	r7, [sp, #44]	@ 0x2c
 80151ce:	f88d 3031 	strb.w	r3, [sp, #49]	@ 0x31
 80151d2:	f89d 3098 	ldrb.w	r3, [sp, #152]	@ 0x98
 80151d6:	f88d c030 	strb.w	ip, [sp, #48]	@ 0x30
 80151da:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 80151de:	f88d 0032 	strb.w	r0, [sp, #50]	@ 0x32
 80151e2:	f8ad 8038 	strh.w	r8, [sp, #56]	@ 0x38
 80151e6:	f88d 803b 	strb.w	r8, [sp, #59]	@ 0x3b
 80151ea:	f88d 803c 	strb.w	r8, [sp, #60]	@ 0x3c
 80151ee:	f7ef f9ab 	bl	8004548 <_ZN8touchgfx3HAL3lcdEv>
 80151f2:	465b      	mov	r3, fp
 80151f4:	e9cd 6802 	strd	r6, r8, [sp, #8]
 80151f8:	e9cd a900 	strd	sl, r9, [sp]
 80151fc:	e895 0006 	ldmia.w	r5, {r1, r2}
 8015200:	f7f2 ffb9 	bl	8008176 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8015204:	b01b      	add	sp, #108	@ 0x6c
 8015206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801520a:	4601      	mov	r1, r0
 801520c:	699b      	ldr	r3, [r3, #24]
 801520e:	4632      	mov	r2, r6
 8015210:	4638      	mov	r0, r7
 8015212:	4798      	blx	r3
 8015214:	b205      	sxth	r5, r0
 8015216:	e775      	b.n	8015104 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0xa8>
 8015218:	20029f3c 	.word	0x20029f3c
 801521c:	20029f30 	.word	0x20029f30

08015220 <_ZN8touchgfx21GraphWrapAndClearData5clearEv>:
 8015220:	b510      	push	{r4, lr}
 8015222:	4604      	mov	r4, r0
 8015224:	f7ff f9c5 	bl	80145b2 <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv>
 8015228:	4620      	mov	r0, r4
 801522a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801522e:	f7fe bf84 	b.w	801413a <_ZN8touchgfx17AbstractDataGraph5clearEv>

08015232 <_ZN8touchgfx21GraphWrapAndClearData8addValueEi>:
 8015232:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015234:	f9b0 511e 	ldrsh.w	r5, [r0, #286]	@ 0x11e
 8015238:	460f      	mov	r7, r1
 801523a:	f8d0 6144 	ldr.w	r6, [r0, #324]	@ 0x144
 801523e:	4604      	mov	r4, r0
 8015240:	1c6b      	adds	r3, r5, #1
 8015242:	4629      	mov	r1, r5
 8015244:	f8a0 311e 	strh.w	r3, [r0, #286]	@ 0x11e
 8015248:	6803      	ldr	r3, [r0, #0]
 801524a:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 801524e:	4798      	blx	r3
 8015250:	f846 7020 	str.w	r7, [r6, r0, lsl #2]
 8015254:	b915      	cbnz	r5, 801525c <_ZN8touchgfx21GraphWrapAndClearData8addValueEi+0x2a>
 8015256:	4620      	mov	r0, r4
 8015258:	f7ff f9ab 	bl	80145b2 <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv>
 801525c:	4620      	mov	r0, r4
 801525e:	4629      	mov	r1, r5
 8015260:	f7ff f97f 	bl	8014562 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs>
 8015264:	4628      	mov	r0, r5
 8015266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015268 <_ZN8touchgfx21GraphWrapAndClearData14beforeAddValueEv>:
 8015268:	f9b0 111e 	ldrsh.w	r1, [r0, #286]	@ 0x11e
 801526c:	f9b0 211c 	ldrsh.w	r2, [r0, #284]	@ 0x11c
 8015270:	4291      	cmp	r1, r2
 8015272:	db03      	blt.n	801527c <_ZN8touchgfx21GraphWrapAndClearData14beforeAddValueEv+0x14>
 8015274:	6803      	ldr	r3, [r0, #0]
 8015276:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 801527a:	4718      	bx	r3
 801527c:	4770      	bx	lr

0801527e <_ZNK8touchgfx8TextArea12getWildcard1Ev>:
 801527e:	2000      	movs	r0, #0
 8015280:	4770      	bx	lr
	...

08015284 <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 8015284:	4b07      	ldr	r3, [pc, #28]	@ (80152a4 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
 8015286:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 8015288:	881b      	ldrh	r3, [r3, #0]
 801528a:	4293      	cmp	r3, r2
 801528c:	bf81      	itttt	hi
 801528e:	4b06      	ldrhi	r3, [pc, #24]	@ (80152a8 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
 8015290:	681b      	ldrhi	r3, [r3, #0]
 8015292:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
 8015296:	7858      	ldrbhi	r0, [r3, #1]
 8015298:	bf8c      	ite	hi
 801529a:	f000 0003 	andhi.w	r0, r0, #3
 801529e:	2000      	movls	r0, #0
 80152a0:	4770      	bx	lr
 80152a2:	bf00      	nop
 80152a4:	20029f34 	.word	0x20029f34
 80152a8:	20029f30 	.word	0x20029f30

080152ac <_ZN8touchgfx8TextAreaD1Ev>:
 80152ac:	4770      	bx	lr
	...

080152b0 <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 80152b0:	4b11      	ldr	r3, [pc, #68]	@ (80152f8 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
 80152b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80152b6:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 80152b8:	4604      	mov	r4, r0
 80152ba:	881b      	ldrh	r3, [r3, #0]
 80152bc:	428b      	cmp	r3, r1
 80152be:	d918      	bls.n	80152f2 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
 80152c0:	6803      	ldr	r3, [r0, #0]
 80152c2:	6f9d      	ldr	r5, [r3, #120]	@ 0x78
 80152c4:	4b0d      	ldr	r3, [pc, #52]	@ (80152fc <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
 80152c6:	6818      	ldr	r0, [r3, #0]
 80152c8:	f7f2 ffa2 	bl	8008210 <_ZNK8touchgfx5Texts7getTextEt>
 80152cc:	6823      	ldr	r3, [r4, #0]
 80152ce:	4606      	mov	r6, r0
 80152d0:	4620      	mov	r0, r4
 80152d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80152d4:	4798      	blx	r3
 80152d6:	6823      	ldr	r3, [r4, #0]
 80152d8:	4607      	mov	r7, r0
 80152da:	4620      	mov	r0, r4
 80152dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80152e0:	4798      	blx	r3
 80152e2:	463a      	mov	r2, r7
 80152e4:	4603      	mov	r3, r0
 80152e6:	4631      	mov	r1, r6
 80152e8:	4620      	mov	r0, r4
 80152ea:	46ac      	mov	ip, r5
 80152ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80152f0:	4760      	bx	ip
 80152f2:	2000      	movs	r0, #0
 80152f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80152f8:	20029f34 	.word	0x20029f34
 80152fc:	20029f3c 	.word	0x20029f3c

08015300 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8015300:	4b18      	ldr	r3, [pc, #96]	@ (8015364 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 8015302:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015306:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8015308:	4604      	mov	r4, r0
 801530a:	881b      	ldrh	r3, [r3, #0]
 801530c:	428b      	cmp	r3, r1
 801530e:	d926      	bls.n	801535e <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
 8015310:	4b15      	ldr	r3, [pc, #84]	@ (8015368 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 8015312:	681b      	ldr	r3, [r3, #0]
 8015314:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8015318:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 801531c:	4b13      	ldr	r3, [pc, #76]	@ (801536c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 801531e:	7855      	ldrb	r5, [r2, #1]
 8015320:	681b      	ldr	r3, [r3, #0]
 8015322:	f3c5 0581 	ubfx	r5, r5, #2, #2
 8015326:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 801532a:	6833      	ldr	r3, [r6, #0]
 801532c:	69df      	ldr	r7, [r3, #28]
 801532e:	4b10      	ldr	r3, [pc, #64]	@ (8015370 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 8015330:	6818      	ldr	r0, [r3, #0]
 8015332:	f7f2 ff6d 	bl	8008210 <_ZNK8touchgfx5Texts7getTextEt>
 8015336:	6823      	ldr	r3, [r4, #0]
 8015338:	4680      	mov	r8, r0
 801533a:	4620      	mov	r0, r4
 801533c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801533e:	4798      	blx	r3
 8015340:	6823      	ldr	r3, [r4, #0]
 8015342:	4681      	mov	r9, r0
 8015344:	4620      	mov	r0, r4
 8015346:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801534a:	4798      	blx	r3
 801534c:	464b      	mov	r3, r9
 801534e:	9000      	str	r0, [sp, #0]
 8015350:	4642      	mov	r2, r8
 8015352:	4629      	mov	r1, r5
 8015354:	4630      	mov	r0, r6
 8015356:	47b8      	blx	r7
 8015358:	b003      	add	sp, #12
 801535a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801535e:	2000      	movs	r0, #0
 8015360:	e7fa      	b.n	8015358 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
 8015362:	bf00      	nop
 8015364:	20029f34 	.word	0x20029f34
 8015368:	20029f30 	.word	0x20029f30
 801536c:	20029f38 	.word	0x20029f38
 8015370:	20029f3c 	.word	0x20029f3c

08015374 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8015374:	b40e      	push	{r1, r2, r3}
 8015376:	4b30      	ldr	r3, [pc, #192]	@ (8015438 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
 8015378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801537c:	881a      	ldrh	r2, [r3, #0]
 801537e:	b09d      	sub	sp, #116	@ 0x74
 8015380:	8d83      	ldrh	r3, [r0, #44]	@ 0x2c
 8015382:	4604      	mov	r4, r0
 8015384:	429a      	cmp	r2, r3
 8015386:	d954      	bls.n	8015432 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
 8015388:	aa26      	add	r2, sp, #152	@ 0x98
 801538a:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 801543c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 801538e:	f8df 80b0 	ldr.w	r8, [pc, #176]	@ 8015440 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 8015392:	9202      	str	r2, [sp, #8]
 8015394:	f8d9 2000 	ldr.w	r2, [r9]
 8015398:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 801539c:	f8d8 3000 	ldr.w	r3, [r8]
 80153a0:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80153a4:	682b      	ldr	r3, [r5, #0]
 80153a6:	4628      	mov	r0, r5
 80153a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80153aa:	4798      	blx	r3
 80153ac:	4606      	mov	r6, r0
 80153ae:	b207      	sxth	r7, r0
 80153b0:	a803      	add	r0, sp, #12
 80153b2:	f005 fa9a 	bl	801a8ea <_ZN8touchgfx12TextProviderC1Ev>
 80153b6:	682b      	ldr	r3, [r5, #0]
 80153b8:	4628      	mov	r0, r5
 80153ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80153bc:	4798      	blx	r3
 80153be:	682b      	ldr	r3, [r5, #0]
 80153c0:	4682      	mov	sl, r0
 80153c2:	4628      	mov	r0, r5
 80153c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80153c6:	4798      	blx	r3
 80153c8:	4653      	mov	r3, sl
 80153ca:	9000      	str	r0, [sp, #0]
 80153cc:	a803      	add	r0, sp, #12
 80153ce:	9a02      	ldr	r2, [sp, #8]
 80153d0:	9925      	ldr	r1, [sp, #148]	@ 0x94
 80153d2:	f005 fae5 	bl	801a9a0 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80153d6:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 80153d8:	f8d9 3000 	ldr.w	r3, [r9]
 80153dc:	f894 c037 	ldrb.w	ip, [r4, #55]	@ 0x37
 80153e0:	8925      	ldrh	r5, [r4, #8]
 80153e2:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 80153e6:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 80153ea:	eba5 050c 	sub.w	r5, r5, ip
 80153ee:	784a      	ldrb	r2, [r1, #1]
 80153f0:	f8d8 3000 	ldr.w	r3, [r8]
 80153f4:	b22d      	sxth	r5, r5
 80153f6:	f894 1039 	ldrb.w	r1, [r4, #57]	@ 0x39
 80153fa:	f3c2 0281 	ubfx	r2, r2, #2, #2
 80153fe:	9500      	str	r5, [sp, #0]
 8015400:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8015404:	a803      	add	r0, sp, #12
 8015406:	f003 f816 	bl	8018436 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 801540a:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	@ 0x34
 801540e:	b203      	sxth	r3, r0
 8015410:	18b9      	adds	r1, r7, r2
 8015412:	2900      	cmp	r1, #0
 8015414:	dd0b      	ble.n	801542e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
 8015416:	3b01      	subs	r3, #1
 8015418:	fb13 f302 	smulbb	r3, r3, r2
 801541c:	fb16 3300 	smlabb	r3, r6, r0, r3
 8015420:	b21f      	sxth	r7, r3
 8015422:	4638      	mov	r0, r7
 8015424:	b01d      	add	sp, #116	@ 0x74
 8015426:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801542a:	b003      	add	sp, #12
 801542c:	4770      	bx	lr
 801542e:	2b00      	cmp	r3, #0
 8015430:	dcf7      	bgt.n	8015422 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 8015432:	2700      	movs	r7, #0
 8015434:	e7f5      	b.n	8015422 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 8015436:	bf00      	nop
 8015438:	20029f34 	.word	0x20029f34
 801543c:	20029f30 	.word	0x20029f30
 8015440:	20029f38 	.word	0x20029f38

08015444 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>:
 8015444:	4bbd      	ldr	r3, [pc, #756]	@ (801573c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f8>)
 8015446:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801544a:	460c      	mov	r4, r1
 801544c:	881b      	ldrh	r3, [r3, #0]
 801544e:	8d89      	ldrh	r1, [r1, #44]	@ 0x2c
 8015450:	b0a9      	sub	sp, #164	@ 0xa4
 8015452:	4680      	mov	r8, r0
 8015454:	428b      	cmp	r3, r1
 8015456:	d809      	bhi.n	801546c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28>
 8015458:	2300      	movs	r3, #0
 801545a:	f04f 32ff 	mov.w	r2, #4294967295
 801545e:	6083      	str	r3, [r0, #8]
 8015460:	e9c0 3200 	strd	r3, r2, [r0]
 8015464:	4640      	mov	r0, r8
 8015466:	b029      	add	sp, #164	@ 0xa4
 8015468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801546c:	4eb4      	ldr	r6, [pc, #720]	@ (8015740 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>)
 801546e:	6833      	ldr	r3, [r6, #0]
 8015470:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 8015474:	4bb3      	ldr	r3, [pc, #716]	@ (8015744 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x300>)
 8015476:	681b      	ldr	r3, [r3, #0]
 8015478:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801547c:	4bb2      	ldr	r3, [pc, #712]	@ (8015748 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 801547e:	6818      	ldr	r0, [r3, #0]
 8015480:	f7f2 fec6 	bl	8008210 <_ZNK8touchgfx5Texts7getTextEt>
 8015484:	682b      	ldr	r3, [r5, #0]
 8015486:	4681      	mov	r9, r0
 8015488:	4628      	mov	r0, r5
 801548a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801548c:	4798      	blx	r3
 801548e:	8ea7      	ldrh	r7, [r4, #52]	@ 0x34
 8015490:	b203      	sxth	r3, r0
 8015492:	4682      	mov	sl, r0
 8015494:	4407      	add	r7, r0
 8015496:	a80f      	add	r0, sp, #60	@ 0x3c
 8015498:	9304      	str	r3, [sp, #16]
 801549a:	b2bb      	uxth	r3, r7
 801549c:	9303      	str	r3, [sp, #12]
 801549e:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
 80154a2:	2b00      	cmp	r3, #0
 80154a4:	f040 80a5 	bne.w	80155f2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1ae>
 80154a8:	f005 fa1f 	bl	801a8ea <_ZN8touchgfx12TextProviderC1Ev>
 80154ac:	682b      	ldr	r3, [r5, #0]
 80154ae:	4628      	mov	r0, r5
 80154b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80154b2:	4798      	blx	r3
 80154b4:	682b      	ldr	r3, [r5, #0]
 80154b6:	4606      	mov	r6, r0
 80154b8:	4628      	mov	r0, r5
 80154ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80154bc:	4798      	blx	r3
 80154be:	6823      	ldr	r3, [r4, #0]
 80154c0:	4607      	mov	r7, r0
 80154c2:	4620      	mov	r0, r4
 80154c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80154c6:	4798      	blx	r3
 80154c8:	6823      	ldr	r3, [r4, #0]
 80154ca:	4683      	mov	fp, r0
 80154cc:	4620      	mov	r0, r4
 80154ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80154d2:	4798      	blx	r3
 80154d4:	463b      	mov	r3, r7
 80154d6:	4649      	mov	r1, r9
 80154d8:	4632      	mov	r2, r6
 80154da:	2600      	movs	r6, #0
 80154dc:	e9cd b000 	strd	fp, r0, [sp]
 80154e0:	a80f      	add	r0, sp, #60	@ 0x3c
 80154e2:	4637      	mov	r7, r6
 80154e4:	f005 fa71 	bl	801a9ca <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 80154e8:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 80154ec:	f8df b250 	ldr.w	fp, [pc, #592]	@ 8015740 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>
 80154f0:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 80154f4:	bf0c      	ite	eq
 80154f6:	f9b4 900a 	ldrsheq.w	r9, [r4, #10]
 80154fa:	f9b4 9008 	ldrshne.w	r9, [r4, #8]
 80154fe:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8015500:	4629      	mov	r1, r5
 8015502:	f8db 3000 	ldr.w	r3, [fp]
 8015506:	a80f      	add	r0, sp, #60	@ 0x3c
 8015508:	3701      	adds	r7, #1
 801550a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 801550e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8015512:	b2bf      	uxth	r7, r7
 8015514:	785b      	ldrb	r3, [r3, #1]
 8015516:	f3c3 0381 	ubfx	r3, r3, #2, #2
 801551a:	f002 f8cc 	bl	80176b6 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801551e:	9b03      	ldr	r3, [sp, #12]
 8015520:	4286      	cmp	r6, r0
 8015522:	eba9 0903 	sub.w	r9, r9, r3
 8015526:	bfb8      	it	lt
 8015528:	4606      	movlt	r6, r0
 801552a:	a80f      	add	r0, sp, #60	@ 0x3c
 801552c:	fa0f f989 	sxth.w	r9, r9
 8015530:	b236      	sxth	r6, r6
 8015532:	f005 fa01 	bl	801a938 <_ZN8touchgfx12TextProvider11endOfStringEv>
 8015536:	b918      	cbnz	r0, 8015540 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8015538:	7a2b      	ldrb	r3, [r5, #8]
 801553a:	444b      	add	r3, r9
 801553c:	2b00      	cmp	r3, #0
 801553e:	dcde      	bgt.n	80154fe <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xba>
 8015540:	9b03      	ldr	r3, [sp, #12]
 8015542:	4620      	mov	r0, r4
 8015544:	9a04      	ldr	r2, [sp, #16]
 8015546:	fb13 f707 	smulbb	r7, r3, r7
 801554a:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 801554c:	f895 9009 	ldrb.w	r9, [r5, #9]
 8015550:	1aff      	subs	r7, r7, r3
 8015552:	b2bf      	uxth	r7, r7
 8015554:	b23b      	sxth	r3, r7
 8015556:	429a      	cmp	r2, r3
 8015558:	bfa8      	it	ge
 801555a:	4657      	movge	r7, sl
 801555c:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8015560:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 8015564:	6823      	ldr	r3, [r4, #0]
 8015566:	444f      	add	r7, r9
 8015568:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801556a:	bf08      	it	eq
 801556c:	f9b4 a008 	ldrsheq.w	sl, [r4, #8]
 8015570:	fa1f f987 	uxth.w	r9, r7
 8015574:	bf18      	it	ne
 8015576:	f9b4 a00a 	ldrshne.w	sl, [r4, #10]
 801557a:	4798      	blx	r3
 801557c:	2801      	cmp	r0, #1
 801557e:	fa0f f789 	sxth.w	r7, r9
 8015582:	b2b3      	uxth	r3, r6
 8015584:	f000 80e2 	beq.w	801574c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x308>
 8015588:	2802      	cmp	r0, #2
 801558a:	f894 6037 	ldrb.w	r6, [r4, #55]	@ 0x37
 801558e:	f000 80e3 	beq.w	8015758 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x314>
 8015592:	7aea      	ldrb	r2, [r5, #11]
 8015594:	b236      	sxth	r6, r6
 8015596:	7b2d      	ldrb	r5, [r5, #12]
 8015598:	1ab6      	subs	r6, r6, r2
 801559a:	442a      	add	r2, r5
 801559c:	fa1f fa86 	uxth.w	sl, r6
 80155a0:	4413      	add	r3, r2
 80155a2:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
 80155a6:	fa0f fb8a 	sxth.w	fp, sl
 80155aa:	b29b      	uxth	r3, r3
 80155ac:	2a02      	cmp	r2, #2
 80155ae:	b21e      	sxth	r6, r3
 80155b0:	f000 80d6 	beq.w	8015760 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x31c>
 80155b4:	2a03      	cmp	r2, #3
 80155b6:	f000 80de 	beq.w	8015776 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x332>
 80155ba:	2a01      	cmp	r2, #1
 80155bc:	f040 80e6 	bne.w	801578c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x348>
 80155c0:	8925      	ldrh	r5, [r4, #8]
 80155c2:	4633      	mov	r3, r6
 80155c4:	463e      	mov	r6, r7
 80155c6:	eba5 0909 	sub.w	r9, r5, r9
 80155ca:	461f      	mov	r7, r3
 80155cc:	465d      	mov	r5, fp
 80155ce:	fa0f fb89 	sxth.w	fp, r9
 80155d2:	4b5d      	ldr	r3, [pc, #372]	@ (8015748 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 80155d4:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 80155d6:	6818      	ldr	r0, [r3, #0]
 80155d8:	f7f2 fe1a 	bl	8008210 <_ZNK8touchgfx5Texts7getTextEt>
 80155dc:	f8a8 b000 	strh.w	fp, [r8]
 80155e0:	f8a8 5002 	strh.w	r5, [r8, #2]
 80155e4:	f8a8 6004 	strh.w	r6, [r8, #4]
 80155e8:	f8a8 7006 	strh.w	r7, [r8, #6]
 80155ec:	f8c8 0008 	str.w	r0, [r8, #8]
 80155f0:	e738      	b.n	8015464 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x20>
 80155f2:	f005 f97a 	bl	801a8ea <_ZN8touchgfx12TextProviderC1Ev>
 80155f6:	682b      	ldr	r3, [r5, #0]
 80155f8:	4628      	mov	r0, r5
 80155fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80155fc:	4798      	blx	r3
 80155fe:	682b      	ldr	r3, [r5, #0]
 8015600:	4607      	mov	r7, r0
 8015602:	4628      	mov	r0, r5
 8015604:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015606:	4798      	blx	r3
 8015608:	6823      	ldr	r3, [r4, #0]
 801560a:	4683      	mov	fp, r0
 801560c:	4620      	mov	r0, r4
 801560e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015610:	4798      	blx	r3
 8015612:	6822      	ldr	r2, [r4, #0]
 8015614:	9005      	str	r0, [sp, #20]
 8015616:	4620      	mov	r0, r4
 8015618:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 801561c:	4790      	blx	r2
 801561e:	9b05      	ldr	r3, [sp, #20]
 8015620:	463a      	mov	r2, r7
 8015622:	4649      	mov	r1, r9
 8015624:	9001      	str	r0, [sp, #4]
 8015626:	a80f      	add	r0, sp, #60	@ 0x3c
 8015628:	9300      	str	r3, [sp, #0]
 801562a:	465b      	mov	r3, fp
 801562c:	f005 f9cd 	bl	801a9ca <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 8015630:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8015634:	f9b4 9008 	ldrsh.w	r9, [r4, #8]
 8015638:	af0f      	add	r7, sp, #60	@ 0x3c
 801563a:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 801563e:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8015642:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8015644:	bf0a      	itet	eq
 8015646:	464a      	moveq	r2, r9
 8015648:	461a      	movne	r2, r3
 801564a:	4699      	moveq	r9, r3
 801564c:	f894 3037 	ldrb.w	r3, [r4, #55]	@ 0x37
 8015650:	f894 0039 	ldrb.w	r0, [r4, #57]	@ 0x39
 8015654:	1ad2      	subs	r2, r2, r3
 8015656:	6833      	ldr	r3, [r6, #0]
 8015658:	f9b4 6034 	ldrsh.w	r6, [r4, #52]	@ 0x34
 801565c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8015660:	7859      	ldrb	r1, [r3, #1]
 8015662:	2300      	movs	r3, #0
 8015664:	9707      	str	r7, [sp, #28]
 8015666:	f3c1 0181 	ubfx	r1, r1, #2, #2
 801566a:	f8ad 3018 	strh.w	r3, [sp, #24]
 801566e:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 8015672:	f88d 1020 	strb.w	r1, [sp, #32]
 8015676:	9509      	str	r5, [sp, #36]	@ 0x24
 8015678:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 801567c:	f8ad 902a 	strh.w	r9, [sp, #42]	@ 0x2a
 8015680:	f8ad 602c 	strh.w	r6, [sp, #44]	@ 0x2c
 8015684:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 8015688:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 801568c:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8015690:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 8015694:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8015698:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 801569c:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 80156a0:	b350      	cbz	r0, 80156f8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 80156a2:	682b      	ldr	r3, [r5, #0]
 80156a4:	4628      	mov	r0, r5
 80156a6:	695b      	ldr	r3, [r3, #20]
 80156a8:	4798      	blx	r3
 80156aa:	4607      	mov	r7, r0
 80156ac:	b320      	cbz	r0, 80156f8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 80156ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80156b0:	4639      	mov	r1, r7
 80156b2:	6803      	ldr	r3, [r0, #0]
 80156b4:	68db      	ldr	r3, [r3, #12]
 80156b6:	4798      	blx	r3
 80156b8:	4606      	mov	r6, r0
 80156ba:	b1e8      	cbz	r0, 80156f8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 80156bc:	7b43      	ldrb	r3, [r0, #13]
 80156be:	7a82      	ldrb	r2, [r0, #10]
 80156c0:	005b      	lsls	r3, r3, #1
 80156c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80156c6:	4313      	orrs	r3, r2
 80156c8:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 80156cc:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 80156d0:	2b06      	cmp	r3, #6
 80156d2:	d111      	bne.n	80156f8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 80156d4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80156d6:	4632      	mov	r2, r6
 80156d8:	4639      	mov	r1, r7
 80156da:	6803      	ldr	r3, [r0, #0]
 80156dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80156de:	4798      	blx	r3
 80156e0:	7b73      	ldrb	r3, [r6, #13]
 80156e2:	005b      	lsls	r3, r3, #1
 80156e4:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 80156e8:	7ab3      	ldrb	r3, [r6, #10]
 80156ea:	4313      	orrs	r3, r2
 80156ec:	4418      	add	r0, r3
 80156ee:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 80156f2:	4418      	add	r0, r3
 80156f4:	f8ad 0038 	strh.w	r0, [sp, #56]	@ 0x38
 80156f8:	2600      	movs	r6, #0
 80156fa:	4637      	mov	r7, r6
 80156fc:	a806      	add	r0, sp, #24
 80156fe:	3701      	adds	r7, #1
 8015700:	f002 fd96 	bl	8018230 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8015704:	f8bd 0036 	ldrh.w	r0, [sp, #54]	@ 0x36
 8015708:	9b03      	ldr	r3, [sp, #12]
 801570a:	b2bf      	uxth	r7, r7
 801570c:	4286      	cmp	r6, r0
 801570e:	eba9 0903 	sub.w	r9, r9, r3
 8015712:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8015716:	bfb8      	it	lt
 8015718:	4606      	movlt	r6, r0
 801571a:	fa0f f989 	sxth.w	r9, r9
 801571e:	b236      	sxth	r6, r6
 8015720:	2b00      	cmp	r3, #0
 8015722:	f43f af0d 	beq.w	8015540 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8015726:	f89d 303a 	ldrb.w	r3, [sp, #58]	@ 0x3a
 801572a:	2b00      	cmp	r3, #0
 801572c:	f47f af08 	bne.w	8015540 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8015730:	7a2b      	ldrb	r3, [r5, #8]
 8015732:	444b      	add	r3, r9
 8015734:	2b00      	cmp	r3, #0
 8015736:	dce1      	bgt.n	80156fc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b8>
 8015738:	e702      	b.n	8015540 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 801573a:	bf00      	nop
 801573c:	20029f34 	.word	0x20029f34
 8015740:	20029f30 	.word	0x20029f30
 8015744:	20029f38 	.word	0x20029f38
 8015748:	20029f3c 	.word	0x20029f3c
 801574c:	ebaa 0606 	sub.w	r6, sl, r6
 8015750:	2002      	movs	r0, #2
 8015752:	fb96 f6f0 	sdiv	r6, r6, r0
 8015756:	e71c      	b.n	8015592 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
 8015758:	441e      	add	r6, r3
 801575a:	ebaa 0606 	sub.w	r6, sl, r6
 801575e:	e718      	b.n	8015592 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
 8015760:	8925      	ldrh	r5, [r4, #8]
 8015762:	1aed      	subs	r5, r5, r3
 8015764:	eba5 050a 	sub.w	r5, r5, sl
 8015768:	fa0f fb85 	sxth.w	fp, r5
 801576c:	8965      	ldrh	r5, [r4, #10]
 801576e:	eba5 0509 	sub.w	r5, r5, r9
 8015772:	b22d      	sxth	r5, r5
 8015774:	e72d      	b.n	80155d2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 8015776:	8965      	ldrh	r5, [r4, #10]
 8015778:	f04f 0b00 	mov.w	fp, #0
 801577c:	1aed      	subs	r5, r5, r3
 801577e:	4633      	mov	r3, r6
 8015780:	463e      	mov	r6, r7
 8015782:	eba5 050a 	sub.w	r5, r5, sl
 8015786:	461f      	mov	r7, r3
 8015788:	b22d      	sxth	r5, r5
 801578a:	e722      	b.n	80155d2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 801578c:	2500      	movs	r5, #0
 801578e:	e720      	b.n	80155d2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>

08015790 <_ZN8touchgfx8TextAreaD0Ev>:
 8015790:	b510      	push	{r4, lr}
 8015792:	4604      	mov	r4, r0
 8015794:	2148      	movs	r1, #72	@ 0x48
 8015796:	f014 fd93 	bl	802a2c0 <_ZdlPvj>
 801579a:	4620      	mov	r0, r4
 801579c:	bd10      	pop	{r4, pc}
	...

080157a0 <_ZNK8touchgfx8TextArea17invalidateContentEv>:
 80157a0:	b513      	push	{r0, r1, r4, lr}
 80157a2:	f890 3036 	ldrb.w	r3, [r0, #54]	@ 0x36
 80157a6:	4604      	mov	r4, r0
 80157a8:	b1fb      	cbz	r3, 80157ea <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 80157aa:	4b16      	ldr	r3, [pc, #88]	@ (8015804 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x64>)
 80157ac:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 80157ae:	881b      	ldrh	r3, [r3, #0]
 80157b0:	428b      	cmp	r3, r1
 80157b2:	d91a      	bls.n	80157ea <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 80157b4:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 80157b8:	2b00      	cmp	r3, #0
 80157ba:	dd16      	ble.n	80157ea <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 80157bc:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80157c0:	2b00      	cmp	r3, #0
 80157c2:	dd12      	ble.n	80157ea <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 80157c4:	4b10      	ldr	r3, [pc, #64]	@ (8015808 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x68>)
 80157c6:	6818      	ldr	r0, [r3, #0]
 80157c8:	f7f2 fd22 	bl	8008210 <_ZNK8touchgfx5Texts7getTextEt>
 80157cc:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	@ 0x42
 80157d0:	6822      	ldr	r2, [r4, #0]
 80157d2:	2b00      	cmp	r3, #0
 80157d4:	db06      	blt.n	80157e4 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 80157d6:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 80157da:	2b00      	cmp	r3, #0
 80157dc:	db02      	blt.n	80157e4 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 80157de:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80157e0:	4298      	cmp	r0, r3
 80157e2:	d004      	beq.n	80157ee <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4e>
 80157e4:	6953      	ldr	r3, [r2, #20]
 80157e6:	4620      	mov	r0, r4
 80157e8:	4798      	blx	r3
 80157ea:	b002      	add	sp, #8
 80157ec:	bd10      	pop	{r4, pc}
 80157ee:	f104 013c 	add.w	r1, r4, #60	@ 0x3c
 80157f2:	466b      	mov	r3, sp
 80157f4:	6912      	ldr	r2, [r2, #16]
 80157f6:	c903      	ldmia	r1, {r0, r1}
 80157f8:	e883 0003 	stmia.w	r3, {r0, r1}
 80157fc:	4619      	mov	r1, r3
 80157fe:	4620      	mov	r0, r4
 8015800:	4790      	blx	r2
 8015802:	e7f2      	b.n	80157ea <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8015804:	20029f34 	.word	0x20029f34
 8015808:	20029f3c 	.word	0x20029f3c

0801580c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 801580c:	4b45      	ldr	r3, [pc, #276]	@ (8015924 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x118>)
 801580e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015812:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 8015814:	b08e      	sub	sp, #56	@ 0x38
 8015816:	881b      	ldrh	r3, [r3, #0]
 8015818:	4604      	mov	r4, r0
 801581a:	4293      	cmp	r3, r2
 801581c:	d97e      	bls.n	801591c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 801581e:	6808      	ldr	r0, [r1, #0]
 8015820:	ab05      	add	r3, sp, #20
 8015822:	6849      	ldr	r1, [r1, #4]
 8015824:	4d40      	ldr	r5, [pc, #256]	@ (8015928 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x11c>)
 8015826:	c303      	stmia	r3!, {r0, r1}
 8015828:	4611      	mov	r1, r2
 801582a:	6828      	ldr	r0, [r5, #0]
 801582c:	f7f2 fcf0 	bl	8008210 <_ZNK8touchgfx5Texts7getTextEt>
 8015830:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	@ 0x42
 8015834:	2b00      	cmp	r3, #0
 8015836:	db11      	blt.n	801585c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8015838:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 801583c:	2b00      	cmp	r3, #0
 801583e:	db0d      	blt.n	801585c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8015840:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8015842:	4298      	cmp	r0, r3
 8015844:	d10a      	bne.n	801585c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8015846:	f104 023c 	add.w	r2, r4, #60	@ 0x3c
 801584a:	ab09      	add	r3, sp, #36	@ 0x24
 801584c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015850:	e883 0003 	stmia.w	r3, {r0, r1}
 8015854:	4619      	mov	r1, r3
 8015856:	a805      	add	r0, sp, #20
 8015858:	f7fc ff26 	bl	80126a8 <_ZN8touchgfx4RectaNERKS0_>
 801585c:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8015860:	2b00      	cmp	r3, #0
 8015862:	dd5b      	ble.n	801591c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8015864:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8015868:	2b00      	cmp	r3, #0
 801586a:	dd57      	ble.n	801591c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 801586c:	4f2f      	ldr	r7, [pc, #188]	@ (801592c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x120>)
 801586e:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8015870:	683b      	ldr	r3, [r7, #0]
 8015872:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8015876:	4b2e      	ldr	r3, [pc, #184]	@ (8015930 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x124>)
 8015878:	681b      	ldr	r3, [r3, #0]
 801587a:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801587e:	2e00      	cmp	r6, #0
 8015880:	d04c      	beq.n	801591c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8015882:	6823      	ldr	r3, [r4, #0]
 8015884:	4620      	mov	r0, r4
 8015886:	f894 8036 	ldrb.w	r8, [r4, #54]	@ 0x36
 801588a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801588c:	4798      	blx	r3
 801588e:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8015890:	683b      	ldr	r3, [r7, #0]
 8015892:	f9b4 c034 	ldrsh.w	ip, [r4, #52]	@ 0x34
 8015896:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 801589a:	f894 e038 	ldrb.w	lr, [r4, #56]	@ 0x38
 801589e:	f894 2039 	ldrb.w	r2, [r4, #57]	@ 0x39
 80158a2:	785b      	ldrb	r3, [r3, #1]
 80158a4:	f894 7037 	ldrb.w	r7, [r4, #55]	@ 0x37
 80158a8:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80158ac:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80158ae:	9609      	str	r6, [sp, #36]	@ 0x24
 80158b0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80158b4:	4b1f      	ldr	r3, [pc, #124]	@ (8015934 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x128>)
 80158b6:	f88d 0028 	strb.w	r0, [sp, #40]	@ 0x28
 80158ba:	681b      	ldr	r3, [r3, #0]
 80158bc:	f88d e02a 	strb.w	lr, [sp, #42]	@ 0x2a
 80158c0:	910b      	str	r1, [sp, #44]	@ 0x2c
 80158c2:	f8ad c030 	strh.w	ip, [sp, #48]	@ 0x30
 80158c6:	f88d 8032 	strb.w	r8, [sp, #50]	@ 0x32
 80158ca:	f88d 7033 	strb.w	r7, [sp, #51]	@ 0x33
 80158ce:	f88d 2034 	strb.w	r2, [sp, #52]	@ 0x34
 80158d2:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80158d6:	b10a      	cbz	r2, 80158dc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd0>
 80158d8:	6cde      	ldr	r6, [r3, #76]	@ 0x4c
 80158da:	b906      	cbnz	r6, 80158de <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd2>
 80158dc:	689e      	ldr	r6, [r3, #8]
 80158de:	af07      	add	r7, sp, #28
 80158e0:	4621      	mov	r1, r4
 80158e2:	4638      	mov	r0, r7
 80158e4:	f004 fb48 	bl	8019f78 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80158e8:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 80158ea:	6828      	ldr	r0, [r5, #0]
 80158ec:	f7f2 fc90 	bl	8008210 <_ZNK8touchgfx5Texts7getTextEt>
 80158f0:	6823      	ldr	r3, [r4, #0]
 80158f2:	4605      	mov	r5, r0
 80158f4:	4620      	mov	r0, r4
 80158f6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80158f8:	4798      	blx	r3
 80158fa:	6823      	ldr	r3, [r4, #0]
 80158fc:	4680      	mov	r8, r0
 80158fe:	4620      	mov	r0, r4
 8015900:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8015904:	4798      	blx	r3
 8015906:	ab09      	add	r3, sp, #36	@ 0x24
 8015908:	9501      	str	r5, [sp, #4]
 801590a:	9300      	str	r3, [sp, #0]
 801590c:	ab05      	add	r3, sp, #20
 801590e:	e9cd 8002 	strd	r8, r0, [sp, #8]
 8015912:	4630      	mov	r0, r6
 8015914:	e897 0006 	ldmia.w	r7, {r1, r2}
 8015918:	f7f2 fc2d 	bl	8008176 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 801591c:	b00e      	add	sp, #56	@ 0x38
 801591e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015922:	bf00      	nop
 8015924:	20029f34 	.word	0x20029f34
 8015928:	20029f3c 	.word	0x20029f3c
 801592c:	20029f30 	.word	0x20029f30
 8015930:	20029f38 	.word	0x20029f38
 8015934:	20029ed8 	.word	0x20029ed8

08015938 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 8015938:	b538      	push	{r3, r4, r5, lr}
 801593a:	4b0e      	ldr	r3, [pc, #56]	@ (8015974 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 801593c:	4604      	mov	r4, r0
 801593e:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 8015940:	881b      	ldrh	r3, [r3, #0]
 8015942:	429a      	cmp	r2, r3
 8015944:	d214      	bcs.n	8015970 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 8015946:	6803      	ldr	r3, [r0, #0]
 8015948:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801594a:	4798      	blx	r3
 801594c:	6823      	ldr	r3, [r4, #0]
 801594e:	4605      	mov	r5, r0
 8015950:	4620      	mov	r0, r4
 8015952:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015954:	4798      	blx	r3
 8015956:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 801595a:	b22d      	sxth	r5, r5
 801595c:	4601      	mov	r1, r0
 801595e:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 8015962:	bf06      	itte	eq
 8015964:	4602      	moveq	r2, r0
 8015966:	4629      	moveq	r1, r5
 8015968:	462a      	movne	r2, r5
 801596a:	4620      	mov	r0, r4
 801596c:	f7fc fc7e 	bl	801226c <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8015970:	bd38      	pop	{r3, r4, r5, pc}
 8015972:	bf00      	nop
 8015974:	20029f34 	.word	0x20029f34

08015978 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 8015978:	b530      	push	{r4, r5, lr}
 801597a:	888b      	ldrh	r3, [r1, #4]
 801597c:	b085      	sub	sp, #20
 801597e:	4604      	mov	r4, r0
 8015980:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8015982:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8015986:	b923      	cbnz	r3, 8015992 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8015988:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801598c:	b90b      	cbnz	r3, 8015992 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 801598e:	f7ff ffd3 	bl	8015938 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8015992:	6823      	ldr	r3, [r4, #0]
 8015994:	466d      	mov	r5, sp
 8015996:	4621      	mov	r1, r4
 8015998:	343c      	adds	r4, #60	@ 0x3c
 801599a:	4628      	mov	r0, r5
 801599c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80159a0:	4798      	blx	r3
 80159a2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80159a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80159aa:	b005      	add	sp, #20
 80159ac:	bd30      	pop	{r4, r5, pc}

080159ae <_ZNK8touchgfx3Box12getSolidRectEv>:
 80159ae:	2300      	movs	r3, #0
 80159b0:	8083      	strh	r3, [r0, #4]
 80159b2:	80c3      	strh	r3, [r0, #6]
 80159b4:	8003      	strh	r3, [r0, #0]
 80159b6:	8043      	strh	r3, [r0, #2]
 80159b8:	f891 3026 	ldrb.w	r3, [r1, #38]	@ 0x26
 80159bc:	2bff      	cmp	r3, #255	@ 0xff
 80159be:	bf01      	itttt	eq
 80159c0:	890b      	ldrheq	r3, [r1, #8]
 80159c2:	8083      	strheq	r3, [r0, #4]
 80159c4:	894b      	ldrheq	r3, [r1, #10]
 80159c6:	80c3      	strheq	r3, [r0, #6]
 80159c8:	4770      	bx	lr
	...

080159cc <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 80159cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80159ce:	4604      	mov	r4, r0
 80159d0:	466b      	mov	r3, sp
 80159d2:	6808      	ldr	r0, [r1, #0]
 80159d4:	6849      	ldr	r1, [r1, #4]
 80159d6:	c303      	stmia	r3!, {r0, r1}
 80159d8:	6823      	ldr	r3, [r4, #0]
 80159da:	4669      	mov	r1, sp
 80159dc:	4620      	mov	r0, r4
 80159de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80159e0:	4798      	blx	r3
 80159e2:	4b08      	ldr	r3, [pc, #32]	@ (8015a04 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 80159e4:	681b      	ldr	r3, [r3, #0]
 80159e6:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80159ea:	b10a      	cbz	r2, 80159f0 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 80159ec:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80159ee:	b900      	cbnz	r0, 80159f2 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 80159f0:	6898      	ldr	r0, [r3, #8]
 80159f2:	6803      	ldr	r3, [r0, #0]
 80159f4:	4669      	mov	r1, sp
 80159f6:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80159f8:	6a1d      	ldr	r5, [r3, #32]
 80159fa:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 80159fe:	47a8      	blx	r5
 8015a00:	b003      	add	sp, #12
 8015a02:	bd30      	pop	{r4, r5, pc}
 8015a04:	20029ed8 	.word	0x20029ed8

08015a08 <_ZN8touchgfx3BoxD1Ev>:
 8015a08:	4770      	bx	lr

08015a0a <_ZN8touchgfx3BoxD0Ev>:
 8015a0a:	b510      	push	{r4, lr}
 8015a0c:	4604      	mov	r4, r0
 8015a0e:	212c      	movs	r1, #44	@ 0x2c
 8015a10:	f014 fc56 	bl	802a2c0 <_ZdlPvj>
 8015a14:	4620      	mov	r0, r4
 8015a16:	bd10      	pop	{r4, pc}

08015a18 <_ZNK8touchgfx3Box17invalidateContentEv>:
 8015a18:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
 8015a1c:	b12a      	cbz	r2, 8015a2a <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8015a1e:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8015a22:	b112      	cbz	r2, 8015a2a <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8015a24:	6803      	ldr	r3, [r0, #0]
 8015a26:	695b      	ldr	r3, [r3, #20]
 8015a28:	4718      	bx	r3
 8015a2a:	4770      	bx	lr

08015a2c <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 8015a2c:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 8015a30:	4770      	bx	lr

08015a32 <_ZN8touchgfx6ButtonD1Ev>:
 8015a32:	4770      	bx	lr

08015a34 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 8015a34:	b570      	push	{r4, r5, r6, lr}
 8015a36:	880b      	ldrh	r3, [r1, #0]
 8015a38:	4605      	mov	r5, r0
 8015a3a:	4604      	mov	r4, r0
 8015a3c:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 8015a3e:	8813      	ldrh	r3, [r2, #0]
 8015a40:	f825 3f30 	strh.w	r3, [r5, #48]!
 8015a44:	4628      	mov	r0, r5
 8015a46:	f006 ffe9 	bl	801ca1c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8015a4a:	4606      	mov	r6, r0
 8015a4c:	4628      	mov	r0, r5
 8015a4e:	f007 f819 	bl	801ca84 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8015a52:	6823      	ldr	r3, [r4, #0]
 8015a54:	4605      	mov	r5, r0
 8015a56:	4631      	mov	r1, r6
 8015a58:	4620      	mov	r0, r4
 8015a5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015a5c:	4798      	blx	r3
 8015a5e:	6823      	ldr	r3, [r4, #0]
 8015a60:	4629      	mov	r1, r5
 8015a62:	4620      	mov	r0, r4
 8015a64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015a66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015a6a:	4718      	bx	r3

08015a6c <_ZN8touchgfx6ButtonD0Ev>:
 8015a6c:	b510      	push	{r4, lr}
 8015a6e:	4604      	mov	r4, r0
 8015a70:	2134      	movs	r1, #52	@ 0x34
 8015a72:	f014 fc25 	bl	802a2c0 <_ZdlPvj>
 8015a76:	4620      	mov	r0, r4
 8015a78:	bd10      	pop	{r4, pc}

08015a7a <_ZN8touchgfx14AbstractButton13executeActionEv>:
 8015a7a:	b510      	push	{r4, lr}
 8015a7c:	4604      	mov	r4, r0
 8015a7e:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8015a80:	b150      	cbz	r0, 8015a98 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 8015a82:	6803      	ldr	r3, [r0, #0]
 8015a84:	68db      	ldr	r3, [r3, #12]
 8015a86:	4798      	blx	r3
 8015a88:	b130      	cbz	r0, 8015a98 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 8015a8a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8015a8c:	4621      	mov	r1, r4
 8015a8e:	6803      	ldr	r3, [r0, #0]
 8015a90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015a94:	689b      	ldr	r3, [r3, #8]
 8015a96:	4718      	bx	r3
 8015a98:	bd10      	pop	{r4, pc}

08015a9a <_ZNK8touchgfx6Button12getSolidRectEv>:
 8015a9a:	b510      	push	{r4, lr}
 8015a9c:	f891 3032 	ldrb.w	r3, [r1, #50]	@ 0x32
 8015aa0:	4604      	mov	r4, r0
 8015aa2:	2bff      	cmp	r3, #255	@ 0xff
 8015aa4:	d006      	beq.n	8015ab4 <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 8015aa6:	2300      	movs	r3, #0
 8015aa8:	8003      	strh	r3, [r0, #0]
 8015aaa:	8043      	strh	r3, [r0, #2]
 8015aac:	8083      	strh	r3, [r0, #4]
 8015aae:	80c3      	strh	r3, [r0, #6]
 8015ab0:	4620      	mov	r0, r4
 8015ab2:	bd10      	pop	{r4, pc}
 8015ab4:	f891 302c 	ldrb.w	r3, [r1, #44]	@ 0x2c
 8015ab8:	b11b      	cbz	r3, 8015ac2 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 8015aba:	3130      	adds	r1, #48	@ 0x30
 8015abc:	f007 f816 	bl	801caec <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8015ac0:	e7f6      	b.n	8015ab0 <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 8015ac2:	312e      	adds	r1, #46	@ 0x2e
 8015ac4:	e7fa      	b.n	8015abc <_ZNK8touchgfx6Button12getSolidRectEv+0x22>
	...

08015ac8 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 8015ac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015acc:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8015ad0:	b08a      	sub	sp, #40	@ 0x28
 8015ad2:	4604      	mov	r4, r0
 8015ad4:	4688      	mov	r8, r1
 8015ad6:	2b00      	cmp	r3, #0
 8015ad8:	d066      	beq.n	8015ba8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 8015ada:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8015adc:	a805      	add	r0, sp, #20
 8015ade:	f8ad 3014 	strh.w	r3, [sp, #20]
 8015ae2:	f006 ff9b 	bl	801ca1c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8015ae6:	4607      	mov	r7, r0
 8015ae8:	a805      	add	r0, sp, #20
 8015aea:	f006 ffcb 	bl	801ca84 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8015aee:	f9b8 6000 	ldrsh.w	r6, [r8]
 8015af2:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 8015af6:	2300      	movs	r3, #0
 8015af8:	4432      	add	r2, r6
 8015afa:	9306      	str	r3, [sp, #24]
 8015afc:	b292      	uxth	r2, r2
 8015afe:	fa0f fc82 	sxth.w	ip, r2
 8015b02:	459c      	cmp	ip, r3
 8015b04:	dd52      	ble.n	8015bac <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8015b06:	42b7      	cmp	r7, r6
 8015b08:	dd50      	ble.n	8015bac <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8015b0a:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 8015b0e:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8015b12:	442b      	add	r3, r5
 8015b14:	b29b      	uxth	r3, r3
 8015b16:	b219      	sxth	r1, r3
 8015b18:	2900      	cmp	r1, #0
 8015b1a:	dd47      	ble.n	8015bac <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8015b1c:	42a8      	cmp	r0, r5
 8015b1e:	dd45      	ble.n	8015bac <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8015b20:	4567      	cmp	r7, ip
 8015b22:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 8015b26:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8015b2a:	bfb8      	it	lt
 8015b2c:	b2ba      	uxthlt	r2, r7
 8015b2e:	4288      	cmp	r0, r1
 8015b30:	f8ad 6018 	strh.w	r6, [sp, #24]
 8015b34:	bfb8      	it	lt
 8015b36:	b283      	uxthlt	r3, r0
 8015b38:	1b92      	subs	r2, r2, r6
 8015b3a:	f8ad 501a 	strh.w	r5, [sp, #26]
 8015b3e:	1b5b      	subs	r3, r3, r5
 8015b40:	f8ad 201c 	strh.w	r2, [sp, #28]
 8015b44:	f8ad 301e 	strh.w	r3, [sp, #30]
 8015b48:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8015b4c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015b50:	429a      	cmp	r2, r3
 8015b52:	d026      	beq.n	8015ba2 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8015b54:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8015b58:	2b00      	cmp	r3, #0
 8015b5a:	dd22      	ble.n	8015ba2 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8015b5c:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8015b60:	2b00      	cmp	r3, #0
 8015b62:	dd1e      	ble.n	8015ba2 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8015b64:	2300      	movs	r3, #0
 8015b66:	a908      	add	r1, sp, #32
 8015b68:	4620      	mov	r0, r4
 8015b6a:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8015b6e:	6823      	ldr	r3, [r4, #0]
 8015b70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015b72:	4798      	blx	r3
 8015b74:	4b0f      	ldr	r3, [pc, #60]	@ (8015bb4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xec>)
 8015b76:	681b      	ldr	r3, [r3, #0]
 8015b78:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8015b7c:	b10a      	cbz	r2, 8015b82 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xba>
 8015b7e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8015b80:	b900      	cbnz	r0, 8015b84 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xbc>
 8015b82:	6898      	ldr	r0, [r3, #8]
 8015b84:	2501      	movs	r5, #1
 8015b86:	6801      	ldr	r1, [r0, #0]
 8015b88:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 8015b8c:	9502      	str	r5, [sp, #8]
 8015b8e:	f894 4032 	ldrb.w	r4, [r4, #50]	@ 0x32
 8015b92:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8015b96:	9401      	str	r4, [sp, #4]
 8015b98:	ac06      	add	r4, sp, #24
 8015b9a:	9400      	str	r4, [sp, #0]
 8015b9c:	688c      	ldr	r4, [r1, #8]
 8015b9e:	a905      	add	r1, sp, #20
 8015ba0:	47a0      	blx	r4
 8015ba2:	b00a      	add	sp, #40	@ 0x28
 8015ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ba8:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 8015baa:	e797      	b.n	8015adc <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 8015bac:	2300      	movs	r3, #0
 8015bae:	9307      	str	r3, [sp, #28]
 8015bb0:	e7ca      	b.n	8015b48 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x80>
 8015bb2:	bf00      	nop
 8015bb4:	20029ed8 	.word	0x20029ed8

08015bb8 <_ZNK8touchgfx6Button17invalidateContentEv>:
 8015bb8:	f890 2032 	ldrb.w	r2, [r0, #50]	@ 0x32
 8015bbc:	b12a      	cbz	r2, 8015bca <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 8015bbe:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8015bc2:	b112      	cbz	r2, 8015bca <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 8015bc4:	6803      	ldr	r3, [r0, #0]
 8015bc6:	695b      	ldr	r3, [r3, #20]
 8015bc8:	4718      	bx	r3
 8015bca:	4770      	bx	lr

08015bcc <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE>:
 8015bcc:	4b30      	ldr	r3, [pc, #192]	@ (8015c90 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc4>)
 8015bce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015bd2:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 8015bd4:	b08d      	sub	sp, #52	@ 0x34
 8015bd6:	881b      	ldrh	r3, [r3, #0]
 8015bd8:	4604      	mov	r4, r0
 8015bda:	460f      	mov	r7, r1
 8015bdc:	4293      	cmp	r3, r2
 8015bde:	d954      	bls.n	8015c8a <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 8015be0:	4b2c      	ldr	r3, [pc, #176]	@ (8015c94 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc8>)
 8015be2:	6819      	ldr	r1, [r3, #0]
 8015be4:	eb01 0342 	add.w	r3, r1, r2, lsl #1
 8015be8:	f811 1012 	ldrb.w	r1, [r1, r2, lsl #1]
 8015bec:	4a2a      	ldr	r2, [pc, #168]	@ (8015c98 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xcc>)
 8015bee:	6812      	ldr	r2, [r2, #0]
 8015bf0:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8015bf4:	2900      	cmp	r1, #0
 8015bf6:	d048      	beq.n	8015c8a <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 8015bf8:	785a      	ldrb	r2, [r3, #1]
 8015bfa:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
 8015bfe:	f3c2 0801 	ubfx	r8, r2, #0, #2
 8015c02:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8015c06:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8015c0a:	4b24      	ldr	r3, [pc, #144]	@ (8015c9c <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd0>)
 8015c0c:	f88d 2021 	strb.w	r2, [sp, #33]	@ 0x21
 8015c10:	681a      	ldr	r2, [r3, #0]
 8015c12:	f890 5036 	ldrb.w	r5, [r0, #54]	@ 0x36
 8015c16:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	@ 0x34
 8015c1a:	f890 e038 	ldrb.w	lr, [r0, #56]	@ 0x38
 8015c1e:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8015c20:	f890 0037 	ldrb.w	r0, [r0, #55]	@ 0x37
 8015c24:	f892 3058 	ldrb.w	r3, [r2, #88]	@ 0x58
 8015c28:	9107      	str	r1, [sp, #28]
 8015c2a:	f88d 8020 	strb.w	r8, [sp, #32]
 8015c2e:	f88d e022 	strb.w	lr, [sp, #34]	@ 0x22
 8015c32:	9609      	str	r6, [sp, #36]	@ 0x24
 8015c34:	f8ad c028 	strh.w	ip, [sp, #40]	@ 0x28
 8015c38:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 8015c3c:	f88d 002b 	strb.w	r0, [sp, #43]	@ 0x2b
 8015c40:	b10b      	cbz	r3, 8015c46 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7a>
 8015c42:	6cd5      	ldr	r5, [r2, #76]	@ 0x4c
 8015c44:	b905      	cbnz	r5, 8015c48 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7c>
 8015c46:	6895      	ldr	r5, [r2, #8]
 8015c48:	ae05      	add	r6, sp, #20
 8015c4a:	4621      	mov	r1, r4
 8015c4c:	4630      	mov	r0, r6
 8015c4e:	f004 f993 	bl	8019f78 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8015c52:	4b13      	ldr	r3, [pc, #76]	@ (8015ca0 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd4>)
 8015c54:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8015c56:	6818      	ldr	r0, [r3, #0]
 8015c58:	f7f2 fada 	bl	8008210 <_ZNK8touchgfx5Texts7getTextEt>
 8015c5c:	6823      	ldr	r3, [r4, #0]
 8015c5e:	4680      	mov	r8, r0
 8015c60:	4620      	mov	r0, r4
 8015c62:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015c64:	4798      	blx	r3
 8015c66:	6823      	ldr	r3, [r4, #0]
 8015c68:	4681      	mov	r9, r0
 8015c6a:	4620      	mov	r0, r4
 8015c6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8015c70:	4798      	blx	r3
 8015c72:	ab07      	add	r3, sp, #28
 8015c74:	f8cd 8004 	str.w	r8, [sp, #4]
 8015c78:	9300      	str	r3, [sp, #0]
 8015c7a:	463b      	mov	r3, r7
 8015c7c:	e9cd 9002 	strd	r9, r0, [sp, #8]
 8015c80:	4628      	mov	r0, r5
 8015c82:	e896 0006 	ldmia.w	r6, {r1, r2}
 8015c86:	f7f2 fa76 	bl	8008176 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8015c8a:	b00d      	add	sp, #52	@ 0x34
 8015c8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015c90:	20029f34 	.word	0x20029f34
 8015c94:	20029f30 	.word	0x20029f30
 8015c98:	20029f38 	.word	0x20029f38
 8015c9c:	20029ed8 	.word	0x20029ed8
 8015ca0:	20029f3c 	.word	0x20029f3c

08015ca4 <_ZN8touchgfx13BoxWithBorderD1Ev>:
 8015ca4:	4770      	bx	lr

08015ca6 <_ZN8touchgfx13BoxWithBorderD0Ev>:
 8015ca6:	b510      	push	{r4, lr}
 8015ca8:	4604      	mov	r4, r0
 8015caa:	2134      	movs	r1, #52	@ 0x34
 8015cac:	f014 fb08 	bl	802a2c0 <_ZdlPvj>
 8015cb0:	4620      	mov	r0, r4
 8015cb2:	bd10      	pop	{r4, pc}

08015cb4 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE>:
 8015cb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015cb8:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8015cba:	4604      	mov	r4, r0
 8015cbc:	460e      	mov	r6, r1
 8015cbe:	b08e      	sub	sp, #56	@ 0x38
 8015cc0:	b218      	sxth	r0, r3
 8015cc2:	8921      	ldrh	r1, [r4, #8]
 8015cc4:	005b      	lsls	r3, r3, #1
 8015cc6:	8962      	ldrh	r2, [r4, #10]
 8015cc8:	f8ad 0000 	strh.w	r0, [sp]
 8015ccc:	b29b      	uxth	r3, r3
 8015cce:	f8ad 0002 	strh.w	r0, [sp, #2]
 8015cd2:	1ac9      	subs	r1, r1, r3
 8015cd4:	1ad3      	subs	r3, r2, r3
 8015cd6:	b209      	sxth	r1, r1
 8015cd8:	b21b      	sxth	r3, r3
 8015cda:	2900      	cmp	r1, #0
 8015cdc:	f8ad 1004 	strh.w	r1, [sp, #4]
 8015ce0:	f8ad 3006 	strh.w	r3, [sp, #6]
 8015ce4:	dd5e      	ble.n	8015da4 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 8015ce6:	2b00      	cmp	r3, #0
 8015ce8:	dd5c      	ble.n	8015da4 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 8015cea:	6830      	ldr	r0, [r6, #0]
 8015cec:	ab02      	add	r3, sp, #8
 8015cee:	6871      	ldr	r1, [r6, #4]
 8015cf0:	c303      	stmia	r3!, {r0, r1}
 8015cf2:	4669      	mov	r1, sp
 8015cf4:	a802      	add	r0, sp, #8
 8015cf6:	f7fc fcd7 	bl	80126a8 <_ZN8touchgfx4RectaNERKS0_>
 8015cfa:	4620      	mov	r0, r4
 8015cfc:	a902      	add	r1, sp, #8
 8015cfe:	f7ff fe65 	bl	80159cc <_ZNK8touchgfx3Box4drawERKNS_4RectE>
 8015d02:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 8015d04:	2800      	cmp	r0, #0
 8015d06:	d05f      	beq.n	8015dc8 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 8015d08:	8963      	ldrh	r3, [r4, #10]
 8015d0a:	b202      	sxth	r2, r0
 8015d0c:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8015d10:	2500      	movs	r5, #0
 8015d12:	1a1f      	subs	r7, r3, r0
 8015d14:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
 8015d18:	f8ad 101c 	strh.w	r1, [sp, #28]
 8015d1c:	b21b      	sxth	r3, r3
 8015d1e:	f8ad 7022 	strh.w	r7, [sp, #34]	@ 0x22
 8015d22:	f8ad 1024 	strh.w	r1, [sp, #36]	@ 0x24
 8015d26:	af04      	add	r7, sp, #16
 8015d28:	1a09      	subs	r1, r1, r0
 8015d2a:	9506      	str	r5, [sp, #24]
 8015d2c:	f8ad 201e 	strh.w	r2, [sp, #30]
 8015d30:	f8ad 5020 	strh.w	r5, [sp, #32]
 8015d34:	f8ad 2026 	strh.w	r2, [sp, #38]	@ 0x26
 8015d38:	f8ad 5028 	strh.w	r5, [sp, #40]	@ 0x28
 8015d3c:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 8015d40:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 8015d44:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 8015d48:	f8ad 1030 	strh.w	r1, [sp, #48]	@ 0x30
 8015d4c:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 8015d50:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 8015d54:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8015d58:	ab06      	add	r3, sp, #24
 8015d5a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8015d5e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015d62:	e887 0003 	stmia.w	r7, {r0, r1}
 8015d66:	4631      	mov	r1, r6
 8015d68:	4638      	mov	r0, r7
 8015d6a:	f7fc fc9d 	bl	80126a8 <_ZN8touchgfx4RectaNERKS0_>
 8015d6e:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8015d72:	2b00      	cmp	r3, #0
 8015d74:	dd12      	ble.n	8015d9c <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 8015d76:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8015d7a:	2b00      	cmp	r3, #0
 8015d7c:	dd0e      	ble.n	8015d9c <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 8015d7e:	6823      	ldr	r3, [r4, #0]
 8015d80:	4639      	mov	r1, r7
 8015d82:	4620      	mov	r0, r4
 8015d84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015d86:	4798      	blx	r3
 8015d88:	f7ee fbde 	bl	8004548 <_ZN8touchgfx3HAL3lcdEv>
 8015d8c:	6803      	ldr	r3, [r0, #0]
 8015d8e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8015d90:	4639      	mov	r1, r7
 8015d92:	f8d3 8020 	ldr.w	r8, [r3, #32]
 8015d96:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 8015d9a:	47c0      	blx	r8
 8015d9c:	3501      	adds	r5, #1
 8015d9e:	2d04      	cmp	r5, #4
 8015da0:	d1da      	bne.n	8015d58 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xa4>
 8015da2:	e011      	b.n	8015dc8 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 8015da4:	6830      	ldr	r0, [r6, #0]
 8015da6:	ab06      	add	r3, sp, #24
 8015da8:	6871      	ldr	r1, [r6, #4]
 8015daa:	c303      	stmia	r3!, {r0, r1}
 8015dac:	6823      	ldr	r3, [r4, #0]
 8015dae:	a906      	add	r1, sp, #24
 8015db0:	4620      	mov	r0, r4
 8015db2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015db4:	4798      	blx	r3
 8015db6:	f7ee fbc7 	bl	8004548 <_ZN8touchgfx3HAL3lcdEv>
 8015dba:	6803      	ldr	r3, [r0, #0]
 8015dbc:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8015dbe:	a906      	add	r1, sp, #24
 8015dc0:	6a1d      	ldr	r5, [r3, #32]
 8015dc2:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 8015dc6:	47a8      	blx	r5
 8015dc8:	b00e      	add	sp, #56	@ 0x38
 8015dca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015dce <_ZN8touchgfx5ImageD1Ev>:
 8015dce:	4770      	bx	lr

08015dd0 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 8015dd0:	b570      	push	{r4, r5, r6, lr}
 8015dd2:	880b      	ldrh	r3, [r1, #0]
 8015dd4:	460d      	mov	r5, r1
 8015dd6:	4604      	mov	r4, r0
 8015dd8:	84c3      	strh	r3, [r0, #38]	@ 0x26
 8015dda:	4608      	mov	r0, r1
 8015ddc:	f006 fe1e 	bl	801ca1c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8015de0:	4606      	mov	r6, r0
 8015de2:	4628      	mov	r0, r5
 8015de4:	f006 fe4e 	bl	801ca84 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8015de8:	6823      	ldr	r3, [r4, #0]
 8015dea:	4605      	mov	r5, r0
 8015dec:	4631      	mov	r1, r6
 8015dee:	4620      	mov	r0, r4
 8015df0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015df2:	4798      	blx	r3
 8015df4:	6823      	ldr	r3, [r4, #0]
 8015df6:	4629      	mov	r1, r5
 8015df8:	4620      	mov	r0, r4
 8015dfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015dfc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015e00:	4718      	bx	r3

08015e02 <_ZN8touchgfx5ImageD0Ev>:
 8015e02:	b510      	push	{r4, lr}
 8015e04:	4604      	mov	r4, r0
 8015e06:	212c      	movs	r1, #44	@ 0x2c
 8015e08:	f014 fa5a 	bl	802a2c0 <_ZdlPvj>
 8015e0c:	4620      	mov	r0, r4
 8015e0e:	bd10      	pop	{r4, pc}

08015e10 <_ZNK8touchgfx5Image12getSolidRectEv>:
 8015e10:	b510      	push	{r4, lr}
 8015e12:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 8015e16:	4604      	mov	r4, r0
 8015e18:	2bff      	cmp	r3, #255	@ 0xff
 8015e1a:	d006      	beq.n	8015e2a <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 8015e1c:	2300      	movs	r3, #0
 8015e1e:	8003      	strh	r3, [r0, #0]
 8015e20:	8043      	strh	r3, [r0, #2]
 8015e22:	8083      	strh	r3, [r0, #4]
 8015e24:	80c3      	strh	r3, [r0, #6]
 8015e26:	4620      	mov	r0, r4
 8015e28:	bd10      	pop	{r4, pc}
 8015e2a:	3126      	adds	r1, #38	@ 0x26
 8015e2c:	f006 fe5e 	bl	801caec <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8015e30:	e7f9      	b.n	8015e26 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

08015e32 <_ZNK8touchgfx5Image17invalidateContentEv>:
 8015e32:	f890 2028 	ldrb.w	r2, [r0, #40]	@ 0x28
 8015e36:	b12a      	cbz	r2, 8015e44 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 8015e38:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8015e3c:	b112      	cbz	r2, 8015e44 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 8015e3e:	6803      	ldr	r3, [r0, #0]
 8015e40:	695b      	ldr	r3, [r3, #20]
 8015e42:	4718      	bx	r3
 8015e44:	4770      	bx	lr
	...

08015e48 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8015e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e4c:	4604      	mov	r4, r0
 8015e4e:	b088      	sub	sp, #32
 8015e50:	2500      	movs	r5, #0
 8015e52:	460f      	mov	r7, r1
 8015e54:	f854 3b26 	ldr.w	r3, [r4], #38
 8015e58:	a904      	add	r1, sp, #16
 8015e5a:	4606      	mov	r6, r0
 8015e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015e5e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8015e62:	4798      	blx	r3
 8015e64:	4620      	mov	r0, r4
 8015e66:	f006 fdd9 	bl	801ca1c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8015e6a:	4680      	mov	r8, r0
 8015e6c:	4620      	mov	r0, r4
 8015e6e:	f006 fe09 	bl	801ca84 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8015e72:	9506      	str	r5, [sp, #24]
 8015e74:	ad06      	add	r5, sp, #24
 8015e76:	f8ad 001e 	strh.w	r0, [sp, #30]
 8015e7a:	4639      	mov	r1, r7
 8015e7c:	f8ad 801c 	strh.w	r8, [sp, #28]
 8015e80:	4628      	mov	r0, r5
 8015e82:	f7fc fc11 	bl	80126a8 <_ZN8touchgfx4RectaNERKS0_>
 8015e86:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8015e8a:	2b00      	cmp	r3, #0
 8015e8c:	dd19      	ble.n	8015ec2 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8015e8e:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8015e92:	2b00      	cmp	r3, #0
 8015e94:	dd15      	ble.n	8015ec2 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8015e96:	4b0c      	ldr	r3, [pc, #48]	@ (8015ec8 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 8015e98:	681b      	ldr	r3, [r3, #0]
 8015e9a:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8015e9e:	b10a      	cbz	r2, 8015ea4 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 8015ea0:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8015ea2:	b900      	cbnz	r0, 8015ea6 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 8015ea4:	6898      	ldr	r0, [r3, #8]
 8015ea6:	2701      	movs	r7, #1
 8015ea8:	6801      	ldr	r1, [r0, #0]
 8015eaa:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8015eae:	9702      	str	r7, [sp, #8]
 8015eb0:	f896 6028 	ldrb.w	r6, [r6, #40]	@ 0x28
 8015eb4:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8015eb8:	e9cd 5600 	strd	r5, r6, [sp]
 8015ebc:	688d      	ldr	r5, [r1, #8]
 8015ebe:	4621      	mov	r1, r4
 8015ec0:	47a8      	blx	r5
 8015ec2:	b008      	add	sp, #32
 8015ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ec8:	20029ed8 	.word	0x20029ed8

08015ecc <_ZN8touchgfx7OutlineD1Ev>:
 8015ecc:	4770      	bx	lr

08015ece <_ZN8touchgfx7OutlineD0Ev>:
 8015ece:	b510      	push	{r4, lr}
 8015ed0:	4604      	mov	r4, r0
 8015ed2:	2130      	movs	r1, #48	@ 0x30
 8015ed4:	f014 f9f4 	bl	802a2c0 <_ZdlPvj>
 8015ed8:	4620      	mov	r0, r4
 8015eda:	bd10      	pop	{r4, pc}

08015edc <_ZN8touchgfx7Outline5resetEv>:
 8015edc:	b510      	push	{r4, lr}
 8015ede:	4604      	mov	r4, r0
 8015ee0:	f000 fe86 	bl	8016bf0 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 8015ee4:	60e0      	str	r0, [r4, #12]
 8015ee6:	f000 fe89 	bl	8016bfc <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 8015eea:	68e3      	ldr	r3, [r4, #12]
 8015eec:	08c0      	lsrs	r0, r0, #3
 8015eee:	2200      	movs	r2, #0
 8015ef0:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8015ef4:	6123      	str	r3, [r4, #16]
 8015ef6:	3801      	subs	r0, #1
 8015ef8:	60a2      	str	r2, [r4, #8]
 8015efa:	6060      	str	r0, [r4, #4]
 8015efc:	8019      	strh	r1, [r3, #0]
 8015efe:	8059      	strh	r1, [r3, #2]
 8015f00:	809a      	strh	r2, [r3, #4]
 8015f02:	80da      	strh	r2, [r3, #6]
 8015f04:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8015f06:	f023 0301 	bic.w	r3, r3, #1
 8015f0a:	f043 0302 	orr.w	r3, r3, #2
 8015f0e:	6263      	str	r3, [r4, #36]	@ 0x24
 8015f10:	bd10      	pop	{r4, pc}
	...

08015f14 <_ZN8touchgfx7OutlineC1Ev>:
 8015f14:	4b0a      	ldr	r3, [pc, #40]	@ (8015f40 <_ZN8touchgfx7OutlineC1Ev+0x2c>)
 8015f16:	b510      	push	{r4, lr}
 8015f18:	6003      	str	r3, [r0, #0]
 8015f1a:	2300      	movs	r3, #0
 8015f1c:	4604      	mov	r4, r0
 8015f1e:	6243      	str	r3, [r0, #36]	@ 0x24
 8015f20:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8015f24:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015f28:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8015f2c:	e9c0 3307 	strd	r3, r3, [r0, #28]
 8015f30:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8015f34:	e9c0 330a 	strd	r3, r3, [r0, #40]	@ 0x28
 8015f38:	f7ff ffd0 	bl	8015edc <_ZN8touchgfx7Outline5resetEv>
 8015f3c:	4620      	mov	r0, r4
 8015f3e:	bd10      	pop	{r4, pc}
 8015f40:	080426bc 	.word	0x080426bc

08015f44 <_ZN8touchgfx7Outline10renderLineEiiii>:
 8015f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f48:	b093      	sub	sp, #76	@ 0x4c
 8015f4a:	1156      	asrs	r6, r2, #5
 8015f4c:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8015f4e:	9305      	str	r3, [sp, #20]
 8015f50:	1153      	asrs	r3, r2, #5
 8015f52:	f004 051f 	and.w	r5, r4, #31
 8015f56:	9303      	str	r3, [sp, #12]
 8015f58:	1163      	asrs	r3, r4, #5
 8015f5a:	9504      	str	r5, [sp, #16]
 8015f5c:	1165      	asrs	r5, r4, #5
 8015f5e:	9306      	str	r3, [sp, #24]
 8015f60:	f002 031f 	and.w	r3, r2, #31
 8015f64:	42ae      	cmp	r6, r5
 8015f66:	f040 80f4 	bne.w	8016152 <_ZN8touchgfx7Outline10renderLineEiiii+0x20e>
 8015f6a:	9c04      	ldr	r4, [sp, #16]
 8015f6c:	9a05      	ldr	r2, [sp, #20]
 8015f6e:	42a3      	cmp	r3, r4
 8015f70:	ea4f 1e62 	mov.w	lr, r2, asr #5
 8015f74:	6902      	ldr	r2, [r0, #16]
 8015f76:	d125      	bne.n	8015fc4 <_ZN8touchgfx7Outline10renderLineEiiii+0x80>
 8015f78:	f9b2 3000 	ldrsh.w	r3, [r2]
 8015f7c:	459e      	cmp	lr, r3
 8015f7e:	d103      	bne.n	8015f88 <_ZN8touchgfx7Outline10renderLineEiiii+0x44>
 8015f80:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8015f84:	429e      	cmp	r6, r3
 8015f86:	d035      	beq.n	8015ff4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8015f88:	88d1      	ldrh	r1, [r2, #6]
 8015f8a:	8893      	ldrh	r3, [r2, #4]
 8015f8c:	430b      	orrs	r3, r1
 8015f8e:	d010      	beq.n	8015fb2 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8015f90:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8015f94:	2b00      	cmp	r3, #0
 8015f96:	db0c      	blt.n	8015fb2 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8015f98:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8015f9a:	428b      	cmp	r3, r1
 8015f9c:	da09      	bge.n	8015fb2 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8015f9e:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 8015fa2:	428b      	cmp	r3, r1
 8015fa4:	f103 0301 	add.w	r3, r3, #1
 8015fa8:	bf38      	it	cc
 8015faa:	3208      	addcc	r2, #8
 8015fac:	6083      	str	r3, [r0, #8]
 8015fae:	bf38      	it	cc
 8015fb0:	6102      	strcc	r2, [r0, #16]
 8015fb2:	6903      	ldr	r3, [r0, #16]
 8015fb4:	9a03      	ldr	r2, [sp, #12]
 8015fb6:	f8a3 e000 	strh.w	lr, [r3]
 8015fba:	805a      	strh	r2, [r3, #2]
 8015fbc:	2200      	movs	r2, #0
 8015fbe:	809a      	strh	r2, [r3, #4]
 8015fc0:	80da      	strh	r2, [r3, #6]
 8015fc2:	e017      	b.n	8015ff4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8015fc4:	9c05      	ldr	r4, [sp, #20]
 8015fc6:	114e      	asrs	r6, r1, #5
 8015fc8:	f001 0c1f 	and.w	ip, r1, #31
 8015fcc:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 8015fd0:	f004 041f 	and.w	r4, r4, #31
 8015fd4:	4576      	cmp	r6, lr
 8015fd6:	f8b2 a006 	ldrh.w	sl, [r2, #6]
 8015fda:	9402      	str	r4, [sp, #8]
 8015fdc:	9c04      	ldr	r4, [sp, #16]
 8015fde:	eba4 0403 	sub.w	r4, r4, r3
 8015fe2:	d10a      	bne.n	8015ffa <_ZN8touchgfx7Outline10renderLineEiiii+0xb6>
 8015fe4:	9b02      	ldr	r3, [sp, #8]
 8015fe6:	44a0      	add	r8, r4
 8015fe8:	449c      	add	ip, r3
 8015fea:	f8a2 8004 	strh.w	r8, [r2, #4]
 8015fee:	fb04 a40c 	mla	r4, r4, ip, sl
 8015ff2:	80d4      	strh	r4, [r2, #6]
 8015ff4:	b013      	add	sp, #76	@ 0x4c
 8015ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ffa:	9d05      	ldr	r5, [sp, #20]
 8015ffc:	1a69      	subs	r1, r5, r1
 8015ffe:	bf51      	iteee	pl
 8016000:	f1cc 0520 	rsbpl	r5, ip, #32
 8016004:	fb04 f40c 	mulmi.w	r4, r4, ip
 8016008:	4249      	negmi	r1, r1
 801600a:	2500      	movmi	r5, #0
 801600c:	bf5d      	ittte	pl
 801600e:	436c      	mulpl	r4, r5
 8016010:	2520      	movpl	r5, #32
 8016012:	f04f 0901 	movpl.w	r9, #1
 8016016:	f04f 39ff 	movmi.w	r9, #4294967295
 801601a:	9501      	str	r5, [sp, #4]
 801601c:	9f01      	ldr	r7, [sp, #4]
 801601e:	444e      	add	r6, r9
 8016020:	fb94 f5f1 	sdiv	r5, r4, r1
 8016024:	fb01 4415 	mls	r4, r1, r5, r4
 8016028:	44bc      	add	ip, r7
 801602a:	2c00      	cmp	r4, #0
 801602c:	bfbc      	itt	lt
 801602e:	f105 35ff 	addlt.w	r5, r5, #4294967295
 8016032:	1864      	addlt	r4, r4, r1
 8016034:	44a8      	add	r8, r5
 8016036:	fb05 ac0c 	mla	ip, r5, ip, sl
 801603a:	f8a2 8004 	strh.w	r8, [r2, #4]
 801603e:	f8a2 c006 	strh.w	ip, [r2, #6]
 8016042:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8016046:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 801604a:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 801604e:	ea58 0202 	orrs.w	r2, r8, r2
 8016052:	d011      	beq.n	8016078 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 8016054:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 8016058:	f1b8 0f00 	cmp.w	r8, #0
 801605c:	db0c      	blt.n	8016078 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 801605e:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8016060:	4590      	cmp	r8, r2
 8016062:	da09      	bge.n	8016078 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 8016064:	e9d0 2801 	ldrd	r2, r8, [r0, #4]
 8016068:	4590      	cmp	r8, r2
 801606a:	bf3c      	itt	cc
 801606c:	f10c 0208 	addcc.w	r2, ip, #8
 8016070:	6102      	strcc	r2, [r0, #16]
 8016072:	f108 0201 	add.w	r2, r8, #1
 8016076:	6082      	str	r2, [r0, #8]
 8016078:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801607c:	2700      	movs	r7, #0
 801607e:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8016082:	45b6      	cmp	lr, r6
 8016084:	f8ac 6000 	strh.w	r6, [ip]
 8016088:	442b      	add	r3, r5
 801608a:	f8ac 2002 	strh.w	r2, [ip, #2]
 801608e:	f8ac 7004 	strh.w	r7, [ip, #4]
 8016092:	f8ac 7006 	strh.w	r7, [ip, #6]
 8016096:	d04b      	beq.n	8016130 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ec>
 8016098:	9f04      	ldr	r7, [sp, #16]
 801609a:	1a64      	subs	r4, r4, r1
 801609c:	f04f 0a00 	mov.w	sl, #0
 80160a0:	1aff      	subs	r7, r7, r3
 80160a2:	443d      	add	r5, r7
 80160a4:	016d      	lsls	r5, r5, #5
 80160a6:	fb95 f8f1 	sdiv	r8, r5, r1
 80160aa:	fb01 5518 	mls	r5, r1, r8, r5
 80160ae:	2d00      	cmp	r5, #0
 80160b0:	bfbc      	itt	lt
 80160b2:	f108 38ff 	addlt.w	r8, r8, #4294967295
 80160b6:	186d      	addlt	r5, r5, r1
 80160b8:	f108 0701 	add.w	r7, r8, #1
 80160bc:	9703      	str	r7, [sp, #12]
 80160be:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80160c2:	1964      	adds	r4, r4, r5
 80160c4:	444e      	add	r6, r9
 80160c6:	bf54      	ite	pl
 80160c8:	9f03      	ldrpl	r7, [sp, #12]
 80160ca:	4647      	movmi	r7, r8
 80160cc:	f8bc b004 	ldrh.w	fp, [ip, #4]
 80160d0:	bf58      	it	pl
 80160d2:	1a64      	subpl	r4, r4, r1
 80160d4:	443b      	add	r3, r7
 80160d6:	44bb      	add	fp, r7
 80160d8:	f8ac b004 	strh.w	fp, [ip, #4]
 80160dc:	f8bc b006 	ldrh.w	fp, [ip, #6]
 80160e0:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 80160e4:	f8ac b006 	strh.w	fp, [ip, #6]
 80160e8:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80160ec:	f8bc b006 	ldrh.w	fp, [ip, #6]
 80160f0:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 80160f4:	ea5b 0707 	orrs.w	r7, fp, r7
 80160f8:	d011      	beq.n	801611e <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 80160fa:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 80160fe:	f1bb 0f00 	cmp.w	fp, #0
 8016102:	db0c      	blt.n	801611e <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 8016104:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8016106:	45bb      	cmp	fp, r7
 8016108:	da09      	bge.n	801611e <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 801610a:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 801610e:	45bb      	cmp	fp, r7
 8016110:	bf3c      	itt	cc
 8016112:	f10c 0708 	addcc.w	r7, ip, #8
 8016116:	6107      	strcc	r7, [r0, #16]
 8016118:	f10b 0701 	add.w	r7, fp, #1
 801611c:	6087      	str	r7, [r0, #8]
 801611e:	6907      	ldr	r7, [r0, #16]
 8016120:	45b6      	cmp	lr, r6
 8016122:	803e      	strh	r6, [r7, #0]
 8016124:	807a      	strh	r2, [r7, #2]
 8016126:	f8a7 a004 	strh.w	sl, [r7, #4]
 801612a:	f8a7 a006 	strh.w	sl, [r7, #6]
 801612e:	d1c6      	bne.n	80160be <_ZN8touchgfx7Outline10renderLineEiiii+0x17a>
 8016130:	9a04      	ldr	r2, [sp, #16]
 8016132:	1ad3      	subs	r3, r2, r3
 8016134:	6902      	ldr	r2, [r0, #16]
 8016136:	8891      	ldrh	r1, [r2, #4]
 8016138:	88d6      	ldrh	r6, [r2, #6]
 801613a:	4419      	add	r1, r3
 801613c:	8091      	strh	r1, [r2, #4]
 801613e:	9902      	ldr	r1, [sp, #8]
 8016140:	f101 0c20 	add.w	ip, r1, #32
 8016144:	9901      	ldr	r1, [sp, #4]
 8016146:	ebac 0c01 	sub.w	ip, ip, r1
 801614a:	fb03 630c 	mla	r3, r3, ip, r6
 801614e:	80d3      	strh	r3, [r2, #6]
 8016150:	e750      	b.n	8015ff4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8016152:	9d05      	ldr	r5, [sp, #20]
 8016154:	1aa2      	subs	r2, r4, r2
 8016156:	eba5 0501 	sub.w	r5, r5, r1
 801615a:	9202      	str	r2, [sp, #8]
 801615c:	9508      	str	r5, [sp, #32]
 801615e:	f140 8128 	bpl.w	80163b2 <_ZN8touchgfx7Outline10renderLineEiiii+0x46e>
 8016162:	9a03      	ldr	r2, [sp, #12]
 8016164:	2a00      	cmp	r2, #0
 8016166:	f6ff af45 	blt.w	8015ff4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 801616a:	9a02      	ldr	r2, [sp, #8]
 801616c:	f04f 34ff 	mov.w	r4, #4294967295
 8016170:	4252      	negs	r2, r2
 8016172:	940b      	str	r4, [sp, #44]	@ 0x2c
 8016174:	2400      	movs	r4, #0
 8016176:	9202      	str	r2, [sp, #8]
 8016178:	9a06      	ldr	r2, [sp, #24]
 801617a:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 801617e:	9206      	str	r2, [sp, #24]
 8016180:	462a      	mov	r2, r5
 8016182:	435a      	muls	r2, r3
 8016184:	9401      	str	r4, [sp, #4]
 8016186:	9c02      	ldr	r4, [sp, #8]
 8016188:	9d02      	ldr	r5, [sp, #8]
 801618a:	fb92 f4f4 	sdiv	r4, r2, r4
 801618e:	fb05 2214 	mls	r2, r5, r4, r2
 8016192:	2a00      	cmp	r2, #0
 8016194:	9207      	str	r2, [sp, #28]
 8016196:	bfbc      	itt	lt
 8016198:	1952      	addlt	r2, r2, r5
 801619a:	f104 34ff 	addlt.w	r4, r4, #4294967295
 801619e:	6905      	ldr	r5, [r0, #16]
 80161a0:	bfb8      	it	lt
 80161a2:	9207      	strlt	r2, [sp, #28]
 80161a4:	eb04 0901 	add.w	r9, r4, r1
 80161a8:	9a01      	ldr	r2, [sp, #4]
 80161aa:	ea4f 1669 	mov.w	r6, r9, asr #5
 80161ae:	429a      	cmp	r2, r3
 80161b0:	f040 8111 	bne.w	80163d6 <_ZN8touchgfx7Outline10renderLineEiiii+0x492>
 80161b4:	f9b5 3000 	ldrsh.w	r3, [r5]
 80161b8:	429e      	cmp	r6, r3
 80161ba:	d104      	bne.n	80161c6 <_ZN8touchgfx7Outline10renderLineEiiii+0x282>
 80161bc:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 80161c0:	9a03      	ldr	r2, [sp, #12]
 80161c2:	429a      	cmp	r2, r3
 80161c4:	d01b      	beq.n	80161fe <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 80161c6:	88ea      	ldrh	r2, [r5, #6]
 80161c8:	88ab      	ldrh	r3, [r5, #4]
 80161ca:	4313      	orrs	r3, r2
 80161cc:	d010      	beq.n	80161f0 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 80161ce:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 80161d2:	2a00      	cmp	r2, #0
 80161d4:	db0c      	blt.n	80161f0 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 80161d6:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80161d8:	429a      	cmp	r2, r3
 80161da:	da09      	bge.n	80161f0 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 80161dc:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 80161e0:	429a      	cmp	r2, r3
 80161e2:	f102 0201 	add.w	r2, r2, #1
 80161e6:	bf38      	it	cc
 80161e8:	3508      	addcc	r5, #8
 80161ea:	6082      	str	r2, [r0, #8]
 80161ec:	bf38      	it	cc
 80161ee:	6105      	strcc	r5, [r0, #16]
 80161f0:	6903      	ldr	r3, [r0, #16]
 80161f2:	9a03      	ldr	r2, [sp, #12]
 80161f4:	801e      	strh	r6, [r3, #0]
 80161f6:	805a      	strh	r2, [r3, #2]
 80161f8:	2200      	movs	r2, #0
 80161fa:	809a      	strh	r2, [r3, #4]
 80161fc:	80da      	strh	r2, [r3, #6]
 80161fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016200:	9a03      	ldr	r2, [sp, #12]
 8016202:	6901      	ldr	r1, [r0, #16]
 8016204:	441a      	add	r2, r3
 8016206:	f9b1 3000 	ldrsh.w	r3, [r1]
 801620a:	42b3      	cmp	r3, r6
 801620c:	d103      	bne.n	8016216 <_ZN8touchgfx7Outline10renderLineEiiii+0x2d2>
 801620e:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8016212:	429a      	cmp	r2, r3
 8016214:	d01a      	beq.n	801624c <_ZN8touchgfx7Outline10renderLineEiiii+0x308>
 8016216:	88cc      	ldrh	r4, [r1, #6]
 8016218:	888b      	ldrh	r3, [r1, #4]
 801621a:	4323      	orrs	r3, r4
 801621c:	d010      	beq.n	8016240 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 801621e:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8016222:	2c00      	cmp	r4, #0
 8016224:	db0c      	blt.n	8016240 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 8016226:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8016228:	429c      	cmp	r4, r3
 801622a:	da09      	bge.n	8016240 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 801622c:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8016230:	429c      	cmp	r4, r3
 8016232:	f104 0401 	add.w	r4, r4, #1
 8016236:	bf38      	it	cc
 8016238:	3108      	addcc	r1, #8
 801623a:	6084      	str	r4, [r0, #8]
 801623c:	bf38      	it	cc
 801623e:	6101      	strcc	r1, [r0, #16]
 8016240:	6903      	ldr	r3, [r0, #16]
 8016242:	2100      	movs	r1, #0
 8016244:	801e      	strh	r6, [r3, #0]
 8016246:	805a      	strh	r2, [r3, #2]
 8016248:	8099      	strh	r1, [r3, #4]
 801624a:	80d9      	strh	r1, [r3, #6]
 801624c:	9b06      	ldr	r3, [sp, #24]
 801624e:	4293      	cmp	r3, r2
 8016250:	f000 8082 	beq.w	8016358 <_ZN8touchgfx7Outline10renderLineEiiii+0x414>
 8016254:	9b08      	ldr	r3, [sp, #32]
 8016256:	9902      	ldr	r1, [sp, #8]
 8016258:	015b      	lsls	r3, r3, #5
 801625a:	9c02      	ldr	r4, [sp, #8]
 801625c:	fb93 f1f1 	sdiv	r1, r3, r1
 8016260:	fb04 3311 	mls	r3, r4, r1, r3
 8016264:	9103      	str	r1, [sp, #12]
 8016266:	2b00      	cmp	r3, #0
 8016268:	9308      	str	r3, [sp, #32]
 801626a:	da04      	bge.n	8016276 <_ZN8touchgfx7Outline10renderLineEiiii+0x332>
 801626c:	1e4b      	subs	r3, r1, #1
 801626e:	9303      	str	r3, [sp, #12]
 8016270:	9b08      	ldr	r3, [sp, #32]
 8016272:	4423      	add	r3, r4
 8016274:	9308      	str	r3, [sp, #32]
 8016276:	9b07      	ldr	r3, [sp, #28]
 8016278:	464f      	mov	r7, r9
 801627a:	9902      	ldr	r1, [sp, #8]
 801627c:	2600      	movs	r6, #0
 801627e:	1a5b      	subs	r3, r3, r1
 8016280:	9307      	str	r3, [sp, #28]
 8016282:	9b01      	ldr	r3, [sp, #4]
 8016284:	f1c3 0320 	rsb	r3, r3, #32
 8016288:	930e      	str	r3, [sp, #56]	@ 0x38
 801628a:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801628c:	9b01      	ldr	r3, [sp, #4]
 801628e:	1a5b      	subs	r3, r3, r1
 8016290:	930a      	str	r3, [sp, #40]	@ 0x28
 8016292:	e9dd 3107 	ldrd	r3, r1, [sp, #28]
 8016296:	185b      	adds	r3, r3, r1
 8016298:	bf58      	it	pl
 801629a:	9902      	ldrpl	r1, [sp, #8]
 801629c:	9307      	str	r3, [sp, #28]
 801629e:	bf57      	itett	pl
 80162a0:	1a5b      	subpl	r3, r3, r1
 80162a2:	9903      	ldrmi	r1, [sp, #12]
 80162a4:	9307      	strpl	r3, [sp, #28]
 80162a6:	9b03      	ldrpl	r3, [sp, #12]
 80162a8:	bf58      	it	pl
 80162aa:	1c59      	addpl	r1, r3, #1
 80162ac:	2a00      	cmp	r2, #0
 80162ae:	4489      	add	r9, r1
 80162b0:	ea4f 1a69 	mov.w	sl, r9, asr #5
 80162b4:	db2e      	blt.n	8016314 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 80162b6:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80162b8:	4293      	cmp	r3, r2
 80162ba:	dd2b      	ble.n	8016314 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 80162bc:	9c01      	ldr	r4, [sp, #4]
 80162be:	6905      	ldr	r5, [r0, #16]
 80162c0:	46a0      	mov	r8, r4
 80162c2:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80162c4:	f9b5 c004 	ldrsh.w	ip, [r5, #4]
 80162c8:	45a0      	cmp	r8, r4
 80162ca:	f9b5 e006 	ldrsh.w	lr, [r5, #6]
 80162ce:	f040 814c 	bne.w	801656a <_ZN8touchgfx7Outline10renderLineEiiii+0x626>
 80162d2:	f9b5 1000 	ldrsh.w	r1, [r5]
 80162d6:	4551      	cmp	r1, sl
 80162d8:	d103      	bne.n	80162e2 <_ZN8touchgfx7Outline10renderLineEiiii+0x39e>
 80162da:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 80162de:	4291      	cmp	r1, r2
 80162e0:	d018      	beq.n	8016314 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 80162e2:	ea5c 010e 	orrs.w	r1, ip, lr
 80162e6:	d00f      	beq.n	8016308 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 80162e8:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 80162ec:	2900      	cmp	r1, #0
 80162ee:	db0b      	blt.n	8016308 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 80162f0:	428b      	cmp	r3, r1
 80162f2:	dd09      	ble.n	8016308 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 80162f4:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
 80162f8:	4299      	cmp	r1, r3
 80162fa:	f101 0101 	add.w	r1, r1, #1
 80162fe:	bf38      	it	cc
 8016300:	3508      	addcc	r5, #8
 8016302:	6081      	str	r1, [r0, #8]
 8016304:	bf38      	it	cc
 8016306:	6105      	strcc	r5, [r0, #16]
 8016308:	6903      	ldr	r3, [r0, #16]
 801630a:	f8a3 a000 	strh.w	sl, [r3]
 801630e:	805a      	strh	r2, [r3, #2]
 8016310:	809e      	strh	r6, [r3, #4]
 8016312:	80de      	strh	r6, [r3, #6]
 8016314:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016316:	6901      	ldr	r1, [r0, #16]
 8016318:	441a      	add	r2, r3
 801631a:	88cc      	ldrh	r4, [r1, #6]
 801631c:	888b      	ldrh	r3, [r1, #4]
 801631e:	4323      	orrs	r3, r4
 8016320:	d010      	beq.n	8016344 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8016322:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8016326:	2c00      	cmp	r4, #0
 8016328:	db0c      	blt.n	8016344 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 801632a:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 801632c:	429c      	cmp	r4, r3
 801632e:	da09      	bge.n	8016344 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8016330:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8016334:	429c      	cmp	r4, r3
 8016336:	f104 0401 	add.w	r4, r4, #1
 801633a:	bf38      	it	cc
 801633c:	3108      	addcc	r1, #8
 801633e:	6084      	str	r4, [r0, #8]
 8016340:	bf38      	it	cc
 8016342:	6101      	strcc	r1, [r0, #16]
 8016344:	6903      	ldr	r3, [r0, #16]
 8016346:	464f      	mov	r7, r9
 8016348:	f8a3 a000 	strh.w	sl, [r3]
 801634c:	805a      	strh	r2, [r3, #2]
 801634e:	809e      	strh	r6, [r3, #4]
 8016350:	80de      	strh	r6, [r3, #6]
 8016352:	9b06      	ldr	r3, [sp, #24]
 8016354:	4293      	cmp	r3, r2
 8016356:	d19c      	bne.n	8016292 <_ZN8touchgfx7Outline10renderLineEiiii+0x34e>
 8016358:	9b01      	ldr	r3, [sp, #4]
 801635a:	6907      	ldr	r7, [r0, #16]
 801635c:	f1c3 0620 	rsb	r6, r3, #32
 8016360:	9b05      	ldr	r3, [sp, #20]
 8016362:	ea4f 1e63 	mov.w	lr, r3, asr #5
 8016366:	9b04      	ldr	r3, [sp, #16]
 8016368:	429e      	cmp	r6, r3
 801636a:	f040 81c7 	bne.w	80166fc <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
 801636e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8016372:	459e      	cmp	lr, r3
 8016374:	d104      	bne.n	8016380 <_ZN8touchgfx7Outline10renderLineEiiii+0x43c>
 8016376:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801637a:	429a      	cmp	r2, r3
 801637c:	f43f ae3a 	beq.w	8015ff4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8016380:	88f9      	ldrh	r1, [r7, #6]
 8016382:	88bb      	ldrh	r3, [r7, #4]
 8016384:	430b      	orrs	r3, r1
 8016386:	d010      	beq.n	80163aa <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8016388:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801638c:	2b00      	cmp	r3, #0
 801638e:	db0c      	blt.n	80163aa <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8016390:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8016392:	428b      	cmp	r3, r1
 8016394:	da09      	bge.n	80163aa <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8016396:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 801639a:	428b      	cmp	r3, r1
 801639c:	f103 0301 	add.w	r3, r3, #1
 80163a0:	bf38      	it	cc
 80163a2:	3708      	addcc	r7, #8
 80163a4:	6083      	str	r3, [r0, #8]
 80163a6:	bf38      	it	cc
 80163a8:	6107      	strcc	r7, [r0, #16]
 80163aa:	6903      	ldr	r3, [r0, #16]
 80163ac:	f8a3 e000 	strh.w	lr, [r3]
 80163b0:	e603      	b.n	8015fba <_ZN8touchgfx7Outline10renderLineEiiii+0x76>
 80163b2:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 80163b4:	9c03      	ldr	r4, [sp, #12]
 80163b6:	42a2      	cmp	r2, r4
 80163b8:	f6ff ae1c 	blt.w	8015ff4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 80163bc:	9c06      	ldr	r4, [sp, #24]
 80163be:	42a2      	cmp	r2, r4
 80163c0:	9c08      	ldr	r4, [sp, #32]
 80163c2:	bfbc      	itt	lt
 80163c4:	3201      	addlt	r2, #1
 80163c6:	9206      	strlt	r2, [sp, #24]
 80163c8:	f1c3 0220 	rsb	r2, r3, #32
 80163cc:	4362      	muls	r2, r4
 80163ce:	2401      	movs	r4, #1
 80163d0:	940b      	str	r4, [sp, #44]	@ 0x2c
 80163d2:	2420      	movs	r4, #32
 80163d4:	e6d6      	b.n	8016184 <_ZN8touchgfx7Outline10renderLineEiiii+0x240>
 80163d6:	ea4f 1861 	mov.w	r8, r1, asr #5
 80163da:	f009 021f 	and.w	r2, r9, #31
 80163de:	f001 011f 	and.w	r1, r1, #31
 80163e2:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 80163e6:	920c      	str	r2, [sp, #48]	@ 0x30
 80163e8:	45b0      	cmp	r8, r6
 80163ea:	9a01      	ldr	r2, [sp, #4]
 80163ec:	f8b5 a006 	ldrh.w	sl, [r5, #6]
 80163f0:	eba2 0203 	sub.w	r2, r2, r3
 80163f4:	d108      	bne.n	8016408 <_ZN8touchgfx7Outline10renderLineEiiii+0x4c4>
 80163f6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80163f8:	4496      	add	lr, r2
 80163fa:	4419      	add	r1, r3
 80163fc:	f8a5 e004 	strh.w	lr, [r5, #4]
 8016400:	fb02 a101 	mla	r1, r2, r1, sl
 8016404:	80e9      	strh	r1, [r5, #6]
 8016406:	e6fa      	b.n	80161fe <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 8016408:	2c00      	cmp	r4, #0
 801640a:	f2c0 80a7 	blt.w	801655c <_ZN8touchgfx7Outline10renderLineEiiii+0x618>
 801640e:	2701      	movs	r7, #1
 8016410:	f1c1 0c20 	rsb	ip, r1, #32
 8016414:	970a      	str	r7, [sp, #40]	@ 0x28
 8016416:	2720      	movs	r7, #32
 8016418:	fb02 f20c 	mul.w	r2, r2, ip
 801641c:	9709      	str	r7, [sp, #36]	@ 0x24
 801641e:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8016420:	fb92 fcf4 	sdiv	ip, r2, r4
 8016424:	fb04 221c 	mls	r2, r4, ip, r2
 8016428:	4439      	add	r1, r7
 801642a:	2a00      	cmp	r2, #0
 801642c:	bfbc      	itt	lt
 801642e:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 8016432:	1912      	addlt	r2, r2, r4
 8016434:	fb0c a101 	mla	r1, ip, r1, sl
 8016438:	44e6      	add	lr, ip
 801643a:	80e9      	strh	r1, [r5, #6]
 801643c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801643e:	f8a5 e004 	strh.w	lr, [r5, #4]
 8016442:	eb08 0501 	add.w	r5, r8, r1
 8016446:	6901      	ldr	r1, [r0, #16]
 8016448:	f8b1 8006 	ldrh.w	r8, [r1, #6]
 801644c:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 8016450:	ea58 070e 	orrs.w	r7, r8, lr
 8016454:	d010      	beq.n	8016478 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8016456:	f9b1 e002 	ldrsh.w	lr, [r1, #2]
 801645a:	f1be 0f00 	cmp.w	lr, #0
 801645e:	db0b      	blt.n	8016478 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8016460:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8016462:	45be      	cmp	lr, r7
 8016464:	da08      	bge.n	8016478 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8016466:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 801646a:	45be      	cmp	lr, r7
 801646c:	bf3c      	itt	cc
 801646e:	3108      	addcc	r1, #8
 8016470:	6101      	strcc	r1, [r0, #16]
 8016472:	f10e 0101 	add.w	r1, lr, #1
 8016476:	6081      	str	r1, [r0, #8]
 8016478:	6901      	ldr	r1, [r0, #16]
 801647a:	f04f 0e00 	mov.w	lr, #0
 801647e:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 8016482:	42ae      	cmp	r6, r5
 8016484:	800d      	strh	r5, [r1, #0]
 8016486:	4463      	add	r3, ip
 8016488:	f8a1 8002 	strh.w	r8, [r1, #2]
 801648c:	f8a1 e004 	strh.w	lr, [r1, #4]
 8016490:	f8a1 e006 	strh.w	lr, [r1, #6]
 8016494:	d053      	beq.n	801653e <_ZN8touchgfx7Outline10renderLineEiiii+0x5fa>
 8016496:	9901      	ldr	r1, [sp, #4]
 8016498:	1b12      	subs	r2, r2, r4
 801649a:	1ac9      	subs	r1, r1, r3
 801649c:	4461      	add	r1, ip
 801649e:	0149      	lsls	r1, r1, #5
 80164a0:	fb91 fef4 	sdiv	lr, r1, r4
 80164a4:	fb04 111e 	mls	r1, r4, lr, r1
 80164a8:	2900      	cmp	r1, #0
 80164aa:	bfbc      	itt	lt
 80164ac:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 80164b0:	1909      	addlt	r1, r1, r4
 80164b2:	f10e 0701 	add.w	r7, lr, #1
 80164b6:	970d      	str	r7, [sp, #52]	@ 0x34
 80164b8:	f8d0 a010 	ldr.w	sl, [r0, #16]
 80164bc:	1852      	adds	r2, r2, r1
 80164be:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 80164c0:	bf54      	ite	pl
 80164c2:	f8dd c034 	ldrpl.w	ip, [sp, #52]	@ 0x34
 80164c6:	46f4      	movmi	ip, lr
 80164c8:	f8ba b004 	ldrh.w	fp, [sl, #4]
 80164cc:	bf58      	it	pl
 80164ce:	1b12      	subpl	r2, r2, r4
 80164d0:	4463      	add	r3, ip
 80164d2:	443d      	add	r5, r7
 80164d4:	44e3      	add	fp, ip
 80164d6:	f8aa b004 	strh.w	fp, [sl, #4]
 80164da:	f8ba b006 	ldrh.w	fp, [sl, #6]
 80164de:	eb0b 1b4c 	add.w	fp, fp, ip, lsl #5
 80164e2:	f8aa b006 	strh.w	fp, [sl, #6]
 80164e6:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80164ea:	f8bc b006 	ldrh.w	fp, [ip, #6]
 80164ee:	f8bc a004 	ldrh.w	sl, [ip, #4]
 80164f2:	ea5b 070a 	orrs.w	r7, fp, sl
 80164f6:	d014      	beq.n	8016522 <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 80164f8:	f9bc a002 	ldrsh.w	sl, [ip, #2]
 80164fc:	f1ba 0f00 	cmp.w	sl, #0
 8016500:	db0f      	blt.n	8016522 <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 8016502:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8016504:	45ba      	cmp	sl, r7
 8016506:	da0c      	bge.n	8016522 <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 8016508:	e9d0 7a01 	ldrd	r7, sl, [r0, #4]
 801650c:	45ba      	cmp	sl, r7
 801650e:	f10a 0a01 	add.w	sl, sl, #1
 8016512:	bf38      	it	cc
 8016514:	f10c 0c08 	addcc.w	ip, ip, #8
 8016518:	f8c0 a008 	str.w	sl, [r0, #8]
 801651c:	bf38      	it	cc
 801651e:	f8c0 c010 	strcc.w	ip, [r0, #16]
 8016522:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8016526:	f04f 0700 	mov.w	r7, #0
 801652a:	42ae      	cmp	r6, r5
 801652c:	f8ac 5000 	strh.w	r5, [ip]
 8016530:	f8ac 8002 	strh.w	r8, [ip, #2]
 8016534:	f8ac 7004 	strh.w	r7, [ip, #4]
 8016538:	f8ac 7006 	strh.w	r7, [ip, #6]
 801653c:	d1bc      	bne.n	80164b8 <_ZN8touchgfx7Outline10renderLineEiiii+0x574>
 801653e:	6904      	ldr	r4, [r0, #16]
 8016540:	9a01      	ldr	r2, [sp, #4]
 8016542:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8016544:	1ad3      	subs	r3, r2, r3
 8016546:	88a2      	ldrh	r2, [r4, #4]
 8016548:	3120      	adds	r1, #32
 801654a:	441a      	add	r2, r3
 801654c:	80a2      	strh	r2, [r4, #4]
 801654e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016550:	1a89      	subs	r1, r1, r2
 8016552:	88e2      	ldrh	r2, [r4, #6]
 8016554:	fb03 2301 	mla	r3, r3, r1, r2
 8016558:	80e3      	strh	r3, [r4, #6]
 801655a:	e650      	b.n	80161fe <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 801655c:	f04f 37ff 	mov.w	r7, #4294967295
 8016560:	434a      	muls	r2, r1
 8016562:	4264      	negs	r4, r4
 8016564:	970a      	str	r7, [sp, #40]	@ 0x28
 8016566:	2700      	movs	r7, #0
 8016568:	e758      	b.n	801641c <_ZN8touchgfx7Outline10renderLineEiiii+0x4d8>
 801656a:	ea4f 1867 	mov.w	r8, r7, asr #5
 801656e:	f009 031f 	and.w	r3, r9, #31
 8016572:	f007 071f 	and.w	r7, r7, #31
 8016576:	fa1f fc8c 	uxth.w	ip, ip
 801657a:	45d0      	cmp	r8, sl
 801657c:	930f      	str	r3, [sp, #60]	@ 0x3c
 801657e:	fa1f fe8e 	uxth.w	lr, lr
 8016582:	d10a      	bne.n	801659a <_ZN8touchgfx7Outline10renderLineEiiii+0x656>
 8016584:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016586:	449c      	add	ip, r3
 8016588:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801658a:	441f      	add	r7, r3
 801658c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801658e:	f8a5 c004 	strh.w	ip, [r5, #4]
 8016592:	fb03 e707 	mla	r7, r3, r7, lr
 8016596:	80ef      	strh	r7, [r5, #6]
 8016598:	e6bc      	b.n	8016314 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 801659a:	2900      	cmp	r1, #0
 801659c:	f2c0 80a6 	blt.w	80166ec <_ZN8touchgfx7Outline10renderLineEiiii+0x7a8>
 80165a0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80165a2:	f1c7 0320 	rsb	r3, r7, #32
 80165a6:	4363      	muls	r3, r4
 80165a8:	2401      	movs	r4, #1
 80165aa:	940d      	str	r4, [sp, #52]	@ 0x34
 80165ac:	2420      	movs	r4, #32
 80165ae:	940c      	str	r4, [sp, #48]	@ 0x30
 80165b0:	fb93 f4f1 	sdiv	r4, r3, r1
 80165b4:	fb01 3b14 	mls	fp, r1, r4, r3
 80165b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80165ba:	f1bb 0f00 	cmp.w	fp, #0
 80165be:	441f      	add	r7, r3
 80165c0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80165c2:	bfbc      	itt	lt
 80165c4:	f104 34ff 	addlt.w	r4, r4, #4294967295
 80165c8:	448b      	addlt	fp, r1
 80165ca:	fb04 e707 	mla	r7, r4, r7, lr
 80165ce:	44a4      	add	ip, r4
 80165d0:	80ef      	strh	r7, [r5, #6]
 80165d2:	f8a5 c004 	strh.w	ip, [r5, #4]
 80165d6:	eb08 0503 	add.w	r5, r8, r3
 80165da:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80165de:	f8bc e006 	ldrh.w	lr, [ip, #6]
 80165e2:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 80165e6:	ea5e 0307 	orrs.w	r3, lr, r7
 80165ea:	d011      	beq.n	8016610 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 80165ec:	f9bc e002 	ldrsh.w	lr, [ip, #2]
 80165f0:	f1be 0f00 	cmp.w	lr, #0
 80165f4:	db0c      	blt.n	8016610 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 80165f6:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 80165f8:	45be      	cmp	lr, r7
 80165fa:	da09      	bge.n	8016610 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 80165fc:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 8016600:	45be      	cmp	lr, r7
 8016602:	bf3c      	itt	cc
 8016604:	f10c 0708 	addcc.w	r7, ip, #8
 8016608:	6107      	strcc	r7, [r0, #16]
 801660a:	f10e 0701 	add.w	r7, lr, #1
 801660e:	6087      	str	r7, [r0, #8]
 8016610:	6907      	ldr	r7, [r0, #16]
 8016612:	b213      	sxth	r3, r2
 8016614:	4555      	cmp	r5, sl
 8016616:	9310      	str	r3, [sp, #64]	@ 0x40
 8016618:	807b      	strh	r3, [r7, #2]
 801661a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801661c:	803d      	strh	r5, [r7, #0]
 801661e:	80be      	strh	r6, [r7, #4]
 8016620:	eb04 0c03 	add.w	ip, r4, r3
 8016624:	80fe      	strh	r6, [r7, #6]
 8016626:	d050      	beq.n	80166ca <_ZN8touchgfx7Outline10renderLineEiiii+0x786>
 8016628:	9b01      	ldr	r3, [sp, #4]
 801662a:	eba3 070c 	sub.w	r7, r3, ip
 801662e:	ebab 0301 	sub.w	r3, fp, r1
 8016632:	443c      	add	r4, r7
 8016634:	9309      	str	r3, [sp, #36]	@ 0x24
 8016636:	0164      	lsls	r4, r4, #5
 8016638:	fb94 f8f1 	sdiv	r8, r4, r1
 801663c:	fb01 4418 	mls	r4, r1, r8, r4
 8016640:	2c00      	cmp	r4, #0
 8016642:	bfbc      	itt	lt
 8016644:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8016648:	1864      	addlt	r4, r4, r1
 801664a:	f108 0701 	add.w	r7, r8, #1
 801664e:	9711      	str	r7, [sp, #68]	@ 0x44
 8016650:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016652:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8016656:	191b      	adds	r3, r3, r4
 8016658:	f8be b004 	ldrh.w	fp, [lr, #4]
 801665c:	bf54      	ite	pl
 801665e:	9f11      	ldrpl	r7, [sp, #68]	@ 0x44
 8016660:	4647      	movmi	r7, r8
 8016662:	9309      	str	r3, [sp, #36]	@ 0x24
 8016664:	bf58      	it	pl
 8016666:	1a5b      	subpl	r3, r3, r1
 8016668:	44bb      	add	fp, r7
 801666a:	44bc      	add	ip, r7
 801666c:	bf58      	it	pl
 801666e:	9309      	strpl	r3, [sp, #36]	@ 0x24
 8016670:	f8ae b004 	strh.w	fp, [lr, #4]
 8016674:	f8be b006 	ldrh.w	fp, [lr, #6]
 8016678:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 801667c:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 801667e:	f8ae b006 	strh.w	fp, [lr, #6]
 8016682:	443d      	add	r5, r7
 8016684:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8016688:	f8be b006 	ldrh.w	fp, [lr, #6]
 801668c:	f8be 7004 	ldrh.w	r7, [lr, #4]
 8016690:	ea5b 0307 	orrs.w	r3, fp, r7
 8016694:	d011      	beq.n	80166ba <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8016696:	f9be b002 	ldrsh.w	fp, [lr, #2]
 801669a:	f1bb 0f00 	cmp.w	fp, #0
 801669e:	db0c      	blt.n	80166ba <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 80166a0:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 80166a2:	45bb      	cmp	fp, r7
 80166a4:	da09      	bge.n	80166ba <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 80166a6:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 80166aa:	45bb      	cmp	fp, r7
 80166ac:	bf3c      	itt	cc
 80166ae:	f10e 0708 	addcc.w	r7, lr, #8
 80166b2:	6107      	strcc	r7, [r0, #16]
 80166b4:	f10b 0701 	add.w	r7, fp, #1
 80166b8:	6087      	str	r7, [r0, #8]
 80166ba:	6907      	ldr	r7, [r0, #16]
 80166bc:	4555      	cmp	r5, sl
 80166be:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80166c0:	803d      	strh	r5, [r7, #0]
 80166c2:	807b      	strh	r3, [r7, #2]
 80166c4:	80be      	strh	r6, [r7, #4]
 80166c6:	80fe      	strh	r6, [r7, #6]
 80166c8:	d1c2      	bne.n	8016650 <_ZN8touchgfx7Outline10renderLineEiiii+0x70c>
 80166ca:	9b01      	ldr	r3, [sp, #4]
 80166cc:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 80166ce:	eba3 0c0c 	sub.w	ip, r3, ip
 80166d2:	6903      	ldr	r3, [r0, #16]
 80166d4:	3720      	adds	r7, #32
 80166d6:	8899      	ldrh	r1, [r3, #4]
 80166d8:	4461      	add	r1, ip
 80166da:	8099      	strh	r1, [r3, #4]
 80166dc:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80166de:	1a7f      	subs	r7, r7, r1
 80166e0:	88d9      	ldrh	r1, [r3, #6]
 80166e2:	fb0c 1c07 	mla	ip, ip, r7, r1
 80166e6:	f8a3 c006 	strh.w	ip, [r3, #6]
 80166ea:	e613      	b.n	8016314 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 80166ec:	f04f 34ff 	mov.w	r4, #4294967295
 80166f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80166f2:	4249      	negs	r1, r1
 80166f4:	940d      	str	r4, [sp, #52]	@ 0x34
 80166f6:	2400      	movs	r4, #0
 80166f8:	437b      	muls	r3, r7
 80166fa:	e758      	b.n	80165ae <_ZN8touchgfx7Outline10renderLineEiiii+0x66a>
 80166fc:	9905      	ldr	r1, [sp, #20]
 80166fe:	ea4f 1b69 	mov.w	fp, r9, asr #5
 8016702:	f009 0c1f 	and.w	ip, r9, #31
 8016706:	f8b7 8004 	ldrh.w	r8, [r7, #4]
 801670a:	f001 011f 	and.w	r1, r1, #31
 801670e:	45f3      	cmp	fp, lr
 8016710:	f8b7 a006 	ldrh.w	sl, [r7, #6]
 8016714:	9102      	str	r1, [sp, #8]
 8016716:	9904      	ldr	r1, [sp, #16]
 8016718:	eba1 0406 	sub.w	r4, r1, r6
 801671c:	d108      	bne.n	8016730 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ec>
 801671e:	9b02      	ldr	r3, [sp, #8]
 8016720:	44a0      	add	r8, r4
 8016722:	449c      	add	ip, r3
 8016724:	f8a7 8004 	strh.w	r8, [r7, #4]
 8016728:	fb04 a40c 	mla	r4, r4, ip, sl
 801672c:	80fc      	strh	r4, [r7, #6]
 801672e:	e461      	b.n	8015ff4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8016730:	9905      	ldr	r1, [sp, #20]
 8016732:	ebb1 0109 	subs.w	r1, r1, r9
 8016736:	bf51      	iteee	pl
 8016738:	f1cc 0520 	rsbpl	r5, ip, #32
 801673c:	fb04 f40c 	mulmi.w	r4, r4, ip
 8016740:	4249      	negmi	r1, r1
 8016742:	2500      	movmi	r5, #0
 8016744:	bf5d      	ittte	pl
 8016746:	436c      	mulpl	r4, r5
 8016748:	2520      	movpl	r5, #32
 801674a:	f04f 0901 	movpl.w	r9, #1
 801674e:	f04f 39ff 	movmi.w	r9, #4294967295
 8016752:	9501      	str	r5, [sp, #4]
 8016754:	9b01      	ldr	r3, [sp, #4]
 8016756:	fb94 f5f1 	sdiv	r5, r4, r1
 801675a:	fb01 4415 	mls	r4, r1, r5, r4
 801675e:	449c      	add	ip, r3
 8016760:	eb0b 0309 	add.w	r3, fp, r9
 8016764:	2c00      	cmp	r4, #0
 8016766:	bfbc      	itt	lt
 8016768:	f105 35ff 	addlt.w	r5, r5, #4294967295
 801676c:	1864      	addlt	r4, r4, r1
 801676e:	44a8      	add	r8, r5
 8016770:	fb05 ac0c 	mla	ip, r5, ip, sl
 8016774:	f8a7 8004 	strh.w	r8, [r7, #4]
 8016778:	f8a7 c006 	strh.w	ip, [r7, #6]
 801677c:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8016780:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 8016784:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8016788:	ea58 0707 	orrs.w	r7, r8, r7
 801678c:	d011      	beq.n	80167b2 <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 801678e:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 8016792:	f1b8 0f00 	cmp.w	r8, #0
 8016796:	db0c      	blt.n	80167b2 <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 8016798:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 801679a:	45b8      	cmp	r8, r7
 801679c:	da09      	bge.n	80167b2 <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 801679e:	e9d0 7801 	ldrd	r7, r8, [r0, #4]
 80167a2:	45b8      	cmp	r8, r7
 80167a4:	bf3c      	itt	cc
 80167a6:	f10c 0708 	addcc.w	r7, ip, #8
 80167aa:	6107      	strcc	r7, [r0, #16]
 80167ac:	f108 0701 	add.w	r7, r8, #1
 80167b0:	6087      	str	r7, [r0, #8]
 80167b2:	6907      	ldr	r7, [r0, #16]
 80167b4:	f04f 0c00 	mov.w	ip, #0
 80167b8:	b212      	sxth	r2, r2
 80167ba:	459e      	cmp	lr, r3
 80167bc:	803b      	strh	r3, [r7, #0]
 80167be:	442e      	add	r6, r5
 80167c0:	807a      	strh	r2, [r7, #2]
 80167c2:	f8a7 c004 	strh.w	ip, [r7, #4]
 80167c6:	f8a7 c006 	strh.w	ip, [r7, #6]
 80167ca:	d04b      	beq.n	8016864 <_ZN8touchgfx7Outline10renderLineEiiii+0x920>
 80167cc:	9f04      	ldr	r7, [sp, #16]
 80167ce:	1a64      	subs	r4, r4, r1
 80167d0:	f04f 0a00 	mov.w	sl, #0
 80167d4:	1bbf      	subs	r7, r7, r6
 80167d6:	443d      	add	r5, r7
 80167d8:	016d      	lsls	r5, r5, #5
 80167da:	fb95 f8f1 	sdiv	r8, r5, r1
 80167de:	fb01 5518 	mls	r5, r1, r8, r5
 80167e2:	4565      	cmp	r5, ip
 80167e4:	bfbc      	itt	lt
 80167e6:	f108 38ff 	addlt.w	r8, r8, #4294967295
 80167ea:	186d      	addlt	r5, r5, r1
 80167ec:	f108 0701 	add.w	r7, r8, #1
 80167f0:	9703      	str	r7, [sp, #12]
 80167f2:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80167f6:	1964      	adds	r4, r4, r5
 80167f8:	444b      	add	r3, r9
 80167fa:	bf54      	ite	pl
 80167fc:	9f03      	ldrpl	r7, [sp, #12]
 80167fe:	4647      	movmi	r7, r8
 8016800:	f8bc b004 	ldrh.w	fp, [ip, #4]
 8016804:	bf58      	it	pl
 8016806:	1a64      	subpl	r4, r4, r1
 8016808:	443e      	add	r6, r7
 801680a:	44bb      	add	fp, r7
 801680c:	f8ac b004 	strh.w	fp, [ip, #4]
 8016810:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8016814:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8016818:	f8ac b006 	strh.w	fp, [ip, #6]
 801681c:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8016820:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8016824:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8016828:	ea5b 0707 	orrs.w	r7, fp, r7
 801682c:	d011      	beq.n	8016852 <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 801682e:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 8016832:	f1bb 0f00 	cmp.w	fp, #0
 8016836:	db0c      	blt.n	8016852 <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 8016838:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 801683a:	45bb      	cmp	fp, r7
 801683c:	da09      	bge.n	8016852 <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 801683e:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8016842:	45bb      	cmp	fp, r7
 8016844:	bf3c      	itt	cc
 8016846:	f10c 0708 	addcc.w	r7, ip, #8
 801684a:	6107      	strcc	r7, [r0, #16]
 801684c:	f10b 0701 	add.w	r7, fp, #1
 8016850:	6087      	str	r7, [r0, #8]
 8016852:	6907      	ldr	r7, [r0, #16]
 8016854:	459e      	cmp	lr, r3
 8016856:	803b      	strh	r3, [r7, #0]
 8016858:	807a      	strh	r2, [r7, #2]
 801685a:	f8a7 a004 	strh.w	sl, [r7, #4]
 801685e:	f8a7 a006 	strh.w	sl, [r7, #6]
 8016862:	d1c6      	bne.n	80167f2 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ae>
 8016864:	9b04      	ldr	r3, [sp, #16]
 8016866:	1b9e      	subs	r6, r3, r6
 8016868:	6903      	ldr	r3, [r0, #16]
 801686a:	889a      	ldrh	r2, [r3, #4]
 801686c:	4432      	add	r2, r6
 801686e:	809a      	strh	r2, [r3, #4]
 8016870:	9a02      	ldr	r2, [sp, #8]
 8016872:	f102 0c20 	add.w	ip, r2, #32
 8016876:	9a01      	ldr	r2, [sp, #4]
 8016878:	ebac 0c02 	sub.w	ip, ip, r2
 801687c:	88da      	ldrh	r2, [r3, #6]
 801687e:	fb06 260c 	mla	r6, r6, ip, r2
 8016882:	80de      	strh	r6, [r3, #6]
 8016884:	f7ff bbb6 	b.w	8015ff4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>

08016888 <_ZN8touchgfx7Outline6lineToEii>:
 8016888:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801688a:	079b      	lsls	r3, r3, #30
 801688c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801688e:	460e      	mov	r6, r1
 8016890:	4615      	mov	r5, r2
 8016892:	d511      	bpl.n	80168b8 <_ZN8touchgfx7Outline6lineToEii+0x30>
 8016894:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
 8016898:	ea86 0701 	eor.w	r7, r6, r1
 801689c:	ea85 0302 	eor.w	r3, r5, r2
 80168a0:	433b      	orrs	r3, r7
 80168a2:	d009      	beq.n	80168b8 <_ZN8touchgfx7Outline6lineToEii+0x30>
 80168a4:	4633      	mov	r3, r6
 80168a6:	9500      	str	r5, [sp, #0]
 80168a8:	f7ff fb4c 	bl	8015f44 <_ZN8touchgfx7Outline10renderLineEiiii>
 80168ac:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80168ae:	f043 0301 	orr.w	r3, r3, #1
 80168b2:	e9c0 6505 	strd	r6, r5, [r0, #20]
 80168b6:	6243      	str	r3, [r0, #36]	@ 0x24
 80168b8:	b003      	add	sp, #12
 80168ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080168bc <_ZN8touchgfx7Outline6moveToEii>:
 80168bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80168be:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80168c0:	4615      	mov	r5, r2
 80168c2:	4604      	mov	r4, r0
 80168c4:	460e      	mov	r6, r1
 80168c6:	079a      	lsls	r2, r3, #30
 80168c8:	d401      	bmi.n	80168ce <_ZN8touchgfx7Outline6moveToEii+0x12>
 80168ca:	f7ff fb07 	bl	8015edc <_ZN8touchgfx7Outline5resetEv>
 80168ce:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80168d0:	07db      	lsls	r3, r3, #31
 80168d2:	d504      	bpl.n	80168de <_ZN8touchgfx7Outline6moveToEii+0x22>
 80168d4:	4620      	mov	r0, r4
 80168d6:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
 80168da:	f7ff ffd5 	bl	8016888 <_ZN8touchgfx7Outline6lineToEii>
 80168de:	6923      	ldr	r3, [r4, #16]
 80168e0:	1170      	asrs	r0, r6, #5
 80168e2:	1169      	asrs	r1, r5, #5
 80168e4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80168e8:	4290      	cmp	r0, r2
 80168ea:	d103      	bne.n	80168f4 <_ZN8touchgfx7Outline6moveToEii+0x38>
 80168ec:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80168f0:	4291      	cmp	r1, r2
 80168f2:	d01a      	beq.n	801692a <_ZN8touchgfx7Outline6moveToEii+0x6e>
 80168f4:	88df      	ldrh	r7, [r3, #6]
 80168f6:	889a      	ldrh	r2, [r3, #4]
 80168f8:	433a      	orrs	r2, r7
 80168fa:	d010      	beq.n	801691e <_ZN8touchgfx7Outline6moveToEii+0x62>
 80168fc:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8016900:	2a00      	cmp	r2, #0
 8016902:	db0c      	blt.n	801691e <_ZN8touchgfx7Outline6moveToEii+0x62>
 8016904:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8016906:	42ba      	cmp	r2, r7
 8016908:	da09      	bge.n	801691e <_ZN8touchgfx7Outline6moveToEii+0x62>
 801690a:	e9d4 7201 	ldrd	r7, r2, [r4, #4]
 801690e:	42ba      	cmp	r2, r7
 8016910:	f102 0201 	add.w	r2, r2, #1
 8016914:	bf38      	it	cc
 8016916:	3308      	addcc	r3, #8
 8016918:	60a2      	str	r2, [r4, #8]
 801691a:	bf38      	it	cc
 801691c:	6123      	strcc	r3, [r4, #16]
 801691e:	6923      	ldr	r3, [r4, #16]
 8016920:	2200      	movs	r2, #0
 8016922:	8018      	strh	r0, [r3, #0]
 8016924:	8059      	strh	r1, [r3, #2]
 8016926:	809a      	strh	r2, [r3, #4]
 8016928:	80da      	strh	r2, [r3, #6]
 801692a:	6166      	str	r6, [r4, #20]
 801692c:	6225      	str	r5, [r4, #32]
 801692e:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8016932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016934 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 8016934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016938:	b0d0      	sub	sp, #320	@ 0x140
 801693a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801693e:	466c      	mov	r4, sp
 8016940:	4627      	mov	r7, r4
 8016942:	1a0d      	subs	r5, r1, r0
 8016944:	f100 0308 	add.w	r3, r0, #8
 8016948:	2d48      	cmp	r5, #72	@ 0x48
 801694a:	f340 80d5 	ble.w	8016af8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 801694e:	112d      	asrs	r5, r5, #4
 8016950:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8016954:	f9b0 9000 	ldrsh.w	r9, [r0]
 8016958:	eb00 02c5 	add.w	r2, r0, r5, lsl #3
 801695c:	f9b0 8002 	ldrsh.w	r8, [r0, #2]
 8016960:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8016964:	6816      	ldr	r6, [r2, #0]
 8016966:	6006      	str	r6, [r0, #0]
 8016968:	6856      	ldr	r6, [r2, #4]
 801696a:	6046      	str	r6, [r0, #4]
 801696c:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8016970:	f8a2 8002 	strh.w	r8, [r2, #2]
 8016974:	f8a2 e004 	strh.w	lr, [r2, #4]
 8016978:	f8a2 c006 	strh.w	ip, [r2, #6]
 801697c:	f1a1 0208 	sub.w	r2, r1, #8
 8016980:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 8016984:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 8016988:	4565      	cmp	r5, ip
 801698a:	db06      	blt.n	801699a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x66>
 801698c:	d119      	bne.n	80169c2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 801698e:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 8016992:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 8016996:	42ae      	cmp	r6, r5
 8016998:	dd13      	ble.n	80169c2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 801699a:	460e      	mov	r6, r1
 801699c:	f9b0 9008 	ldrsh.w	r9, [r0, #8]
 80169a0:	f9b0 800c 	ldrsh.w	r8, [r0, #12]
 80169a4:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 80169a8:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 80169ac:	601d      	str	r5, [r3, #0]
 80169ae:	6875      	ldr	r5, [r6, #4]
 80169b0:	605d      	str	r5, [r3, #4]
 80169b2:	f821 9c08 	strh.w	r9, [r1, #-8]
 80169b6:	f821 cc06 	strh.w	ip, [r1, #-6]
 80169ba:	f821 8c04 	strh.w	r8, [r1, #-4]
 80169be:	f821 ec02 	strh.w	lr, [r1, #-2]
 80169c2:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80169c6:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
 80169ca:	42ae      	cmp	r6, r5
 80169cc:	db06      	blt.n	80169dc <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xa8>
 80169ce:	d116      	bne.n	80169fe <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 80169d0:	f9b0 c000 	ldrsh.w	ip, [r0]
 80169d4:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 80169d8:	45ac      	cmp	ip, r5
 80169da:	da10      	bge.n	80169fe <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 80169dc:	681d      	ldr	r5, [r3, #0]
 80169de:	f9b0 8000 	ldrsh.w	r8, [r0]
 80169e2:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 80169e6:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 80169ea:	6005      	str	r5, [r0, #0]
 80169ec:	685d      	ldr	r5, [r3, #4]
 80169ee:	f8a0 8008 	strh.w	r8, [r0, #8]
 80169f2:	6045      	str	r5, [r0, #4]
 80169f4:	8146      	strh	r6, [r0, #10]
 80169f6:	f8a0 e00c 	strh.w	lr, [r0, #12]
 80169fa:	f8a0 c00e 	strh.w	ip, [r0, #14]
 80169fe:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 8016a02:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8016a06:	4565      	cmp	r5, ip
 8016a08:	db06      	blt.n	8016a18 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe4>
 8016a0a:	d119      	bne.n	8016a40 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8016a0c:	f931 6c08 	ldrsh.w	r6, [r1, #-8]
 8016a10:	f9b0 5000 	ldrsh.w	r5, [r0]
 8016a14:	42ae      	cmp	r6, r5
 8016a16:	da13      	bge.n	8016a40 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8016a18:	460e      	mov	r6, r1
 8016a1a:	f9b0 9000 	ldrsh.w	r9, [r0]
 8016a1e:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 8016a22:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 8016a26:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
 8016a2a:	6005      	str	r5, [r0, #0]
 8016a2c:	6875      	ldr	r5, [r6, #4]
 8016a2e:	6045      	str	r5, [r0, #4]
 8016a30:	f821 9c08 	strh.w	r9, [r1, #-8]
 8016a34:	f821 cc06 	strh.w	ip, [r1, #-6]
 8016a38:	f821 8c04 	strh.w	r8, [r1, #-4]
 8016a3c:	f821 ec02 	strh.w	lr, [r1, #-2]
 8016a40:	3308      	adds	r3, #8
 8016a42:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8016a46:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 8016a4a:	45e6      	cmp	lr, ip
 8016a4c:	dbf8      	blt.n	8016a40 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8016a4e:	d105      	bne.n	8016a5c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8016a50:	f9b3 6000 	ldrsh.w	r6, [r3]
 8016a54:	f9b0 5000 	ldrsh.w	r5, [r0]
 8016a58:	42ae      	cmp	r6, r5
 8016a5a:	dbf1      	blt.n	8016a40 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8016a5c:	4615      	mov	r5, r2
 8016a5e:	3a08      	subs	r2, #8
 8016a60:	f9b2 6002 	ldrsh.w	r6, [r2, #2]
 8016a64:	45b4      	cmp	ip, r6
 8016a66:	dbf9      	blt.n	8016a5c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8016a68:	d105      	bne.n	8016a76 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x142>
 8016a6a:	f9b0 8000 	ldrsh.w	r8, [r0]
 8016a6e:	f9b2 6000 	ldrsh.w	r6, [r2]
 8016a72:	45b0      	cmp	r8, r6
 8016a74:	dbf2      	blt.n	8016a5c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8016a76:	4293      	cmp	r3, r2
 8016a78:	f1a5 0608 	sub.w	r6, r5, #8
 8016a7c:	d816      	bhi.n	8016aac <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x178>
 8016a7e:	f8d6 c000 	ldr.w	ip, [r6]
 8016a82:	f9b3 a000 	ldrsh.w	sl, [r3]
 8016a86:	f9b3 9004 	ldrsh.w	r9, [r3, #4]
 8016a8a:	f9b3 8006 	ldrsh.w	r8, [r3, #6]
 8016a8e:	f8c3 c000 	str.w	ip, [r3]
 8016a92:	f8d6 c004 	ldr.w	ip, [r6, #4]
 8016a96:	f8c3 c004 	str.w	ip, [r3, #4]
 8016a9a:	f825 ac08 	strh.w	sl, [r5, #-8]
 8016a9e:	f825 ec06 	strh.w	lr, [r5, #-6]
 8016aa2:	f825 9c04 	strh.w	r9, [r5, #-4]
 8016aa6:	f825 8c02 	strh.w	r8, [r5, #-2]
 8016aaa:	e7c9      	b.n	8016a40 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8016aac:	f8d6 e000 	ldr.w	lr, [r6]
 8016ab0:	f9b0 a000 	ldrsh.w	sl, [r0]
 8016ab4:	f9b0 9004 	ldrsh.w	r9, [r0, #4]
 8016ab8:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
 8016abc:	f8c0 e000 	str.w	lr, [r0]
 8016ac0:	f8d6 e004 	ldr.w	lr, [r6, #4]
 8016ac4:	1a16      	subs	r6, r2, r0
 8016ac6:	f8c0 e004 	str.w	lr, [r0, #4]
 8016aca:	f825 ac08 	strh.w	sl, [r5, #-8]
 8016ace:	f825 cc06 	strh.w	ip, [r5, #-6]
 8016ad2:	f825 9c04 	strh.w	r9, [r5, #-4]
 8016ad6:	f825 8c02 	strh.w	r8, [r5, #-2]
 8016ada:	1acd      	subs	r5, r1, r3
 8016adc:	10ed      	asrs	r5, r5, #3
 8016ade:	ebb5 0fe6 	cmp.w	r5, r6, asr #3
 8016ae2:	bfb5      	itete	lt
 8016ae4:	e9c4 0200 	strdlt	r0, r2, [r4]
 8016ae8:	e9c4 3100 	strdge	r3, r1, [r4]
 8016aec:	460a      	movlt	r2, r1
 8016aee:	4603      	movge	r3, r0
 8016af0:	3408      	adds	r4, #8
 8016af2:	4618      	mov	r0, r3
 8016af4:	4611      	mov	r1, r2
 8016af6:	e724      	b.n	8016942 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 8016af8:	4299      	cmp	r1, r3
 8016afa:	d927      	bls.n	8016b4c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x218>
 8016afc:	f1a3 0210 	sub.w	r2, r3, #16
 8016b00:	f9b2 c012 	ldrsh.w	ip, [r2, #18]
 8016b04:	f9b2 500a 	ldrsh.w	r5, [r2, #10]
 8016b08:	45ac      	cmp	ip, r5
 8016b0a:	db06      	blt.n	8016b1a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1e6>
 8016b0c:	d11c      	bne.n	8016b48 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 8016b0e:	f9b2 6010 	ldrsh.w	r6, [r2, #16]
 8016b12:	f9b2 5008 	ldrsh.w	r5, [r2, #8]
 8016b16:	42ae      	cmp	r6, r5
 8016b18:	da16      	bge.n	8016b48 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 8016b1a:	4615      	mov	r5, r2
 8016b1c:	f9b2 9010 	ldrsh.w	r9, [r2, #16]
 8016b20:	f9b2 8014 	ldrsh.w	r8, [r2, #20]
 8016b24:	3a08      	subs	r2, #8
 8016b26:	f855 6f08 	ldr.w	r6, [r5, #8]!
 8016b2a:	f9b2 e01e 	ldrsh.w	lr, [r2, #30]
 8016b2e:	6196      	str	r6, [r2, #24]
 8016b30:	42a8      	cmp	r0, r5
 8016b32:	686e      	ldr	r6, [r5, #4]
 8016b34:	f8a2 9010 	strh.w	r9, [r2, #16]
 8016b38:	61d6      	str	r6, [r2, #28]
 8016b3a:	f8a2 c012 	strh.w	ip, [r2, #18]
 8016b3e:	f8a2 8014 	strh.w	r8, [r2, #20]
 8016b42:	f8a2 e016 	strh.w	lr, [r2, #22]
 8016b46:	d1db      	bne.n	8016b00 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1cc>
 8016b48:	3308      	adds	r3, #8
 8016b4a:	e7d5      	b.n	8016af8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 8016b4c:	42bc      	cmp	r4, r7
 8016b4e:	d903      	bls.n	8016b58 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x224>
 8016b50:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 8016b54:	3c08      	subs	r4, #8
 8016b56:	e6f4      	b.n	8016942 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 8016b58:	b050      	add	sp, #320	@ 0x140
 8016b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08016b5e <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>:
 8016b5e:	b510      	push	{r4, lr}
 8016b60:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8016b62:	4604      	mov	r4, r0
 8016b64:	07da      	lsls	r2, r3, #31
 8016b66:	d507      	bpl.n	8016b78 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x1a>
 8016b68:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 8016b6c:	f7ff fe8c 	bl	8016888 <_ZN8touchgfx7Outline6lineToEii>
 8016b70:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8016b72:	f023 0301 	bic.w	r3, r3, #1
 8016b76:	6243      	str	r3, [r0, #36]	@ 0x24
 8016b78:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8016b7a:	079b      	lsls	r3, r3, #30
 8016b7c:	d521      	bpl.n	8016bc2 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x64>
 8016b7e:	6923      	ldr	r3, [r4, #16]
 8016b80:	88d9      	ldrh	r1, [r3, #6]
 8016b82:	889a      	ldrh	r2, [r3, #4]
 8016b84:	430a      	orrs	r2, r1
 8016b86:	d010      	beq.n	8016baa <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8016b88:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8016b8c:	2a00      	cmp	r2, #0
 8016b8e:	db0c      	blt.n	8016baa <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8016b90:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8016b92:	428a      	cmp	r2, r1
 8016b94:	da09      	bge.n	8016baa <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8016b96:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 8016b9a:	4291      	cmp	r1, r2
 8016b9c:	f102 0201 	add.w	r2, r2, #1
 8016ba0:	bf88      	it	hi
 8016ba2:	3308      	addhi	r3, #8
 8016ba4:	60a2      	str	r2, [r4, #8]
 8016ba6:	bf88      	it	hi
 8016ba8:	6123      	strhi	r3, [r4, #16]
 8016baa:	68a1      	ldr	r1, [r4, #8]
 8016bac:	b129      	cbz	r1, 8016bba <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 8016bae:	6863      	ldr	r3, [r4, #4]
 8016bb0:	4299      	cmp	r1, r3
 8016bb2:	d802      	bhi.n	8016bba <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 8016bb4:	68e0      	ldr	r0, [r4, #12]
 8016bb6:	f7ff febd 	bl	8016934 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 8016bba:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8016bbc:	f023 0302 	bic.w	r3, r3, #2
 8016bc0:	6263      	str	r3, [r4, #36]	@ 0x24
 8016bc2:	68e0      	ldr	r0, [r4, #12]
 8016bc4:	bd10      	pop	{r4, pc}
	...

08016bc8 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 8016bc8:	4b02      	ldr	r3, [pc, #8]	@ (8016bd4 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 8016bca:	6018      	str	r0, [r3, #0]
 8016bcc:	4b02      	ldr	r3, [pc, #8]	@ (8016bd8 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 8016bce:	6019      	str	r1, [r3, #0]
 8016bd0:	4770      	bx	lr
 8016bd2:	bf00      	nop
 8016bd4:	20029ee0 	.word	0x20029ee0
 8016bd8:	20029ee4 	.word	0x20029ee4

08016bdc <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv>:
 8016bdc:	2300      	movs	r3, #0
 8016bde:	4a02      	ldr	r2, [pc, #8]	@ (8016be8 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv+0xc>)
 8016be0:	6013      	str	r3, [r2, #0]
 8016be2:	4a02      	ldr	r2, [pc, #8]	@ (8016bec <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv+0x10>)
 8016be4:	6013      	str	r3, [r2, #0]
 8016be6:	4770      	bx	lr
 8016be8:	20029ee0 	.word	0x20029ee0
 8016bec:	20029ee4 	.word	0x20029ee4

08016bf0 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 8016bf0:	4b01      	ldr	r3, [pc, #4]	@ (8016bf8 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 8016bf2:	6818      	ldr	r0, [r3, #0]
 8016bf4:	4770      	bx	lr
 8016bf6:	bf00      	nop
 8016bf8:	20029ee0 	.word	0x20029ee0

08016bfc <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 8016bfc:	4b01      	ldr	r3, [pc, #4]	@ (8016c04 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 8016bfe:	6818      	ldr	r0, [r3, #0]
 8016c00:	4770      	bx	lr
 8016c02:	bf00      	nop
 8016c04:	20029ee4 	.word	0x20029ee4

08016c08 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 8016c08:	b510      	push	{r4, lr}
 8016c0a:	6803      	ldr	r3, [r0, #0]
 8016c0c:	460c      	mov	r4, r1
 8016c0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016c10:	4798      	blx	r3
 8016c12:	1b03      	subs	r3, r0, r4
 8016c14:	4258      	negs	r0, r3
 8016c16:	4158      	adcs	r0, r3
 8016c18:	bd10      	pop	{r4, pc}
	...

08016c1c <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8016c1c:	4b01      	ldr	r3, [pc, #4]	@ (8016c24 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 8016c1e:	6019      	str	r1, [r3, #0]
 8016c20:	4770      	bx	lr
 8016c22:	bf00      	nop
 8016c24:	20029ee8 	.word	0x20029ee8

08016c28 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8016c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c2c:	4696      	mov	lr, r2
 8016c2e:	b097      	sub	sp, #92	@ 0x5c
 8016c30:	4605      	mov	r5, r0
 8016c32:	4614      	mov	r4, r2
 8016c34:	460e      	mov	r6, r1
 8016c36:	461f      	mov	r7, r3
 8016c38:	f10d 0c1c 	add.w	ip, sp, #28
 8016c3c:	f8bd 8088 	ldrh.w	r8, [sp, #136]	@ 0x88
 8016c40:	f89d 908c 	ldrb.w	r9, [sp, #140]	@ 0x8c
 8016c44:	f8bd a090 	ldrh.w	sl, [sp, #144]	@ 0x90
 8016c48:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016c4c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016c50:	f8de 3000 	ldr.w	r3, [lr]
 8016c54:	f104 0e14 	add.w	lr, r4, #20
 8016c58:	f8cc 3000 	str.w	r3, [ip]
 8016c5c:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8016c60:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016c64:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016c68:	f8de 3000 	ldr.w	r3, [lr]
 8016c6c:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 8016c70:	f8cc 3000 	str.w	r3, [ip]
 8016c74:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8016c78:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016c7c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016c80:	f8de 3000 	ldr.w	r3, [lr]
 8016c84:	4631      	mov	r1, r6
 8016c86:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8016c88:	4628      	mov	r0, r5
 8016c8a:	f8cc 3000 	str.w	r3, [ip]
 8016c8e:	682b      	ldr	r3, [r5, #0]
 8016c90:	9201      	str	r2, [sp, #4]
 8016c92:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8016c94:	f8cd 8008 	str.w	r8, [sp, #8]
 8016c98:	9200      	str	r2, [sp, #0]
 8016c9a:	aa07      	add	r2, sp, #28
 8016c9c:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8016ca0:	f8d3 b03c 	ldr.w	fp, [r3, #60]	@ 0x3c
 8016ca4:	463b      	mov	r3, r7
 8016ca6:	47d8      	blx	fp
 8016ca8:	46a6      	mov	lr, r4
 8016caa:	f10d 0c1c 	add.w	ip, sp, #28
 8016cae:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016cb2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016cb6:	f8de 3000 	ldr.w	r3, [lr]
 8016cba:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 8016cbe:	343c      	adds	r4, #60	@ 0x3c
 8016cc0:	f8cc 3000 	str.w	r3, [ip]
 8016cc4:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8016cc8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016ccc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016cd0:	f8de 3000 	ldr.w	r3, [lr]
 8016cd4:	f8cc 3000 	str.w	r3, [ip]
 8016cd8:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8016cdc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016cde:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016ce2:	6823      	ldr	r3, [r4, #0]
 8016ce4:	4631      	mov	r1, r6
 8016ce6:	4628      	mov	r0, r5
 8016ce8:	f8cc 3000 	str.w	r3, [ip]
 8016cec:	682b      	ldr	r3, [r5, #0]
 8016cee:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8016cf2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8016cf4:	f8cd 8008 	str.w	r8, [sp, #8]
 8016cf8:	9201      	str	r2, [sp, #4]
 8016cfa:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8016cfc:	9200      	str	r2, [sp, #0]
 8016cfe:	aa07      	add	r2, sp, #28
 8016d00:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 8016d02:	463b      	mov	r3, r7
 8016d04:	47a0      	blx	r4
 8016d06:	b017      	add	sp, #92	@ 0x5c
 8016d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016d0c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8016d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d10:	b08d      	sub	sp, #52	@ 0x34
 8016d12:	4688      	mov	r8, r1
 8016d14:	f8d3 c000 	ldr.w	ip, [r3]
 8016d18:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8016d1a:	f8bd 4070 	ldrh.w	r4, [sp, #112]	@ 0x70
 8016d1e:	680f      	ldr	r7, [r1, #0]
 8016d20:	ed92 4a09 	vldr	s8, [r2, #36]	@ 0x24
 8016d24:	eba7 070c 	sub.w	r7, r7, ip
 8016d28:	edd2 4a0b 	vldr	s9, [r2, #44]	@ 0x2c
 8016d2c:	edd3 6a07 	vldr	s13, [r3, #28]
 8016d30:	42bc      	cmp	r4, r7
 8016d32:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016d34:	f8dd a064 	ldr.w	sl, [sp, #100]	@ 0x64
 8016d38:	bfa8      	it	ge
 8016d3a:	463c      	movge	r4, r7
 8016d3c:	f9b1 9000 	ldrsh.w	r9, [r1]
 8016d40:	f9ba 1000 	ldrsh.w	r1, [sl]
 8016d44:	ee07 4a90 	vmov	s15, r4
 8016d48:	eb09 0e0c 	add.w	lr, r9, ip
 8016d4c:	edd3 1a0a 	vldr	s3, [r3, #40]	@ 0x28
 8016d50:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8016d54:	edd2 7a0d 	vldr	s15, [r2, #52]	@ 0x34
 8016d58:	ed93 2a0d 	vldr	s4, [r3, #52]	@ 0x34
 8016d5c:	4571      	cmp	r1, lr
 8016d5e:	ee25 4a04 	vmul.f32	s8, s10, s8
 8016d62:	ee65 4a24 	vmul.f32	s9, s10, s9
 8016d66:	ee25 5a27 	vmul.f32	s10, s10, s15
 8016d6a:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8016d6e:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8016d72:	ee32 1a05 	vadd.f32	s2, s4, s10
 8016d76:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8016d7a:	ee36 0a84 	vadd.f32	s0, s13, s8
 8016d7e:	ee61 1a87 	vmul.f32	s3, s3, s14
 8016d82:	ee22 2a07 	vmul.f32	s4, s4, s14
 8016d86:	f340 808c 	ble.w	8016ea2 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 8016d8a:	eba1 060e 	sub.w	r6, r1, lr
 8016d8e:	fb96 f5f4 	sdiv	r5, r6, r4
 8016d92:	ee07 5a10 	vmov	s14, r5
 8016d96:	2d00      	cmp	r5, #0
 8016d98:	fb04 6615 	mls	r6, r4, r5, r6
 8016d9c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016da0:	eea7 0a04 	vfma.f32	s0, s14, s8
 8016da4:	eee7 0a24 	vfma.f32	s1, s14, s9
 8016da8:	eea7 1a05 	vfma.f32	s2, s14, s10
 8016dac:	dd12      	ble.n	8016dd4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 8016dae:	ee70 6a44 	vsub.f32	s13, s0, s8
 8016db2:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8016db6:	ee31 2a45 	vsub.f32	s4, s2, s10
 8016dba:	eef5 6a40 	vcmp.f32	s13, #0.0
 8016dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016dc2:	bf14      	ite	ne
 8016dc4:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8016dc8:	eeb0 7a67 	vmoveq.f32	s14, s15
 8016dcc:	ee61 1a87 	vmul.f32	s3, s3, s14
 8016dd0:	ee22 2a07 	vmul.f32	s4, s4, s14
 8016dd4:	fb05 f204 	mul.w	r2, r5, r4
 8016dd8:	1abf      	subs	r7, r7, r2
 8016dda:	4494      	add	ip, r2
 8016ddc:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8016de0:	4411      	add	r1, r2
 8016de2:	eb09 020c 	add.w	r2, r9, ip
 8016de6:	b209      	sxth	r1, r1
 8016de8:	443a      	add	r2, r7
 8016dea:	428a      	cmp	r2, r1
 8016dec:	bfc4      	itt	gt
 8016dee:	eba1 0209 	subgt.w	r2, r1, r9
 8016df2:	eba2 070c 	subgt.w	r7, r2, ip
 8016df6:	2f00      	cmp	r7, #0
 8016df8:	dd50      	ble.n	8016e9c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 8016dfa:	fb97 f1f4 	sdiv	r1, r7, r4
 8016dfe:	fb04 7211 	mls	r2, r4, r1, r7
 8016e02:	b90a      	cbnz	r2, 8016e08 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 8016e04:	3901      	subs	r1, #1
 8016e06:	4622      	mov	r2, r4
 8016e08:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8016e0c:	6840      	ldr	r0, [r0, #4]
 8016e0e:	f89d b06c 	ldrb.w	fp, [sp, #108]	@ 0x6c
 8016e12:	44b6      	add	lr, r6
 8016e14:	f8d0 a000 	ldr.w	sl, [r0]
 8016e18:	2900      	cmp	r1, #0
 8016e1a:	bfcc      	ite	gt
 8016e1c:	46a1      	movgt	r9, r4
 8016e1e:	4691      	movle	r9, r2
 8016e20:	900b      	str	r0, [sp, #44]	@ 0x2c
 8016e22:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8016e24:	fb04 e505 	mla	r5, r4, r5, lr
 8016e28:	eef0 6a42 	vmov.f32	s13, s4
 8016e2c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8016e30:	9008      	str	r0, [sp, #32]
 8016e32:	eeb0 7a61 	vmov.f32	s14, s3
 8016e36:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8016e38:	695b      	ldr	r3, [r3, #20]
 8016e3a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8016e3e:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8016e42:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8016e46:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8016e48:	445b      	add	r3, fp
 8016e4a:	9307      	str	r3, [sp, #28]
 8016e4c:	ee16 3a90 	vmov	r3, s13
 8016e50:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8016e54:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8016e58:	ee21 3a23 	vmul.f32	s6, s2, s7
 8016e5c:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8016e60:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8016e64:	ee17 7a90 	vmov	r7, s15
 8016e68:	ee73 7a42 	vsub.f32	s15, s6, s4
 8016e6c:	fb97 f7f4 	sdiv	r7, r7, r4
 8016e70:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8016e74:	ee17 ca90 	vmov	ip, s15
 8016e78:	fb9c fcf4 	sdiv	ip, ip, r4
 8016e7c:	fb0c 3306 	mla	r3, ip, r6, r3
 8016e80:	9302      	str	r3, [sp, #8]
 8016e82:	ee17 3a10 	vmov	r3, s14
 8016e86:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 8016e8a:	fb07 3706 	mla	r7, r7, r6, r3
 8016e8e:	eba9 0306 	sub.w	r3, r9, r6
 8016e92:	e9cd 4700 	strd	r4, r7, [sp]
 8016e96:	f8da 4008 	ldr.w	r4, [sl, #8]
 8016e9a:	47a0      	blx	r4
 8016e9c:	b00d      	add	sp, #52	@ 0x34
 8016e9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ea2:	2500      	movs	r5, #0
 8016ea4:	462e      	mov	r6, r5
 8016ea6:	e799      	b.n	8016ddc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08016ea8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8016ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016eac:	b0db      	sub	sp, #364	@ 0x16c
 8016eae:	461d      	mov	r5, r3
 8016eb0:	4614      	mov	r4, r2
 8016eb2:	f8bd 3198 	ldrh.w	r3, [sp, #408]	@ 0x198
 8016eb6:	910f      	str	r1, [sp, #60]	@ 0x3c
 8016eb8:	4629      	mov	r1, r5
 8016eba:	930a      	str	r3, [sp, #40]	@ 0x28
 8016ebc:	f89d 319c 	ldrb.w	r3, [sp, #412]	@ 0x19c
 8016ec0:	9009      	str	r0, [sp, #36]	@ 0x24
 8016ec2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016ec4:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	@ 0x1a0
 8016ec8:	f8dd b194 	ldr.w	fp, [sp, #404]	@ 0x194
 8016ecc:	9310      	str	r3, [sp, #64]	@ 0x40
 8016ece:	6803      	ldr	r3, [r0, #0]
 8016ed0:	6c5f      	ldr	r7, [r3, #68]	@ 0x44
 8016ed2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8016ed6:	47b8      	blx	r7
 8016ed8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016eda:	6058      	str	r0, [r3, #4]
 8016edc:	2800      	cmp	r0, #0
 8016ede:	f000 83a1 	beq.w	8017624 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016ee2:	682b      	ldr	r3, [r5, #0]
 8016ee4:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8016ee8:	ed94 7a02 	vldr	s14, [r4, #8]
 8016eec:	9314      	str	r3, [sp, #80]	@ 0x50
 8016eee:	686b      	ldr	r3, [r5, #4]
 8016ef0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016ef4:	9315      	str	r3, [sp, #84]	@ 0x54
 8016ef6:	4bc1      	ldr	r3, [pc, #772]	@ (80171fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8016ef8:	7819      	ldrb	r1, [r3, #0]
 8016efa:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8016efe:	2900      	cmp	r1, #0
 8016f00:	bf16      	itet	ne
 8016f02:	4619      	movne	r1, r3
 8016f04:	4611      	moveq	r1, r2
 8016f06:	4613      	movne	r3, r2
 8016f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f0c:	9116      	str	r1, [sp, #88]	@ 0x58
 8016f0e:	e9cd 3217 	strd	r3, r2, [sp, #92]	@ 0x5c
 8016f12:	f240 8387 	bls.w	8017624 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016f16:	ed94 7a07 	vldr	s14, [r4, #28]
 8016f1a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016f1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f22:	f240 837f 	bls.w	8017624 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016f26:	ed94 7a0c 	vldr	s14, [r4, #48]	@ 0x30
 8016f2a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016f2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f32:	f240 8377 	bls.w	8017624 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016f36:	6822      	ldr	r2, [r4, #0]
 8016f38:	4bb1      	ldr	r3, [pc, #708]	@ (8017200 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8016f3a:	429a      	cmp	r2, r3
 8016f3c:	f2c0 8372 	blt.w	8017624 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016f40:	49b0      	ldr	r1, [pc, #704]	@ (8017204 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8016f42:	6963      	ldr	r3, [r4, #20]
 8016f44:	428a      	cmp	r2, r1
 8016f46:	f300 836d 	bgt.w	8017624 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016f4a:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 8016f4e:	48ae      	ldr	r0, [pc, #696]	@ (8017208 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8016f50:	33ff      	adds	r3, #255	@ 0xff
 8016f52:	4283      	cmp	r3, r0
 8016f54:	f200 8366 	bhi.w	8017624 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016f58:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8016f5a:	4dac      	ldr	r5, [pc, #688]	@ (801720c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8016f5c:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 8016f60:	33ff      	adds	r3, #255	@ 0xff
 8016f62:	42ab      	cmp	r3, r5
 8016f64:	f200 835e 	bhi.w	8017624 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016f68:	6862      	ldr	r2, [r4, #4]
 8016f6a:	f502 331c 	add.w	r3, r2, #159744	@ 0x27000
 8016f6e:	33ff      	adds	r3, #255	@ 0xff
 8016f70:	4283      	cmp	r3, r0
 8016f72:	f200 8357 	bhi.w	8017624 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016f76:	69a1      	ldr	r1, [r4, #24]
 8016f78:	f501 331c 	add.w	r3, r1, #159744	@ 0x27000
 8016f7c:	33ff      	adds	r3, #255	@ 0xff
 8016f7e:	4283      	cmp	r3, r0
 8016f80:	f200 8350 	bhi.w	8017624 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016f84:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8016f86:	f503 301c 	add.w	r0, r3, #159744	@ 0x27000
 8016f8a:	30ff      	adds	r0, #255	@ 0xff
 8016f8c:	42a8      	cmp	r0, r5
 8016f8e:	f200 8349 	bhi.w	8017624 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016f92:	428a      	cmp	r2, r1
 8016f94:	f280 8110 	bge.w	80171b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8016f98:	429a      	cmp	r2, r3
 8016f9a:	f300 8119 	bgt.w	80171d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 8016f9e:	4299      	cmp	r1, r3
 8016fa0:	f280 811d 	bge.w	80171de <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8016fa4:	2502      	movs	r5, #2
 8016fa6:	2701      	movs	r7, #1
 8016fa8:	46a9      	mov	r9, r5
 8016faa:	46b8      	mov	r8, r7
 8016fac:	f04f 0a00 	mov.w	sl, #0
 8016fb0:	4621      	mov	r1, r4
 8016fb2:	a849      	add	r0, sp, #292	@ 0x124
 8016fb4:	f004 fe40 	bl	801bc38 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8016fb8:	4622      	mov	r2, r4
 8016fba:	4653      	mov	r3, sl
 8016fbc:	a949      	add	r1, sp, #292	@ 0x124
 8016fbe:	f8cd 9000 	str.w	r9, [sp]
 8016fc2:	a819      	add	r0, sp, #100	@ 0x64
 8016fc4:	f004 ff68 	bl	801be98 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8016fc8:	4622      	mov	r2, r4
 8016fca:	4653      	mov	r3, sl
 8016fcc:	a949      	add	r1, sp, #292	@ 0x124
 8016fce:	f8cd 8000 	str.w	r8, [sp]
 8016fd2:	a829      	add	r0, sp, #164	@ 0xa4
 8016fd4:	f004 ff60 	bl	801be98 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8016fd8:	4643      	mov	r3, r8
 8016fda:	4622      	mov	r2, r4
 8016fdc:	a949      	add	r1, sp, #292	@ 0x124
 8016fde:	f8cd 9000 	str.w	r9, [sp]
 8016fe2:	a839      	add	r0, sp, #228	@ 0xe4
 8016fe4:	f004 ff58 	bl	801be98 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8016fe8:	42af      	cmp	r7, r5
 8016fea:	af12      	add	r7, sp, #72	@ 0x48
 8016fec:	bfb7      	itett	lt
 8016fee:	2300      	movlt	r3, #0
 8016ff0:	2301      	movge	r3, #1
 8016ff2:	ad29      	addlt	r5, sp, #164	@ 0xa4
 8016ff4:	ac19      	addlt	r4, sp, #100	@ 0x64
 8016ff6:	bfb1      	iteee	lt
 8016ff8:	930e      	strlt	r3, [sp, #56]	@ 0x38
 8016ffa:	ad19      	addge	r5, sp, #100	@ 0x64
 8016ffc:	930e      	strge	r3, [sp, #56]	@ 0x38
 8016ffe:	ac29      	addge	r4, sp, #164	@ 0xa4
 8017000:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017002:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017006:	e887 0003 	stmia.w	r7, {r0, r1}
 801700a:	b928      	cbnz	r0, 8017018 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 801700c:	4b80      	ldr	r3, [pc, #512]	@ (8017210 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 801700e:	6818      	ldr	r0, [r3, #0]
 8017010:	6803      	ldr	r3, [r0, #0]
 8017012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017014:	4798      	blx	r3
 8017016:	6038      	str	r0, [r7, #0]
 8017018:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 801701a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801701e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8017022:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 8017024:	930c      	str	r3, [sp, #48]	@ 0x30
 8017026:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8017028:	6963      	ldr	r3, [r4, #20]
 801702a:	440b      	add	r3, r1
 801702c:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8017030:	4408      	add	r0, r1
 8017032:	b200      	sxth	r0, r0
 8017034:	4283      	cmp	r3, r0
 8017036:	900d      	str	r0, [sp, #52]	@ 0x34
 8017038:	f280 80dd 	bge.w	80171f6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 801703c:	428b      	cmp	r3, r1
 801703e:	da08      	bge.n	8017052 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8017040:	2a00      	cmp	r2, #0
 8017042:	dd06      	ble.n	8017052 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8017044:	1acb      	subs	r3, r1, r3
 8017046:	429a      	cmp	r2, r3
 8017048:	f2c0 80e4 	blt.w	8017214 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 801704c:	2b00      	cmp	r3, #0
 801704e:	f300 80e2 	bgt.w	8017216 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8017052:	6967      	ldr	r7, [r4, #20]
 8017054:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 8017058:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801705a:	443b      	add	r3, r7
 801705c:	461f      	mov	r7, r3
 801705e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017060:	1bdf      	subs	r7, r3, r7
 8017062:	4297      	cmp	r7, r2
 8017064:	bfa8      	it	ge
 8017066:	4617      	movge	r7, r2
 8017068:	2f00      	cmp	r7, #0
 801706a:	f340 8166 	ble.w	801733a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 801706e:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8017070:	6829      	ldr	r1, [r5, #0]
 8017072:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017076:	f9bb 3000 	ldrsh.w	r3, [fp]
 801707a:	4411      	add	r1, r2
 801707c:	6820      	ldr	r0, [r4, #0]
 801707e:	4299      	cmp	r1, r3
 8017080:	dd1a      	ble.n	80170b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8017082:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8017086:	4402      	add	r2, r0
 8017088:	440b      	add	r3, r1
 801708a:	b21b      	sxth	r3, r3
 801708c:	429a      	cmp	r2, r3
 801708e:	dc13      	bgt.n	80170b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8017090:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8017092:	a912      	add	r1, sp, #72	@ 0x48
 8017094:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017096:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017098:	681b      	ldr	r3, [r3, #0]
 801709a:	9206      	str	r2, [sp, #24]
 801709c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801709e:	9500      	str	r5, [sp, #0]
 80170a0:	9205      	str	r2, [sp, #20]
 80170a2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80170a4:	e9cd b203 	strd	fp, r2, [sp, #12]
 80170a8:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 80170aa:	e9cd 8201 	strd	r8, r2, [sp, #4]
 80170ae:	aa49      	add	r2, sp, #292	@ 0x124
 80170b0:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 80170b4:	4623      	mov	r3, r4
 80170b6:	47c8      	blx	r9
 80170b8:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 80170bc:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 80170c0:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 80170c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80170c8:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 80170cc:	68a1      	ldr	r1, [r4, #8]
 80170ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80170d2:	ed94 6a08 	vldr	s12, [r4, #32]
 80170d6:	edd4 6a07 	vldr	s13, [r4, #28]
 80170da:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 80170de:	ee76 6a86 	vadd.f32	s13, s13, s12
 80170e2:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 80170e6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80170ea:	edc4 6a07 	vstr	s13, [r4, #28]
 80170ee:	441a      	add	r2, r3
 80170f0:	6963      	ldr	r3, [r4, #20]
 80170f2:	3301      	adds	r3, #1
 80170f4:	6022      	str	r2, [r4, #0]
 80170f6:	6163      	str	r3, [r4, #20]
 80170f8:	69a3      	ldr	r3, [r4, #24]
 80170fa:	3b01      	subs	r3, #1
 80170fc:	61a3      	str	r3, [r4, #24]
 80170fe:	6923      	ldr	r3, [r4, #16]
 8017100:	440b      	add	r3, r1
 8017102:	68e1      	ldr	r1, [r4, #12]
 8017104:	428b      	cmp	r3, r1
 8017106:	6123      	str	r3, [r4, #16]
 8017108:	db15      	blt.n	8017136 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 801710a:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 801710e:	3201      	adds	r2, #1
 8017110:	1a5b      	subs	r3, r3, r1
 8017112:	ee76 6a26 	vadd.f32	s13, s12, s13
 8017116:	6022      	str	r2, [r4, #0]
 8017118:	6123      	str	r3, [r4, #16]
 801711a:	edc4 6a07 	vstr	s13, [r4, #28]
 801711e:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 8017122:	ee36 7a87 	vadd.f32	s14, s13, s14
 8017126:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 801712a:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 801712e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017132:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8017136:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 801713a:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 801713e:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 8017142:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017146:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 801714a:	68a9      	ldr	r1, [r5, #8]
 801714c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8017150:	ed95 6a08 	vldr	s12, [r5, #32]
 8017154:	edd5 6a07 	vldr	s13, [r5, #28]
 8017158:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 801715c:	ee76 6a86 	vadd.f32	s13, s13, s12
 8017160:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8017164:	e9d5 2300 	ldrd	r2, r3, [r5]
 8017168:	edc5 6a07 	vstr	s13, [r5, #28]
 801716c:	441a      	add	r2, r3
 801716e:	696b      	ldr	r3, [r5, #20]
 8017170:	3301      	adds	r3, #1
 8017172:	602a      	str	r2, [r5, #0]
 8017174:	616b      	str	r3, [r5, #20]
 8017176:	69ab      	ldr	r3, [r5, #24]
 8017178:	3b01      	subs	r3, #1
 801717a:	61ab      	str	r3, [r5, #24]
 801717c:	692b      	ldr	r3, [r5, #16]
 801717e:	440b      	add	r3, r1
 8017180:	68e9      	ldr	r1, [r5, #12]
 8017182:	428b      	cmp	r3, r1
 8017184:	612b      	str	r3, [r5, #16]
 8017186:	db15      	blt.n	80171b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8017188:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 801718c:	3201      	adds	r2, #1
 801718e:	1a5b      	subs	r3, r3, r1
 8017190:	ee76 6a26 	vadd.f32	s13, s12, s13
 8017194:	602a      	str	r2, [r5, #0]
 8017196:	612b      	str	r3, [r5, #16]
 8017198:	edc5 6a07 	vstr	s13, [r5, #28]
 801719c:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 80171a0:	ee36 7a87 	vadd.f32	s14, s13, s14
 80171a4:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 80171a8:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 80171ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80171b0:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 80171b4:	3f01      	subs	r7, #1
 80171b6:	e757      	b.n	8017068 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 80171b8:	4299      	cmp	r1, r3
 80171ba:	dc13      	bgt.n	80171e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 80171bc:	429a      	cmp	r2, r3
 80171be:	da14      	bge.n	80171ea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 80171c0:	2502      	movs	r5, #2
 80171c2:	2703      	movs	r7, #3
 80171c4:	f04f 0800 	mov.w	r8, #0
 80171c8:	46a9      	mov	r9, r5
 80171ca:	f04f 0a01 	mov.w	sl, #1
 80171ce:	e6ef      	b.n	8016fb0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 80171d0:	2501      	movs	r5, #1
 80171d2:	2700      	movs	r7, #0
 80171d4:	46a9      	mov	r9, r5
 80171d6:	46b8      	mov	r8, r7
 80171d8:	f04f 0a02 	mov.w	sl, #2
 80171dc:	e6e8      	b.n	8016fb0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 80171de:	2501      	movs	r5, #1
 80171e0:	2702      	movs	r7, #2
 80171e2:	e6e1      	b.n	8016fa8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 80171e4:	2500      	movs	r5, #0
 80171e6:	2701      	movs	r7, #1
 80171e8:	e7f4      	b.n	80171d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 80171ea:	2702      	movs	r7, #2
 80171ec:	2503      	movs	r5, #3
 80171ee:	f04f 0900 	mov.w	r9, #0
 80171f2:	46b8      	mov	r8, r7
 80171f4:	e7e9      	b.n	80171ca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 80171f6:	4613      	mov	r3, r2
 80171f8:	e728      	b.n	801704c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 80171fa:	bf00      	nop
 80171fc:	20029ed0 	.word	0x20029ed0
 8017200:	fffd8f01 	.word	0xfffd8f01
 8017204:	00027100 	.word	0x00027100
 8017208:	0004e1ff 	.word	0x0004e1ff
 801720c:	0004e1fe 	.word	0x0004e1fe
 8017210:	20029ed8 	.word	0x20029ed8
 8017214:	4613      	mov	r3, r2
 8017216:	992b      	ldr	r1, [sp, #172]	@ 0xac
 8017218:	469e      	mov	lr, r3
 801721a:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 801721c:	469c      	mov	ip, r3
 801721e:	9111      	str	r1, [sp, #68]	@ 0x44
 8017220:	f04f 0900 	mov.w	r9, #0
 8017224:	eddd 4a34 	vldr	s9, [sp, #208]	@ 0xd0
 8017228:	ed9d 7a33 	vldr	s14, [sp, #204]	@ 0xcc
 801722c:	ed9d 4a37 	vldr	s8, [sp, #220]	@ 0xdc
 8017230:	eddd 7a36 	vldr	s15, [sp, #216]	@ 0xd8
 8017234:	eddd 3a31 	vldr	s7, [sp, #196]	@ 0xc4
 8017238:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 801723c:	ed9d 5a32 	vldr	s10, [sp, #200]	@ 0xc8
 8017240:	eddd 5a35 	vldr	s11, [sp, #212]	@ 0xd4
 8017244:	ed9d 6a38 	vldr	s12, [sp, #224]	@ 0xe0
 8017248:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	@ 0xa4
 801724c:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	@ 0xb0
 8017250:	f1bc 0f00 	cmp.w	ip, #0
 8017254:	d147      	bne.n	80172e6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8017256:	eb03 0c07 	add.w	ip, r3, r7
 801725a:	1ad7      	subs	r7, r2, r3
 801725c:	f1b9 0f00 	cmp.w	r9, #0
 8017260:	d009      	beq.n	8017276 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8017262:	9029      	str	r0, [sp, #164]	@ 0xa4
 8017264:	ed8d 7a33 	vstr	s14, [sp, #204]	@ 0xcc
 8017268:	edcd 7a36 	vstr	s15, [sp, #216]	@ 0xd8
 801726c:	edcd 6a30 	vstr	s13, [sp, #192]	@ 0xc0
 8017270:	912d      	str	r1, [sp, #180]	@ 0xb4
 8017272:	e9cd c72e 	strd	ip, r7, [sp, #184]	@ 0xb8
 8017276:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8017278:	f04f 0800 	mov.w	r8, #0
 801727c:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 8017280:	9111      	str	r1, [sp, #68]	@ 0x44
 8017282:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 8017286:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 801728a:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 801728e:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 8017292:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 8017296:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 801729a:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 801729e:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 80172a2:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 80172a6:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 80172aa:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 80172ae:	f1be 0f00 	cmp.w	lr, #0
 80172b2:	d031      	beq.n	8017318 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 80172b4:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 80172b6:	4450      	add	r0, sl
 80172b8:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80172bc:	4431      	add	r1, r6
 80172be:	ee37 7a04 	vadd.f32	s14, s14, s8
 80172c2:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80172c6:	4549      	cmp	r1, r9
 80172c8:	db08      	blt.n	80172dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 80172ca:	ee77 7a85 	vadd.f32	s15, s15, s10
 80172ce:	3001      	adds	r0, #1
 80172d0:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80172d4:	eba1 0109 	sub.w	r1, r1, r9
 80172d8:	ee37 7a06 	vadd.f32	s14, s14, s12
 80172dc:	f10e 3eff 	add.w	lr, lr, #4294967295
 80172e0:	f04f 0801 	mov.w	r8, #1
 80172e4:	e7e3      	b.n	80172ae <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 80172e6:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 80172e8:	4450      	add	r0, sl
 80172ea:	ee37 7a24 	vadd.f32	s14, s14, s9
 80172ee:	4431      	add	r1, r6
 80172f0:	ee77 7a84 	vadd.f32	s15, s15, s8
 80172f4:	ee76 6aa3 	vadd.f32	s13, s13, s7
 80172f8:	4541      	cmp	r1, r8
 80172fa:	db08      	blt.n	801730e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 80172fc:	ee76 6a85 	vadd.f32	s13, s13, s10
 8017300:	3001      	adds	r0, #1
 8017302:	ee37 7a25 	vadd.f32	s14, s14, s11
 8017306:	eba1 0108 	sub.w	r1, r1, r8
 801730a:	ee77 7a86 	vadd.f32	s15, s15, s12
 801730e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8017312:	f04f 0901 	mov.w	r9, #1
 8017316:	e79b      	b.n	8017250 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8017318:	449c      	add	ip, r3
 801731a:	1aff      	subs	r7, r7, r3
 801731c:	f1b8 0f00 	cmp.w	r8, #0
 8017320:	d009      	beq.n	8017336 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 8017322:	9019      	str	r0, [sp, #100]	@ 0x64
 8017324:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 8017328:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 801732c:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 8017330:	911d      	str	r1, [sp, #116]	@ 0x74
 8017332:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 8017336:	1ad2      	subs	r2, r2, r3
 8017338:	e68b      	b.n	8017052 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801733a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801733c:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 801733e:	2b00      	cmp	r3, #0
 8017340:	f000 80d1 	beq.w	80174e6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8017344:	ad19      	add	r5, sp, #100	@ 0x64
 8017346:	ac39      	add	r4, sp, #228	@ 0xe4
 8017348:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 801734a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801734e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8017352:	930c      	str	r3, [sp, #48]	@ 0x30
 8017354:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8017356:	6963      	ldr	r3, [r4, #20]
 8017358:	440b      	add	r3, r1
 801735a:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801735e:	4408      	add	r0, r1
 8017360:	b200      	sxth	r0, r0
 8017362:	4283      	cmp	r3, r0
 8017364:	900d      	str	r0, [sp, #52]	@ 0x34
 8017366:	f280 80c1 	bge.w	80174ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 801736a:	428b      	cmp	r3, r1
 801736c:	da08      	bge.n	8017380 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801736e:	2a00      	cmp	r2, #0
 8017370:	dd06      	ble.n	8017380 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8017372:	1acb      	subs	r3, r1, r3
 8017374:	429a      	cmp	r2, r3
 8017376:	f2c0 80bb 	blt.w	80174f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 801737a:	2b00      	cmp	r3, #0
 801737c:	f300 80b9 	bgt.w	80174f2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8017380:	6967      	ldr	r7, [r4, #20]
 8017382:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 8017386:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017388:	443b      	add	r3, r7
 801738a:	461f      	mov	r7, r3
 801738c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801738e:	1bdf      	subs	r7, r3, r7
 8017390:	4297      	cmp	r7, r2
 8017392:	bfa8      	it	ge
 8017394:	4617      	movge	r7, r2
 8017396:	2f00      	cmp	r7, #0
 8017398:	f340 813c 	ble.w	8017614 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 801739c:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 801739e:	6829      	ldr	r1, [r5, #0]
 80173a0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80173a4:	f9bb 3000 	ldrsh.w	r3, [fp]
 80173a8:	4411      	add	r1, r2
 80173aa:	6820      	ldr	r0, [r4, #0]
 80173ac:	4299      	cmp	r1, r3
 80173ae:	dd1a      	ble.n	80173e6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 80173b0:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 80173b4:	4402      	add	r2, r0
 80173b6:	440b      	add	r3, r1
 80173b8:	b21b      	sxth	r3, r3
 80173ba:	429a      	cmp	r2, r3
 80173bc:	dc13      	bgt.n	80173e6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 80173be:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80173c0:	a912      	add	r1, sp, #72	@ 0x48
 80173c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80173c4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80173c6:	681b      	ldr	r3, [r3, #0]
 80173c8:	9206      	str	r2, [sp, #24]
 80173ca:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80173cc:	9500      	str	r5, [sp, #0]
 80173ce:	9205      	str	r2, [sp, #20]
 80173d0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80173d2:	e9cd b203 	strd	fp, r2, [sp, #12]
 80173d6:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 80173d8:	e9cd 8201 	strd	r8, r2, [sp, #4]
 80173dc:	aa49      	add	r2, sp, #292	@ 0x124
 80173de:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 80173e2:	4623      	mov	r3, r4
 80173e4:	47c8      	blx	r9
 80173e6:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 80173ea:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 80173ee:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 80173f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80173f6:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 80173fa:	68a1      	ldr	r1, [r4, #8]
 80173fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8017400:	ed94 6a08 	vldr	s12, [r4, #32]
 8017404:	edd4 6a07 	vldr	s13, [r4, #28]
 8017408:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 801740c:	ee76 6a86 	vadd.f32	s13, s13, s12
 8017410:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8017414:	e9d4 2300 	ldrd	r2, r3, [r4]
 8017418:	edc4 6a07 	vstr	s13, [r4, #28]
 801741c:	441a      	add	r2, r3
 801741e:	6963      	ldr	r3, [r4, #20]
 8017420:	3301      	adds	r3, #1
 8017422:	6022      	str	r2, [r4, #0]
 8017424:	6163      	str	r3, [r4, #20]
 8017426:	69a3      	ldr	r3, [r4, #24]
 8017428:	3b01      	subs	r3, #1
 801742a:	61a3      	str	r3, [r4, #24]
 801742c:	6923      	ldr	r3, [r4, #16]
 801742e:	440b      	add	r3, r1
 8017430:	68e1      	ldr	r1, [r4, #12]
 8017432:	428b      	cmp	r3, r1
 8017434:	6123      	str	r3, [r4, #16]
 8017436:	db15      	blt.n	8017464 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8017438:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 801743c:	3201      	adds	r2, #1
 801743e:	1a5b      	subs	r3, r3, r1
 8017440:	ee76 6a26 	vadd.f32	s13, s12, s13
 8017444:	6022      	str	r2, [r4, #0]
 8017446:	6123      	str	r3, [r4, #16]
 8017448:	edc4 6a07 	vstr	s13, [r4, #28]
 801744c:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 8017450:	ee36 7a87 	vadd.f32	s14, s13, s14
 8017454:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8017458:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 801745c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017460:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8017464:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 8017468:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 801746c:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 8017470:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017474:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 8017478:	68a9      	ldr	r1, [r5, #8]
 801747a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801747e:	ed95 6a08 	vldr	s12, [r5, #32]
 8017482:	edd5 6a07 	vldr	s13, [r5, #28]
 8017486:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 801748a:	ee76 6a86 	vadd.f32	s13, s13, s12
 801748e:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8017492:	e9d5 2300 	ldrd	r2, r3, [r5]
 8017496:	edc5 6a07 	vstr	s13, [r5, #28]
 801749a:	441a      	add	r2, r3
 801749c:	696b      	ldr	r3, [r5, #20]
 801749e:	3301      	adds	r3, #1
 80174a0:	602a      	str	r2, [r5, #0]
 80174a2:	616b      	str	r3, [r5, #20]
 80174a4:	69ab      	ldr	r3, [r5, #24]
 80174a6:	3b01      	subs	r3, #1
 80174a8:	61ab      	str	r3, [r5, #24]
 80174aa:	692b      	ldr	r3, [r5, #16]
 80174ac:	440b      	add	r3, r1
 80174ae:	68e9      	ldr	r1, [r5, #12]
 80174b0:	428b      	cmp	r3, r1
 80174b2:	612b      	str	r3, [r5, #16]
 80174b4:	db15      	blt.n	80174e2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 80174b6:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 80174ba:	3201      	adds	r2, #1
 80174bc:	1a5b      	subs	r3, r3, r1
 80174be:	ee76 6a26 	vadd.f32	s13, s12, s13
 80174c2:	602a      	str	r2, [r5, #0]
 80174c4:	612b      	str	r3, [r5, #16]
 80174c6:	edc5 6a07 	vstr	s13, [r5, #28]
 80174ca:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 80174ce:	ee36 7a87 	vadd.f32	s14, s13, s14
 80174d2:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 80174d6:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 80174da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80174de:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 80174e2:	3f01      	subs	r7, #1
 80174e4:	e757      	b.n	8017396 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 80174e6:	ad39      	add	r5, sp, #228	@ 0xe4
 80174e8:	ac19      	add	r4, sp, #100	@ 0x64
 80174ea:	e72d      	b.n	8017348 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 80174ec:	4613      	mov	r3, r2
 80174ee:	e744      	b.n	801737a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 80174f0:	4613      	mov	r3, r2
 80174f2:	9e3b      	ldr	r6, [sp, #236]	@ 0xec
 80174f4:	469e      	mov	lr, r3
 80174f6:	f8dd c0f8 	ldr.w	ip, [sp, #248]	@ 0xf8
 80174fa:	461f      	mov	r7, r3
 80174fc:	ed9d 7a43 	vldr	s14, [sp, #268]	@ 0x10c
 8017500:	f04f 0900 	mov.w	r9, #0
 8017504:	eddd 4a44 	vldr	s9, [sp, #272]	@ 0x110
 8017508:	eddd 7a46 	vldr	s15, [sp, #280]	@ 0x118
 801750c:	ed9d 4a47 	vldr	s8, [sp, #284]	@ 0x11c
 8017510:	eddd 6a40 	vldr	s13, [sp, #256]	@ 0x100
 8017514:	eddd 3a41 	vldr	s7, [sp, #260]	@ 0x104
 8017518:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 801751a:	f8dd 80f0 	ldr.w	r8, [sp, #240]	@ 0xf0
 801751e:	ed9d 5a42 	vldr	s10, [sp, #264]	@ 0x108
 8017522:	eddd 5a45 	vldr	s11, [sp, #276]	@ 0x114
 8017526:	ed9d 6a48 	vldr	s12, [sp, #288]	@ 0x120
 801752a:	960e      	str	r6, [sp, #56]	@ 0x38
 801752c:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	@ 0xe4
 8017530:	2f00      	cmp	r7, #0
 8017532:	d146      	bne.n	80175c2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8017534:	449c      	add	ip, r3
 8017536:	1ad7      	subs	r7, r2, r3
 8017538:	f1b9 0f00 	cmp.w	r9, #0
 801753c:	d009      	beq.n	8017552 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 801753e:	9039      	str	r0, [sp, #228]	@ 0xe4
 8017540:	913d      	str	r1, [sp, #244]	@ 0xf4
 8017542:	edcd 6a40 	vstr	s13, [sp, #256]	@ 0x100
 8017546:	ed8d 7a43 	vstr	s14, [sp, #268]	@ 0x10c
 801754a:	edcd 7a46 	vstr	s15, [sp, #280]	@ 0x118
 801754e:	e9cd c73e 	strd	ip, r7, [sp, #248]	@ 0xf8
 8017552:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8017554:	f04f 0800 	mov.w	r8, #0
 8017558:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 801755c:	910e      	str	r1, [sp, #56]	@ 0x38
 801755e:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 8017562:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 8017566:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 801756a:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 801756e:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 8017572:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 8017576:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 801757a:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 801757e:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 8017582:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 8017586:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 801758a:	f1be 0f00 	cmp.w	lr, #0
 801758e:	d030      	beq.n	80175f2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8017590:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8017592:	4450      	add	r0, sl
 8017594:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8017598:	4431      	add	r1, r6
 801759a:	ee37 7a04 	vadd.f32	s14, s14, s8
 801759e:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80175a2:	4549      	cmp	r1, r9
 80175a4:	db08      	blt.n	80175b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 80175a6:	ee77 7a85 	vadd.f32	s15, s15, s10
 80175aa:	3001      	adds	r0, #1
 80175ac:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80175b0:	eba1 0109 	sub.w	r1, r1, r9
 80175b4:	ee37 7a06 	vadd.f32	s14, s14, s12
 80175b8:	f10e 3eff 	add.w	lr, lr, #4294967295
 80175bc:	f04f 0801 	mov.w	r8, #1
 80175c0:	e7e3      	b.n	801758a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 80175c2:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 80175c4:	4450      	add	r0, sl
 80175c6:	ee37 7a24 	vadd.f32	s14, s14, s9
 80175ca:	4431      	add	r1, r6
 80175cc:	ee77 7a84 	vadd.f32	s15, s15, s8
 80175d0:	ee76 6aa3 	vadd.f32	s13, s13, s7
 80175d4:	4541      	cmp	r1, r8
 80175d6:	db08      	blt.n	80175ea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 80175d8:	ee76 6a85 	vadd.f32	s13, s13, s10
 80175dc:	3001      	adds	r0, #1
 80175de:	ee37 7a25 	vadd.f32	s14, s14, s11
 80175e2:	eba1 0108 	sub.w	r1, r1, r8
 80175e6:	ee77 7a86 	vadd.f32	s15, s15, s12
 80175ea:	3f01      	subs	r7, #1
 80175ec:	f04f 0901 	mov.w	r9, #1
 80175f0:	e79e      	b.n	8017530 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 80175f2:	449c      	add	ip, r3
 80175f4:	1aff      	subs	r7, r7, r3
 80175f6:	f1b8 0f00 	cmp.w	r8, #0
 80175fa:	d009      	beq.n	8017610 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 80175fc:	9019      	str	r0, [sp, #100]	@ 0x64
 80175fe:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 8017602:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 8017606:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 801760a:	911d      	str	r1, [sp, #116]	@ 0x74
 801760c:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 8017610:	1ad2      	subs	r2, r2, r3
 8017612:	e6b5      	b.n	8017380 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8017614:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017616:	681b      	ldr	r3, [r3, #0]
 8017618:	b923      	cbnz	r3, 8017624 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801761a:	4b04      	ldr	r3, [pc, #16]	@ (801762c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 801761c:	6818      	ldr	r0, [r3, #0]
 801761e:	6803      	ldr	r3, [r0, #0]
 8017620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017622:	4798      	blx	r3
 8017624:	b05b      	add	sp, #364	@ 0x16c
 8017626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801762a:	bf00      	nop
 801762c:	20029ed8 	.word	0x20029ed8

08017630 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>:
 8017630:	b570      	push	{r4, r5, r6, lr}
 8017632:	4604      	mov	r4, r0
 8017634:	2500      	movs	r5, #0
 8017636:	9805      	ldr	r0, [sp, #20]
 8017638:	f89d 601c 	ldrb.w	r6, [sp, #28]
 801763c:	6061      	str	r1, [r4, #4]
 801763e:	8263      	strh	r3, [r4, #18]
 8017640:	f89d 1010 	ldrb.w	r1, [sp, #16]
 8017644:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8017648:	8025      	strh	r5, [r4, #0]
 801764a:	7221      	strb	r1, [r4, #8]
 801764c:	7266      	strb	r6, [r4, #9]
 801764e:	60e0      	str	r0, [r4, #12]
 8017650:	8222      	strh	r2, [r4, #16]
 8017652:	82a3      	strh	r3, [r4, #20]
 8017654:	82e5      	strh	r5, [r4, #22]
 8017656:	8325      	strh	r5, [r4, #24]
 8017658:	8365      	strh	r5, [r4, #26]
 801765a:	83a5      	strh	r5, [r4, #28]
 801765c:	83e5      	strh	r5, [r4, #30]
 801765e:	8425      	strh	r5, [r4, #32]
 8017660:	f884 5022 	strb.w	r5, [r4, #34]	@ 0x22
 8017664:	b32e      	cbz	r6, 80176b2 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8017666:	6803      	ldr	r3, [r0, #0]
 8017668:	695b      	ldr	r3, [r3, #20]
 801766a:	4798      	blx	r3
 801766c:	4606      	mov	r6, r0
 801766e:	b300      	cbz	r0, 80176b2 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8017670:	68e0      	ldr	r0, [r4, #12]
 8017672:	4631      	mov	r1, r6
 8017674:	6803      	ldr	r3, [r0, #0]
 8017676:	68db      	ldr	r3, [r3, #12]
 8017678:	4798      	blx	r3
 801767a:	4605      	mov	r5, r0
 801767c:	b1c8      	cbz	r0, 80176b2 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 801767e:	7b43      	ldrb	r3, [r0, #13]
 8017680:	7a82      	ldrb	r2, [r0, #10]
 8017682:	005b      	lsls	r3, r3, #1
 8017684:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8017688:	4313      	orrs	r3, r2
 801768a:	8423      	strh	r3, [r4, #32]
 801768c:	7a63      	ldrb	r3, [r4, #9]
 801768e:	2b06      	cmp	r3, #6
 8017690:	d10f      	bne.n	80176b2 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8017692:	68e0      	ldr	r0, [r4, #12]
 8017694:	462a      	mov	r2, r5
 8017696:	4631      	mov	r1, r6
 8017698:	6803      	ldr	r3, [r0, #0]
 801769a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801769c:	4798      	blx	r3
 801769e:	7b6b      	ldrb	r3, [r5, #13]
 80176a0:	005b      	lsls	r3, r3, #1
 80176a2:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 80176a6:	7aab      	ldrb	r3, [r5, #10]
 80176a8:	4313      	orrs	r3, r2
 80176aa:	4418      	add	r0, r3
 80176ac:	8c23      	ldrh	r3, [r4, #32]
 80176ae:	4418      	add	r0, r3
 80176b0:	8420      	strh	r0, [r4, #32]
 80176b2:	4620      	mov	r0, r4
 80176b4:	bd70      	pop	{r4, r5, r6, pc}

080176b6 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 80176b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80176ba:	2400      	movs	r4, #0
 80176bc:	b085      	sub	sp, #20
 80176be:	4681      	mov	r9, r0
 80176c0:	4688      	mov	r8, r1
 80176c2:	4692      	mov	sl, r2
 80176c4:	469b      	mov	fp, r3
 80176c6:	4627      	mov	r7, r4
 80176c8:	4625      	mov	r5, r4
 80176ca:	4626      	mov	r6, r4
 80176cc:	4554      	cmp	r4, sl
 80176ce:	da2a      	bge.n	8017726 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 80176d0:	2300      	movs	r3, #0
 80176d2:	9303      	str	r3, [sp, #12]
 80176d4:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 80176d8:	429d      	cmp	r5, r3
 80176da:	d004      	beq.n	80176e6 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 80176dc:	f242 030b 	movw	r3, #8203	@ 0x200b
 80176e0:	429d      	cmp	r5, r3
 80176e2:	bf18      	it	ne
 80176e4:	462f      	movne	r7, r5
 80176e6:	ab03      	add	r3, sp, #12
 80176e8:	4642      	mov	r2, r8
 80176ea:	4659      	mov	r1, fp
 80176ec:	4648      	mov	r0, r9
 80176ee:	f004 f8b9 	bl	801b864 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80176f2:	4605      	mov	r5, r0
 80176f4:	b1b8      	cbz	r0, 8017726 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 80176f6:	280a      	cmp	r0, #10
 80176f8:	d015      	beq.n	8017726 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 80176fa:	9a03      	ldr	r2, [sp, #12]
 80176fc:	b18a      	cbz	r2, 8017722 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 80176fe:	7b50      	ldrb	r0, [r2, #13]
 8017700:	4639      	mov	r1, r7
 8017702:	7a93      	ldrb	r3, [r2, #10]
 8017704:	0040      	lsls	r0, r0, #1
 8017706:	8895      	ldrh	r5, [r2, #4]
 8017708:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 801770c:	4303      	orrs	r3, r0
 801770e:	4640      	mov	r0, r8
 8017710:	9301      	str	r3, [sp, #4]
 8017712:	f8d8 3000 	ldr.w	r3, [r8]
 8017716:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017718:	4798      	blx	r3
 801771a:	9b01      	ldr	r3, [sp, #4]
 801771c:	4418      	add	r0, r3
 801771e:	4406      	add	r6, r0
 8017720:	b2b6      	uxth	r6, r6
 8017722:	3401      	adds	r4, #1
 8017724:	e7d2      	b.n	80176cc <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 8017726:	4630      	mov	r0, r6
 8017728:	b005      	add	sp, #20
 801772a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801772e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 801772e:	2a02      	cmp	r2, #2
 8017730:	b530      	push	{r4, r5, lr}
 8017732:	d011      	beq.n	8017758 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 8017734:	2a03      	cmp	r2, #3
 8017736:	d01c      	beq.n	8017772 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 8017738:	2a01      	cmp	r2, #1
 801773a:	d10c      	bne.n	8017756 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801773c:	888b      	ldrh	r3, [r1, #4]
 801773e:	8801      	ldrh	r1, [r0, #0]
 8017740:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8017744:	1a5b      	subs	r3, r3, r1
 8017746:	8844      	ldrh	r4, [r0, #2]
 8017748:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801774c:	1a9b      	subs	r3, r3, r2
 801774e:	8004      	strh	r4, [r0, #0]
 8017750:	8081      	strh	r1, [r0, #4]
 8017752:	8043      	strh	r3, [r0, #2]
 8017754:	80c2      	strh	r2, [r0, #6]
 8017756:	bd30      	pop	{r4, r5, pc}
 8017758:	88cb      	ldrh	r3, [r1, #6]
 801775a:	8842      	ldrh	r2, [r0, #2]
 801775c:	1a9b      	subs	r3, r3, r2
 801775e:	88c2      	ldrh	r2, [r0, #6]
 8017760:	1a9b      	subs	r3, r3, r2
 8017762:	888a      	ldrh	r2, [r1, #4]
 8017764:	8801      	ldrh	r1, [r0, #0]
 8017766:	8043      	strh	r3, [r0, #2]
 8017768:	1a52      	subs	r2, r2, r1
 801776a:	8881      	ldrh	r1, [r0, #4]
 801776c:	1a52      	subs	r2, r2, r1
 801776e:	8002      	strh	r2, [r0, #0]
 8017770:	e7f1      	b.n	8017756 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8017772:	88cb      	ldrh	r3, [r1, #6]
 8017774:	8841      	ldrh	r1, [r0, #2]
 8017776:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801777a:	1a5b      	subs	r3, r3, r1
 801777c:	f9b0 5000 	ldrsh.w	r5, [r0]
 8017780:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8017784:	1a9b      	subs	r3, r3, r2
 8017786:	8045      	strh	r5, [r0, #2]
 8017788:	8082      	strh	r2, [r0, #4]
 801778a:	8003      	strh	r3, [r0, #0]
 801778c:	80c4      	strh	r4, [r0, #6]
 801778e:	e7e2      	b.n	8017756 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

08017790 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 8017790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017794:	b09f      	sub	sp, #124	@ 0x7c
 8017796:	9116      	str	r1, [sp, #88]	@ 0x58
 8017798:	9317      	str	r3, [sp, #92]	@ 0x5c
 801779a:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 801779c:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801779e:	8809      	ldrh	r1, [r1, #0]
 80177a0:	889b      	ldrh	r3, [r3, #4]
 80177a2:	f8dd 80a8 	ldr.w	r8, [sp, #168]	@ 0xa8
 80177a6:	440b      	add	r3, r1
 80177a8:	9212      	str	r2, [sp, #72]	@ 0x48
 80177aa:	f89d 20b8 	ldrb.w	r2, [sp, #184]	@ 0xb8
 80177ae:	b21b      	sxth	r3, r3
 80177b0:	9011      	str	r0, [sp, #68]	@ 0x44
 80177b2:	f89d b0ac 	ldrb.w	fp, [sp, #172]	@ 0xac
 80177b6:	9310      	str	r3, [sp, #64]	@ 0x40
 80177b8:	f8d8 3000 	ldr.w	r3, [r8]
 80177bc:	f9bd 60a0 	ldrsh.w	r6, [sp, #160]	@ 0xa0
 80177c0:	7b19      	ldrb	r1, [r3, #12]
 80177c2:	7adb      	ldrb	r3, [r3, #11]
 80177c4:	9114      	str	r1, [sp, #80]	@ 0x50
 80177c6:	9315      	str	r3, [sp, #84]	@ 0x54
 80177c8:	2a00      	cmp	r2, #0
 80177ca:	d06a      	beq.n	80178a2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 80177cc:	f898 3010 	ldrb.w	r3, [r8, #16]
 80177d0:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 80177d2:	2b06      	cmp	r3, #6
 80177d4:	bf14      	ite	ne
 80177d6:	2301      	movne	r3, #1
 80177d8:	2302      	moveq	r3, #2
 80177da:	4413      	add	r3, r2
 80177dc:	f04f 0900 	mov.w	r9, #0
 80177e0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80177e2:	464c      	mov	r4, r9
 80177e4:	f8cd 9038 	str.w	r9, [sp, #56]	@ 0x38
 80177e8:	f8cd 9034 	str.w	r9, [sp, #52]	@ 0x34
 80177ec:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	@ 0x38
 80177f0:	4293      	cmp	r3, r2
 80177f2:	f280 808f 	bge.w	8017914 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 80177f6:	2300      	movs	r3, #0
 80177f8:	e9cd 331c 	strd	r3, r3, [sp, #112]	@ 0x70
 80177fc:	f88d 306f 	strb.w	r3, [sp, #111]	@ 0x6f
 8017800:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8017804:	429c      	cmp	r4, r3
 8017806:	d006      	beq.n	8017816 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
 8017808:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801780a:	f242 020b 	movw	r2, #8203	@ 0x200b
 801780e:	4294      	cmp	r4, r2
 8017810:	bf18      	it	ne
 8017812:	4623      	movne	r3, r4
 8017814:	930d      	str	r3, [sp, #52]	@ 0x34
 8017816:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017818:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 801781a:	f8d8 2000 	ldr.w	r2, [r8]
 801781e:	428b      	cmp	r3, r1
 8017820:	db41      	blt.n	80178a6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 8017822:	6813      	ldr	r3, [r2, #0]
 8017824:	4610      	mov	r0, r2
 8017826:	695b      	ldr	r3, [r3, #20]
 8017828:	4798      	blx	r3
 801782a:	4604      	mov	r4, r0
 801782c:	f8d8 0000 	ldr.w	r0, [r8]
 8017830:	aa1d      	add	r2, sp, #116	@ 0x74
 8017832:	4621      	mov	r1, r4
 8017834:	6803      	ldr	r3, [r0, #0]
 8017836:	689d      	ldr	r5, [r3, #8]
 8017838:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 801783c:	47a8      	blx	r5
 801783e:	901c      	str	r0, [sp, #112]	@ 0x70
 8017840:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8017844:	429c      	cmp	r4, r3
 8017846:	f000 80ec 	beq.w	8017a22 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801784a:	f242 030b 	movw	r3, #8203	@ 0x200b
 801784e:	429c      	cmp	r4, r3
 8017850:	f000 80e7 	beq.w	8017a22 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8017854:	2c00      	cmp	r4, #0
 8017856:	f000 80f9 	beq.w	8017a4c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 801785a:	2c0a      	cmp	r4, #10
 801785c:	d060      	beq.n	8017920 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 801785e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8017860:	b36a      	cbz	r2, 80178be <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 8017862:	8894      	ldrh	r4, [r2, #4]
 8017864:	f1bb 0f00 	cmp.w	fp, #0
 8017868:	d03b      	beq.n	80178e2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 801786a:	f892 900d 	ldrb.w	r9, [r2, #13]
 801786e:	f1bb 0f01 	cmp.w	fp, #1
 8017872:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8017876:	f409 7380 	and.w	r3, r9, #256	@ 0x100
 801787a:	f892 900a 	ldrb.w	r9, [r2, #10]
 801787e:	ea49 0903 	orr.w	r9, r9, r3
 8017882:	d134      	bne.n	80178ee <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15e>
 8017884:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017886:	eba6 0609 	sub.w	r6, r6, r9
 801788a:	2b00      	cmp	r3, #0
 801788c:	d14f      	bne.n	801792e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 801788e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8017890:	eb09 0306 	add.w	r3, r9, r6
 8017894:	4413      	add	r3, r2
 8017896:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8017898:	f9b2 2000 	ldrsh.w	r2, [r2]
 801789c:	4293      	cmp	r3, r2
 801789e:	da51      	bge.n	8017944 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 80178a0:	e038      	b.n	8017914 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 80178a2:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 80178a4:	e79a      	b.n	80177dc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4c>
 80178a6:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 80178aa:	4659      	mov	r1, fp
 80178ac:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 80178ae:	9301      	str	r3, [sp, #4]
 80178b0:	ab1d      	add	r3, sp, #116	@ 0x74
 80178b2:	9300      	str	r3, [sp, #0]
 80178b4:	ab1c      	add	r3, sp, #112	@ 0x70
 80178b6:	f004 f81e 	bl	801b8f6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 80178ba:	4604      	mov	r4, r0
 80178bc:	e7c0      	b.n	8017840 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 80178be:	f8d8 0000 	ldr.w	r0, [r8]
 80178c2:	6803      	ldr	r3, [r0, #0]
 80178c4:	691b      	ldr	r3, [r3, #16]
 80178c6:	4798      	blx	r3
 80178c8:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 80178cc:	4298      	cmp	r0, r3
 80178ce:	f000 80a8 	beq.w	8017a22 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 80178d2:	f242 030b 	movw	r3, #8203	@ 0x200b
 80178d6:	4298      	cmp	r0, r3
 80178d8:	f000 80a3 	beq.w	8017a22 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 80178dc:	f1bb 0f00 	cmp.w	fp, #0
 80178e0:	d100      	bne.n	80178e4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 80178e2:	444e      	add	r6, r9
 80178e4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80178e6:	2a00      	cmp	r2, #0
 80178e8:	d1bf      	bne.n	801786a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 80178ea:	4691      	mov	r9, r2
 80178ec:	e099      	b.n	8017a22 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 80178ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80178f0:	2b00      	cmp	r3, #0
 80178f2:	f000 80ad 	beq.w	8017a50 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c0>
 80178f6:	f1bb 0f00 	cmp.w	fp, #0
 80178fa:	d118      	bne.n	801792e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 80178fc:	f8d8 0000 	ldr.w	r0, [r8]
 8017900:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8017902:	6803      	ldr	r3, [r0, #0]
 8017904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017906:	4798      	blx	r3
 8017908:	4406      	add	r6, r0
 801790a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801790c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801790e:	1af3      	subs	r3, r6, r3
 8017910:	4293      	cmp	r3, r2
 8017912:	dd17      	ble.n	8017944 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 8017914:	2c00      	cmp	r4, #0
 8017916:	f000 8099 	beq.w	8017a4c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 801791a:	2c0a      	cmp	r4, #10
 801791c:	f040 8087 	bne.w	8017a2e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29e>
 8017920:	240a      	movs	r4, #10
 8017922:	fab4 f084 	clz	r0, r4
 8017926:	0940      	lsrs	r0, r0, #5
 8017928:	b01f      	add	sp, #124	@ 0x7c
 801792a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801792e:	f8d8 0000 	ldr.w	r0, [r8]
 8017932:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8017934:	6803      	ldr	r3, [r0, #0]
 8017936:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017938:	4798      	blx	r3
 801793a:	f1bb 0f01 	cmp.w	fp, #1
 801793e:	eba6 0600 	sub.w	r6, r6, r0
 8017942:	d0a4      	beq.n	801788e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 8017944:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8017946:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8017948:	f990 1009 	ldrsb.w	r1, [r0, #9]
 801794c:	f9b3 7000 	ldrsh.w	r7, [r3]
 8017950:	7b43      	ldrb	r3, [r0, #13]
 8017952:	4431      	add	r1, r6
 8017954:	015b      	lsls	r3, r3, #5
 8017956:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801795a:	7983      	ldrb	r3, [r0, #6]
 801795c:	4313      	orrs	r3, r2
 801795e:	440b      	add	r3, r1
 8017960:	42bb      	cmp	r3, r7
 8017962:	db5e      	blt.n	8017a22 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8017964:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8017966:	4299      	cmp	r1, r3
 8017968:	da5b      	bge.n	8017a22 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801796a:	f8d8 0000 	ldr.w	r0, [r8]
 801796e:	42b7      	cmp	r7, r6
 8017970:	6803      	ldr	r3, [r0, #0]
 8017972:	bfcc      	ite	gt
 8017974:	1bbf      	subgt	r7, r7, r6
 8017976:	2700      	movle	r7, #0
 8017978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801797a:	bfc8      	it	gt
 801797c:	b2bf      	uxthgt	r7, r7
 801797e:	4798      	blx	r3
 8017980:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8017982:	7b5a      	ldrb	r2, [r3, #13]
 8017984:	00d1      	lsls	r1, r2, #3
 8017986:	f401 7580 	and.w	r5, r1, #256	@ 0x100
 801798a:	7a19      	ldrb	r1, [r3, #8]
 801798c:	4329      	orrs	r1, r5
 801798e:	0655      	lsls	r5, r2, #25
 8017990:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 8017992:	bf48      	it	mi
 8017994:	f5a1 7100 	submi.w	r1, r1, #512	@ 0x200
 8017998:	4405      	add	r5, r0
 801799a:	bf48      	it	mi
 801799c:	b209      	sxthmi	r1, r1
 801799e:	1a6d      	subs	r5, r5, r1
 80179a0:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 80179a2:	b2ad      	uxth	r5, r5
 80179a4:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 80179a8:	fa0f fa85 	sxth.w	sl, r5
 80179ac:	4551      	cmp	r1, sl
 80179ae:	dd3c      	ble.n	8017a2a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29a>
 80179b0:	0112      	lsls	r2, r2, #4
 80179b2:	79d8      	ldrb	r0, [r3, #7]
 80179b4:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 80179b8:	4302      	orrs	r2, r0
 80179ba:	4492      	add	sl, r2
 80179bc:	4551      	cmp	r1, sl
 80179be:	dc30      	bgt.n	8017a22 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 80179c0:	1b4d      	subs	r5, r1, r5
 80179c2:	468a      	mov	sl, r1
 80179c4:	b22d      	sxth	r5, r5
 80179c6:	9319      	str	r3, [sp, #100]	@ 0x64
 80179c8:	b2ad      	uxth	r5, r5
 80179ca:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80179cc:	f8d8 0000 	ldr.w	r0, [r8]
 80179d0:	681a      	ldr	r2, [r3, #0]
 80179d2:	6801      	ldr	r1, [r0, #0]
 80179d4:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 80179d6:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80179d8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80179da:	9218      	str	r2, [sp, #96]	@ 0x60
 80179dc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80179de:	4788      	blx	r1
 80179e0:	f898 1006 	ldrb.w	r1, [r8, #6]
 80179e4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80179e6:	910b      	str	r1, [sp, #44]	@ 0x2c
 80179e8:	f898 100e 	ldrb.w	r1, [r8, #14]
 80179ec:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80179ee:	910a      	str	r1, [sp, #40]	@ 0x28
 80179f0:	f89d 106f 	ldrb.w	r1, [sp, #111]	@ 0x6f
 80179f4:	9109      	str	r1, [sp, #36]	@ 0x24
 80179f6:	f8d8 1008 	ldr.w	r1, [r8, #8]
 80179fa:	9305      	str	r3, [sp, #20]
 80179fc:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 80179fe:	9206      	str	r2, [sp, #24]
 8017a00:	9304      	str	r3, [sp, #16]
 8017a02:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8017a04:	f8cd a004 	str.w	sl, [sp, #4]
 8017a08:	e9cd 7502 	strd	r7, r5, [sp, #8]
 8017a0c:	4437      	add	r7, r6
 8017a0e:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8017a10:	b23f      	sxth	r7, r7
 8017a12:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8017a16:	9700      	str	r7, [sp, #0]
 8017a18:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8017a1a:	681a      	ldr	r2, [r3, #0]
 8017a1c:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8017a1e:	685b      	ldr	r3, [r3, #4]
 8017a20:	47a8      	blx	r5
 8017a22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017a24:	3301      	adds	r3, #1
 8017a26:	930e      	str	r3, [sp, #56]	@ 0x38
 8017a28:	e6e0      	b.n	80177ec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5c>
 8017a2a:	2500      	movs	r5, #0
 8017a2c:	e7cb      	b.n	80179c6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x236>
 8017a2e:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8017a30:	3501      	adds	r5, #1
 8017a32:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8017a34:	429d      	cmp	r5, r3
 8017a36:	f6bf af74 	bge.w	8017922 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 8017a3a:	4659      	mov	r1, fp
 8017a3c:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 8017a3e:	f7f0 fb4b 	bl	80080d8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8017a42:	4604      	mov	r4, r0
 8017a44:	b110      	cbz	r0, 8017a4c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 8017a46:	280a      	cmp	r0, #10
 8017a48:	d1f2      	bne.n	8017a30 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2a0>
 8017a4a:	e769      	b.n	8017920 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 8017a4c:	2400      	movs	r4, #0
 8017a4e:	e768      	b.n	8017922 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 8017a50:	f1bb 0f00 	cmp.w	fp, #0
 8017a54:	f43f af59 	beq.w	801790a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x17a>
 8017a58:	e774      	b.n	8017944 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>

08017a5a <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE>:
 8017a5a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a5e:	b089      	sub	sp, #36	@ 0x24
 8017a60:	4699      	mov	r9, r3
 8017a62:	4683      	mov	fp, r0
 8017a64:	460d      	mov	r5, r1
 8017a66:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8017a68:	4690      	mov	r8, r2
 8017a6a:	f8bd 4050 	ldrh.w	r4, [sp, #80]	@ 0x50
 8017a6e:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8017a70:	bb1b      	cbnz	r3, 8017aba <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE+0x60>
 8017a72:	6813      	ldr	r3, [r2, #0]
 8017a74:	4610      	mov	r0, r2
 8017a76:	695b      	ldr	r3, [r3, #20]
 8017a78:	4798      	blx	r3
 8017a7a:	4682      	mov	sl, r0
 8017a7c:	b1e8      	cbz	r0, 8017aba <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE+0x60>
 8017a7e:	f8d8 3000 	ldr.w	r3, [r8]
 8017a82:	4601      	mov	r1, r0
 8017a84:	4640      	mov	r0, r8
 8017a86:	68db      	ldr	r3, [r3, #12]
 8017a88:	4798      	blx	r3
 8017a8a:	4602      	mov	r2, r0
 8017a8c:	2800      	cmp	r0, #0
 8017a8e:	d03f      	beq.n	8017b10 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE+0xb6>
 8017a90:	7b47      	ldrb	r7, [r0, #13]
 8017a92:	007f      	lsls	r7, r7, #1
 8017a94:	f407 7380 	and.w	r3, r7, #256	@ 0x100
 8017a98:	7a87      	ldrb	r7, [r0, #10]
 8017a9a:	431f      	orrs	r7, r3
 8017a9c:	6933      	ldr	r3, [r6, #16]
 8017a9e:	7c1b      	ldrb	r3, [r3, #16]
 8017aa0:	443c      	add	r4, r7
 8017aa2:	2b06      	cmp	r3, #6
 8017aa4:	b2a4      	uxth	r4, r4
 8017aa6:	d108      	bne.n	8017aba <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE+0x60>
 8017aa8:	f8d8 3000 	ldr.w	r3, [r8]
 8017aac:	4651      	mov	r1, sl
 8017aae:	4640      	mov	r0, r8
 8017ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017ab2:	4798      	blx	r3
 8017ab4:	4438      	add	r0, r7
 8017ab6:	4404      	add	r4, r0
 8017ab8:	b2a4      	uxth	r4, r4
 8017aba:	6933      	ldr	r3, [r6, #16]
 8017abc:	795a      	ldrb	r2, [r3, #5]
 8017abe:	f9b5 3000 	ldrsh.w	r3, [r5]
 8017ac2:	bb42      	cbnz	r2, 8017b16 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE+0xbc>
 8017ac4:	f1b9 0f01 	cmp.w	r9, #1
 8017ac8:	d101      	bne.n	8017ace <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE+0x74>
 8017aca:	4423      	add	r3, r4
 8017acc:	802b      	strh	r3, [r5, #0]
 8017ace:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8017ad0:	4658      	mov	r0, fp
 8017ad2:	f9b6 3008 	ldrsh.w	r3, [r6, #8]
 8017ad6:	fab2 f282 	clz	r2, r2
 8017ada:	0952      	lsrs	r2, r2, #5
 8017adc:	9206      	str	r2, [sp, #24]
 8017ade:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8017ae0:	9205      	str	r2, [sp, #20]
 8017ae2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8017ae4:	e9cd 9203 	strd	r9, r2, [sp, #12]
 8017ae8:	6932      	ldr	r2, [r6, #16]
 8017aea:	9202      	str	r2, [sp, #8]
 8017aec:	68f2      	ldr	r2, [r6, #12]
 8017aee:	9201      	str	r2, [sp, #4]
 8017af0:	f9b5 2000 	ldrsh.w	r2, [r5]
 8017af4:	9200      	str	r2, [sp, #0]
 8017af6:	e9d6 1200 	ldrd	r1, r2, [r6]
 8017afa:	f7ff fe49 	bl	8017790 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 8017afe:	6933      	ldr	r3, [r6, #16]
 8017b00:	795b      	ldrb	r3, [r3, #5]
 8017b02:	b97b      	cbnz	r3, 8017b24 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE+0xca>
 8017b04:	f1b9 0f00 	cmp.w	r9, #0
 8017b08:	d102      	bne.n	8017b10 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE+0xb6>
 8017b0a:	8828      	ldrh	r0, [r5, #0]
 8017b0c:	4404      	add	r4, r0
 8017b0e:	802c      	strh	r4, [r5, #0]
 8017b10:	b009      	add	sp, #36	@ 0x24
 8017b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b16:	2a01      	cmp	r2, #1
 8017b18:	d1d9      	bne.n	8017ace <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE+0x74>
 8017b1a:	f1b9 0f00 	cmp.w	r9, #0
 8017b1e:	d1d6      	bne.n	8017ace <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE+0x74>
 8017b20:	1b1b      	subs	r3, r3, r4
 8017b22:	e7d3      	b.n	8017acc <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE+0x72>
 8017b24:	2b01      	cmp	r3, #1
 8017b26:	d1f3      	bne.n	8017b10 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE+0xb6>
 8017b28:	f1b9 0f01 	cmp.w	r9, #1
 8017b2c:	d1f0      	bne.n	8017b10 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE+0xb6>
 8017b2e:	8828      	ldrh	r0, [r5, #0]
 8017b30:	1b04      	subs	r4, r0, r4
 8017b32:	e7ec      	b.n	8017b0e <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE+0xb4>

08017b34 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE>:
 8017b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b38:	b0a9      	sub	sp, #164	@ 0xa4
 8017b3a:	4683      	mov	fp, r0
 8017b3c:	4615      	mov	r5, r2
 8017b3e:	2264      	movs	r2, #100	@ 0x64
 8017b40:	930b      	str	r3, [sp, #44]	@ 0x2c
 8017b42:	a80f      	add	r0, sp, #60	@ 0x3c
 8017b44:	f89d 30d0 	ldrb.w	r3, [sp, #208]	@ 0xd0
 8017b48:	9105      	str	r1, [sp, #20]
 8017b4a:	9932      	ldr	r1, [sp, #200]	@ 0xc8
 8017b4c:	930d      	str	r3, [sp, #52]	@ 0x34
 8017b4e:	f013 fe10 	bl	802b772 <memcpy>
 8017b52:	2300      	movs	r3, #0
 8017b54:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8017b56:	930e      	str	r3, [sp, #56]	@ 0x38
 8017b58:	2a00      	cmp	r2, #0
 8017b5a:	f040 815c 	bne.w	8017e16 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x2e2>
 8017b5e:	4690      	mov	r8, r2
 8017b60:	4616      	mov	r6, r2
 8017b62:	4614      	mov	r4, r2
 8017b64:	4691      	mov	r9, r2
 8017b66:	9207      	str	r2, [sp, #28]
 8017b68:	9209      	str	r2, [sp, #36]	@ 0x24
 8017b6a:	9208      	str	r2, [sp, #32]
 8017b6c:	920a      	str	r2, [sp, #40]	@ 0x28
 8017b6e:	9b07      	ldr	r3, [sp, #28]
 8017b70:	9a33      	ldr	r2, [sp, #204]	@ 0xcc
 8017b72:	4293      	cmp	r3, r2
 8017b74:	f280 8101 	bge.w	8017d7a <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x246>
 8017b78:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8017b7c:	4599      	cmp	r9, r3
 8017b7e:	d006      	beq.n	8017b8e <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x5a>
 8017b80:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8017b82:	f242 030b 	movw	r3, #8203	@ 0x200b
 8017b86:	4599      	cmp	r9, r3
 8017b88:	bf18      	it	ne
 8017b8a:	464a      	movne	r2, r9
 8017b8c:	920a      	str	r2, [sp, #40]	@ 0x28
 8017b8e:	462a      	mov	r2, r5
 8017b90:	ab0e      	add	r3, sp, #56	@ 0x38
 8017b92:	2100      	movs	r1, #0
 8017b94:	9832      	ldr	r0, [sp, #200]	@ 0xc8
 8017b96:	f003 fe65 	bl	801b864 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017b9a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017b9c:	4681      	mov	r9, r0
 8017b9e:	2a00      	cmp	r2, #0
 8017ba0:	d06c      	beq.n	8017c7c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x148>
 8017ba2:	f892 a00d 	ldrb.w	sl, [r2, #13]
 8017ba6:	682b      	ldr	r3, [r5, #0]
 8017ba8:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 8017bac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017bae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017bb0:	f40a 7080 	and.w	r0, sl, #256	@ 0x100
 8017bb4:	f892 a00a 	ldrb.w	sl, [r2, #10]
 8017bb8:	f8b2 9004 	ldrh.w	r9, [r2, #4]
 8017bbc:	ea4a 0a00 	orr.w	sl, sl, r0
 8017bc0:	4628      	mov	r0, r5
 8017bc2:	4798      	blx	r3
 8017bc4:	4450      	add	r0, sl
 8017bc6:	b287      	uxth	r7, r0
 8017bc8:	f1b9 0f00 	cmp.w	r9, #0
 8017bcc:	f000 80d5 	beq.w	8017d7a <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x246>
 8017bd0:	f1b9 0f0a 	cmp.w	r9, #10
 8017bd4:	f000 80d1 	beq.w	8017d7a <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x246>
 8017bd8:	f1a9 0328 	sub.w	r3, r9, #40	@ 0x28
 8017bdc:	f029 0120 	bic.w	r1, r9, #32
 8017be0:	b29b      	uxth	r3, r3
 8017be2:	b289      	uxth	r1, r1
 8017be4:	2b01      	cmp	r3, #1
 8017be6:	d94b      	bls.n	8017c80 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x14c>
 8017be8:	295b      	cmp	r1, #91	@ 0x5b
 8017bea:	d049      	beq.n	8017c80 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x14c>
 8017bec:	295d      	cmp	r1, #93	@ 0x5d
 8017bee:	d047      	beq.n	8017c80 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x14c>
 8017bf0:	f029 0202 	bic.w	r2, r9, #2
 8017bf4:	b292      	uxth	r2, r2
 8017bf6:	f1a2 033c 	sub.w	r3, r2, #60	@ 0x3c
 8017bfa:	425a      	negs	r2, r3
 8017bfc:	415a      	adcs	r2, r3
 8017bfe:	f1a9 0330 	sub.w	r3, r9, #48	@ 0x30
 8017c02:	b29b      	uxth	r3, r3
 8017c04:	2b09      	cmp	r3, #9
 8017c06:	d93d      	bls.n	8017c84 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x150>
 8017c08:	f5a9 6acc 	sub.w	sl, r9, #1632	@ 0x660
 8017c0c:	fa1f fa8a 	uxth.w	sl, sl
 8017c10:	f1ba 0f09 	cmp.w	sl, #9
 8017c14:	bf8c      	ite	hi
 8017c16:	2300      	movhi	r3, #0
 8017c18:	2301      	movls	r3, #1
 8017c1a:	9306      	str	r3, [sp, #24]
 8017c1c:	f5a9 63b2 	sub.w	r3, r9, #1424	@ 0x590
 8017c20:	b29b      	uxth	r3, r3
 8017c22:	f5b3 7fb8 	cmp.w	r3, #368	@ 0x170
 8017c26:	d305      	bcc.n	8017c34 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x100>
 8017c28:	f509 6396 	add.w	r3, r9, #1200	@ 0x4b0
 8017c2c:	b29b      	uxth	r3, r3
 8017c2e:	f5b3 7f6c 	cmp.w	r3, #944	@ 0x3b0
 8017c32:	d229      	bcs.n	8017c88 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x154>
 8017c34:	9b06      	ldr	r3, [sp, #24]
 8017c36:	f083 0301 	eor.w	r3, r3, #1
 8017c3a:	b2db      	uxtb	r3, r3
 8017c3c:	f64f 60ff 	movw	r0, #65279	@ 0xfeff
 8017c40:	4581      	cmp	r9, r0
 8017c42:	d023      	beq.n	8017c8c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x158>
 8017c44:	f242 000b 	movw	r0, #8203	@ 0x200b
 8017c48:	eba9 0a00 	sub.w	sl, r9, r0
 8017c4c:	f1da 0000 	rsbs	r0, sl, #0
 8017c50:	eb40 000a 	adc.w	r0, r0, sl
 8017c54:	3941      	subs	r1, #65	@ 0x41
 8017c56:	2919      	cmp	r1, #25
 8017c58:	f240 82a2 	bls.w	80181a0 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x66c>
 8017c5c:	f1b9 0f7f 	cmp.w	r9, #127	@ 0x7f
 8017c60:	f240 828b 	bls.w	801817a <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x646>
 8017c64:	2b00      	cmp	r3, #0
 8017c66:	f040 8288 	bne.w	801817a <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x646>
 8017c6a:	2800      	cmp	r0, #0
 8017c6c:	f040 8285 	bne.w	801817a <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x646>
 8017c70:	2e03      	cmp	r6, #3
 8017c72:	d850      	bhi.n	8017d16 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x1e2>
 8017c74:	e8df f006 	tbb	[pc, r6]
 8017c78:	62392b13 	.word	0x62392b13
 8017c7c:	4617      	mov	r7, r2
 8017c7e:	e7a3      	b.n	8017bc8 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x94>
 8017c80:	2201      	movs	r2, #1
 8017c82:	e7bc      	b.n	8017bfe <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0xca>
 8017c84:	2301      	movs	r3, #1
 8017c86:	e7c8      	b.n	8017c1a <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0xe6>
 8017c88:	2300      	movs	r3, #0
 8017c8a:	e7d7      	b.n	8017c3c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x108>
 8017c8c:	2001      	movs	r0, #1
 8017c8e:	e7e1      	b.n	8017c54 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x120>
 8017c90:	2e03      	cmp	r6, #3
 8017c92:	d840      	bhi.n	8017d16 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x1e2>
 8017c94:	e8df f006 	tbb	[pc, r6]
 8017c98:	46290902 	.word	0x46290902
 8017c9c:	b99b      	cbnz	r3, 8017cc6 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x192>
 8017c9e:	f04f 0a01 	mov.w	sl, #1
 8017ca2:	4656      	mov	r6, sl
 8017ca4:	f8cd a018 	str.w	sl, [sp, #24]
 8017ca8:	e017      	b.n	8017cda <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x1a6>
 8017caa:	b183      	cbz	r3, 8017cce <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x19a>
 8017cac:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 8017cae:	462a      	mov	r2, r5
 8017cb0:	f8cd 8004 	str.w	r8, [sp, #4]
 8017cb4:	4658      	mov	r0, fp
 8017cb6:	9905      	ldr	r1, [sp, #20]
 8017cb8:	e9cd 4302 	strd	r4, r3, [sp, #8]
 8017cbc:	ab0f      	add	r3, sp, #60	@ 0x3c
 8017cbe:	9300      	str	r3, [sp, #0]
 8017cc0:	2300      	movs	r3, #0
 8017cc2:	f7ff feca 	bl	8017a5a <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE>
 8017cc6:	463c      	mov	r4, r7
 8017cc8:	f04f 0801 	mov.w	r8, #1
 8017ccc:	e034      	b.n	8017d38 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x204>
 8017cce:	443c      	add	r4, r7
 8017cd0:	2601      	movs	r6, #1
 8017cd2:	f108 0a01 	add.w	sl, r8, #1
 8017cd6:	b2a7      	uxth	r7, r4
 8017cd8:	9606      	str	r6, [sp, #24]
 8017cda:	9b07      	ldr	r3, [sp, #28]
 8017cdc:	46d0      	mov	r8, sl
 8017cde:	463c      	mov	r4, r7
 8017ce0:	3301      	adds	r3, #1
 8017ce2:	9307      	str	r3, [sp, #28]
 8017ce4:	9b06      	ldr	r3, [sp, #24]
 8017ce6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8017ce8:	e741      	b.n	8017b6e <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x3a>
 8017cea:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 8017cec:	462a      	mov	r2, r5
 8017cee:	f8cd 8004 	str.w	r8, [sp, #4]
 8017cf2:	4658      	mov	r0, fp
 8017cf4:	9905      	ldr	r1, [sp, #20]
 8017cf6:	e9cd 4302 	strd	r4, r3, [sp, #8]
 8017cfa:	ab0f      	add	r3, sp, #60	@ 0x3c
 8017cfc:	9300      	str	r3, [sp, #0]
 8017cfe:	2301      	movs	r3, #1
 8017d00:	f7ff feab 	bl	8017a5a <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE>
 8017d04:	e7cb      	b.n	8017c9e <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x16a>
 8017d06:	b913      	cbnz	r3, 8017d0e <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x1da>
 8017d08:	2800      	cmp	r0, #0
 8017d0a:	f000 8257 	beq.w	80181bc <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x688>
 8017d0e:	443c      	add	r4, r7
 8017d10:	f108 0801 	add.w	r8, r8, #1
 8017d14:	b2a4      	uxth	r4, r4
 8017d16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017d18:	46c2      	mov	sl, r8
 8017d1a:	4627      	mov	r7, r4
 8017d1c:	9306      	str	r3, [sp, #24]
 8017d1e:	e7dc      	b.n	8017cda <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x1a6>
 8017d20:	2200      	movs	r2, #0
 8017d22:	9206      	str	r2, [sp, #24]
 8017d24:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017d26:	f102 0a01 	add.w	sl, r2, #1
 8017d2a:	b14b      	cbz	r3, 8017d40 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x20c>
 8017d2c:	9b08      	ldr	r3, [sp, #32]
 8017d2e:	44d0      	add	r8, sl
 8017d30:	441c      	add	r4, r3
 8017d32:	fa17 f484 	uxtah	r4, r7, r4
 8017d36:	b2a4      	uxth	r4, r4
 8017d38:	2602      	movs	r6, #2
 8017d3a:	e7ec      	b.n	8017d16 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x1e2>
 8017d3c:	2201      	movs	r2, #1
 8017d3e:	e7f0      	b.n	8017d22 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x1ee>
 8017d40:	9b06      	ldr	r3, [sp, #24]
 8017d42:	b19b      	cbz	r3, 8017d6c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x238>
 8017d44:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 8017d46:	462a      	mov	r2, r5
 8017d48:	f8cd 8004 	str.w	r8, [sp, #4]
 8017d4c:	4658      	mov	r0, fp
 8017d4e:	9905      	ldr	r1, [sp, #20]
 8017d50:	2601      	movs	r6, #1
 8017d52:	e9cd 4302 	strd	r4, r3, [sp, #8]
 8017d56:	ab0f      	add	r3, sp, #60	@ 0x3c
 8017d58:	9300      	str	r3, [sp, #0]
 8017d5a:	2301      	movs	r3, #1
 8017d5c:	f7ff fe7d 	bl	8017a5a <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE>
 8017d60:	9b08      	ldr	r3, [sp, #32]
 8017d62:	441c      	add	r4, r3
 8017d64:	fa17 f484 	uxtah	r4, r7, r4
 8017d68:	b2a7      	uxth	r7, r4
 8017d6a:	e7b6      	b.n	8017cda <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x1a6>
 8017d6c:	9b08      	ldr	r3, [sp, #32]
 8017d6e:	443b      	add	r3, r7
 8017d70:	b29b      	uxth	r3, r3
 8017d72:	e9cd 3a08 	strd	r3, sl, [sp, #32]
 8017d76:	2603      	movs	r6, #3
 8017d78:	e7cd      	b.n	8017d16 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x1e2>
 8017d7a:	2e01      	cmp	r6, #1
 8017d7c:	d107      	bne.n	8017d8e <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x25a>
 8017d7e:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 8017d80:	f8cd 8004 	str.w	r8, [sp, #4]
 8017d84:	e9cd 4302 	strd	r4, r3, [sp, #8]
 8017d88:	ab0f      	add	r3, sp, #60	@ 0x3c
 8017d8a:	9300      	str	r3, [sp, #0]
 8017d8c:	e021      	b.n	8017dd2 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x29e>
 8017d8e:	2e02      	cmp	r6, #2
 8017d90:	d108      	bne.n	8017da4 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x270>
 8017d92:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 8017d94:	f8cd 8004 	str.w	r8, [sp, #4]
 8017d98:	e9cd 4302 	strd	r4, r3, [sp, #8]
 8017d9c:	ab0f      	add	r3, sp, #60	@ 0x3c
 8017d9e:	9300      	str	r3, [sp, #0]
 8017da0:	2301      	movs	r3, #1
 8017da2:	e017      	b.n	8017dd4 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x2a0>
 8017da4:	2e03      	cmp	r6, #3
 8017da6:	d11a      	bne.n	8017dde <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x2aa>
 8017da8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017daa:	ae0f      	add	r6, sp, #60	@ 0x3c
 8017dac:	b343      	cbz	r3, 8017e00 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x2cc>
 8017dae:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 8017db0:	462a      	mov	r2, r5
 8017db2:	9905      	ldr	r1, [sp, #20]
 8017db4:	4658      	mov	r0, fp
 8017db6:	e9cd 4302 	strd	r4, r3, [sp, #8]
 8017dba:	e9cd 6800 	strd	r6, r8, [sp]
 8017dbe:	2301      	movs	r3, #1
 8017dc0:	f7ff fe4b 	bl	8017a5a <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE>
 8017dc4:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 8017dc6:	9303      	str	r3, [sp, #12]
 8017dc8:	9b08      	ldr	r3, [sp, #32]
 8017dca:	9302      	str	r3, [sp, #8]
 8017dcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017dce:	e9cd 6300 	strd	r6, r3, [sp]
 8017dd2:	2300      	movs	r3, #0
 8017dd4:	462a      	mov	r2, r5
 8017dd6:	9905      	ldr	r1, [sp, #20]
 8017dd8:	4658      	mov	r0, fp
 8017dda:	f7ff fe3e 	bl	8017a5a <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE>
 8017dde:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017de0:	b15b      	cbz	r3, 8017dfa <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x2c6>
 8017de2:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 8017de4:	aa0f      	add	r2, sp, #60	@ 0x3c
 8017de6:	9905      	ldr	r1, [sp, #20]
 8017de8:	4658      	mov	r0, fp
 8017dea:	9303      	str	r3, [sp, #12]
 8017dec:	2300      	movs	r3, #0
 8017dee:	9200      	str	r2, [sp, #0]
 8017df0:	462a      	mov	r2, r5
 8017df2:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8017df6:	f7ff fe30 	bl	8017a5a <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE>
 8017dfa:	b029      	add	sp, #164	@ 0xa4
 8017dfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e00:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 8017e02:	9303      	str	r3, [sp, #12]
 8017e04:	9b08      	ldr	r3, [sp, #32]
 8017e06:	441c      	add	r4, r3
 8017e08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017e0a:	b2a4      	uxth	r4, r4
 8017e0c:	4443      	add	r3, r8
 8017e0e:	9402      	str	r4, [sp, #8]
 8017e10:	e9cd 6300 	strd	r6, r3, [sp]
 8017e14:	e7c4      	b.n	8017da0 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x26c>
 8017e16:	461f      	mov	r7, r3
 8017e18:	4698      	mov	r8, r3
 8017e1a:	461c      	mov	r4, r3
 8017e1c:	4699      	mov	r9, r3
 8017e1e:	9307      	str	r3, [sp, #28]
 8017e20:	9306      	str	r3, [sp, #24]
 8017e22:	930a      	str	r3, [sp, #40]	@ 0x28
 8017e24:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8017e28:	9b08      	ldr	r3, [sp, #32]
 8017e2a:	9a33      	ldr	r2, [sp, #204]	@ 0xcc
 8017e2c:	4293      	cmp	r3, r2
 8017e2e:	f280 816e 	bge.w	801810e <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x5da>
 8017e32:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8017e36:	4599      	cmp	r9, r3
 8017e38:	d006      	beq.n	8017e48 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x314>
 8017e3a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017e3c:	f242 020b 	movw	r2, #8203	@ 0x200b
 8017e40:	4591      	cmp	r9, r2
 8017e42:	bf18      	it	ne
 8017e44:	464b      	movne	r3, r9
 8017e46:	930a      	str	r3, [sp, #40]	@ 0x28
 8017e48:	462a      	mov	r2, r5
 8017e4a:	ab0e      	add	r3, sp, #56	@ 0x38
 8017e4c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8017e4e:	9832      	ldr	r0, [sp, #200]	@ 0xc8
 8017e50:	f003 fd08 	bl	801b864 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017e54:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017e56:	4681      	mov	r9, r0
 8017e58:	2a00      	cmp	r2, #0
 8017e5a:	d073      	beq.n	8017f44 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x410>
 8017e5c:	f892 a00d 	ldrb.w	sl, [r2, #13]
 8017e60:	682b      	ldr	r3, [r5, #0]
 8017e62:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 8017e66:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017e68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017e6a:	f40a 7080 	and.w	r0, sl, #256	@ 0x100
 8017e6e:	f892 a00a 	ldrb.w	sl, [r2, #10]
 8017e72:	f8b2 9004 	ldrh.w	r9, [r2, #4]
 8017e76:	ea4a 0a00 	orr.w	sl, sl, r0
 8017e7a:	4628      	mov	r0, r5
 8017e7c:	4798      	blx	r3
 8017e7e:	4450      	add	r0, sl
 8017e80:	b286      	uxth	r6, r0
 8017e82:	f1b9 0f00 	cmp.w	r9, #0
 8017e86:	f000 8142 	beq.w	801810e <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x5da>
 8017e8a:	f1b9 0f0a 	cmp.w	r9, #10
 8017e8e:	f000 813e 	beq.w	801810e <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x5da>
 8017e92:	f1a9 0328 	sub.w	r3, r9, #40	@ 0x28
 8017e96:	f029 0220 	bic.w	r2, r9, #32
 8017e9a:	b29b      	uxth	r3, r3
 8017e9c:	b292      	uxth	r2, r2
 8017e9e:	2b01      	cmp	r3, #1
 8017ea0:	d952      	bls.n	8017f48 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x414>
 8017ea2:	2a5b      	cmp	r2, #91	@ 0x5b
 8017ea4:	d050      	beq.n	8017f48 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x414>
 8017ea6:	2a5d      	cmp	r2, #93	@ 0x5d
 8017ea8:	d04e      	beq.n	8017f48 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x414>
 8017eaa:	f029 0a02 	bic.w	sl, r9, #2
 8017eae:	fa1f fa8a 	uxth.w	sl, sl
 8017eb2:	f1aa 0c3c 	sub.w	ip, sl, #60	@ 0x3c
 8017eb6:	f1dc 0a00 	rsbs	sl, ip, #0
 8017eba:	eb4a 0a0c 	adc.w	sl, sl, ip
 8017ebe:	f1a9 0330 	sub.w	r3, r9, #48	@ 0x30
 8017ec2:	b29b      	uxth	r3, r3
 8017ec4:	2b09      	cmp	r3, #9
 8017ec6:	d942      	bls.n	8017f4e <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x41a>
 8017ec8:	f5a9 63cc 	sub.w	r3, r9, #1632	@ 0x660
 8017ecc:	b29b      	uxth	r3, r3
 8017ece:	2b09      	cmp	r3, #9
 8017ed0:	bf8c      	ite	hi
 8017ed2:	2300      	movhi	r3, #0
 8017ed4:	2301      	movls	r3, #1
 8017ed6:	f5a9 61b2 	sub.w	r1, r9, #1424	@ 0x590
 8017eda:	b289      	uxth	r1, r1
 8017edc:	f5b1 7fb8 	cmp.w	r1, #368	@ 0x170
 8017ee0:	d308      	bcc.n	8017ef4 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x3c0>
 8017ee2:	f509 6196 	add.w	r1, r9, #1200	@ 0x4b0
 8017ee6:	b289      	uxth	r1, r1
 8017ee8:	f5b1 7f6c 	cmp.w	r1, #944	@ 0x3b0
 8017eec:	d302      	bcc.n	8017ef4 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x3c0>
 8017eee:	f1ba 0f00 	cmp.w	sl, #0
 8017ef2:	d001      	beq.n	8017ef8 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x3c4>
 8017ef4:	f083 0a01 	eor.w	sl, r3, #1
 8017ef8:	f64f 61ff 	movw	r1, #65279	@ 0xfeff
 8017efc:	4589      	cmp	r9, r1
 8017efe:	d028      	beq.n	8017f52 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x41e>
 8017f00:	f242 010b 	movw	r1, #8203	@ 0x200b
 8017f04:	eba9 0001 	sub.w	r0, r9, r1
 8017f08:	4241      	negs	r1, r0
 8017f0a:	4141      	adcs	r1, r0
 8017f0c:	3a41      	subs	r2, #65	@ 0x41
 8017f0e:	2a19      	cmp	r2, #25
 8017f10:	d90a      	bls.n	8017f28 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x3f4>
 8017f12:	f1b9 0f7f 	cmp.w	r9, #127	@ 0x7f
 8017f16:	f240 8155 	bls.w	80181c4 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x690>
 8017f1a:	f1ba 0f00 	cmp.w	sl, #0
 8017f1e:	f040 8151 	bne.w	80181c4 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x690>
 8017f22:	2900      	cmp	r1, #0
 8017f24:	f040 814e 	bne.w	80181c4 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x690>
 8017f28:	f1b8 0f07 	cmp.w	r8, #7
 8017f2c:	f200 80e5 	bhi.w	80180fa <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x5c6>
 8017f30:	e8df f018 	tbh	[pc, r8, lsl #1]
 8017f34:	00e3001d 	.word	0x00e3001d
 8017f38:	00e30030 	.word	0x00e30030
 8017f3c:	00830055 	.word	0x00830055
 8017f40:	00c20068 	.word	0x00c20068
 8017f44:	4616      	mov	r6, r2
 8017f46:	e79c      	b.n	8017e82 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x34e>
 8017f48:	f04f 0a01 	mov.w	sl, #1
 8017f4c:	e7b7      	b.n	8017ebe <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x38a>
 8017f4e:	2301      	movs	r3, #1
 8017f50:	e7c1      	b.n	8017ed6 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x3a2>
 8017f52:	2101      	movs	r1, #1
 8017f54:	e7da      	b.n	8017f0c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x3d8>
 8017f56:	2200      	movs	r2, #0
 8017f58:	b9cb      	cbnz	r3, 8017f8e <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x45a>
 8017f5a:	bb52      	cbnz	r2, 8017fb2 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x47e>
 8017f5c:	2701      	movs	r7, #1
 8017f5e:	f04f 0802 	mov.w	r8, #2
 8017f62:	9709      	str	r7, [sp, #36]	@ 0x24
 8017f64:	9b08      	ldr	r3, [sp, #32]
 8017f66:	4634      	mov	r4, r6
 8017f68:	3301      	adds	r3, #1
 8017f6a:	9308      	str	r3, [sp, #32]
 8017f6c:	e75c      	b.n	8017e28 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x2f4>
 8017f6e:	2201      	movs	r2, #1
 8017f70:	e7f2      	b.n	8017f58 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x424>
 8017f72:	2200      	movs	r2, #0
 8017f74:	b183      	cbz	r3, 8017f98 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x464>
 8017f76:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 8017f78:	462a      	mov	r2, r5
 8017f7a:	9701      	str	r7, [sp, #4]
 8017f7c:	4658      	mov	r0, fp
 8017f7e:	9905      	ldr	r1, [sp, #20]
 8017f80:	e9cd 4302 	strd	r4, r3, [sp, #8]
 8017f84:	ab0f      	add	r3, sp, #60	@ 0x3c
 8017f86:	9300      	str	r3, [sp, #0]
 8017f88:	2301      	movs	r3, #1
 8017f8a:	f7ff fd66 	bl	8017a5a <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE>
 8017f8e:	4634      	mov	r4, r6
 8017f90:	2701      	movs	r7, #1
 8017f92:	e020      	b.n	8017fd6 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x4a2>
 8017f94:	2201      	movs	r2, #1
 8017f96:	e7ed      	b.n	8017f74 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x440>
 8017f98:	b182      	cbz	r2, 8017fbc <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x488>
 8017f9a:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 8017f9c:	9701      	str	r7, [sp, #4]
 8017f9e:	e9cd 4302 	strd	r4, r3, [sp, #8]
 8017fa2:	ab0f      	add	r3, sp, #60	@ 0x3c
 8017fa4:	9300      	str	r3, [sp, #0]
 8017fa6:	2301      	movs	r3, #1
 8017fa8:	462a      	mov	r2, r5
 8017faa:	9905      	ldr	r1, [sp, #20]
 8017fac:	4658      	mov	r0, fp
 8017fae:	f7ff fd54 	bl	8017a5a <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE>
 8017fb2:	4634      	mov	r4, r6
 8017fb4:	2701      	movs	r7, #1
 8017fb6:	f04f 0806 	mov.w	r8, #6
 8017fba:	e00e      	b.n	8017fda <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x4a6>
 8017fbc:	3701      	adds	r7, #1
 8017fbe:	4434      	add	r4, r6
 8017fc0:	2301      	movs	r3, #1
 8017fc2:	b2a6      	uxth	r6, r4
 8017fc4:	f04f 0802 	mov.w	r8, #2
 8017fc8:	9309      	str	r3, [sp, #36]	@ 0x24
 8017fca:	e7cb      	b.n	8017f64 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x430>
 8017fcc:	2200      	movs	r2, #0
 8017fce:	b143      	cbz	r3, 8017fe2 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x4ae>
 8017fd0:	3701      	adds	r7, #1
 8017fd2:	4434      	add	r4, r6
 8017fd4:	b2a4      	uxth	r4, r4
 8017fd6:	f04f 0804 	mov.w	r8, #4
 8017fda:	4626      	mov	r6, r4
 8017fdc:	e7c2      	b.n	8017f64 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x430>
 8017fde:	2201      	movs	r2, #1
 8017fe0:	e7f5      	b.n	8017fce <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x49a>
 8017fe2:	f029 0302 	bic.w	r3, r9, #2
 8017fe6:	b29b      	uxth	r3, r3
 8017fe8:	2b2c      	cmp	r3, #44	@ 0x2c
 8017fea:	f000 8101 	beq.w	80181f0 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x6bc>
 8017fee:	f1b9 0f3a 	cmp.w	r9, #58	@ 0x3a
 8017ff2:	f000 80fd 	beq.w	80181f0 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x6bc>
 8017ff6:	f2a9 636b 	subw	r3, r9, #1643	@ 0x66b
 8017ffa:	b29b      	uxth	r3, r3
 8017ffc:	2b01      	cmp	r3, #1
 8017ffe:	f240 80f7 	bls.w	80181f0 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x6bc>
 8018002:	b11a      	cbz	r2, 801800c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x4d8>
 8018004:	3701      	adds	r7, #1
 8018006:	4434      	add	r4, r6
 8018008:	b2a4      	uxth	r4, r4
 801800a:	e7d4      	b.n	8017fb6 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x482>
 801800c:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 801800e:	4658      	mov	r0, fp
 8018010:	9701      	str	r7, [sp, #4]
 8018012:	9905      	ldr	r1, [sp, #20]
 8018014:	e9cd 4302 	strd	r4, r3, [sp, #8]
 8018018:	ab0f      	add	r3, sp, #60	@ 0x3c
 801801a:	9300      	str	r3, [sp, #0]
 801801c:	4613      	mov	r3, r2
 801801e:	462a      	mov	r2, r5
 8018020:	f7ff fd1b 	bl	8017a5a <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE>
 8018024:	e79a      	b.n	8017f5c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x428>
 8018026:	2200      	movs	r2, #0
 8018028:	b14b      	cbz	r3, 801803e <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x50a>
 801802a:	9b07      	ldr	r3, [sp, #28]
 801802c:	3301      	adds	r3, #1
 801802e:	441f      	add	r7, r3
 8018030:	9b06      	ldr	r3, [sp, #24]
 8018032:	441c      	add	r4, r3
 8018034:	fa16 f484 	uxtah	r4, r6, r4
 8018038:	e7cc      	b.n	8017fd4 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x4a0>
 801803a:	2201      	movs	r2, #1
 801803c:	e7f4      	b.n	8018028 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x4f4>
 801803e:	f10d 083c 	add.w	r8, sp, #60	@ 0x3c
 8018042:	b18a      	cbz	r2, 8018068 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x534>
 8018044:	9a35      	ldr	r2, [sp, #212]	@ 0xd4
 8018046:	4658      	mov	r0, fp
 8018048:	9905      	ldr	r1, [sp, #20]
 801804a:	e9cd 4202 	strd	r4, r2, [sp, #8]
 801804e:	e9cd 8700 	strd	r8, r7, [sp]
 8018052:	462a      	mov	r2, r5
 8018054:	f7ff fd01 	bl	8017a5a <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE>
 8018058:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 801805a:	9303      	str	r3, [sp, #12]
 801805c:	9b06      	ldr	r3, [sp, #24]
 801805e:	9302      	str	r3, [sp, #8]
 8018060:	9b07      	ldr	r3, [sp, #28]
 8018062:	e9cd 8300 	strd	r8, r3, [sp]
 8018066:	e79e      	b.n	8017fa6 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x472>
 8018068:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 801806a:	4658      	mov	r0, fp
 801806c:	9905      	ldr	r1, [sp, #20]
 801806e:	e9cd 4302 	strd	r4, r3, [sp, #8]
 8018072:	e9cd 8700 	strd	r8, r7, [sp]
 8018076:	4613      	mov	r3, r2
 8018078:	462a      	mov	r2, r5
 801807a:	f7ff fcee 	bl	8017a5a <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE>
 801807e:	9b07      	ldr	r3, [sp, #28]
 8018080:	1c5f      	adds	r7, r3, #1
 8018082:	9b06      	ldr	r3, [sp, #24]
 8018084:	199c      	adds	r4, r3, r6
 8018086:	e79b      	b.n	8017fc0 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x48c>
 8018088:	2b00      	cmp	r3, #0
 801808a:	d1bb      	bne.n	8018004 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x4d0>
 801808c:	f1ba 0f00 	cmp.w	sl, #0
 8018090:	f000 80b4 	beq.w	80181fc <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x6c8>
 8018094:	9a35      	ldr	r2, [sp, #212]	@ 0xd4
 8018096:	4658      	mov	r0, fp
 8018098:	9701      	str	r7, [sp, #4]
 801809a:	2701      	movs	r7, #1
 801809c:	9905      	ldr	r1, [sp, #20]
 801809e:	e9cd 4202 	strd	r4, r2, [sp, #8]
 80180a2:	aa0f      	add	r2, sp, #60	@ 0x3c
 80180a4:	9200      	str	r2, [sp, #0]
 80180a6:	462a      	mov	r2, r5
 80180a8:	f7ff fcd7 	bl	8017a5a <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE>
 80180ac:	f8cd a024 	str.w	sl, [sp, #36]	@ 0x24
 80180b0:	f04f 0802 	mov.w	r8, #2
 80180b4:	e756      	b.n	8017f64 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x430>
 80180b6:	b13b      	cbz	r3, 80180c8 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x594>
 80180b8:	9b07      	ldr	r3, [sp, #28]
 80180ba:	3301      	adds	r3, #1
 80180bc:	441f      	add	r7, r3
 80180be:	9b06      	ldr	r3, [sp, #24]
 80180c0:	441c      	add	r4, r3
 80180c2:	fa16 f484 	uxtah	r4, r6, r4
 80180c6:	e79f      	b.n	8018008 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x4d4>
 80180c8:	9a07      	ldr	r2, [sp, #28]
 80180ca:	3201      	adds	r2, #1
 80180cc:	920c      	str	r2, [sp, #48]	@ 0x30
 80180ce:	9a06      	ldr	r2, [sp, #24]
 80180d0:	4416      	add	r6, r2
 80180d2:	b2b6      	uxth	r6, r6
 80180d4:	f1ba 0f00 	cmp.w	sl, #0
 80180d8:	f000 8096 	beq.w	8018208 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x6d4>
 80180dc:	9a35      	ldr	r2, [sp, #212]	@ 0xd4
 80180de:	4658      	mov	r0, fp
 80180e0:	9701      	str	r7, [sp, #4]
 80180e2:	9905      	ldr	r1, [sp, #20]
 80180e4:	e9cd 4202 	strd	r4, r2, [sp, #8]
 80180e8:	aa0f      	add	r2, sp, #60	@ 0x3c
 80180ea:	9200      	str	r2, [sp, #0]
 80180ec:	462a      	mov	r2, r5
 80180ee:	f7ff fcb4 	bl	8017a5a <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE>
 80180f2:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 80180f4:	f8cd a024 	str.w	sl, [sp, #36]	@ 0x24
 80180f8:	e7da      	b.n	80180b0 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x57c>
 80180fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80180fc:	2b00      	cmp	r3, #0
 80180fe:	f47f af6c 	bne.w	8017fda <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x4a6>
 8018102:	f1a8 0202 	sub.w	r2, r8, #2
 8018106:	4253      	negs	r3, r2
 8018108:	4153      	adcs	r3, r2
 801810a:	9309      	str	r3, [sp, #36]	@ 0x24
 801810c:	e765      	b.n	8017fda <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x4a6>
 801810e:	f1b8 0f02 	cmp.w	r8, #2
 8018112:	d104      	bne.n	801811e <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x5ea>
 8018114:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 8018116:	9701      	str	r7, [sp, #4]
 8018118:	e9cd 4302 	strd	r4, r3, [sp, #8]
 801811c:	e63e      	b.n	8017d9c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x268>
 801811e:	f008 0805 	and.w	r8, r8, #5
 8018122:	f1b8 0f04 	cmp.w	r8, #4
 8018126:	d104      	bne.n	8018132 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x5fe>
 8018128:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 801812a:	9701      	str	r7, [sp, #4]
 801812c:	e9cd 4302 	strd	r4, r3, [sp, #8]
 8018130:	e62a      	b.n	8017d88 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x254>
 8018132:	f1b8 0f05 	cmp.w	r8, #5
 8018136:	f47f ae52 	bne.w	8017dde <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x2aa>
 801813a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801813c:	ae0f      	add	r6, sp, #60	@ 0x3c
 801813e:	b183      	cbz	r3, 8018162 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x62e>
 8018140:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 8018142:	462a      	mov	r2, r5
 8018144:	9905      	ldr	r1, [sp, #20]
 8018146:	4658      	mov	r0, fp
 8018148:	e9cd 4302 	strd	r4, r3, [sp, #8]
 801814c:	e9cd 6700 	strd	r6, r7, [sp]
 8018150:	2300      	movs	r3, #0
 8018152:	f7ff fc82 	bl	8017a5a <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE>
 8018156:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 8018158:	9303      	str	r3, [sp, #12]
 801815a:	9b06      	ldr	r3, [sp, #24]
 801815c:	9302      	str	r3, [sp, #8]
 801815e:	9b07      	ldr	r3, [sp, #28]
 8018160:	e656      	b.n	8017e10 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x2dc>
 8018162:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 8018164:	9303      	str	r3, [sp, #12]
 8018166:	9b06      	ldr	r3, [sp, #24]
 8018168:	441c      	add	r4, r3
 801816a:	9b07      	ldr	r3, [sp, #28]
 801816c:	b2a4      	uxth	r4, r4
 801816e:	441f      	add	r7, r3
 8018170:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018172:	9402      	str	r4, [sp, #8]
 8018174:	e9cd 6700 	strd	r6, r7, [sp]
 8018178:	e62c      	b.n	8017dd4 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x2a0>
 801817a:	9906      	ldr	r1, [sp, #24]
 801817c:	2900      	cmp	r1, #0
 801817e:	f47f ad87 	bne.w	8017c90 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x15c>
 8018182:	b96a      	cbnz	r2, 80181a0 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x66c>
 8018184:	2e03      	cmp	r6, #3
 8018186:	f63f adc6 	bhi.w	8017d16 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x1e2>
 801818a:	a201      	add	r2, pc, #4	@ (adr r2, 8018190 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x65c>)
 801818c:	f852 f026 	ldr.w	pc, [r2, r6, lsl #2]
 8018190:	08017c9d 	.word	0x08017c9d
 8018194:	08017cab 	.word	0x08017cab
 8018198:	08017d07 	.word	0x08017d07
 801819c:	08017d21 	.word	0x08017d21
 80181a0:	2e03      	cmp	r6, #3
 80181a2:	f63f adb8 	bhi.w	8017d16 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x1e2>
 80181a6:	a201      	add	r2, pc, #4	@ (adr r2, 80181ac <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x678>)
 80181a8:	f852 f026 	ldr.w	pc, [r2, r6, lsl #2]
 80181ac:	08017c9d 	.word	0x08017c9d
 80181b0:	08017cab 	.word	0x08017cab
 80181b4:	08017ceb 	.word	0x08017ceb
 80181b8:	08017d3d 	.word	0x08017d3d
 80181bc:	2301      	movs	r3, #1
 80181be:	9708      	str	r7, [sp, #32]
 80181c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80181c2:	e5d8      	b.n	8017d76 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x242>
 80181c4:	f1b8 0f07 	cmp.w	r8, #7
 80181c8:	d897      	bhi.n	80180fa <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x5c6>
 80181ca:	a201      	add	r2, pc, #4	@ (adr r2, 80181d0 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x69c>)
 80181cc:	f852 f028 	ldr.w	pc, [r2, r8, lsl #2]
 80181d0:	08017f57 	.word	0x08017f57
 80181d4:	080180fb 	.word	0x080180fb
 80181d8:	08017f73 	.word	0x08017f73
 80181dc:	080180fb 	.word	0x080180fb
 80181e0:	08017fcd 	.word	0x08017fcd
 80181e4:	08018027 	.word	0x08018027
 80181e8:	08018089 	.word	0x08018089
 80181ec:	080180b7 	.word	0x080180b7
 80181f0:	2301      	movs	r3, #1
 80181f2:	9606      	str	r6, [sp, #24]
 80181f4:	f04f 0805 	mov.w	r8, #5
 80181f8:	9307      	str	r3, [sp, #28]
 80181fa:	e6ee      	b.n	8017fda <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x4a6>
 80181fc:	2301      	movs	r3, #1
 80181fe:	9606      	str	r6, [sp, #24]
 8018200:	f04f 0807 	mov.w	r8, #7
 8018204:	9307      	str	r3, [sp, #28]
 8018206:	e6e8      	b.n	8017fda <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x4a6>
 8018208:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801820a:	e9cd 6306 	strd	r6, r3, [sp, #24]
 801820e:	e6e4      	b.n	8017fda <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x4a6>

08018210 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 8018210:	b530      	push	{r4, r5, lr}
 8018212:	8ac4      	ldrh	r4, [r0, #22]
 8018214:	8b45      	ldrh	r5, [r0, #26]
 8018216:	8343      	strh	r3, [r0, #26]
 8018218:	442c      	add	r4, r5
 801821a:	1ae4      	subs	r4, r4, r3
 801821c:	8b83      	ldrh	r3, [r0, #28]
 801821e:	82c4      	strh	r4, [r0, #22]
 8018220:	8b04      	ldrh	r4, [r0, #24]
 8018222:	4422      	add	r2, r4
 8018224:	440c      	add	r4, r1
 8018226:	1a59      	subs	r1, r3, r1
 8018228:	83c2      	strh	r2, [r0, #30]
 801822a:	8304      	strh	r4, [r0, #24]
 801822c:	8381      	strh	r1, [r0, #28]
 801822e:	bd30      	pop	{r4, r5, pc}

08018230 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>:
 8018230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018234:	4604      	mov	r4, r0
 8018236:	8a47      	ldrh	r7, [r0, #18]
 8018238:	68c0      	ldr	r0, [r0, #12]
 801823a:	b085      	sub	sp, #20
 801823c:	6803      	ldr	r3, [r0, #0]
 801823e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018240:	4798      	blx	r3
 8018242:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 8018246:	7a63      	ldrb	r3, [r4, #9]
 8018248:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 801824c:	3b01      	subs	r3, #1
 801824e:	42b7      	cmp	r7, r6
 8018250:	bfac      	ite	ge
 8018252:	f04f 0900 	movge.w	r9, #0
 8018256:	f04f 0901 	movlt.w	r9, #1
 801825a:	2b05      	cmp	r3, #5
 801825c:	d804      	bhi.n	8018268 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x38>
 801825e:	e8df f003 	tbb	[pc, r3]
 8018262:	0854      	.short	0x0854
 8018264:	4c4c470f 	.word	0x4c4c470f
 8018268:	2500      	movs	r5, #0
 801826a:	46a9      	mov	r9, r5
 801826c:	462e      	mov	r6, r5
 801826e:	462f      	mov	r7, r5
 8018270:	e00e      	b.n	8018290 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8018272:	42b7      	cmp	r7, r6
 8018274:	f04f 0500 	mov.w	r5, #0
 8018278:	bfb4      	ite	lt
 801827a:	2600      	movlt	r6, #0
 801827c:	2601      	movge	r6, #1
 801827e:	e7f6      	b.n	801826e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 8018280:	42b7      	cmp	r7, r6
 8018282:	464d      	mov	r5, r9
 8018284:	f04f 0900 	mov.w	r9, #0
 8018288:	bfb4      	ite	lt
 801828a:	2600      	movlt	r6, #0
 801828c:	2601      	movge	r6, #1
 801828e:	464f      	mov	r7, r9
 8018290:	f04f 0800 	mov.w	r8, #0
 8018294:	f8a4 8016 	strh.w	r8, [r4, #22]
 8018298:	f8a4 8018 	strh.w	r8, [r4, #24]
 801829c:	f8cd 8004 	str.w	r8, [sp, #4]
 80182a0:	2300      	movs	r3, #0
 80182a2:	9303      	str	r3, [sp, #12]
 80182a4:	8823      	ldrh	r3, [r4, #0]
 80182a6:	2b20      	cmp	r3, #32
 80182a8:	d033      	beq.n	8018312 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe2>
 80182aa:	f242 010b 	movw	r1, #8203	@ 0x200b
 80182ae:	1a5a      	subs	r2, r3, r1
 80182b0:	f1d2 0a00 	rsbs	sl, r2, #0
 80182b4:	eb4a 0a02 	adc.w	sl, sl, r2
 80182b8:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 80182bc:	4293      	cmp	r3, r2
 80182be:	d008      	beq.n	80182d2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 80182c0:	428b      	cmp	r3, r1
 80182c2:	9a01      	ldr	r2, [sp, #4]
 80182c4:	bf0e      	itee	eq
 80182c6:	f04f 0a01 	moveq.w	sl, #1
 80182ca:	461a      	movne	r2, r3
 80182cc:	f04f 0a00 	movne.w	sl, #0
 80182d0:	9201      	str	r2, [sp, #4]
 80182d2:	ab03      	add	r3, sp, #12
 80182d4:	68e2      	ldr	r2, [r4, #12]
 80182d6:	7a21      	ldrb	r1, [r4, #8]
 80182d8:	6860      	ldr	r0, [r4, #4]
 80182da:	f003 fac3 	bl	801b864 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80182de:	8020      	strh	r0, [r4, #0]
 80182e0:	b9d8      	cbnz	r0, 801831a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xea>
 80182e2:	8ba2      	ldrh	r2, [r4, #28]
 80182e4:	2300      	movs	r3, #0
 80182e6:	4611      	mov	r1, r2
 80182e8:	4620      	mov	r0, r4
 80182ea:	f7ff ff91 	bl	8018210 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 80182ee:	e06e      	b.n	80183ce <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 80182f0:	2500      	movs	r5, #0
 80182f2:	2701      	movs	r7, #1
 80182f4:	46a9      	mov	r9, r5
 80182f6:	462e      	mov	r6, r5
 80182f8:	e7ca      	b.n	8018290 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 80182fa:	42b7      	cmp	r7, r6
 80182fc:	f04f 0500 	mov.w	r5, #0
 8018300:	bfb4      	ite	lt
 8018302:	2700      	movlt	r7, #0
 8018304:	2701      	movge	r7, #1
 8018306:	462e      	mov	r6, r5
 8018308:	e7c2      	b.n	8018290 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 801830a:	2500      	movs	r5, #0
 801830c:	2601      	movs	r6, #1
 801830e:	46a9      	mov	r9, r5
 8018310:	e7ad      	b.n	801826e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 8018312:	9301      	str	r3, [sp, #4]
 8018314:	f04f 0a01 	mov.w	sl, #1
 8018318:	e7db      	b.n	80182d2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 801831a:	8b63      	ldrh	r3, [r4, #26]
 801831c:	280a      	cmp	r0, #10
 801831e:	f103 0301 	add.w	r3, r3, #1
 8018322:	8363      	strh	r3, [r4, #26]
 8018324:	d0dd      	beq.n	80182e2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb2>
 8018326:	9a03      	ldr	r2, [sp, #12]
 8018328:	bb62      	cbnz	r2, 8018384 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x154>
 801832a:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 801832e:	4298      	cmp	r0, r3
 8018330:	d003      	beq.n	801833a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 8018332:	f242 030b 	movw	r3, #8203	@ 0x200b
 8018336:	4298      	cmp	r0, r3
 8018338:	d1b2      	bne.n	80182a0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801833a:	8823      	ldrh	r3, [r4, #0]
 801833c:	8ba1      	ldrh	r1, [r4, #28]
 801833e:	2b20      	cmp	r3, #32
 8018340:	d003      	beq.n	801834a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x11a>
 8018342:	f242 000b 	movw	r0, #8203	@ 0x200b
 8018346:	4283      	cmp	r3, r0
 8018348:	d131      	bne.n	80183ae <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x17e>
 801834a:	f1ba 0f00 	cmp.w	sl, #0
 801834e:	bf0a      	itet	eq
 8018350:	4688      	moveq	r8, r1
 8018352:	4650      	movne	r0, sl
 8018354:	2001      	moveq	r0, #1
 8018356:	440a      	add	r2, r1
 8018358:	8b23      	ldrh	r3, [r4, #24]
 801835a:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 801835e:	b292      	uxth	r2, r2
 8018360:	83a2      	strh	r2, [r4, #28]
 8018362:	4413      	add	r3, r2
 8018364:	f1b9 0f00 	cmp.w	r9, #0
 8018368:	d102      	bne.n	8018370 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x140>
 801836a:	2d00      	cmp	r5, #0
 801836c:	d042      	beq.n	80183f4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1c4>
 801836e:	b300      	cbz	r0, 80183b2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x182>
 8018370:	8c21      	ldrh	r1, [r4, #32]
 8018372:	4419      	add	r1, r3
 8018374:	458c      	cmp	ip, r1
 8018376:	da37      	bge.n	80183e8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 8018378:	8ae1      	ldrh	r1, [r4, #22]
 801837a:	2900      	cmp	r1, #0
 801837c:	d034      	beq.n	80183e8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 801837e:	4563      	cmp	r3, ip
 8018380:	dd8e      	ble.n	80182a0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8018382:	e01d      	b.n	80183c0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x190>
 8018384:	8893      	ldrh	r3, [r2, #4]
 8018386:	9901      	ldr	r1, [sp, #4]
 8018388:	8023      	strh	r3, [r4, #0]
 801838a:	f892 b00d 	ldrb.w	fp, [r2, #13]
 801838e:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 8018392:	f40b 7080 	and.w	r0, fp, #256	@ 0x100
 8018396:	f892 b00a 	ldrb.w	fp, [r2, #10]
 801839a:	ea4b 0b00 	orr.w	fp, fp, r0
 801839e:	68e0      	ldr	r0, [r4, #12]
 80183a0:	6803      	ldr	r3, [r0, #0]
 80183a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80183a4:	4798      	blx	r3
 80183a6:	eb0b 0200 	add.w	r2, fp, r0
 80183aa:	b292      	uxth	r2, r2
 80183ac:	e7c5      	b.n	801833a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 80183ae:	2000      	movs	r0, #0
 80183b0:	e7d1      	b.n	8018356 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x126>
 80183b2:	4563      	cmp	r3, ip
 80183b4:	f77f af74 	ble.w	80182a0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80183b8:	8ae3      	ldrh	r3, [r4, #22]
 80183ba:	2b00      	cmp	r3, #0
 80183bc:	f43f af70 	beq.w	80182a0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80183c0:	2301      	movs	r3, #1
 80183c2:	8c22      	ldrh	r2, [r4, #32]
 80183c4:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
 80183c8:	8be3      	ldrh	r3, [r4, #30]
 80183ca:	4413      	add	r3, r2
 80183cc:	83e3      	strh	r3, [r4, #30]
 80183ce:	68e0      	ldr	r0, [r4, #12]
 80183d0:	6803      	ldr	r3, [r0, #0]
 80183d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80183d4:	4798      	blx	r3
 80183d6:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 80183da:	4418      	add	r0, r3
 80183dc:	8a63      	ldrh	r3, [r4, #18]
 80183de:	1a18      	subs	r0, r3, r0
 80183e0:	8260      	strh	r0, [r4, #18]
 80183e2:	b005      	add	sp, #20
 80183e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80183e8:	2300      	movs	r3, #0
 80183ea:	4611      	mov	r1, r2
 80183ec:	4620      	mov	r0, r4
 80183ee:	f7ff ff0f 	bl	8018210 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 80183f2:	e755      	b.n	80182a0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80183f4:	4563      	cmp	r3, ip
 80183f6:	dd14      	ble.n	8018422 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1f2>
 80183f8:	b117      	cbz	r7, 8018400 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1d0>
 80183fa:	2301      	movs	r3, #1
 80183fc:	460a      	mov	r2, r1
 80183fe:	e772      	b.n	80182e6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb6>
 8018400:	2e00      	cmp	r6, #0
 8018402:	f43f af4d 	beq.w	80182a0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8018406:	2800      	cmp	r0, #0
 8018408:	f47f af4a 	bne.w	80182a0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801840c:	f1ba 0f00 	cmp.w	sl, #0
 8018410:	d002      	beq.n	8018418 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1e8>
 8018412:	2301      	movs	r3, #1
 8018414:	4642      	mov	r2, r8
 8018416:	e767      	b.n	80182e8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb8>
 8018418:	8ae3      	ldrh	r3, [r4, #22]
 801841a:	2b00      	cmp	r3, #0
 801841c:	f43f af40 	beq.w	80182a0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8018420:	e7d5      	b.n	80183ce <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 8018422:	2800      	cmp	r0, #0
 8018424:	f47f af3c 	bne.w	80182a0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8018428:	f1ba 0f00 	cmp.w	sl, #0
 801842c:	f43f af38 	beq.w	80182a0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8018430:	2301      	movs	r3, #1
 8018432:	4642      	mov	r2, r8
 8018434:	e7da      	b.n	80183ec <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1bc>

08018436 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 8018436:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018438:	4605      	mov	r5, r0
 801843a:	b08f      	sub	sp, #60	@ 0x3c
 801843c:	4617      	mov	r7, r2
 801843e:	461c      	mov	r4, r3
 8018440:	460e      	mov	r6, r1
 8018442:	b1d1      	cbz	r1, 801847a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 8018444:	681b      	ldr	r3, [r3, #0]
 8018446:	4620      	mov	r0, r4
 8018448:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801844a:	4798      	blx	r3
 801844c:	4240      	negs	r0, r0
 801844e:	9603      	str	r6, [sp, #12]
 8018450:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8018454:	b200      	sxth	r0, r0
 8018456:	9700      	str	r7, [sp, #0]
 8018458:	f8bd 2050 	ldrh.w	r2, [sp, #80]	@ 0x50
 801845c:	4629      	mov	r1, r5
 801845e:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8018462:	2401      	movs	r4, #1
 8018464:	a805      	add	r0, sp, #20
 8018466:	f7ff f8e3 	bl	8017630 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 801846a:	a805      	add	r0, sp, #20
 801846c:	f7ff fee0 	bl	8018230 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8018470:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8018474:	b163      	cbz	r3, 8018490 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x5a>
 8018476:	3401      	adds	r4, #1
 8018478:	e7f7      	b.n	801846a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 801847a:	2401      	movs	r4, #1
 801847c:	f003 fabe 	bl	801b9fc <_ZN8touchgfx12TextProvider11getNextCharEv>
 8018480:	280a      	cmp	r0, #10
 8018482:	4628      	mov	r0, r5
 8018484:	bf08      	it	eq
 8018486:	3401      	addeq	r4, #1
 8018488:	f003 fab8 	bl	801b9fc <_ZN8touchgfx12TextProvider11getNextCharEv>
 801848c:	2800      	cmp	r0, #0
 801848e:	d1f7      	bne.n	8018480 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 8018490:	b2a0      	uxth	r0, r4
 8018492:	b00f      	add	sp, #60	@ 0x3c
 8018494:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018496 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 8018496:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801849a:	b0e7      	sub	sp, #412	@ 0x19c
 801849c:	468a      	mov	sl, r1
 801849e:	461c      	mov	r4, r3
 80184a0:	f8dd 91c0 	ldr.w	r9, [sp, #448]	@ 0x1c0
 80184a4:	9006      	str	r0, [sp, #24]
 80184a6:	f1b9 0f00 	cmp.w	r9, #0
 80184aa:	f000 80c6 	beq.w	801863a <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 80184ae:	681b      	ldr	r3, [r3, #0]
 80184b0:	2b00      	cmp	r3, #0
 80184b2:	f000 80c2 	beq.w	801863a <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 80184b6:	7ba3      	ldrb	r3, [r4, #14]
 80184b8:	2b00      	cmp	r3, #0
 80184ba:	f000 80be 	beq.w	801863a <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 80184be:	af09      	add	r7, sp, #36	@ 0x24
 80184c0:	6810      	ldr	r0, [r2, #0]
 80184c2:	6851      	ldr	r1, [r2, #4]
 80184c4:	2500      	movs	r5, #0
 80184c6:	463b      	mov	r3, r7
 80184c8:	f9ba 2004 	ldrsh.w	r2, [sl, #4]
 80184cc:	7966      	ldrb	r6, [r4, #5]
 80184ce:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 80184d2:	79a2      	ldrb	r2, [r4, #6]
 80184d4:	950b      	str	r5, [sp, #44]	@ 0x2c
 80184d6:	c303      	stmia	r3!, {r0, r1}
 80184d8:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
 80184dc:	a90b      	add	r1, sp, #44	@ 0x2c
 80184de:	4638      	mov	r0, r7
 80184e0:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 80184e4:	f7ff f923 	bl	801772e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 80184e8:	a90b      	add	r1, sp, #44	@ 0x2c
 80184ea:	79a2      	ldrb	r2, [r4, #6]
 80184ec:	4608      	mov	r0, r1
 80184ee:	f7ff f91e 	bl	801772e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 80184f2:	2e00      	cmp	r6, #0
 80184f4:	d16a      	bne.n	80185cc <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x136>
 80184f6:	f894 8004 	ldrb.w	r8, [r4, #4]
 80184fa:	ebb8 0805 	subs.w	r8, r8, r5
 80184fe:	bf18      	it	ne
 8018500:	f04f 0801 	movne.w	r8, #1
 8018504:	4645      	mov	r5, r8
 8018506:	a81b      	add	r0, sp, #108	@ 0x6c
 8018508:	f002 f9ef 	bl	801a8ea <_ZN8touchgfx12TextProviderC1Ev>
 801850c:	6820      	ldr	r0, [r4, #0]
 801850e:	6803      	ldr	r3, [r0, #0]
 8018510:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8018512:	4798      	blx	r3
 8018514:	4683      	mov	fp, r0
 8018516:	6820      	ldr	r0, [r4, #0]
 8018518:	6803      	ldr	r3, [r0, #0]
 801851a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801851c:	4798      	blx	r3
 801851e:	465b      	mov	r3, fp
 8018520:	9a71      	ldr	r2, [sp, #452]	@ 0x1c4
 8018522:	4649      	mov	r1, r9
 8018524:	9000      	str	r0, [sp, #0]
 8018526:	a81b      	add	r0, sp, #108	@ 0x6c
 8018528:	f002 fa3a 	bl	801a9a0 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801852c:	6820      	ldr	r0, [r4, #0]
 801852e:	6803      	ldr	r3, [r0, #0]
 8018530:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018532:	4798      	blx	r3
 8018534:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018538:	4403      	add	r3, r0
 801853a:	9305      	str	r3, [sp, #20]
 801853c:	6823      	ldr	r3, [r4, #0]
 801853e:	f893 b009 	ldrb.w	fp, [r3, #9]
 8018542:	4483      	add	fp, r0
 8018544:	a834      	add	r0, sp, #208	@ 0xd0
 8018546:	f002 f9d0 	bl	801a8ea <_ZN8touchgfx12TextProviderC1Ev>
 801854a:	7c23      	ldrb	r3, [r4, #16]
 801854c:	b17b      	cbz	r3, 801856e <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd8>
 801854e:	6820      	ldr	r0, [r4, #0]
 8018550:	6803      	ldr	r3, [r0, #0]
 8018552:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8018554:	4798      	blx	r3
 8018556:	9007      	str	r0, [sp, #28]
 8018558:	6820      	ldr	r0, [r4, #0]
 801855a:	6802      	ldr	r2, [r0, #0]
 801855c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 801855e:	4790      	blx	r2
 8018560:	9b07      	ldr	r3, [sp, #28]
 8018562:	9000      	str	r0, [sp, #0]
 8018564:	4649      	mov	r1, r9
 8018566:	9a71      	ldr	r2, [sp, #452]	@ 0x1c4
 8018568:	a834      	add	r0, sp, #208	@ 0xd0
 801856a:	f002 fa19 	bl	801a9a0 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801856e:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 8018572:	a812      	add	r0, sp, #72	@ 0x48
 8018574:	7be2      	ldrb	r2, [r4, #15]
 8018576:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 801857a:	1a8a      	subs	r2, r1, r2
 801857c:	7c21      	ldrb	r1, [r4, #16]
 801857e:	9103      	str	r1, [sp, #12]
 8018580:	b292      	uxth	r2, r2
 8018582:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8018586:	9102      	str	r1, [sp, #8]
 8018588:	6821      	ldr	r1, [r4, #0]
 801858a:	9101      	str	r1, [sp, #4]
 801858c:	7961      	ldrb	r1, [r4, #5]
 801858e:	9100      	str	r1, [sp, #0]
 8018590:	a934      	add	r1, sp, #208	@ 0xd0
 8018592:	f7ff f84d 	bl	8017630 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 8018596:	7c23      	ldrb	r3, [r4, #16]
 8018598:	b30b      	cbz	r3, 80185de <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x148>
 801859a:	f64f 79ff 	movw	r9, #65535	@ 0xffff
 801859e:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 80185a2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80185a6:	445b      	add	r3, fp
 80185a8:	4293      	cmp	r3, r2
 80185aa:	da49      	bge.n	8018640 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1aa>
 80185ac:	a812      	add	r0, sp, #72	@ 0x48
 80185ae:	f7ff fe3f 	bl	8018230 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 80185b2:	f8bd 305e 	ldrh.w	r3, [sp, #94]	@ 0x5e
 80185b6:	3b01      	subs	r3, #1
 80185b8:	b29b      	uxth	r3, r3
 80185ba:	454b      	cmp	r3, r9
 80185bc:	9307      	str	r3, [sp, #28]
 80185be:	d029      	beq.n	8018614 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x17e>
 80185c0:	4631      	mov	r1, r6
 80185c2:	a81b      	add	r0, sp, #108	@ 0x6c
 80185c4:	f7ef fd88 	bl	80080d8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80185c8:	9b07      	ldr	r3, [sp, #28]
 80185ca:	e7f4      	b.n	80185b6 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x120>
 80185cc:	2e01      	cmp	r6, #1
 80185ce:	d103      	bne.n	80185d8 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x142>
 80185d0:	7925      	ldrb	r5, [r4, #4]
 80185d2:	3d02      	subs	r5, #2
 80185d4:	bf18      	it	ne
 80185d6:	2501      	movne	r5, #1
 80185d8:	f04f 0801 	mov.w	r8, #1
 80185dc:	e793      	b.n	8018506 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x70>
 80185de:	f8bd 9014 	ldrh.w	r9, [sp, #20]
 80185e2:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 80185e6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80185ea:	445b      	add	r3, fp
 80185ec:	4293      	cmp	r3, r2
 80185ee:	da27      	bge.n	8018640 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1aa>
 80185f0:	a81b      	add	r0, sp, #108	@ 0x6c
 80185f2:	f003 fa03 	bl	801b9fc <_ZN8touchgfx12TextProvider11getNextCharEv>
 80185f6:	b300      	cbz	r0, 801863a <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 80185f8:	280a      	cmp	r0, #10
 80185fa:	d1f2      	bne.n	80185e2 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x14c>
 80185fc:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 8018600:	444b      	add	r3, r9
 8018602:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 8018606:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 801860a:	eba3 0309 	sub.w	r3, r3, r9
 801860e:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8018612:	e7e6      	b.n	80185e2 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x14c>
 8018614:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8018618:	f8bd 202e 	ldrh.w	r2, [sp, #46]	@ 0x2e
 801861c:	441a      	add	r2, r3
 801861e:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 8018622:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 8018626:	1ad3      	subs	r3, r2, r3
 8018628:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801862c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8018630:	b11b      	cbz	r3, 801863a <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 8018632:	f89d 306a 	ldrb.w	r3, [sp, #106]	@ 0x6a
 8018636:	2b00      	cmp	r3, #0
 8018638:	d0b1      	beq.n	801859e <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x108>
 801863a:	b067      	add	sp, #412	@ 0x19c
 801863c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018640:	2300      	movs	r3, #0
 8018642:	f8bd 202e 	ldrh.w	r2, [sp, #46]	@ 0x2e
 8018646:	4699      	mov	r9, r3
 8018648:	f8ad 203c 	strh.w	r2, [sp, #60]	@ 0x3c
 801864c:	e9cd 3a0d 	strd	r3, sl, [sp, #52]	@ 0x34
 8018650:	e9cd 7410 	strd	r7, r4, [sp, #64]	@ 0x40
 8018654:	7c23      	ldrb	r3, [r4, #16]
 8018656:	f8ad 9022 	strh.w	r9, [sp, #34]	@ 0x22
 801865a:	b113      	cbz	r3, 8018662 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1cc>
 801865c:	a812      	add	r0, sp, #72	@ 0x48
 801865e:	f7ff fde7 	bl	8018230 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8018662:	f1b8 0f00 	cmp.w	r8, #0
 8018666:	d068      	beq.n	801873a <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x2a4>
 8018668:	2d00      	cmp	r5, #0
 801866a:	d061      	beq.n	8018730 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x29a>
 801866c:	7c23      	ldrb	r3, [r4, #16]
 801866e:	b9c3      	cbnz	r3, 80186a2 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x20c>
 8018670:	2264      	movs	r2, #100	@ 0x64
 8018672:	a91b      	add	r1, sp, #108	@ 0x6c
 8018674:	a84d      	add	r0, sp, #308	@ 0x134
 8018676:	f013 f87c 	bl	802b772 <memcpy>
 801867a:	4633      	mov	r3, r6
 801867c:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8018680:	6821      	ldr	r1, [r4, #0]
 8018682:	a84d      	add	r0, sp, #308	@ 0x134
 8018684:	f7ff f817 	bl	80176b6 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8018688:	b200      	sxth	r0, r0
 801868a:	7922      	ldrb	r2, [r4, #4]
 801868c:	2e00      	cmp	r6, #0
 801868e:	d144      	bne.n	801871a <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x284>
 8018690:	2a01      	cmp	r2, #1
 8018692:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 8018696:	d107      	bne.n	80186a8 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x212>
 8018698:	1a1b      	subs	r3, r3, r0
 801869a:	2002      	movs	r0, #2
 801869c:	fb93 f3f0 	sdiv	r3, r3, r0
 80186a0:	e005      	b.n	80186ae <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x218>
 80186a2:	f9bd 0066 	ldrsh.w	r0, [sp, #102]	@ 0x66
 80186a6:	e7f0      	b.n	801868a <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f4>
 80186a8:	7be2      	ldrb	r2, [r4, #15]
 80186aa:	1a9b      	subs	r3, r3, r2
 80186ac:	1a1b      	subs	r3, r3, r0
 80186ae:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 80186b2:	7c23      	ldrb	r3, [r4, #16]
 80186b4:	2b00      	cmp	r3, #0
 80186b6:	d042      	beq.n	801873e <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x2a8>
 80186b8:	f8bd 205e 	ldrh.w	r2, [sp, #94]	@ 0x5e
 80186bc:	f89d 306a 	ldrb.w	r3, [sp, #106]	@ 0x6a
 80186c0:	f10d 0a34 	add.w	sl, sp, #52	@ 0x34
 80186c4:	f10d 0b6c 	add.w	fp, sp, #108	@ 0x6c
 80186c8:	9201      	str	r2, [sp, #4]
 80186ca:	f10d 0122 	add.w	r1, sp, #34	@ 0x22
 80186ce:	6822      	ldr	r2, [r4, #0]
 80186d0:	f8cd b000 	str.w	fp, [sp]
 80186d4:	9806      	ldr	r0, [sp, #24]
 80186d6:	e9cd 3a02 	strd	r3, sl, [sp, #8]
 80186da:	4633      	mov	r3, r6
 80186dc:	f7ff fa2a 	bl	8017b34 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE>
 80186e0:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80186e4:	f8ba 3008 	ldrh.w	r3, [sl, #8]
 80186e8:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 80186ec:	4413      	add	r3, r2
 80186ee:	1a8a      	subs	r2, r1, r2
 80186f0:	b21b      	sxth	r3, r3
 80186f2:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 80186f6:	f89d 206a 	ldrb.w	r2, [sp, #106]	@ 0x6a
 80186fa:	f8aa 3008 	strh.w	r3, [sl, #8]
 80186fe:	2a00      	cmp	r2, #0
 8018700:	d19b      	bne.n	801863a <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 8018702:	88fa      	ldrh	r2, [r7, #6]
 8018704:	8879      	ldrh	r1, [r7, #2]
 8018706:	440a      	add	r2, r1
 8018708:	b212      	sxth	r2, r2
 801870a:	4293      	cmp	r3, r2
 801870c:	dc95      	bgt.n	801863a <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 801870e:	4658      	mov	r0, fp
 8018710:	f002 f912 	bl	801a938 <_ZN8touchgfx12TextProvider11endOfStringEv>
 8018714:	2800      	cmp	r0, #0
 8018716:	d09d      	beq.n	8018654 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1be>
 8018718:	e78f      	b.n	801863a <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 801871a:	2a01      	cmp	r2, #1
 801871c:	d103      	bne.n	8018726 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x290>
 801871e:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 8018722:	4403      	add	r3, r0
 8018724:	e7b9      	b.n	801869a <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x204>
 8018726:	2a00      	cmp	r2, #0
 8018728:	d1c3      	bne.n	80186b2 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x21c>
 801872a:	7be3      	ldrb	r3, [r4, #15]
 801872c:	4403      	add	r3, r0
 801872e:	e7be      	b.n	80186ae <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x218>
 8018730:	7be2      	ldrb	r2, [r4, #15]
 8018732:	f8bd 3030 	ldrh.w	r3, [sp, #48]	@ 0x30
 8018736:	1a9b      	subs	r3, r3, r2
 8018738:	e7b9      	b.n	80186ae <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x218>
 801873a:	7be3      	ldrb	r3, [r4, #15]
 801873c:	e7b7      	b.n	80186ae <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x218>
 801873e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8018742:	e7bd      	b.n	80186c0 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x22a>

08018744 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8018744:	2b03      	cmp	r3, #3
 8018746:	d818      	bhi.n	801877a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 8018748:	e8df f003 	tbb	[pc, r3]
 801874c:	130d0602 	.word	0x130d0602
 8018750:	f9b0 2000 	ldrsh.w	r2, [r0]
 8018754:	1850      	adds	r0, r2, r1
 8018756:	4770      	bx	lr
 8018758:	8803      	ldrh	r3, [r0, #0]
 801875a:	8880      	ldrh	r0, [r0, #4]
 801875c:	4418      	add	r0, r3
 801875e:	b200      	sxth	r0, r0
 8018760:	1a80      	subs	r0, r0, r2
 8018762:	3801      	subs	r0, #1
 8018764:	4770      	bx	lr
 8018766:	8803      	ldrh	r3, [r0, #0]
 8018768:	8880      	ldrh	r0, [r0, #4]
 801876a:	4418      	add	r0, r3
 801876c:	b200      	sxth	r0, r0
 801876e:	1a40      	subs	r0, r0, r1
 8018770:	e7f7      	b.n	8018762 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8018772:	f9b0 0000 	ldrsh.w	r0, [r0]
 8018776:	4410      	add	r0, r2
 8018778:	4770      	bx	lr
 801877a:	2000      	movs	r0, #0
 801877c:	4770      	bx	lr

0801877e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801877e:	2b03      	cmp	r3, #3
 8018780:	d817      	bhi.n	80187b2 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 8018782:	e8df f003 	tbb	[pc, r3]
 8018786:	0602      	.short	0x0602
 8018788:	1009      	.short	0x1009
 801878a:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801878e:	1850      	adds	r0, r2, r1
 8018790:	4770      	bx	lr
 8018792:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8018796:	e7fa      	b.n	801878e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 8018798:	8843      	ldrh	r3, [r0, #2]
 801879a:	88c0      	ldrh	r0, [r0, #6]
 801879c:	4418      	add	r0, r3
 801879e:	b200      	sxth	r0, r0
 80187a0:	1a80      	subs	r0, r0, r2
 80187a2:	3801      	subs	r0, #1
 80187a4:	4770      	bx	lr
 80187a6:	8843      	ldrh	r3, [r0, #2]
 80187a8:	88c0      	ldrh	r0, [r0, #6]
 80187aa:	4418      	add	r0, r3
 80187ac:	b200      	sxth	r0, r0
 80187ae:	1a40      	subs	r0, r0, r1
 80187b0:	e7f7      	b.n	80187a2 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 80187b2:	2000      	movs	r0, #0
 80187b4:	4770      	bx	lr
	...

080187b8 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 80187b8:	4b01      	ldr	r3, [pc, #4]	@ (80187c0 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 80187ba:	2200      	movs	r2, #0
 80187bc:	601a      	str	r2, [r3, #0]
 80187be:	4770      	bx	lr
 80187c0:	20029ee8 	.word	0x20029ee8

080187c4 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 80187c4:	4603      	mov	r3, r0
 80187c6:	b1c8      	cbz	r0, 80187fc <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 80187c8:	0c02      	lsrs	r2, r0, #16
 80187ca:	0412      	lsls	r2, r2, #16
 80187cc:	b9a2      	cbnz	r2, 80187f8 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 80187ce:	0403      	lsls	r3, r0, #16
 80187d0:	2010      	movs	r0, #16
 80187d2:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 80187d6:	bf04      	itt	eq
 80187d8:	021b      	lsleq	r3, r3, #8
 80187da:	3008      	addeq	r0, #8
 80187dc:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 80187e0:	bf04      	itt	eq
 80187e2:	011b      	lsleq	r3, r3, #4
 80187e4:	3004      	addeq	r0, #4
 80187e6:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 80187ea:	bf04      	itt	eq
 80187ec:	009b      	lsleq	r3, r3, #2
 80187ee:	3002      	addeq	r0, #2
 80187f0:	2b00      	cmp	r3, #0
 80187f2:	db04      	blt.n	80187fe <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 80187f4:	3001      	adds	r0, #1
 80187f6:	4770      	bx	lr
 80187f8:	2000      	movs	r0, #0
 80187fa:	e7ea      	b.n	80187d2 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 80187fc:	2020      	movs	r0, #32
 80187fe:	4770      	bx	lr

08018800 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 8018800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018804:	b087      	sub	sp, #28
 8018806:	460d      	mov	r5, r1
 8018808:	4616      	mov	r6, r2
 801880a:	4698      	mov	r8, r3
 801880c:	4601      	mov	r1, r0
 801880e:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	@ 0x40
 8018812:	b120      	cbz	r0, 801881e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8018814:	b11a      	cbz	r2, 801881e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8018816:	2d1f      	cmp	r5, #31
 8018818:	d801      	bhi.n	801881e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 801881a:	2b1f      	cmp	r3, #31
 801881c:	d904      	bls.n	8018828 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x28>
 801881e:	2000      	movs	r0, #0
 8018820:	6038      	str	r0, [r7, #0]
 8018822:	b007      	add	sp, #28
 8018824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018828:	b97d      	cbnz	r5, 801884a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4a>
 801882a:	b143      	cbz	r3, 801883e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x3e>
 801882c:	4602      	mov	r2, r0
 801882e:	462b      	mov	r3, r5
 8018830:	4641      	mov	r1, r8
 8018832:	4630      	mov	r0, r6
 8018834:	e9cd 4700 	strd	r4, r7, [sp]
 8018838:	f7ff ffe2 	bl	8018800 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801883c:	e7f1      	b.n	8018822 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 801883e:	f04f 33ff 	mov.w	r3, #4294967295
 8018842:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8018846:	603b      	str	r3, [r7, #0]
 8018848:	e7eb      	b.n	8018822 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 801884a:	fa32 fa05 	lsrs.w	sl, r2, r5
 801884e:	d106      	bne.n	801885e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x5e>
 8018850:	4346      	muls	r6, r0
 8018852:	fbb6 f0f4 	udiv	r0, r6, r4
 8018856:	fb04 6610 	mls	r6, r4, r0, r6
 801885a:	603e      	str	r6, [r7, #0]
 801885c:	e7e1      	b.n	8018822 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 801885e:	2201      	movs	r2, #1
 8018860:	fa00 fb05 	lsl.w	fp, r0, r5
 8018864:	40aa      	lsls	r2, r5
 8018866:	fbbb f9f4 	udiv	r9, fp, r4
 801886a:	3a01      	subs	r2, #1
 801886c:	fb0a f309 	mul.w	r3, sl, r9
 8018870:	fb04 b919 	mls	r9, r4, r9, fp
 8018874:	4016      	ands	r6, r2
 8018876:	9303      	str	r3, [sp, #12]
 8018878:	4630      	mov	r0, r6
 801887a:	f7ff ffa3 	bl	80187c4 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801887e:	462b      	mov	r3, r5
 8018880:	460a      	mov	r2, r1
 8018882:	4601      	mov	r1, r0
 8018884:	4630      	mov	r0, r6
 8018886:	e9cd 4700 	strd	r4, r7, [sp]
 801888a:	f7ff ffb9 	bl	8018800 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801888e:	4606      	mov	r6, r0
 8018890:	4648      	mov	r0, r9
 8018892:	eb05 0108 	add.w	r1, r5, r8
 8018896:	f7ff ff95 	bl	80187c4 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801889a:	ab05      	add	r3, sp, #20
 801889c:	464a      	mov	r2, r9
 801889e:	e9cd 4300 	strd	r4, r3, [sp]
 80188a2:	4603      	mov	r3, r0
 80188a4:	4650      	mov	r0, sl
 80188a6:	f7ff ffab 	bl	8018800 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80188aa:	6839      	ldr	r1, [r7, #0]
 80188ac:	9a05      	ldr	r2, [sp, #20]
 80188ae:	9b03      	ldr	r3, [sp, #12]
 80188b0:	4411      	add	r1, r2
 80188b2:	fbb1 f2f4 	udiv	r2, r1, r4
 80188b6:	18d3      	adds	r3, r2, r3
 80188b8:	fb04 1412 	mls	r4, r4, r2, r1
 80188bc:	441e      	add	r6, r3
 80188be:	603c      	str	r4, [r7, #0]
 80188c0:	4430      	add	r0, r6
 80188c2:	e7ae      	b.n	8018822 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>

080188c4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 80188c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80188c8:	b085      	sub	sp, #20
 80188ca:	f1b0 0900 	subs.w	r9, r0, #0
 80188ce:	461d      	mov	r5, r3
 80188d0:	4617      	mov	r7, r2
 80188d2:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80188d4:	bfbb      	ittet	lt
 80188d6:	f1c9 0900 	rsblt	r9, r9, #0
 80188da:	f04f 36ff 	movlt.w	r6, #4294967295
 80188de:	2601      	movge	r6, #1
 80188e0:	6823      	ldrlt	r3, [r4, #0]
 80188e2:	bfbc      	itt	lt
 80188e4:	425b      	neglt	r3, r3
 80188e6:	6023      	strlt	r3, [r4, #0]
 80188e8:	2a00      	cmp	r2, #0
 80188ea:	da04      	bge.n	80188f6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 80188ec:	6823      	ldr	r3, [r4, #0]
 80188ee:	4257      	negs	r7, r2
 80188f0:	4276      	negs	r6, r6
 80188f2:	425b      	negs	r3, r3
 80188f4:	6023      	str	r3, [r4, #0]
 80188f6:	2d00      	cmp	r5, #0
 80188f8:	4638      	mov	r0, r7
 80188fa:	bfba      	itte	lt
 80188fc:	426d      	neglt	r5, r5
 80188fe:	f04f 38ff 	movlt.w	r8, #4294967295
 8018902:	f04f 0801 	movge.w	r8, #1
 8018906:	f7ff ff5d 	bl	80187c4 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801890a:	ab03      	add	r3, sp, #12
 801890c:	463a      	mov	r2, r7
 801890e:	e9cd 5300 	strd	r5, r3, [sp]
 8018912:	4603      	mov	r3, r0
 8018914:	4648      	mov	r0, r9
 8018916:	f7ff ff73 	bl	8018800 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801891a:	6823      	ldr	r3, [r4, #0]
 801891c:	9a03      	ldr	r2, [sp, #12]
 801891e:	4546      	cmp	r6, r8
 8018920:	441a      	add	r2, r3
 8018922:	fb92 f3f5 	sdiv	r3, r2, r5
 8018926:	4418      	add	r0, r3
 8018928:	fb05 2313 	mls	r3, r5, r3, r2
 801892c:	bf18      	it	ne
 801892e:	4240      	negne	r0, r0
 8018930:	1c72      	adds	r2, r6, #1
 8018932:	6023      	str	r3, [r4, #0]
 8018934:	d105      	bne.n	8018942 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8018936:	2b00      	cmp	r3, #0
 8018938:	f1c3 0200 	rsb	r2, r3, #0
 801893c:	db0b      	blt.n	8018956 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 801893e:	6022      	str	r2, [r4, #0]
 8018940:	e006      	b.n	8018950 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8018942:	2e01      	cmp	r6, #1
 8018944:	d104      	bne.n	8018950 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8018946:	2b00      	cmp	r3, #0
 8018948:	da02      	bge.n	8018950 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801894a:	442b      	add	r3, r5
 801894c:	3801      	subs	r0, #1
 801894e:	6023      	str	r3, [r4, #0]
 8018950:	b005      	add	sp, #20
 8018952:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018956:	3801      	subs	r0, #1
 8018958:	1b52      	subs	r2, r2, r5
 801895a:	e7f0      	b.n	801893e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>

0801895c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801895c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8018960:	4c1c      	ldr	r4, [pc, #112]	@ (80189d4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 8018962:	4605      	mov	r5, r0
 8018964:	6807      	ldr	r7, [r0, #0]
 8018966:	69a3      	ldr	r3, [r4, #24]
 8018968:	b92b      	cbnz	r3, 8018976 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 801896a:	6840      	ldr	r0, [r0, #4]
 801896c:	e9c5 7000 	strd	r7, r0, [r5]
 8018970:	b004      	add	sp, #16
 8018972:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018976:	f04f 0802 	mov.w	r8, #2
 801897a:	68a2      	ldr	r2, [r4, #8]
 801897c:	ae04      	add	r6, sp, #16
 801897e:	6820      	ldr	r0, [r4, #0]
 8018980:	fb93 f1f8 	sdiv	r1, r3, r8
 8018984:	440a      	add	r2, r1
 8018986:	69e1      	ldr	r1, [r4, #28]
 8018988:	f846 2d04 	str.w	r2, [r6, #-4]!
 801898c:	463a      	mov	r2, r7
 801898e:	9600      	str	r6, [sp, #0]
 8018990:	f7ff ff98 	bl	80188c4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8018994:	69a3      	ldr	r3, [r4, #24]
 8018996:	4607      	mov	r7, r0
 8018998:	686a      	ldr	r2, [r5, #4]
 801899a:	6a21      	ldr	r1, [r4, #32]
 801899c:	9600      	str	r6, [sp, #0]
 801899e:	6860      	ldr	r0, [r4, #4]
 80189a0:	f7ff ff90 	bl	80188c4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80189a4:	69a3      	ldr	r3, [r4, #24]
 80189a6:	6962      	ldr	r2, [r4, #20]
 80189a8:	4407      	add	r7, r0
 80189aa:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80189ac:	9600      	str	r6, [sp, #0]
 80189ae:	68e0      	ldr	r0, [r4, #12]
 80189b0:	fb93 f8f8 	sdiv	r8, r3, r8
 80189b4:	4442      	add	r2, r8
 80189b6:	9203      	str	r2, [sp, #12]
 80189b8:	682a      	ldr	r2, [r5, #0]
 80189ba:	f7ff ff83 	bl	80188c4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80189be:	4680      	mov	r8, r0
 80189c0:	9600      	str	r6, [sp, #0]
 80189c2:	69a3      	ldr	r3, [r4, #24]
 80189c4:	686a      	ldr	r2, [r5, #4]
 80189c6:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80189c8:	6920      	ldr	r0, [r4, #16]
 80189ca:	f7ff ff7b 	bl	80188c4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80189ce:	4440      	add	r0, r8
 80189d0:	e7cc      	b.n	801896c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 80189d2:	bf00      	nop
 80189d4:	20029eec 	.word	0x20029eec

080189d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 80189d8:	4b07      	ldr	r3, [pc, #28]	@ (80189f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 80189da:	781b      	ldrb	r3, [r3, #0]
 80189dc:	2b01      	cmp	r3, #1
 80189de:	d109      	bne.n	80189f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 80189e0:	f9b1 3000 	ldrsh.w	r3, [r1]
 80189e4:	f9b0 2000 	ldrsh.w	r2, [r0]
 80189e8:	8003      	strh	r3, [r0, #0]
 80189ea:	4b04      	ldr	r3, [pc, #16]	@ (80189fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 80189ec:	881b      	ldrh	r3, [r3, #0]
 80189ee:	3b01      	subs	r3, #1
 80189f0:	1a9b      	subs	r3, r3, r2
 80189f2:	800b      	strh	r3, [r1, #0]
 80189f4:	4770      	bx	lr
 80189f6:	bf00      	nop
 80189f8:	20029ed0 	.word	0x20029ed0
 80189fc:	20029ecc 	.word	0x20029ecc

08018a00 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8018a00:	4b07      	ldr	r3, [pc, #28]	@ (8018a20 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8018a02:	b510      	push	{r4, lr}
 8018a04:	781b      	ldrb	r3, [r3, #0]
 8018a06:	2b01      	cmp	r3, #1
 8018a08:	d108      	bne.n	8018a1c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8018a0a:	4b06      	ldr	r3, [pc, #24]	@ (8018a24 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8018a0c:	880c      	ldrh	r4, [r1, #0]
 8018a0e:	881b      	ldrh	r3, [r3, #0]
 8018a10:	f9b0 2000 	ldrsh.w	r2, [r0]
 8018a14:	3b01      	subs	r3, #1
 8018a16:	1b1b      	subs	r3, r3, r4
 8018a18:	8003      	strh	r3, [r0, #0]
 8018a1a:	800a      	strh	r2, [r1, #0]
 8018a1c:	bd10      	pop	{r4, pc}
 8018a1e:	bf00      	nop
 8018a20:	20029ed0 	.word	0x20029ed0
 8018a24:	20029ecc 	.word	0x20029ecc

08018a28 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8018a28:	4b0a      	ldr	r3, [pc, #40]	@ (8018a54 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 8018a2a:	b510      	push	{r4, lr}
 8018a2c:	781b      	ldrb	r3, [r3, #0]
 8018a2e:	2b01      	cmp	r3, #1
 8018a30:	d10e      	bne.n	8018a50 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8018a32:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8018a36:	8843      	ldrh	r3, [r0, #2]
 8018a38:	f9b0 4000 	ldrsh.w	r4, [r0]
 8018a3c:	18ca      	adds	r2, r1, r3
 8018a3e:	4b06      	ldr	r3, [pc, #24]	@ (8018a58 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8018a40:	8044      	strh	r4, [r0, #2]
 8018a42:	881b      	ldrh	r3, [r3, #0]
 8018a44:	1a9b      	subs	r3, r3, r2
 8018a46:	8003      	strh	r3, [r0, #0]
 8018a48:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8018a4c:	8081      	strh	r1, [r0, #4]
 8018a4e:	80c3      	strh	r3, [r0, #6]
 8018a50:	bd10      	pop	{r4, pc}
 8018a52:	bf00      	nop
 8018a54:	20029ed0 	.word	0x20029ed0
 8018a58:	20029ecc 	.word	0x20029ecc

08018a5c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8018a5c:	4b08      	ldr	r3, [pc, #32]	@ (8018a80 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 8018a5e:	781b      	ldrb	r3, [r3, #0]
 8018a60:	2b01      	cmp	r3, #1
 8018a62:	d10c      	bne.n	8018a7e <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 8018a64:	8803      	ldrh	r3, [r0, #0]
 8018a66:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8018a6a:	8842      	ldrh	r2, [r0, #2]
 8018a6c:	8002      	strh	r2, [r0, #0]
 8018a6e:	185a      	adds	r2, r3, r1
 8018a70:	4b04      	ldr	r3, [pc, #16]	@ (8018a84 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8018a72:	881b      	ldrh	r3, [r3, #0]
 8018a74:	1a9b      	subs	r3, r3, r2
 8018a76:	8043      	strh	r3, [r0, #2]
 8018a78:	88c3      	ldrh	r3, [r0, #6]
 8018a7a:	80c1      	strh	r1, [r0, #6]
 8018a7c:	8083      	strh	r3, [r0, #4]
 8018a7e:	4770      	bx	lr
 8018a80:	20029ed0 	.word	0x20029ed0
 8018a84:	20029ecc 	.word	0x20029ecc

08018a88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8018a88:	4b07      	ldr	r3, [pc, #28]	@ (8018aa8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8018a8a:	b510      	push	{r4, lr}
 8018a8c:	781b      	ldrb	r3, [r3, #0]
 8018a8e:	2b01      	cmp	r3, #1
 8018a90:	d108      	bne.n	8018aa4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8018a92:	f9b1 3000 	ldrsh.w	r3, [r1]
 8018a96:	f9b0 4000 	ldrsh.w	r4, [r0]
 8018a9a:	8003      	strh	r3, [r0, #0]
 8018a9c:	8893      	ldrh	r3, [r2, #4]
 8018a9e:	3b01      	subs	r3, #1
 8018aa0:	1b1b      	subs	r3, r3, r4
 8018aa2:	800b      	strh	r3, [r1, #0]
 8018aa4:	bd10      	pop	{r4, pc}
 8018aa6:	bf00      	nop
 8018aa8:	20029ed0 	.word	0x20029ed0

08018aac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8018aac:	4b0a      	ldr	r3, [pc, #40]	@ (8018ad8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8018aae:	460a      	mov	r2, r1
 8018ab0:	b510      	push	{r4, lr}
 8018ab2:	781b      	ldrb	r3, [r3, #0]
 8018ab4:	2b01      	cmp	r3, #1
 8018ab6:	d10d      	bne.n	8018ad4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8018ab8:	8881      	ldrh	r1, [r0, #4]
 8018aba:	8803      	ldrh	r3, [r0, #0]
 8018abc:	440b      	add	r3, r1
 8018abe:	4601      	mov	r1, r0
 8018ac0:	3b01      	subs	r3, #1
 8018ac2:	f821 3b02 	strh.w	r3, [r1], #2
 8018ac6:	f7ff ffdf 	bl	8018a88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8018aca:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8018ace:	88c2      	ldrh	r2, [r0, #6]
 8018ad0:	80c3      	strh	r3, [r0, #6]
 8018ad2:	8082      	strh	r2, [r0, #4]
 8018ad4:	bd10      	pop	{r4, pc}
 8018ad6:	bf00      	nop
 8018ad8:	20029ed0 	.word	0x20029ed0

08018adc <_ZN8touchgfx11Application13requestRedrawEv>:
 8018adc:	4b06      	ldr	r3, [pc, #24]	@ (8018af8 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 8018ade:	2100      	movs	r1, #0
 8018ae0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018ae4:	4b05      	ldr	r3, [pc, #20]	@ (8018afc <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 8018ae6:	f8c0 1130 	str.w	r1, [r0, #304]	@ 0x130
 8018aea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018aee:	f8a0 2134 	strh.w	r2, [r0, #308]	@ 0x134
 8018af2:	f8a0 3136 	strh.w	r3, [r0, #310]	@ 0x136
 8018af6:	4770      	bx	lr
 8018af8:	20029ecc 	.word	0x20029ecc
 8018afc:	20029ece 	.word	0x20029ece

08018b00 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8018b00:	4b03      	ldr	r3, [pc, #12]	@ (8018b10 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 8018b02:	6818      	ldr	r0, [r3, #0]
 8018b04:	b110      	cbz	r0, 8018b0c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 8018b06:	6803      	ldr	r3, [r0, #0]
 8018b08:	699b      	ldr	r3, [r3, #24]
 8018b0a:	4718      	bx	r3
 8018b0c:	4770      	bx	lr
 8018b0e:	bf00      	nop
 8018b10:	20029f1c 	.word	0x20029f1c

08018b14 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8018b14:	4770      	bx	lr
	...

08018b18 <_ZN8touchgfx11Application4drawEv>:
 8018b18:	4b09      	ldr	r3, [pc, #36]	@ (8018b40 <_ZN8touchgfx11Application4drawEv+0x28>)
 8018b1a:	b507      	push	{r0, r1, r2, lr}
 8018b1c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018b20:	2100      	movs	r1, #0
 8018b22:	4b08      	ldr	r3, [pc, #32]	@ (8018b44 <_ZN8touchgfx11Application4drawEv+0x2c>)
 8018b24:	9100      	str	r1, [sp, #0]
 8018b26:	4669      	mov	r1, sp
 8018b28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018b2c:	f8ad 2004 	strh.w	r2, [sp, #4]
 8018b30:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018b34:	6803      	ldr	r3, [r0, #0]
 8018b36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8018b38:	4798      	blx	r3
 8018b3a:	b003      	add	sp, #12
 8018b3c:	f85d fb04 	ldr.w	pc, [sp], #4
 8018b40:	20029ecc 	.word	0x20029ecc
 8018b44:	20029ece 	.word	0x20029ece

08018b48 <_ZN8touchgfx11Application10invalidateEv>:
 8018b48:	4b09      	ldr	r3, [pc, #36]	@ (8018b70 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 8018b4a:	b082      	sub	sp, #8
 8018b4c:	2100      	movs	r1, #0
 8018b4e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018b52:	4b08      	ldr	r3, [pc, #32]	@ (8018b74 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 8018b54:	f8ad 2004 	strh.w	r2, [sp, #4]
 8018b58:	aa02      	add	r2, sp, #8
 8018b5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018b5e:	9100      	str	r1, [sp, #0]
 8018b60:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018b64:	6803      	ldr	r3, [r0, #0]
 8018b66:	e912 0006 	ldmdb	r2, {r1, r2}
 8018b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8018b6c:	b002      	add	sp, #8
 8018b6e:	4718      	bx	r3
 8018b70:	20029ecc 	.word	0x20029ecc
 8018b74:	20029ece 	.word	0x20029ece

08018b78 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8018b78:	4b03      	ldr	r3, [pc, #12]	@ (8018b88 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8018b7a:	6818      	ldr	r0, [r3, #0]
 8018b7c:	b110      	cbz	r0, 8018b84 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8018b7e:	6803      	ldr	r3, [r0, #0]
 8018b80:	69db      	ldr	r3, [r3, #28]
 8018b82:	4718      	bx	r3
 8018b84:	4770      	bx	lr
 8018b86:	bf00      	nop
 8018b88:	20029f1c 	.word	0x20029f1c

08018b8c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8018b8c:	4b03      	ldr	r3, [pc, #12]	@ (8018b9c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 8018b8e:	6818      	ldr	r0, [r3, #0]
 8018b90:	b110      	cbz	r0, 8018b98 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 8018b92:	6803      	ldr	r3, [r0, #0]
 8018b94:	6a1b      	ldr	r3, [r3, #32]
 8018b96:	4718      	bx	r3
 8018b98:	4770      	bx	lr
 8018b9a:	bf00      	nop
 8018b9c:	20029f1c 	.word	0x20029f1c

08018ba0 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 8018ba0:	2300      	movs	r3, #0
 8018ba2:	f8a0 30ec 	strh.w	r3, [r0, #236]	@ 0xec
 8018ba6:	4770      	bx	lr

08018ba8 <_ZN8touchgfx11Application14handleKeyEventEh>:
 8018ba8:	4b03      	ldr	r3, [pc, #12]	@ (8018bb8 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8018baa:	6818      	ldr	r0, [r3, #0]
 8018bac:	b110      	cbz	r0, 8018bb4 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8018bae:	6803      	ldr	r3, [r0, #0]
 8018bb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018bb2:	4718      	bx	r3
 8018bb4:	4770      	bx	lr
 8018bb6:	bf00      	nop
 8018bb8:	20029f1c 	.word	0x20029f1c

08018bbc <_ZN8touchgfx11ApplicationD1Ev>:
 8018bbc:	4770      	bx	lr

08018bbe <_ZN8touchgfx11ApplicationD0Ev>:
 8018bbe:	b510      	push	{r4, lr}
 8018bc0:	4604      	mov	r4, r0
 8018bc2:	f44f 719e 	mov.w	r1, #316	@ 0x13c
 8018bc6:	f011 fb7b 	bl	802a2c0 <_ZdlPvj>
 8018bca:	4620      	mov	r0, r4
 8018bcc:	bd10      	pop	{r4, pc}

08018bce <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8018bce:	b510      	push	{r4, lr}
 8018bd0:	f9b1 4000 	ldrsh.w	r4, [r1]
 8018bd4:	888a      	ldrh	r2, [r1, #4]
 8018bd6:	f9b0 3000 	ldrsh.w	r3, [r0]
 8018bda:	4422      	add	r2, r4
 8018bdc:	b212      	sxth	r2, r2
 8018bde:	4293      	cmp	r3, r2
 8018be0:	da15      	bge.n	8018c0e <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8018be2:	8882      	ldrh	r2, [r0, #4]
 8018be4:	4413      	add	r3, r2
 8018be6:	b21b      	sxth	r3, r3
 8018be8:	429c      	cmp	r4, r3
 8018bea:	da10      	bge.n	8018c0e <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8018bec:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8018bf0:	88c9      	ldrh	r1, [r1, #6]
 8018bf2:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8018bf6:	4419      	add	r1, r3
 8018bf8:	b209      	sxth	r1, r1
 8018bfa:	428a      	cmp	r2, r1
 8018bfc:	da07      	bge.n	8018c0e <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8018bfe:	88c0      	ldrh	r0, [r0, #6]
 8018c00:	4410      	add	r0, r2
 8018c02:	b200      	sxth	r0, r0
 8018c04:	4283      	cmp	r3, r0
 8018c06:	bfac      	ite	ge
 8018c08:	2000      	movge	r0, #0
 8018c0a:	2001      	movlt	r0, #1
 8018c0c:	bd10      	pop	{r4, pc}
 8018c0e:	2000      	movs	r0, #0
 8018c10:	e7fc      	b.n	8018c0c <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08018c12 <_ZN8touchgfx4Rect10restrictToEss>:
 8018c12:	f9b0 3000 	ldrsh.w	r3, [r0]
 8018c16:	2b00      	cmp	r3, #0
 8018c18:	b510      	push	{r4, lr}
 8018c1a:	da04      	bge.n	8018c26 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 8018c1c:	8884      	ldrh	r4, [r0, #4]
 8018c1e:	4423      	add	r3, r4
 8018c20:	8083      	strh	r3, [r0, #4]
 8018c22:	2300      	movs	r3, #0
 8018c24:	8003      	strh	r3, [r0, #0]
 8018c26:	f9b0 4000 	ldrsh.w	r4, [r0]
 8018c2a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8018c2e:	1b09      	subs	r1, r1, r4
 8018c30:	428b      	cmp	r3, r1
 8018c32:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8018c36:	bfc8      	it	gt
 8018c38:	8081      	strhgt	r1, [r0, #4]
 8018c3a:	2b00      	cmp	r3, #0
 8018c3c:	da04      	bge.n	8018c48 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 8018c3e:	88c1      	ldrh	r1, [r0, #6]
 8018c40:	440b      	add	r3, r1
 8018c42:	80c3      	strh	r3, [r0, #6]
 8018c44:	2300      	movs	r3, #0
 8018c46:	8043      	strh	r3, [r0, #2]
 8018c48:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8018c4c:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8018c50:	1a52      	subs	r2, r2, r1
 8018c52:	4293      	cmp	r3, r2
 8018c54:	bfc8      	it	gt
 8018c56:	80c2      	strhgt	r2, [r0, #6]
 8018c58:	bd10      	pop	{r4, pc}
	...

08018c5c <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8018c5c:	4b10      	ldr	r3, [pc, #64]	@ (8018ca0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 8018c5e:	b510      	push	{r4, lr}
 8018c60:	460c      	mov	r4, r1
 8018c62:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018c66:	4b0f      	ldr	r3, [pc, #60]	@ (8018ca4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 8018c68:	4620      	mov	r0, r4
 8018c6a:	f9b3 1000 	ldrsh.w	r1, [r3]
 8018c6e:	f7ff ffd0 	bl	8018c12 <_ZN8touchgfx4Rect10restrictToEss>
 8018c72:	4b0d      	ldr	r3, [pc, #52]	@ (8018ca8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 8018c74:	6818      	ldr	r0, [r3, #0]
 8018c76:	b190      	cbz	r0, 8018c9e <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 8018c78:	6803      	ldr	r3, [r0, #0]
 8018c7a:	4621      	mov	r1, r4
 8018c7c:	689b      	ldr	r3, [r3, #8]
 8018c7e:	4798      	blx	r3
 8018c80:	4b0a      	ldr	r3, [pc, #40]	@ (8018cac <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 8018c82:	6818      	ldr	r0, [r3, #0]
 8018c84:	b118      	cbz	r0, 8018c8e <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 8018c86:	6803      	ldr	r3, [r0, #0]
 8018c88:	4621      	mov	r1, r4
 8018c8a:	689b      	ldr	r3, [r3, #8]
 8018c8c:	4798      	blx	r3
 8018c8e:	4b08      	ldr	r3, [pc, #32]	@ (8018cb0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 8018c90:	4621      	mov	r1, r4
 8018c92:	6818      	ldr	r0, [r3, #0]
 8018c94:	6803      	ldr	r3, [r0, #0]
 8018c96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018c9a:	69db      	ldr	r3, [r3, #28]
 8018c9c:	4718      	bx	r3
 8018c9e:	bd10      	pop	{r4, pc}
 8018ca0:	20029ece 	.word	0x20029ece
 8018ca4:	20029ecc 	.word	0x20029ecc
 8018ca8:	20029f1c 	.word	0x20029f1c
 8018cac:	20029f18 	.word	0x20029f18
 8018cb0:	20029ed8 	.word	0x20029ed8

08018cb4 <_ZNK8touchgfx4Rect8includesERKS0_>:
 8018cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018cb6:	4606      	mov	r6, r0
 8018cb8:	4608      	mov	r0, r1
 8018cba:	460f      	mov	r7, r1
 8018cbc:	f7f9 fd37 	bl	801272e <_ZNK8touchgfx4Rect7isEmptyEv>
 8018cc0:	b9e8      	cbnz	r0, 8018cfe <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8018cc2:	f9b7 5000 	ldrsh.w	r5, [r7]
 8018cc6:	f9b6 4000 	ldrsh.w	r4, [r6]
 8018cca:	42a5      	cmp	r5, r4
 8018ccc:	db17      	blt.n	8018cfe <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8018cce:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8018cd2:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8018cd6:	429a      	cmp	r2, r3
 8018cd8:	db11      	blt.n	8018cfe <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8018cda:	88b9      	ldrh	r1, [r7, #4]
 8018cdc:	440d      	add	r5, r1
 8018cde:	88b1      	ldrh	r1, [r6, #4]
 8018ce0:	440c      	add	r4, r1
 8018ce2:	b22d      	sxth	r5, r5
 8018ce4:	b224      	sxth	r4, r4
 8018ce6:	42a5      	cmp	r5, r4
 8018ce8:	dc09      	bgt.n	8018cfe <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8018cea:	88f8      	ldrh	r0, [r7, #6]
 8018cec:	4410      	add	r0, r2
 8018cee:	88f2      	ldrh	r2, [r6, #6]
 8018cf0:	4413      	add	r3, r2
 8018cf2:	b200      	sxth	r0, r0
 8018cf4:	b21b      	sxth	r3, r3
 8018cf6:	4298      	cmp	r0, r3
 8018cf8:	bfcc      	ite	gt
 8018cfa:	2000      	movgt	r0, #0
 8018cfc:	2001      	movle	r0, #1
 8018cfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08018d00 <_ZN8touchgfx11Application11getInstanceEv>:
 8018d00:	4b01      	ldr	r3, [pc, #4]	@ (8018d08 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8018d02:	6818      	ldr	r0, [r3, #0]
 8018d04:	4770      	bx	lr
 8018d06:	bf00      	nop
 8018d08:	20029f2c 	.word	0x20029f2c

08018d0c <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 8018d0c:	2300      	movs	r3, #0
 8018d0e:	b510      	push	{r4, lr}
 8018d10:	f8a0 30a4 	strh.w	r3, [r0, #164]	@ 0xa4
 8018d14:	4604      	mov	r4, r0
 8018d16:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 8018d1a:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 8018d1e:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 8018d22:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	@ 0xa6
 8018d26:	429a      	cmp	r2, r3
 8018d28:	d90e      	bls.n	8018d48 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 8018d2a:	18e2      	adds	r2, r4, r3
 8018d2c:	f892 2084 	ldrb.w	r2, [r2, #132]	@ 0x84
 8018d30:	b122      	cbz	r2, 8018d3c <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 8018d32:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8018d36:	6803      	ldr	r3, [r0, #0]
 8018d38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8018d3a:	4798      	blx	r3
 8018d3c:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 8018d40:	3301      	adds	r3, #1
 8018d42:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 8018d46:	e7ea      	b.n	8018d1e <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 8018d48:	bd10      	pop	{r4, pc}

08018d4a <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>:
 8018d4a:	b530      	push	{r4, r5, lr}
 8018d4c:	2200      	movs	r2, #0
 8018d4e:	f8b0 5080 	ldrh.w	r5, [r0, #128]	@ 0x80
 8018d52:	b293      	uxth	r3, r2
 8018d54:	429d      	cmp	r5, r3
 8018d56:	d90e      	bls.n	8018d76 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2c>
 8018d58:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 8018d5c:	428b      	cmp	r3, r1
 8018d5e:	d10b      	bne.n	8018d78 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2e>
 8018d60:	1884      	adds	r4, r0, r2
 8018d62:	f894 3084 	ldrb.w	r3, [r4, #132]	@ 0x84
 8018d66:	b13b      	cbz	r3, 8018d78 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2e>
 8018d68:	3b01      	subs	r3, #1
 8018d6a:	b2db      	uxtb	r3, r3
 8018d6c:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
 8018d70:	b90b      	cbnz	r3, 8018d76 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2c>
 8018d72:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8018d76:	bd30      	pop	{r4, r5, pc}
 8018d78:	3201      	adds	r2, #1
 8018d7a:	e7ea      	b.n	8018d52 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x8>

08018d7c <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 8018d7c:	2300      	movs	r3, #0
 8018d7e:	f100 0284 	add.w	r2, r0, #132	@ 0x84
 8018d82:	30a4      	adds	r0, #164	@ 0xa4
 8018d84:	f820 3c24 	strh.w	r3, [r0, #-36]
 8018d88:	f802 3b01 	strb.w	r3, [r2], #1
 8018d8c:	4282      	cmp	r2, r0
 8018d8e:	d1fb      	bne.n	8018d88 <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 8018d90:	4770      	bx	lr
	...

08018d94 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8018d94:	b570      	push	{r4, r5, r6, lr}
 8018d96:	4c0b      	ldr	r4, [pc, #44]	@ (8018dc4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 8018d98:	4605      	mov	r5, r0
 8018d9a:	460e      	mov	r6, r1
 8018d9c:	6820      	ldr	r0, [r4, #0]
 8018d9e:	b110      	cbz	r0, 8018da6 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 8018da0:	6803      	ldr	r3, [r0, #0]
 8018da2:	695b      	ldr	r3, [r3, #20]
 8018da4:	4798      	blx	r3
 8018da6:	1d28      	adds	r0, r5, #4
 8018da8:	f7ff ffe8 	bl	8018d7c <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8018dac:	6026      	str	r6, [r4, #0]
 8018dae:	6833      	ldr	r3, [r6, #0]
 8018db0:	4630      	mov	r0, r6
 8018db2:	68db      	ldr	r3, [r3, #12]
 8018db4:	4798      	blx	r3
 8018db6:	682b      	ldr	r3, [r5, #0]
 8018db8:	4628      	mov	r0, r5
 8018dba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018dbc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018dc0:	4718      	bx	r3
 8018dc2:	bf00      	nop
 8018dc4:	20029f1c 	.word	0x20029f1c

08018dc8 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 8018dc8:	2300      	movs	r3, #0
 8018dca:	f8b0 c080 	ldrh.w	ip, [r0, #128]	@ 0x80
 8018dce:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	@ 0xa4
 8018dd2:	461a      	mov	r2, r3
 8018dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018dd6:	461c      	mov	r4, r3
 8018dd8:	461d      	mov	r5, r3
 8018dda:	459c      	cmp	ip, r3
 8018ddc:	dd1a      	ble.n	8018e14 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 8018dde:	18c6      	adds	r6, r0, r3
 8018de0:	f896 6084 	ldrb.w	r6, [r6, #132]	@ 0x84
 8018de4:	b16e      	cbz	r6, 8018e02 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 8018de6:	429a      	cmp	r2, r3
 8018de8:	d008      	beq.n	8018dfc <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 8018dea:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 8018dee:	fa1f fe82 	uxth.w	lr, r2
 8018df2:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 8018df6:	1887      	adds	r7, r0, r2
 8018df8:	f887 6084 	strb.w	r6, [r7, #132]	@ 0x84
 8018dfc:	3201      	adds	r2, #1
 8018dfe:	3301      	adds	r3, #1
 8018e00:	e7eb      	b.n	8018dda <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 8018e02:	4299      	cmp	r1, r3
 8018e04:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	@ 0xa6
 8018e08:	bfa8      	it	ge
 8018e0a:	3501      	addge	r5, #1
 8018e0c:	429e      	cmp	r6, r3
 8018e0e:	bfc8      	it	gt
 8018e10:	3401      	addgt	r4, #1
 8018e12:	e7f4      	b.n	8018dfe <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 8018e14:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	@ 0xa6
 8018e18:	1b49      	subs	r1, r1, r5
 8018e1a:	1b1b      	subs	r3, r3, r4
 8018e1c:	f8a0 10a4 	strh.w	r1, [r0, #164]	@ 0xa4
 8018e20:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 8018e24:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 8018e28:	4293      	cmp	r3, r2
 8018e2a:	dd03      	ble.n	8018e34 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 8018e2c:	3b01      	subs	r3, #1
 8018e2e:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
 8018e32:	e7f7      	b.n	8018e24 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 8018e34:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08018e38 <_ZN8touchgfx11Application15handleTickEventEv>:
 8018e38:	b570      	push	{r4, r5, r6, lr}
 8018e3a:	4d16      	ldr	r5, [pc, #88]	@ (8018e94 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 8018e3c:	4604      	mov	r4, r0
 8018e3e:	6828      	ldr	r0, [r5, #0]
 8018e40:	b140      	cbz	r0, 8018e54 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8018e42:	7a03      	ldrb	r3, [r0, #8]
 8018e44:	b933      	cbnz	r3, 8018e54 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8018e46:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 8018e4a:	6803      	ldr	r3, [r0, #0]
 8018e4c:	689b      	ldr	r3, [r3, #8]
 8018e4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018e52:	4718      	bx	r3
 8018e54:	f894 3138 	ldrb.w	r3, [r4, #312]	@ 0x138
 8018e58:	4e0f      	ldr	r6, [pc, #60]	@ (8018e98 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 8018e5a:	b973      	cbnz	r3, 8018e7a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8018e5c:	b168      	cbz	r0, 8018e7a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8018e5e:	7a03      	ldrb	r3, [r0, #8]
 8018e60:	b15b      	cbz	r3, 8018e7a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8018e62:	6830      	ldr	r0, [r6, #0]
 8018e64:	b110      	cbz	r0, 8018e6c <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 8018e66:	6803      	ldr	r3, [r0, #0]
 8018e68:	691b      	ldr	r3, [r3, #16]
 8018e6a:	4798      	blx	r3
 8018e6c:	6828      	ldr	r0, [r5, #0]
 8018e6e:	6803      	ldr	r3, [r0, #0]
 8018e70:	68db      	ldr	r3, [r3, #12]
 8018e72:	4798      	blx	r3
 8018e74:	2301      	movs	r3, #1
 8018e76:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 8018e7a:	3404      	adds	r4, #4
 8018e7c:	4620      	mov	r0, r4
 8018e7e:	f7ff ff45 	bl	8018d0c <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 8018e82:	4620      	mov	r0, r4
 8018e84:	f7ff ffa0 	bl	8018dc8 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 8018e88:	6830      	ldr	r0, [r6, #0]
 8018e8a:	b110      	cbz	r0, 8018e92 <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 8018e8c:	6803      	ldr	r3, [r0, #0]
 8018e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018e90:	e7dd      	b.n	8018e4e <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 8018e92:	bd70      	pop	{r4, r5, r6, pc}
 8018e94:	20029f20 	.word	0x20029f20
 8018e98:	20029f1c 	.word	0x20029f1c

08018e9c <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>:
 8018e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018e9e:	2300      	movs	r3, #0
 8018ea0:	4604      	mov	r4, r0
 8018ea2:	460d      	mov	r5, r1
 8018ea4:	f8b0 1080 	ldrh.w	r1, [r0, #128]	@ 0x80
 8018ea8:	4618      	mov	r0, r3
 8018eaa:	b29a      	uxth	r2, r3
 8018eac:	4291      	cmp	r1, r2
 8018eae:	d912      	bls.n	8018ed6 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x3a>
 8018eb0:	f854 7023 	ldr.w	r7, [r4, r3, lsl #2]
 8018eb4:	18e6      	adds	r6, r4, r3
 8018eb6:	42af      	cmp	r7, r5
 8018eb8:	f896 2084 	ldrb.w	r2, [r6, #132]	@ 0x84
 8018ebc:	d105      	bne.n	8018eca <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2e>
 8018ebe:	2aff      	cmp	r2, #255	@ 0xff
 8018ec0:	d002      	beq.n	8018ec8 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>
 8018ec2:	3201      	adds	r2, #1
 8018ec4:	f886 2084 	strb.w	r2, [r6, #132]	@ 0x84
 8018ec8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018eca:	2a00      	cmp	r2, #0
 8018ecc:	f103 0301 	add.w	r3, r3, #1
 8018ed0:	bf08      	it	eq
 8018ed2:	2001      	moveq	r0, #1
 8018ed4:	e7e9      	b.n	8018eaa <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0xe>
 8018ed6:	b120      	cbz	r0, 8018ee2 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x46>
 8018ed8:	2920      	cmp	r1, #32
 8018eda:	d102      	bne.n	8018ee2 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x46>
 8018edc:	4620      	mov	r0, r4
 8018ede:	f7ff ff73 	bl	8018dc8 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 8018ee2:	f8b4 3080 	ldrh.w	r3, [r4, #128]	@ 0x80
 8018ee6:	2b1f      	cmp	r3, #31
 8018ee8:	d8ee      	bhi.n	8018ec8 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>
 8018eea:	18e2      	adds	r2, r4, r3
 8018eec:	2101      	movs	r1, #1
 8018eee:	f882 1084 	strb.w	r1, [r2, #132]	@ 0x84
 8018ef2:	185a      	adds	r2, r3, r1
 8018ef4:	f8a4 2080 	strh.w	r2, [r4, #128]	@ 0x80
 8018ef8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8018efc:	e7e4      	b.n	8018ec8 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>

08018efe <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8018efe:	4603      	mov	r3, r0
 8018f00:	f100 0140 	add.w	r1, r0, #64	@ 0x40
 8018f04:	2200      	movs	r2, #0
 8018f06:	801a      	strh	r2, [r3, #0]
 8018f08:	3308      	adds	r3, #8
 8018f0a:	f823 2c06 	strh.w	r2, [r3, #-6]
 8018f0e:	f823 2c04 	strh.w	r2, [r3, #-4]
 8018f12:	f823 2c02 	strh.w	r2, [r3, #-2]
 8018f16:	428b      	cmp	r3, r1
 8018f18:	d1f5      	bne.n	8018f06 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8018f1a:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 8018f1e:	4770      	bx	lr

08018f20 <_ZN8touchgfx11ApplicationC1Ev>:
 8018f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018f22:	4b1d      	ldr	r3, [pc, #116]	@ (8018f98 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 8018f24:	4606      	mov	r6, r0
 8018f26:	4604      	mov	r4, r0
 8018f28:	2500      	movs	r5, #0
 8018f2a:	f846 3b04 	str.w	r3, [r6], #4
 8018f2e:	22a8      	movs	r2, #168	@ 0xa8
 8018f30:	2100      	movs	r1, #0
 8018f32:	4630      	mov	r0, r6
 8018f34:	f012 faf4 	bl	802b520 <memset>
 8018f38:	f8a4 5084 	strh.w	r5, [r4, #132]	@ 0x84
 8018f3c:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 8018f40:	4f16      	ldr	r7, [pc, #88]	@ (8018f9c <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 8018f42:	f7ff ffdc 	bl	8018efe <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8018f46:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 8018f4a:	f7ff ffd8 	bl	8018efe <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8018f4e:	f8a4 5130 	strh.w	r5, [r4, #304]	@ 0x130
 8018f52:	f8a4 5132 	strh.w	r5, [r4, #306]	@ 0x132
 8018f56:	f8a4 5134 	strh.w	r5, [r4, #308]	@ 0x134
 8018f5a:	f8a4 5136 	strh.w	r5, [r4, #310]	@ 0x136
 8018f5e:	f884 5138 	strb.w	r5, [r4, #312]	@ 0x138
 8018f62:	490f      	ldr	r1, [pc, #60]	@ (8018fa0 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 8018f64:	480f      	ldr	r0, [pc, #60]	@ (8018fa4 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 8018f66:	f010 fd5b 	bl	8029a20 <CRC_Lock>
 8018f6a:	4b0f      	ldr	r3, [pc, #60]	@ (8018fa8 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 8018f6c:	b158      	cbz	r0, 8018f86 <_ZN8touchgfx11ApplicationC1Ev+0x66>
 8018f6e:	801d      	strh	r5, [r3, #0]
 8018f70:	2300      	movs	r3, #0
 8018f72:	4a0e      	ldr	r2, [pc, #56]	@ (8018fac <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 8018f74:	4630      	mov	r0, r6
 8018f76:	6013      	str	r3, [r2, #0]
 8018f78:	4a0d      	ldr	r2, [pc, #52]	@ (8018fb0 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 8018f7a:	603b      	str	r3, [r7, #0]
 8018f7c:	6013      	str	r3, [r2, #0]
 8018f7e:	f7ff fefd 	bl	8018d7c <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8018f82:	4620      	mov	r0, r4
 8018f84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018f86:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8018f8a:	2002      	movs	r0, #2
 8018f8c:	801a      	strh	r2, [r3, #0]
 8018f8e:	6038      	str	r0, [r7, #0]
 8018f90:	f001 fb04 	bl	801a59c <_ZN8touchgfx6Screen4drawEv>
 8018f94:	e7ec      	b.n	8018f70 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 8018f96:	bf00      	nop
 8018f98:	080426cc 	.word	0x080426cc
 8018f9c:	20029f1c 	.word	0x20029f1c
 8018fa0:	b5e8b5cd 	.word	0xb5e8b5cd
 8018fa4:	f407a5c2 	.word	0xf407a5c2
 8018fa8:	20007ab0 	.word	0x20007ab0
 8018fac:	20029f2c 	.word	0x20029f2c
 8018fb0:	20029f20 	.word	0x20029f20

08018fb4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8018fb4:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 8018fb8:	3b01      	subs	r3, #1
 8018fba:	b29b      	uxth	r3, r3
 8018fbc:	428b      	cmp	r3, r1
 8018fbe:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40
 8018fc2:	b510      	push	{r4, lr}
 8018fc4:	d908      	bls.n	8018fd8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 8018fc6:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8018fca:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 8018fce:	681a      	ldr	r2, [r3, #0]
 8018fd0:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 8018fd4:	685a      	ldr	r2, [r3, #4]
 8018fd6:	6062      	str	r2, [r4, #4]
 8018fd8:	bd10      	pop	{r4, pc}
	...

08018fdc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8018fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018fe0:	b08f      	sub	sp, #60	@ 0x3c
 8018fe2:	4b8f      	ldr	r3, [pc, #572]	@ (8019220 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 8018fe4:	4683      	mov	fp, r0
 8018fe6:	ac0a      	add	r4, sp, #40	@ 0x28
 8018fe8:	e884 0006 	stmia.w	r4, {r1, r2}
 8018fec:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018ff0:	4620      	mov	r0, r4
 8018ff2:	4b8c      	ldr	r3, [pc, #560]	@ (8019224 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 8018ff4:	f9b3 1000 	ldrsh.w	r1, [r3]
 8018ff8:	f7ff fe0b 	bl	8018c12 <_ZN8touchgfx4Rect10restrictToEss>
 8018ffc:	4620      	mov	r0, r4
 8018ffe:	f7f9 fb96 	bl	801272e <_ZNK8touchgfx4Rect7isEmptyEv>
 8019002:	2800      	cmp	r0, #0
 8019004:	d16a      	bne.n	80190dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8019006:	9403      	str	r4, [sp, #12]
 8019008:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 801900c:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 8019010:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 8019014:	9301      	str	r3, [sp, #4]
 8019016:	35a4      	adds	r5, #164	@ 0xa4
 8019018:	b15c      	cbz	r4, 8019032 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801901a:	4629      	mov	r1, r5
 801901c:	9803      	ldr	r0, [sp, #12]
 801901e:	f7ff fe49 	bl	8018cb4 <_ZNK8touchgfx4Rect8includesERKS0_>
 8019022:	3c01      	subs	r4, #1
 8019024:	b118      	cbz	r0, 801902e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 8019026:	b2a1      	uxth	r1, r4
 8019028:	9801      	ldr	r0, [sp, #4]
 801902a:	f7ff ffc3 	bl	8018fb4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801902e:	3d08      	subs	r5, #8
 8019030:	e7f2      	b.n	8019018 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 8019032:	f8bb a0ec 	ldrh.w	sl, [fp, #236]	@ 0xec
 8019036:	f10a 33ff 	add.w	r3, sl, #4294967295
 801903a:	f8cd a010 	str.w	sl, [sp, #16]
 801903e:	9302      	str	r3, [sp, #8]
 8019040:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8019044:	f103 04a4 	add.w	r4, r3, #164	@ 0xa4
 8019048:	9306      	str	r3, [sp, #24]
 801904a:	445c      	add	r4, fp
 801904c:	2500      	movs	r5, #0
 801904e:	4626      	mov	r6, r4
 8019050:	f8cd a014 	str.w	sl, [sp, #20]
 8019054:	462f      	mov	r7, r5
 8019056:	9b05      	ldr	r3, [sp, #20]
 8019058:	2b00      	cmp	r3, #0
 801905a:	d073      	beq.n	8019144 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801905c:	9903      	ldr	r1, [sp, #12]
 801905e:	4630      	mov	r0, r6
 8019060:	f7ff fdb5 	bl	8018bce <_ZNK8touchgfx4Rect9intersectERKS0_>
 8019064:	b350      	cbz	r0, 80190bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8019066:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 801906a:	f9b6 c000 	ldrsh.w	ip, [r6]
 801906e:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	@ 0x2a
 8019072:	45e6      	cmp	lr, ip
 8019074:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 8019078:	db33      	blt.n	80190e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801907a:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 801907e:	88b3      	ldrh	r3, [r6, #4]
 8019080:	4472      	add	r2, lr
 8019082:	4463      	add	r3, ip
 8019084:	b212      	sxth	r2, r2
 8019086:	b21b      	sxth	r3, r3
 8019088:	429a      	cmp	r2, r3
 801908a:	dc2a      	bgt.n	80190e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801908c:	fa1f f289 	uxth.w	r2, r9
 8019090:	88f3      	ldrh	r3, [r6, #6]
 8019092:	45c8      	cmp	r8, r9
 8019094:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 8019098:	4413      	add	r3, r2
 801909a:	fa1f fc88 	uxth.w	ip, r8
 801909e:	b29b      	uxth	r3, r3
 80190a0:	fa0f fe83 	sxth.w	lr, r3
 80190a4:	db0f      	blt.n	80190c6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 80190a6:	eba3 030c 	sub.w	r3, r3, ip
 80190aa:	1ac9      	subs	r1, r1, r3
 80190ac:	b209      	sxth	r1, r1
 80190ae:	2900      	cmp	r1, #0
 80190b0:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 80190b4:	dd12      	ble.n	80190dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 80190b6:	f8ad e02a 	strh.w	lr, [sp, #42]	@ 0x2a
 80190ba:	4605      	mov	r5, r0
 80190bc:	9b05      	ldr	r3, [sp, #20]
 80190be:	3e08      	subs	r6, #8
 80190c0:	3b01      	subs	r3, #1
 80190c2:	9305      	str	r3, [sp, #20]
 80190c4:	e7c7      	b.n	8019056 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 80190c6:	4461      	add	r1, ip
 80190c8:	b209      	sxth	r1, r1
 80190ca:	4571      	cmp	r1, lr
 80190cc:	dc38      	bgt.n	8019140 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 80190ce:	eba2 020c 	sub.w	r2, r2, ip
 80190d2:	b212      	sxth	r2, r2
 80190d4:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 80190d8:	2a00      	cmp	r2, #0
 80190da:	dcee      	bgt.n	80190ba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 80190dc:	b00f      	add	sp, #60	@ 0x3c
 80190de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80190e2:	45c8      	cmp	r8, r9
 80190e4:	db2c      	blt.n	8019140 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 80190e6:	88f3      	ldrh	r3, [r6, #6]
 80190e8:	4499      	add	r9, r3
 80190ea:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 80190ee:	4498      	add	r8, r3
 80190f0:	fa0f f989 	sxth.w	r9, r9
 80190f4:	fa0f f888 	sxth.w	r8, r8
 80190f8:	45c1      	cmp	r9, r8
 80190fa:	db21      	blt.n	8019140 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 80190fc:	fa1f f28c 	uxth.w	r2, ip
 8019100:	88b3      	ldrh	r3, [r6, #4]
 8019102:	45e6      	cmp	lr, ip
 8019104:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 8019108:	4413      	add	r3, r2
 801910a:	fa1f f88e 	uxth.w	r8, lr
 801910e:	b29b      	uxth	r3, r3
 8019110:	fa0f f983 	sxth.w	r9, r3
 8019114:	db0a      	blt.n	801912c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 8019116:	eba3 0308 	sub.w	r3, r3, r8
 801911a:	1ac9      	subs	r1, r1, r3
 801911c:	b209      	sxth	r1, r1
 801911e:	2900      	cmp	r1, #0
 8019120:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
 8019124:	ddda      	ble.n	80190dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8019126:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 801912a:	e7c6      	b.n	80190ba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 801912c:	4441      	add	r1, r8
 801912e:	b209      	sxth	r1, r1
 8019130:	4549      	cmp	r1, r9
 8019132:	dc05      	bgt.n	8019140 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8019134:	eba2 0208 	sub.w	r2, r2, r8
 8019138:	b212      	sxth	r2, r2
 801913a:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 801913e:	e7cb      	b.n	80190d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 8019140:	4607      	mov	r7, r0
 8019142:	e7bb      	b.n	80190bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8019144:	2d00      	cmp	r5, #0
 8019146:	d181      	bne.n	801904c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 8019148:	2f00      	cmp	r7, #0
 801914a:	f000 81dd 	beq.w	8019508 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 801914e:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	@ 0x28
 8019152:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	@ 0x2a
 8019156:	b2b3      	uxth	r3, r6
 8019158:	f8bd a02e 	ldrh.w	sl, [sp, #46]	@ 0x2e
 801915c:	9305      	str	r3, [sp, #20]
 801915e:	9a05      	ldr	r2, [sp, #20]
 8019160:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8019164:	4413      	add	r3, r2
 8019166:	b2ba      	uxth	r2, r7
 8019168:	4492      	add	sl, r2
 801916a:	b29b      	uxth	r3, r3
 801916c:	fa1f fa8a 	uxth.w	sl, sl
 8019170:	fa0f f883 	sxth.w	r8, r3
 8019174:	fa0f f98a 	sxth.w	r9, sl
 8019178:	e9cd 2307 	strd	r2, r3, [sp, #28]
 801917c:	9b04      	ldr	r3, [sp, #16]
 801917e:	2b00      	cmp	r3, #0
 8019180:	d052      	beq.n	8019228 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 8019182:	9903      	ldr	r1, [sp, #12]
 8019184:	4620      	mov	r0, r4
 8019186:	f7ff fd22 	bl	8018bce <_ZNK8touchgfx4Rect9intersectERKS0_>
 801918a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801918e:	b1c0      	cbz	r0, 80191c2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8019190:	f9b4 e000 	ldrsh.w	lr, [r4]
 8019194:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8019198:	4576      	cmp	r6, lr
 801919a:	dc22      	bgt.n	80191e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801919c:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 80191a0:	44f4      	add	ip, lr
 80191a2:	fa0f fc8c 	sxth.w	ip, ip
 80191a6:	45e0      	cmp	r8, ip
 80191a8:	db1b      	blt.n	80191e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 80191aa:	428f      	cmp	r7, r1
 80191ac:	fa1f fc81 	uxth.w	ip, r1
 80191b0:	88e1      	ldrh	r1, [r4, #6]
 80191b2:	dc0d      	bgt.n	80191d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 80191b4:	ebaa 0c0c 	sub.w	ip, sl, ip
 80191b8:	f8a4 9002 	strh.w	r9, [r4, #2]
 80191bc:	eba1 010c 	sub.w	r1, r1, ip
 80191c0:	80e1      	strh	r1, [r4, #6]
 80191c2:	4628      	mov	r0, r5
 80191c4:	9904      	ldr	r1, [sp, #16]
 80191c6:	3c08      	subs	r4, #8
 80191c8:	4605      	mov	r5, r0
 80191ca:	3901      	subs	r1, #1
 80191cc:	9104      	str	r1, [sp, #16]
 80191ce:	e7d3      	b.n	8019178 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19c>
 80191d0:	4461      	add	r1, ip
 80191d2:	b209      	sxth	r1, r1
 80191d4:	4549      	cmp	r1, r9
 80191d6:	dcf5      	bgt.n	80191c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 80191d8:	eba2 0c0c 	sub.w	ip, r2, ip
 80191dc:	f8a4 c006 	strh.w	ip, [r4, #6]
 80191e0:	e7ef      	b.n	80191c2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 80191e2:	428f      	cmp	r7, r1
 80191e4:	dcee      	bgt.n	80191c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 80191e6:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 80191ea:	4461      	add	r1, ip
 80191ec:	b209      	sxth	r1, r1
 80191ee:	4589      	cmp	r9, r1
 80191f0:	dbe8      	blt.n	80191c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 80191f2:	4576      	cmp	r6, lr
 80191f4:	fa1f fc8e 	uxth.w	ip, lr
 80191f8:	88a1      	ldrh	r1, [r4, #4]
 80191fa:	dc07      	bgt.n	801920c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 80191fc:	eba3 0c0c 	sub.w	ip, r3, ip
 8019200:	f8a4 8000 	strh.w	r8, [r4]
 8019204:	eba1 010c 	sub.w	r1, r1, ip
 8019208:	80a1      	strh	r1, [r4, #4]
 801920a:	e7da      	b.n	80191c2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801920c:	4461      	add	r1, ip
 801920e:	b209      	sxth	r1, r1
 8019210:	4588      	cmp	r8, r1
 8019212:	dbd7      	blt.n	80191c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8019214:	9905      	ldr	r1, [sp, #20]
 8019216:	eba1 0c0c 	sub.w	ip, r1, ip
 801921a:	f8a4 c004 	strh.w	ip, [r4, #4]
 801921e:	e7d0      	b.n	80191c2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8019220:	20029ece 	.word	0x20029ece
 8019224:	20029ecc 	.word	0x20029ecc
 8019228:	2d00      	cmp	r5, #0
 801922a:	f000 816d 	beq.w	8019508 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 801922e:	9b06      	ldr	r3, [sp, #24]
 8019230:	445b      	add	r3, fp
 8019232:	461c      	mov	r4, r3
 8019234:	9b02      	ldr	r3, [sp, #8]
 8019236:	3301      	adds	r3, #1
 8019238:	f000 8166 	beq.w	8019508 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 801923c:	f104 05a4 	add.w	r5, r4, #164	@ 0xa4
 8019240:	9803      	ldr	r0, [sp, #12]
 8019242:	4629      	mov	r1, r5
 8019244:	f7ff fd36 	bl	8018cb4 <_ZNK8touchgfx4Rect8includesERKS0_>
 8019248:	b120      	cbz	r0, 8019254 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 801924a:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801924e:	9801      	ldr	r0, [sp, #4]
 8019250:	f7ff feb0 	bl	8018fb4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8019254:	9903      	ldr	r1, [sp, #12]
 8019256:	4628      	mov	r0, r5
 8019258:	f7ff fcb9 	bl	8018bce <_ZNK8touchgfx4Rect9intersectERKS0_>
 801925c:	2800      	cmp	r0, #0
 801925e:	f000 809c 	beq.w	801939a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 8019262:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	@ 0xa4
 8019266:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 801926a:	fa1f f189 	uxth.w	r1, r9
 801926e:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 8019272:	9309      	str	r3, [sp, #36]	@ 0x24
 8019274:	eb01 0c03 	add.w	ip, r1, r3
 8019278:	b283      	uxth	r3, r0
 801927a:	4548      	cmp	r0, r9
 801927c:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	@ 0x2a
 8019280:	fa1f fa8c 	uxth.w	sl, ip
 8019284:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 8019288:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	@ 0xa6
 801928c:	eb03 050c 	add.w	r5, r3, ip
 8019290:	b2ad      	uxth	r5, r5
 8019292:	9505      	str	r5, [sp, #20]
 8019294:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 8019298:	9504      	str	r5, [sp, #16]
 801929a:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	@ 0xec
 801929e:	f340 8099 	ble.w	80193d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 80192a2:	1a5b      	subs	r3, r3, r1
 80192a4:	4596      	cmp	lr, r2
 80192a6:	fa0f f08a 	sxth.w	r0, sl
 80192aa:	b29b      	uxth	r3, r3
 80192ac:	b21e      	sxth	r6, r3
 80192ae:	dd2e      	ble.n	801930e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 80192b0:	9f02      	ldr	r7, [sp, #8]
 80192b2:	fa1f fe8e 	uxth.w	lr, lr
 80192b6:	b292      	uxth	r2, r2
 80192b8:	f8bd 402e 	ldrh.w	r4, [sp, #46]	@ 0x2e
 80192bc:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 80192c0:	9f04      	ldr	r7, [sp, #16]
 80192c2:	ebae 0102 	sub.w	r1, lr, r2
 80192c6:	44a6      	add	lr, r4
 80192c8:	1a3f      	subs	r7, r7, r0
 80192ca:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	@ 0xb2
 80192ce:	b289      	uxth	r1, r1
 80192d0:	4402      	add	r2, r0
 80192d2:	fa0f fe8e 	sxth.w	lr, lr
 80192d6:	b20d      	sxth	r5, r1
 80192d8:	b212      	sxth	r2, r2
 80192da:	436f      	muls	r7, r5
 80192dc:	ebae 0202 	sub.w	r2, lr, r2
 80192e0:	4372      	muls	r2, r6
 80192e2:	4297      	cmp	r7, r2
 80192e4:	db09      	blt.n	80192fa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 80192e6:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	@ 0xac
 80192ea:	f8a8 50b2 	strh.w	r5, [r8, #178]	@ 0xb2
 80192ee:	449c      	add	ip, r3
 80192f0:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 80192f4:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 80192f8:	e686      	b.n	8019008 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80192fa:	4421      	add	r1, r4
 80192fc:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	@ 0xae
 8019300:	f8a8 60b0 	strh.w	r6, [r8, #176]	@ 0xb0
 8019304:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8019308:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 801930c:	e67c      	b.n	8019008 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801930e:	9f04      	ldr	r7, [sp, #16]
 8019310:	42b8      	cmp	r0, r7
 8019312:	da27      	bge.n	8019364 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 8019314:	9902      	ldr	r1, [sp, #8]
 8019316:	1a3f      	subs	r7, r7, r0
 8019318:	f8bd 502e 	ldrh.w	r5, [sp, #46]	@ 0x2e
 801931c:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 8019320:	eb05 010e 	add.w	r1, r5, lr
 8019324:	fa1f f881 	uxth.w	r8, r1
 8019328:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	@ 0xb2
 801932c:	4411      	add	r1, r2
 801932e:	fa0f f988 	sxth.w	r9, r8
 8019332:	eba2 020e 	sub.w	r2, r2, lr
 8019336:	eba1 0108 	sub.w	r1, r1, r8
 801933a:	4372      	muls	r2, r6
 801933c:	b289      	uxth	r1, r1
 801933e:	fa0f f881 	sxth.w	r8, r1
 8019342:	fb08 f707 	mul.w	r7, r8, r7
 8019346:	42ba      	cmp	r2, r7
 8019348:	dc06      	bgt.n	8019358 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 801934a:	f8a4 90ae 	strh.w	r9, [r4, #174]	@ 0xae
 801934e:	f8a4 80b2 	strh.w	r8, [r4, #178]	@ 0xb2
 8019352:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	@ 0xac
 8019356:	e7ca      	b.n	80192ee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 8019358:	4429      	add	r1, r5
 801935a:	f8a4 60b0 	strh.w	r6, [r4, #176]	@ 0xb0
 801935e:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8019362:	e651      	b.n	8019008 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8019364:	9805      	ldr	r0, [sp, #20]
 8019366:	2d06      	cmp	r5, #6
 8019368:	ebaa 0000 	sub.w	r0, sl, r0
 801936c:	b280      	uxth	r0, r0
 801936e:	fa0f fe80 	sxth.w	lr, r0
 8019372:	d817      	bhi.n	80193a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 8019374:	9b04      	ldr	r3, [sp, #16]
 8019376:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	@ 0xaa
 801937a:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 801937e:	1c6b      	adds	r3, r5, #1
 8019380:	f8a4 e0a8 	strh.w	lr, [r4, #168]	@ 0xa8
 8019384:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 8019388:	9b01      	ldr	r3, [sp, #4]
 801938a:	9801      	ldr	r0, [sp, #4]
 801938c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8019390:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8019394:	805a      	strh	r2, [r3, #2]
 8019396:	809e      	strh	r6, [r3, #4]
 8019398:	80d9      	strh	r1, [r3, #6]
 801939a:	9b02      	ldr	r3, [sp, #8]
 801939c:	3c08      	subs	r4, #8
 801939e:	3b01      	subs	r3, #1
 80193a0:	9302      	str	r3, [sp, #8]
 80193a2:	e747      	b.n	8019234 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 80193a4:	9a02      	ldr	r2, [sp, #8]
 80193a6:	45b6      	cmp	lr, r6
 80193a8:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80193ac:	db0d      	blt.n	80193ca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 80193ae:	449c      	add	ip, r3
 80193b0:	445a      	add	r2, fp
 80193b2:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 80193b6:	fa1f fc8c 	uxth.w	ip, ip
 80193ba:	f8a2 e0b0 	strh.w	lr, [r2, #176]	@ 0xb0
 80193be:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 80193c2:	448c      	add	ip, r1
 80193c4:	f8a2 c0ac 	strh.w	ip, [r2, #172]	@ 0xac
 80193c8:	e61e      	b.n	8019008 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80193ca:	445a      	add	r2, fp
 80193cc:	4484      	add	ip, r0
 80193ce:	f8a2 60b0 	strh.w	r6, [r2, #176]	@ 0xb0
 80193d2:	e78f      	b.n	80192f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 80193d4:	fa1f f18e 	uxth.w	r1, lr
 80193d8:	f8bd 602e 	ldrh.w	r6, [sp, #46]	@ 0x2e
 80193dc:	b293      	uxth	r3, r2
 80193de:	4596      	cmp	lr, r2
 80193e0:	eb01 0806 	add.w	r8, r1, r6
 80193e4:	9306      	str	r3, [sp, #24]
 80193e6:	fa1f f888 	uxth.w	r8, r8
 80193ea:	9f06      	ldr	r7, [sp, #24]
 80193ec:	fa0f f388 	sxth.w	r3, r8
 80193f0:	9307      	str	r3, [sp, #28]
 80193f2:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 80193f6:	443b      	add	r3, r7
 80193f8:	b29b      	uxth	r3, r3
 80193fa:	9308      	str	r3, [sp, #32]
 80193fc:	da24      	bge.n	8019448 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 80193fe:	9905      	ldr	r1, [sp, #20]
 8019400:	eba3 0308 	sub.w	r3, r3, r8
 8019404:	eba2 020e 	sub.w	r2, r2, lr
 8019408:	eba9 0000 	sub.w	r0, r9, r0
 801940c:	ebaa 0401 	sub.w	r4, sl, r1
 8019410:	b29b      	uxth	r3, r3
 8019412:	b2a4      	uxth	r4, r4
 8019414:	b219      	sxth	r1, r3
 8019416:	b225      	sxth	r5, r4
 8019418:	4348      	muls	r0, r1
 801941a:	436a      	muls	r2, r5
 801941c:	4282      	cmp	r2, r0
 801941e:	9a02      	ldr	r2, [sp, #8]
 8019420:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8019424:	445a      	add	r2, fp
 8019426:	dc06      	bgt.n	8019436 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 8019428:	9b07      	ldr	r3, [sp, #28]
 801942a:	44a4      	add	ip, r4
 801942c:	f8a2 10b2 	strh.w	r1, [r2, #178]	@ 0xb2
 8019430:	f8a2 30ae 	strh.w	r3, [r2, #174]	@ 0xae
 8019434:	e75e      	b.n	80192f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8019436:	9904      	ldr	r1, [sp, #16]
 8019438:	f8a2 50b0 	strh.w	r5, [r2, #176]	@ 0xb0
 801943c:	f8a2 10ac 	strh.w	r1, [r2, #172]	@ 0xac
 8019440:	4433      	add	r3, r6
 8019442:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 8019446:	e5df      	b.n	8019008 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8019448:	9f06      	ldr	r7, [sp, #24]
 801944a:	9b04      	ldr	r3, [sp, #16]
 801944c:	1bc9      	subs	r1, r1, r7
 801944e:	fa0f f78a 	sxth.w	r7, sl
 8019452:	b289      	uxth	r1, r1
 8019454:	429f      	cmp	r7, r3
 8019456:	fa0f fe81 	sxth.w	lr, r1
 801945a:	dd23      	ble.n	80194a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
 801945c:	9a05      	ldr	r2, [sp, #20]
 801945e:	eba9 0000 	sub.w	r0, r9, r0
 8019462:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8019466:	ebaa 0202 	sub.w	r2, sl, r2
 801946a:	9d07      	ldr	r5, [sp, #28]
 801946c:	fb0e f000 	mul.w	r0, lr, r0
 8019470:	b292      	uxth	r2, r2
 8019472:	eba5 0a03 	sub.w	sl, r5, r3
 8019476:	9b02      	ldr	r3, [sp, #8]
 8019478:	b214      	sxth	r4, r2
 801947a:	00db      	lsls	r3, r3, #3
 801947c:	fb04 fa0a 	mul.w	sl, r4, sl
 8019480:	445b      	add	r3, fp
 8019482:	4550      	cmp	r0, sl
 8019484:	db03      	blt.n	801948e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
 8019486:	f8a3 e0b2 	strh.w	lr, [r3, #178]	@ 0xb2
 801948a:	4494      	add	ip, r2
 801948c:	e732      	b.n	80192f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801948e:	9a04      	ldr	r2, [sp, #16]
 8019490:	4431      	add	r1, r6
 8019492:	f8a3 40b0 	strh.w	r4, [r3, #176]	@ 0xb0
 8019496:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 801949a:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	@ 0xae
 801949e:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 80194a2:	e75c      	b.n	801935e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 80194a4:	9b08      	ldr	r3, [sp, #32]
 80194a6:	2d06      	cmp	r5, #6
 80194a8:	eba3 0308 	sub.w	r3, r3, r8
 80194ac:	b29b      	uxth	r3, r3
 80194ae:	b218      	sxth	r0, r3
 80194b0:	d813      	bhi.n	80194da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
 80194b2:	9b07      	ldr	r3, [sp, #28]
 80194b4:	f8a4 00aa 	strh.w	r0, [r4, #170]	@ 0xaa
 80194b8:	f8a4 30a6 	strh.w	r3, [r4, #166]	@ 0xa6
 80194bc:	1c6b      	adds	r3, r5, #1
 80194be:	9901      	ldr	r1, [sp, #4]
 80194c0:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 80194c4:	9b01      	ldr	r3, [sp, #4]
 80194c6:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 80194ca:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80194ce:	805a      	strh	r2, [r3, #2]
 80194d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80194d2:	f8a3 e006 	strh.w	lr, [r3, #6]
 80194d6:	809a      	strh	r2, [r3, #4]
 80194d8:	e75f      	b.n	801939a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 80194da:	9c02      	ldr	r4, [sp, #8]
 80194dc:	4570      	cmp	r0, lr
 80194de:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 80194e2:	db0d      	blt.n	8019500 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
 80194e4:	4431      	add	r1, r6
 80194e6:	9b06      	ldr	r3, [sp, #24]
 80194e8:	445c      	add	r4, fp
 80194ea:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 80194ee:	b289      	uxth	r1, r1
 80194f0:	f8a4 00b2 	strh.w	r0, [r4, #178]	@ 0xb2
 80194f4:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 80194f8:	4419      	add	r1, r3
 80194fa:	f8a4 10ae 	strh.w	r1, [r4, #174]	@ 0xae
 80194fe:	e583      	b.n	8019008 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8019500:	445c      	add	r4, fp
 8019502:	f8a4 e0b2 	strh.w	lr, [r4, #178]	@ 0xb2
 8019506:	e79b      	b.n	8019440 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 8019508:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 801950c:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 8019510:	1e65      	subs	r5, r4, #1
 8019512:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 8019516:	b2ad      	uxth	r5, r5
 8019518:	42b5      	cmp	r5, r6
 801951a:	d044      	beq.n	80195a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ca>
 801951c:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 8019520:	f9b4 00a6 	ldrsh.w	r0, [r4, #166]	@ 0xa6
 8019524:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 8019528:	4282      	cmp	r2, r0
 801952a:	f9b4 70a4 	ldrsh.w	r7, [r4, #164]	@ 0xa4
 801952e:	d11f      	bne.n	8019570 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 8019530:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	@ 0x2e
 8019534:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 8019538:	459c      	cmp	ip, r3
 801953a:	d119      	bne.n	8019570 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 801953c:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	@ 0xa8
 8019540:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 8019544:	19d8      	adds	r0, r3, r7
 8019546:	b200      	sxth	r0, r0
 8019548:	4288      	cmp	r0, r1
 801954a:	d109      	bne.n	8019560 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x584>
 801954c:	f8ad 7028 	strh.w	r7, [sp, #40]	@ 0x28
 8019550:	4413      	add	r3, r2
 8019552:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 8019556:	4629      	mov	r1, r5
 8019558:	9801      	ldr	r0, [sp, #4]
 801955a:	f7ff fd2b 	bl	8018fb4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801955e:	e003      	b.n	8019568 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 8019560:	4411      	add	r1, r2
 8019562:	b209      	sxth	r1, r1
 8019564:	42b9      	cmp	r1, r7
 8019566:	d0f3      	beq.n	8019550 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x574>
 8019568:	3d01      	subs	r5, #1
 801956a:	3c08      	subs	r4, #8
 801956c:	b2ad      	uxth	r5, r5
 801956e:	e7d3      	b.n	8019518 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 8019570:	42b9      	cmp	r1, r7
 8019572:	d1f9      	bne.n	8019568 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 8019574:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	@ 0x2c
 8019578:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 801957c:	4299      	cmp	r1, r3
 801957e:	d1f3      	bne.n	8019568 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 8019580:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 8019584:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 8019588:	181f      	adds	r7, r3, r0
 801958a:	b23f      	sxth	r7, r7
 801958c:	42ba      	cmp	r2, r7
 801958e:	d105      	bne.n	801959c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c0>
 8019590:	f8ad 002a 	strh.w	r0, [sp, #42]	@ 0x2a
 8019594:	440b      	add	r3, r1
 8019596:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 801959a:	e7dc      	b.n	8019556 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x57a>
 801959c:	440a      	add	r2, r1
 801959e:	b212      	sxth	r2, r2
 80195a0:	4290      	cmp	r0, r2
 80195a2:	d1e1      	bne.n	8019568 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 80195a4:	e7f6      	b.n	8019594 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5b8>
 80195a6:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	@ 0xec
 80195aa:	2e07      	cmp	r6, #7
 80195ac:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 80195b0:	d812      	bhi.n	80195d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fc>
 80195b2:	1c75      	adds	r5, r6, #1
 80195b4:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 80195b8:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 80195bc:	f8ab 50ec 	strh.w	r5, [fp, #236]	@ 0xec
 80195c0:	9d01      	ldr	r5, [sp, #4]
 80195c2:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 80195c6:	442c      	add	r4, r5
 80195c8:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 80195cc:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 80195d0:	8061      	strh	r1, [r4, #2]
 80195d2:	80a2      	strh	r2, [r4, #4]
 80195d4:	80e3      	strh	r3, [r4, #6]
 80195d6:	e581      	b.n	80190dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 80195d8:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 80195dc:	3e01      	subs	r6, #1
 80195de:	445c      	add	r4, fp
 80195e0:	f06f 4a00 	mvn.w	sl, #2147483648	@ 0x80000000
 80195e4:	f04f 37ff 	mov.w	r7, #4294967295
 80195e8:	2500      	movs	r5, #0
 80195ea:	9305      	str	r3, [sp, #20]
 80195ec:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 80195f0:	1e72      	subs	r2, r6, #1
 80195f2:	9302      	str	r3, [sp, #8]
 80195f4:	4691      	mov	r9, r2
 80195f6:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 80195fa:	9304      	str	r3, [sp, #16]
 80195fc:	f104 03a4 	add.w	r3, r4, #164	@ 0xa4
 8019600:	f1b9 3fff 	cmp.w	r9, #4294967295
 8019604:	6818      	ldr	r0, [r3, #0]
 8019606:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801960a:	9207      	str	r2, [sp, #28]
 801960c:	bf16      	itet	ne
 801960e:	9905      	ldrne	r1, [sp, #20]
 8019610:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 8019614:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 8019618:	9306      	str	r3, [sp, #24]
 801961a:	f8be 1006 	ldrh.w	r1, [lr, #6]
 801961e:	f8be 8004 	ldrh.w	r8, [lr, #4]
 8019622:	fb18 f801 	smulbb	r8, r8, r1
 8019626:	6859      	ldr	r1, [r3, #4]
 8019628:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801962c:	4671      	mov	r1, lr
 801962e:	a80c      	add	r0, sp, #48	@ 0x30
 8019630:	f7fb f97b 	bl	801492a <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8019634:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 8019638:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 801963c:	f04f 0c08 	mov.w	ip, #8
 8019640:	9b04      	ldr	r3, [sp, #16]
 8019642:	9a02      	ldr	r2, [sp, #8]
 8019644:	fb10 f001 	smulbb	r0, r0, r1
 8019648:	fb02 8803 	mla	r8, r2, r3, r8
 801964c:	eba0 0108 	sub.w	r1, r0, r8
 8019650:	fb90 f0fc 	sdiv	r0, r0, ip
 8019654:	4288      	cmp	r0, r1
 8019656:	dc20      	bgt.n	801969a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6be>
 8019658:	4551      	cmp	r1, sl
 801965a:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801965e:	da03      	bge.n	8019668 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x68c>
 8019660:	b1d9      	cbz	r1, 801969a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6be>
 8019662:	468a      	mov	sl, r1
 8019664:	464f      	mov	r7, r9
 8019666:	4635      	mov	r5, r6
 8019668:	f109 39ff 	add.w	r9, r9, #4294967295
 801966c:	f119 0f02 	cmn.w	r9, #2
 8019670:	d1c6      	bne.n	8019600 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x624>
 8019672:	4616      	mov	r6, r2
 8019674:	3201      	adds	r2, #1
 8019676:	f1a4 0408 	sub.w	r4, r4, #8
 801967a:	d1b7      	bne.n	80195ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x610>
 801967c:	9b01      	ldr	r3, [sp, #4]
 801967e:	b2ac      	uxth	r4, r5
 8019680:	00ed      	lsls	r5, r5, #3
 8019682:	1958      	adds	r0, r3, r5
 8019684:	1c7b      	adds	r3, r7, #1
 8019686:	d10b      	bne.n	80196a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c4>
 8019688:	4601      	mov	r1, r0
 801968a:	9803      	ldr	r0, [sp, #12]
 801968c:	f7fb f94d 	bl	801492a <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8019690:	4621      	mov	r1, r4
 8019692:	9801      	ldr	r0, [sp, #4]
 8019694:	f7ff fc8e 	bl	8018fb4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8019698:	e4b6      	b.n	8019008 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801969a:	464f      	mov	r7, r9
 801969c:	4635      	mov	r5, r6
 801969e:	e7ed      	b.n	801967c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6a0>
 80196a0:	9b01      	ldr	r3, [sp, #4]
 80196a2:	00ff      	lsls	r7, r7, #3
 80196a4:	445d      	add	r5, fp
 80196a6:	19d9      	adds	r1, r3, r7
 80196a8:	445f      	add	r7, fp
 80196aa:	f7fb f93e 	bl	801492a <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80196ae:	9b03      	ldr	r3, [sp, #12]
 80196b0:	cb03      	ldmia	r3!, {r0, r1}
 80196b2:	9b03      	ldr	r3, [sp, #12]
 80196b4:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
 80196b8:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 80196bc:	f855 0fac 	ldr.w	r0, [r5, #172]!
 80196c0:	6869      	ldr	r1, [r5, #4]
 80196c2:	c303      	stmia	r3!, {r0, r1}
 80196c4:	e7e4      	b.n	8019690 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6b4>
 80196c6:	bf00      	nop

080196c8 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 80196c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80196cc:	f500 7698 	add.w	r6, r0, #304	@ 0x130
 80196d0:	b09b      	sub	sp, #108	@ 0x6c
 80196d2:	4604      	mov	r4, r0
 80196d4:	4630      	mov	r0, r6
 80196d6:	f7f9 f82a 	bl	801272e <_ZNK8touchgfx4Rect7isEmptyEv>
 80196da:	4605      	mov	r5, r0
 80196dc:	b948      	cbnz	r0, 80196f2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a>
 80196de:	6823      	ldr	r3, [r4, #0]
 80196e0:	4620      	mov	r0, r4
 80196e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80196e4:	e896 0006 	ldmia.w	r6, {r1, r2}
 80196e8:	4798      	blx	r3
 80196ea:	f8c4 5130 	str.w	r5, [r4, #304]	@ 0x130
 80196ee:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
 80196f2:	4bc5      	ldr	r3, [pc, #788]	@ (8019a08 <_ZN8touchgfx11Application15drawCachedAreasEv+0x340>)
 80196f4:	681b      	ldr	r3, [r3, #0]
 80196f6:	2b00      	cmp	r3, #0
 80196f8:	d03f      	beq.n	801977a <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 80196fa:	4dc4      	ldr	r5, [pc, #784]	@ (8019a0c <_ZN8touchgfx11Application15drawCachedAreasEv+0x344>)
 80196fc:	4628      	mov	r0, r5
 80196fe:	f7f9 f816 	bl	801272e <_ZNK8touchgfx4Rect7isEmptyEv>
 8019702:	4606      	mov	r6, r0
 8019704:	2800      	cmp	r0, #0
 8019706:	d138      	bne.n	801977a <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 8019708:	4628      	mov	r0, r5
 801970a:	f7ff f98d 	bl	8018a28 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801970e:	6823      	ldr	r3, [r4, #0]
 8019710:	6829      	ldr	r1, [r5, #0]
 8019712:	4620      	mov	r0, r4
 8019714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8019716:	686a      	ldr	r2, [r5, #4]
 8019718:	4798      	blx	r3
 801971a:	802e      	strh	r6, [r5, #0]
 801971c:	806e      	strh	r6, [r5, #2]
 801971e:	80ae      	strh	r6, [r5, #4]
 8019720:	80ee      	strh	r6, [r5, #6]
 8019722:	f10d 0824 	add.w	r8, sp, #36	@ 0x24
 8019726:	4dba      	ldr	r5, [pc, #744]	@ (8019a10 <_ZN8touchgfx11Application15drawCachedAreasEv+0x348>)
 8019728:	4640      	mov	r0, r8
 801972a:	f7ff fbe8 	bl	8018efe <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801972e:	882e      	ldrh	r6, [r5, #0]
 8019730:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 8019734:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 8019738:	4633      	mov	r3, r6
 801973a:	42bb      	cmp	r3, r7
 801973c:	d224      	bcs.n	8019788 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 801973e:	f8bd 1064 	ldrh.w	r1, [sp, #100]	@ 0x64
 8019742:	2907      	cmp	r1, #7
 8019744:	d816      	bhi.n	8019774 <_ZN8touchgfx11Application15drawCachedAreasEv+0xac>
 8019746:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 801974a:	f930 9033 	ldrsh.w	r9, [r0, r3, lsl #3]
 801974e:	f9b2 a002 	ldrsh.w	sl, [r2, #2]
 8019752:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 8019756:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 801975a:	1c4a      	adds	r2, r1, #1
 801975c:	f8ad 2064 	strh.w	r2, [sp, #100]	@ 0x64
 8019760:	eb08 02c1 	add.w	r2, r8, r1, lsl #3
 8019764:	f828 9031 	strh.w	r9, [r8, r1, lsl #3]
 8019768:	f8a2 a002 	strh.w	sl, [r2, #2]
 801976c:	f8a2 e004 	strh.w	lr, [r2, #4]
 8019770:	f8a2 c006 	strh.w	ip, [r2, #6]
 8019774:	3301      	adds	r3, #1
 8019776:	b29b      	uxth	r3, r3
 8019778:	e7df      	b.n	801973a <_ZN8touchgfx11Application15drawCachedAreasEv+0x72>
 801977a:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 801977e:	2b00      	cmp	r3, #0
 8019780:	d1cf      	bne.n	8019722 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5a>
 8019782:	b01b      	add	sp, #108	@ 0x6c
 8019784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019788:	f8b4 312e 	ldrh.w	r3, [r4, #302]	@ 0x12e
 801978c:	42b3      	cmp	r3, r6
 801978e:	d90c      	bls.n	80197aa <_ZN8touchgfx11Application15drawCachedAreasEv+0xe2>
 8019790:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8019794:	6822      	ldr	r2, [r4, #0]
 8019796:	3601      	adds	r6, #1
 8019798:	4620      	mov	r0, r4
 801979a:	6c17      	ldr	r7, [r2, #64]	@ 0x40
 801979c:	f8d3 10ee 	ldr.w	r1, [r3, #238]	@ 0xee
 80197a0:	b2b6      	uxth	r6, r6
 80197a2:	f8d3 20f2 	ldr.w	r2, [r3, #242]	@ 0xf2
 80197a6:	47b8      	blx	r7
 80197a8:	e7ee      	b.n	8019788 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 80197aa:	4a9a      	ldr	r2, [pc, #616]	@ (8019a14 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 80197ac:	6813      	ldr	r3, [r2, #0]
 80197ae:	4691      	mov	r9, r2
 80197b0:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80197b4:	2b01      	cmp	r3, #1
 80197b6:	f040 80e0 	bne.w	801997a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b2>
 80197ba:	8829      	ldrh	r1, [r5, #0]
 80197bc:	2600      	movs	r6, #0
 80197be:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 80197c2:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
 80197c6:	33ae      	adds	r3, #174	@ 0xae
 80197c8:	428f      	cmp	r7, r1
 80197ca:	f103 0308 	add.w	r3, r3, #8
 80197ce:	dd0a      	ble.n	80197e6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x11e>
 80197d0:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 80197d4:	3101      	adds	r1, #1
 80197d6:	f833 0c08 	ldrh.w	r0, [r3, #-8]
 80197da:	4402      	add	r2, r0
 80197dc:	b212      	sxth	r2, r2
 80197de:	4296      	cmp	r6, r2
 80197e0:	bfb8      	it	lt
 80197e2:	4616      	movlt	r6, r2
 80197e4:	e7f0      	b.n	80197c8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x100>
 80197e6:	4b8c      	ldr	r3, [pc, #560]	@ (8019a18 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 80197e8:	f8df 9228 	ldr.w	r9, [pc, #552]	@ 8019a14 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>
 80197ec:	881b      	ldrh	r3, [r3, #0]
 80197ee:	2b0f      	cmp	r3, #15
 80197f0:	bf8c      	ite	hi
 80197f2:	ea4f 0bd3 	movhi.w	fp, r3, lsr #3
 80197f6:	f04f 0b01 	movls.w	fp, #1
 80197fa:	2300      	movs	r3, #0
 80197fc:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8019800:	f8bd 7016 	ldrh.w	r7, [sp, #22]
 8019804:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 8019808:	4b82      	ldr	r3, [pc, #520]	@ (8019a14 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 801980a:	4438      	add	r0, r7
 801980c:	b207      	sxth	r7, r0
 801980e:	6818      	ldr	r0, [r3, #0]
 8019810:	42b7      	cmp	r7, r6
 8019812:	6803      	ldr	r3, [r0, #0]
 8019814:	f280 8083 	bge.w	801991e <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 8019818:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801981c:	4798      	blx	r3
 801981e:	eb07 030b 	add.w	r3, r7, fp
 8019822:	4298      	cmp	r0, r3
 8019824:	da07      	bge.n	8019836 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 8019826:	42b0      	cmp	r0, r6
 8019828:	da05      	bge.n	8019836 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 801982a:	4287      	cmp	r7, r0
 801982c:	dd6c      	ble.n	8019908 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 801982e:	2f00      	cmp	r7, #0
 8019830:	dd6a      	ble.n	8019908 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 8019832:	4630      	mov	r0, r6
 8019834:	e004      	b.n	8019840 <_ZN8touchgfx11Application15drawCachedAreasEv+0x178>
 8019836:	4287      	cmp	r7, r0
 8019838:	dcfb      	bgt.n	8019832 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16a>
 801983a:	42b0      	cmp	r0, r6
 801983c:	bfa8      	it	ge
 801983e:	4630      	movge	r0, r6
 8019840:	4b76      	ldr	r3, [pc, #472]	@ (8019a1c <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 8019842:	1bc0      	subs	r0, r0, r7
 8019844:	2200      	movs	r2, #0
 8019846:	f8ad 7016 	strh.w	r7, [sp, #22]
 801984a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801984e:	882f      	ldrh	r7, [r5, #0]
 8019850:	f8ad 2014 	strh.w	r2, [sp, #20]
 8019854:	f8ad 3018 	strh.w	r3, [sp, #24]
 8019858:	f8ad 001a 	strh.w	r0, [sp, #26]
 801985c:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 8019860:	42bb      	cmp	r3, r7
 8019862:	d9cd      	bls.n	8019800 <_ZN8touchgfx11Application15drawCachedAreasEv+0x138>
 8019864:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 8019868:	ab07      	add	r3, sp, #28
 801986a:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801986e:	6851      	ldr	r1, [r2, #4]
 8019870:	c303      	stmia	r3!, {r0, r1}
 8019872:	a905      	add	r1, sp, #20
 8019874:	a807      	add	r0, sp, #28
 8019876:	f7ff f9aa 	bl	8018bce <_ZNK8touchgfx4Rect9intersectERKS0_>
 801987a:	2800      	cmp	r0, #0
 801987c:	d04c      	beq.n	8019918 <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 801987e:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8019882:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 8019886:	f8bd a020 	ldrh.w	sl, [sp, #32]
 801988a:	4686      	mov	lr, r0
 801988c:	4290      	cmp	r0, r2
 801988e:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 8019892:	4450      	add	r0, sl
 8019894:	f8bd a018 	ldrh.w	sl, [sp, #24]
 8019898:	bfb8      	it	lt
 801989a:	4696      	movlt	lr, r2
 801989c:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 80198a0:	4452      	add	r2, sl
 80198a2:	b280      	uxth	r0, r0
 80198a4:	4299      	cmp	r1, r3
 80198a6:	468c      	mov	ip, r1
 80198a8:	b292      	uxth	r2, r2
 80198aa:	9302      	str	r3, [sp, #8]
 80198ac:	bfb8      	it	lt
 80198ae:	469c      	movlt	ip, r3
 80198b0:	b203      	sxth	r3, r0
 80198b2:	fa0f fa82 	sxth.w	sl, r2
 80198b6:	f8ad e01c 	strh.w	lr, [sp, #28]
 80198ba:	f8ad c01e 	strh.w	ip, [sp, #30]
 80198be:	4553      	cmp	r3, sl
 80198c0:	bfb8      	it	lt
 80198c2:	4602      	movlt	r2, r0
 80198c4:	9b02      	ldr	r3, [sp, #8]
 80198c6:	eba2 020e 	sub.w	r2, r2, lr
 80198ca:	f8ad 2020 	strh.w	r2, [sp, #32]
 80198ce:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
 80198d2:	4411      	add	r1, r2
 80198d4:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80198d8:	4413      	add	r3, r2
 80198da:	b289      	uxth	r1, r1
 80198dc:	b29b      	uxth	r3, r3
 80198de:	b208      	sxth	r0, r1
 80198e0:	b21a      	sxth	r2, r3
 80198e2:	4290      	cmp	r0, r2
 80198e4:	bfb8      	it	lt
 80198e6:	460b      	movlt	r3, r1
 80198e8:	eba3 030c 	sub.w	r3, r3, ip
 80198ec:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 80198f0:	a807      	add	r0, sp, #28
 80198f2:	f7f8 ff1c 	bl	801272e <_ZNK8touchgfx4Rect7isEmptyEv>
 80198f6:	b920      	cbnz	r0, 8019902 <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 80198f8:	6823      	ldr	r3, [r4, #0]
 80198fa:	a907      	add	r1, sp, #28
 80198fc:	4620      	mov	r0, r4
 80198fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8019900:	4798      	blx	r3
 8019902:	3701      	adds	r7, #1
 8019904:	b2bf      	uxth	r7, r7
 8019906:	e7a9      	b.n	801985c <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 8019908:	f8d9 0000 	ldr.w	r0, [r9]
 801990c:	2101      	movs	r1, #1
 801990e:	6803      	ldr	r3, [r0, #0]
 8019910:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8019914:	4798      	blx	r3
 8019916:	e773      	b.n	8019800 <_ZN8touchgfx11Application15drawCachedAreasEv+0x138>
 8019918:	e9cd 0007 	strd	r0, r0, [sp, #28]
 801991c:	e7e8      	b.n	80198f0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 801991e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019920:	4798      	blx	r3
 8019922:	4b3f      	ldr	r3, [pc, #252]	@ (8019a20 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 8019924:	781b      	ldrb	r3, [r3, #0]
 8019926:	2b00      	cmp	r3, #0
 8019928:	f43f af2b 	beq.w	8019782 <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 801992c:	2300      	movs	r3, #0
 801992e:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 8019932:	f8a4 312e 	strh.w	r3, [r4, #302]	@ 0x12e
 8019936:	882b      	ldrh	r3, [r5, #0]
 8019938:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 801993c:	42ab      	cmp	r3, r5
 801993e:	f4bf af20 	bcs.w	8019782 <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 8019942:	f8b4 112e 	ldrh.w	r1, [r4, #302]	@ 0x12e
 8019946:	2907      	cmp	r1, #7
 8019948:	d814      	bhi.n	8019974 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ac>
 801994a:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 801994e:	f938 e033 	ldrsh.w	lr, [r8, r3, lsl #3]
 8019952:	f9b2 c002 	ldrsh.w	ip, [r2, #2]
 8019956:	f9b2 7004 	ldrsh.w	r7, [r2, #4]
 801995a:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 801995e:	1c4a      	adds	r2, r1, #1
 8019960:	f8a4 212e 	strh.w	r2, [r4, #302]	@ 0x12e
 8019964:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 8019968:	f820 e031 	strh.w	lr, [r0, r1, lsl #3]
 801996c:	f8a2 c002 	strh.w	ip, [r2, #2]
 8019970:	8097      	strh	r7, [r2, #4]
 8019972:	80d6      	strh	r6, [r2, #6]
 8019974:	3301      	adds	r3, #1
 8019976:	b29b      	uxth	r3, r3
 8019978:	e7e0      	b.n	801993c <_ZN8touchgfx11Application15drawCachedAreasEv+0x274>
 801997a:	2b02      	cmp	r3, #2
 801997c:	f040 8133 	bne.w	8019be6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x51e>
 8019980:	4b28      	ldr	r3, [pc, #160]	@ (8019a24 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 8019982:	f104 0aac 	add.w	sl, r4, #172	@ 0xac
 8019986:	781b      	ldrb	r3, [r3, #0]
 8019988:	2b01      	cmp	r3, #1
 801998a:	f000 8098 	beq.w	8019abe <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 801998e:	882a      	ldrh	r2, [r5, #0]
 8019990:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	@ 0xec
 8019994:	3201      	adds	r2, #1
 8019996:	b292      	uxth	r2, r2
 8019998:	2900      	cmp	r1, #0
 801999a:	d0c2      	beq.n	8019922 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801999c:	f8b4 60ae 	ldrh.w	r6, [r4, #174]	@ 0xae
 80199a0:	4694      	mov	ip, r2
 80199a2:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	@ 0xb2
 80199a6:	f04f 0900 	mov.w	r9, #0
 80199aa:	441e      	add	r6, r3
 80199ac:	b236      	sxth	r6, r6
 80199ae:	fa1f f38c 	uxth.w	r3, ip
 80199b2:	ea4f 07c9 	mov.w	r7, r9, lsl #3
 80199b6:	4299      	cmp	r1, r3
 80199b8:	f240 80be 	bls.w	8019b38 <_ZN8touchgfx11Application15drawCachedAreasEv+0x470>
 80199bc:	4427      	add	r7, r4
 80199be:	eb04 0ecc 	add.w	lr, r4, ip, lsl #3
 80199c2:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 80199c6:	f9be 00ae 	ldrsh.w	r0, [lr, #174]	@ 0xae
 80199ca:	4283      	cmp	r3, r0
 80199cc:	f340 80a0 	ble.w	8019b10 <_ZN8touchgfx11Application15drawCachedAreasEv+0x448>
 80199d0:	f8be 60b2 	ldrh.w	r6, [lr, #178]	@ 0xb2
 80199d4:	46e1      	mov	r9, ip
 80199d6:	4406      	add	r6, r0
 80199d8:	b236      	sxth	r6, r6
 80199da:	429e      	cmp	r6, r3
 80199dc:	bfa8      	it	ge
 80199de:	461e      	movge	r6, r3
 80199e0:	f10c 0c01 	add.w	ip, ip, #1
 80199e4:	e7e3      	b.n	80199ae <_ZN8touchgfx11Application15drawCachedAreasEv+0x2e6>
 80199e6:	d10a      	bne.n	80199fe <_ZN8touchgfx11Application15drawCachedAreasEv+0x336>
 80199e8:	4562      	cmp	r2, ip
 80199ea:	f9b6 00b2 	ldrsh.w	r0, [r6, #178]	@ 0xb2
 80199ee:	f9be 10b2 	ldrsh.w	r1, [lr, #178]	@ 0xb2
 80199f2:	bfb8      	it	lt
 80199f4:	4662      	movlt	r2, ip
 80199f6:	4288      	cmp	r0, r1
 80199f8:	bfb8      	it	lt
 80199fa:	461f      	movlt	r7, r3
 80199fc:	e086      	b.n	8019b0c <_ZN8touchgfx11Application15drawCachedAreasEv+0x444>
 80199fe:	428a      	cmp	r2, r1
 8019a00:	bfb8      	it	lt
 8019a02:	460a      	movlt	r2, r1
 8019a04:	e082      	b.n	8019b0c <_ZN8touchgfx11Application15drawCachedAreasEv+0x444>
 8019a06:	bf00      	nop
 8019a08:	20029f18 	.word	0x20029f18
 8019a0c:	20029f24 	.word	0x20029f24
 8019a10:	20007ab0 	.word	0x20007ab0
 8019a14:	20029ed8 	.word	0x20029ed8
 8019a18:	20029ece 	.word	0x20029ece
 8019a1c:	20029ecc 	.word	0x20029ecc
 8019a20:	20029ed6 	.word	0x20029ed6
 8019a24:	20029ed0 	.word	0x20029ed0
 8019a28:	19a1      	adds	r1, r4, r6
 8019a2a:	ab07      	add	r3, sp, #28
 8019a2c:	f851 0fac 	ldr.w	r0, [r1, #172]!
 8019a30:	6849      	ldr	r1, [r1, #4]
 8019a32:	c303      	stmia	r3!, {r0, r1}
 8019a34:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8019a38:	a807      	add	r0, sp, #28
 8019a3a:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8019a3e:	2b13      	cmp	r3, #19
 8019a40:	440b      	add	r3, r1
 8019a42:	bfd8      	it	le
 8019a44:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 8019a48:	1a9b      	subs	r3, r3, r2
 8019a4a:	f8ad 201c 	strh.w	r2, [sp, #28]
 8019a4e:	f8ad 3020 	strh.w	r3, [sp, #32]
 8019a52:	f7ff f803 	bl	8018a5c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019a56:	a807      	add	r0, sp, #28
 8019a58:	f7f8 fe69 	bl	801272e <_ZNK8touchgfx4Rect7isEmptyEv>
 8019a5c:	bb78      	cbnz	r0, 8019abe <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 8019a5e:	f9bd c022 	ldrsh.w	ip, [sp, #34]	@ 0x22
 8019a62:	4426      	add	r6, r4
 8019a64:	f8d9 0000 	ldr.w	r0, [r9]
 8019a68:	f1bc 0f14 	cmp.w	ip, #20
 8019a6c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8019a70:	f8d0 e000 	ldr.w	lr, [r0]
 8019a74:	bfa8      	it	ge
 8019a76:	f04f 0c14 	movge.w	ip, #20
 8019a7a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8019a7e:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8019a82:	fa1f fc8c 	uxth.w	ip, ip
 8019a86:	f8cd c000 	str.w	ip, [sp]
 8019a8a:	f8de b090 	ldr.w	fp, [lr, #144]	@ 0x90
 8019a8e:	47d8      	blx	fp
 8019a90:	4683      	mov	fp, r0
 8019a92:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 8019a96:	a807      	add	r0, sp, #28
 8019a98:	f7fe ffc6 	bl	8018a28 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8019a9c:	6823      	ldr	r3, [r4, #0]
 8019a9e:	4620      	mov	r0, r4
 8019aa0:	a907      	add	r1, sp, #28
 8019aa2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8019aa4:	4798      	blx	r3
 8019aa6:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 8019aaa:	eba0 000b 	sub.w	r0, r0, fp
 8019aae:	b200      	sxth	r0, r0
 8019ab0:	f8a6 00b0 	strh.w	r0, [r6, #176]	@ 0xb0
 8019ab4:	b918      	cbnz	r0, 8019abe <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 8019ab6:	b2b9      	uxth	r1, r7
 8019ab8:	4650      	mov	r0, sl
 8019aba:	f7ff fa7b 	bl	8018fb4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8019abe:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	@ 0xec
 8019ac2:	f1bb 0f00 	cmp.w	fp, #0
 8019ac6:	f43f af2c 	beq.w	8019922 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8019aca:	882b      	ldrh	r3, [r5, #0]
 8019acc:	2700      	movs	r7, #0
 8019ace:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	@ 0xac
 8019ad2:	3301      	adds	r3, #1
 8019ad4:	b29b      	uxth	r3, r3
 8019ad6:	b299      	uxth	r1, r3
 8019ad8:	00fe      	lsls	r6, r7, #3
 8019ada:	458b      	cmp	fp, r1
 8019adc:	d9a4      	bls.n	8019a28 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>
 8019ade:	4426      	add	r6, r4
 8019ae0:	eb04 0ec3 	add.w	lr, r4, r3, lsl #3
 8019ae4:	f8b6 10ac 	ldrh.w	r1, [r6, #172]	@ 0xac
 8019ae8:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 8019aec:	f9be c0ac 	ldrsh.w	ip, [lr, #172]	@ 0xac
 8019af0:	4408      	add	r0, r1
 8019af2:	f8be 10b0 	ldrh.w	r1, [lr, #176]	@ 0xb0
 8019af6:	4461      	add	r1, ip
 8019af8:	b200      	sxth	r0, r0
 8019afa:	b209      	sxth	r1, r1
 8019afc:	4288      	cmp	r0, r1
 8019afe:	f6bf af72 	bge.w	80199e6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31e>
 8019b02:	4584      	cmp	ip, r0
 8019b04:	4662      	mov	r2, ip
 8019b06:	461f      	mov	r7, r3
 8019b08:	bfb8      	it	lt
 8019b0a:	4602      	movlt	r2, r0
 8019b0c:	3301      	adds	r3, #1
 8019b0e:	e7e2      	b.n	8019ad6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x40e>
 8019b10:	d10e      	bne.n	8019b30 <_ZN8touchgfx11Application15drawCachedAreasEv+0x468>
 8019b12:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	@ 0xb0
 8019b16:	f8be e0b2 	ldrh.w	lr, [lr, #178]	@ 0xb2
 8019b1a:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	@ 0xb0
 8019b1e:	4473      	add	r3, lr
 8019b20:	b21b      	sxth	r3, r3
 8019b22:	429e      	cmp	r6, r3
 8019b24:	bfa8      	it	ge
 8019b26:	461e      	movge	r6, r3
 8019b28:	4287      	cmp	r7, r0
 8019b2a:	bfb8      	it	lt
 8019b2c:	46e1      	movlt	r9, ip
 8019b2e:	e757      	b.n	80199e0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 8019b30:	4286      	cmp	r6, r0
 8019b32:	bfa8      	it	ge
 8019b34:	4606      	movge	r6, r0
 8019b36:	e753      	b.n	80199e0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 8019b38:	eb0a 0007 	add.w	r0, sl, r7
 8019b3c:	4427      	add	r7, r4
 8019b3e:	f9b7 b0b2 	ldrsh.w	fp, [r7, #178]	@ 0xb2
 8019b42:	f1bb 0f13 	cmp.w	fp, #19
 8019b46:	bfdc      	itt	le
 8019b48:	f8b7 60ae 	ldrhle.w	r6, [r7, #174]	@ 0xae
 8019b4c:	445e      	addle	r6, fp
 8019b4e:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8019b52:	bfd8      	it	le
 8019b54:	b236      	sxthle	r6, r6
 8019b56:	f7f8 fdea 	bl	801272e <_ZNK8touchgfx4Rect7isEmptyEv>
 8019b5a:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8019b5e:	2800      	cmp	r0, #0
 8019b60:	f47f af1a 	bne.w	8019998 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2d0>
 8019b64:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	@ 0xae
 8019b68:	fa1f fb8b 	uxth.w	fp, fp
 8019b6c:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 8019b70:	1ab6      	subs	r6, r6, r2
 8019b72:	4829      	ldr	r0, [pc, #164]	@ (8019c18 <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>)
 8019b74:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	@ 0xac
 8019b78:	2e14      	cmp	r6, #20
 8019b7a:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 8019b7e:	6800      	ldr	r0, [r0, #0]
 8019b80:	bfa8      	it	ge
 8019b82:	2614      	movge	r6, #20
 8019b84:	f8ad 101c 	strh.w	r1, [sp, #28]
 8019b88:	f8ad 201e 	strh.w	r2, [sp, #30]
 8019b8c:	b289      	uxth	r1, r1
 8019b8e:	f8ad 3020 	strh.w	r3, [sp, #32]
 8019b92:	b2b6      	uxth	r6, r6
 8019b94:	f8d0 c000 	ldr.w	ip, [r0]
 8019b98:	b292      	uxth	r2, r2
 8019b9a:	455e      	cmp	r6, fp
 8019b9c:	bf94      	ite	ls
 8019b9e:	9600      	strls	r6, [sp, #0]
 8019ba0:	f8cd b000 	strhi.w	fp, [sp]
 8019ba4:	b29b      	uxth	r3, r3
 8019ba6:	f8dc 6090 	ldr.w	r6, [ip, #144]	@ 0x90
 8019baa:	47b0      	blx	r6
 8019bac:	6823      	ldr	r3, [r4, #0]
 8019bae:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 8019bb2:	a907      	add	r1, sp, #28
 8019bb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8019bb6:	4620      	mov	r0, r4
 8019bb8:	4798      	blx	r3
 8019bba:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 8019bbe:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8019bc2:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	@ 0xae
 8019bc6:	1a5b      	subs	r3, r3, r1
 8019bc8:	440a      	add	r2, r1
 8019bca:	b21b      	sxth	r3, r3
 8019bcc:	f8a7 20ae 	strh.w	r2, [r7, #174]	@ 0xae
 8019bd0:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
 8019bd4:	2b00      	cmp	r3, #0
 8019bd6:	f47f aeda 	bne.w	801998e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c6>
 8019bda:	fa1f f189 	uxth.w	r1, r9
 8019bde:	4650      	mov	r0, sl
 8019be0:	f7ff f9e8 	bl	8018fb4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8019be4:	e6d3      	b.n	801998e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c6>
 8019be6:	882e      	ldrh	r6, [r5, #0]
 8019be8:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 8019bec:	42b3      	cmp	r3, r6
 8019bee:	f67f ae98 	bls.w	8019922 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8019bf2:	eb04 02c6 	add.w	r2, r4, r6, lsl #3
 8019bf6:	ab07      	add	r3, sp, #28
 8019bf8:	f852 0fac 	ldr.w	r0, [r2, #172]!
 8019bfc:	6851      	ldr	r1, [r2, #4]
 8019bfe:	c303      	stmia	r3!, {r0, r1}
 8019c00:	a807      	add	r0, sp, #28
 8019c02:	f7f8 fd94 	bl	801272e <_ZNK8touchgfx4Rect7isEmptyEv>
 8019c06:	b920      	cbnz	r0, 8019c12 <_ZN8touchgfx11Application15drawCachedAreasEv+0x54a>
 8019c08:	6823      	ldr	r3, [r4, #0]
 8019c0a:	a907      	add	r1, sp, #28
 8019c0c:	4620      	mov	r0, r4
 8019c0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8019c10:	4798      	blx	r3
 8019c12:	3601      	adds	r6, #1
 8019c14:	b2b6      	uxth	r6, r6
 8019c16:	e7e7      	b.n	8019be8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x520>
 8019c18:	20029ed8 	.word	0x20029ed8

08019c1c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8019c1c:	4b03      	ldr	r3, [pc, #12]	@ (8019c2c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8019c1e:	2200      	movs	r2, #0
 8019c20:	801a      	strh	r2, [r3, #0]
 8019c22:	805a      	strh	r2, [r3, #2]
 8019c24:	809a      	strh	r2, [r3, #4]
 8019c26:	80da      	strh	r2, [r3, #6]
 8019c28:	4770      	bx	lr
 8019c2a:	bf00      	nop
 8019c2c:	20029f24 	.word	0x20029f24

08019c30 <_ZNK8touchgfx4Font17getStringWidthRTLEhPKtSt9__va_list>:
 8019c30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019c34:	b09c      	sub	sp, #112	@ 0x70
 8019c36:	4604      	mov	r4, r0
 8019c38:	4615      	mov	r5, r2
 8019c3a:	460e      	mov	r6, r1
 8019c3c:	a803      	add	r0, sp, #12
 8019c3e:	461f      	mov	r7, r3
 8019c40:	f000 fe53 	bl	801a8ea <_ZN8touchgfx12TextProviderC1Ev>
 8019c44:	6823      	ldr	r3, [r4, #0]
 8019c46:	4620      	mov	r0, r4
 8019c48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8019c4a:	4798      	blx	r3
 8019c4c:	6823      	ldr	r3, [r4, #0]
 8019c4e:	4680      	mov	r8, r0
 8019c50:	4620      	mov	r0, r4
 8019c52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019c54:	4798      	blx	r3
 8019c56:	4629      	mov	r1, r5
 8019c58:	2500      	movs	r5, #0
 8019c5a:	9000      	str	r0, [sp, #0]
 8019c5c:	4643      	mov	r3, r8
 8019c5e:	463a      	mov	r2, r7
 8019c60:	a803      	add	r0, sp, #12
 8019c62:	f000 fe9d 	bl	801a9a0 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8019c66:	a803      	add	r0, sp, #12
 8019c68:	f000 fe66 	bl	801a938 <_ZN8touchgfx12TextProvider11endOfStringEv>
 8019c6c:	b958      	cbnz	r0, 8019c86 <_ZNK8touchgfx4Font17getStringWidthRTLEhPKtSt9__va_list+0x56>
 8019c6e:	4633      	mov	r3, r6
 8019c70:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8019c74:	4621      	mov	r1, r4
 8019c76:	a803      	add	r0, sp, #12
 8019c78:	f7fd fd1d 	bl	80176b6 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8019c7c:	b203      	sxth	r3, r0
 8019c7e:	42ab      	cmp	r3, r5
 8019c80:	bfc8      	it	gt
 8019c82:	4605      	movgt	r5, r0
 8019c84:	e7ef      	b.n	8019c66 <_ZNK8touchgfx4Font17getStringWidthRTLEhPKtSt9__va_list+0x36>
 8019c86:	4628      	mov	r0, r5
 8019c88:	b01c      	add	sp, #112	@ 0x70
 8019c8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019c8e <_ZNK8touchgfx4Font12getCharWidthEt>:
 8019c8e:	b508      	push	{r3, lr}
 8019c90:	6803      	ldr	r3, [r0, #0]
 8019c92:	68db      	ldr	r3, [r3, #12]
 8019c94:	4798      	blx	r3
 8019c96:	b128      	cbz	r0, 8019ca4 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8019c98:	7b43      	ldrb	r3, [r0, #13]
 8019c9a:	7a80      	ldrb	r0, [r0, #10]
 8019c9c:	005b      	lsls	r3, r3, #1
 8019c9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8019ca2:	4318      	orrs	r0, r3
 8019ca4:	bd08      	pop	{r3, pc}

08019ca6 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8019ca6:	b40e      	push	{r1, r2, r3}
 8019ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019caa:	b09e      	sub	sp, #120	@ 0x78
 8019cac:	4605      	mov	r5, r0
 8019cae:	ab23      	add	r3, sp, #140	@ 0x8c
 8019cb0:	a805      	add	r0, sp, #20
 8019cb2:	f853 4b04 	ldr.w	r4, [r3], #4
 8019cb6:	9303      	str	r3, [sp, #12]
 8019cb8:	f000 fe17 	bl	801a8ea <_ZN8touchgfx12TextProviderC1Ev>
 8019cbc:	682b      	ldr	r3, [r5, #0]
 8019cbe:	4628      	mov	r0, r5
 8019cc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8019cc2:	4798      	blx	r3
 8019cc4:	682b      	ldr	r3, [r5, #0]
 8019cc6:	4606      	mov	r6, r0
 8019cc8:	4628      	mov	r0, r5
 8019cca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019ccc:	4798      	blx	r3
 8019cce:	4633      	mov	r3, r6
 8019cd0:	4621      	mov	r1, r4
 8019cd2:	ae1e      	add	r6, sp, #120	@ 0x78
 8019cd4:	2400      	movs	r4, #0
 8019cd6:	9000      	str	r0, [sp, #0]
 8019cd8:	9a03      	ldr	r2, [sp, #12]
 8019cda:	a805      	add	r0, sp, #20
 8019cdc:	f000 fe60 	bl	801a9a0 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8019ce0:	f846 4d68 	str.w	r4, [r6, #-104]!
 8019ce4:	462a      	mov	r2, r5
 8019ce6:	4633      	mov	r3, r6
 8019ce8:	4621      	mov	r1, r4
 8019cea:	a805      	add	r0, sp, #20
 8019cec:	f001 fdba 	bl	801b864 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019cf0:	b300      	cbz	r0, 8019d34 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 8019cf2:	280a      	cmp	r0, #10
 8019cf4:	d01a      	beq.n	8019d2c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8019cf6:	9f04      	ldr	r7, [sp, #16]
 8019cf8:	b1c7      	cbz	r7, 8019d2c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8019cfa:	7b78      	ldrb	r0, [r7, #13]
 8019cfc:	7a3b      	ldrb	r3, [r7, #8]
 8019cfe:	00c1      	lsls	r1, r0, #3
 8019d00:	88ea      	ldrh	r2, [r5, #6]
 8019d02:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 8019d06:	4319      	orrs	r1, r3
 8019d08:	0643      	lsls	r3, r0, #25
 8019d0a:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8019d0e:	bf48      	it	mi
 8019d10:	f5a1 7300 	submi.w	r3, r1, #512	@ 0x200
 8019d14:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 8019d18:	bf48      	it	mi
 8019d1a:	b219      	sxthmi	r1, r3
 8019d1c:	79fb      	ldrb	r3, [r7, #7]
 8019d1e:	4303      	orrs	r3, r0
 8019d20:	4413      	add	r3, r2
 8019d22:	1a5b      	subs	r3, r3, r1
 8019d24:	b21b      	sxth	r3, r3
 8019d26:	429c      	cmp	r4, r3
 8019d28:	bfb8      	it	lt
 8019d2a:	461c      	movlt	r4, r3
 8019d2c:	4633      	mov	r3, r6
 8019d2e:	462a      	mov	r2, r5
 8019d30:	2100      	movs	r1, #0
 8019d32:	e7da      	b.n	8019cea <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 8019d34:	b2a0      	uxth	r0, r4
 8019d36:	b01e      	add	sp, #120	@ 0x78
 8019d38:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8019d3c:	b003      	add	sp, #12
 8019d3e:	4770      	bx	lr

08019d40 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 8019d40:	7a43      	ldrb	r3, [r0, #9]
 8019d42:	8880      	ldrh	r0, [r0, #4]
 8019d44:	4418      	add	r0, r3
 8019d46:	b280      	uxth	r0, r0
 8019d48:	4770      	bx	lr

08019d4a <_ZNK8touchgfx4Font13getFontHeightEv>:
 8019d4a:	6803      	ldr	r3, [r0, #0]
 8019d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019d4e:	4718      	bx	r3

08019d50 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8019d50:	b40e      	push	{r1, r2, r3}
 8019d52:	b570      	push	{r4, r5, r6, lr}
 8019d54:	b09d      	sub	sp, #116	@ 0x74
 8019d56:	4604      	mov	r4, r0
 8019d58:	ab21      	add	r3, sp, #132	@ 0x84
 8019d5a:	a803      	add	r0, sp, #12
 8019d5c:	f853 5b04 	ldr.w	r5, [r3], #4
 8019d60:	9302      	str	r3, [sp, #8]
 8019d62:	f000 fdc2 	bl	801a8ea <_ZN8touchgfx12TextProviderC1Ev>
 8019d66:	6823      	ldr	r3, [r4, #0]
 8019d68:	4620      	mov	r0, r4
 8019d6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8019d6c:	4798      	blx	r3
 8019d6e:	6823      	ldr	r3, [r4, #0]
 8019d70:	4606      	mov	r6, r0
 8019d72:	4620      	mov	r0, r4
 8019d74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019d76:	2401      	movs	r4, #1
 8019d78:	4798      	blx	r3
 8019d7a:	4633      	mov	r3, r6
 8019d7c:	9000      	str	r0, [sp, #0]
 8019d7e:	4629      	mov	r1, r5
 8019d80:	9a02      	ldr	r2, [sp, #8]
 8019d82:	a803      	add	r0, sp, #12
 8019d84:	f000 fe0c 	bl	801a9a0 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8019d88:	a803      	add	r0, sp, #12
 8019d8a:	f001 fe37 	bl	801b9fc <_ZN8touchgfx12TextProvider11getNextCharEv>
 8019d8e:	b2a3      	uxth	r3, r4
 8019d90:	b138      	cbz	r0, 8019da2 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 8019d92:	280a      	cmp	r0, #10
 8019d94:	a803      	add	r0, sp, #12
 8019d96:	bf04      	itt	eq
 8019d98:	3301      	addeq	r3, #1
 8019d9a:	b21c      	sxtheq	r4, r3
 8019d9c:	f001 fe2e 	bl	801b9fc <_ZN8touchgfx12TextProvider11getNextCharEv>
 8019da0:	e7f5      	b.n	8019d8e <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 8019da2:	4618      	mov	r0, r3
 8019da4:	b01d      	add	sp, #116	@ 0x74
 8019da6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019daa:	b003      	add	sp, #12
 8019dac:	4770      	bx	lr

08019dae <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8019dae:	b40e      	push	{r1, r2, r3}
 8019db0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019db2:	b09e      	sub	sp, #120	@ 0x78
 8019db4:	4604      	mov	r4, r0
 8019db6:	ab23      	add	r3, sp, #140	@ 0x8c
 8019db8:	a805      	add	r0, sp, #20
 8019dba:	f853 5b04 	ldr.w	r5, [r3], #4
 8019dbe:	9303      	str	r3, [sp, #12]
 8019dc0:	f000 fd93 	bl	801a8ea <_ZN8touchgfx12TextProviderC1Ev>
 8019dc4:	6823      	ldr	r3, [r4, #0]
 8019dc6:	4620      	mov	r0, r4
 8019dc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8019dca:	4798      	blx	r3
 8019dcc:	6823      	ldr	r3, [r4, #0]
 8019dce:	4606      	mov	r6, r0
 8019dd0:	4620      	mov	r0, r4
 8019dd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019dd4:	4798      	blx	r3
 8019dd6:	4633      	mov	r3, r6
 8019dd8:	4629      	mov	r1, r5
 8019dda:	9000      	str	r0, [sp, #0]
 8019ddc:	9a03      	ldr	r2, [sp, #12]
 8019dde:	a805      	add	r0, sp, #20
 8019de0:	f000 fdde 	bl	801a9a0 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8019de4:	ad1e      	add	r5, sp, #120	@ 0x78
 8019de6:	2100      	movs	r1, #0
 8019de8:	f647 76ff 	movw	r6, #32767	@ 0x7fff
 8019dec:	4622      	mov	r2, r4
 8019dee:	a805      	add	r0, sp, #20
 8019df0:	f845 1d68 	str.w	r1, [r5, #-104]!
 8019df4:	462b      	mov	r3, r5
 8019df6:	f001 fd35 	bl	801b864 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019dfa:	b1d8      	cbz	r0, 8019e34 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 8019dfc:	280a      	cmp	r0, #10
 8019dfe:	d012      	beq.n	8019e26 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8019e00:	9804      	ldr	r0, [sp, #16]
 8019e02:	b180      	cbz	r0, 8019e26 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8019e04:	7b47      	ldrb	r7, [r0, #13]
 8019e06:	88e2      	ldrh	r2, [r4, #6]
 8019e08:	00fb      	lsls	r3, r7, #3
 8019e0a:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 8019e0e:	7a03      	ldrb	r3, [r0, #8]
 8019e10:	430b      	orrs	r3, r1
 8019e12:	0679      	lsls	r1, r7, #25
 8019e14:	bf44      	itt	mi
 8019e16:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8019e1a:	b21b      	sxthmi	r3, r3
 8019e1c:	1ad3      	subs	r3, r2, r3
 8019e1e:	b21b      	sxth	r3, r3
 8019e20:	429e      	cmp	r6, r3
 8019e22:	bfa8      	it	ge
 8019e24:	461e      	movge	r6, r3
 8019e26:	462b      	mov	r3, r5
 8019e28:	4622      	mov	r2, r4
 8019e2a:	2100      	movs	r1, #0
 8019e2c:	a805      	add	r0, sp, #20
 8019e2e:	f001 fd19 	bl	801b864 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019e32:	e7e2      	b.n	8019dfa <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 8019e34:	4630      	mov	r0, r6
 8019e36:	b01e      	add	sp, #120	@ 0x78
 8019e38:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8019e3c:	b003      	add	sp, #12
 8019e3e:	4770      	bx	lr

08019e40 <_ZNK8touchgfx8Drawable10invalidateEv>:
 8019e40:	b513      	push	{r0, r1, r4, lr}
 8019e42:	6803      	ldr	r3, [r0, #0]
 8019e44:	2400      	movs	r4, #0
 8019e46:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8019e4a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8019e4e:	f8ad 1004 	strh.w	r1, [sp, #4]
 8019e52:	4669      	mov	r1, sp
 8019e54:	691b      	ldr	r3, [r3, #16]
 8019e56:	9400      	str	r4, [sp, #0]
 8019e58:	f8ad 2006 	strh.w	r2, [sp, #6]
 8019e5c:	4798      	blx	r3
 8019e5e:	b002      	add	sp, #8
 8019e60:	bd10      	pop	{r4, pc}

08019e62 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8019e62:	b538      	push	{r3, r4, r5, lr}
 8019e64:	680b      	ldr	r3, [r1, #0]
 8019e66:	460c      	mov	r4, r1
 8019e68:	4605      	mov	r5, r0
 8019e6a:	68db      	ldr	r3, [r3, #12]
 8019e6c:	4798      	blx	r3
 8019e6e:	6823      	ldr	r3, [r4, #0]
 8019e70:	4620      	mov	r0, r4
 8019e72:	4629      	mov	r1, r5
 8019e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019e76:	4798      	blx	r3
 8019e78:	4628      	mov	r0, r5
 8019e7a:	bd38      	pop	{r3, r4, r5, pc}

08019e7c <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8019e7c:	b410      	push	{r4}
 8019e7e:	880a      	ldrh	r2, [r1, #0]
 8019e80:	8884      	ldrh	r4, [r0, #4]
 8019e82:	4422      	add	r2, r4
 8019e84:	800a      	strh	r2, [r1, #0]
 8019e86:	884a      	ldrh	r2, [r1, #2]
 8019e88:	88c4      	ldrh	r4, [r0, #6]
 8019e8a:	4422      	add	r2, r4
 8019e8c:	804a      	strh	r2, [r1, #2]
 8019e8e:	6940      	ldr	r0, [r0, #20]
 8019e90:	b120      	cbz	r0, 8019e9c <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8019e92:	6803      	ldr	r3, [r0, #0]
 8019e94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019e98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019e9a:	4718      	bx	r3
 8019e9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019ea0:	4770      	bx	lr

08019ea2 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 8019ea2:	b570      	push	{r4, r5, r6, lr}
 8019ea4:	8882      	ldrh	r2, [r0, #4]
 8019ea6:	460c      	mov	r4, r1
 8019ea8:	880b      	ldrh	r3, [r1, #0]
 8019eaa:	4605      	mov	r5, r0
 8019eac:	4413      	add	r3, r2
 8019eae:	800b      	strh	r3, [r1, #0]
 8019eb0:	884b      	ldrh	r3, [r1, #2]
 8019eb2:	88c2      	ldrh	r2, [r0, #6]
 8019eb4:	4413      	add	r3, r2
 8019eb6:	804b      	strh	r3, [r1, #2]
 8019eb8:	1d01      	adds	r1, r0, #4
 8019eba:	4620      	mov	r0, r4
 8019ebc:	f7f8 fbf4 	bl	80126a8 <_ZN8touchgfx4RectaNERKS0_>
 8019ec0:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8019ec4:	2b00      	cmp	r3, #0
 8019ec6:	dd0b      	ble.n	8019ee0 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8019ec8:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8019ecc:	2b00      	cmp	r3, #0
 8019ece:	dd07      	ble.n	8019ee0 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8019ed0:	6968      	ldr	r0, [r5, #20]
 8019ed2:	b128      	cbz	r0, 8019ee0 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8019ed4:	6803      	ldr	r3, [r0, #0]
 8019ed6:	4621      	mov	r1, r4
 8019ed8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019eda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019ede:	4718      	bx	r3
 8019ee0:	bd70      	pop	{r4, r5, r6, pc}
	...

08019ee4 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8019ee4:	b570      	push	{r4, r5, r6, lr}
 8019ee6:	8882      	ldrh	r2, [r0, #4]
 8019ee8:	460c      	mov	r4, r1
 8019eea:	880b      	ldrh	r3, [r1, #0]
 8019eec:	4605      	mov	r5, r0
 8019eee:	4413      	add	r3, r2
 8019ef0:	800b      	strh	r3, [r1, #0]
 8019ef2:	884b      	ldrh	r3, [r1, #2]
 8019ef4:	88c2      	ldrh	r2, [r0, #6]
 8019ef6:	4413      	add	r3, r2
 8019ef8:	804b      	strh	r3, [r1, #2]
 8019efa:	1d01      	adds	r1, r0, #4
 8019efc:	4620      	mov	r0, r4
 8019efe:	f7f8 fbd3 	bl	80126a8 <_ZN8touchgfx4RectaNERKS0_>
 8019f02:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8019f06:	2b00      	cmp	r3, #0
 8019f08:	dd19      	ble.n	8019f3e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8019f0a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8019f0e:	2b00      	cmp	r3, #0
 8019f10:	dd15      	ble.n	8019f3e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8019f12:	6968      	ldr	r0, [r5, #20]
 8019f14:	b128      	cbz	r0, 8019f22 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 8019f16:	6803      	ldr	r3, [r0, #0]
 8019f18:	4621      	mov	r1, r4
 8019f1a:	691b      	ldr	r3, [r3, #16]
 8019f1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019f20:	4718      	bx	r3
 8019f22:	4b07      	ldr	r3, [pc, #28]	@ (8019f40 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 8019f24:	681b      	ldr	r3, [r3, #0]
 8019f26:	3304      	adds	r3, #4
 8019f28:	429d      	cmp	r5, r3
 8019f2a:	d108      	bne.n	8019f3e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8019f2c:	f7fe fee8 	bl	8018d00 <_ZN8touchgfx11Application11getInstanceEv>
 8019f30:	6803      	ldr	r3, [r0, #0]
 8019f32:	6821      	ldr	r1, [r4, #0]
 8019f34:	6862      	ldr	r2, [r4, #4]
 8019f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8019f38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019f3c:	4718      	bx	r3
 8019f3e:	bd70      	pop	{r4, r5, r6, pc}
 8019f40:	20029f1c 	.word	0x20029f1c

08019f44 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8019f44:	b570      	push	{r4, r5, r6, lr}
 8019f46:	4604      	mov	r4, r0
 8019f48:	4616      	mov	r6, r2
 8019f4a:	460d      	mov	r5, r1
 8019f4c:	b901      	cbnz	r1, 8019f50 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 8019f4e:	b192      	cbz	r2, 8019f76 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 8019f50:	6823      	ldr	r3, [r4, #0]
 8019f52:	4620      	mov	r0, r4
 8019f54:	699b      	ldr	r3, [r3, #24]
 8019f56:	4798      	blx	r3
 8019f58:	88e2      	ldrh	r2, [r4, #6]
 8019f5a:	88a1      	ldrh	r1, [r4, #4]
 8019f5c:	4620      	mov	r0, r4
 8019f5e:	4432      	add	r2, r6
 8019f60:	4429      	add	r1, r5
 8019f62:	b212      	sxth	r2, r2
 8019f64:	b209      	sxth	r1, r1
 8019f66:	f7eb f970 	bl	800524a <_ZN8touchgfx8Drawable5setXYEss>
 8019f6a:	6823      	ldr	r3, [r4, #0]
 8019f6c:	4620      	mov	r0, r4
 8019f6e:	699b      	ldr	r3, [r3, #24]
 8019f70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019f74:	4718      	bx	r3
 8019f76:	bd70      	pop	{r4, r5, r6, pc}

08019f78 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8019f78:	b510      	push	{r4, lr}
 8019f7a:	2300      	movs	r3, #0
 8019f7c:	4604      	mov	r4, r0
 8019f7e:	4608      	mov	r0, r1
 8019f80:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8019f84:	8023      	strh	r3, [r4, #0]
 8019f86:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8019f8a:	8063      	strh	r3, [r4, #2]
 8019f8c:	6803      	ldr	r3, [r0, #0]
 8019f8e:	80a1      	strh	r1, [r4, #4]
 8019f90:	4621      	mov	r1, r4
 8019f92:	80e2      	strh	r2, [r4, #6]
 8019f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019f96:	4798      	blx	r3
 8019f98:	4620      	mov	r0, r4
 8019f9a:	bd10      	pop	{r4, pc}

08019f9c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 8019f9c:	b530      	push	{r4, r5, lr}
 8019f9e:	8083      	strh	r3, [r0, #4]
 8019fa0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8019fa4:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8019fa8:	80c3      	strh	r3, [r0, #6]
 8019faa:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8019fae:	6141      	str	r1, [r0, #20]
 8019fb0:	7203      	strb	r3, [r0, #8]
 8019fb2:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8019fb6:	8302      	strh	r2, [r0, #24]
 8019fb8:	7243      	strb	r3, [r0, #9]
 8019fba:	7a83      	ldrb	r3, [r0, #10]
 8019fbc:	f365 0306 	bfi	r3, r5, #0, #7
 8019fc0:	f89d 501c 	ldrb.w	r5, [sp, #28]
 8019fc4:	f365 13c7 	bfi	r3, r5, #7, #1
 8019fc8:	7283      	strb	r3, [r0, #10]
 8019fca:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8019fce:	72c3      	strb	r3, [r0, #11]
 8019fd0:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8019fd4:	7303      	strb	r3, [r0, #12]
 8019fd6:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8019fda:	81c3      	strh	r3, [r0, #14]
 8019fdc:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8019fe0:	8203      	strh	r3, [r0, #16]
 8019fe2:	4b01      	ldr	r3, [pc, #4]	@ (8019fe8 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 8019fe4:	6003      	str	r3, [r0, #0]
 8019fe6:	bd30      	pop	{r4, r5, pc}
 8019fe8:	08042788 	.word	0x08042788

08019fec <_ZNK8touchgfx9ConstFont4findEt>:
 8019fec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019fee:	6944      	ldr	r4, [r0, #20]
 8019ff0:	b3bc      	cbz	r4, 801a062 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019ff2:	88a3      	ldrh	r3, [r4, #4]
 8019ff4:	8b02      	ldrh	r2, [r0, #24]
 8019ff6:	1acb      	subs	r3, r1, r3
 8019ff8:	f102 32ff 	add.w	r2, r2, #4294967295
 8019ffc:	d431      	bmi.n	801a062 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019ffe:	4293      	cmp	r3, r2
 801a000:	dd0c      	ble.n	801a01c <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801a002:	230e      	movs	r3, #14
 801a004:	fb03 4302 	mla	r3, r3, r2, r4
 801a008:	889b      	ldrh	r3, [r3, #4]
 801a00a:	1a5b      	subs	r3, r3, r1
 801a00c:	1ad3      	subs	r3, r2, r3
 801a00e:	429a      	cmp	r2, r3
 801a010:	db27      	blt.n	801a062 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801a012:	2b00      	cmp	r3, #0
 801a014:	bfbc      	itt	lt
 801a016:	2302      	movlt	r3, #2
 801a018:	fb92 f3f3 	sdivlt	r3, r2, r3
 801a01c:	2500      	movs	r5, #0
 801a01e:	260e      	movs	r6, #14
 801a020:	4295      	cmp	r5, r2
 801a022:	dc1e      	bgt.n	801a062 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801a024:	fb06 4003 	mla	r0, r6, r3, r4
 801a028:	8887      	ldrh	r7, [r0, #4]
 801a02a:	42b9      	cmp	r1, r7
 801a02c:	d01a      	beq.n	801a064 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801a02e:	d20d      	bcs.n	801a04c <_ZNK8touchgfx9ConstFont4findEt+0x60>
 801a030:	1e5a      	subs	r2, r3, #1
 801a032:	4295      	cmp	r5, r2
 801a034:	dc15      	bgt.n	801a062 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801a036:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801a03a:	1a5b      	subs	r3, r3, r1
 801a03c:	1ad3      	subs	r3, r2, r3
 801a03e:	429a      	cmp	r2, r3
 801a040:	db0f      	blt.n	801a062 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801a042:	429d      	cmp	r5, r3
 801a044:	ddec      	ble.n	801a020 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801a046:	1953      	adds	r3, r2, r5
 801a048:	105b      	asrs	r3, r3, #1
 801a04a:	e7e9      	b.n	801a020 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801a04c:	1c5d      	adds	r5, r3, #1
 801a04e:	42aa      	cmp	r2, r5
 801a050:	db07      	blt.n	801a062 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801a052:	8a43      	ldrh	r3, [r0, #18]
 801a054:	1acb      	subs	r3, r1, r3
 801a056:	442b      	add	r3, r5
 801a058:	429d      	cmp	r5, r3
 801a05a:	dc02      	bgt.n	801a062 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801a05c:	429a      	cmp	r2, r3
 801a05e:	dadf      	bge.n	801a020 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801a060:	e7f1      	b.n	801a046 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801a062:	2000      	movs	r0, #0
 801a064:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a066 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801a066:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a068:	4604      	mov	r4, r0
 801a06a:	4617      	mov	r7, r2
 801a06c:	461e      	mov	r6, r3
 801a06e:	b911      	cbnz	r1, 801a076 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801a070:	2500      	movs	r5, #0
 801a072:	4628      	mov	r0, r5
 801a074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a076:	290a      	cmp	r1, #10
 801a078:	d0fa      	beq.n	801a070 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801a07a:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 801a07e:	4291      	cmp	r1, r2
 801a080:	d0f6      	beq.n	801a070 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801a082:	f242 020b 	movw	r2, #8203	@ 0x200b
 801a086:	4291      	cmp	r1, r2
 801a088:	d0f2      	beq.n	801a070 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801a08a:	f7ff ffaf 	bl	8019fec <_ZNK8touchgfx9ConstFont4findEt>
 801a08e:	4605      	mov	r5, r0
 801a090:	b950      	cbnz	r0, 801a0a8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801a092:	6823      	ldr	r3, [r4, #0]
 801a094:	4620      	mov	r0, r4
 801a096:	691b      	ldr	r3, [r3, #16]
 801a098:	4798      	blx	r3
 801a09a:	4601      	mov	r1, r0
 801a09c:	4620      	mov	r0, r4
 801a09e:	f7ff ffa5 	bl	8019fec <_ZNK8touchgfx9ConstFont4findEt>
 801a0a2:	4605      	mov	r5, r0
 801a0a4:	2800      	cmp	r0, #0
 801a0a6:	d0e3      	beq.n	801a070 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801a0a8:	6823      	ldr	r3, [r4, #0]
 801a0aa:	4629      	mov	r1, r5
 801a0ac:	4620      	mov	r0, r4
 801a0ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801a0b0:	4798      	blx	r3
 801a0b2:	6038      	str	r0, [r7, #0]
 801a0b4:	6823      	ldr	r3, [r4, #0]
 801a0b6:	4620      	mov	r0, r4
 801a0b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801a0ba:	4798      	blx	r3
 801a0bc:	7030      	strb	r0, [r6, #0]
 801a0be:	e7d8      	b.n	801a072 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801a0c0 <_ZN8touchgfx4clzuEm>:
 801a0c0:	4603      	mov	r3, r0
 801a0c2:	b1c8      	cbz	r0, 801a0f8 <_ZN8touchgfx4clzuEm+0x38>
 801a0c4:	0c02      	lsrs	r2, r0, #16
 801a0c6:	0412      	lsls	r2, r2, #16
 801a0c8:	b9a2      	cbnz	r2, 801a0f4 <_ZN8touchgfx4clzuEm+0x34>
 801a0ca:	0403      	lsls	r3, r0, #16
 801a0cc:	2010      	movs	r0, #16
 801a0ce:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 801a0d2:	bf04      	itt	eq
 801a0d4:	021b      	lsleq	r3, r3, #8
 801a0d6:	3008      	addeq	r0, #8
 801a0d8:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 801a0dc:	bf04      	itt	eq
 801a0de:	011b      	lsleq	r3, r3, #4
 801a0e0:	3004      	addeq	r0, #4
 801a0e2:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 801a0e6:	bf04      	itt	eq
 801a0e8:	009b      	lsleq	r3, r3, #2
 801a0ea:	3002      	addeq	r0, #2
 801a0ec:	2b00      	cmp	r3, #0
 801a0ee:	db04      	blt.n	801a0fa <_ZN8touchgfx4clzuEm+0x3a>
 801a0f0:	3001      	adds	r0, #1
 801a0f2:	4770      	bx	lr
 801a0f4:	2000      	movs	r0, #0
 801a0f6:	e7ea      	b.n	801a0ce <_ZN8touchgfx4clzuEm+0xe>
 801a0f8:	2020      	movs	r0, #32
 801a0fa:	4770      	bx	lr

0801a0fc <_ZN8touchgfx7muldivuEmmmRm>:
 801a0fc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801a100:	460f      	mov	r7, r1
 801a102:	4615      	mov	r5, r2
 801a104:	461e      	mov	r6, r3
 801a106:	4601      	mov	r1, r0
 801a108:	b100      	cbz	r0, 801a10c <_ZN8touchgfx7muldivuEmmmRm+0x10>
 801a10a:	b927      	cbnz	r7, 801a116 <_ZN8touchgfx7muldivuEmmmRm+0x1a>
 801a10c:	2000      	movs	r0, #0
 801a10e:	6030      	str	r0, [r6, #0]
 801a110:	b002      	add	sp, #8
 801a112:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a116:	f7ff ffd3 	bl	801a0c0 <_ZN8touchgfx4clzuEm>
 801a11a:	b980      	cbnz	r0, 801a13e <_ZN8touchgfx7muldivuEmmmRm+0x42>
 801a11c:	4638      	mov	r0, r7
 801a11e:	f7ff ffcf 	bl	801a0c0 <_ZN8touchgfx4clzuEm>
 801a122:	2800      	cmp	r0, #0
 801a124:	dd05      	ble.n	801a132 <_ZN8touchgfx7muldivuEmmmRm+0x36>
 801a126:	4633      	mov	r3, r6
 801a128:	462a      	mov	r2, r5
 801a12a:	4638      	mov	r0, r7
 801a12c:	f7ff ffe6 	bl	801a0fc <_ZN8touchgfx7muldivuEmmmRm>
 801a130:	e7ee      	b.n	801a110 <_ZN8touchgfx7muldivuEmmmRm+0x14>
 801a132:	f04f 33ff 	mov.w	r3, #4294967295
 801a136:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801a13a:	6033      	str	r3, [r6, #0]
 801a13c:	e7e8      	b.n	801a110 <_ZN8touchgfx7muldivuEmmmRm+0x14>
 801a13e:	fa37 f800 	lsrs.w	r8, r7, r0
 801a142:	fb07 f301 	mul.w	r3, r7, r1
 801a146:	d105      	bne.n	801a154 <_ZN8touchgfx7muldivuEmmmRm+0x58>
 801a148:	fbb3 f0f5 	udiv	r0, r3, r5
 801a14c:	fb05 3510 	mls	r5, r5, r0, r3
 801a150:	6035      	str	r5, [r6, #0]
 801a152:	e7dd      	b.n	801a110 <_ZN8touchgfx7muldivuEmmmRm+0x14>
 801a154:	2301      	movs	r3, #1
 801a156:	fa01 fa00 	lsl.w	sl, r1, r0
 801a15a:	462a      	mov	r2, r5
 801a15c:	fa03 f000 	lsl.w	r0, r3, r0
 801a160:	4633      	mov	r3, r6
 801a162:	fbba f9f5 	udiv	r9, sl, r5
 801a166:	3801      	subs	r0, #1
 801a168:	fb08 f409 	mul.w	r4, r8, r9
 801a16c:	4038      	ands	r0, r7
 801a16e:	f7ff ffc5 	bl	801a0fc <_ZN8touchgfx7muldivuEmmmRm>
 801a172:	462a      	mov	r2, r5
 801a174:	4607      	mov	r7, r0
 801a176:	ab01      	add	r3, sp, #4
 801a178:	fb05 a119 	mls	r1, r5, r9, sl
 801a17c:	4640      	mov	r0, r8
 801a17e:	f7ff ffbd 	bl	801a0fc <_ZN8touchgfx7muldivuEmmmRm>
 801a182:	9b01      	ldr	r3, [sp, #4]
 801a184:	6832      	ldr	r2, [r6, #0]
 801a186:	441a      	add	r2, r3
 801a188:	fbb2 f3f5 	udiv	r3, r2, r5
 801a18c:	441c      	add	r4, r3
 801a18e:	fb05 2513 	mls	r5, r5, r3, r2
 801a192:	443c      	add	r4, r7
 801a194:	4420      	add	r0, r4
 801a196:	e7db      	b.n	801a150 <_ZN8touchgfx7muldivuEmmmRm+0x54>

0801a198 <_ZN8touchgfx6muldivElllRl>:
 801a198:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a19a:	2800      	cmp	r0, #0
 801a19c:	461e      	mov	r6, r3
 801a19e:	bfba      	itte	lt
 801a1a0:	4240      	neglt	r0, r0
 801a1a2:	f04f 34ff 	movlt.w	r4, #4294967295
 801a1a6:	2401      	movge	r4, #1
 801a1a8:	2900      	cmp	r1, #0
 801a1aa:	bfbc      	itt	lt
 801a1ac:	4249      	neglt	r1, r1
 801a1ae:	4264      	neglt	r4, r4
 801a1b0:	2a00      	cmp	r2, #0
 801a1b2:	bfb6      	itet	lt
 801a1b4:	4265      	neglt	r5, r4
 801a1b6:	4625      	movge	r5, r4
 801a1b8:	4252      	neglt	r2, r2
 801a1ba:	4288      	cmp	r0, r1
 801a1bc:	bfc2      	ittt	gt
 801a1be:	4603      	movgt	r3, r0
 801a1c0:	4608      	movgt	r0, r1
 801a1c2:	4619      	movgt	r1, r3
 801a1c4:	ab01      	add	r3, sp, #4
 801a1c6:	f7ff ff99 	bl	801a0fc <_ZN8touchgfx7muldivuEmmmRm>
 801a1ca:	9b01      	ldr	r3, [sp, #4]
 801a1cc:	4368      	muls	r0, r5
 801a1ce:	435c      	muls	r4, r3
 801a1d0:	6034      	str	r4, [r6, #0]
 801a1d2:	b002      	add	sp, #8
 801a1d4:	bd70      	pop	{r4, r5, r6, pc}

0801a1d6 <_ZN8touchgfx6muldivElll>:
 801a1d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a1d8:	4606      	mov	r6, r0
 801a1da:	ab01      	add	r3, sp, #4
 801a1dc:	460d      	mov	r5, r1
 801a1de:	4614      	mov	r4, r2
 801a1e0:	f7ff ffda 	bl	801a198 <_ZN8touchgfx6muldivElllRl>
 801a1e4:	2e00      	cmp	r6, #0
 801a1e6:	db20      	blt.n	801a22a <_ZN8touchgfx6muldivElll+0x54>
 801a1e8:	bf14      	ite	ne
 801a1ea:	2301      	movne	r3, #1
 801a1ec:	2300      	moveq	r3, #0
 801a1ee:	2d00      	cmp	r5, #0
 801a1f0:	db1e      	blt.n	801a230 <_ZN8touchgfx6muldivElll+0x5a>
 801a1f2:	bf14      	ite	ne
 801a1f4:	2201      	movne	r2, #1
 801a1f6:	2200      	moveq	r2, #0
 801a1f8:	2c00      	cmp	r4, #0
 801a1fa:	fb03 f202 	mul.w	r2, r3, r2
 801a1fe:	db1a      	blt.n	801a236 <_ZN8touchgfx6muldivElll+0x60>
 801a200:	bf14      	ite	ne
 801a202:	2301      	movne	r3, #1
 801a204:	2300      	moveq	r3, #0
 801a206:	4353      	muls	r3, r2
 801a208:	2b01      	cmp	r3, #1
 801a20a:	d117      	bne.n	801a23c <_ZN8touchgfx6muldivElll+0x66>
 801a20c:	2c00      	cmp	r4, #0
 801a20e:	9b01      	ldr	r3, [sp, #4]
 801a210:	bfb8      	it	lt
 801a212:	4264      	neglt	r4, r4
 801a214:	2b00      	cmp	r3, #0
 801a216:	f104 0401 	add.w	r4, r4, #1
 801a21a:	bfb8      	it	lt
 801a21c:	425b      	neglt	r3, r3
 801a21e:	ebb3 0f64 	cmp.w	r3, r4, asr #1
 801a222:	db00      	blt.n	801a226 <_ZN8touchgfx6muldivElll+0x50>
 801a224:	3001      	adds	r0, #1
 801a226:	b002      	add	sp, #8
 801a228:	bd70      	pop	{r4, r5, r6, pc}
 801a22a:	f04f 33ff 	mov.w	r3, #4294967295
 801a22e:	e7de      	b.n	801a1ee <_ZN8touchgfx6muldivElll+0x18>
 801a230:	f04f 32ff 	mov.w	r2, #4294967295
 801a234:	e7e0      	b.n	801a1f8 <_ZN8touchgfx6muldivElll+0x22>
 801a236:	f04f 33ff 	mov.w	r3, #4294967295
 801a23a:	e7e4      	b.n	801a206 <_ZN8touchgfx6muldivElll+0x30>
 801a23c:	3301      	adds	r3, #1
 801a23e:	d1f2      	bne.n	801a226 <_ZN8touchgfx6muldivElll+0x50>
 801a240:	9b01      	ldr	r3, [sp, #4]
 801a242:	2c00      	cmp	r4, #0
 801a244:	bfb8      	it	lt
 801a246:	4264      	neglt	r4, r4
 801a248:	2b00      	cmp	r3, #0
 801a24a:	bfb8      	it	lt
 801a24c:	425b      	neglt	r3, r3
 801a24e:	ebb3 0f64 	cmp.w	r3, r4, asr #1
 801a252:	bfc8      	it	gt
 801a254:	f100 30ff 	addgt.w	r0, r0, #4294967295
 801a258:	e7e5      	b.n	801a226 <_ZN8touchgfx6muldivElll+0x50>

0801a25a <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 801a25a:	2000      	movs	r0, #0
 801a25c:	4770      	bx	lr

0801a25e <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 801a25e:	2001      	movs	r0, #1
 801a260:	4770      	bx	lr

0801a262 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 801a262:	2002      	movs	r0, #2
 801a264:	4770      	bx	lr

0801a266 <_ZN8touchgfx6ScreenD1Ev>:
 801a266:	4770      	bx	lr

0801a268 <_ZN8touchgfx12GestureEventD1Ev>:
 801a268:	4770      	bx	lr

0801a26a <_ZN8touchgfx9DragEventD1Ev>:
 801a26a:	4770      	bx	lr

0801a26c <_ZN8touchgfx10ClickEventD1Ev>:
 801a26c:	4770      	bx	lr

0801a26e <_ZN8touchgfx10ClickEventD0Ev>:
 801a26e:	b510      	push	{r4, lr}
 801a270:	4604      	mov	r4, r0
 801a272:	210c      	movs	r1, #12
 801a274:	f010 f824 	bl	802a2c0 <_ZdlPvj>
 801a278:	4620      	mov	r0, r4
 801a27a:	bd10      	pop	{r4, pc}

0801a27c <_ZN8touchgfx9DragEventD0Ev>:
 801a27c:	b510      	push	{r4, lr}
 801a27e:	4604      	mov	r4, r0
 801a280:	2110      	movs	r1, #16
 801a282:	f010 f81d 	bl	802a2c0 <_ZdlPvj>
 801a286:	4620      	mov	r0, r4
 801a288:	bd10      	pop	{r4, pc}

0801a28a <_ZN8touchgfx12GestureEventD0Ev>:
 801a28a:	b510      	push	{r4, lr}
 801a28c:	4604      	mov	r4, r0
 801a28e:	210c      	movs	r1, #12
 801a290:	f010 f816 	bl	802a2c0 <_ZdlPvj>
 801a294:	4620      	mov	r0, r4
 801a296:	bd10      	pop	{r4, pc}

0801a298 <_ZN8touchgfx6ScreenD0Ev>:
 801a298:	b510      	push	{r4, lr}
 801a29a:	4604      	mov	r4, r0
 801a29c:	213c      	movs	r1, #60	@ 0x3c
 801a29e:	f010 f80f 	bl	802a2c0 <_ZdlPvj>
 801a2a2:	4620      	mov	r0, r4
 801a2a4:	bd10      	pop	{r4, pc}
	...

0801a2a8 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801a2a8:	b530      	push	{r4, r5, lr}
 801a2aa:	460d      	mov	r5, r1
 801a2ac:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 801a2ae:	b087      	sub	sp, #28
 801a2b0:	4604      	mov	r4, r0
 801a2b2:	b301      	cbz	r1, 801a2f6 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801a2b4:	a801      	add	r0, sp, #4
 801a2b6:	f7ff fe5f 	bl	8019f78 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a2ba:	892a      	ldrh	r2, [r5, #8]
 801a2bc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801a2c0:	7928      	ldrb	r0, [r5, #4]
 801a2c2:	1ad2      	subs	r2, r2, r3
 801a2c4:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 801a2c6:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801a2ca:	441a      	add	r2, r3
 801a2cc:	896b      	ldrh	r3, [r5, #10]
 801a2ce:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801a2d2:	f88d 0010 	strb.w	r0, [sp, #16]
 801a2d6:	1b5b      	subs	r3, r3, r5
 801a2d8:	8ee5      	ldrh	r5, [r4, #54]	@ 0x36
 801a2da:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 801a2dc:	442b      	add	r3, r5
 801a2de:	4d07      	ldr	r5, [pc, #28]	@ (801a2fc <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801a2e0:	f8ad 1012 	strh.w	r1, [sp, #18]
 801a2e4:	a903      	add	r1, sp, #12
 801a2e6:	9503      	str	r5, [sp, #12]
 801a2e8:	f8ad 2014 	strh.w	r2, [sp, #20]
 801a2ec:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a2f0:	6803      	ldr	r3, [r0, #0]
 801a2f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801a2f4:	4798      	blx	r3
 801a2f6:	b007      	add	sp, #28
 801a2f8:	bd30      	pop	{r4, r5, pc}
 801a2fa:	bf00      	nop
 801a2fc:	08042810 	.word	0x08042810

0801a300 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801a300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a304:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801a306:	b08a      	sub	sp, #40	@ 0x28
 801a308:	4604      	mov	r4, r0
 801a30a:	460d      	mov	r5, r1
 801a30c:	b113      	cbz	r3, 801a314 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 801a30e:	790b      	ldrb	r3, [r1, #4]
 801a310:	2b00      	cmp	r3, #0
 801a312:	d044      	beq.n	801a39e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801a314:	f104 0804 	add.w	r8, r4, #4
 801a318:	a803      	add	r0, sp, #12
 801a31a:	4641      	mov	r1, r8
 801a31c:	f7ff fe2c 	bl	8019f78 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a320:	792b      	ldrb	r3, [r5, #4]
 801a322:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801a326:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 801a32a:	b983      	cbnz	r3, 801a34e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 801a32c:	f104 0336 	add.w	r3, r4, #54	@ 0x36
 801a330:	892a      	ldrh	r2, [r5, #8]
 801a332:	88e9      	ldrh	r1, [r5, #6]
 801a334:	4640      	mov	r0, r8
 801a336:	1b92      	subs	r2, r2, r6
 801a338:	9301      	str	r3, [sp, #4]
 801a33a:	1bc9      	subs	r1, r1, r7
 801a33c:	f104 0334 	add.w	r3, r4, #52	@ 0x34
 801a340:	b212      	sxth	r2, r2
 801a342:	9300      	str	r3, [sp, #0]
 801a344:	b209      	sxth	r1, r1
 801a346:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 801a34a:	f7f8 f8cb 	bl	80124e4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 801a34e:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801a350:	b329      	cbz	r1, 801a39e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801a352:	a805      	add	r0, sp, #20
 801a354:	f7ff fe10 	bl	8019f78 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a358:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801a35c:	792b      	ldrb	r3, [r5, #4]
 801a35e:	a907      	add	r1, sp, #28
 801a360:	1abf      	subs	r7, r7, r2
 801a362:	88ea      	ldrh	r2, [r5, #6]
 801a364:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 801a366:	4417      	add	r7, r2
 801a368:	8ea2      	ldrh	r2, [r4, #52]	@ 0x34
 801a36a:	f88d 3020 	strb.w	r3, [sp, #32]
 801a36e:	4417      	add	r7, r2
 801a370:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801a374:	1ab6      	subs	r6, r6, r2
 801a376:	892a      	ldrh	r2, [r5, #8]
 801a378:	f8ad 7022 	strh.w	r7, [sp, #34]	@ 0x22
 801a37c:	4416      	add	r6, r2
 801a37e:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801a380:	4416      	add	r6, r2
 801a382:	4a08      	ldr	r2, [pc, #32]	@ (801a3a4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 801a384:	f8ad 6024 	strh.w	r6, [sp, #36]	@ 0x24
 801a388:	2600      	movs	r6, #0
 801a38a:	9207      	str	r2, [sp, #28]
 801a38c:	f8ad 6026 	strh.w	r6, [sp, #38]	@ 0x26
 801a390:	6803      	ldr	r3, [r0, #0]
 801a392:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801a394:	4798      	blx	r3
 801a396:	792b      	ldrb	r3, [r5, #4]
 801a398:	b10b      	cbz	r3, 801a39e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801a39a:	e9c4 660c 	strd	r6, r6, [r4, #48]	@ 0x30
 801a39e:	b00a      	add	sp, #40	@ 0x28
 801a3a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a3a4:	080427e8 	.word	0x080427e8

0801a3a8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801a3a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a3ac:	460c      	mov	r4, r1
 801a3ae:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 801a3b0:	b088      	sub	sp, #32
 801a3b2:	4605      	mov	r5, r0
 801a3b4:	2900      	cmp	r1, #0
 801a3b6:	d06d      	beq.n	801a494 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 801a3b8:	4668      	mov	r0, sp
 801a3ba:	f7ff fddd 	bl	8019f78 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a3be:	8ea9      	ldrh	r1, [r5, #52]	@ 0x34
 801a3c0:	88e3      	ldrh	r3, [r4, #6]
 801a3c2:	f9bd 8000 	ldrsh.w	r8, [sp]
 801a3c6:	440b      	add	r3, r1
 801a3c8:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 801a3cc:	b21b      	sxth	r3, r3
 801a3ce:	4543      	cmp	r3, r8
 801a3d0:	db31      	blt.n	801a436 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801a3d2:	f8bd c004 	ldrh.w	ip, [sp, #4]
 801a3d6:	44c4      	add	ip, r8
 801a3d8:	fa0f fc8c 	sxth.w	ip, ip
 801a3dc:	4563      	cmp	r3, ip
 801a3de:	da2a      	bge.n	801a436 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801a3e0:	8eea      	ldrh	r2, [r5, #54]	@ 0x36
 801a3e2:	8926      	ldrh	r6, [r4, #8]
 801a3e4:	4416      	add	r6, r2
 801a3e6:	b236      	sxth	r6, r6
 801a3e8:	42be      	cmp	r6, r7
 801a3ea:	db24      	blt.n	801a436 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801a3ec:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801a3f0:	4438      	add	r0, r7
 801a3f2:	b200      	sxth	r0, r0
 801a3f4:	4286      	cmp	r6, r0
 801a3f6:	da1e      	bge.n	801a436 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801a3f8:	8963      	ldrh	r3, [r4, #10]
 801a3fa:	4419      	add	r1, r3
 801a3fc:	b209      	sxth	r1, r1
 801a3fe:	4541      	cmp	r1, r8
 801a400:	db08      	blt.n	801a414 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801a402:	4561      	cmp	r1, ip
 801a404:	da06      	bge.n	801a414 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801a406:	89a3      	ldrh	r3, [r4, #12]
 801a408:	441a      	add	r2, r3
 801a40a:	b212      	sxth	r2, r2
 801a40c:	42ba      	cmp	r2, r7
 801a40e:	db01      	blt.n	801a414 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801a410:	4282      	cmp	r2, r0
 801a412:	db10      	blt.n	801a436 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801a414:	4b21      	ldr	r3, [pc, #132]	@ (801a49c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 801a416:	a904      	add	r1, sp, #16
 801a418:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 801a41a:	9304      	str	r3, [sp, #16]
 801a41c:	2302      	movs	r3, #2
 801a41e:	f88d 3014 	strb.w	r3, [sp, #20]
 801a422:	2300      	movs	r3, #0
 801a424:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a428:	f8ad 3018 	strh.w	r3, [sp, #24]
 801a42c:	f8ad 301a 	strh.w	r3, [sp, #26]
 801a430:	6803      	ldr	r3, [r0, #0]
 801a432:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801a434:	4798      	blx	r3
 801a436:	1d29      	adds	r1, r5, #4
 801a438:	a802      	add	r0, sp, #8
 801a43a:	f7ff fd9d 	bl	8019f78 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a43e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801a442:	88e0      	ldrh	r0, [r4, #6]
 801a444:	eba3 0808 	sub.w	r8, r3, r8
 801a448:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801a44c:	7921      	ldrb	r1, [r4, #4]
 801a44e:	fa1f f888 	uxth.w	r8, r8
 801a452:	1bdf      	subs	r7, r3, r7
 801a454:	f8b5 c034 	ldrh.w	ip, [r5, #52]	@ 0x34
 801a458:	b2bb      	uxth	r3, r7
 801a45a:	4440      	add	r0, r8
 801a45c:	8922      	ldrh	r2, [r4, #8]
 801a45e:	8967      	ldrh	r7, [r4, #10]
 801a460:	4460      	add	r0, ip
 801a462:	89a4      	ldrh	r4, [r4, #12]
 801a464:	441a      	add	r2, r3
 801a466:	8eee      	ldrh	r6, [r5, #54]	@ 0x36
 801a468:	44b8      	add	r8, r7
 801a46a:	4423      	add	r3, r4
 801a46c:	f8ad 0016 	strh.w	r0, [sp, #22]
 801a470:	4432      	add	r2, r6
 801a472:	44e0      	add	r8, ip
 801a474:	4433      	add	r3, r6
 801a476:	4c0a      	ldr	r4, [pc, #40]	@ (801a4a0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 801a478:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 801a47a:	f88d 1014 	strb.w	r1, [sp, #20]
 801a47e:	a904      	add	r1, sp, #16
 801a480:	9404      	str	r4, [sp, #16]
 801a482:	f8ad 2018 	strh.w	r2, [sp, #24]
 801a486:	f8ad 801a 	strh.w	r8, [sp, #26]
 801a48a:	f8ad 301c 	strh.w	r3, [sp, #28]
 801a48e:	6803      	ldr	r3, [r0, #0]
 801a490:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801a492:	4798      	blx	r3
 801a494:	b008      	add	sp, #32
 801a496:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a49a:	bf00      	nop
 801a49c:	080427e8 	.word	0x080427e8
 801a4a0:	080427fc 	.word	0x080427fc

0801a4a4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801a4a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a4a6:	4604      	mov	r4, r0
 801a4a8:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801a4ac:	3201      	adds	r2, #1
 801a4ae:	d112      	bne.n	801a4d6 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801a4b0:	2500      	movs	r5, #0
 801a4b2:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801a4b6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801a4ba:	6803      	ldr	r3, [r0, #0]
 801a4bc:	9500      	str	r5, [sp, #0]
 801a4be:	466d      	mov	r5, sp
 801a4c0:	f8ad 1004 	strh.w	r1, [sp, #4]
 801a4c4:	f8ad 2006 	strh.w	r2, [sp, #6]
 801a4c8:	4629      	mov	r1, r5
 801a4ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a4cc:	4798      	blx	r3
 801a4ce:	e895 0003 	ldmia.w	r5, {r0, r1}
 801a4d2:	e884 0003 	stmia.w	r4, {r0, r1}
 801a4d6:	4620      	mov	r0, r4
 801a4d8:	b003      	add	sp, #12
 801a4da:	bd30      	pop	{r4, r5, pc}

0801a4dc <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801a4dc:	b513      	push	{r0, r1, r4, lr}
 801a4de:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801a4e2:	4604      	mov	r4, r0
 801a4e4:	3301      	adds	r3, #1
 801a4e6:	d109      	bne.n	801a4fc <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801a4e8:	4601      	mov	r1, r0
 801a4ea:	4668      	mov	r0, sp
 801a4ec:	f7ff fd44 	bl	8019f78 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a4f0:	f8bd 3000 	ldrh.w	r3, [sp]
 801a4f4:	8423      	strh	r3, [r4, #32]
 801a4f6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801a4fa:	8463      	strh	r3, [r4, #34]	@ 0x22
 801a4fc:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801a500:	b002      	add	sp, #8
 801a502:	bd10      	pop	{r4, pc}

0801a504 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801a504:	b513      	push	{r0, r1, r4, lr}
 801a506:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 801a50a:	4604      	mov	r4, r0
 801a50c:	3301      	adds	r3, #1
 801a50e:	d109      	bne.n	801a524 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801a510:	4601      	mov	r1, r0
 801a512:	4668      	mov	r0, sp
 801a514:	f7ff fd30 	bl	8019f78 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a518:	f8bd 3000 	ldrh.w	r3, [sp]
 801a51c:	8423      	strh	r3, [r4, #32]
 801a51e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801a522:	8463      	strh	r3, [r4, #34]	@ 0x22
 801a524:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	@ 0x22
 801a528:	b002      	add	sp, #8
 801a52a:	bd10      	pop	{r4, pc}

0801a52c <_ZN8touchgfx6ScreenC1Ev>:
 801a52c:	b570      	push	{r4, r5, r6, lr}
 801a52e:	4b17      	ldr	r3, [pc, #92]	@ (801a58c <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801a530:	4605      	mov	r5, r0
 801a532:	4a17      	ldr	r2, [pc, #92]	@ (801a590 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801a534:	2101      	movs	r1, #1
 801a536:	f845 3b04 	str.w	r3, [r5], #4
 801a53a:	2300      	movs	r3, #0
 801a53c:	6042      	str	r2, [r0, #4]
 801a53e:	4604      	mov	r4, r0
 801a540:	8103      	strh	r3, [r0, #8]
 801a542:	8143      	strh	r3, [r0, #10]
 801a544:	8183      	strh	r3, [r0, #12]
 801a546:	81c3      	strh	r3, [r0, #14]
 801a548:	8203      	strh	r3, [r0, #16]
 801a54a:	8243      	strh	r3, [r0, #18]
 801a54c:	8283      	strh	r3, [r0, #20]
 801a54e:	82c3      	strh	r3, [r0, #22]
 801a550:	6203      	str	r3, [r0, #32]
 801a552:	8483      	strh	r3, [r0, #36]	@ 0x24
 801a554:	84c3      	strh	r3, [r0, #38]	@ 0x26
 801a556:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
 801a55a:	6343      	str	r3, [r0, #52]	@ 0x34
 801a55c:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
 801a560:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 801a564:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801a568:	e9c0 330b 	strd	r3, r3, [r0, #44]	@ 0x2c
 801a56c:	4b09      	ldr	r3, [pc, #36]	@ (801a594 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801a56e:	4628      	mov	r0, r5
 801a570:	f9b3 6000 	ldrsh.w	r6, [r3]
 801a574:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 801a576:	4a08      	ldr	r2, [pc, #32]	@ (801a598 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801a578:	f9b2 1000 	ldrsh.w	r1, [r2]
 801a57c:	4798      	blx	r3
 801a57e:	6863      	ldr	r3, [r4, #4]
 801a580:	4628      	mov	r0, r5
 801a582:	4631      	mov	r1, r6
 801a584:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801a586:	4798      	blx	r3
 801a588:	4620      	mov	r0, r4
 801a58a:	bd70      	pop	{r4, r5, r6, pc}
 801a58c:	08042824 	.word	0x08042824
 801a590:	08041d9c 	.word	0x08041d9c
 801a594:	20029ece 	.word	0x20029ece
 801a598:	20029ecc 	.word	0x20029ecc

0801a59c <_ZN8touchgfx6Screen4drawEv>:
 801a59c:	4b09      	ldr	r3, [pc, #36]	@ (801a5c4 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801a59e:	b507      	push	{r0, r1, r2, lr}
 801a5a0:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a5a4:	2100      	movs	r1, #0
 801a5a6:	4b08      	ldr	r3, [pc, #32]	@ (801a5c8 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801a5a8:	9100      	str	r1, [sp, #0]
 801a5aa:	4669      	mov	r1, sp
 801a5ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a5b0:	f8ad 2004 	strh.w	r2, [sp, #4]
 801a5b4:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a5b8:	6803      	ldr	r3, [r0, #0]
 801a5ba:	689b      	ldr	r3, [r3, #8]
 801a5bc:	4798      	blx	r3
 801a5be:	b003      	add	sp, #12
 801a5c0:	f85d fb04 	ldr.w	pc, [sp], #4
 801a5c4:	20029ecc 	.word	0x20029ecc
 801a5c8:	20029ece 	.word	0x20029ece

0801a5cc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801a5cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a5d0:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801a5d4:	b089      	sub	sp, #36	@ 0x24
 801a5d6:	4680      	mov	r8, r0
 801a5d8:	460c      	mov	r4, r1
 801a5da:	2b00      	cmp	r3, #0
 801a5dc:	4615      	mov	r5, r2
 801a5de:	dd0e      	ble.n	801a5fe <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801a5e0:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801a5e4:	2b00      	cmp	r3, #0
 801a5e6:	dd0a      	ble.n	801a5fe <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801a5e8:	4628      	mov	r0, r5
 801a5ea:	f7ff ff5b 	bl	801a4a4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801a5ee:	4621      	mov	r1, r4
 801a5f0:	f7fe faed 	bl	8018bce <_ZNK8touchgfx4Rect9intersectERKS0_>
 801a5f4:	69eb      	ldr	r3, [r5, #28]
 801a5f6:	b928      	cbnz	r0, 801a604 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801a5f8:	461d      	mov	r5, r3
 801a5fa:	2b00      	cmp	r3, #0
 801a5fc:	d1f4      	bne.n	801a5e8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801a5fe:	b009      	add	sp, #36	@ 0x24
 801a600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a604:	ae04      	add	r6, sp, #16
 801a606:	2b00      	cmp	r3, #0
 801a608:	f000 80b5 	beq.w	801a776 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801a60c:	682b      	ldr	r3, [r5, #0]
 801a60e:	4629      	mov	r1, r5
 801a610:	a802      	add	r0, sp, #8
 801a612:	68db      	ldr	r3, [r3, #12]
 801a614:	4798      	blx	r3
 801a616:	4628      	mov	r0, r5
 801a618:	f7ff ff60 	bl	801a4dc <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801a61c:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801a620:	4407      	add	r7, r0
 801a622:	4628      	mov	r0, r5
 801a624:	f7ff ff6e 	bl	801a504 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801a628:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801a62c:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801a630:	b23f      	sxth	r7, r7
 801a632:	4418      	add	r0, r3
 801a634:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801a638:	4621      	mov	r1, r4
 801a63a:	f8ad 2014 	strh.w	r2, [sp, #20]
 801a63e:	f8ad 0012 	strh.w	r0, [sp, #18]
 801a642:	4630      	mov	r0, r6
 801a644:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a648:	f8ad 7010 	strh.w	r7, [sp, #16]
 801a64c:	f7f8 f82c 	bl	80126a8 <_ZN8touchgfx4RectaNERKS0_>
 801a650:	4628      	mov	r0, r5
 801a652:	f7ff ff27 	bl	801a4a4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801a656:	ab06      	add	r3, sp, #24
 801a658:	4602      	mov	r2, r0
 801a65a:	e896 0003 	ldmia.w	r6, {r0, r1}
 801a65e:	e883 0003 	stmia.w	r3, {r0, r1}
 801a662:	4611      	mov	r1, r2
 801a664:	4618      	mov	r0, r3
 801a666:	f7f8 f81f 	bl	80126a8 <_ZN8touchgfx4RectaNERKS0_>
 801a66a:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801a66e:	f9b4 1000 	ldrsh.w	r1, [r4]
 801a672:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801a676:	4299      	cmp	r1, r3
 801a678:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801a67c:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801a680:	d10b      	bne.n	801a69a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801a682:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801a686:	4552      	cmp	r2, sl
 801a688:	d107      	bne.n	801a69a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801a68a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801a68e:	455a      	cmp	r2, fp
 801a690:	d103      	bne.n	801a69a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801a692:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801a696:	454a      	cmp	r2, r9
 801a698:	d06d      	beq.n	801a776 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801a69a:	f1bb 0f00 	cmp.w	fp, #0
 801a69e:	dd65      	ble.n	801a76c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801a6a0:	f1b9 0f00 	cmp.w	r9, #0
 801a6a4:	dd62      	ble.n	801a76c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801a6a6:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801a6aa:	fa1f f08a 	uxth.w	r0, sl
 801a6ae:	4552      	cmp	r2, sl
 801a6b0:	9000      	str	r0, [sp, #0]
 801a6b2:	da12      	bge.n	801a6da <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 801a6b4:	9301      	str	r3, [sp, #4]
 801a6b6:	9b00      	ldr	r3, [sp, #0]
 801a6b8:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801a6bc:	f8ad 2012 	strh.w	r2, [sp, #18]
 801a6c0:	1a9a      	subs	r2, r3, r2
 801a6c2:	f8ad 1010 	strh.w	r1, [sp, #16]
 801a6c6:	4631      	mov	r1, r6
 801a6c8:	f8ad 0014 	strh.w	r0, [sp, #20]
 801a6cc:	4640      	mov	r0, r8
 801a6ce:	f8ad 2016 	strh.w	r2, [sp, #22]
 801a6d2:	69ea      	ldr	r2, [r5, #28]
 801a6d4:	f7ff ff7a 	bl	801a5cc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a6d8:	9b01      	ldr	r3, [sp, #4]
 801a6da:	f9b4 2000 	ldrsh.w	r2, [r4]
 801a6de:	b29f      	uxth	r7, r3
 801a6e0:	429a      	cmp	r2, r3
 801a6e2:	da0d      	bge.n	801a700 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 801a6e4:	f8ad 2010 	strh.w	r2, [sp, #16]
 801a6e8:	1aba      	subs	r2, r7, r2
 801a6ea:	f8ad a012 	strh.w	sl, [sp, #18]
 801a6ee:	4631      	mov	r1, r6
 801a6f0:	f8ad 2014 	strh.w	r2, [sp, #20]
 801a6f4:	4640      	mov	r0, r8
 801a6f6:	f8ad 9016 	strh.w	r9, [sp, #22]
 801a6fa:	69ea      	ldr	r2, [r5, #28]
 801a6fc:	f7ff ff66 	bl	801a5cc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a700:	8822      	ldrh	r2, [r4, #0]
 801a702:	445f      	add	r7, fp
 801a704:	88a3      	ldrh	r3, [r4, #4]
 801a706:	b2bf      	uxth	r7, r7
 801a708:	4413      	add	r3, r2
 801a70a:	b23a      	sxth	r2, r7
 801a70c:	b29b      	uxth	r3, r3
 801a70e:	b219      	sxth	r1, r3
 801a710:	4291      	cmp	r1, r2
 801a712:	dd0d      	ble.n	801a730 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801a714:	1bdb      	subs	r3, r3, r7
 801a716:	f8ad 2010 	strh.w	r2, [sp, #16]
 801a71a:	f8ad a012 	strh.w	sl, [sp, #18]
 801a71e:	4631      	mov	r1, r6
 801a720:	f8ad 3014 	strh.w	r3, [sp, #20]
 801a724:	4640      	mov	r0, r8
 801a726:	f8ad 9016 	strh.w	r9, [sp, #22]
 801a72a:	69ea      	ldr	r2, [r5, #28]
 801a72c:	f7ff ff4e 	bl	801a5cc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a730:	88e2      	ldrh	r2, [r4, #6]
 801a732:	8863      	ldrh	r3, [r4, #2]
 801a734:	4413      	add	r3, r2
 801a736:	9a00      	ldr	r2, [sp, #0]
 801a738:	444a      	add	r2, r9
 801a73a:	b29b      	uxth	r3, r3
 801a73c:	fa1f f982 	uxth.w	r9, r2
 801a740:	b219      	sxth	r1, r3
 801a742:	fa0f f289 	sxth.w	r2, r9
 801a746:	428a      	cmp	r2, r1
 801a748:	da15      	bge.n	801a776 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801a74a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801a74e:	eba3 0309 	sub.w	r3, r3, r9
 801a752:	f9b4 0000 	ldrsh.w	r0, [r4]
 801a756:	f8ad 1014 	strh.w	r1, [sp, #20]
 801a75a:	4631      	mov	r1, r6
 801a75c:	f8ad 0010 	strh.w	r0, [sp, #16]
 801a760:	f8ad 2012 	strh.w	r2, [sp, #18]
 801a764:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a768:	69ea      	ldr	r2, [r5, #28]
 801a76a:	e001      	b.n	801a770 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 801a76c:	69ea      	ldr	r2, [r5, #28]
 801a76e:	4621      	mov	r1, r4
 801a770:	4640      	mov	r0, r8
 801a772:	f7ff ff2b 	bl	801a5cc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a776:	4628      	mov	r0, r5
 801a778:	f7ff fe94 	bl	801a4a4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801a77c:	6861      	ldr	r1, [r4, #4]
 801a77e:	4602      	mov	r2, r0
 801a780:	4633      	mov	r3, r6
 801a782:	6820      	ldr	r0, [r4, #0]
 801a784:	c303      	stmia	r3!, {r0, r1}
 801a786:	4611      	mov	r1, r2
 801a788:	4630      	mov	r0, r6
 801a78a:	f7f7 ff8d 	bl	80126a8 <_ZN8touchgfx4RectaNERKS0_>
 801a78e:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801a792:	2b00      	cmp	r3, #0
 801a794:	f77f af33 	ble.w	801a5fe <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801a798:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801a79c:	2b00      	cmp	r3, #0
 801a79e:	f77f af2e 	ble.w	801a5fe <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801a7a2:	4628      	mov	r0, r5
 801a7a4:	f7ff fe9a 	bl	801a4dc <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801a7a8:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801a7ac:	1a18      	subs	r0, r3, r0
 801a7ae:	f8ad 0010 	strh.w	r0, [sp, #16]
 801a7b2:	4628      	mov	r0, r5
 801a7b4:	f7ff fea6 	bl	801a504 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801a7b8:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801a7bc:	4631      	mov	r1, r6
 801a7be:	1a18      	subs	r0, r3, r0
 801a7c0:	f8ad 0012 	strh.w	r0, [sp, #18]
 801a7c4:	4628      	mov	r0, r5
 801a7c6:	682b      	ldr	r3, [r5, #0]
 801a7c8:	689b      	ldr	r3, [r3, #8]
 801a7ca:	4798      	blx	r3
 801a7cc:	e717      	b.n	801a5fe <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801a7ce <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801a7ce:	b570      	push	{r4, r5, r6, lr}
 801a7d0:	1d06      	adds	r6, r0, #4
 801a7d2:	b086      	sub	sp, #24
 801a7d4:	460c      	mov	r4, r1
 801a7d6:	2300      	movs	r3, #0
 801a7d8:	4631      	mov	r1, r6
 801a7da:	4605      	mov	r5, r0
 801a7dc:	a802      	add	r0, sp, #8
 801a7de:	9301      	str	r3, [sp, #4]
 801a7e0:	f7ff fbca 	bl	8019f78 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a7e4:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801a7e8:	8822      	ldrh	r2, [r4, #0]
 801a7ea:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801a7ee:	1ad2      	subs	r2, r2, r3
 801a7f0:	8863      	ldrh	r3, [r4, #2]
 801a7f2:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801a7f6:	1a5b      	subs	r3, r3, r1
 801a7f8:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801a7fc:	f8ad 2010 	strh.w	r2, [sp, #16]
 801a800:	aa01      	add	r2, sp, #4
 801a802:	f8ad 0014 	strh.w	r0, [sp, #20]
 801a806:	4630      	mov	r0, r6
 801a808:	f8ad 1016 	strh.w	r1, [sp, #22]
 801a80c:	a904      	add	r1, sp, #16
 801a80e:	f8ad 3012 	strh.w	r3, [sp, #18]
 801a812:	f7f8 f821 	bl	8012858 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801a816:	9a01      	ldr	r2, [sp, #4]
 801a818:	b11a      	cbz	r2, 801a822 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 801a81a:	4621      	mov	r1, r4
 801a81c:	4628      	mov	r0, r5
 801a81e:	f7ff fed5 	bl	801a5cc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a822:	b006      	add	sp, #24
 801a824:	bd70      	pop	{r4, r5, r6, pc}

0801a826 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801a826:	4602      	mov	r2, r0
 801a828:	b530      	push	{r4, r5, lr}
 801a82a:	4604      	mov	r4, r0
 801a82c:	b085      	sub	sp, #20
 801a82e:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801a832:	460d      	mov	r5, r1
 801a834:	466b      	mov	r3, sp
 801a836:	6851      	ldr	r1, [r2, #4]
 801a838:	c303      	stmia	r3!, {r0, r1}
 801a83a:	4629      	mov	r1, r5
 801a83c:	4668      	mov	r0, sp
 801a83e:	f7f7 ff33 	bl	80126a8 <_ZN8touchgfx4RectaNERKS0_>
 801a842:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 801a846:	b12b      	cbz	r3, 801a854 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 801a848:	4669      	mov	r1, sp
 801a84a:	4620      	mov	r0, r4
 801a84c:	f7ff ffbf 	bl	801a7ce <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801a850:	b005      	add	sp, #20
 801a852:	bd30      	pop	{r4, r5, pc}
 801a854:	3404      	adds	r4, #4
 801a856:	a802      	add	r0, sp, #8
 801a858:	4621      	mov	r1, r4
 801a85a:	f7ff fb8d 	bl	8019f78 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a85e:	f8bd 3000 	ldrh.w	r3, [sp]
 801a862:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801a866:	4669      	mov	r1, sp
 801a868:	4620      	mov	r0, r4
 801a86a:	1a9b      	subs	r3, r3, r2
 801a86c:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801a870:	f8ad 3000 	strh.w	r3, [sp]
 801a874:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801a878:	1a9b      	subs	r3, r3, r2
 801a87a:	f8ad 3002 	strh.w	r3, [sp, #2]
 801a87e:	f7f7 ffb2 	bl	80127e6 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801a882:	e7e5      	b.n	801a850 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0801a884 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801a884:	460b      	mov	r3, r1
 801a886:	680a      	ldr	r2, [r1, #0]
 801a888:	1d01      	adds	r1, r0, #4
 801a88a:	6992      	ldr	r2, [r2, #24]
 801a88c:	4618      	mov	r0, r3
 801a88e:	4710      	bx	r2

0801a890 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst>:
 801a890:	4298      	cmp	r0, r3
 801a892:	d200      	bcs.n	801a896 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0x6>
 801a894:	b913      	cbnz	r3, 801a89c <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0xc>
 801a896:	440a      	add	r2, r1
 801a898:	b210      	sxth	r0, r2
 801a89a:	4770      	bx	lr
 801a89c:	ee07 2a90 	vmov	s15, r2
 801a8a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801a8a4:	ee07 0a90 	vmov	s15, r0
 801a8a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801a8ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 801a8b0:	ee07 3a10 	vmov	s14, r3
 801a8b4:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 801a8b8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801a8bc:	ee07 1a90 	vmov	s15, r1
 801a8c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a8c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a8c8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801a8cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801a8d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a8d4:	bfcc      	ite	gt
 801a8d6:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 801a8da:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 801a8de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a8e2:	ee17 3a90 	vmov	r3, s15
 801a8e6:	b218      	sxth	r0, r3
 801a8e8:	4770      	bx	lr

0801a8ea <_ZN8touchgfx12TextProviderC1Ev>:
 801a8ea:	b538      	push	{r3, r4, r5, lr}
 801a8ec:	2500      	movs	r5, #0
 801a8ee:	2302      	movs	r3, #2
 801a8f0:	4604      	mov	r4, r0
 801a8f2:	220e      	movs	r2, #14
 801a8f4:	7403      	strb	r3, [r0, #16]
 801a8f6:	4629      	mov	r1, r5
 801a8f8:	6145      	str	r5, [r0, #20]
 801a8fa:	7605      	strb	r5, [r0, #24]
 801a8fc:	83c5      	strh	r5, [r0, #30]
 801a8fe:	8405      	strh	r5, [r0, #32]
 801a900:	86c5      	strh	r5, [r0, #54]	@ 0x36
 801a902:	8705      	strh	r5, [r0, #56]	@ 0x38
 801a904:	87c5      	strh	r5, [r0, #62]	@ 0x3e
 801a906:	f8a0 5040 	strh.w	r5, [r0, #64]	@ 0x40
 801a90a:	e9c0 5500 	strd	r5, r5, [r0]
 801a90e:	e9c0 5511 	strd	r5, r5, [r0, #68]	@ 0x44
 801a912:	304c      	adds	r0, #76	@ 0x4c
 801a914:	f010 fe04 	bl	802b520 <memset>
 801a918:	2301      	movs	r3, #1
 801a91a:	4620      	mov	r0, r4
 801a91c:	f8a4 505a 	strh.w	r5, [r4, #90]	@ 0x5a
 801a920:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801a924:	f8a4 505e 	strh.w	r5, [r4, #94]	@ 0x5e
 801a928:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
 801a92c:	f884 5061 	strb.w	r5, [r4, #97]	@ 0x61
 801a930:	f7ed fc18 	bl	8008164 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801a934:	4620      	mov	r0, r4
 801a936:	bd38      	pop	{r3, r4, r5, pc}

0801a938 <_ZN8touchgfx12TextProvider11endOfStringEv>:
 801a938:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801a93a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801a93e:	8c40      	ldrh	r0, [r0, #34]	@ 0x22
 801a940:	fab0 f080 	clz	r0, r0
 801a944:	0940      	lsrs	r0, r0, #5
 801a946:	4770      	bx	lr

0801a948 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801a948:	b530      	push	{r4, r5, lr}
 801a94a:	2500      	movs	r5, #0
 801a94c:	2401      	movs	r4, #1
 801a94e:	6843      	ldr	r3, [r0, #4]
 801a950:	b913      	cbnz	r3, 801a958 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801a952:	6803      	ldr	r3, [r0, #0]
 801a954:	b313      	cbz	r3, 801a99c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801a956:	6043      	str	r3, [r0, #4]
 801a958:	7e03      	ldrb	r3, [r0, #24]
 801a95a:	b143      	cbz	r3, 801a96e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801a95c:	6943      	ldr	r3, [r0, #20]
 801a95e:	b12b      	cbz	r3, 801a96c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801a960:	881a      	ldrh	r2, [r3, #0]
 801a962:	b11a      	cbz	r2, 801a96c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801a964:	1c9a      	adds	r2, r3, #2
 801a966:	6142      	str	r2, [r0, #20]
 801a968:	8818      	ldrh	r0, [r3, #0]
 801a96a:	bd30      	pop	{r4, r5, pc}
 801a96c:	7605      	strb	r5, [r0, #24]
 801a96e:	6843      	ldr	r3, [r0, #4]
 801a970:	8819      	ldrh	r1, [r3, #0]
 801a972:	b199      	cbz	r1, 801a99c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801a974:	1c9a      	adds	r2, r3, #2
 801a976:	2902      	cmp	r1, #2
 801a978:	6042      	str	r2, [r0, #4]
 801a97a:	d1f5      	bne.n	801a968 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801a97c:	7c03      	ldrb	r3, [r0, #16]
 801a97e:	2b01      	cmp	r3, #1
 801a980:	d8e5      	bhi.n	801a94e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801a982:	1c5a      	adds	r2, r3, #1
 801a984:	3302      	adds	r3, #2
 801a986:	7402      	strb	r2, [r0, #16]
 801a988:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801a98c:	6143      	str	r3, [r0, #20]
 801a98e:	2b00      	cmp	r3, #0
 801a990:	d0dd      	beq.n	801a94e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801a992:	881b      	ldrh	r3, [r3, #0]
 801a994:	2b00      	cmp	r3, #0
 801a996:	d0da      	beq.n	801a94e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801a998:	7604      	strb	r4, [r0, #24]
 801a99a:	e7d8      	b.n	801a94e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801a99c:	2000      	movs	r0, #0
 801a99e:	e7e4      	b.n	801a96a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801a9a0 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 801a9a0:	6001      	str	r1, [r0, #0]
 801a9a2:	2100      	movs	r1, #0
 801a9a4:	b430      	push	{r4, r5}
 801a9a6:	6041      	str	r1, [r0, #4]
 801a9a8:	6815      	ldr	r5, [r2, #0]
 801a9aa:	6085      	str	r5, [r0, #8]
 801a9ac:	6852      	ldr	r2, [r2, #4]
 801a9ae:	6443      	str	r3, [r0, #68]	@ 0x44
 801a9b0:	9b02      	ldr	r3, [sp, #8]
 801a9b2:	60c2      	str	r2, [r0, #12]
 801a9b4:	7401      	strb	r1, [r0, #16]
 801a9b6:	6141      	str	r1, [r0, #20]
 801a9b8:	7601      	strb	r1, [r0, #24]
 801a9ba:	8701      	strh	r1, [r0, #56]	@ 0x38
 801a9bc:	8401      	strh	r1, [r0, #32]
 801a9be:	f8a0 1040 	strh.w	r1, [r0, #64]	@ 0x40
 801a9c2:	6483      	str	r3, [r0, #72]	@ 0x48
 801a9c4:	bc30      	pop	{r4, r5}
 801a9c6:	f7ed bbcd 	b.w	8008164 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801a9ca <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>:
 801a9ca:	b408      	push	{r3}
 801a9cc:	b510      	push	{r4, lr}
 801a9ce:	b085      	sub	sp, #20
 801a9d0:	ac07      	add	r4, sp, #28
 801a9d2:	f854 3b04 	ldr.w	r3, [r4], #4
 801a9d6:	9300      	str	r3, [sp, #0]
 801a9d8:	4613      	mov	r3, r2
 801a9da:	4622      	mov	r2, r4
 801a9dc:	9403      	str	r4, [sp, #12]
 801a9de:	f7ff ffdf 	bl	801a9a0 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801a9e2:	b005      	add	sp, #20
 801a9e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a9e8:	b001      	add	sp, #4
 801a9ea:	4770      	bx	lr

0801a9ec <_ZN8touchgfx12TextProvider20unicodeConverterInitEv>:
 801a9ec:	2301      	movs	r3, #1
 801a9ee:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 801a9f2:	4770      	bx	lr

0801a9f4 <_ZN8touchgfx12TextProvider16unicodeConverterEh>:
 801a9f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a9f8:	f8b0 b036 	ldrh.w	fp, [r0, #54]	@ 0x36
 801a9fc:	b087      	sub	sp, #28
 801a9fe:	eb00 064b 	add.w	r6, r0, fp, lsl #1
 801aa02:	8c73      	ldrh	r3, [r6, #34]	@ 0x22
 801aa04:	2b00      	cmp	r3, #0
 801aa06:	f000 813f 	beq.w	801ac88 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x294>
 801aa0a:	2b7f      	cmp	r3, #127	@ 0x7f
 801aa0c:	d819      	bhi.n	801aa42 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x4e>
 801aa0e:	2901      	cmp	r1, #1
 801aa10:	d117      	bne.n	801aa42 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x4e>
 801aa12:	2b3c      	cmp	r3, #60	@ 0x3c
 801aa14:	f000 83d4 	beq.w	801b1c0 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x7cc>
 801aa18:	2b3e      	cmp	r3, #62	@ 0x3e
 801aa1a:	f000 83d3 	beq.w	801b1c4 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x7d0>
 801aa1e:	2b28      	cmp	r3, #40	@ 0x28
 801aa20:	f000 83d2 	beq.w	801b1c8 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x7d4>
 801aa24:	2b29      	cmp	r3, #41	@ 0x29
 801aa26:	f000 83d1 	beq.w	801b1cc <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x7d8>
 801aa2a:	2b5b      	cmp	r3, #91	@ 0x5b
 801aa2c:	f000 83d0 	beq.w	801b1d0 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x7dc>
 801aa30:	2b5d      	cmp	r3, #93	@ 0x5d
 801aa32:	f000 83cf 	beq.w	801b1d4 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x7e0>
 801aa36:	2b7b      	cmp	r3, #123	@ 0x7b
 801aa38:	f000 83ce 	beq.w	801b1d8 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x7e4>
 801aa3c:	2b7d      	cmp	r3, #125	@ 0x7d
 801aa3e:	f000 83cd 	beq.w	801b1dc <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x7e8>
 801aa42:	f10b 0201 	add.w	r2, fp, #1
 801aa46:	b292      	uxth	r2, r2
 801aa48:	2a09      	cmp	r2, #9
 801aa4a:	4611      	mov	r1, r2
 801aa4c:	bf88      	it	hi
 801aa4e:	f1a2 010a 	subhi.w	r1, r2, #10
 801aa52:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801aa56:	8c4d      	ldrh	r5, [r1, #34]	@ 0x22
 801aa58:	9102      	str	r1, [sp, #8]
 801aa5a:	f10b 0102 	add.w	r1, fp, #2
 801aa5e:	b289      	uxth	r1, r1
 801aa60:	2909      	cmp	r1, #9
 801aa62:	bf88      	it	hi
 801aa64:	390a      	subhi	r1, #10
 801aa66:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801aa6a:	8c4c      	ldrh	r4, [r1, #34]	@ 0x22
 801aa6c:	f240 6151 	movw	r1, #1617	@ 0x651
 801aa70:	428d      	cmp	r5, r1
 801aa72:	d125      	bne.n	801aac0 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0xcc>
 801aa74:	f2a3 614b 	subw	r1, r3, #1611	@ 0x64b
 801aa78:	b289      	uxth	r1, r1
 801aa7a:	2914      	cmp	r1, #20
 801aa7c:	d914      	bls.n	801aaa8 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0xb4>
 801aa7e:	f023 0104 	bic.w	r1, r3, #4
 801aa82:	b289      	uxth	r1, r1
 801aa84:	f5b1 6fce 	cmp.w	r1, #1648	@ 0x670
 801aa88:	d00e      	beq.n	801aaa8 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0xb4>
 801aa8a:	f2a3 61d6 	subw	r1, r3, #1750	@ 0x6d6
 801aa8e:	b289      	uxth	r1, r1
 801aa90:	2917      	cmp	r1, #23
 801aa92:	d804      	bhi.n	801aa9e <_ZN8touchgfx12TextProvider16unicodeConverterEh+0xaa>
 801aa94:	4fae      	ldr	r7, [pc, #696]	@ (801ad50 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x35c>)
 801aa96:	fa27 f101 	lsr.w	r1, r7, r1
 801aa9a:	07c9      	lsls	r1, r1, #31
 801aa9c:	d404      	bmi.n	801aaa8 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0xb4>
 801aa9e:	f6a3 01e4 	subw	r1, r3, #2276	@ 0x8e4
 801aaa2:	b289      	uxth	r1, r1
 801aaa4:	291a      	cmp	r1, #26
 801aaa6:	d80b      	bhi.n	801aac0 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0xcc>
 801aaa8:	2a0a      	cmp	r2, #10
 801aaaa:	f240 6151 	movw	r1, #1617	@ 0x651
 801aaae:	bf28      	it	cs
 801aab0:	2200      	movcs	r2, #0
 801aab2:	8471      	strh	r1, [r6, #34]	@ 0x22
 801aab4:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801aab8:	8453      	strh	r3, [r2, #34]	@ 0x22
 801aaba:	461a      	mov	r2, r3
 801aabc:	462b      	mov	r3, r5
 801aabe:	4615      	mov	r5, r2
 801aac0:	f2a3 6222 	subw	r2, r3, #1570	@ 0x622
 801aac4:	b292      	uxth	r2, r2
 801aac6:	2a18      	cmp	r2, #24
 801aac8:	d90d      	bls.n	801aae6 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0xf2>
 801aaca:	f5a3 62c8 	sub.w	r2, r3, #1600	@ 0x640
 801aace:	b292      	uxth	r2, r2
 801aad0:	2a0a      	cmp	r2, #10
 801aad2:	d908      	bls.n	801aae6 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0xf2>
 801aad4:	f46f 67ce 	mvn.w	r7, #1648	@ 0x670
 801aad8:	19da      	adds	r2, r3, r7
 801aada:	b292      	uxth	r2, r2
 801aadc:	2a62      	cmp	r2, #98	@ 0x62
 801aade:	d902      	bls.n	801aae6 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0xf2>
 801aae0:	2b20      	cmp	r3, #32
 801aae2:	f040 80d1 	bne.w	801ac88 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x294>
 801aae6:	f10b 0103 	add.w	r1, fp, #3
 801aaea:	b289      	uxth	r1, r1
 801aaec:	2909      	cmp	r1, #9
 801aaee:	460a      	mov	r2, r1
 801aaf0:	bf88      	it	hi
 801aaf2:	f1a1 020a 	subhi.w	r2, r1, #10
 801aaf6:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801aafa:	f8b2 c022 	ldrh.w	ip, [r2, #34]	@ 0x22
 801aafe:	f10b 0204 	add.w	r2, fp, #4
 801ab02:	b292      	uxth	r2, r2
 801ab04:	2a09      	cmp	r2, #9
 801ab06:	bf88      	it	hi
 801ab08:	3a0a      	subhi	r2, #10
 801ab0a:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801ab0e:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 801ab10:	f2a2 6622 	subw	r6, r2, #1570	@ 0x622
 801ab14:	2e18      	cmp	r6, #24
 801ab16:	f240 80bb 	bls.w	801ac90 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x29c>
 801ab1a:	f5a2 66c8 	sub.w	r6, r2, #1600	@ 0x640
 801ab1e:	2e0a      	cmp	r6, #10
 801ab20:	f240 80b6 	bls.w	801ac90 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x29c>
 801ab24:	f46f 66ce 	mvn.w	r6, #1648	@ 0x670
 801ab28:	4432      	add	r2, r6
 801ab2a:	2a62      	cmp	r2, #98	@ 0x62
 801ab2c:	f240 80b0 	bls.w	801ac90 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x29c>
 801ab30:	f2a3 6227 	subw	r2, r3, #1575	@ 0x627
 801ab34:	b292      	uxth	r2, r2
 801ab36:	2a21      	cmp	r2, #33	@ 0x21
 801ab38:	f200 80aa 	bhi.w	801ac90 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x29c>
 801ab3c:	f2a4 6227 	subw	r2, r4, #1575	@ 0x627
 801ab40:	b292      	uxth	r2, r2
 801ab42:	2a23      	cmp	r2, #35	@ 0x23
 801ab44:	d82e      	bhi.n	801aba4 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1b0>
 801ab46:	f2ac 622f 	subw	r2, ip, #1583	@ 0x62f
 801ab4a:	b292      	uxth	r2, r2
 801ab4c:	2a18      	cmp	r2, #24
 801ab4e:	d829      	bhi.n	801aba4 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1b0>
 801ab50:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 801ab54:	6c87      	ldr	r7, [r0, #72]	@ 0x48
 801ab56:	ebc3 1603 	rsb	r6, r3, r3, lsl #4
 801ab5a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801ab5e:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 801ab62:	f5a2 4282 	sub.w	r2, r2, #16640	@ 0x4100
 801ab66:	3a1a      	subs	r2, #26
 801ab68:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 801ab6c:	4462      	add	r2, ip
 801ab6e:	b292      	uxth	r2, r2
 801ab70:	b1c7      	cbz	r7, 801aba4 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1b0>
 801ab72:	8b3e      	ldrh	r6, [r7, #24]
 801ab74:	b1b6      	cbz	r6, 801aba4 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1b0>
 801ab76:	f8d7 9000 	ldr.w	r9, [r7]
 801ab7a:	f04f 0e00 	mov.w	lr, #0
 801ab7e:	eb06 070e 	add.w	r7, r6, lr
 801ab82:	f04f 080a 	mov.w	r8, #10
 801ab86:	107f      	asrs	r7, r7, #1
 801ab88:	fb08 fa07 	mul.w	sl, r8, r7
 801ab8c:	eb09 080a 	add.w	r8, r9, sl
 801ab90:	f839 a00a 	ldrh.w	sl, [r9, sl]
 801ab94:	4552      	cmp	r2, sl
 801ab96:	d961      	bls.n	801ac5c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x268>
 801ab98:	f107 0e01 	add.w	lr, r7, #1
 801ab9c:	e000      	b.n	801aba0 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1ac>
 801ab9e:	463e      	mov	r6, r7
 801aba0:	45b6      	cmp	lr, r6
 801aba2:	dbec      	blt.n	801ab7e <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x18a>
 801aba4:	f5a3 62c5 	sub.w	r2, r3, #1576	@ 0x628
 801aba8:	b292      	uxth	r2, r2
 801abaa:	2a22      	cmp	r2, #34	@ 0x22
 801abac:	d972      	bls.n	801ac94 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x2a0>
 801abae:	f2a5 624b 	subw	r2, r5, #1611	@ 0x64b
 801abb2:	b292      	uxth	r2, r2
 801abb4:	2a14      	cmp	r2, #20
 801abb6:	d918      	bls.n	801abea <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1f6>
 801abb8:	f5b5 6fce 	cmp.w	r5, #1648	@ 0x670
 801abbc:	d015      	beq.n	801abea <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1f6>
 801abbe:	f240 6274 	movw	r2, #1652	@ 0x674
 801abc2:	4295      	cmp	r5, r2
 801abc4:	d011      	beq.n	801abea <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1f6>
 801abc6:	f2a5 62d6 	subw	r2, r5, #1750	@ 0x6d6
 801abca:	b292      	uxth	r2, r2
 801abcc:	2a17      	cmp	r2, #23
 801abce:	d804      	bhi.n	801abda <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1e6>
 801abd0:	495f      	ldr	r1, [pc, #380]	@ (801ad50 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x35c>)
 801abd2:	fa21 f202 	lsr.w	r2, r1, r2
 801abd6:	07d2      	lsls	r2, r2, #31
 801abd8:	d407      	bmi.n	801abea <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1f6>
 801abda:	f6a5 02e4 	subw	r2, r5, #2276	@ 0x8e4
 801abde:	b292      	uxth	r2, r2
 801abe0:	2a1a      	cmp	r2, #26
 801abe2:	d902      	bls.n	801abea <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1f6>
 801abe4:	46a4      	mov	ip, r4
 801abe6:	462c      	mov	r4, r5
 801abe8:	2500      	movs	r5, #0
 801abea:	2b20      	cmp	r3, #32
 801abec:	d005      	beq.n	801abfa <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x206>
 801abee:	f2a3 6226 	subw	r2, r3, #1574	@ 0x626
 801abf2:	b292      	uxth	r2, r2
 801abf4:	2a24      	cmp	r2, #36	@ 0x24
 801abf6:	f200 8138 	bhi.w	801ae6a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x476>
 801abfa:	f2a4 6222 	subw	r2, r4, #1570	@ 0x622
 801abfe:	b292      	uxth	r2, r2
 801ac00:	2ab3      	cmp	r2, #179	@ 0xb3
 801ac02:	f200 8132 	bhi.w	801ae6a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x476>
 801ac06:	f240 6244 	movw	r2, #1604	@ 0x644
 801ac0a:	4294      	cmp	r4, r2
 801ac0c:	d104      	bne.n	801ac18 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x224>
 801ac0e:	f240 6227 	movw	r2, #1575	@ 0x627
 801ac12:	4594      	cmp	ip, r2
 801ac14:	f000 8129 	beq.w	801ae6a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x476>
 801ac18:	f240 624f 	movw	r2, #1615	@ 0x64f
 801ac1c:	4295      	cmp	r5, r2
 801ac1e:	f000 8124 	beq.w	801ae6a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x476>
 801ac22:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 801ac24:	2900      	cmp	r1, #0
 801ac26:	f000 8120 	beq.w	801ae6a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x476>
 801ac2a:	8b8a      	ldrh	r2, [r1, #28]
 801ac2c:	2a00      	cmp	r2, #0
 801ac2e:	f000 811d 	beq.w	801ae6c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x478>
 801ac32:	b2e4      	uxtb	r4, r4
 801ac34:	6889      	ldr	r1, [r1, #8]
 801ac36:	2700      	movs	r7, #0
 801ac38:	f04f 080a 	mov.w	r8, #10
 801ac3c:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 801ac40:	b2a4      	uxth	r4, r4
 801ac42:	19d6      	adds	r6, r2, r7
 801ac44:	1076      	asrs	r6, r6, #1
 801ac46:	fb08 fc06 	mul.w	ip, r8, r6
 801ac4a:	eb01 0e0c 	add.w	lr, r1, ip
 801ac4e:	f831 c00c 	ldrh.w	ip, [r1, ip]
 801ac52:	4564      	cmp	r4, ip
 801ac54:	f240 810c 	bls.w	801ae70 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x47c>
 801ac58:	1c77      	adds	r7, r6, #1
 801ac5a:	e103      	b.n	801ae64 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x470>
 801ac5c:	d39f      	bcc.n	801ab9e <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1aa>
 801ac5e:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 801ac62:	42aa      	cmp	r2, r5
 801ac64:	d19e      	bne.n	801aba4 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1b0>
 801ac66:	8f03      	ldrh	r3, [r0, #56]	@ 0x38
 801ac68:	2909      	cmp	r1, #9
 801ac6a:	86c1      	strh	r1, [r0, #54]	@ 0x36
 801ac6c:	f1a3 0303 	sub.w	r3, r3, #3
 801ac70:	bf88      	it	hi
 801ac72:	f1ab 0207 	subhi.w	r2, fp, #7
 801ac76:	8703      	strh	r3, [r0, #56]	@ 0x38
 801ac78:	f04f 0301 	mov.w	r3, #1
 801ac7c:	bf88      	it	hi
 801ac7e:	86c2      	strhhi	r2, [r0, #54]	@ 0x36
 801ac80:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 801ac84:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 801ac88:	4618      	mov	r0, r3
 801ac8a:	b007      	add	sp, #28
 801ac8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ac90:	2b20      	cmp	r3, #32
 801ac92:	d187      	bne.n	801aba4 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1b0>
 801ac94:	f2a5 622c 	subw	r2, r5, #1580	@ 0x62c
 801ac98:	b292      	uxth	r2, r2
 801ac9a:	2a25      	cmp	r2, #37	@ 0x25
 801ac9c:	d887      	bhi.n	801abae <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1ba>
 801ac9e:	f2a4 622c 	subw	r2, r4, #1580	@ 0x62c
 801aca2:	b291      	uxth	r1, r2
 801aca4:	2925      	cmp	r1, #37	@ 0x25
 801aca6:	d915      	bls.n	801acd4 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x2e0>
 801aca8:	f5b4 6fce 	cmp.w	r4, #1648	@ 0x670
 801acac:	f000 82ed 	beq.w	801b28a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x896>
 801acb0:	f240 62d2 	movw	r2, #1746	@ 0x6d2
 801acb4:	4294      	cmp	r4, r2
 801acb6:	f47f af7a 	bne.w	801abae <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1ba>
 801acba:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 801acbe:	2b20      	cmp	r3, #32
 801acc0:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801acc4:	b292      	uxth	r2, r2
 801acc6:	d107      	bne.n	801acd8 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x2e4>
 801acc8:	f5a2 5240 	sub.w	r2, r2, #12288	@ 0x3000
 801accc:	2127      	movs	r1, #39	@ 0x27
 801acce:	3a30      	subs	r2, #48	@ 0x30
 801acd0:	b292      	uxth	r2, r2
 801acd2:	e017      	b.n	801ad04 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x310>
 801acd4:	2b20      	cmp	r3, #32
 801acd6:	d034      	beq.n	801ad42 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x34e>
 801acd8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801acdc:	ebc3 1242 	rsb	r2, r3, r2, lsl #5
 801ace0:	0112      	lsls	r2, r2, #4
 801ace2:	f502 42e5 	add.w	r2, r2, #29312	@ 0x7280
 801ace6:	b292      	uxth	r2, r2
 801ace8:	eb05 0685 	add.w	r6, r5, r5, lsl #2
 801acec:	f5b4 6fce 	cmp.w	r4, #1648	@ 0x670
 801acf0:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
 801acf4:	b292      	uxth	r2, r2
 801acf6:	f000 82d2 	beq.w	801b29e <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x8aa>
 801acfa:	f240 66d2 	movw	r6, #1746	@ 0x6d2
 801acfe:	42b4      	cmp	r4, r6
 801ad00:	bf08      	it	eq
 801ad02:	2127      	moveq	r1, #39	@ 0x27
 801ad04:	6c87      	ldr	r7, [r0, #72]	@ 0x48
 801ad06:	2f00      	cmp	r7, #0
 801ad08:	f43f af51 	beq.w	801abae <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1ba>
 801ad0c:	8b7e      	ldrh	r6, [r7, #26]
 801ad0e:	2e00      	cmp	r6, #0
 801ad10:	f43f af4d 	beq.w	801abae <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1ba>
 801ad14:	440a      	add	r2, r1
 801ad16:	f04f 0e00 	mov.w	lr, #0
 801ad1a:	6879      	ldr	r1, [r7, #4]
 801ad1c:	f04f 0a0a 	mov.w	sl, #10
 801ad20:	f502 6212 	add.w	r2, r2, #2336	@ 0x920
 801ad24:	b292      	uxth	r2, r2
 801ad26:	eb06 070e 	add.w	r7, r6, lr
 801ad2a:	107f      	asrs	r7, r7, #1
 801ad2c:	fb0a f807 	mul.w	r8, sl, r7
 801ad30:	eb01 0908 	add.w	r9, r1, r8
 801ad34:	f831 8008 	ldrh.w	r8, [r1, r8]
 801ad38:	4542      	cmp	r2, r8
 801ad3a:	d90b      	bls.n	801ad54 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x360>
 801ad3c:	f107 0e01 	add.w	lr, r7, #1
 801ad40:	e003      	b.n	801ad4a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x356>
 801ad42:	f64c 72d0 	movw	r2, #53200	@ 0xcfd0
 801ad46:	e7cf      	b.n	801ace8 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x2f4>
 801ad48:	463e      	mov	r6, r7
 801ad4a:	4576      	cmp	r6, lr
 801ad4c:	dceb      	bgt.n	801ad26 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x332>
 801ad4e:	e72e      	b.n	801abae <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1ba>
 801ad50:	00f67e7f 	.word	0x00f67e7f
 801ad54:	d3f8      	bcc.n	801ad48 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x354>
 801ad56:	f109 0102 	add.w	r1, r9, #2
 801ad5a:	2500      	movs	r5, #0
 801ad5c:	2202      	movs	r2, #2
 801ad5e:	2d00      	cmp	r5, #0
 801ad60:	bf0c      	ite	eq
 801ad62:	4614      	moveq	r4, r2
 801ad64:	1c54      	addne	r4, r2, #1
 801ad66:	f8df c38c 	ldr.w	ip, [pc, #908]	@ 801b0f4 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x700>
 801ad6a:	3401      	adds	r4, #1
 801ad6c:	445c      	add	r4, fp
 801ad6e:	b2a4      	uxth	r4, r4
 801ad70:	2c09      	cmp	r4, #9
 801ad72:	4626      	mov	r6, r4
 801ad74:	bf88      	it	hi
 801ad76:	f1a4 060a 	subhi.w	r6, r4, #10
 801ad7a:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801ad7e:	8c76      	ldrh	r6, [r6, #34]	@ 0x22
 801ad80:	f2a6 674b 	subw	r7, r6, #1611	@ 0x64b
 801ad84:	2f14      	cmp	r7, #20
 801ad86:	d978      	bls.n	801ae7a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x486>
 801ad88:	f026 0704 	bic.w	r7, r6, #4
 801ad8c:	f5b7 6fce 	cmp.w	r7, #1648	@ 0x670
 801ad90:	d073      	beq.n	801ae7a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x486>
 801ad92:	f2a6 67d6 	subw	r7, r6, #1750	@ 0x6d6
 801ad96:	b2bf      	uxth	r7, r7
 801ad98:	2f17      	cmp	r7, #23
 801ad9a:	d803      	bhi.n	801ada4 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x3b0>
 801ad9c:	fa2c f707 	lsr.w	r7, ip, r7
 801ada0:	07ff      	lsls	r7, r7, #31
 801ada2:	d46a      	bmi.n	801ae7a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x486>
 801ada4:	f6a6 07e4 	subw	r7, r6, #2276	@ 0x8e4
 801ada8:	2f1a      	cmp	r7, #26
 801adaa:	d966      	bls.n	801ae7a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x486>
 801adac:	f2a6 6422 	subw	r4, r6, #1570	@ 0x622
 801adb0:	2c18      	cmp	r4, #24
 801adb2:	d965      	bls.n	801ae80 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x48c>
 801adb4:	f5a6 64c8 	sub.w	r4, r6, #1600	@ 0x640
 801adb8:	2c0a      	cmp	r4, #10
 801adba:	d961      	bls.n	801ae80 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x48c>
 801adbc:	f46f 6cce 	mvn.w	ip, #1648	@ 0x670
 801adc0:	4466      	add	r6, ip
 801adc2:	2e62      	cmp	r6, #98	@ 0x62
 801adc4:	bf94      	ite	ls
 801adc6:	2400      	movls	r4, #0
 801adc8:	2401      	movhi	r4, #1
 801adca:	9401      	str	r4, [sp, #4]
 801adcc:	f890 4060 	ldrb.w	r4, [r0, #96]	@ 0x60
 801add0:	f084 0401 	eor.w	r4, r4, #1
 801add4:	9404      	str	r4, [sp, #16]
 801add6:	9c01      	ldr	r4, [sp, #4]
 801add8:	2c00      	cmp	r4, #0
 801adda:	9c04      	ldr	r4, [sp, #16]
 801addc:	bf0c      	ite	eq
 801adde:	2702      	moveq	r7, #2
 801ade0:	2700      	movne	r7, #0
 801ade2:	193c      	adds	r4, r7, r4
 801ade4:	9400      	str	r4, [sp, #0]
 801ade6:	2900      	cmp	r1, #0
 801ade8:	f000 8186 	beq.w	801b0f8 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x704>
 801adec:	f831 4014 	ldrh.w	r4, [r1, r4, lsl #1]
 801adf0:	2c00      	cmp	r4, #0
 801adf2:	f040 8221 	bne.w	801b238 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x844>
 801adf6:	2a00      	cmp	r2, #0
 801adf8:	f000 821e 	beq.w	801b238 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x844>
 801adfc:	eb0b 0402 	add.w	r4, fp, r2
 801ae00:	f102 0e01 	add.w	lr, r2, #1
 801ae04:	4ebb      	ldr	r6, [pc, #748]	@ (801b0f4 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x700>)
 801ae06:	b2a4      	uxth	r4, r4
 801ae08:	2c09      	cmp	r4, #9
 801ae0a:	bf88      	it	hi
 801ae0c:	3c0a      	subhi	r4, #10
 801ae0e:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801ae12:	8c64      	ldrh	r4, [r4, #34]	@ 0x22
 801ae14:	f2a4 6c4b 	subw	ip, r4, #1611	@ 0x64b
 801ae18:	f1bc 0f14 	cmp.w	ip, #20
 801ae1c:	d915      	bls.n	801ae4a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x456>
 801ae1e:	f024 0c04 	bic.w	ip, r4, #4
 801ae22:	f5bc 6fce 	cmp.w	ip, #1648	@ 0x670
 801ae26:	d010      	beq.n	801ae4a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x456>
 801ae28:	f2a4 6cd6 	subw	ip, r4, #1750	@ 0x6d6
 801ae2c:	fa1f fc8c 	uxth.w	ip, ip
 801ae30:	f1bc 0f17 	cmp.w	ip, #23
 801ae34:	d804      	bhi.n	801ae40 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x44c>
 801ae36:	fa26 fc0c 	lsr.w	ip, r6, ip
 801ae3a:	f01c 0f01 	tst.w	ip, #1
 801ae3e:	d104      	bne.n	801ae4a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x456>
 801ae40:	f6a4 0ce4 	subw	ip, r4, #2276	@ 0x8e4
 801ae44:	f1bc 0f1a 	cmp.w	ip, #26
 801ae48:	d81c      	bhi.n	801ae84 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x490>
 801ae4a:	eb0b 040e 	add.w	r4, fp, lr
 801ae4e:	f10e 0e01 	add.w	lr, lr, #1
 801ae52:	b2a4      	uxth	r4, r4
 801ae54:	2c09      	cmp	r4, #9
 801ae56:	bf88      	it	hi
 801ae58:	3c0a      	subhi	r4, #10
 801ae5a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801ae5e:	8c64      	ldrh	r4, [r4, #34]	@ 0x22
 801ae60:	e7d8      	b.n	801ae14 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x420>
 801ae62:	4632      	mov	r2, r6
 801ae64:	4297      	cmp	r7, r2
 801ae66:	f6ff aeec 	blt.w	801ac42 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x24e>
 801ae6a:	2200      	movs	r2, #0
 801ae6c:	4611      	mov	r1, r2
 801ae6e:	e776      	b.n	801ad5e <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x36a>
 801ae70:	d3f7      	bcc.n	801ae62 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x46e>
 801ae72:	f10e 0102 	add.w	r1, lr, #2
 801ae76:	2201      	movs	r2, #1
 801ae78:	e771      	b.n	801ad5e <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x36a>
 801ae7a:	3401      	adds	r4, #1
 801ae7c:	b2a4      	uxth	r4, r4
 801ae7e:	e777      	b.n	801ad70 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x37c>
 801ae80:	2400      	movs	r4, #0
 801ae82:	e7a2      	b.n	801adca <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x3d6>
 801ae84:	6c86      	ldr	r6, [r0, #72]	@ 0x48
 801ae86:	2e00      	cmp	r6, #0
 801ae88:	d07a      	beq.n	801af80 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x58c>
 801ae8a:	f46f 6ac4 	mvn.w	sl, #1568	@ 0x620
 801ae8e:	eb04 0c0a 	add.w	ip, r4, sl
 801ae92:	f1bc 0f19 	cmp.w	ip, #25
 801ae96:	d840      	bhi.n	801af1a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x526>
 801ae98:	f104 5400 	add.w	r4, r4, #536870912	@ 0x20000000
 801ae9c:	f46f 69c4 	mvn.w	r9, #1568	@ 0x620
 801aea0:	68f7      	ldr	r7, [r6, #12]
 801aea2:	444c      	add	r4, r9
 801aea4:	eb07 0cc4 	add.w	ip, r7, r4, lsl #3
 801aea8:	f10e 0401 	add.w	r4, lr, #1
 801aeac:	44de      	add	lr, fp
 801aeae:	f8df 9244 	ldr.w	r9, [pc, #580]	@ 801b0f4 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x700>
 801aeb2:	fa1f fe8e 	uxth.w	lr, lr
 801aeb6:	445c      	add	r4, fp
 801aeb8:	f1be 0f09 	cmp.w	lr, #9
 801aebc:	b2a4      	uxth	r4, r4
 801aebe:	bf88      	it	hi
 801aec0:	f1ae 0e0a 	subhi.w	lr, lr, #10
 801aec4:	eb00 0e4e 	add.w	lr, r0, lr, lsl #1
 801aec8:	f8be e022 	ldrh.w	lr, [lr, #34]	@ 0x22
 801aecc:	f2ae 684b 	subw	r8, lr, #1611	@ 0x64b
 801aed0:	f1b8 0f14 	cmp.w	r8, #20
 801aed4:	d915      	bls.n	801af02 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x50e>
 801aed6:	f02e 0804 	bic.w	r8, lr, #4
 801aeda:	f5b8 6fce 	cmp.w	r8, #1648	@ 0x670
 801aede:	d010      	beq.n	801af02 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x50e>
 801aee0:	f2ae 68d6 	subw	r8, lr, #1750	@ 0x6d6
 801aee4:	fa1f f888 	uxth.w	r8, r8
 801aee8:	f1b8 0f17 	cmp.w	r8, #23
 801aeec:	d804      	bhi.n	801aef8 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x504>
 801aeee:	fa29 f808 	lsr.w	r8, r9, r8
 801aef2:	f018 0f01 	tst.w	r8, #1
 801aef6:	d104      	bne.n	801af02 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x50e>
 801aef8:	f6ae 08e4 	subw	r8, lr, #2276	@ 0x8e4
 801aefc:	f1b8 0f1a 	cmp.w	r8, #26
 801af00:	d846      	bhi.n	801af90 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x59c>
 801af02:	2c09      	cmp	r4, #9
 801af04:	46a6      	mov	lr, r4
 801af06:	bf88      	it	hi
 801af08:	f1a4 0e0a 	subhi.w	lr, r4, #10
 801af0c:	3401      	adds	r4, #1
 801af0e:	eb00 0e4e 	add.w	lr, r0, lr, lsl #1
 801af12:	b2a4      	uxth	r4, r4
 801af14:	f8be e022 	ldrh.w	lr, [lr, #34]	@ 0x22
 801af18:	e7d8      	b.n	801aecc <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x4d8>
 801af1a:	f46f 68c8 	mvn.w	r8, #1600	@ 0x640
 801af1e:	eb04 0c08 	add.w	ip, r4, r8
 801af22:	f1bc 0f09 	cmp.w	ip, #9
 801af26:	d806      	bhi.n	801af36 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x542>
 801af28:	f104 5400 	add.w	r4, r4, #536870912	@ 0x20000000
 801af2c:	f46f 6cc8 	mvn.w	ip, #1600	@ 0x640
 801af30:	6937      	ldr	r7, [r6, #16]
 801af32:	4464      	add	r4, ip
 801af34:	e7b6      	b.n	801aea4 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x4b0>
 801af36:	f46f 67ce 	mvn.w	r7, #1648	@ 0x670
 801af3a:	eb04 0c07 	add.w	ip, r4, r7
 801af3e:	f1bc 0f62 	cmp.w	ip, #98	@ 0x62
 801af42:	d81d      	bhi.n	801af80 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x58c>
 801af44:	f8b6 c01e 	ldrh.w	ip, [r6, #30]
 801af48:	f1bc 0f00 	cmp.w	ip, #0
 801af4c:	d0ac      	beq.n	801aea8 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x4b4>
 801af4e:	6977      	ldr	r7, [r6, #20]
 801af50:	f04f 0900 	mov.w	r9, #0
 801af54:	9703      	str	r7, [sp, #12]
 801af56:	eb0c 0809 	add.w	r8, ip, r9
 801af5a:	270a      	movs	r7, #10
 801af5c:	ea4f 0868 	mov.w	r8, r8, asr #1
 801af60:	fb07 fa08 	mul.w	sl, r7, r8
 801af64:	9f03      	ldr	r7, [sp, #12]
 801af66:	4457      	add	r7, sl
 801af68:	9705      	str	r7, [sp, #20]
 801af6a:	9f03      	ldr	r7, [sp, #12]
 801af6c:	f837 a00a 	ldrh.w	sl, [r7, sl]
 801af70:	45a2      	cmp	sl, r4
 801af72:	d208      	bcs.n	801af86 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x592>
 801af74:	f108 0901 	add.w	r9, r8, #1
 801af78:	e000      	b.n	801af7c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x588>
 801af7a:	46c4      	mov	ip, r8
 801af7c:	45cc      	cmp	ip, r9
 801af7e:	dcea      	bgt.n	801af56 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x562>
 801af80:	f04f 0c00 	mov.w	ip, #0
 801af84:	e790      	b.n	801aea8 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x4b4>
 801af86:	d8f8      	bhi.n	801af7a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x586>
 801af88:	9c05      	ldr	r4, [sp, #20]
 801af8a:	f104 0c02 	add.w	ip, r4, #2
 801af8e:	e78b      	b.n	801aea8 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x4b4>
 801af90:	2e00      	cmp	r6, #0
 801af92:	d05d      	beq.n	801b050 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x65c>
 801af94:	f46f 6ac4 	mvn.w	sl, #1568	@ 0x620
 801af98:	eb0e 040a 	add.w	r4, lr, sl
 801af9c:	2c19      	cmp	r4, #25
 801af9e:	d829      	bhi.n	801aff4 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x600>
 801afa0:	f10e 5400 	add.w	r4, lr, #536870912	@ 0x20000000
 801afa4:	f46f 69c4 	mvn.w	r9, #1568	@ 0x620
 801afa8:	68f7      	ldr	r7, [r6, #12]
 801afaa:	444c      	add	r4, r9
 801afac:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
 801afb0:	f1bc 0f00 	cmp.w	ip, #0
 801afb4:	d00f      	beq.n	801afd6 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x5e2>
 801afb6:	f8bc c006 	ldrh.w	ip, [ip, #6]
 801afba:	f1bc 0f00 	cmp.w	ip, #0
 801afbe:	d00a      	beq.n	801afd6 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x5e2>
 801afc0:	b14c      	cbz	r4, 801afd6 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x5e2>
 801afc2:	f8b4 c002 	ldrh.w	ip, [r4, #2]
 801afc6:	f1bc 0f00 	cmp.w	ip, #0
 801afca:	f040 8109 	bne.w	801b1e0 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x7ec>
 801afce:	88e4      	ldrh	r4, [r4, #6]
 801afd0:	2c00      	cmp	r4, #0
 801afd2:	f040 8105 	bne.w	801b1e0 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x7ec>
 801afd6:	9c00      	ldr	r4, [sp, #0]
 801afd8:	2c02      	cmp	r4, #2
 801afda:	d13f      	bne.n	801b05c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x668>
 801afdc:	880c      	ldrh	r4, [r1, #0]
 801afde:	2c00      	cmp	r4, #0
 801afe0:	f000 80fe 	beq.w	801b1e0 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x7ec>
 801afe4:	f240 6444 	movw	r4, #1604	@ 0x644
 801afe8:	42a3      	cmp	r3, r4
 801afea:	f040 80f9 	bne.w	801b1e0 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x7ec>
 801afee:	2401      	movs	r4, #1
 801aff0:	9401      	str	r4, [sp, #4]
 801aff2:	e0dc      	b.n	801b1ae <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x7ba>
 801aff4:	f46f 68c8 	mvn.w	r8, #1600	@ 0x640
 801aff8:	eb0e 0408 	add.w	r4, lr, r8
 801affc:	2c09      	cmp	r4, #9
 801affe:	d806      	bhi.n	801b00e <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x61a>
 801b000:	f46f 67c8 	mvn.w	r7, #1600	@ 0x640
 801b004:	f10e 5400 	add.w	r4, lr, #536870912	@ 0x20000000
 801b008:	443c      	add	r4, r7
 801b00a:	6937      	ldr	r7, [r6, #16]
 801b00c:	e7ce      	b.n	801afac <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x5b8>
 801b00e:	f46f 64ce 	mvn.w	r4, #1648	@ 0x670
 801b012:	4474      	add	r4, lr
 801b014:	2c62      	cmp	r4, #98	@ 0x62
 801b016:	d81b      	bhi.n	801b050 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x65c>
 801b018:	8bf4      	ldrh	r4, [r6, #30]
 801b01a:	2c00      	cmp	r4, #0
 801b01c:	d0c8      	beq.n	801afb0 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x5bc>
 801b01e:	6977      	ldr	r7, [r6, #20]
 801b020:	f04f 0900 	mov.w	r9, #0
 801b024:	9703      	str	r7, [sp, #12]
 801b026:	eb04 0809 	add.w	r8, r4, r9
 801b02a:	270a      	movs	r7, #10
 801b02c:	ea4f 0868 	mov.w	r8, r8, asr #1
 801b030:	fb07 fa08 	mul.w	sl, r7, r8
 801b034:	9f03      	ldr	r7, [sp, #12]
 801b036:	4457      	add	r7, sl
 801b038:	9705      	str	r7, [sp, #20]
 801b03a:	9f03      	ldr	r7, [sp, #12]
 801b03c:	f837 a00a 	ldrh.w	sl, [r7, sl]
 801b040:	45f2      	cmp	sl, lr
 801b042:	d207      	bcs.n	801b054 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x660>
 801b044:	f108 0901 	add.w	r9, r8, #1
 801b048:	e000      	b.n	801b04c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x658>
 801b04a:	4644      	mov	r4, r8
 801b04c:	45a1      	cmp	r9, r4
 801b04e:	dbea      	blt.n	801b026 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x632>
 801b050:	2400      	movs	r4, #0
 801b052:	e7ad      	b.n	801afb0 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x5bc>
 801b054:	d8f9      	bhi.n	801b04a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x656>
 801b056:	9c05      	ldr	r4, [sp, #20]
 801b058:	3402      	adds	r4, #2
 801b05a:	e7a9      	b.n	801afb0 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x5bc>
 801b05c:	9c00      	ldr	r4, [sp, #0]
 801b05e:	2c03      	cmp	r4, #3
 801b060:	f040 80be 	bne.w	801b1e0 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x7ec>
 801b064:	884c      	ldrh	r4, [r1, #2]
 801b066:	2c00      	cmp	r4, #0
 801b068:	f000 80ba 	beq.w	801b1e0 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x7ec>
 801b06c:	f240 6444 	movw	r4, #1604	@ 0x644
 801b070:	42a3      	cmp	r3, r4
 801b072:	f040 80b5 	bne.w	801b1e0 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x7ec>
 801b076:	2401      	movs	r4, #1
 801b078:	9401      	str	r4, [sp, #4]
 801b07a:	884c      	ldrh	r4, [r1, #2]
 801b07c:	2c00      	cmp	r4, #0
 801b07e:	f000 8096 	beq.w	801b1ae <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x7ba>
 801b082:	2401      	movs	r4, #1
 801b084:	9400      	str	r4, [sp, #0]
 801b086:	e0de      	b.n	801b246 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x852>
 801b088:	f46f 68c8 	mvn.w	r8, #1600	@ 0x640
 801b08c:	eb03 0408 	add.w	r4, r3, r8
 801b090:	b2a4      	uxth	r4, r4
 801b092:	2c09      	cmp	r4, #9
 801b094:	d806      	bhi.n	801b0a4 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x6b0>
 801b096:	f103 5400 	add.w	r4, r3, #536870912	@ 0x20000000
 801b09a:	f46f 67c8 	mvn.w	r7, #1600	@ 0x640
 801b09e:	6936      	ldr	r6, [r6, #16]
 801b0a0:	443c      	add	r4, r7
 801b0a2:	e0ac      	b.n	801b1fe <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x80a>
 801b0a4:	f46f 6ace 	mvn.w	sl, #1648	@ 0x670
 801b0a8:	eb03 040a 	add.w	r4, r3, sl
 801b0ac:	b2a4      	uxth	r4, r4
 801b0ae:	2c62      	cmp	r4, #98	@ 0x62
 801b0b0:	d819      	bhi.n	801b0e6 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x6f2>
 801b0b2:	8bf4      	ldrh	r4, [r6, #30]
 801b0b4:	b1bc      	cbz	r4, 801b0e6 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x6f2>
 801b0b6:	f8d6 e014 	ldr.w	lr, [r6, #20]
 801b0ba:	f04f 0c00 	mov.w	ip, #0
 801b0be:	4626      	mov	r6, r4
 801b0c0:	f04f 0a0a 	mov.w	sl, #10
 801b0c4:	eb06 040c 	add.w	r4, r6, ip
 801b0c8:	1064      	asrs	r4, r4, #1
 801b0ca:	fb0a f804 	mul.w	r8, sl, r4
 801b0ce:	eb0e 0908 	add.w	r9, lr, r8
 801b0d2:	f83e 8008 	ldrh.w	r8, [lr, r8]
 801b0d6:	4598      	cmp	r8, r3
 801b0d8:	d207      	bcs.n	801b0ea <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x6f6>
 801b0da:	f104 0c01 	add.w	ip, r4, #1
 801b0de:	e000      	b.n	801b0e2 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x6ee>
 801b0e0:	4626      	mov	r6, r4
 801b0e2:	45b4      	cmp	ip, r6
 801b0e4:	dbee      	blt.n	801b0c4 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x6d0>
 801b0e6:	2600      	movs	r6, #0
 801b0e8:	e08b      	b.n	801b202 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x80e>
 801b0ea:	d8f9      	bhi.n	801b0e0 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x6ec>
 801b0ec:	f109 0602 	add.w	r6, r9, #2
 801b0f0:	e087      	b.n	801b202 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x80e>
 801b0f2:	bf00      	nop
 801b0f4:	00f67e7f 	.word	0x00f67e7f
 801b0f8:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 801b0fa:	b18c      	cbz	r4, 801b120 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x72c>
 801b0fc:	f46f 69c4 	mvn.w	r9, #1568	@ 0x620
 801b100:	eb03 0609 	add.w	r6, r3, r9
 801b104:	b2b6      	uxth	r6, r6
 801b106:	2e19      	cmp	r6, #25
 801b108:	d812      	bhi.n	801b130 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x73c>
 801b10a:	f103 5100 	add.w	r1, r3, #536870912	@ 0x20000000
 801b10e:	f46f 68c4 	mvn.w	r8, #1568	@ 0x620
 801b112:	68e4      	ldr	r4, [r4, #12]
 801b114:	4441      	add	r1, r8
 801b116:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 801b11a:	2900      	cmp	r1, #0
 801b11c:	f040 808c 	bne.w	801b238 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x844>
 801b120:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 801b124:	f47f adb0 	bne.w	801ac88 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x294>
 801b128:	2200      	movs	r2, #0
 801b12a:	f880 2060 	strb.w	r2, [r0, #96]	@ 0x60
 801b12e:	e5ab      	b.n	801ac88 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x294>
 801b130:	f46f 6cc8 	mvn.w	ip, #1600	@ 0x640
 801b134:	eb03 060c 	add.w	r6, r3, ip
 801b138:	b2b6      	uxth	r6, r6
 801b13a:	2e09      	cmp	r6, #9
 801b13c:	d806      	bhi.n	801b14c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x758>
 801b13e:	f103 5100 	add.w	r1, r3, #536870912	@ 0x20000000
 801b142:	f46f 67c8 	mvn.w	r7, #1600	@ 0x640
 801b146:	6924      	ldr	r4, [r4, #16]
 801b148:	4439      	add	r1, r7
 801b14a:	e7e4      	b.n	801b116 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x722>
 801b14c:	f46f 66ce 	mvn.w	r6, #1648	@ 0x670
 801b150:	199e      	adds	r6, r3, r6
 801b152:	b2b6      	uxth	r6, r6
 801b154:	2e62      	cmp	r6, #98	@ 0x62
 801b156:	d8e3      	bhi.n	801b120 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x72c>
 801b158:	8be6      	ldrh	r6, [r4, #30]
 801b15a:	2e00      	cmp	r6, #0
 801b15c:	d0e0      	beq.n	801b120 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x72c>
 801b15e:	f8d4 e014 	ldr.w	lr, [r4, #20]
 801b162:	f04f 090a 	mov.w	r9, #10
 801b166:	4634      	mov	r4, r6
 801b168:	1866      	adds	r6, r4, r1
 801b16a:	1076      	asrs	r6, r6, #1
 801b16c:	fb09 fc06 	mul.w	ip, r9, r6
 801b170:	eb0e 080c 	add.w	r8, lr, ip
 801b174:	f83e c00c 	ldrh.w	ip, [lr, ip]
 801b178:	459c      	cmp	ip, r3
 801b17a:	d205      	bcs.n	801b188 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x794>
 801b17c:	1c71      	adds	r1, r6, #1
 801b17e:	e000      	b.n	801b182 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x78e>
 801b180:	4634      	mov	r4, r6
 801b182:	428c      	cmp	r4, r1
 801b184:	dcf0      	bgt.n	801b168 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x774>
 801b186:	e7cb      	b.n	801b120 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x72c>
 801b188:	d8fa      	bhi.n	801b180 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x78c>
 801b18a:	f108 0102 	add.w	r1, r8, #2
 801b18e:	e053      	b.n	801b238 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x844>
 801b190:	9c00      	ldr	r4, [sp, #0]
 801b192:	2c03      	cmp	r4, #3
 801b194:	d104      	bne.n	801b1a0 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x7ac>
 801b196:	88cc      	ldrh	r4, [r1, #6]
 801b198:	2c00      	cmp	r4, #0
 801b19a:	f43f af6c 	beq.w	801b076 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x682>
 801b19e:	e052      	b.n	801b246 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x852>
 801b1a0:	9c00      	ldr	r4, [sp, #0]
 801b1a2:	2c01      	cmp	r4, #1
 801b1a4:	f43f af69 	beq.w	801b07a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x686>
 801b1a8:	9c00      	ldr	r4, [sp, #0]
 801b1aa:	2c00      	cmp	r4, #0
 801b1ac:	d14b      	bne.n	801b246 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x852>
 801b1ae:	880c      	ldrh	r4, [r1, #0]
 801b1b0:	b924      	cbnz	r4, 801b1bc <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x7c8>
 801b1b2:	884f      	ldrh	r7, [r1, #2]
 801b1b4:	1c3c      	adds	r4, r7, #0
 801b1b6:	bf18      	it	ne
 801b1b8:	2401      	movne	r4, #1
 801b1ba:	e763      	b.n	801b084 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x690>
 801b1bc:	2400      	movs	r4, #0
 801b1be:	e761      	b.n	801b084 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x690>
 801b1c0:	233e      	movs	r3, #62	@ 0x3e
 801b1c2:	e561      	b.n	801ac88 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x294>
 801b1c4:	233c      	movs	r3, #60	@ 0x3c
 801b1c6:	e55f      	b.n	801ac88 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x294>
 801b1c8:	2329      	movs	r3, #41	@ 0x29
 801b1ca:	e55d      	b.n	801ac88 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x294>
 801b1cc:	2328      	movs	r3, #40	@ 0x28
 801b1ce:	e55b      	b.n	801ac88 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x294>
 801b1d0:	235d      	movs	r3, #93	@ 0x5d
 801b1d2:	e559      	b.n	801ac88 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x294>
 801b1d4:	235b      	movs	r3, #91	@ 0x5b
 801b1d6:	e557      	b.n	801ac88 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x294>
 801b1d8:	237d      	movs	r3, #125	@ 0x7d
 801b1da:	e555      	b.n	801ac88 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x294>
 801b1dc:	237b      	movs	r3, #123	@ 0x7b
 801b1de:	e553      	b.n	801ac88 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x294>
 801b1e0:	b17e      	cbz	r6, 801b202 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x80e>
 801b1e2:	f46f 6ac4 	mvn.w	sl, #1568	@ 0x620
 801b1e6:	eb03 040a 	add.w	r4, r3, sl
 801b1ea:	b2a4      	uxth	r4, r4
 801b1ec:	2c19      	cmp	r4, #25
 801b1ee:	f63f af4b 	bhi.w	801b088 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x694>
 801b1f2:	f103 5400 	add.w	r4, r3, #536870912	@ 0x20000000
 801b1f6:	f46f 69c4 	mvn.w	r9, #1568	@ 0x620
 801b1fa:	68f6      	ldr	r6, [r6, #12]
 801b1fc:	444c      	add	r4, r9
 801b1fe:	eb06 06c4 	add.w	r6, r6, r4, lsl #3
 801b202:	9c02      	ldr	r4, [sp, #8]
 801b204:	9f04      	ldr	r7, [sp, #16]
 801b206:	8c64      	ldrh	r4, [r4, #34]	@ 0x22
 801b208:	f2a4 6422 	subw	r4, r4, #1570	@ 0x622
 801b20c:	b2a4      	uxth	r4, r4
 801b20e:	2cb1      	cmp	r4, #177	@ 0xb1
 801b210:	bf8c      	ite	hi
 801b212:	f04f 0c00 	movhi.w	ip, #0
 801b216:	f04f 0c02 	movls.w	ip, #2
 801b21a:	44bc      	add	ip, r7
 801b21c:	b166      	cbz	r6, 801b238 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x844>
 801b21e:	f836 e01c 	ldrh.w	lr, [r6, ip, lsl #1]
 801b222:	f1be 0f00 	cmp.w	lr, #0
 801b226:	d007      	beq.n	801b238 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x844>
 801b228:	2cb1      	cmp	r4, #177	@ 0xb1
 801b22a:	4631      	mov	r1, r6
 801b22c:	bf94      	ite	ls
 801b22e:	2200      	movls	r2, #0
 801b230:	2201      	movhi	r2, #1
 801b232:	e9cd c200 	strd	ip, r2, [sp]
 801b236:	2200      	movs	r2, #0
 801b238:	9c00      	ldr	r4, [sp, #0]
 801b23a:	2c02      	cmp	r4, #2
 801b23c:	d1a8      	bne.n	801b190 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x79c>
 801b23e:	888c      	ldrh	r4, [r1, #4]
 801b240:	2c00      	cmp	r4, #0
 801b242:	f43f aed4 	beq.w	801afee <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x5fa>
 801b246:	9c00      	ldr	r4, [sp, #0]
 801b248:	9e00      	ldr	r6, [sp, #0]
 801b24a:	eb01 0444 	add.w	r4, r1, r4, lsl #1
 801b24e:	f831 1016 	ldrh.w	r1, [r1, r6, lsl #1]
 801b252:	2900      	cmp	r1, #0
 801b254:	f43f ad18 	beq.w	801ac88 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x294>
 801b258:	9b01      	ldr	r3, [sp, #4]
 801b25a:	b292      	uxth	r2, r2
 801b25c:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 801b260:	8f03      	ldrh	r3, [r0, #56]	@ 0x38
 801b262:	1a9b      	subs	r3, r3, r2
 801b264:	445a      	add	r2, fp
 801b266:	b292      	uxth	r2, r2
 801b268:	8703      	strh	r3, [r0, #56]	@ 0x38
 801b26a:	2a09      	cmp	r2, #9
 801b26c:	bf88      	it	hi
 801b26e:	3a0a      	subhi	r2, #10
 801b270:	86c2      	strh	r2, [r0, #54]	@ 0x36
 801b272:	b145      	cbz	r5, 801b286 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x892>
 801b274:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801b276:	3301      	adds	r3, #1
 801b278:	b29b      	uxth	r3, r3
 801b27a:	2b0a      	cmp	r3, #10
 801b27c:	bf28      	it	cs
 801b27e:	2300      	movcs	r3, #0
 801b280:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801b284:	8445      	strh	r5, [r0, #34]	@ 0x22
 801b286:	8823      	ldrh	r3, [r4, #0]
 801b288:	e4fe      	b.n	801ac88 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x294>
 801b28a:	2b20      	cmp	r3, #32
 801b28c:	f47f ad24 	bne.w	801acd8 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x2e4>
 801b290:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 801b294:	00d2      	lsls	r2, r2, #3
 801b296:	f5a2 5240 	sub.w	r2, r2, #12288	@ 0x3000
 801b29a:	3a30      	subs	r2, #48	@ 0x30
 801b29c:	b292      	uxth	r2, r2
 801b29e:	f240 6152 	movw	r1, #1618	@ 0x652
 801b2a2:	e52f      	b.n	801ad04 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x310>

0801b2a4 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801b2a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b2a6:	4605      	mov	r5, r0
 801b2a8:	4608      	mov	r0, r1
 801b2aa:	b1f1      	cbz	r1, 801b2ea <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801b2ac:	f105 044c 	add.w	r4, r5, #76	@ 0x4c
 801b2b0:	460b      	mov	r3, r1
 801b2b2:	f101 0708 	add.w	r7, r1, #8
 801b2b6:	4622      	mov	r2, r4
 801b2b8:	6818      	ldr	r0, [r3, #0]
 801b2ba:	3308      	adds	r3, #8
 801b2bc:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801b2c0:	4626      	mov	r6, r4
 801b2c2:	42bb      	cmp	r3, r7
 801b2c4:	c603      	stmia	r6!, {r0, r1}
 801b2c6:	4634      	mov	r4, r6
 801b2c8:	d1f6      	bne.n	801b2b8 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801b2ca:	6818      	ldr	r0, [r3, #0]
 801b2cc:	6030      	str	r0, [r6, #0]
 801b2ce:	4610      	mov	r0, r2
 801b2d0:	889b      	ldrh	r3, [r3, #4]
 801b2d2:	80b3      	strh	r3, [r6, #4]
 801b2d4:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 801b2d8:	015b      	lsls	r3, r3, #5
 801b2da:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 801b2de:	f895 3052 	ldrb.w	r3, [r5, #82]	@ 0x52
 801b2e2:	430b      	orrs	r3, r1
 801b2e4:	425b      	negs	r3, r3
 801b2e6:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 801b2ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801b2ec <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801b2ec:	b538      	push	{r3, r4, r5, lr}
 801b2ee:	460c      	mov	r4, r1
 801b2f0:	6811      	ldr	r1, [r2, #0]
 801b2f2:	4610      	mov	r0, r2
 801b2f4:	68cd      	ldr	r5, [r1, #12]
 801b2f6:	4619      	mov	r1, r3
 801b2f8:	47a8      	blx	r5
 801b2fa:	2800      	cmp	r0, #0
 801b2fc:	bf08      	it	eq
 801b2fe:	4620      	moveq	r0, r4
 801b300:	bd38      	pop	{r3, r4, r5, pc}
	...

0801b304 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801b304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b306:	4604      	mov	r4, r0
 801b308:	4615      	mov	r5, r2
 801b30a:	4608      	mov	r0, r1
 801b30c:	b93a      	cbnz	r2, 801b31e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801b30e:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
 801b312:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
 801b316:	f8a4 205e 	strh.w	r2, [r4, #94]	@ 0x5e
 801b31a:	4628      	mov	r0, r5
 801b31c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b31e:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801b322:	f46f 6763 	mvn.w	r7, #3632	@ 0xe30
 801b326:	8893      	ldrh	r3, [r2, #4]
 801b328:	ea4f 160c 	mov.w	r6, ip, lsl #4
 801b32c:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 801b330:	79ee      	ldrb	r6, [r5, #7]
 801b332:	4316      	orrs	r6, r2
 801b334:	19da      	adds	r2, r3, r7
 801b336:	b291      	uxth	r1, r2
 801b338:	b2b7      	uxth	r7, r6
 801b33a:	291d      	cmp	r1, #29
 801b33c:	d87b      	bhi.n	801b436 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 801b33e:	2201      	movs	r2, #1
 801b340:	10f6      	asrs	r6, r6, #3
 801b342:	408a      	lsls	r2, r1
 801b344:	4974      	ldr	r1, [pc, #464]	@ (801b518 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 801b346:	420a      	tst	r2, r1
 801b348:	d12e      	bne.n	801b3a8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 801b34a:	f412 7f60 	tst.w	r2, #896	@ 0x380
 801b34e:	d072      	beq.n	801b436 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 801b350:	f104 024c 	add.w	r2, r4, #76	@ 0x4c
 801b354:	462b      	mov	r3, r5
 801b356:	f105 0e08 	add.w	lr, r5, #8
 801b35a:	4615      	mov	r5, r2
 801b35c:	6818      	ldr	r0, [r3, #0]
 801b35e:	3308      	adds	r3, #8
 801b360:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801b364:	4694      	mov	ip, r2
 801b366:	4573      	cmp	r3, lr
 801b368:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801b36c:	4662      	mov	r2, ip
 801b36e:	d1f5      	bne.n	801b35c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 801b370:	6818      	ldr	r0, [r3, #0]
 801b372:	f8cc 0000 	str.w	r0, [ip]
 801b376:	889b      	ldrh	r3, [r3, #4]
 801b378:	f8ac 3004 	strh.w	r3, [ip, #4]
 801b37c:	b2b3      	uxth	r3, r6
 801b37e:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 801b382:	f894 0059 	ldrb.w	r0, [r4, #89]	@ 0x59
 801b386:	1aca      	subs	r2, r1, r3
 801b388:	1bcf      	subs	r7, r1, r7
 801b38a:	f020 0060 	bic.w	r0, r0, #96	@ 0x60
 801b38e:	b292      	uxth	r2, r2
 801b390:	1afb      	subs	r3, r7, r3
 801b392:	f884 2054 	strb.w	r2, [r4, #84]	@ 0x54
 801b396:	10d2      	asrs	r2, r2, #3
 801b398:	f002 0260 	and.w	r2, r2, #96	@ 0x60
 801b39c:	4302      	orrs	r2, r0
 801b39e:	f884 2059 	strb.w	r2, [r4, #89]	@ 0x59
 801b3a2:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 801b3a6:	e7b8      	b.n	801b31a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801b3a8:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 801b3aa:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801b3ae:	8c59      	ldrh	r1, [r3, #34]	@ 0x22
 801b3b0:	f640 6333 	movw	r3, #3635	@ 0xe33
 801b3b4:	4299      	cmp	r1, r3
 801b3b6:	d110      	bne.n	801b3da <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
 801b3b8:	6803      	ldr	r3, [r0, #0]
 801b3ba:	68db      	ldr	r3, [r3, #12]
 801b3bc:	4798      	blx	r3
 801b3be:	7b41      	ldrb	r1, [r0, #13]
 801b3c0:	00cb      	lsls	r3, r1, #3
 801b3c2:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801b3c6:	7a03      	ldrb	r3, [r0, #8]
 801b3c8:	0648      	lsls	r0, r1, #25
 801b3ca:	ea43 0302 	orr.w	r3, r3, r2
 801b3ce:	bf44      	itt	mi
 801b3d0:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801b3d4:	b21b      	sxthmi	r3, r3
 801b3d6:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801b3da:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 801b3de:	462a      	mov	r2, r5
 801b3e0:	f105 0c08 	add.w	ip, r5, #8
 801b3e4:	443b      	add	r3, r7
 801b3e6:	4433      	add	r3, r6
 801b3e8:	f104 064c 	add.w	r6, r4, #76	@ 0x4c
 801b3ec:	b29b      	uxth	r3, r3
 801b3ee:	4635      	mov	r5, r6
 801b3f0:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801b3f4:	6810      	ldr	r0, [r2, #0]
 801b3f6:	3208      	adds	r2, #8
 801b3f8:	f852 1c04 	ldr.w	r1, [r2, #-4]
 801b3fc:	4637      	mov	r7, r6
 801b3fe:	4562      	cmp	r2, ip
 801b400:	c703      	stmia	r7!, {r0, r1}
 801b402:	463e      	mov	r6, r7
 801b404:	d1f6      	bne.n	801b3f4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
 801b406:	6810      	ldr	r0, [r2, #0]
 801b408:	6038      	str	r0, [r7, #0]
 801b40a:	8892      	ldrh	r2, [r2, #4]
 801b40c:	80ba      	strh	r2, [r7, #4]
 801b40e:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 801b412:	10db      	asrs	r3, r3, #3
 801b414:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 801b418:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801b41c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 801b420:	4313      	orrs	r3, r2
 801b422:	f894 205e 	ldrb.w	r2, [r4, #94]	@ 0x5e
 801b426:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 801b42a:	f894 3055 	ldrb.w	r3, [r4, #85]	@ 0x55
 801b42e:	1a9b      	subs	r3, r3, r2
 801b430:	f884 3055 	strb.w	r3, [r4, #85]	@ 0x55
 801b434:	e771      	b.n	801b31a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801b436:	f023 0204 	bic.w	r2, r3, #4
 801b43a:	f640 611b 	movw	r1, #3611	@ 0xe1b
 801b43e:	428a      	cmp	r2, r1
 801b440:	d003      	beq.n	801b44a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x146>
 801b442:	f640 621d 	movw	r2, #3613	@ 0xe1d
 801b446:	4293      	cmp	r3, r2
 801b448:	d120      	bne.n	801b48c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x188>
 801b44a:	3b01      	subs	r3, #1
 801b44c:	4602      	mov	r2, r0
 801b44e:	4629      	mov	r1, r5
 801b450:	4620      	mov	r0, r4
 801b452:	b29b      	uxth	r3, r3
 801b454:	f7ff ff4a 	bl	801b2ec <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801b458:	7b41      	ldrb	r1, [r0, #13]
 801b45a:	00cb      	lsls	r3, r1, #3
 801b45c:	0649      	lsls	r1, r1, #25
 801b45e:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801b462:	7a03      	ldrb	r3, [r0, #8]
 801b464:	ea43 0302 	orr.w	r3, r3, r2
 801b468:	bf44      	itt	mi
 801b46a:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801b46e:	b21b      	sxthmi	r3, r3
 801b470:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801b474:	7b6b      	ldrb	r3, [r5, #13]
 801b476:	7aaa      	ldrb	r2, [r5, #10]
 801b478:	005b      	lsls	r3, r3, #1
 801b47a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801b47e:	4313      	orrs	r3, r2
 801b480:	115a      	asrs	r2, r3, #5
 801b482:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801b486:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 801b48a:	e035      	b.n	801b4f8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 801b48c:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 801b490:	f01c 0f40 	tst.w	ip, #64	@ 0x40
 801b494:	f402 7180 	and.w	r1, r2, #256	@ 0x100
 801b498:	7a2a      	ldrb	r2, [r5, #8]
 801b49a:	ea42 0201 	orr.w	r2, r2, r1
 801b49e:	f640 6109 	movw	r1, #3593	@ 0xe09
 801b4a2:	bf1c      	itt	ne
 801b4a4:	f5a2 7200 	subne.w	r2, r2, #512	@ 0x200
 801b4a8:	b212      	sxthne	r2, r2
 801b4aa:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
 801b4ae:	f023 0210 	bic.w	r2, r3, #16
 801b4b2:	428a      	cmp	r2, r1
 801b4b4:	d003      	beq.n	801b4be <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 801b4b6:	f640 6213 	movw	r2, #3603	@ 0xe13
 801b4ba:	4293      	cmp	r3, r2
 801b4bc:	d129      	bne.n	801b512 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 801b4be:	7b6e      	ldrb	r6, [r5, #13]
 801b4c0:	4629      	mov	r1, r5
 801b4c2:	0076      	lsls	r6, r6, #1
 801b4c4:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 801b4c8:	7aae      	ldrb	r6, [r5, #10]
 801b4ca:	4316      	orrs	r6, r2
 801b4cc:	f640 6213 	movw	r2, #3603	@ 0xe13
 801b4d0:	4293      	cmp	r3, r2
 801b4d2:	4602      	mov	r2, r0
 801b4d4:	4620      	mov	r0, r4
 801b4d6:	bf16      	itet	ne
 801b4d8:	f103 33ff 	addne.w	r3, r3, #4294967295
 801b4dc:	f640 630c 	movweq	r3, #3596	@ 0xe0c
 801b4e0:	b29b      	uxthne	r3, r3
 801b4e2:	f7ff ff03 	bl	801b2ec <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801b4e6:	7b43      	ldrb	r3, [r0, #13]
 801b4e8:	7a82      	ldrb	r2, [r0, #10]
 801b4ea:	005b      	lsls	r3, r3, #1
 801b4ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801b4f0:	4313      	orrs	r3, r2
 801b4f2:	1af6      	subs	r6, r6, r3
 801b4f4:	f8a4 605e 	strh.w	r6, [r4, #94]	@ 0x5e
 801b4f8:	7b69      	ldrb	r1, [r5, #13]
 801b4fa:	00cb      	lsls	r3, r1, #3
 801b4fc:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801b500:	7a2b      	ldrb	r3, [r5, #8]
 801b502:	4313      	orrs	r3, r2
 801b504:	064a      	lsls	r2, r1, #25
 801b506:	bf44      	itt	mi
 801b508:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801b50c:	b21b      	sxthmi	r3, r3
 801b50e:	1bdb      	subs	r3, r3, r7
 801b510:	e747      	b.n	801b3a2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 801b512:	2300      	movs	r3, #0
 801b514:	e7b7      	b.n	801b486 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x182>
 801b516:	bf00      	nop
 801b518:	3fc00079 	.word	0x3fc00079

0801b51c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801b51c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b520:	4604      	mov	r4, r0
 801b522:	b942      	cbnz	r2, 801b536 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801b524:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801b528:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
 801b52c:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
 801b530:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 801b534:	e047      	b.n	801b5c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801b536:	7b51      	ldrb	r1, [r2, #13]
 801b538:	8893      	ldrh	r3, [r2, #4]
 801b53a:	010d      	lsls	r5, r1, #4
 801b53c:	f405 7080 	and.w	r0, r5, #256	@ 0x100
 801b540:	79d5      	ldrb	r5, [r2, #7]
 801b542:	4305      	orrs	r5, r0
 801b544:	2d04      	cmp	r5, #4
 801b546:	bfcc      	ite	gt
 801b548:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 801b54c:	f04f 0e01 	movle.w	lr, #1
 801b550:	f5b3 6fdd 	cmp.w	r3, #1768	@ 0x6e8
 801b554:	f200 80ab 	bhi.w	801b6ae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 801b558:	f240 60e7 	movw	r0, #1767	@ 0x6e7
 801b55c:	4283      	cmp	r3, r0
 801b55e:	d216      	bcs.n	801b58e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801b560:	f240 605b 	movw	r0, #1627	@ 0x65b
 801b564:	4283      	cmp	r3, r0
 801b566:	d859      	bhi.n	801b61c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 801b568:	f240 6057 	movw	r0, #1623	@ 0x657
 801b56c:	4283      	cmp	r3, r0
 801b56e:	d20e      	bcs.n	801b58e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801b570:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 801b574:	d24a      	bcs.n	801b60c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 801b576:	f240 604e 	movw	r0, #1614	@ 0x64e
 801b57a:	4283      	cmp	r3, r0
 801b57c:	d207      	bcs.n	801b58e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801b57e:	f240 601a 	movw	r0, #1562	@ 0x61a
 801b582:	4283      	cmp	r3, r0
 801b584:	d02a      	beq.n	801b5dc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801b586:	d821      	bhi.n	801b5cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 801b588:	f5b3 6fc2 	cmp.w	r3, #1552	@ 0x610
 801b58c:	d35b      	bcc.n	801b646 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801b58e:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	@ 0x5a
 801b592:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801b596:	f040 80d0 	bne.w	801b73a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801b59a:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	@ 0x5c
 801b59e:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801b5a2:	f040 80ca 	bne.w	801b73a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801b5a6:	00cb      	lsls	r3, r1, #3
 801b5a8:	0649      	lsls	r1, r1, #25
 801b5aa:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 801b5ae:	7a13      	ldrb	r3, [r2, #8]
 801b5b0:	ea43 0300 	orr.w	r3, r3, r0
 801b5b4:	bf44      	itt	mi
 801b5b6:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801b5ba:	b21b      	sxthmi	r3, r3
 801b5bc:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801b5c0:	1b5d      	subs	r5, r3, r5
 801b5c2:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801b5c6:	4610      	mov	r0, r2
 801b5c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b5cc:	f240 604b 	movw	r0, #1611	@ 0x64b
 801b5d0:	4283      	cmp	r3, r0
 801b5d2:	d338      	bcc.n	801b646 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801b5d4:	f240 604c 	movw	r0, #1612	@ 0x64c
 801b5d8:	4283      	cmp	r3, r0
 801b5da:	d9d8      	bls.n	801b58e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801b5dc:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	@ 0x5a
 801b5e0:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	@ 0x5c
 801b5e4:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801b5e8:	f040 80f3 	bne.w	801b7d2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 801b5ec:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801b5f0:	f040 80ef 	bne.w	801b7d2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 801b5f4:	00cb      	lsls	r3, r1, #3
 801b5f6:	064e      	lsls	r6, r1, #25
 801b5f8:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 801b5fc:	7a13      	ldrb	r3, [r2, #8]
 801b5fe:	ea43 0300 	orr.w	r3, r3, r0
 801b602:	bf44      	itt	mi
 801b604:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801b608:	b21b      	sxthmi	r3, r3
 801b60a:	e7d9      	b.n	801b5c0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 801b60c:	f240 6054 	movw	r0, #1620	@ 0x654
 801b610:	4283      	cmp	r3, r0
 801b612:	d8e3      	bhi.n	801b5dc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801b614:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 801b618:	d9e0      	bls.n	801b5dc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801b61a:	e7b8      	b.n	801b58e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801b61c:	f240 6074 	movw	r0, #1652	@ 0x674
 801b620:	4283      	cmp	r3, r0
 801b622:	d0b4      	beq.n	801b58e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801b624:	d82d      	bhi.n	801b682 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 801b626:	f240 605e 	movw	r0, #1630	@ 0x65e
 801b62a:	4283      	cmp	r3, r0
 801b62c:	d804      	bhi.n	801b638 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 801b62e:	f240 605d 	movw	r0, #1629	@ 0x65d
 801b632:	4283      	cmp	r3, r0
 801b634:	d3d2      	bcc.n	801b5dc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801b636:	e7aa      	b.n	801b58e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801b638:	f240 605f 	movw	r0, #1631	@ 0x65f
 801b63c:	4283      	cmp	r3, r0
 801b63e:	d0cd      	beq.n	801b5dc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801b640:	f5b3 6fce 	cmp.w	r3, #1648	@ 0x670
 801b644:	d0a3      	beq.n	801b58e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801b646:	00cb      	lsls	r3, r1, #3
 801b648:	0649      	lsls	r1, r1, #25
 801b64a:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 801b64e:	7a13      	ldrb	r3, [r2, #8]
 801b650:	ea43 0300 	orr.w	r3, r3, r0
 801b654:	bf44      	itt	mi
 801b656:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801b65a:	b21b      	sxthmi	r3, r3
 801b65c:	1b5d      	subs	r5, r3, r5
 801b65e:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801b662:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801b666:	7b53      	ldrb	r3, [r2, #13]
 801b668:	015b      	lsls	r3, r3, #5
 801b66a:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 801b66e:	7993      	ldrb	r3, [r2, #6]
 801b670:	430b      	orrs	r3, r1
 801b672:	2105      	movs	r1, #5
 801b674:	005b      	lsls	r3, r3, #1
 801b676:	fb93 f3f1 	sdiv	r3, r3, r1
 801b67a:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801b67e:	440b      	add	r3, r1
 801b680:	e756      	b.n	801b530 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801b682:	f240 60e2 	movw	r0, #1762	@ 0x6e2
 801b686:	4283      	cmp	r3, r0
 801b688:	d809      	bhi.n	801b69e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 801b68a:	f240 60df 	movw	r0, #1759	@ 0x6df
 801b68e:	4283      	cmp	r3, r0
 801b690:	f4bf af7d 	bcs.w	801b58e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801b694:	f2a3 63d6 	subw	r3, r3, #1750	@ 0x6d6
 801b698:	2b05      	cmp	r3, #5
 801b69a:	d8d4      	bhi.n	801b646 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801b69c:	e777      	b.n	801b58e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801b69e:	f240 60e3 	movw	r0, #1763	@ 0x6e3
 801b6a2:	4283      	cmp	r3, r0
 801b6a4:	d09a      	beq.n	801b5dc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801b6a6:	f240 60e4 	movw	r0, #1764	@ 0x6e4
 801b6aa:	4283      	cmp	r3, r0
 801b6ac:	e7ca      	b.n	801b644 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801b6ae:	f5b3 6f0f 	cmp.w	r3, #2288	@ 0x8f0
 801b6b2:	d22b      	bcs.n	801b70c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 801b6b4:	f640 00ed 	movw	r0, #2285	@ 0x8ed
 801b6b8:	4283      	cmp	r3, r0
 801b6ba:	d28f      	bcs.n	801b5dc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801b6bc:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 801b6c0:	4283      	cmp	r3, r0
 801b6c2:	d816      	bhi.n	801b6f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 801b6c4:	f640 00e4 	movw	r0, #2276	@ 0x8e4
 801b6c8:	4283      	cmp	r3, r0
 801b6ca:	f4bf af60 	bcs.w	801b58e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801b6ce:	f240 60ec 	movw	r0, #1772	@ 0x6ec
 801b6d2:	4283      	cmp	r3, r0
 801b6d4:	d80a      	bhi.n	801b6ec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 801b6d6:	f240 60eb 	movw	r0, #1771	@ 0x6eb
 801b6da:	4283      	cmp	r3, r0
 801b6dc:	f4bf af57 	bcs.w	801b58e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801b6e0:	f240 60ea 	movw	r0, #1770	@ 0x6ea
 801b6e4:	4283      	cmp	r3, r0
 801b6e6:	f43f af79 	beq.w	801b5dc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801b6ea:	e7ac      	b.n	801b646 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801b6ec:	f240 60ed 	movw	r0, #1773	@ 0x6ed
 801b6f0:	e7f8      	b.n	801b6e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 801b6f2:	f640 00e8 	movw	r0, #2280	@ 0x8e8
 801b6f6:	4283      	cmp	r3, r0
 801b6f8:	d802      	bhi.n	801b700 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 801b6fa:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 801b6fe:	e798      	b.n	801b632 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 801b700:	f640 00e9 	movw	r0, #2281	@ 0x8e9
 801b704:	4283      	cmp	r3, r0
 801b706:	f47f af42 	bne.w	801b58e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801b70a:	e767      	b.n	801b5dc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801b70c:	f640 00f6 	movw	r0, #2294	@ 0x8f6
 801b710:	4283      	cmp	r3, r0
 801b712:	f43f af63 	beq.w	801b5dc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801b716:	d802      	bhi.n	801b71e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 801b718:	f640 00f2 	movw	r0, #2290	@ 0x8f2
 801b71c:	e7f2      	b.n	801b704 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 801b71e:	f640 00fa 	movw	r0, #2298	@ 0x8fa
 801b722:	4283      	cmp	r3, r0
 801b724:	d805      	bhi.n	801b732 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 801b726:	f640 00f9 	movw	r0, #2297	@ 0x8f9
 801b72a:	4283      	cmp	r3, r0
 801b72c:	f4ff af2f 	bcc.w	801b58e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801b730:	e754      	b.n	801b5dc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801b732:	f640 00fe 	movw	r0, #2302	@ 0x8fe
 801b736:	4283      	cmp	r3, r0
 801b738:	e7af      	b.n	801b69a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 801b73a:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 801b73e:	4617      	mov	r7, r2
 801b740:	f102 0808 	add.w	r8, r2, #8
 801b744:	4666      	mov	r6, ip
 801b746:	6838      	ldr	r0, [r7, #0]
 801b748:	3708      	adds	r7, #8
 801b74a:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801b74e:	46e6      	mov	lr, ip
 801b750:	4547      	cmp	r7, r8
 801b752:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801b756:	46f4      	mov	ip, lr
 801b758:	d1f5      	bne.n	801b746 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 801b75a:	6838      	ldr	r0, [r7, #0]
 801b75c:	f8ce 0000 	str.w	r0, [lr]
 801b760:	88b9      	ldrh	r1, [r7, #4]
 801b762:	f8ae 1004 	strh.w	r1, [lr, #4]
 801b766:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 801b76a:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801b76e:	d009      	beq.n	801b784 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 801b770:	7b51      	ldrb	r1, [r2, #13]
 801b772:	7992      	ldrb	r2, [r2, #6]
 801b774:	0149      	lsls	r1, r1, #5
 801b776:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 801b77a:	4311      	orrs	r1, r2
 801b77c:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801b780:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 801b784:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801b788:	b2ad      	uxth	r5, r5
 801b78a:	d00d      	beq.n	801b7a8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 801b78c:	442b      	add	r3, r5
 801b78e:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 801b792:	b29b      	uxth	r3, r3
 801b794:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 801b798:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 801b79c:	10db      	asrs	r3, r3, #3
 801b79e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801b7a2:	4313      	orrs	r3, r2
 801b7a4:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 801b7a8:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 801b7ac:	00cb      	lsls	r3, r1, #3
 801b7ae:	064f      	lsls	r7, r1, #25
 801b7b0:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801b7b4:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 801b7b8:	ea43 0302 	orr.w	r3, r3, r2
 801b7bc:	bf44      	itt	mi
 801b7be:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801b7c2:	b21b      	sxthmi	r3, r3
 801b7c4:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801b7c8:	1b5b      	subs	r3, r3, r5
 801b7ca:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 801b7ce:	4632      	mov	r2, r6
 801b7d0:	e6f9      	b.n	801b5c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801b7d2:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 801b7d6:	4617      	mov	r7, r2
 801b7d8:	f102 0908 	add.w	r9, r2, #8
 801b7dc:	4666      	mov	r6, ip
 801b7de:	6838      	ldr	r0, [r7, #0]
 801b7e0:	3708      	adds	r7, #8
 801b7e2:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801b7e6:	46e0      	mov	r8, ip
 801b7e8:	454f      	cmp	r7, r9
 801b7ea:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801b7ee:	46c4      	mov	ip, r8
 801b7f0:	d1f5      	bne.n	801b7de <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 801b7f2:	6838      	ldr	r0, [r7, #0]
 801b7f4:	f8c8 0000 	str.w	r0, [r8]
 801b7f8:	88b9      	ldrh	r1, [r7, #4]
 801b7fa:	f8a8 1004 	strh.w	r1, [r8, #4]
 801b7fe:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 801b802:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801b806:	d009      	beq.n	801b81c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 801b808:	7b51      	ldrb	r1, [r2, #13]
 801b80a:	7992      	ldrb	r2, [r2, #6]
 801b80c:	0149      	lsls	r1, r1, #5
 801b80e:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 801b812:	4311      	orrs	r1, r2
 801b814:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801b818:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 801b81c:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801b820:	d00e      	beq.n	801b840 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 801b822:	eba3 030e 	sub.w	r3, r3, lr
 801b826:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 801b82a:	b29b      	uxth	r3, r3
 801b82c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 801b830:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 801b834:	10db      	asrs	r3, r3, #3
 801b836:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801b83a:	4313      	orrs	r3, r2
 801b83c:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 801b840:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 801b844:	00cb      	lsls	r3, r1, #3
 801b846:	0648      	lsls	r0, r1, #25
 801b848:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801b84c:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 801b850:	ea43 0302 	orr.w	r3, r3, r2
 801b854:	bf44      	itt	mi
 801b856:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801b85a:	b21b      	sxthmi	r3, r3
 801b85c:	1b5d      	subs	r5, r3, r5
 801b85e:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801b862:	e7b4      	b.n	801b7ce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

0801b864 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801b864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b868:	461e      	mov	r6, r3
 801b86a:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801b86c:	4604      	mov	r4, r0
 801b86e:	4617      	mov	r7, r2
 801b870:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801b874:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 801b878:	f7ec fc2e 	bl	80080d8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801b87c:	4605      	mov	r5, r0
 801b87e:	b918      	cbnz	r0, 801b888 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 801b880:	6030      	str	r0, [r6, #0]
 801b882:	4628      	mov	r0, r5
 801b884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b888:	683b      	ldr	r3, [r7, #0]
 801b88a:	4601      	mov	r1, r0
 801b88c:	4638      	mov	r0, r7
 801b88e:	68db      	ldr	r3, [r3, #12]
 801b890:	4798      	blx	r3
 801b892:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 801b896:	4602      	mov	r2, r0
 801b898:	6030      	str	r0, [r6, #0]
 801b89a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801b89e:	d213      	bcs.n	801b8c8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 801b8a0:	4643      	mov	r3, r8
 801b8a2:	4639      	mov	r1, r7
 801b8a4:	4620      	mov	r0, r4
 801b8a6:	f7ff fe39 	bl	801b51c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801b8aa:	6030      	str	r0, [r6, #0]
 801b8ac:	6833      	ldr	r3, [r6, #0]
 801b8ae:	b143      	cbz	r3, 801b8c2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 801b8b0:	7b5a      	ldrb	r2, [r3, #13]
 801b8b2:	7a9b      	ldrb	r3, [r3, #10]
 801b8b4:	0052      	lsls	r2, r2, #1
 801b8b6:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 801b8ba:	4313      	orrs	r3, r2
 801b8bc:	bf0c      	ite	eq
 801b8be:	2301      	moveq	r3, #1
 801b8c0:	2300      	movne	r3, #0
 801b8c2:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 801b8c6:	e7dc      	b.n	801b882 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 801b8c8:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 801b8cc:	b29b      	uxth	r3, r3
 801b8ce:	2b7f      	cmp	r3, #127	@ 0x7f
 801b8d0:	d804      	bhi.n	801b8dc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 801b8d2:	4639      	mov	r1, r7
 801b8d4:	4620      	mov	r0, r4
 801b8d6:	f7ff fd15 	bl	801b304 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801b8da:	e7e6      	b.n	801b8aa <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 801b8dc:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 801b8e0:	2b00      	cmp	r3, #0
 801b8e2:	d0e3      	beq.n	801b8ac <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801b8e4:	f640 1302 	movw	r3, #2306	@ 0x902
 801b8e8:	429d      	cmp	r5, r3
 801b8ea:	d1df      	bne.n	801b8ac <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801b8ec:	4601      	mov	r1, r0
 801b8ee:	4620      	mov	r0, r4
 801b8f0:	f7ff fcd8 	bl	801b2a4 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801b8f4:	e7d9      	b.n	801b8aa <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0801b8f6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801b8f6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b8fa:	461e      	mov	r6, r3
 801b8fc:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801b8fe:	4604      	mov	r4, r0
 801b900:	4617      	mov	r7, r2
 801b902:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801b906:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 801b90a:	f7ec fbe5 	bl	80080d8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801b90e:	4605      	mov	r5, r0
 801b910:	b918      	cbnz	r0, 801b91a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 801b912:	6030      	str	r0, [r6, #0]
 801b914:	4628      	mov	r0, r5
 801b916:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b91a:	683b      	ldr	r3, [r7, #0]
 801b91c:	4601      	mov	r1, r0
 801b91e:	4638      	mov	r0, r7
 801b920:	f8d3 9008 	ldr.w	r9, [r3, #8]
 801b924:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801b928:	47c8      	blx	r9
 801b92a:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 801b92e:	4602      	mov	r2, r0
 801b930:	6030      	str	r0, [r6, #0]
 801b932:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801b936:	d213      	bcs.n	801b960 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 801b938:	4643      	mov	r3, r8
 801b93a:	4639      	mov	r1, r7
 801b93c:	4620      	mov	r0, r4
 801b93e:	f7ff fded 	bl	801b51c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801b942:	6030      	str	r0, [r6, #0]
 801b944:	6833      	ldr	r3, [r6, #0]
 801b946:	b143      	cbz	r3, 801b95a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 801b948:	7b5a      	ldrb	r2, [r3, #13]
 801b94a:	7a9b      	ldrb	r3, [r3, #10]
 801b94c:	0052      	lsls	r2, r2, #1
 801b94e:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 801b952:	4313      	orrs	r3, r2
 801b954:	bf0c      	ite	eq
 801b956:	2301      	moveq	r3, #1
 801b958:	2300      	movne	r3, #0
 801b95a:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 801b95e:	e7d9      	b.n	801b914 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 801b960:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 801b964:	b29b      	uxth	r3, r3
 801b966:	2b7f      	cmp	r3, #127	@ 0x7f
 801b968:	d804      	bhi.n	801b974 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 801b96a:	4639      	mov	r1, r7
 801b96c:	4620      	mov	r0, r4
 801b96e:	f7ff fcc9 	bl	801b304 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801b972:	e7e6      	b.n	801b942 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 801b974:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 801b978:	2b00      	cmp	r3, #0
 801b97a:	d0e3      	beq.n	801b944 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801b97c:	f640 1302 	movw	r3, #2306	@ 0x902
 801b980:	429d      	cmp	r5, r3
 801b982:	d1df      	bne.n	801b944 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801b984:	4601      	mov	r1, r0
 801b986:	4620      	mov	r0, r4
 801b988:	f7ff fc8c 	bl	801b2a4 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801b98c:	e7d9      	b.n	801b942 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

0801b98e <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801b98e:	b510      	push	{r4, lr}
 801b990:	4604      	mov	r4, r0
 801b992:	f8b4 1040 	ldrh.w	r1, [r4, #64]	@ 0x40
 801b996:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801b998:	b1e1      	cbz	r1, 801b9d4 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801b99a:	2b0a      	cmp	r3, #10
 801b99c:	d02d      	beq.n	801b9fa <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801b99e:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 801b9a0:	3901      	subs	r1, #1
 801b9a2:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801b9a6:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
 801b9a8:	f8a4 1040 	strh.w	r1, [r4, #64]	@ 0x40
 801b9ac:	1c51      	adds	r1, r2, #1
 801b9ae:	b289      	uxth	r1, r1
 801b9b0:	2901      	cmp	r1, #1
 801b9b2:	bf8a      	itet	hi
 801b9b4:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801b9b8:	87e1      	strhls	r1, [r4, #62]	@ 0x3e
 801b9ba:	87e2      	strhhi	r2, [r4, #62]	@ 0x3e
 801b9bc:	1c5a      	adds	r2, r3, #1
 801b9be:	8722      	strh	r2, [r4, #56]	@ 0x38
 801b9c0:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801b9c2:	4413      	add	r3, r2
 801b9c4:	b29b      	uxth	r3, r3
 801b9c6:	2b09      	cmp	r3, #9
 801b9c8:	bf88      	it	hi
 801b9ca:	3b0a      	subhi	r3, #10
 801b9cc:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801b9d0:	8458      	strh	r0, [r3, #34]	@ 0x22
 801b9d2:	e7de      	b.n	801b992 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801b9d4:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801b9d6:	2b0a      	cmp	r3, #10
 801b9d8:	d00f      	beq.n	801b9fa <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801b9da:	4620      	mov	r0, r4
 801b9dc:	f7fe ffb4 	bl	801a948 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801b9e0:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801b9e2:	1c5a      	adds	r2, r3, #1
 801b9e4:	8722      	strh	r2, [r4, #56]	@ 0x38
 801b9e6:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801b9e8:	4413      	add	r3, r2
 801b9ea:	b29b      	uxth	r3, r3
 801b9ec:	2b09      	cmp	r3, #9
 801b9ee:	bf88      	it	hi
 801b9f0:	3b0a      	subhi	r3, #10
 801b9f2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801b9f6:	8458      	strh	r0, [r3, #34]	@ 0x22
 801b9f8:	e7ec      	b.n	801b9d4 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801b9fa:	bd10      	pop	{r4, pc}

0801b9fc <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801b9fc:	b538      	push	{r3, r4, r5, lr}
 801b9fe:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801ba00:	4604      	mov	r4, r0
 801ba02:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 801ba06:	8c55      	ldrh	r5, [r2, #34]	@ 0x22
 801ba08:	8f02      	ldrh	r2, [r0, #56]	@ 0x38
 801ba0a:	3a01      	subs	r2, #1
 801ba0c:	8702      	strh	r2, [r0, #56]	@ 0x38
 801ba0e:	1c5a      	adds	r2, r3, #1
 801ba10:	b292      	uxth	r2, r2
 801ba12:	2a09      	cmp	r2, #9
 801ba14:	bf8a      	itet	hi
 801ba16:	3b09      	subhi	r3, #9
 801ba18:	86c2      	strhls	r2, [r0, #54]	@ 0x36
 801ba1a:	86c3      	strhhi	r3, [r0, #54]	@ 0x36
 801ba1c:	f7ff ffb7 	bl	801b98e <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801ba20:	8c23      	ldrh	r3, [r4, #32]
 801ba22:	2b01      	cmp	r3, #1
 801ba24:	bf9c      	itt	ls
 801ba26:	3301      	addls	r3, #1
 801ba28:	8423      	strhls	r3, [r4, #32]
 801ba2a:	8be3      	ldrh	r3, [r4, #30]
 801ba2c:	b90b      	cbnz	r3, 801ba32 <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 801ba2e:	2302      	movs	r3, #2
 801ba30:	83e3      	strh	r3, [r4, #30]
 801ba32:	8be3      	ldrh	r3, [r4, #30]
 801ba34:	4628      	mov	r0, r5
 801ba36:	3b01      	subs	r3, #1
 801ba38:	b29b      	uxth	r3, r3
 801ba3a:	83e3      	strh	r3, [r4, #30]
 801ba3c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801ba40:	8365      	strh	r5, [r4, #26]
 801ba42:	bd38      	pop	{r3, r4, r5, pc}

0801ba44 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801ba44:	428a      	cmp	r2, r1
 801ba46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ba4a:	8ec7      	ldrh	r7, [r0, #54]	@ 0x36
 801ba4c:	d932      	bls.n	801bab4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 801ba4e:	8f05      	ldrh	r5, [r0, #56]	@ 0x38
 801ba50:	1a54      	subs	r4, r2, r1
 801ba52:	f8b0 8040 	ldrh.w	r8, [r0, #64]	@ 0x40
 801ba56:	19ee      	adds	r6, r5, r7
 801ba58:	fa1f fe84 	uxth.w	lr, r4
 801ba5c:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	@ 0x3e
 801ba60:	3e01      	subs	r6, #1
 801ba62:	b2b4      	uxth	r4, r6
 801ba64:	eba4 090e 	sub.w	r9, r4, lr
 801ba68:	fa1f f989 	uxth.w	r9, r9
 801ba6c:	2c09      	cmp	r4, #9
 801ba6e:	4626      	mov	r6, r4
 801ba70:	bf88      	it	hi
 801ba72:	f1a4 060a 	subhi.w	r6, r4, #10
 801ba76:	f1bc 0f00 	cmp.w	ip, #0
 801ba7a:	f104 34ff 	add.w	r4, r4, #4294967295
 801ba7e:	bf08      	it	eq
 801ba80:	f04f 0c02 	moveq.w	ip, #2
 801ba84:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801ba88:	b2a4      	uxth	r4, r4
 801ba8a:	f10c 3cff 	add.w	ip, ip, #4294967295
 801ba8e:	f8b6 a022 	ldrh.w	sl, [r6, #34]	@ 0x22
 801ba92:	454c      	cmp	r4, r9
 801ba94:	fa1f fc8c 	uxth.w	ip, ip
 801ba98:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 801ba9c:	f8a6 a03a 	strh.w	sl, [r6, #58]	@ 0x3a
 801baa0:	d1e4      	bne.n	801ba6c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 801baa2:	eba5 050e 	sub.w	r5, r5, lr
 801baa6:	eb0e 0408 	add.w	r4, lr, r8
 801baaa:	f8a0 c03e 	strh.w	ip, [r0, #62]	@ 0x3e
 801baae:	8705      	strh	r5, [r0, #56]	@ 0x38
 801bab0:	f8a0 4040 	strh.w	r4, [r0, #64]	@ 0x40
 801bab4:	8f04      	ldrh	r4, [r0, #56]	@ 0x38
 801bab6:	250a      	movs	r5, #10
 801bab8:	1a64      	subs	r4, r4, r1
 801baba:	4439      	add	r1, r7
 801babc:	b289      	uxth	r1, r1
 801babe:	8704      	strh	r4, [r0, #56]	@ 0x38
 801bac0:	2909      	cmp	r1, #9
 801bac2:	bf88      	it	hi
 801bac4:	390a      	subhi	r1, #10
 801bac6:	86c1      	strh	r1, [r0, #54]	@ 0x36
 801bac8:	b18a      	cbz	r2, 801baee <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 801baca:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
 801bacc:	3a01      	subs	r2, #1
 801bace:	3101      	adds	r1, #1
 801bad0:	b292      	uxth	r2, r2
 801bad2:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801bad6:	8701      	strh	r1, [r0, #56]	@ 0x38
 801bad8:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 801bada:	b901      	cbnz	r1, 801bade <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 801badc:	86c5      	strh	r5, [r0, #54]	@ 0x36
 801bade:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 801bae0:	3901      	subs	r1, #1
 801bae2:	b289      	uxth	r1, r1
 801bae4:	86c1      	strh	r1, [r0, #54]	@ 0x36
 801bae6:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801baea:	844c      	strh	r4, [r1, #34]	@ 0x22
 801baec:	e7ec      	b.n	801bac8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 801baee:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801baf2:	f7ff bf4c 	b.w	801b98e <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0801baf6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801baf6:	b570      	push	{r4, r5, r6, lr}
 801baf8:	2500      	movs	r5, #0
 801bafa:	4295      	cmp	r5, r2
 801bafc:	d011      	beq.n	801bb22 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 801bafe:	8bc4      	ldrh	r4, [r0, #30]
 801bb00:	f831 6b02 	ldrh.w	r6, [r1], #2
 801bb04:	4414      	add	r4, r2
 801bb06:	3c01      	subs	r4, #1
 801bb08:	1b64      	subs	r4, r4, r5
 801bb0a:	b2a4      	uxth	r4, r4
 801bb0c:	2c01      	cmp	r4, #1
 801bb0e:	bf88      	it	hi
 801bb10:	3c02      	subhi	r4, #2
 801bb12:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801bb16:	8b64      	ldrh	r4, [r4, #26]
 801bb18:	42b4      	cmp	r4, r6
 801bb1a:	d117      	bne.n	801bb4c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 801bb1c:	3501      	adds	r5, #1
 801bb1e:	b2ad      	uxth	r5, r5
 801bb20:	e7eb      	b.n	801bafa <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 801bb22:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801bb26:	2400      	movs	r4, #0
 801bb28:	4413      	add	r3, r2
 801bb2a:	b2a2      	uxth	r2, r4
 801bb2c:	429a      	cmp	r2, r3
 801bb2e:	da0f      	bge.n	801bb50 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 801bb30:	8ec6      	ldrh	r6, [r0, #54]	@ 0x36
 801bb32:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801bb36:	3401      	adds	r4, #1
 801bb38:	4432      	add	r2, r6
 801bb3a:	b292      	uxth	r2, r2
 801bb3c:	2a09      	cmp	r2, #9
 801bb3e:	bf88      	it	hi
 801bb40:	3a0a      	subhi	r2, #10
 801bb42:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801bb46:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 801bb48:	42aa      	cmp	r2, r5
 801bb4a:	d0ee      	beq.n	801bb2a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 801bb4c:	2000      	movs	r0, #0
 801bb4e:	bd70      	pop	{r4, r5, r6, pc}
 801bb50:	2001      	movs	r0, #1
 801bb52:	e7fc      	b.n	801bb4e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

0801bb54 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801bb54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bb58:	4605      	mov	r5, r0
 801bb5a:	4616      	mov	r6, r2
 801bb5c:	1c8c      	adds	r4, r1, #2
 801bb5e:	8809      	ldrh	r1, [r1, #0]
 801bb60:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801bb64:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801bb68:	42b3      	cmp	r3, r6
 801bb6a:	d124      	bne.n	801bbb6 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801bb6c:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801bb70:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801bb74:	f001 070f 	and.w	r7, r1, #15
 801bb78:	4652      	mov	r2, sl
 801bb7a:	f8cd 8000 	str.w	r8, [sp]
 801bb7e:	464b      	mov	r3, r9
 801bb80:	4621      	mov	r1, r4
 801bb82:	4628      	mov	r0, r5
 801bb84:	f7ff ffb7 	bl	801baf6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801bb88:	4683      	mov	fp, r0
 801bb8a:	b168      	cbz	r0, 801bba8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801bb8c:	eb0a 0109 	add.w	r1, sl, r9
 801bb90:	463a      	mov	r2, r7
 801bb92:	4628      	mov	r0, r5
 801bb94:	4441      	add	r1, r8
 801bb96:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801bb9a:	4649      	mov	r1, r9
 801bb9c:	f7ff ff52 	bl	801ba44 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801bba0:	4658      	mov	r0, fp
 801bba2:	b003      	add	sp, #12
 801bba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bba8:	eb07 010a 	add.w	r1, r7, sl
 801bbac:	4449      	add	r1, r9
 801bbae:	4441      	add	r1, r8
 801bbb0:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801bbb4:	e7d2      	b.n	801bb5c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801bbb6:	f04f 0b00 	mov.w	fp, #0
 801bbba:	e7f1      	b.n	801bba0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801bbbc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801bbbc:	b570      	push	{r4, r5, r6, lr}
 801bbbe:	8810      	ldrh	r0, [r2, #0]
 801bbc0:	4298      	cmp	r0, r3
 801bbc2:	d817      	bhi.n	801bbf4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801bbc4:	1e48      	subs	r0, r1, #1
 801bbc6:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801bbca:	4298      	cmp	r0, r3
 801bbcc:	d312      	bcc.n	801bbf4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801bbce:	2400      	movs	r4, #0
 801bbd0:	428c      	cmp	r4, r1
 801bbd2:	d20f      	bcs.n	801bbf4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801bbd4:	1860      	adds	r0, r4, r1
 801bbd6:	1040      	asrs	r0, r0, #1
 801bbd8:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801bbdc:	0085      	lsls	r5, r0, #2
 801bbde:	42b3      	cmp	r3, r6
 801bbe0:	d902      	bls.n	801bbe8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801bbe2:	3001      	adds	r0, #1
 801bbe4:	b284      	uxth	r4, r0
 801bbe6:	e7f3      	b.n	801bbd0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801bbe8:	d201      	bcs.n	801bbee <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801bbea:	b281      	uxth	r1, r0
 801bbec:	e7f0      	b.n	801bbd0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801bbee:	442a      	add	r2, r5
 801bbf0:	8850      	ldrh	r0, [r2, #2]
 801bbf2:	bd70      	pop	{r4, r5, r6, pc}
 801bbf4:	2000      	movs	r0, #0
 801bbf6:	e7fc      	b.n	801bbf2 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801bbf8 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801bbf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bbfc:	6c45      	ldr	r5, [r0, #68]	@ 0x44
 801bbfe:	4604      	mov	r4, r0
 801bc00:	260b      	movs	r6, #11
 801bc02:	886f      	ldrh	r7, [r5, #2]
 801bc04:	087f      	lsrs	r7, r7, #1
 801bc06:	3e01      	subs	r6, #1
 801bc08:	d013      	beq.n	801bc32 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801bc0a:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 801bc0c:	462a      	mov	r2, r5
 801bc0e:	4639      	mov	r1, r7
 801bc10:	4620      	mov	r0, r4
 801bc12:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801bc16:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 801bc1a:	4643      	mov	r3, r8
 801bc1c:	f7ff ffce 	bl	801bbbc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801bc20:	b138      	cbz	r0, 801bc32 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801bc22:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801bc26:	4642      	mov	r2, r8
 801bc28:	4620      	mov	r0, r4
 801bc2a:	f7ff ff93 	bl	801bb54 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801bc2e:	2800      	cmp	r0, #0
 801bc30:	d1e9      	bne.n	801bc06 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801bc32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0801bc38 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801bc38:	b570      	push	{r4, r5, r6, lr}
 801bc3a:	694a      	ldr	r2, [r1, #20]
 801bc3c:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 801bc3e:	684b      	ldr	r3, [r1, #4]
 801bc40:	1b54      	subs	r4, r2, r5
 801bc42:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
 801bc44:	f000 8106 	beq.w	801be54 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801bc48:	1b9b      	subs	r3, r3, r6
 801bc4a:	d003      	beq.n	801bc54 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801bc4c:	4363      	muls	r3, r4
 801bc4e:	2210      	movs	r2, #16
 801bc50:	fb93 f3f2 	sdiv	r3, r3, r2
 801bc54:	680c      	ldr	r4, [r1, #0]
 801bc56:	698a      	ldr	r2, [r1, #24]
 801bc58:	1b65      	subs	r5, r4, r5
 801bc5a:	f000 80fd 	beq.w	801be58 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801bc5e:	1b92      	subs	r2, r2, r6
 801bc60:	d003      	beq.n	801bc6a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801bc62:	436a      	muls	r2, r5
 801bc64:	2410      	movs	r4, #16
 801bc66:	fb92 f2f4 	sdiv	r2, r2, r4
 801bc6a:	1a9b      	subs	r3, r3, r2
 801bc6c:	ed9f 4a89 	vldr	s8, [pc, #548]	@ 801be94 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801bc70:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801bc74:	460a      	mov	r2, r1
 801bc76:	ee07 3a90 	vmov	s15, r3
 801bc7a:	f100 040c 	add.w	r4, r0, #12
 801bc7e:	4603      	mov	r3, r0
 801bc80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bc84:	ee67 7a84 	vmul.f32	s15, s15, s8
 801bc88:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801bc8c:	eeb1 6a43 	vneg.f32	s12, s6
 801bc90:	edd2 7a02 	vldr	s15, [r2, #8]
 801bc94:	3214      	adds	r2, #20
 801bc96:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801bc9a:	ece3 6a01 	vstmia	r3!, {s13}
 801bc9e:	429c      	cmp	r4, r3
 801bca0:	ed52 7a02 	vldr	s15, [r2, #-8]
 801bca4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801bca8:	edc3 7a02 	vstr	s15, [r3, #8]
 801bcac:	ed52 7a01 	vldr	s15, [r2, #-4]
 801bcb0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801bcb4:	edc3 7a05 	vstr	s15, [r3, #20]
 801bcb8:	d1ea      	bne.n	801bc90 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801bcba:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801bcbc:	698b      	ldr	r3, [r1, #24]
 801bcbe:	edd0 4a02 	vldr	s9, [r0, #8]
 801bcc2:	1a9b      	subs	r3, r3, r2
 801bcc4:	edd0 3a00 	vldr	s7, [r0]
 801bcc8:	edd0 6a01 	vldr	s13, [r0, #4]
 801bccc:	ee07 3a90 	vmov	s15, r3
 801bcd0:	684b      	ldr	r3, [r1, #4]
 801bcd2:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801bcd6:	ed90 5a05 	vldr	s10, [r0, #20]
 801bcda:	1a9b      	subs	r3, r3, r2
 801bcdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bce0:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801bce4:	ed90 2a03 	vldr	s4, [r0, #12]
 801bce8:	ee07 3a10 	vmov	s14, r3
 801bcec:	edd0 5a04 	vldr	s11, [r0, #16]
 801bcf0:	ee67 7a84 	vmul.f32	s15, s15, s8
 801bcf4:	ed90 1a07 	vldr	s2, [r0, #28]
 801bcf8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801bcfc:	edd0 2a06 	vldr	s5, [r0, #24]
 801bd00:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801bd04:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801bd08:	ee27 7a04 	vmul.f32	s14, s14, s8
 801bd0c:	ee32 5a45 	vsub.f32	s10, s4, s10
 801bd10:	eee6 7a87 	vfma.f32	s15, s13, s14
 801bd14:	ee67 7a83 	vmul.f32	s15, s15, s6
 801bd18:	edc0 7a09 	vstr	s15, [r0, #36]	@ 0x24
 801bd1c:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801bd1e:	694a      	ldr	r2, [r1, #20]
 801bd20:	1b13      	subs	r3, r2, r4
 801bd22:	ee07 3a10 	vmov	s14, r3
 801bd26:	680b      	ldr	r3, [r1, #0]
 801bd28:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801bd2c:	1b1b      	subs	r3, r3, r4
 801bd2e:	ee27 7a04 	vmul.f32	s14, s14, s8
 801bd32:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801bd36:	ee07 3a10 	vmov	s14, r3
 801bd3a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801bd3e:	ee27 7a04 	vmul.f32	s14, s14, s8
 801bd42:	eee6 4a87 	vfma.f32	s9, s13, s14
 801bd46:	ee64 4a86 	vmul.f32	s9, s9, s12
 801bd4a:	edc0 4a0a 	vstr	s9, [r0, #40]	@ 0x28
 801bd4e:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801bd50:	698b      	ldr	r3, [r1, #24]
 801bd52:	1a9b      	subs	r3, r3, r2
 801bd54:	ee06 3a90 	vmov	s13, r3
 801bd58:	684b      	ldr	r3, [r1, #4]
 801bd5a:	1a9b      	subs	r3, r3, r2
 801bd5c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801bd60:	ee07 3a10 	vmov	s14, r3
 801bd64:	ee66 6a84 	vmul.f32	s13, s13, s8
 801bd68:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801bd6c:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801bd70:	ee27 7a04 	vmul.f32	s14, s14, s8
 801bd74:	eee5 6a87 	vfma.f32	s13, s11, s14
 801bd78:	ee66 6a83 	vmul.f32	s13, s13, s6
 801bd7c:	edc0 6a0b 	vstr	s13, [r0, #44]	@ 0x2c
 801bd80:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801bd82:	694a      	ldr	r2, [r1, #20]
 801bd84:	1b13      	subs	r3, r2, r4
 801bd86:	ee07 3a10 	vmov	s14, r3
 801bd8a:	680b      	ldr	r3, [r1, #0]
 801bd8c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801bd90:	1b1b      	subs	r3, r3, r4
 801bd92:	ee27 7a04 	vmul.f32	s14, s14, s8
 801bd96:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801bd9a:	ee07 3a10 	vmov	s14, r3
 801bd9e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801bda2:	ee27 7a04 	vmul.f32	s14, s14, s8
 801bda6:	eea5 5a87 	vfma.f32	s10, s11, s14
 801bdaa:	edd0 5a08 	vldr	s11, [r0, #32]
 801bdae:	ee31 1a65 	vsub.f32	s2, s2, s11
 801bdb2:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801bdb6:	ee25 5a06 	vmul.f32	s10, s10, s12
 801bdba:	ed80 5a0c 	vstr	s10, [r0, #48]	@ 0x30
 801bdbe:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801bdc0:	698b      	ldr	r3, [r1, #24]
 801bdc2:	1a9b      	subs	r3, r3, r2
 801bdc4:	ee07 3a10 	vmov	s14, r3
 801bdc8:	684b      	ldr	r3, [r1, #4]
 801bdca:	1a9b      	subs	r3, r3, r2
 801bdcc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801bdd0:	ee01 3a90 	vmov	s3, r3
 801bdd4:	ee27 7a04 	vmul.f32	s14, s14, s8
 801bdd8:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801bddc:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801bde0:	ee61 1a84 	vmul.f32	s3, s3, s8
 801bde4:	eea1 7a21 	vfma.f32	s14, s2, s3
 801bde8:	ee27 7a03 	vmul.f32	s14, s14, s6
 801bdec:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 801bdf0:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801bdf2:	694a      	ldr	r2, [r1, #20]
 801bdf4:	1b13      	subs	r3, r2, r4
 801bdf6:	ee03 3a10 	vmov	s6, r3
 801bdfa:	680b      	ldr	r3, [r1, #0]
 801bdfc:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801be00:	1b1b      	subs	r3, r3, r4
 801be02:	ee23 3a04 	vmul.f32	s6, s6, s8
 801be06:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801be0a:	ee03 3a10 	vmov	s6, r3
 801be0e:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801be12:	ee23 4a04 	vmul.f32	s8, s6, s8
 801be16:	eee1 5a04 	vfma.f32	s11, s2, s8
 801be1a:	ee25 6a86 	vmul.f32	s12, s11, s12
 801be1e:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801be22:	ed80 6a0e 	vstr	s12, [r0, #56]	@ 0x38
 801be26:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801be2a:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801be2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801be32:	dd13      	ble.n	801be5c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 801be34:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801be38:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801be3c:	63c3      	str	r3, [r0, #60]	@ 0x3c
 801be3e:	eee3 7a87 	vfma.f32	s15, s7, s14
 801be42:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801be46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801be4a:	dd15      	ble.n	801be78 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 801be4c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801be50:	6403      	str	r3, [r0, #64]	@ 0x40
 801be52:	bd70      	pop	{r4, r5, r6, pc}
 801be54:	4623      	mov	r3, r4
 801be56:	e6fd      	b.n	801bc54 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801be58:	462a      	mov	r2, r5
 801be5a:	e706      	b.n	801bc6a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801be5c:	d502      	bpl.n	801be64 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801be5e:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 801be62:	e7e9      	b.n	801be38 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 801be64:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801be68:	eea3 2a85 	vfma.f32	s4, s7, s10
 801be6c:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801be70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801be74:	dade      	bge.n	801be34 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801be76:	e7f2      	b.n	801be5e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801be78:	d502      	bpl.n	801be80 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801be7a:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 801be7e:	e7e7      	b.n	801be50 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 801be80:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801be84:	eee3 4a86 	vfma.f32	s9, s7, s12
 801be88:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801be8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801be90:	dadc      	bge.n	801be4c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801be92:	e7f2      	b.n	801be7a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801be94:	3d800000 	.word	0x3d800000

0801be98 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801be98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801be9c:	2714      	movs	r7, #20
 801be9e:	435f      	muls	r7, r3
 801bea0:	eb02 0c07 	add.w	ip, r2, r7
 801bea4:	f8dc 5004 	ldr.w	r5, [ip, #4]
 801bea8:	f115 0e0f 	adds.w	lr, r5, #15
 801beac:	f100 80a2 	bmi.w	801bff4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801beb0:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 801beb4:	9c08      	ldr	r4, [sp, #32]
 801beb6:	2614      	movs	r6, #20
 801beb8:	f8c0 e014 	str.w	lr, [r0, #20]
 801bebc:	4366      	muls	r6, r4
 801bebe:	eb02 0806 	add.w	r8, r2, r6
 801bec2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801bec6:	f115 040f 	adds.w	r4, r5, #15
 801beca:	f100 809f 	bmi.w	801c00c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 801bece:	1124      	asrs	r4, r4, #4
 801bed0:	eba4 040e 	sub.w	r4, r4, lr
 801bed4:	6184      	str	r4, [r0, #24]
 801bed6:	2c00      	cmp	r4, #0
 801bed8:	f000 808a 	beq.w	801bff0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 801bedc:	f8dc 9004 	ldr.w	r9, [ip, #4]
 801bee0:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801bee4:	5995      	ldr	r5, [r2, r6]
 801bee6:	eba4 0809 	sub.w	r8, r4, r9
 801beea:	59d4      	ldr	r4, [r2, r7]
 801beec:	eba5 0a04 	sub.w	sl, r5, r4
 801bef0:	ea4f 1608 	mov.w	r6, r8, lsl #4
 801bef4:	ea4f 150a 	mov.w	r5, sl, lsl #4
 801bef8:	fb0e fe05 	mul.w	lr, lr, r5
 801befc:	fb0a ee19 	mls	lr, sl, r9, lr
 801bf00:	fb08 e404 	mla	r4, r8, r4, lr
 801bf04:	3c01      	subs	r4, #1
 801bf06:	19a4      	adds	r4, r4, r6
 801bf08:	f100 808c 	bmi.w	801c024 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 801bf0c:	fb94 fef6 	sdiv	lr, r4, r6
 801bf10:	fb06 441e 	mls	r4, r6, lr, r4
 801bf14:	f8c0 e000 	str.w	lr, [r0]
 801bf18:	6104      	str	r4, [r0, #16]
 801bf1a:	2d00      	cmp	r5, #0
 801bf1c:	f2c0 8095 	blt.w	801c04a <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 801bf20:	fb95 f4f6 	sdiv	r4, r5, r6
 801bf24:	fb06 5514 	mls	r5, r6, r4, r5
 801bf28:	6044      	str	r4, [r0, #4]
 801bf2a:	6085      	str	r5, [r0, #8]
 801bf2c:	60c6      	str	r6, [r0, #12]
 801bf2e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801bf32:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801bf36:	6945      	ldr	r5, [r0, #20]
 801bf38:	59d2      	ldr	r2, [r2, r7]
 801bf3a:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 801bf3e:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 801c06c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 801bf42:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 801bf46:	ee07 4a10 	vmov	s14, r4
 801bf4a:	6804      	ldr	r4, [r0, #0]
 801bf4c:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 801bf50:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801bf54:	ee07 2a90 	vmov	s15, r2
 801bf58:	ee27 7a26 	vmul.f32	s14, s14, s13
 801bf5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bf60:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801bf64:	edd3 6a00 	vldr	s13, [r3]
 801bf68:	eee6 6a07 	vfma.f32	s13, s12, s14
 801bf6c:	ed91 6a09 	vldr	s12, [r1, #36]	@ 0x24
 801bf70:	eee6 6a27 	vfma.f32	s13, s12, s15
 801bf74:	edc0 6a07 	vstr	s13, [r0, #28]
 801bf78:	edd0 6a01 	vldr	s13, [r0, #4]
 801bf7c:	edd1 5a09 	vldr	s11, [r1, #36]	@ 0x24
 801bf80:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801bf84:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 801bf88:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801bf8c:	ed80 6a08 	vstr	s12, [r0, #32]
 801bf90:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 801bf92:	6242      	str	r2, [r0, #36]	@ 0x24
 801bf94:	edd1 5a0c 	vldr	s11, [r1, #48]	@ 0x30
 801bf98:	ed93 6a03 	vldr	s12, [r3, #12]
 801bf9c:	eea5 6a87 	vfma.f32	s12, s11, s14
 801bfa0:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 801bfa4:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801bfa8:	ed80 6a0a 	vstr	s12, [r0, #40]	@ 0x28
 801bfac:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 801bfb0:	ed91 6a0c 	vldr	s12, [r1, #48]	@ 0x30
 801bfb4:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801bfb8:	ed80 6a0b 	vstr	s12, [r0, #44]	@ 0x2c
 801bfbc:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801bfbe:	6302      	str	r2, [r0, #48]	@ 0x30
 801bfc0:	ed93 6a06 	vldr	s12, [r3, #24]
 801bfc4:	edd1 5a0e 	vldr	s11, [r1, #56]	@ 0x38
 801bfc8:	eea5 6a87 	vfma.f32	s12, s11, s14
 801bfcc:	eeb0 7a46 	vmov.f32	s14, s12
 801bfd0:	ed91 6a0d 	vldr	s12, [r1, #52]	@ 0x34
 801bfd4:	eea6 7a27 	vfma.f32	s14, s12, s15
 801bfd8:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 801bfdc:	ed91 7a0d 	vldr	s14, [r1, #52]	@ 0x34
 801bfe0:	edd1 7a0e 	vldr	s15, [r1, #56]	@ 0x38
 801bfe4:	eee6 7a87 	vfma.f32	s15, s13, s14
 801bfe8:	edc0 7a0e 	vstr	s15, [r0, #56]	@ 0x38
 801bfec:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 801bfee:	63c3      	str	r3, [r0, #60]	@ 0x3c
 801bff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bff4:	2410      	movs	r4, #16
 801bff6:	f1c5 0501 	rsb	r5, r5, #1
 801bffa:	fb9e fef4 	sdiv	lr, lr, r4
 801bffe:	f015 050f 	ands.w	r5, r5, #15
 801c002:	bf18      	it	ne
 801c004:	2501      	movne	r5, #1
 801c006:	ebae 0e05 	sub.w	lr, lr, r5
 801c00a:	e753      	b.n	801beb4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 801c00c:	f04f 0910 	mov.w	r9, #16
 801c010:	f1c5 0501 	rsb	r5, r5, #1
 801c014:	fb94 f4f9 	sdiv	r4, r4, r9
 801c018:	f015 050f 	ands.w	r5, r5, #15
 801c01c:	bf18      	it	ne
 801c01e:	2501      	movne	r5, #1
 801c020:	1b64      	subs	r4, r4, r5
 801c022:	e755      	b.n	801bed0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 801c024:	4264      	negs	r4, r4
 801c026:	fb94 fef6 	sdiv	lr, r4, r6
 801c02a:	f1ce 0800 	rsb	r8, lr, #0
 801c02e:	fb06 441e 	mls	r4, r6, lr, r4
 801c032:	f8c0 8000 	str.w	r8, [r0]
 801c036:	6104      	str	r4, [r0, #16]
 801c038:	2c00      	cmp	r4, #0
 801c03a:	f43f af6e 	beq.w	801bf1a <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 801c03e:	ea6f 0e0e 	mvn.w	lr, lr
 801c042:	1b34      	subs	r4, r6, r4
 801c044:	f8c0 e000 	str.w	lr, [r0]
 801c048:	e766      	b.n	801bf18 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 801c04a:	426d      	negs	r5, r5
 801c04c:	fb95 f4f6 	sdiv	r4, r5, r6
 801c050:	f1c4 0e00 	rsb	lr, r4, #0
 801c054:	fb06 5514 	mls	r5, r6, r4, r5
 801c058:	f8c0 e004 	str.w	lr, [r0, #4]
 801c05c:	6085      	str	r5, [r0, #8]
 801c05e:	2d00      	cmp	r5, #0
 801c060:	f43f af64 	beq.w	801bf2c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 801c064:	43e4      	mvns	r4, r4
 801c066:	1b75      	subs	r5, r6, r5
 801c068:	6044      	str	r4, [r0, #4]
 801c06a:	e75e      	b.n	801bf2a <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 801c06c:	3d800000 	.word	0x3d800000

0801c070 <_ZN8touchgfx7Unicode6strlenEPKt>:
 801c070:	4602      	mov	r2, r0
 801c072:	b148      	cbz	r0, 801c088 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801c074:	2300      	movs	r3, #0
 801c076:	b298      	uxth	r0, r3
 801c078:	3301      	adds	r3, #1
 801c07a:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801c07e:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801c082:	2900      	cmp	r1, #0
 801c084:	d1f7      	bne.n	801c076 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801c086:	4770      	bx	lr
 801c088:	4770      	bx	lr

0801c08a <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801c08a:	b530      	push	{r4, r5, lr}
 801c08c:	4604      	mov	r4, r0
 801c08e:	b159      	cbz	r1, 801c0a8 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 801c090:	b148      	cbz	r0, 801c0a6 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801c092:	2300      	movs	r3, #0
 801c094:	b298      	uxth	r0, r3
 801c096:	4282      	cmp	r2, r0
 801c098:	d905      	bls.n	801c0a6 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801c09a:	5ccd      	ldrb	r5, [r1, r3]
 801c09c:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801c0a0:	3301      	adds	r3, #1
 801c0a2:	2d00      	cmp	r5, #0
 801c0a4:	d1f6      	bne.n	801c094 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801c0a6:	bd30      	pop	{r4, r5, pc}
 801c0a8:	4608      	mov	r0, r1
 801c0aa:	e7fc      	b.n	801c0a6 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0801c0ac <_ZN8touchgfx7Unicode4itoaElPtti.part.2>:
 801c0ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c0ae:	b08b      	sub	sp, #44	@ 0x2c
 801c0b0:	468c      	mov	ip, r1
 801c0b2:	4604      	mov	r4, r0
 801c0b4:	2100      	movs	r1, #0
 801c0b6:	261f      	movs	r6, #31
 801c0b8:	af01      	add	r7, sp, #4
 801c0ba:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 801c0be:	1e71      	subs	r1, r6, #1
 801c0c0:	fb94 fef3 	sdiv	lr, r4, r3
 801c0c4:	fb03 441e 	mls	r4, r3, lr, r4
 801c0c8:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 801c0cc:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 801c0d0:	b2ec      	uxtb	r4, r5
 801c0d2:	2d09      	cmp	r5, #9
 801c0d4:	bfd4      	ite	le
 801c0d6:	3430      	addle	r4, #48	@ 0x30
 801c0d8:	3457      	addgt	r4, #87	@ 0x57
 801c0da:	b2e4      	uxtb	r4, r4
 801c0dc:	55bc      	strb	r4, [r7, r6]
 801c0de:	4674      	mov	r4, lr
 801c0e0:	b974      	cbnz	r4, 801c100 <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x54>
 801c0e2:	2800      	cmp	r0, #0
 801c0e4:	da05      	bge.n	801c0f2 <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x46>
 801c0e6:	ab0a      	add	r3, sp, #40	@ 0x28
 801c0e8:	4419      	add	r1, r3
 801c0ea:	232d      	movs	r3, #45	@ 0x2d
 801c0ec:	f801 3c24 	strb.w	r3, [r1, #-36]
 801c0f0:	1eb1      	subs	r1, r6, #2
 801c0f2:	3101      	adds	r1, #1
 801c0f4:	4660      	mov	r0, ip
 801c0f6:	4439      	add	r1, r7
 801c0f8:	f7ff ffc7 	bl	801c08a <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801c0fc:	b00b      	add	sp, #44	@ 0x2c
 801c0fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c100:	460e      	mov	r6, r1
 801c102:	e7dc      	b.n	801c0be <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x12>

0801c104 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>:
 801c104:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c106:	468c      	mov	ip, r1
 801c108:	b08b      	sub	sp, #44	@ 0x2c
 801c10a:	2100      	movs	r1, #0
 801c10c:	ae01      	add	r6, sp, #4
 801c10e:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 801c112:	211f      	movs	r1, #31
 801c114:	fbb0 f7f3 	udiv	r7, r0, r3
 801c118:	fb03 0517 	mls	r5, r3, r7, r0
 801c11c:	4638      	mov	r0, r7
 801c11e:	b2ec      	uxtb	r4, r5
 801c120:	2d09      	cmp	r5, #9
 801c122:	bfd4      	ite	le
 801c124:	3430      	addle	r4, #48	@ 0x30
 801c126:	3457      	addgt	r4, #87	@ 0x57
 801c128:	b2e4      	uxtb	r4, r4
 801c12a:	558c      	strb	r4, [r1, r6]
 801c12c:	1e4c      	subs	r4, r1, #1
 801c12e:	b92f      	cbnz	r7, 801c13c <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x38>
 801c130:	4431      	add	r1, r6
 801c132:	4660      	mov	r0, ip
 801c134:	f7ff ffa9 	bl	801c08a <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801c138:	b00b      	add	sp, #44	@ 0x2c
 801c13a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c13c:	4621      	mov	r1, r4
 801c13e:	e7e9      	b.n	801c114 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x10>

0801c140 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 801c140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c144:	b085      	sub	sp, #20
 801c146:	4691      	mov	r9, r2
 801c148:	6802      	ldr	r2, [r0, #0]
 801c14a:	4688      	mov	r8, r1
 801c14c:	461c      	mov	r4, r3
 801c14e:	f89d 1040 	ldrb.w	r1, [sp, #64]	@ 0x40
 801c152:	f89d 3048 	ldrb.w	r3, [sp, #72]	@ 0x48
 801c156:	4683      	mov	fp, r0
 801c158:	4610      	mov	r0, r2
 801c15a:	9103      	str	r1, [sp, #12]
 801c15c:	9302      	str	r3, [sp, #8]
 801c15e:	9201      	str	r2, [sp, #4]
 801c160:	f7ff ff86 	bl	801c070 <_ZN8touchgfx7Unicode6strlenEPKt>
 801c164:	f1b8 0f00 	cmp.w	r8, #0
 801c168:	bf0c      	ite	eq
 801c16a:	4684      	moveq	ip, r0
 801c16c:	f100 0c01 	addne.w	ip, r0, #1
 801c170:	f1b9 0f69 	cmp.w	r9, #105	@ 0x69
 801c174:	f89d 6038 	ldrb.w	r6, [sp, #56]	@ 0x38
 801c178:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 801c17a:	fa1f fc8c 	uxth.w	ip, ip
 801c17e:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801c180:	f8dd a054 	ldr.w	sl, [sp, #84]	@ 0x54
 801c184:	9903      	ldr	r1, [sp, #12]
 801c186:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801c18a:	d041      	beq.n	801c210 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801c18c:	d834      	bhi.n	801c1f8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 801c18e:	f1b9 0f63 	cmp.w	r9, #99	@ 0x63
 801c192:	d059      	beq.n	801c248 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 801c194:	f1b9 0f64 	cmp.w	r9, #100	@ 0x64
 801c198:	d03a      	beq.n	801c210 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801c19a:	f1b9 0f58 	cmp.w	r9, #88	@ 0x58
 801c19e:	d034      	beq.n	801c20a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801c1a0:	2400      	movs	r4, #0
 801c1a2:	f8bd 2050 	ldrh.w	r2, [sp, #80]	@ 0x50
 801c1a6:	3a01      	subs	r2, #1
 801c1a8:	b169      	cbz	r1, 801c1c6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801c1aa:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801c1ac:	458c      	cmp	ip, r1
 801c1ae:	da09      	bge.n	801c1c4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801c1b0:	eba1 010c 	sub.w	r1, r1, ip
 801c1b4:	b289      	uxth	r1, r1
 801c1b6:	b933      	cbnz	r3, 801c1c6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801c1b8:	2e00      	cmp	r6, #0
 801c1ba:	d051      	beq.n	801c260 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801c1bc:	2800      	cmp	r0, #0
 801c1be:	d04f      	beq.n	801c260 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801c1c0:	440c      	add	r4, r1
 801c1c2:	b2a4      	uxth	r4, r4
 801c1c4:	2100      	movs	r1, #0
 801c1c6:	682b      	ldr	r3, [r5, #0]
 801c1c8:	4293      	cmp	r3, r2
 801c1ca:	da07      	bge.n	801c1dc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801c1cc:	f1b8 0f00 	cmp.w	r8, #0
 801c1d0:	d004      	beq.n	801c1dc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801c1d2:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 801c1d6:	682b      	ldr	r3, [r5, #0]
 801c1d8:	3301      	adds	r3, #1
 801c1da:	602b      	str	r3, [r5, #0]
 801c1dc:	2730      	movs	r7, #48	@ 0x30
 801c1de:	2c00      	cmp	r4, #0
 801c1e0:	d04e      	beq.n	801c280 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801c1e2:	682e      	ldr	r6, [r5, #0]
 801c1e4:	3c01      	subs	r4, #1
 801c1e6:	42b2      	cmp	r2, r6
 801c1e8:	b2a4      	uxth	r4, r4
 801c1ea:	dd49      	ble.n	801c280 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801c1ec:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801c1f0:	682b      	ldr	r3, [r5, #0]
 801c1f2:	3301      	adds	r3, #1
 801c1f4:	602b      	str	r3, [r5, #0]
 801c1f6:	e7f2      	b.n	801c1de <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 801c1f8:	f1b9 0f73 	cmp.w	r9, #115	@ 0x73
 801c1fc:	d01d      	beq.n	801c23a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 801c1fe:	f1b9 0f78 	cmp.w	r9, #120	@ 0x78
 801c202:	d002      	beq.n	801c20a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801c204:	f1b9 0f6f 	cmp.w	r9, #111	@ 0x6f
 801c208:	e7c9      	b.n	801c19e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 801c20a:	4684      	mov	ip, r0
 801c20c:	f04f 0800 	mov.w	r8, #0
 801c210:	2c00      	cmp	r4, #0
 801c212:	d0c6      	beq.n	801c1a2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801c214:	b947      	cbnz	r7, 801c228 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801c216:	2801      	cmp	r0, #1
 801c218:	d106      	bne.n	801c228 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801c21a:	8814      	ldrh	r4, [r2, #0]
 801c21c:	2c30      	cmp	r4, #48	@ 0x30
 801c21e:	bf02      	ittt	eq
 801c220:	3202      	addeq	r2, #2
 801c222:	4638      	moveq	r0, r7
 801c224:	f8cb 2000 	streq.w	r2, [fp]
 801c228:	45bc      	cmp	ip, r7
 801c22a:	da14      	bge.n	801c256 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 801c22c:	b2bf      	uxth	r7, r7
 801c22e:	eba7 040c 	sub.w	r4, r7, ip
 801c232:	46bc      	mov	ip, r7
 801c234:	b2a4      	uxth	r4, r4
 801c236:	2600      	movs	r6, #0
 801c238:	e7b3      	b.n	801c1a2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801c23a:	4684      	mov	ip, r0
 801c23c:	b16c      	cbz	r4, 801c25a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 801c23e:	42b8      	cmp	r0, r7
 801c240:	dd00      	ble.n	801c244 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 801c242:	b2b8      	uxth	r0, r7
 801c244:	2400      	movs	r4, #0
 801c246:	e003      	b.n	801c250 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 801c248:	f04f 0c01 	mov.w	ip, #1
 801c24c:	2400      	movs	r4, #0
 801c24e:	4660      	mov	r0, ip
 801c250:	4626      	mov	r6, r4
 801c252:	46a0      	mov	r8, r4
 801c254:	e7a5      	b.n	801c1a2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801c256:	2400      	movs	r4, #0
 801c258:	e7ed      	b.n	801c236 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 801c25a:	4626      	mov	r6, r4
 801c25c:	46a0      	mov	r8, r4
 801c25e:	e7a0      	b.n	801c1a2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801c260:	2900      	cmp	r1, #0
 801c262:	d0b0      	beq.n	801c1c6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801c264:	2720      	movs	r7, #32
 801c266:	682e      	ldr	r6, [r5, #0]
 801c268:	2900      	cmp	r1, #0
 801c26a:	d0ac      	beq.n	801c1c6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801c26c:	3901      	subs	r1, #1
 801c26e:	4296      	cmp	r6, r2
 801c270:	b289      	uxth	r1, r1
 801c272:	daa7      	bge.n	801c1c4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801c274:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801c278:	682b      	ldr	r3, [r5, #0]
 801c27a:	3301      	adds	r3, #1
 801c27c:	602b      	str	r3, [r5, #0]
 801c27e:	e7f2      	b.n	801c266 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 801c280:	b188      	cbz	r0, 801c2a6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801c282:	682b      	ldr	r3, [r5, #0]
 801c284:	3801      	subs	r0, #1
 801c286:	429a      	cmp	r2, r3
 801c288:	b280      	uxth	r0, r0
 801c28a:	dd0c      	ble.n	801c2a6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801c28c:	f8db 3000 	ldr.w	r3, [fp]
 801c290:	1c9c      	adds	r4, r3, #2
 801c292:	f8cb 4000 	str.w	r4, [fp]
 801c296:	881c      	ldrh	r4, [r3, #0]
 801c298:	682b      	ldr	r3, [r5, #0]
 801c29a:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 801c29e:	682b      	ldr	r3, [r5, #0]
 801c2a0:	3301      	adds	r3, #1
 801c2a2:	602b      	str	r3, [r5, #0]
 801c2a4:	e7ec      	b.n	801c280 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801c2a6:	2620      	movs	r6, #32
 801c2a8:	b151      	cbz	r1, 801c2c0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801c2aa:	6828      	ldr	r0, [r5, #0]
 801c2ac:	3901      	subs	r1, #1
 801c2ae:	4282      	cmp	r2, r0
 801c2b0:	b289      	uxth	r1, r1
 801c2b2:	dd05      	ble.n	801c2c0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801c2b4:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 801c2b8:	682b      	ldr	r3, [r5, #0]
 801c2ba:	3301      	adds	r3, #1
 801c2bc:	602b      	str	r3, [r5, #0]
 801c2be:	e7f3      	b.n	801c2a8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 801c2c0:	b005      	add	sp, #20
 801c2c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c2c6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 801c2c6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c2ca:	2400      	movs	r4, #0
 801c2cc:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 801c2d0:	e9dd e609 	ldrd	lr, r6, [sp, #36]	@ 0x24
 801c2d4:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	@ 0x2c
 801c2d8:	8014      	strh	r4, [r2, #0]
 801c2da:	701c      	strb	r4, [r3, #0]
 801c2dc:	f888 4000 	strb.w	r4, [r8]
 801c2e0:	f88c 4000 	strb.w	r4, [ip]
 801c2e4:	f88e 4000 	strb.w	r4, [lr]
 801c2e8:	703c      	strb	r4, [r7, #0]
 801c2ea:	6804      	ldr	r4, [r0, #0]
 801c2ec:	b1a4      	cbz	r4, 801c318 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 801c2ee:	8824      	ldrh	r4, [r4, #0]
 801c2f0:	f04f 0901 	mov.w	r9, #1
 801c2f4:	b314      	cbz	r4, 801c33c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801c2f6:	2c2b      	cmp	r4, #43	@ 0x2b
 801c2f8:	d001      	beq.n	801c2fe <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 801c2fa:	2c20      	cmp	r4, #32
 801c2fc:	d110      	bne.n	801c320 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 801c2fe:	8014      	strh	r4, [r2, #0]
 801c300:	6804      	ldr	r4, [r0, #0]
 801c302:	b10c      	cbz	r4, 801c308 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 801c304:	3402      	adds	r4, #2
 801c306:	6004      	str	r4, [r0, #0]
 801c308:	680c      	ldr	r4, [r1, #0]
 801c30a:	b10c      	cbz	r4, 801c310 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 801c30c:	3401      	adds	r4, #1
 801c30e:	600c      	str	r4, [r1, #0]
 801c310:	6804      	ldr	r4, [r0, #0]
 801c312:	b17c      	cbz	r4, 801c334 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 801c314:	8824      	ldrh	r4, [r4, #0]
 801c316:	e7ed      	b.n	801c2f4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801c318:	680c      	ldr	r4, [r1, #0]
 801c31a:	b17c      	cbz	r4, 801c33c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801c31c:	7824      	ldrb	r4, [r4, #0]
 801c31e:	e7e7      	b.n	801c2f0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 801c320:	2c2d      	cmp	r4, #45	@ 0x2d
 801c322:	d102      	bne.n	801c32a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 801c324:	f883 9000 	strb.w	r9, [r3]
 801c328:	e7ea      	b.n	801c300 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801c32a:	2c23      	cmp	r4, #35	@ 0x23
 801c32c:	d107      	bne.n	801c33e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 801c32e:	f888 9000 	strb.w	r9, [r8]
 801c332:	e7e5      	b.n	801c300 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801c334:	680c      	ldr	r4, [r1, #0]
 801c336:	b10c      	cbz	r4, 801c33c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801c338:	7824      	ldrb	r4, [r4, #0]
 801c33a:	e7db      	b.n	801c2f4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801c33c:	2400      	movs	r4, #0
 801c33e:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 801c342:	2b09      	cmp	r3, #9
 801c344:	d901      	bls.n	801c34a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 801c346:	2c2a      	cmp	r4, #42	@ 0x2a
 801c348:	d122      	bne.n	801c390 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801c34a:	2301      	movs	r3, #1
 801c34c:	2c30      	cmp	r4, #48	@ 0x30
 801c34e:	f88e 3000 	strb.w	r3, [lr]
 801c352:	d10d      	bne.n	801c370 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801c354:	f88c 3000 	strb.w	r3, [ip]
 801c358:	6803      	ldr	r3, [r0, #0]
 801c35a:	b10b      	cbz	r3, 801c360 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 801c35c:	3302      	adds	r3, #2
 801c35e:	6003      	str	r3, [r0, #0]
 801c360:	680b      	ldr	r3, [r1, #0]
 801c362:	b10b      	cbz	r3, 801c368 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 801c364:	3301      	adds	r3, #1
 801c366:	600b      	str	r3, [r1, #0]
 801c368:	6803      	ldr	r3, [r0, #0]
 801c36a:	2b00      	cmp	r3, #0
 801c36c:	d02f      	beq.n	801c3ce <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 801c36e:	881c      	ldrh	r4, [r3, #0]
 801c370:	2c2a      	cmp	r4, #42	@ 0x2a
 801c372:	d135      	bne.n	801c3e0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801c374:	f04f 33ff 	mov.w	r3, #4294967295
 801c378:	6033      	str	r3, [r6, #0]
 801c37a:	6803      	ldr	r3, [r0, #0]
 801c37c:	b10b      	cbz	r3, 801c382 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 801c37e:	3302      	adds	r3, #2
 801c380:	6003      	str	r3, [r0, #0]
 801c382:	680b      	ldr	r3, [r1, #0]
 801c384:	b10b      	cbz	r3, 801c38a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 801c386:	3301      	adds	r3, #1
 801c388:	600b      	str	r3, [r1, #0]
 801c38a:	6803      	ldr	r3, [r0, #0]
 801c38c:	b31b      	cbz	r3, 801c3d6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 801c38e:	881c      	ldrh	r4, [r3, #0]
 801c390:	2c2e      	cmp	r4, #46	@ 0x2e
 801c392:	d11a      	bne.n	801c3ca <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801c394:	2301      	movs	r3, #1
 801c396:	703b      	strb	r3, [r7, #0]
 801c398:	6803      	ldr	r3, [r0, #0]
 801c39a:	b10b      	cbz	r3, 801c3a0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 801c39c:	3302      	adds	r3, #2
 801c39e:	6003      	str	r3, [r0, #0]
 801c3a0:	680b      	ldr	r3, [r1, #0]
 801c3a2:	b10b      	cbz	r3, 801c3a8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 801c3a4:	3301      	adds	r3, #1
 801c3a6:	600b      	str	r3, [r1, #0]
 801c3a8:	6803      	ldr	r3, [r0, #0]
 801c3aa:	2b00      	cmp	r3, #0
 801c3ac:	d036      	beq.n	801c41c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 801c3ae:	881b      	ldrh	r3, [r3, #0]
 801c3b0:	2b2a      	cmp	r3, #42	@ 0x2a
 801c3b2:	d137      	bne.n	801c424 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801c3b4:	f04f 33ff 	mov.w	r3, #4294967295
 801c3b8:	602b      	str	r3, [r5, #0]
 801c3ba:	6803      	ldr	r3, [r0, #0]
 801c3bc:	b10b      	cbz	r3, 801c3c2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 801c3be:	3302      	adds	r3, #2
 801c3c0:	6003      	str	r3, [r0, #0]
 801c3c2:	680b      	ldr	r3, [r1, #0]
 801c3c4:	b10b      	cbz	r3, 801c3ca <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801c3c6:	3301      	adds	r3, #1
 801c3c8:	600b      	str	r3, [r1, #0]
 801c3ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c3ce:	680c      	ldr	r4, [r1, #0]
 801c3d0:	b134      	cbz	r4, 801c3e0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801c3d2:	7824      	ldrb	r4, [r4, #0]
 801c3d4:	e7cc      	b.n	801c370 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801c3d6:	680b      	ldr	r3, [r1, #0]
 801c3d8:	2b00      	cmp	r3, #0
 801c3da:	d0f6      	beq.n	801c3ca <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801c3dc:	781c      	ldrb	r4, [r3, #0]
 801c3de:	e7d7      	b.n	801c390 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801c3e0:	2300      	movs	r3, #0
 801c3e2:	220a      	movs	r2, #10
 801c3e4:	6033      	str	r3, [r6, #0]
 801c3e6:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801c3ea:	fa1f f38c 	uxth.w	r3, ip
 801c3ee:	2b09      	cmp	r3, #9
 801c3f0:	d8ce      	bhi.n	801c390 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801c3f2:	6833      	ldr	r3, [r6, #0]
 801c3f4:	fb02 c303 	mla	r3, r2, r3, ip
 801c3f8:	6033      	str	r3, [r6, #0]
 801c3fa:	6803      	ldr	r3, [r0, #0]
 801c3fc:	b10b      	cbz	r3, 801c402 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 801c3fe:	3302      	adds	r3, #2
 801c400:	6003      	str	r3, [r0, #0]
 801c402:	680b      	ldr	r3, [r1, #0]
 801c404:	b10b      	cbz	r3, 801c40a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 801c406:	3301      	adds	r3, #1
 801c408:	600b      	str	r3, [r1, #0]
 801c40a:	6803      	ldr	r3, [r0, #0]
 801c40c:	b10b      	cbz	r3, 801c412 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 801c40e:	881c      	ldrh	r4, [r3, #0]
 801c410:	e7e9      	b.n	801c3e6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801c412:	680c      	ldr	r4, [r1, #0]
 801c414:	2c00      	cmp	r4, #0
 801c416:	d0e6      	beq.n	801c3e6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801c418:	7824      	ldrb	r4, [r4, #0]
 801c41a:	e7e4      	b.n	801c3e6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801c41c:	680b      	ldr	r3, [r1, #0]
 801c41e:	b10b      	cbz	r3, 801c424 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801c420:	781b      	ldrb	r3, [r3, #0]
 801c422:	e7c5      	b.n	801c3b0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 801c424:	2200      	movs	r2, #0
 801c426:	240a      	movs	r4, #10
 801c428:	602a      	str	r2, [r5, #0]
 801c42a:	3b30      	subs	r3, #48	@ 0x30
 801c42c:	682a      	ldr	r2, [r5, #0]
 801c42e:	b29e      	uxth	r6, r3
 801c430:	2e09      	cmp	r6, #9
 801c432:	d813      	bhi.n	801c45c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 801c434:	fb04 3302 	mla	r3, r4, r2, r3
 801c438:	602b      	str	r3, [r5, #0]
 801c43a:	6803      	ldr	r3, [r0, #0]
 801c43c:	b10b      	cbz	r3, 801c442 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 801c43e:	3302      	adds	r3, #2
 801c440:	6003      	str	r3, [r0, #0]
 801c442:	680b      	ldr	r3, [r1, #0]
 801c444:	b10b      	cbz	r3, 801c44a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 801c446:	3301      	adds	r3, #1
 801c448:	600b      	str	r3, [r1, #0]
 801c44a:	6803      	ldr	r3, [r0, #0]
 801c44c:	b10b      	cbz	r3, 801c452 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 801c44e:	881b      	ldrh	r3, [r3, #0]
 801c450:	e7eb      	b.n	801c42a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801c452:	680b      	ldr	r3, [r1, #0]
 801c454:	2b00      	cmp	r3, #0
 801c456:	d0e8      	beq.n	801c42a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801c458:	781b      	ldrb	r3, [r3, #0]
 801c45a:	e7e6      	b.n	801c42a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801c45c:	2a06      	cmp	r2, #6
 801c45e:	bfa8      	it	ge
 801c460:	2206      	movge	r2, #6
 801c462:	602a      	str	r2, [r5, #0]
 801c464:	e7b1      	b.n	801c3ca <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

0801c466 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 801c466:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c46a:	b0a3      	sub	sp, #140	@ 0x8c
 801c46c:	2600      	movs	r6, #0
 801c46e:	4607      	mov	r7, r0
 801c470:	4688      	mov	r8, r1
 801c472:	f10d 0944 	add.w	r9, sp, #68	@ 0x44
 801c476:	4631      	mov	r1, r6
 801c478:	9c2c      	ldr	r4, [sp, #176]	@ 0xb0
 801c47a:	4648      	mov	r0, r9
 801c47c:	960d      	str	r6, [sp, #52]	@ 0x34
 801c47e:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801c482:	2242      	movs	r2, #66	@ 0x42
 801c484:	f00f f84c 	bl	802b520 <memset>
 801c488:	b15f      	cbz	r7, 801c4a2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 801c48a:	f108 3aff 	add.w	sl, r8, #4294967295
 801c48e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c490:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c492:	b152      	cbz	r2, 801c4aa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 801c494:	8812      	ldrh	r2, [r2, #0]
 801c496:	b10a      	cbz	r2, 801c49c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801c498:	459a      	cmp	sl, r3
 801c49a:	dc2e      	bgt.n	801c4fa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 801c49c:	2200      	movs	r2, #0
 801c49e:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801c4a2:	4638      	mov	r0, r7
 801c4a4:	b023      	add	sp, #140	@ 0x8c
 801c4a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c4aa:	9a08      	ldr	r2, [sp, #32]
 801c4ac:	2a00      	cmp	r2, #0
 801c4ae:	d0f5      	beq.n	801c49c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801c4b0:	7812      	ldrb	r2, [r2, #0]
 801c4b2:	e7f0      	b.n	801c496 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 801c4b4:	2d00      	cmp	r5, #0
 801c4b6:	d0ea      	beq.n	801c48e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801c4b8:	782a      	ldrb	r2, [r5, #0]
 801c4ba:	b142      	cbz	r2, 801c4ce <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 801c4bc:	2a25      	cmp	r2, #37	@ 0x25
 801c4be:	d001      	beq.n	801c4c4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 801c4c0:	459a      	cmp	sl, r3
 801c4c2:	dc08      	bgt.n	801c4d6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 801c4c4:	f1bb 0f00 	cmp.w	fp, #0
 801c4c8:	d121      	bne.n	801c50e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 801c4ca:	2d00      	cmp	r5, #0
 801c4cc:	d0df      	beq.n	801c48e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801c4ce:	782a      	ldrb	r2, [r5, #0]
 801c4d0:	f04f 0b00 	mov.w	fp, #0
 801c4d4:	e01d      	b.n	801c512 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 801c4d6:	f1bb 0f00 	cmp.w	fp, #0
 801c4da:	d077      	beq.n	801c5cc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
 801c4dc:	f8bb 2000 	ldrh.w	r2, [fp]
 801c4e0:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801c4e4:	f1bb 0f00 	cmp.w	fp, #0
 801c4e8:	d002      	beq.n	801c4f0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 801c4ea:	f10b 0202 	add.w	r2, fp, #2
 801c4ee:	9209      	str	r2, [sp, #36]	@ 0x24
 801c4f0:	b10d      	cbz	r5, 801c4f6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 801c4f2:	3501      	adds	r5, #1
 801c4f4:	9508      	str	r5, [sp, #32]
 801c4f6:	3301      	adds	r3, #1
 801c4f8:	930d      	str	r3, [sp, #52]	@ 0x34
 801c4fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c4fc:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 801c500:	f1bb 0f00 	cmp.w	fp, #0
 801c504:	d0d6      	beq.n	801c4b4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 801c506:	f8bb 2000 	ldrh.w	r2, [fp]
 801c50a:	2a00      	cmp	r2, #0
 801c50c:	d1d6      	bne.n	801c4bc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 801c50e:	f8bb 2000 	ldrh.w	r2, [fp]
 801c512:	2a00      	cmp	r2, #0
 801c514:	d0bb      	beq.n	801c48e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801c516:	459a      	cmp	sl, r3
 801c518:	ddb9      	ble.n	801c48e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801c51a:	f8ad 6032 	strh.w	r6, [sp, #50]	@ 0x32
 801c51e:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 801c522:	f88d 602e 	strb.w	r6, [sp, #46]	@ 0x2e
 801c526:	f88d 602f 	strb.w	r6, [sp, #47]	@ 0x2f
 801c52a:	f88d 6030 	strb.w	r6, [sp, #48]	@ 0x30
 801c52e:	960e      	str	r6, [sp, #56]	@ 0x38
 801c530:	f88d 6031 	strb.w	r6, [sp, #49]	@ 0x31
 801c534:	960f      	str	r6, [sp, #60]	@ 0x3c
 801c536:	f1bb 0f00 	cmp.w	fp, #0
 801c53a:	d002      	beq.n	801c542 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 801c53c:	f10b 0302 	add.w	r3, fp, #2
 801c540:	9309      	str	r3, [sp, #36]	@ 0x24
 801c542:	b10d      	cbz	r5, 801c548 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 801c544:	1c6b      	adds	r3, r5, #1
 801c546:	9308      	str	r3, [sp, #32]
 801c548:	ab0f      	add	r3, sp, #60	@ 0x3c
 801c54a:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 801c54e:	a908      	add	r1, sp, #32
 801c550:	a809      	add	r0, sp, #36	@ 0x24
 801c552:	9305      	str	r3, [sp, #20]
 801c554:	f10d 0331 	add.w	r3, sp, #49	@ 0x31
 801c558:	9304      	str	r3, [sp, #16]
 801c55a:	ab0e      	add	r3, sp, #56	@ 0x38
 801c55c:	9303      	str	r3, [sp, #12]
 801c55e:	ab0c      	add	r3, sp, #48	@ 0x30
 801c560:	9302      	str	r3, [sp, #8]
 801c562:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 801c566:	9301      	str	r3, [sp, #4]
 801c568:	f10d 032e 	add.w	r3, sp, #46	@ 0x2e
 801c56c:	9300      	str	r3, [sp, #0]
 801c56e:	f10d 032d 	add.w	r3, sp, #45	@ 0x2d
 801c572:	f7ff fea8 	bl	801c2c6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 801c576:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c578:	2b00      	cmp	r3, #0
 801c57a:	bfbf      	itttt	lt
 801c57c:	6823      	ldrlt	r3, [r4, #0]
 801c57e:	3404      	addlt	r4, #4
 801c580:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801c584:	930e      	strlt	r3, [sp, #56]	@ 0x38
 801c586:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c588:	2b00      	cmp	r3, #0
 801c58a:	bfbe      	ittt	lt
 801c58c:	6823      	ldrlt	r3, [r4, #0]
 801c58e:	3404      	addlt	r4, #4
 801c590:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801c594:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801c598:	bfb8      	it	lt
 801c59a:	930f      	strlt	r3, [sp, #60]	@ 0x3c
 801c59c:	b1d9      	cbz	r1, 801c5d6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
 801c59e:	880b      	ldrh	r3, [r1, #0]
 801c5a0:	2b69      	cmp	r3, #105	@ 0x69
 801c5a2:	d01f      	beq.n	801c5e4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801c5a4:	d82f      	bhi.n	801c606 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
 801c5a6:	2b58      	cmp	r3, #88	@ 0x58
 801c5a8:	d01c      	beq.n	801c5e4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801c5aa:	d818      	bhi.n	801c5de <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
 801c5ac:	2b25      	cmp	r3, #37	@ 0x25
 801c5ae:	d034      	beq.n	801c61a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
 801c5b0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c5b2:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 801c5b6:	f1bb 0f00 	cmp.w	fp, #0
 801c5ba:	f000 80b7 	beq.w	801c72c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
 801c5be:	f8bb 5000 	ldrh.w	r5, [fp]
 801c5c2:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 801c5c6:	3301      	adds	r3, #1
 801c5c8:	930d      	str	r3, [sp, #52]	@ 0x34
 801c5ca:	e029      	b.n	801c620 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801c5cc:	b10d      	cbz	r5, 801c5d2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
 801c5ce:	782a      	ldrb	r2, [r5, #0]
 801c5d0:	e786      	b.n	801c4e0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801c5d2:	462a      	mov	r2, r5
 801c5d4:	e784      	b.n	801c4e0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801c5d6:	2a00      	cmp	r2, #0
 801c5d8:	d0ea      	beq.n	801c5b0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801c5da:	7813      	ldrb	r3, [r2, #0]
 801c5dc:	e7e0      	b.n	801c5a0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
 801c5de:	3b63      	subs	r3, #99	@ 0x63
 801c5e0:	2b01      	cmp	r3, #1
 801c5e2:	d8e5      	bhi.n	801c5b0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801c5e4:	f8cd 9040 	str.w	r9, [sp, #64]	@ 0x40
 801c5e8:	b329      	cbz	r1, 801c636 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
 801c5ea:	880b      	ldrh	r3, [r1, #0]
 801c5ec:	2b69      	cmp	r3, #105	@ 0x69
 801c5ee:	d063      	beq.n	801c6b8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801c5f0:	d825      	bhi.n	801c63e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
 801c5f2:	2b63      	cmp	r3, #99	@ 0x63
 801c5f4:	d038      	beq.n	801c668 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
 801c5f6:	2b64      	cmp	r3, #100	@ 0x64
 801c5f8:	d05e      	beq.n	801c6b8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801c5fa:	2b58      	cmp	r3, #88	@ 0x58
 801c5fc:	d07a      	beq.n	801c6f4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
 801c5fe:	f8ad 6044 	strh.w	r6, [sp, #68]	@ 0x44
 801c602:	4625      	mov	r5, r4
 801c604:	e036      	b.n	801c674 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801c606:	2b73      	cmp	r3, #115	@ 0x73
 801c608:	d0ec      	beq.n	801c5e4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801c60a:	d802      	bhi.n	801c612 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
 801c60c:	2b6f      	cmp	r3, #111	@ 0x6f
 801c60e:	d1cf      	bne.n	801c5b0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801c610:	e7e8      	b.n	801c5e4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801c612:	2b75      	cmp	r3, #117	@ 0x75
 801c614:	d0e6      	beq.n	801c5e4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801c616:	2b78      	cmp	r3, #120	@ 0x78
 801c618:	e7f9      	b.n	801c60e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
 801c61a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801c61c:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 801c620:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c622:	b10b      	cbz	r3, 801c628 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
 801c624:	3302      	adds	r3, #2
 801c626:	9309      	str	r3, [sp, #36]	@ 0x24
 801c628:	9b08      	ldr	r3, [sp, #32]
 801c62a:	2b00      	cmp	r3, #0
 801c62c:	f43f af2f 	beq.w	801c48e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801c630:	3301      	adds	r3, #1
 801c632:	9308      	str	r3, [sp, #32]
 801c634:	e72b      	b.n	801c48e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801c636:	2a00      	cmp	r2, #0
 801c638:	d0e1      	beq.n	801c5fe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801c63a:	7813      	ldrb	r3, [r2, #0]
 801c63c:	e7d6      	b.n	801c5ec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
 801c63e:	2b73      	cmp	r3, #115	@ 0x73
 801c640:	d036      	beq.n	801c6b0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
 801c642:	d807      	bhi.n	801c654 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
 801c644:	2b6f      	cmp	r3, #111	@ 0x6f
 801c646:	d1da      	bne.n	801c5fe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801c648:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801c64a:	1d25      	adds	r5, r4, #4
 801c64c:	2308      	movs	r3, #8
 801c64e:	eba8 0202 	sub.w	r2, r8, r2
 801c652:	e049      	b.n	801c6e8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801c654:	2b75      	cmp	r3, #117	@ 0x75
 801c656:	d042      	beq.n	801c6de <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
 801c658:	2b78      	cmp	r3, #120	@ 0x78
 801c65a:	d1d0      	bne.n	801c5fe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801c65c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801c65e:	1d25      	adds	r5, r4, #4
 801c660:	2310      	movs	r3, #16
 801c662:	eba8 0202 	sub.w	r2, r8, r2
 801c666:	e03f      	b.n	801c6e8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801c668:	6823      	ldr	r3, [r4, #0]
 801c66a:	1d25      	adds	r5, r4, #4
 801c66c:	f8ad 6046 	strh.w	r6, [sp, #70]	@ 0x46
 801c670:	f8ad 3044 	strh.w	r3, [sp, #68]	@ 0x44
 801c674:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c676:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 801c67a:	2b00      	cmp	r3, #0
 801c67c:	d051      	beq.n	801c722 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
 801c67e:	881a      	ldrh	r2, [r3, #0]
 801c680:	a80d      	add	r0, sp, #52	@ 0x34
 801c682:	f89d 3031 	ldrb.w	r3, [sp, #49]	@ 0x31
 801c686:	462c      	mov	r4, r5
 801c688:	9005      	str	r0, [sp, #20]
 801c68a:	f89d 002d 	ldrb.w	r0, [sp, #45]	@ 0x2d
 801c68e:	9004      	str	r0, [sp, #16]
 801c690:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801c692:	9003      	str	r0, [sp, #12]
 801c694:	f89d 0030 	ldrb.w	r0, [sp, #48]	@ 0x30
 801c698:	9002      	str	r0, [sp, #8]
 801c69a:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801c69c:	9001      	str	r0, [sp, #4]
 801c69e:	f89d 002f 	ldrb.w	r0, [sp, #47]	@ 0x2f
 801c6a2:	e9cd 8706 	strd	r8, r7, [sp, #24]
 801c6a6:	9000      	str	r0, [sp, #0]
 801c6a8:	a810      	add	r0, sp, #64	@ 0x40
 801c6aa:	f7ff fd49 	bl	801c140 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 801c6ae:	e7b7      	b.n	801c620 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801c6b0:	1d25      	adds	r5, r4, #4
 801c6b2:	6823      	ldr	r3, [r4, #0]
 801c6b4:	9310      	str	r3, [sp, #64]	@ 0x40
 801c6b6:	e7dd      	b.n	801c674 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801c6b8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801c6ba:	230a      	movs	r3, #10
 801c6bc:	4649      	mov	r1, r9
 801c6be:	6820      	ldr	r0, [r4, #0]
 801c6c0:	eba8 0202 	sub.w	r2, r8, r2
 801c6c4:	1d25      	adds	r5, r4, #4
 801c6c6:	b292      	uxth	r2, r2
 801c6c8:	f7ff fcf0 	bl	801c0ac <_ZN8touchgfx7Unicode4itoaElPtti.part.2>
 801c6cc:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 801c6d0:	2b2d      	cmp	r3, #45	@ 0x2d
 801c6d2:	d1cf      	bne.n	801c674 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801c6d4:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801c6d8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c6da:	3302      	adds	r3, #2
 801c6dc:	e7ea      	b.n	801c6b4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
 801c6de:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801c6e0:	1d25      	adds	r5, r4, #4
 801c6e2:	230a      	movs	r3, #10
 801c6e4:	eba8 0202 	sub.w	r2, r8, r2
 801c6e8:	b292      	uxth	r2, r2
 801c6ea:	4649      	mov	r1, r9
 801c6ec:	6820      	ldr	r0, [r4, #0]
 801c6ee:	f7ff fd09 	bl	801c104 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 801c6f2:	e7bf      	b.n	801c674 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801c6f4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801c6f6:	2310      	movs	r3, #16
 801c6f8:	4649      	mov	r1, r9
 801c6fa:	6820      	ldr	r0, [r4, #0]
 801c6fc:	eba8 0202 	sub.w	r2, r8, r2
 801c700:	1d25      	adds	r5, r4, #4
 801c702:	b292      	uxth	r2, r2
 801c704:	f7ff fcfe 	bl	801c104 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 801c708:	f10d 0242 	add.w	r2, sp, #66	@ 0x42
 801c70c:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801c710:	2b00      	cmp	r3, #0
 801c712:	d0af      	beq.n	801c674 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801c714:	f1a3 0161 	sub.w	r1, r3, #97	@ 0x61
 801c718:	2919      	cmp	r1, #25
 801c71a:	d8f7      	bhi.n	801c70c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801c71c:	3b20      	subs	r3, #32
 801c71e:	8013      	strh	r3, [r2, #0]
 801c720:	e7f4      	b.n	801c70c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801c722:	9a08      	ldr	r2, [sp, #32]
 801c724:	2a00      	cmp	r2, #0
 801c726:	d0ab      	beq.n	801c680 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801c728:	7812      	ldrb	r2, [r2, #0]
 801c72a:	e7a9      	b.n	801c680 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801c72c:	2d00      	cmp	r5, #0
 801c72e:	f43f af48 	beq.w	801c5c2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
 801c732:	782d      	ldrb	r5, [r5, #0]
 801c734:	e745      	b.n	801c5c2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

0801c736 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801c736:	b507      	push	{r0, r1, r2, lr}
 801c738:	9300      	str	r3, [sp, #0]
 801c73a:	4613      	mov	r3, r2
 801c73c:	2200      	movs	r2, #0
 801c73e:	f7ff fe92 	bl	801c466 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 801c742:	b003      	add	sp, #12
 801c744:	f85d fb04 	ldr.w	pc, [sp], #4

0801c748 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 801c748:	b40c      	push	{r2, r3}
 801c74a:	b507      	push	{r0, r1, r2, lr}
 801c74c:	ab04      	add	r3, sp, #16
 801c74e:	f853 2b04 	ldr.w	r2, [r3], #4
 801c752:	9301      	str	r3, [sp, #4]
 801c754:	f7ff ffef 	bl	801c736 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 801c758:	b003      	add	sp, #12
 801c75a:	f85d eb04 	ldr.w	lr, [sp], #4
 801c75e:	b002      	add	sp, #8
 801c760:	4770      	bx	lr
	...

0801c764 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801c764:	4b01      	ldr	r3, [pc, #4]	@ (801c76c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801c766:	6018      	str	r0, [r3, #0]
 801c768:	4770      	bx	lr
 801c76a:	bf00      	nop
 801c76c:	20029f40 	.word	0x20029f40

0801c770 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801c770:	4b06      	ldr	r3, [pc, #24]	@ (801c78c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801c772:	881a      	ldrh	r2, [r3, #0]
 801c774:	4282      	cmp	r2, r0
 801c776:	d807      	bhi.n	801c788 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801c778:	4b05      	ldr	r3, [pc, #20]	@ (801c790 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801c77a:	881b      	ldrh	r3, [r3, #0]
 801c77c:	4413      	add	r3, r2
 801c77e:	4298      	cmp	r0, r3
 801c780:	bfac      	ite	ge
 801c782:	2000      	movge	r0, #0
 801c784:	2001      	movlt	r0, #1
 801c786:	4770      	bx	lr
 801c788:	2000      	movs	r0, #0
 801c78a:	4770      	bx	lr
 801c78c:	20029f60 	.word	0x20029f60
 801c790:	20029f64 	.word	0x20029f64

0801c794 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801c794:	b508      	push	{r3, lr}
 801c796:	4601      	mov	r1, r0
 801c798:	f7ff ffea 	bl	801c770 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801c79c:	b118      	cbz	r0, 801c7a6 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801c79e:	4b02      	ldr	r3, [pc, #8]	@ (801c7a8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801c7a0:	681b      	ldr	r3, [r3, #0]
 801c7a2:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801c7a6:	bd08      	pop	{r3, pc}
 801c7a8:	20029f44 	.word	0x20029f44

0801c7ac <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>:
 801c7ac:	b538      	push	{r3, r4, r5, lr}
 801c7ae:	4604      	mov	r4, r0
 801c7b0:	f7ff ffde 	bl	801c770 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801c7b4:	b188      	cbz	r0, 801c7da <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x2e>
 801c7b6:	4b09      	ldr	r3, [pc, #36]	@ (801c7dc <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x30>)
 801c7b8:	881a      	ldrh	r2, [r3, #0]
 801c7ba:	4b09      	ldr	r3, [pc, #36]	@ (801c7e0 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x34>)
 801c7bc:	1aa4      	subs	r4, r4, r2
 801c7be:	220e      	movs	r2, #14
 801c7c0:	681d      	ldr	r5, [r3, #0]
 801c7c2:	4362      	muls	r2, r4
 801c7c4:	18ac      	adds	r4, r5, r2
 801c7c6:	7b23      	ldrb	r3, [r4, #12]
 801c7c8:	f013 0320 	ands.w	r3, r3, #32
 801c7cc:	bf17      	itett	ne
 801c7ce:	680b      	ldrne	r3, [r1, #0]
 801c7d0:	4618      	moveq	r0, r3
 801c7d2:	50ab      	strne	r3, [r5, r2]
 801c7d4:	684b      	ldrne	r3, [r1, #4]
 801c7d6:	bf18      	it	ne
 801c7d8:	6063      	strne	r3, [r4, #4]
 801c7da:	bd38      	pop	{r3, r4, r5, pc}
 801c7dc:	20029f60 	.word	0x20029f60
 801c7e0:	20029f48 	.word	0x20029f48

0801c7e4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>:
 801c7e4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801c7e8:	4606      	mov	r6, r0
 801c7ea:	460c      	mov	r4, r1
 801c7ec:	f7ff ffc0 	bl	801c770 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801c7f0:	b918      	cbnz	r0, 801c7fa <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x16>
 801c7f2:	2000      	movs	r0, #0
 801c7f4:	b002      	add	sp, #8
 801c7f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c7fa:	4608      	mov	r0, r1
 801c7fc:	f7f5 ff97 	bl	801272e <_ZNK8touchgfx4Rect7isEmptyEv>
 801c800:	2800      	cmp	r0, #0
 801c802:	d1f6      	bne.n	801c7f2 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801c804:	4b3f      	ldr	r3, [pc, #252]	@ (801c904 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x120>)
 801c806:	f8df 9100 	ldr.w	r9, [pc, #256]	@ 801c908 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x124>
 801c80a:	881d      	ldrh	r5, [r3, #0]
 801c80c:	f8d9 a000 	ldr.w	sl, [r9]
 801c810:	46c8      	mov	r8, r9
 801c812:	1b73      	subs	r3, r6, r5
 801c814:	250e      	movs	r5, #14
 801c816:	435d      	muls	r5, r3
 801c818:	eb0a 0705 	add.w	r7, sl, r5
 801c81c:	7b3b      	ldrb	r3, [r7, #12]
 801c81e:	f013 0f20 	tst.w	r3, #32
 801c822:	d0e6      	beq.n	801c7f2 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801c824:	4621      	mov	r1, r4
 801c826:	4638      	mov	r0, r7
 801c828:	f7fc fa44 	bl	8018cb4 <_ZNK8touchgfx4Rect8includesERKS0_>
 801c82c:	2800      	cmp	r0, #0
 801c82e:	d1e1      	bne.n	801c7f4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 801c830:	4639      	mov	r1, r7
 801c832:	4620      	mov	r0, r4
 801c834:	f7fc fa3e 	bl	8018cb4 <_ZNK8touchgfx4Rect8includesERKS0_>
 801c838:	b108      	cbz	r0, 801c83e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x5a>
 801c83a:	4621      	mov	r1, r4
 801c83c:	e020      	b.n	801c880 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9c>
 801c83e:	f9b4 2000 	ldrsh.w	r2, [r4]
 801c842:	f93a 3005 	ldrsh.w	r3, [sl, r5]
 801c846:	429a      	cmp	r2, r3
 801c848:	d11e      	bne.n	801c888 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801c84a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801c84e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801c852:	429a      	cmp	r2, r3
 801c854:	d118      	bne.n	801c888 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801c856:	6820      	ldr	r0, [r4, #0]
 801c858:	466b      	mov	r3, sp
 801c85a:	6861      	ldr	r1, [r4, #4]
 801c85c:	c303      	stmia	r3!, {r0, r1}
 801c85e:	4639      	mov	r1, r7
 801c860:	4668      	mov	r0, sp
 801c862:	f7f8 f862 	bl	801492a <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801c866:	f8d9 3000 	ldr.w	r3, [r9]
 801c86a:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801c86e:	442b      	add	r3, r5
 801c870:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801c874:	4413      	add	r3, r2
 801c876:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 801c87a:	4293      	cmp	r3, r2
 801c87c:	dc04      	bgt.n	801c888 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801c87e:	4669      	mov	r1, sp
 801c880:	4630      	mov	r0, r6
 801c882:	f7ff ff93 	bl	801c7ac <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>
 801c886:	e7b5      	b.n	801c7f4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 801c888:	f8d8 3000 	ldr.w	r3, [r8]
 801c88c:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801c890:	442b      	add	r3, r5
 801c892:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801c896:	4291      	cmp	r1, r2
 801c898:	d119      	bne.n	801c8ce <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 801c89a:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801c89e:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801c8a2:	4291      	cmp	r1, r2
 801c8a4:	d113      	bne.n	801c8ce <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 801c8a6:	6820      	ldr	r0, [r4, #0]
 801c8a8:	466a      	mov	r2, sp
 801c8aa:	6861      	ldr	r1, [r4, #4]
 801c8ac:	c203      	stmia	r2!, {r0, r1}
 801c8ae:	4619      	mov	r1, r3
 801c8b0:	4668      	mov	r0, sp
 801c8b2:	f7f8 f83a 	bl	801492a <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801c8b6:	f8d8 3000 	ldr.w	r3, [r8]
 801c8ba:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801c8be:	442b      	add	r3, r5
 801c8c0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801c8c4:	4413      	add	r3, r2
 801c8c6:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801c8ca:	4293      	cmp	r3, r2
 801c8cc:	ddd7      	ble.n	801c87e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9a>
 801c8ce:	4620      	mov	r0, r4
 801c8d0:	f7f5 ff2d 	bl	801272e <_ZNK8touchgfx4Rect7isEmptyEv>
 801c8d4:	b990      	cbnz	r0, 801c8fc <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x118>
 801c8d6:	88a7      	ldrh	r7, [r4, #4]
 801c8d8:	88e3      	ldrh	r3, [r4, #6]
 801c8da:	fb17 f703 	smulbb	r7, r7, r3
 801c8de:	f8d8 3000 	ldr.w	r3, [r8]
 801c8e2:	441d      	add	r5, r3
 801c8e4:	4628      	mov	r0, r5
 801c8e6:	f7f5 ff22 	bl	801272e <_ZNK8touchgfx4Rect7isEmptyEv>
 801c8ea:	b948      	cbnz	r0, 801c900 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x11c>
 801c8ec:	88ab      	ldrh	r3, [r5, #4]
 801c8ee:	88ea      	ldrh	r2, [r5, #6]
 801c8f0:	fb13 f302 	smulbb	r3, r3, r2
 801c8f4:	42bb      	cmp	r3, r7
 801c8f6:	f6bf af7c 	bge.w	801c7f2 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801c8fa:	e79e      	b.n	801c83a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x56>
 801c8fc:	2700      	movs	r7, #0
 801c8fe:	e7ee      	b.n	801c8de <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xfa>
 801c900:	2300      	movs	r3, #0
 801c902:	e7f7      	b.n	801c8f4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x110>
 801c904:	20029f60 	.word	0x20029f60
 801c908:	20029f48 	.word	0x20029f48

0801c90c <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801c90c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c90e:	4c24      	ldr	r4, [pc, #144]	@ (801c9a0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 801c910:	6823      	ldr	r3, [r4, #0]
 801c912:	2b00      	cmp	r3, #0
 801c914:	d042      	beq.n	801c99c <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801c916:	4a23      	ldr	r2, [pc, #140]	@ (801c9a4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 801c918:	4d23      	ldr	r5, [pc, #140]	@ (801c9a8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 801c91a:	8811      	ldrh	r1, [r2, #0]
 801c91c:	f8b5 c000 	ldrh.w	ip, [r5]
 801c920:	4822      	ldr	r0, [pc, #136]	@ (801c9ac <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801c922:	4461      	add	r1, ip
 801c924:	1c4a      	adds	r2, r1, #1
 801c926:	008f      	lsls	r7, r1, #2
 801c928:	f022 0201 	bic.w	r2, r2, #1
 801c92c:	19de      	adds	r6, r3, r7
 801c92e:	0412      	lsls	r2, r2, #16
 801c930:	6006      	str	r6, [r0, #0]
 801c932:	4e1f      	ldr	r6, [pc, #124]	@ (801c9b0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801c934:	0c12      	lsrs	r2, r2, #16
 801c936:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 801c93a:	19da      	adds	r2, r3, r7
 801c93c:	6032      	str	r2, [r6, #0]
 801c93e:	220e      	movs	r2, #14
 801c940:	fb02 f20c 	mul.w	r2, r2, ip
 801c944:	3203      	adds	r2, #3
 801c946:	f022 0203 	bic.w	r2, r2, #3
 801c94a:	443a      	add	r2, r7
 801c94c:	4f19      	ldr	r7, [pc, #100]	@ (801c9b4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801c94e:	4413      	add	r3, r2
 801c950:	603b      	str	r3, [r7, #0]
 801c952:	2300      	movs	r3, #0
 801c954:	4f18      	ldr	r7, [pc, #96]	@ (801c9b8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801c956:	469c      	mov	ip, r3
 801c958:	803b      	strh	r3, [r7, #0]
 801c95a:	4f18      	ldr	r7, [pc, #96]	@ (801c9bc <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801c95c:	683f      	ldr	r7, [r7, #0]
 801c95e:	1aba      	subs	r2, r7, r2
 801c960:	4f17      	ldr	r7, [pc, #92]	@ (801c9c0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801c962:	603a      	str	r2, [r7, #0]
 801c964:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 801c968:	4a16      	ldr	r2, [pc, #88]	@ (801c9c4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801c96a:	8013      	strh	r3, [r2, #0]
 801c96c:	428b      	cmp	r3, r1
 801c96e:	d10d      	bne.n	801c98c <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 801c970:	882d      	ldrh	r5, [r5, #0]
 801c972:	2300      	movs	r3, #0
 801c974:	6830      	ldr	r0, [r6, #0]
 801c976:	240e      	movs	r4, #14
 801c978:	429d      	cmp	r5, r3
 801c97a:	d90f      	bls.n	801c99c <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801c97c:	fb04 0203 	mla	r2, r4, r3, r0
 801c980:	3301      	adds	r3, #1
 801c982:	7b11      	ldrb	r1, [r2, #12]
 801c984:	f36f 1145 	bfc	r1, #5, #1
 801c988:	7311      	strb	r1, [r2, #12]
 801c98a:	e7f5      	b.n	801c978 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 801c98c:	6822      	ldr	r2, [r4, #0]
 801c98e:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801c992:	6802      	ldr	r2, [r0, #0]
 801c994:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 801c998:	3301      	adds	r3, #1
 801c99a:	e7e7      	b.n	801c96c <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 801c99c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c99e:	bf00      	nop
 801c9a0:	20029f44 	.word	0x20029f44
 801c9a4:	20029f60 	.word	0x20029f60
 801c9a8:	20029f64 	.word	0x20029f64
 801c9ac:	20029f58 	.word	0x20029f58
 801c9b0:	20029f48 	.word	0x20029f48
 801c9b4:	20029f50 	.word	0x20029f50
 801c9b8:	20029f62 	.word	0x20029f62
 801c9bc:	20029f4c 	.word	0x20029f4c
 801c9c0:	20029f5c 	.word	0x20029f5c
 801c9c4:	20029f54 	.word	0x20029f54

0801c9c8 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801c9c8:	4b06      	ldr	r3, [pc, #24]	@ (801c9e4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 801c9ca:	681b      	ldr	r3, [r3, #0]
 801c9cc:	b943      	cbnz	r3, 801c9e0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801c9ce:	b139      	cbz	r1, 801c9e0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801c9d0:	4b05      	ldr	r3, [pc, #20]	@ (801c9e8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 801c9d2:	801a      	strh	r2, [r3, #0]
 801c9d4:	4b05      	ldr	r3, [pc, #20]	@ (801c9ec <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 801c9d6:	6019      	str	r1, [r3, #0]
 801c9d8:	4b05      	ldr	r3, [pc, #20]	@ (801c9f0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 801c9da:	6018      	str	r0, [r3, #0]
 801c9dc:	f7ff bf96 	b.w	801c90c <_ZN8touchgfx6Bitmap10clearCacheEv>
 801c9e0:	4770      	bx	lr
 801c9e2:	bf00      	nop
 801c9e4:	20029f50 	.word	0x20029f50
 801c9e8:	20029f64 	.word	0x20029f64
 801c9ec:	20029f4c 	.word	0x20029f4c
 801c9f0:	20029f44 	.word	0x20029f44

0801c9f4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801c9f4:	b470      	push	{r4, r5, r6}
 801c9f6:	4c07      	ldr	r4, [pc, #28]	@ (801ca14 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801c9f8:	4605      	mov	r5, r0
 801c9fa:	4610      	mov	r0, r2
 801c9fc:	9a03      	ldr	r2, [sp, #12]
 801c9fe:	6826      	ldr	r6, [r4, #0]
 801ca00:	b936      	cbnz	r6, 801ca10 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801ca02:	6025      	str	r5, [r4, #0]
 801ca04:	4c04      	ldr	r4, [pc, #16]	@ (801ca18 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801ca06:	8021      	strh	r1, [r4, #0]
 801ca08:	4619      	mov	r1, r3
 801ca0a:	bc70      	pop	{r4, r5, r6}
 801ca0c:	f7ff bfdc 	b.w	801c9c8 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801ca10:	bc70      	pop	{r4, r5, r6}
 801ca12:	4770      	bx	lr
 801ca14:	20029f68 	.word	0x20029f68
 801ca18:	20029f60 	.word	0x20029f60

0801ca1c <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801ca1c:	4a12      	ldr	r2, [pc, #72]	@ (801ca68 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 801ca1e:	8803      	ldrh	r3, [r0, #0]
 801ca20:	8812      	ldrh	r2, [r2, #0]
 801ca22:	4293      	cmp	r3, r2
 801ca24:	d207      	bcs.n	801ca36 <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 801ca26:	4a11      	ldr	r2, [pc, #68]	@ (801ca6c <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 801ca28:	2114      	movs	r1, #20
 801ca2a:	6812      	ldr	r2, [r2, #0]
 801ca2c:	fb01 2303 	mla	r3, r1, r3, r2
 801ca30:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 801ca34:	4770      	bx	lr
 801ca36:	490e      	ldr	r1, [pc, #56]	@ (801ca70 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801ca38:	8809      	ldrh	r1, [r1, #0]
 801ca3a:	4411      	add	r1, r2
 801ca3c:	428b      	cmp	r3, r1
 801ca3e:	da04      	bge.n	801ca4a <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 801ca40:	1a9b      	subs	r3, r3, r2
 801ca42:	4a0c      	ldr	r2, [pc, #48]	@ (801ca74 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801ca44:	210e      	movs	r1, #14
 801ca46:	6812      	ldr	r2, [r2, #0]
 801ca48:	e7f0      	b.n	801ca2c <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 801ca4a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801ca4e:	4293      	cmp	r3, r2
 801ca50:	d108      	bne.n	801ca64 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 801ca52:	4b09      	ldr	r3, [pc, #36]	@ (801ca78 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801ca54:	781b      	ldrb	r3, [r3, #0]
 801ca56:	b91b      	cbnz	r3, 801ca60 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 801ca58:	4b08      	ldr	r3, [pc, #32]	@ (801ca7c <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801ca5a:	f9b3 0000 	ldrsh.w	r0, [r3]
 801ca5e:	4770      	bx	lr
 801ca60:	4b07      	ldr	r3, [pc, #28]	@ (801ca80 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801ca62:	e7fa      	b.n	801ca5a <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 801ca64:	2000      	movs	r0, #0
 801ca66:	4770      	bx	lr
 801ca68:	20029f60 	.word	0x20029f60
 801ca6c:	20029f68 	.word	0x20029f68
 801ca70:	20029f64 	.word	0x20029f64
 801ca74:	20029f48 	.word	0x20029f48
 801ca78:	20029ed0 	.word	0x20029ed0
 801ca7c:	20029ed2 	.word	0x20029ed2
 801ca80:	20029ed4 	.word	0x20029ed4

0801ca84 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801ca84:	4a12      	ldr	r2, [pc, #72]	@ (801cad0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 801ca86:	8803      	ldrh	r3, [r0, #0]
 801ca88:	8812      	ldrh	r2, [r2, #0]
 801ca8a:	4293      	cmp	r3, r2
 801ca8c:	d207      	bcs.n	801ca9e <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 801ca8e:	4a11      	ldr	r2, [pc, #68]	@ (801cad4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 801ca90:	2114      	movs	r1, #20
 801ca92:	6812      	ldr	r2, [r2, #0]
 801ca94:	fb01 2303 	mla	r3, r1, r3, r2
 801ca98:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 801ca9c:	4770      	bx	lr
 801ca9e:	490e      	ldr	r1, [pc, #56]	@ (801cad8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801caa0:	8809      	ldrh	r1, [r1, #0]
 801caa2:	4411      	add	r1, r2
 801caa4:	428b      	cmp	r3, r1
 801caa6:	da04      	bge.n	801cab2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 801caa8:	1a9b      	subs	r3, r3, r2
 801caaa:	4a0c      	ldr	r2, [pc, #48]	@ (801cadc <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801caac:	210e      	movs	r1, #14
 801caae:	6812      	ldr	r2, [r2, #0]
 801cab0:	e7f0      	b.n	801ca94 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 801cab2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801cab6:	4293      	cmp	r3, r2
 801cab8:	d108      	bne.n	801cacc <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 801caba:	4b09      	ldr	r3, [pc, #36]	@ (801cae0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801cabc:	781b      	ldrb	r3, [r3, #0]
 801cabe:	b91b      	cbnz	r3, 801cac8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 801cac0:	4b08      	ldr	r3, [pc, #32]	@ (801cae4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801cac2:	f9b3 0000 	ldrsh.w	r0, [r3]
 801cac6:	4770      	bx	lr
 801cac8:	4b07      	ldr	r3, [pc, #28]	@ (801cae8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801caca:	e7fa      	b.n	801cac2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 801cacc:	2000      	movs	r0, #0
 801cace:	4770      	bx	lr
 801cad0:	20029f60 	.word	0x20029f60
 801cad4:	20029f68 	.word	0x20029f68
 801cad8:	20029f64 	.word	0x20029f64
 801cadc:	20029f48 	.word	0x20029f48
 801cae0:	20029ed0 	.word	0x20029ed0
 801cae4:	20029ed4 	.word	0x20029ed4
 801cae8:	20029ed2 	.word	0x20029ed2

0801caec <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801caec:	4a1f      	ldr	r2, [pc, #124]	@ (801cb6c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>)
 801caee:	b510      	push	{r4, lr}
 801caf0:	880b      	ldrh	r3, [r1, #0]
 801caf2:	8812      	ldrh	r2, [r2, #0]
 801caf4:	4293      	cmp	r3, r2
 801caf6:	d213      	bcs.n	801cb20 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 801caf8:	4a1d      	ldr	r2, [pc, #116]	@ (801cb70 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>)
 801cafa:	2114      	movs	r1, #20
 801cafc:	6812      	ldr	r2, [r2, #0]
 801cafe:	fb01 2303 	mla	r3, r1, r3, r2
 801cb02:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801cb06:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801cb0a:	8a1a      	ldrh	r2, [r3, #16]
 801cb0c:	8a5b      	ldrh	r3, [r3, #18]
 801cb0e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801cb12:	8004      	strh	r4, [r0, #0]
 801cb14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801cb18:	8041      	strh	r1, [r0, #2]
 801cb1a:	8082      	strh	r2, [r0, #4]
 801cb1c:	80c3      	strh	r3, [r0, #6]
 801cb1e:	e00e      	b.n	801cb3e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 801cb20:	4914      	ldr	r1, [pc, #80]	@ (801cb74 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x88>)
 801cb22:	8809      	ldrh	r1, [r1, #0]
 801cb24:	4411      	add	r1, r2
 801cb26:	428b      	cmp	r3, r1
 801cb28:	da0a      	bge.n	801cb40 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x54>
 801cb2a:	1a9b      	subs	r3, r3, r2
 801cb2c:	4a12      	ldr	r2, [pc, #72]	@ (801cb78 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 801cb2e:	210e      	movs	r1, #14
 801cb30:	6812      	ldr	r2, [r2, #0]
 801cb32:	fb01 2303 	mla	r3, r1, r3, r2
 801cb36:	681a      	ldr	r2, [r3, #0]
 801cb38:	6002      	str	r2, [r0, #0]
 801cb3a:	685a      	ldr	r2, [r3, #4]
 801cb3c:	6042      	str	r2, [r0, #4]
 801cb3e:	bd10      	pop	{r4, pc}
 801cb40:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801cb44:	4293      	cmp	r3, r2
 801cb46:	d10b      	bne.n	801cb60 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x74>
 801cb48:	4b0c      	ldr	r3, [pc, #48]	@ (801cb7c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801cb4a:	f9b3 1000 	ldrsh.w	r1, [r3]
 801cb4e:	4b0c      	ldr	r3, [pc, #48]	@ (801cb80 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801cb50:	8081      	strh	r1, [r0, #4]
 801cb52:	f9b3 2000 	ldrsh.w	r2, [r3]
 801cb56:	2300      	movs	r3, #0
 801cb58:	80c2      	strh	r2, [r0, #6]
 801cb5a:	8003      	strh	r3, [r0, #0]
 801cb5c:	8043      	strh	r3, [r0, #2]
 801cb5e:	e7ee      	b.n	801cb3e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 801cb60:	2300      	movs	r3, #0
 801cb62:	8003      	strh	r3, [r0, #0]
 801cb64:	8043      	strh	r3, [r0, #2]
 801cb66:	8083      	strh	r3, [r0, #4]
 801cb68:	e7d8      	b.n	801cb1c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801cb6a:	bf00      	nop
 801cb6c:	20029f60 	.word	0x20029f60
 801cb70:	20029f68 	.word	0x20029f68
 801cb74:	20029f64 	.word	0x20029f64
 801cb78:	20029f48 	.word	0x20029f48
 801cb7c:	20029ecc 	.word	0x20029ecc
 801cb80:	20029ece 	.word	0x20029ece

0801cb84 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801cb84:	4a17      	ldr	r2, [pc, #92]	@ (801cbe4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 801cb86:	8803      	ldrh	r3, [r0, #0]
 801cb88:	8812      	ldrh	r2, [r2, #0]
 801cb8a:	4293      	cmp	r3, r2
 801cb8c:	d213      	bcs.n	801cbb6 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 801cb8e:	4a16      	ldr	r2, [pc, #88]	@ (801cbe8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801cb90:	2114      	movs	r1, #20
 801cb92:	6812      	ldr	r2, [r2, #0]
 801cb94:	fb01 2303 	mla	r3, r1, r3, r2
 801cb98:	8a1a      	ldrh	r2, [r3, #16]
 801cb9a:	8919      	ldrh	r1, [r3, #8]
 801cb9c:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801cba0:	428a      	cmp	r2, r1
 801cba2:	db1d      	blt.n	801cbe0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801cba4:	8a58      	ldrh	r0, [r3, #18]
 801cba6:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801cbaa:	895b      	ldrh	r3, [r3, #10]
 801cbac:	4298      	cmp	r0, r3
 801cbae:	bfac      	ite	ge
 801cbb0:	2000      	movge	r0, #0
 801cbb2:	2001      	movlt	r0, #1
 801cbb4:	4770      	bx	lr
 801cbb6:	490d      	ldr	r1, [pc, #52]	@ (801cbec <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801cbb8:	8809      	ldrh	r1, [r1, #0]
 801cbba:	4411      	add	r1, r2
 801cbbc:	428b      	cmp	r3, r1
 801cbbe:	da0d      	bge.n	801cbdc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 801cbc0:	1a9b      	subs	r3, r3, r2
 801cbc2:	4a0b      	ldr	r2, [pc, #44]	@ (801cbf0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801cbc4:	210e      	movs	r1, #14
 801cbc6:	6812      	ldr	r2, [r2, #0]
 801cbc8:	fb01 2303 	mla	r3, r1, r3, r2
 801cbcc:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801cbd0:	891a      	ldrh	r2, [r3, #8]
 801cbd2:	4291      	cmp	r1, r2
 801cbd4:	db04      	blt.n	801cbe0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801cbd6:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801cbda:	e7e6      	b.n	801cbaa <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 801cbdc:	2000      	movs	r0, #0
 801cbde:	4770      	bx	lr
 801cbe0:	2001      	movs	r0, #1
 801cbe2:	4770      	bx	lr
 801cbe4:	20029f60 	.word	0x20029f60
 801cbe8:	20029f68 	.word	0x20029f68
 801cbec:	20029f64 	.word	0x20029f64
 801cbf0:	20029f48 	.word	0x20029f48

0801cbf4 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801cbf4:	4a12      	ldr	r2, [pc, #72]	@ (801cc40 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801cbf6:	8803      	ldrh	r3, [r0, #0]
 801cbf8:	8811      	ldrh	r1, [r2, #0]
 801cbfa:	428b      	cmp	r3, r1
 801cbfc:	d20b      	bcs.n	801cc16 <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 801cbfe:	4a11      	ldr	r2, [pc, #68]	@ (801cc44 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801cc00:	6812      	ldr	r2, [r2, #0]
 801cc02:	b112      	cbz	r2, 801cc0a <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801cc04:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801cc08:	b9c0      	cbnz	r0, 801cc3c <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 801cc0a:	4a0f      	ldr	r2, [pc, #60]	@ (801cc48 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801cc0c:	6811      	ldr	r1, [r2, #0]
 801cc0e:	2214      	movs	r2, #20
 801cc10:	4353      	muls	r3, r2
 801cc12:	58c8      	ldr	r0, [r1, r3]
 801cc14:	4770      	bx	lr
 801cc16:	4a0d      	ldr	r2, [pc, #52]	@ (801cc4c <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801cc18:	8812      	ldrh	r2, [r2, #0]
 801cc1a:	440a      	add	r2, r1
 801cc1c:	4293      	cmp	r3, r2
 801cc1e:	da04      	bge.n	801cc2a <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 801cc20:	4a08      	ldr	r2, [pc, #32]	@ (801cc44 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801cc22:	6812      	ldr	r2, [r2, #0]
 801cc24:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801cc28:	4770      	bx	lr
 801cc2a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801cc2e:	4293      	cmp	r3, r2
 801cc30:	d103      	bne.n	801cc3a <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801cc32:	4b07      	ldr	r3, [pc, #28]	@ (801cc50 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801cc34:	681b      	ldr	r3, [r3, #0]
 801cc36:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 801cc38:	4770      	bx	lr
 801cc3a:	2000      	movs	r0, #0
 801cc3c:	4770      	bx	lr
 801cc3e:	bf00      	nop
 801cc40:	20029f60 	.word	0x20029f60
 801cc44:	20029f44 	.word	0x20029f44
 801cc48:	20029f68 	.word	0x20029f68
 801cc4c:	20029f64 	.word	0x20029f64
 801cc50:	20029ed8 	.word	0x20029ed8

0801cc54 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801cc54:	4b24      	ldr	r3, [pc, #144]	@ (801cce8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801cc56:	8802      	ldrh	r2, [r0, #0]
 801cc58:	8818      	ldrh	r0, [r3, #0]
 801cc5a:	4282      	cmp	r2, r0
 801cc5c:	d221      	bcs.n	801cca2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 801cc5e:	4b23      	ldr	r3, [pc, #140]	@ (801ccec <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801cc60:	6819      	ldr	r1, [r3, #0]
 801cc62:	2314      	movs	r3, #20
 801cc64:	fb03 1302 	mla	r3, r3, r2, r1
 801cc68:	6858      	ldr	r0, [r3, #4]
 801cc6a:	2800      	cmp	r0, #0
 801cc6c:	d03a      	beq.n	801cce4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801cc6e:	4920      	ldr	r1, [pc, #128]	@ (801ccf0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801cc70:	6809      	ldr	r1, [r1, #0]
 801cc72:	2900      	cmp	r1, #0
 801cc74:	d036      	beq.n	801cce4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801cc76:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801cc7a:	2900      	cmp	r1, #0
 801cc7c:	d032      	beq.n	801cce4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801cc7e:	891a      	ldrh	r2, [r3, #8]
 801cc80:	8958      	ldrh	r0, [r3, #10]
 801cc82:	4350      	muls	r0, r2
 801cc84:	7c5a      	ldrb	r2, [r3, #17]
 801cc86:	7cdb      	ldrb	r3, [r3, #19]
 801cc88:	0952      	lsrs	r2, r2, #5
 801cc8a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801cc8e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801cc92:	2b0b      	cmp	r3, #11
 801cc94:	bf18      	it	ne
 801cc96:	0040      	lslne	r0, r0, #1
 801cc98:	3003      	adds	r0, #3
 801cc9a:	f020 0003 	bic.w	r0, r0, #3
 801cc9e:	4408      	add	r0, r1
 801cca0:	4770      	bx	lr
 801cca2:	4b14      	ldr	r3, [pc, #80]	@ (801ccf4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801cca4:	881b      	ldrh	r3, [r3, #0]
 801cca6:	4403      	add	r3, r0
 801cca8:	429a      	cmp	r2, r3
 801ccaa:	da1a      	bge.n	801cce2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801ccac:	4b12      	ldr	r3, [pc, #72]	@ (801ccf8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801ccae:	1a10      	subs	r0, r2, r0
 801ccb0:	210e      	movs	r1, #14
 801ccb2:	681b      	ldr	r3, [r3, #0]
 801ccb4:	fb01 3000 	mla	r0, r1, r0, r3
 801ccb8:	7b03      	ldrb	r3, [r0, #12]
 801ccba:	f003 031f 	and.w	r3, r3, #31
 801ccbe:	2b0b      	cmp	r3, #11
 801ccc0:	d10b      	bne.n	801ccda <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 801ccc2:	8903      	ldrh	r3, [r0, #8]
 801ccc4:	8940      	ldrh	r0, [r0, #10]
 801ccc6:	4358      	muls	r0, r3
 801ccc8:	4b09      	ldr	r3, [pc, #36]	@ (801ccf0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801ccca:	3003      	adds	r0, #3
 801cccc:	6819      	ldr	r1, [r3, #0]
 801ccce:	f020 0303 	bic.w	r3, r0, #3
 801ccd2:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801ccd6:	4418      	add	r0, r3
 801ccd8:	4770      	bx	lr
 801ccda:	2b0d      	cmp	r3, #13
 801ccdc:	d101      	bne.n	801cce2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801ccde:	300d      	adds	r0, #13
 801cce0:	4770      	bx	lr
 801cce2:	2000      	movs	r0, #0
 801cce4:	4770      	bx	lr
 801cce6:	bf00      	nop
 801cce8:	20029f60 	.word	0x20029f60
 801ccec:	20029f68 	.word	0x20029f68
 801ccf0:	20029f44 	.word	0x20029f44
 801ccf4:	20029f64 	.word	0x20029f64
 801ccf8:	20029f48 	.word	0x20029f48

0801ccfc <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801ccfc:	4a17      	ldr	r2, [pc, #92]	@ (801cd5c <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 801ccfe:	b510      	push	{r4, lr}
 801cd00:	8803      	ldrh	r3, [r0, #0]
 801cd02:	8812      	ldrh	r2, [r2, #0]
 801cd04:	4293      	cmp	r3, r2
 801cd06:	d20c      	bcs.n	801cd22 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801cd08:	4a15      	ldr	r2, [pc, #84]	@ (801cd60 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 801cd0a:	2114      	movs	r1, #20
 801cd0c:	6812      	ldr	r2, [r2, #0]
 801cd0e:	fb01 2303 	mla	r3, r1, r3, r2
 801cd12:	7c58      	ldrb	r0, [r3, #17]
 801cd14:	0942      	lsrs	r2, r0, #5
 801cd16:	7cd8      	ldrb	r0, [r3, #19]
 801cd18:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801cd1c:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801cd20:	bd10      	pop	{r4, pc}
 801cd22:	4910      	ldr	r1, [pc, #64]	@ (801cd64 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801cd24:	8809      	ldrh	r1, [r1, #0]
 801cd26:	4411      	add	r1, r2
 801cd28:	428b      	cmp	r3, r1
 801cd2a:	da09      	bge.n	801cd40 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801cd2c:	1a9b      	subs	r3, r3, r2
 801cd2e:	4a0e      	ldr	r2, [pc, #56]	@ (801cd68 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801cd30:	210e      	movs	r1, #14
 801cd32:	6812      	ldr	r2, [r2, #0]
 801cd34:	fb01 2303 	mla	r3, r1, r3, r2
 801cd38:	7b18      	ldrb	r0, [r3, #12]
 801cd3a:	f000 001f 	and.w	r0, r0, #31
 801cd3e:	e7ef      	b.n	801cd20 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801cd40:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801cd44:	4293      	cmp	r3, r2
 801cd46:	d106      	bne.n	801cd56 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801cd48:	f7e7 fbfe 	bl	8004548 <_ZN8touchgfx3HAL3lcdEv>
 801cd4c:	6803      	ldr	r3, [r0, #0]
 801cd4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cd52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801cd54:	4718      	bx	r3
 801cd56:	2000      	movs	r0, #0
 801cd58:	e7e2      	b.n	801cd20 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801cd5a:	bf00      	nop
 801cd5c:	20029f60 	.word	0x20029f60
 801cd60:	20029f68 	.word	0x20029f68
 801cd64:	20029f64 	.word	0x20029f64
 801cd68:	20029f48 	.word	0x20029f48

0801cd6c <_ZNK8touchgfx8LCD32bpp8bitDepthEv>:
 801cd6c:	2020      	movs	r0, #32
 801cd6e:	4770      	bx	lr

0801cd70 <_ZNK8touchgfx8LCD32bpp17framebufferFormatEv>:
 801cd70:	2002      	movs	r0, #2
 801cd72:	4770      	bx	lr

0801cd74 <_ZNK8touchgfx8LCD32bpp17framebufferStrideEv>:
 801cd74:	4b02      	ldr	r3, [pc, #8]	@ (801cd80 <_ZNK8touchgfx8LCD32bpp17framebufferStrideEv+0xc>)
 801cd76:	8818      	ldrh	r0, [r3, #0]
 801cd78:	0080      	lsls	r0, r0, #2
 801cd7a:	b280      	uxth	r0, r0
 801cd7c:	4770      	bx	lr
 801cd7e:	bf00      	nop
 801cd80:	20029ed2 	.word	0x20029ed2

0801cd84 <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 801cd84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cd88:	f89d c034 	ldrb.w	ip, [sp, #52]	@ 0x34
 801cd8c:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801cd8e:	f1bc 0f00 	cmp.w	ip, #0
 801cd92:	d073      	beq.n	801ce7c <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xf8>
 801cd94:	f9b3 4004 	ldrsh.w	r4, [r3, #4]
 801cd98:	2c00      	cmp	r4, #0
 801cd9a:	dd6f      	ble.n	801ce7c <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xf8>
 801cd9c:	f9b3 6006 	ldrsh.w	r6, [r3, #6]
 801cda0:	2e00      	cmp	r6, #0
 801cda2:	dd6b      	ble.n	801ce7c <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xf8>
 801cda4:	f9b3 5002 	ldrsh.w	r5, [r3, #2]
 801cda8:	4356      	muls	r6, r2
 801cdaa:	f9b3 3000 	ldrsh.w	r3, [r3]
 801cdae:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 801cdb2:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 801cdb6:	fb02 3305 	mla	r3, r2, r5, r3
 801cdba:	eba2 0204 	sub.w	r2, r2, r4
 801cdbe:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801cdc2:	ea4f 0282 	mov.w	r2, r2, lsl #2
 801cdc6:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 801cdca:	d10a      	bne.n	801cde2 <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x5e>
 801cdcc:	42b1      	cmp	r1, r6
 801cdce:	d255      	bcs.n	801ce7c <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xf8>
 801cdd0:	eb01 030a 	add.w	r3, r1, sl
 801cdd4:	4299      	cmp	r1, r3
 801cdd6:	d202      	bcs.n	801cdde <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x5a>
 801cdd8:	f841 0b04 	str.w	r0, [r1], #4
 801cddc:	e7fa      	b.n	801cdd4 <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x50>
 801cdde:	4411      	add	r1, r2
 801cde0:	e7f4      	b.n	801cdcc <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x48>
 801cde2:	fa1f fe8c 	uxth.w	lr, ip
 801cde6:	f3c0 4307 	ubfx	r3, r0, #16, #8
 801cdea:	f3c0 2807 	ubfx	r8, r0, #8, #8
 801cdee:	fa5f f980 	uxtb.w	r9, r0
 801cdf2:	fb03 f30e 	mul.w	r3, r3, lr
 801cdf6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 801cdfa:	fb08 f80e 	mul.w	r8, r8, lr
 801cdfe:	9301      	str	r3, [sp, #4]
 801ce00:	ea40 630c 	orr.w	r3, r0, ip, lsl #24
 801ce04:	fb09 f90e 	mul.w	r9, r9, lr
 801ce08:	9300      	str	r3, [sp, #0]
 801ce0a:	42b1      	cmp	r1, r6
 801ce0c:	d236      	bcs.n	801ce7c <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xf8>
 801ce0e:	eb01 0b0a 	add.w	fp, r1, sl
 801ce12:	4559      	cmp	r1, fp
 801ce14:	d230      	bcs.n	801ce78 <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xf4>
 801ce16:	680b      	ldr	r3, [r1, #0]
 801ce18:	0e1c      	lsrs	r4, r3, #24
 801ce1a:	d102      	bne.n	801ce22 <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x9e>
 801ce1c:	9b00      	ldr	r3, [sp, #0]
 801ce1e:	600b      	str	r3, [r1, #0]
 801ce20:	e7f7      	b.n	801ce12 <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x8e>
 801ce22:	fb04 f00e 	mul.w	r0, r4, lr
 801ce26:	eb0c 0504 	add.w	r5, ip, r4
 801ce2a:	3104      	adds	r1, #4
 801ce2c:	1c47      	adds	r7, r0, #1
 801ce2e:	eb07 2720 	add.w	r7, r7, r0, asr #8
 801ce32:	1238      	asrs	r0, r7, #8
 801ce34:	1a27      	subs	r7, r4, r0
 801ce36:	1a2d      	subs	r5, r5, r0
 801ce38:	f3c3 4407 	ubfx	r4, r3, #16, #8
 801ce3c:	9801      	ldr	r0, [sp, #4]
 801ce3e:	b2ed      	uxtb	r5, r5
 801ce40:	fb07 0404 	mla	r4, r7, r4, r0
 801ce44:	b2d8      	uxtb	r0, r3
 801ce46:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801ce4a:	fb07 9000 	mla	r0, r7, r0, r9
 801ce4e:	fbb4 f4f5 	udiv	r4, r4, r5
 801ce52:	fbb0 f0f5 	udiv	r0, r0, r5
 801ce56:	0424      	lsls	r4, r4, #16
 801ce58:	b2c0      	uxtb	r0, r0
 801ce5a:	f404 047f 	and.w	r4, r4, #16711680	@ 0xff0000
 801ce5e:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
 801ce62:	4320      	orrs	r0, r4
 801ce64:	fb07 8403 	mla	r4, r7, r3, r8
 801ce68:	fbb4 f4f5 	udiv	r4, r4, r5
 801ce6c:	0224      	lsls	r4, r4, #8
 801ce6e:	b2a4      	uxth	r4, r4
 801ce70:	4320      	orrs	r0, r4
 801ce72:	f841 0c04 	str.w	r0, [r1, #-4]
 801ce76:	e7cc      	b.n	801ce12 <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x8e>
 801ce78:	4411      	add	r1, r2
 801ce7a:	e7c6      	b.n	801ce0a <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x86>
 801ce7c:	b003      	add	sp, #12
 801ce7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801ce84 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801ce84:	2bff      	cmp	r3, #255	@ 0xff
 801ce86:	d061      	beq.n	801cf4c <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc8>
 801ce88:	2a33      	cmp	r2, #51	@ 0x33
 801ce8a:	d83d      	bhi.n	801cf08 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x84>
 801ce8c:	e8df f012 	tbh	[pc, r2, lsl #1]
 801ce90:	00500054 	.word	0x00500054
 801ce94:	004e0052 	.word	0x004e0052
 801ce98:	00560058 	.word	0x00560058
 801ce9c:	003c003c 	.word	0x003c003c
 801cea0:	010000fe 	.word	0x010000fe
 801cea4:	010000fe 	.word	0x010000fe
 801cea8:	003c003c 	.word	0x003c003c
 801ceac:	003c003c 	.word	0x003c003c
 801ceb0:	003c003c 	.word	0x003c003c
 801ceb4:	003c003c 	.word	0x003c003c
 801ceb8:	003c003c 	.word	0x003c003c
 801cebc:	003c003c 	.word	0x003c003c
 801cec0:	003c003c 	.word	0x003c003c
 801cec4:	003c003c 	.word	0x003c003c
 801cec8:	003c003c 	.word	0x003c003c
 801cecc:	003c003c 	.word	0x003c003c
 801ced0:	003c003c 	.word	0x003c003c
 801ced4:	003c003c 	.word	0x003c003c
 801ced8:	003c003c 	.word	0x003c003c
 801cedc:	003c003c 	.word	0x003c003c
 801cee0:	003c003c 	.word	0x003c003c
 801cee4:	003c003c 	.word	0x003c003c
 801cee8:	00340042 	.word	0x00340042
 801ceec:	00e400eb 	.word	0x00e400eb
 801cef0:	005a005c 	.word	0x005a005c
 801cef4:	005a005c 	.word	0x005a005c
 801cef8:	684b      	ldr	r3, [r1, #4]
 801cefa:	781b      	ldrb	r3, [r3, #0]
 801cefc:	2b01      	cmp	r3, #1
 801cefe:	d005      	beq.n	801cf0c <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x88>
 801cf00:	f0c0 80af 	bcc.w	801d062 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1de>
 801cf04:	2b02      	cmp	r3, #2
 801cf06:	d003      	beq.n	801cf10 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8c>
 801cf08:	2000      	movs	r0, #0
 801cf0a:	4770      	bx	lr
 801cf0c:	6a00      	ldr	r0, [r0, #32]
 801cf0e:	4770      	bx	lr
 801cf10:	6900      	ldr	r0, [r0, #16]
 801cf12:	4770      	bx	lr
 801cf14:	684b      	ldr	r3, [r1, #4]
 801cf16:	781b      	ldrb	r3, [r3, #0]
 801cf18:	2b01      	cmp	r3, #1
 801cf1a:	d005      	beq.n	801cf28 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa4>
 801cf1c:	f0c0 80a8 	bcc.w	801d070 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1ec>
 801cf20:	2b02      	cmp	r3, #2
 801cf22:	d1f1      	bne.n	801cf08 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x84>
 801cf24:	6880      	ldr	r0, [r0, #8]
 801cf26:	4770      	bx	lr
 801cf28:	6980      	ldr	r0, [r0, #24]
 801cf2a:	4770      	bx	lr
 801cf2c:	6c00      	ldr	r0, [r0, #64]	@ 0x40
 801cf2e:	4770      	bx	lr
 801cf30:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 801cf32:	4770      	bx	lr
 801cf34:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 801cf36:	4770      	bx	lr
 801cf38:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 801cf3a:	4770      	bx	lr
 801cf3c:	6d80      	ldr	r0, [r0, #88]	@ 0x58
 801cf3e:	4770      	bx	lr
 801cf40:	6d00      	ldr	r0, [r0, #80]	@ 0x50
 801cf42:	4770      	bx	lr
 801cf44:	6f00      	ldr	r0, [r0, #112]	@ 0x70
 801cf46:	4770      	bx	lr
 801cf48:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801cf4a:	4770      	bx	lr
 801cf4c:	2a33      	cmp	r2, #51	@ 0x33
 801cf4e:	d8db      	bhi.n	801cf08 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x84>
 801cf50:	a301      	add	r3, pc, #4	@ (adr r3, 801cf58 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xd4>)
 801cf52:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 801cf56:	bf00      	nop
 801cf58:	0801d081 	.word	0x0801d081
 801cf5c:	0801d079 	.word	0x0801d079
 801cf60:	0801d07d 	.word	0x0801d07d
 801cf64:	0801d075 	.word	0x0801d075
 801cf68:	0801d089 	.word	0x0801d089
 801cf6c:	0801d085 	.word	0x0801d085
 801cf70:	0801cf09 	.word	0x0801cf09
 801cf74:	0801cf09 	.word	0x0801cf09
 801cf78:	0801d08d 	.word	0x0801d08d
 801cf7c:	0801d091 	.word	0x0801d091
 801cf80:	0801d08d 	.word	0x0801d08d
 801cf84:	0801d091 	.word	0x0801d091
 801cf88:	0801cf09 	.word	0x0801cf09
 801cf8c:	0801cf09 	.word	0x0801cf09
 801cf90:	0801cf09 	.word	0x0801cf09
 801cf94:	0801cf09 	.word	0x0801cf09
 801cf98:	0801cf09 	.word	0x0801cf09
 801cf9c:	0801cf09 	.word	0x0801cf09
 801cfa0:	0801cf09 	.word	0x0801cf09
 801cfa4:	0801cf09 	.word	0x0801cf09
 801cfa8:	0801cf09 	.word	0x0801cf09
 801cfac:	0801cf09 	.word	0x0801cf09
 801cfb0:	0801cf09 	.word	0x0801cf09
 801cfb4:	0801cf09 	.word	0x0801cf09
 801cfb8:	0801cf09 	.word	0x0801cf09
 801cfbc:	0801cf09 	.word	0x0801cf09
 801cfc0:	0801cf09 	.word	0x0801cf09
 801cfc4:	0801cf09 	.word	0x0801cf09
 801cfc8:	0801cf09 	.word	0x0801cf09
 801cfcc:	0801cf09 	.word	0x0801cf09
 801cfd0:	0801cf09 	.word	0x0801cf09
 801cfd4:	0801cf09 	.word	0x0801cf09
 801cfd8:	0801cf09 	.word	0x0801cf09
 801cfdc:	0801cf09 	.word	0x0801cf09
 801cfe0:	0801cf09 	.word	0x0801cf09
 801cfe4:	0801cf09 	.word	0x0801cf09
 801cfe8:	0801cf09 	.word	0x0801cf09
 801cfec:	0801cf09 	.word	0x0801cf09
 801cff0:	0801cf09 	.word	0x0801cf09
 801cff4:	0801cf09 	.word	0x0801cf09
 801cff8:	0801cf09 	.word	0x0801cf09
 801cffc:	0801cf09 	.word	0x0801cf09
 801d000:	0801cf09 	.word	0x0801cf09
 801d004:	0801cf09 	.word	0x0801cf09
 801d008:	0801d041 	.word	0x0801d041
 801d00c:	0801d029 	.word	0x0801d029
 801d010:	0801d067 	.word	0x0801d067
 801d014:	0801d059 	.word	0x0801d059
 801d018:	0801d099 	.word	0x0801d099
 801d01c:	0801d095 	.word	0x0801d095
 801d020:	0801d099 	.word	0x0801d099
 801d024:	0801d095 	.word	0x0801d095
 801d028:	684b      	ldr	r3, [r1, #4]
 801d02a:	781b      	ldrb	r3, [r3, #0]
 801d02c:	2b01      	cmp	r3, #1
 801d02e:	d005      	beq.n	801d03c <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1b8>
 801d030:	d317      	bcc.n	801d062 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1de>
 801d032:	2b02      	cmp	r3, #2
 801d034:	f47f af68 	bne.w	801cf08 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x84>
 801d038:	6940      	ldr	r0, [r0, #20]
 801d03a:	4770      	bx	lr
 801d03c:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 801d03e:	4770      	bx	lr
 801d040:	684b      	ldr	r3, [r1, #4]
 801d042:	781b      	ldrb	r3, [r3, #0]
 801d044:	2b01      	cmp	r3, #1
 801d046:	d005      	beq.n	801d054 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1d0>
 801d048:	d312      	bcc.n	801d070 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1ec>
 801d04a:	2b02      	cmp	r3, #2
 801d04c:	f47f af5c 	bne.w	801cf08 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x84>
 801d050:	68c0      	ldr	r0, [r0, #12]
 801d052:	4770      	bx	lr
 801d054:	69c0      	ldr	r0, [r0, #28]
 801d056:	4770      	bx	lr
 801d058:	684b      	ldr	r3, [r1, #4]
 801d05a:	781b      	ldrb	r3, [r3, #0]
 801d05c:	2b00      	cmp	r3, #0
 801d05e:	f47f af53 	bne.w	801cf08 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x84>
 801d062:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 801d064:	4770      	bx	lr
 801d066:	684b      	ldr	r3, [r1, #4]
 801d068:	781b      	ldrb	r3, [r3, #0]
 801d06a:	2b00      	cmp	r3, #0
 801d06c:	f47f af4c 	bne.w	801cf08 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x84>
 801d070:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 801d072:	4770      	bx	lr
 801d074:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 801d076:	4770      	bx	lr
 801d078:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 801d07a:	4770      	bx	lr
 801d07c:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 801d07e:	4770      	bx	lr
 801d080:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 801d082:	4770      	bx	lr
 801d084:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
 801d086:	4770      	bx	lr
 801d088:	6d40      	ldr	r0, [r0, #84]	@ 0x54
 801d08a:	4770      	bx	lr
 801d08c:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 801d08e:	4770      	bx	lr
 801d090:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 801d092:	4770      	bx	lr
 801d094:	6f40      	ldr	r0, [r0, #116]	@ 0x74
 801d096:	4770      	bx	lr
 801d098:	6ec0      	ldr	r0, [r0, #108]	@ 0x6c
 801d09a:	4770      	bx	lr

0801d09c <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d09c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d0a0:	b087      	sub	sp, #28
 801d0a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d0a6:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 801d0a8:	9100      	str	r1, [sp, #0]
 801d0aa:	6868      	ldr	r0, [r5, #4]
 801d0ac:	f8dd b060 	ldr.w	fp, [sp, #96]	@ 0x60
 801d0b0:	9204      	str	r2, [sp, #16]
 801d0b2:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801d0b6:	e9dd 1416 	ldrd	r1, r4, [sp, #88]	@ 0x58
 801d0ba:	fb00 1404 	mla	r4, r0, r4, r1
 801d0be:	6829      	ldr	r1, [r5, #0]
 801d0c0:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 801d0c4:	f8db 1000 	ldr.w	r1, [fp]
 801d0c8:	9101      	str	r1, [sp, #4]
 801d0ca:	f8db 1004 	ldr.w	r1, [fp, #4]
 801d0ce:	3104      	adds	r1, #4
 801d0d0:	9102      	str	r1, [sp, #8]
 801d0d2:	9900      	ldr	r1, [sp, #0]
 801d0d4:	2900      	cmp	r1, #0
 801d0d6:	dc03      	bgt.n	801d0e0 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801d0d8:	9904      	ldr	r1, [sp, #16]
 801d0da:	2900      	cmp	r1, #0
 801d0dc:	f340 815a 	ble.w	801d394 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 801d0e0:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801d0e2:	f9bb c008 	ldrsh.w	ip, [fp, #8]
 801d0e6:	f501 4000 	add.w	r0, r1, #32768	@ 0x8000
 801d0ea:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801d0ec:	f9bb 700c 	ldrsh.w	r7, [fp, #12]
 801d0f0:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 801d0f4:	2b00      	cmp	r3, #0
 801d0f6:	dd0e      	ble.n	801d116 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801d0f8:	1405      	asrs	r5, r0, #16
 801d0fa:	d405      	bmi.n	801d108 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801d0fc:	4565      	cmp	r5, ip
 801d0fe:	da03      	bge.n	801d108 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801d100:	140d      	asrs	r5, r1, #16
 801d102:	d401      	bmi.n	801d108 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801d104:	42bd      	cmp	r5, r7
 801d106:	db07      	blt.n	801d118 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801d108:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801d10a:	3b01      	subs	r3, #1
 801d10c:	3404      	adds	r4, #4
 801d10e:	4428      	add	r0, r5
 801d110:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801d112:	4429      	add	r1, r5
 801d114:	e7ee      	b.n	801d0f4 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801d116:	d04d      	beq.n	801d1b4 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801d118:	1e5d      	subs	r5, r3, #1
 801d11a:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801d11c:	fb06 0605 	mla	r6, r6, r5, r0
 801d120:	1436      	asrs	r6, r6, #16
 801d122:	d43d      	bmi.n	801d1a0 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 801d124:	4566      	cmp	r6, ip
 801d126:	da3b      	bge.n	801d1a0 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 801d128:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801d12a:	fb06 1505 	mla	r5, r6, r5, r1
 801d12e:	142d      	asrs	r5, r5, #16
 801d130:	d436      	bmi.n	801d1a0 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 801d132:	42bd      	cmp	r5, r7
 801d134:	da34      	bge.n	801d1a0 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 801d136:	1d25      	adds	r5, r4, #4
 801d138:	4699      	mov	r9, r3
 801d13a:	f1b9 0f00 	cmp.w	r9, #0
 801d13e:	dd35      	ble.n	801d1ac <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 801d140:	140e      	asrs	r6, r1, #16
 801d142:	f9bb c008 	ldrsh.w	ip, [fp, #8]
 801d146:	1407      	asrs	r7, r0, #16
 801d148:	2aff      	cmp	r2, #255	@ 0xff
 801d14a:	46b6      	mov	lr, r6
 801d14c:	9e01      	ldr	r6, [sp, #4]
 801d14e:	fb0c 660e 	mla	r6, ip, lr, r6
 801d152:	5df6      	ldrb	r6, [r6, r7]
 801d154:	9f02      	ldr	r7, [sp, #8]
 801d156:	f837 6016 	ldrh.w	r6, [r7, r6, lsl #1]
 801d15a:	ea4f 2726 	mov.w	r7, r6, asr #8
 801d15e:	ea4f 0ce6 	mov.w	ip, r6, asr #3
 801d162:	ea4f 06c6 	mov.w	r6, r6, lsl #3
 801d166:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801d16a:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 801d16e:	b2f6      	uxtb	r6, r6
 801d170:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 801d174:	ea4c 1c9c 	orr.w	ip, ip, ip, lsr #6
 801d178:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801d17c:	f040 80d4 	bne.w	801d328 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801d180:	f805 6c04 	strb.w	r6, [r5, #-4]
 801d184:	f805 cc03 	strb.w	ip, [r5, #-3]
 801d188:	f805 7c02 	strb.w	r7, [r5, #-2]
 801d18c:	f805 2c01 	strb.w	r2, [r5, #-1]
 801d190:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801d192:	3504      	adds	r5, #4
 801d194:	f109 39ff 	add.w	r9, r9, #4294967295
 801d198:	4430      	add	r0, r6
 801d19a:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801d19c:	4431      	add	r1, r6
 801d19e:	e7cc      	b.n	801d13a <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801d1a0:	f04f 0c00 	mov.w	ip, #0
 801d1a4:	eb03 050c 	add.w	r5, r3, ip
 801d1a8:	2d00      	cmp	r5, #0
 801d1aa:	dc3f      	bgt.n	801d22c <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 801d1ac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d1b0:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 801d1b4:	9b00      	ldr	r3, [sp, #0]
 801d1b6:	2b00      	cmp	r3, #0
 801d1b8:	f340 80ec 	ble.w	801d394 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 801d1bc:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d1c0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d1c2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d1c6:	eeb0 6a62 	vmov.f32	s12, s5
 801d1ca:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d1ce:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d1d2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d1d6:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 801d1da:	eeb0 6a43 	vmov.f32	s12, s6
 801d1de:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d1e2:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 801d1e6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d1ea:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d1ee:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d1f2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d1f6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d1fa:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d1fe:	ee12 1a90 	vmov	r1, s5
 801d202:	eef0 2a47 	vmov.f32	s5, s14
 801d206:	fb91 f3f3 	sdiv	r3, r1, r3
 801d20a:	ee13 1a10 	vmov	r1, s6
 801d20e:	9313      	str	r3, [sp, #76]	@ 0x4c
 801d210:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d212:	eeb0 3a67 	vmov.f32	s6, s15
 801d216:	fb91 f3f3 	sdiv	r3, r1, r3
 801d21a:	9314      	str	r3, [sp, #80]	@ 0x50
 801d21c:	9b00      	ldr	r3, [sp, #0]
 801d21e:	9904      	ldr	r1, [sp, #16]
 801d220:	3b01      	subs	r3, #1
 801d222:	9300      	str	r3, [sp, #0]
 801d224:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d226:	bf08      	it	eq
 801d228:	460b      	moveq	r3, r1
 801d22a:	e752      	b.n	801d0d2 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801d22c:	1407      	asrs	r7, r0, #16
 801d22e:	d435      	bmi.n	801d29c <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801d230:	f8db 6008 	ldr.w	r6, [fp, #8]
 801d234:	42be      	cmp	r6, r7
 801d236:	dd31      	ble.n	801d29c <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801d238:	ea5f 4e21 	movs.w	lr, r1, asr #16
 801d23c:	d42e      	bmi.n	801d29c <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801d23e:	f8db 500c 	ldr.w	r5, [fp, #12]
 801d242:	4575      	cmp	r5, lr
 801d244:	dd2a      	ble.n	801d29c <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801d246:	9d01      	ldr	r5, [sp, #4]
 801d248:	b236      	sxth	r6, r6
 801d24a:	2aff      	cmp	r2, #255	@ 0xff
 801d24c:	fb0e 5606 	mla	r6, lr, r6, r5
 801d250:	5df5      	ldrb	r5, [r6, r7]
 801d252:	9e02      	ldr	r6, [sp, #8]
 801d254:	f836 5015 	ldrh.w	r5, [r6, r5, lsl #1]
 801d258:	ea4f 2625 	mov.w	r6, r5, asr #8
 801d25c:	ea4f 07e5 	mov.w	r7, r5, asr #3
 801d260:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 801d264:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 801d268:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801d26c:	b2ed      	uxtb	r5, r5
 801d26e:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801d272:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 801d276:	9603      	str	r6, [sp, #12]
 801d278:	ea47 1797 	orr.w	r7, r7, r7, lsr #6
 801d27c:	462e      	mov	r6, r5
 801d27e:	d114      	bne.n	801d2aa <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801d280:	f06f 0503 	mvn.w	r5, #3
 801d284:	fb05 fe0c 	mul.w	lr, r5, ip
 801d288:	9d03      	ldr	r5, [sp, #12]
 801d28a:	f804 600e 	strb.w	r6, [r4, lr]
 801d28e:	44a6      	add	lr, r4
 801d290:	f88e 7001 	strb.w	r7, [lr, #1]
 801d294:	f88e 5002 	strb.w	r5, [lr, #2]
 801d298:	f88e 2003 	strb.w	r2, [lr, #3]
 801d29c:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801d29e:	f10c 3cff 	add.w	ip, ip, #4294967295
 801d2a2:	4428      	add	r0, r5
 801d2a4:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801d2a6:	4429      	add	r1, r5
 801d2a8:	e77c      	b.n	801d1a4 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x108>
 801d2aa:	2a00      	cmp	r2, #0
 801d2ac:	d0f6      	beq.n	801d29c <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801d2ae:	fb12 f707 	smulbb	r7, r2, r7
 801d2b2:	f06f 0503 	mvn.w	r5, #3
 801d2b6:	fb05 fa0c 	mul.w	sl, r5, ip
 801d2ba:	eb04 090a 	add.w	r9, r4, sl
 801d2be:	f899 5003 	ldrb.w	r5, [r9, #3]
 801d2c2:	fb02 fe05 	mul.w	lr, r2, r5
 801d2c6:	f10e 0801 	add.w	r8, lr, #1
 801d2ca:	eb08 281e 	add.w	r8, r8, lr, lsr #8
 801d2ce:	eb02 0e05 	add.w	lr, r2, r5
 801d2d2:	ea4f 2828 	mov.w	r8, r8, asr #8
 801d2d6:	ebae 0e08 	sub.w	lr, lr, r8
 801d2da:	eba5 0808 	sub.w	r8, r5, r8
 801d2de:	f814 500a 	ldrb.w	r5, [r4, sl]
 801d2e2:	fa5f fe8e 	uxtb.w	lr, lr
 801d2e6:	9505      	str	r5, [sp, #20]
 801d2e8:	fb16 f502 	smulbb	r5, r6, r2
 801d2ec:	462e      	mov	r6, r5
 801d2ee:	9d05      	ldr	r5, [sp, #20]
 801d2f0:	fb08 6505 	mla	r5, r8, r5, r6
 801d2f4:	9e03      	ldr	r6, [sp, #12]
 801d2f6:	fb95 f5fe 	sdiv	r5, r5, lr
 801d2fa:	f804 500a 	strb.w	r5, [r4, sl]
 801d2fe:	fb12 f606 	smulbb	r6, r2, r6
 801d302:	f899 5001 	ldrb.w	r5, [r9, #1]
 801d306:	f889 e003 	strb.w	lr, [r9, #3]
 801d30a:	fb08 7705 	mla	r7, r8, r5, r7
 801d30e:	f899 5002 	ldrb.w	r5, [r9, #2]
 801d312:	fb08 6605 	mla	r6, r8, r5, r6
 801d316:	fb97 f7fe 	sdiv	r7, r7, lr
 801d31a:	fb96 f6fe 	sdiv	r6, r6, lr
 801d31e:	f889 7001 	strb.w	r7, [r9, #1]
 801d322:	f889 6002 	strb.w	r6, [r9, #2]
 801d326:	e7b9      	b.n	801d29c <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801d328:	2a00      	cmp	r2, #0
 801d32a:	f43f af31 	beq.w	801d190 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 801d32e:	f815 ac01 	ldrb.w	sl, [r5, #-1]
 801d332:	fb16 f602 	smulbb	r6, r6, r2
 801d336:	fb12 fc0c 	smulbb	ip, r2, ip
 801d33a:	fb12 f707 	smulbb	r7, r2, r7
 801d33e:	fb02 fe0a 	mul.w	lr, r2, sl
 801d342:	f10e 0801 	add.w	r8, lr, #1
 801d346:	eb08 281e 	add.w	r8, r8, lr, lsr #8
 801d34a:	eb02 0e0a 	add.w	lr, r2, sl
 801d34e:	ea4f 2828 	mov.w	r8, r8, asr #8
 801d352:	ebae 0e08 	sub.w	lr, lr, r8
 801d356:	ebaa 0808 	sub.w	r8, sl, r8
 801d35a:	f815 ac04 	ldrb.w	sl, [r5, #-4]
 801d35e:	fa5f fe8e 	uxtb.w	lr, lr
 801d362:	fb08 660a 	mla	r6, r8, sl, r6
 801d366:	f805 ec01 	strb.w	lr, [r5, #-1]
 801d36a:	fb96 f6fe 	sdiv	r6, r6, lr
 801d36e:	f805 6c04 	strb.w	r6, [r5, #-4]
 801d372:	f815 6c03 	ldrb.w	r6, [r5, #-3]
 801d376:	fb08 cc06 	mla	ip, r8, r6, ip
 801d37a:	f815 6c02 	ldrb.w	r6, [r5, #-2]
 801d37e:	fb08 7706 	mla	r7, r8, r6, r7
 801d382:	fb9c fcfe 	sdiv	ip, ip, lr
 801d386:	fb97 f7fe 	sdiv	r7, r7, lr
 801d38a:	f805 cc03 	strb.w	ip, [r5, #-3]
 801d38e:	f805 7c02 	strb.w	r7, [r5, #-2]
 801d392:	e6fd      	b.n	801d190 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 801d394:	b007      	add	sp, #28
 801d396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d39a <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d39a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d39e:	b085      	sub	sp, #20
 801d3a0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d3a4:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801d3a6:	9203      	str	r2, [sp, #12]
 801d3a8:	6860      	ldr	r0, [r4, #4]
 801d3aa:	9f16      	ldr	r7, [sp, #88]	@ 0x58
 801d3ac:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	@ 0x50
 801d3b0:	e9dd 8e11 	ldrd	r8, lr, [sp, #68]	@ 0x44
 801d3b4:	fb00 2505 	mla	r5, r0, r5, r2
 801d3b8:	6822      	ldr	r2, [r4, #0]
 801d3ba:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 801d3be:	683a      	ldr	r2, [r7, #0]
 801d3c0:	9201      	str	r2, [sp, #4]
 801d3c2:	687a      	ldr	r2, [r7, #4]
 801d3c4:	3204      	adds	r2, #4
 801d3c6:	9202      	str	r2, [sp, #8]
 801d3c8:	2900      	cmp	r1, #0
 801d3ca:	dc03      	bgt.n	801d3d4 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801d3cc:	9a03      	ldr	r2, [sp, #12]
 801d3ce:	2a00      	cmp	r2, #0
 801d3d0:	f340 80c4 	ble.w	801d55c <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 801d3d4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801d3d6:	f9b7 9008 	ldrsh.w	r9, [r7, #8]
 801d3da:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801d3de:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801d3e0:	f9b7 c00c 	ldrsh.w	ip, [r7, #12]
 801d3e4:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801d3e8:	2b00      	cmp	r3, #0
 801d3ea:	dd0c      	ble.n	801d406 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801d3ec:	1404      	asrs	r4, r0, #16
 801d3ee:	d405      	bmi.n	801d3fc <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801d3f0:	454c      	cmp	r4, r9
 801d3f2:	da03      	bge.n	801d3fc <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801d3f4:	1414      	asrs	r4, r2, #16
 801d3f6:	d401      	bmi.n	801d3fc <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801d3f8:	4564      	cmp	r4, ip
 801d3fa:	db05      	blt.n	801d408 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801d3fc:	4440      	add	r0, r8
 801d3fe:	4472      	add	r2, lr
 801d400:	3b01      	subs	r3, #1
 801d402:	3504      	adds	r5, #4
 801d404:	e7f0      	b.n	801d3e8 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801d406:	d00e      	beq.n	801d426 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801d408:	1e5c      	subs	r4, r3, #1
 801d40a:	fb08 0604 	mla	r6, r8, r4, r0
 801d40e:	1436      	asrs	r6, r6, #16
 801d410:	d53e      	bpl.n	801d490 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf6>
 801d412:	4699      	mov	r9, r3
 801d414:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
 801d418:	f1b9 0f00 	cmp.w	r9, #0
 801d41c:	dc6b      	bgt.n	801d4f6 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801d41e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d422:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 801d426:	2900      	cmp	r1, #0
 801d428:	f340 8098 	ble.w	801d55c <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 801d42c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d430:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d432:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d436:	3901      	subs	r1, #1
 801d438:	eeb0 6a62 	vmov.f32	s12, s5
 801d43c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d440:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d444:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d448:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801d44c:	eeb0 6a43 	vmov.f32	s12, s6
 801d450:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d454:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801d458:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d45c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d460:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d464:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d468:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d46c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d470:	ee12 2a90 	vmov	r2, s5
 801d474:	eef0 2a47 	vmov.f32	s5, s14
 801d478:	fb92 f8f3 	sdiv	r8, r2, r3
 801d47c:	ee13 2a10 	vmov	r2, s6
 801d480:	eeb0 3a67 	vmov.f32	s6, s15
 801d484:	fb92 fef3 	sdiv	lr, r2, r3
 801d488:	9a03      	ldr	r2, [sp, #12]
 801d48a:	bf08      	it	eq
 801d48c:	4613      	moveq	r3, r2
 801d48e:	e79b      	b.n	801d3c8 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801d490:	454e      	cmp	r6, r9
 801d492:	dabe      	bge.n	801d412 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801d494:	fb0e 2404 	mla	r4, lr, r4, r2
 801d498:	1424      	asrs	r4, r4, #16
 801d49a:	d4ba      	bmi.n	801d412 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801d49c:	4564      	cmp	r4, ip
 801d49e:	dab8      	bge.n	801d412 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801d4a0:	4699      	mov	r9, r3
 801d4a2:	46aa      	mov	sl, r5
 801d4a4:	f1b9 0f00 	cmp.w	r9, #0
 801d4a8:	ddb9      	ble.n	801d41e <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801d4aa:	f9b7 c008 	ldrsh.w	ip, [r7, #8]
 801d4ae:	ea4f 4b22 	mov.w	fp, r2, asr #16
 801d4b2:	9c01      	ldr	r4, [sp, #4]
 801d4b4:	1406      	asrs	r6, r0, #16
 801d4b6:	4472      	add	r2, lr
 801d4b8:	4440      	add	r0, r8
 801d4ba:	fb0c 440b 	mla	r4, ip, fp, r4
 801d4be:	f109 39ff 	add.w	r9, r9, #4294967295
 801d4c2:	5da4      	ldrb	r4, [r4, r6]
 801d4c4:	9e02      	ldr	r6, [sp, #8]
 801d4c6:	f836 6014 	ldrh.w	r6, [r6, r4, lsl #1]
 801d4ca:	10f4      	asrs	r4, r6, #3
 801d4cc:	ea4f 2c26 	mov.w	ip, r6, asr #8
 801d4d0:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 801d4d4:	00f6      	lsls	r6, r6, #3
 801d4d6:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801d4da:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 801d4de:	b2f6      	uxtb	r6, r6
 801d4e0:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 801d4e4:	0224      	lsls	r4, r4, #8
 801d4e6:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801d4ea:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 801d4ee:	4334      	orrs	r4, r6
 801d4f0:	f84a 4b04 	str.w	r4, [sl], #4
 801d4f4:	e7d6      	b.n	801d4a4 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10a>
 801d4f6:	ea5f 4c20 	movs.w	ip, r0, asr #16
 801d4fa:	d42a      	bmi.n	801d552 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 801d4fc:	68be      	ldr	r6, [r7, #8]
 801d4fe:	4566      	cmp	r6, ip
 801d500:	dd27      	ble.n	801d552 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 801d502:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801d506:	d424      	bmi.n	801d552 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 801d508:	68fc      	ldr	r4, [r7, #12]
 801d50a:	455c      	cmp	r4, fp
 801d50c:	dd21      	ble.n	801d552 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 801d50e:	9c01      	ldr	r4, [sp, #4]
 801d510:	b236      	sxth	r6, r6
 801d512:	fb0b 4606 	mla	r6, fp, r6, r4
 801d516:	f06f 0b03 	mvn.w	fp, #3
 801d51a:	f816 400c 	ldrb.w	r4, [r6, ip]
 801d51e:	fb0b fb09 	mul.w	fp, fp, r9
 801d522:	9e02      	ldr	r6, [sp, #8]
 801d524:	f836 6014 	ldrh.w	r6, [r6, r4, lsl #1]
 801d528:	10f4      	asrs	r4, r6, #3
 801d52a:	ea4f 2c26 	mov.w	ip, r6, asr #8
 801d52e:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 801d532:	00f6      	lsls	r6, r6, #3
 801d534:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801d538:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 801d53c:	b2f6      	uxtb	r6, r6
 801d53e:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 801d542:	0224      	lsls	r4, r4, #8
 801d544:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801d548:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 801d54c:	4334      	orrs	r4, r6
 801d54e:	f84a 400b 	str.w	r4, [sl, fp]
 801d552:	4440      	add	r0, r8
 801d554:	4472      	add	r2, lr
 801d556:	f109 39ff 	add.w	r9, r9, #4294967295
 801d55a:	e75d      	b.n	801d418 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801d55c:	b005      	add	sp, #20
 801d55e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d562 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d562:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d566:	b085      	sub	sp, #20
 801d568:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d56c:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801d56e:	9101      	str	r1, [sp, #4]
 801d570:	6868      	ldr	r0, [r5, #4]
 801d572:	9203      	str	r2, [sp, #12]
 801d574:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 801d578:	e9dd 1414 	ldrd	r1, r4, [sp, #80]	@ 0x50
 801d57c:	fb00 1404 	mla	r4, r0, r4, r1
 801d580:	6829      	ldr	r1, [r5, #0]
 801d582:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 801d586:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801d588:	6809      	ldr	r1, [r1, #0]
 801d58a:	9102      	str	r1, [sp, #8]
 801d58c:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801d58e:	6849      	ldr	r1, [r1, #4]
 801d590:	3104      	adds	r1, #4
 801d592:	9100      	str	r1, [sp, #0]
 801d594:	9901      	ldr	r1, [sp, #4]
 801d596:	2900      	cmp	r1, #0
 801d598:	dc03      	bgt.n	801d5a2 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801d59a:	9903      	ldr	r1, [sp, #12]
 801d59c:	2900      	cmp	r1, #0
 801d59e:	f340 813d 	ble.w	801d81c <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801d5a2:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801d5a4:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 801d5a8:	f9b1 700c 	ldrsh.w	r7, [r1, #12]
 801d5ac:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801d5ae:	f501 4000 	add.w	r0, r1, #32768	@ 0x8000
 801d5b2:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801d5b4:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 801d5b8:	2b00      	cmp	r3, #0
 801d5ba:	dd0e      	ble.n	801d5da <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801d5bc:	1405      	asrs	r5, r0, #16
 801d5be:	d405      	bmi.n	801d5cc <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801d5c0:	4565      	cmp	r5, ip
 801d5c2:	da03      	bge.n	801d5cc <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801d5c4:	140d      	asrs	r5, r1, #16
 801d5c6:	d401      	bmi.n	801d5cc <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801d5c8:	42bd      	cmp	r5, r7
 801d5ca:	db07      	blt.n	801d5dc <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801d5cc:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801d5ce:	3b01      	subs	r3, #1
 801d5d0:	3404      	adds	r4, #4
 801d5d2:	4428      	add	r0, r5
 801d5d4:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801d5d6:	4429      	add	r1, r5
 801d5d8:	e7ee      	b.n	801d5b8 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801d5da:	d044      	beq.n	801d666 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 801d5dc:	1e5d      	subs	r5, r3, #1
 801d5de:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801d5e0:	fb06 0605 	mla	r6, r6, r5, r0
 801d5e4:	1436      	asrs	r6, r6, #16
 801d5e6:	d436      	bmi.n	801d656 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 801d5e8:	4566      	cmp	r6, ip
 801d5ea:	da34      	bge.n	801d656 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 801d5ec:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801d5ee:	fb06 1505 	mla	r5, r6, r5, r1
 801d5f2:	142d      	asrs	r5, r5, #16
 801d5f4:	d42f      	bmi.n	801d656 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 801d5f6:	42bd      	cmp	r5, r7
 801d5f8:	da2d      	bge.n	801d656 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 801d5fa:	1d25      	adds	r5, r4, #4
 801d5fc:	469a      	mov	sl, r3
 801d5fe:	f1ba 0f00 	cmp.w	sl, #0
 801d602:	dd2c      	ble.n	801d65e <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
 801d604:	140e      	asrs	r6, r1, #16
 801d606:	9f16      	ldr	r7, [sp, #88]	@ 0x58
 801d608:	2aff      	cmp	r2, #255	@ 0xff
 801d60a:	46b6      	mov	lr, r6
 801d60c:	f9b7 c008 	ldrsh.w	ip, [r7, #8]
 801d610:	9e02      	ldr	r6, [sp, #8]
 801d612:	ea4f 4720 	mov.w	r7, r0, asr #16
 801d616:	fb0c 660e 	mla	r6, ip, lr, r6
 801d61a:	5df6      	ldrb	r6, [r6, r7]
 801d61c:	9f00      	ldr	r7, [sp, #0]
 801d61e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801d622:	4437      	add	r7, r6
 801d624:	f897 e002 	ldrb.w	lr, [r7, #2]
 801d628:	f897 8001 	ldrb.w	r8, [r7, #1]
 801d62c:	9f00      	ldr	r7, [sp, #0]
 801d62e:	f817 9006 	ldrb.w	r9, [r7, r6]
 801d632:	f040 80be 	bne.w	801d7b2 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 801d636:	f805 9c04 	strb.w	r9, [r5, #-4]
 801d63a:	f805 8c03 	strb.w	r8, [r5, #-3]
 801d63e:	f805 ec02 	strb.w	lr, [r5, #-2]
 801d642:	f805 2c01 	strb.w	r2, [r5, #-1]
 801d646:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801d648:	3504      	adds	r5, #4
 801d64a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d64e:	4430      	add	r0, r6
 801d650:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801d652:	4431      	add	r1, r6
 801d654:	e7d3      	b.n	801d5fe <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801d656:	2500      	movs	r5, #0
 801d658:	195e      	adds	r6, r3, r5
 801d65a:	2e00      	cmp	r6, #0
 801d65c:	dc3f      	bgt.n	801d6de <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801d65e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d662:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 801d666:	9b01      	ldr	r3, [sp, #4]
 801d668:	2b00      	cmp	r3, #0
 801d66a:	f340 80d7 	ble.w	801d81c <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801d66e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d672:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d674:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d678:	eeb0 6a62 	vmov.f32	s12, s5
 801d67c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d680:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d684:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d688:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801d68c:	eeb0 6a43 	vmov.f32	s12, s6
 801d690:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d694:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801d698:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d69c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d6a0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d6a4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d6a8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d6ac:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d6b0:	ee12 1a90 	vmov	r1, s5
 801d6b4:	eef0 2a47 	vmov.f32	s5, s14
 801d6b8:	fb91 f3f3 	sdiv	r3, r1, r3
 801d6bc:	ee13 1a10 	vmov	r1, s6
 801d6c0:	9311      	str	r3, [sp, #68]	@ 0x44
 801d6c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d6c4:	eeb0 3a67 	vmov.f32	s6, s15
 801d6c8:	fb91 f3f3 	sdiv	r3, r1, r3
 801d6cc:	9312      	str	r3, [sp, #72]	@ 0x48
 801d6ce:	9b01      	ldr	r3, [sp, #4]
 801d6d0:	9903      	ldr	r1, [sp, #12]
 801d6d2:	3b01      	subs	r3, #1
 801d6d4:	9301      	str	r3, [sp, #4]
 801d6d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d6d8:	bf08      	it	eq
 801d6da:	460b      	moveq	r3, r1
 801d6dc:	e75a      	b.n	801d594 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801d6de:	ea5f 4c20 	movs.w	ip, r0, asr #16
 801d6e2:	d427      	bmi.n	801d734 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801d6e4:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 801d6e6:	68b7      	ldr	r7, [r6, #8]
 801d6e8:	4567      	cmp	r7, ip
 801d6ea:	dd23      	ble.n	801d734 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801d6ec:	ea5f 4e21 	movs.w	lr, r1, asr #16
 801d6f0:	d420      	bmi.n	801d734 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801d6f2:	68f6      	ldr	r6, [r6, #12]
 801d6f4:	4576      	cmp	r6, lr
 801d6f6:	dd1d      	ble.n	801d734 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801d6f8:	9e02      	ldr	r6, [sp, #8]
 801d6fa:	b23f      	sxth	r7, r7
 801d6fc:	2aff      	cmp	r2, #255	@ 0xff
 801d6fe:	fb0e 6707 	mla	r7, lr, r7, r6
 801d702:	f817 600c 	ldrb.w	r6, [r7, ip]
 801d706:	9f00      	ldr	r7, [sp, #0]
 801d708:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801d70c:	4437      	add	r7, r6
 801d70e:	f897 8002 	ldrb.w	r8, [r7, #2]
 801d712:	f897 9001 	ldrb.w	r9, [r7, #1]
 801d716:	9f00      	ldr	r7, [sp, #0]
 801d718:	f817 a006 	ldrb.w	sl, [r7, r6]
 801d71c:	d110      	bne.n	801d740 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 801d71e:	f06f 0603 	mvn.w	r6, #3
 801d722:	436e      	muls	r6, r5
 801d724:	f804 a006 	strb.w	sl, [r4, r6]
 801d728:	4426      	add	r6, r4
 801d72a:	f886 9001 	strb.w	r9, [r6, #1]
 801d72e:	f886 8002 	strb.w	r8, [r6, #2]
 801d732:	70f2      	strb	r2, [r6, #3]
 801d734:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801d736:	3d01      	subs	r5, #1
 801d738:	4430      	add	r0, r6
 801d73a:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801d73c:	4431      	add	r1, r6
 801d73e:	e78b      	b.n	801d658 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf6>
 801d740:	2a00      	cmp	r2, #0
 801d742:	d0f7      	beq.n	801d734 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801d744:	fb1a fa02 	smulbb	sl, sl, r2
 801d748:	f06f 0603 	mvn.w	r6, #3
 801d74c:	fb12 f909 	smulbb	r9, r2, r9
 801d750:	fb12 f808 	smulbb	r8, r2, r8
 801d754:	fb06 fb05 	mul.w	fp, r6, r5
 801d758:	eb04 0c0b 	add.w	ip, r4, fp
 801d75c:	f89c 7003 	ldrb.w	r7, [ip, #3]
 801d760:	fb02 f607 	mul.w	r6, r2, r7
 801d764:	f106 0e01 	add.w	lr, r6, #1
 801d768:	eb0e 2e16 	add.w	lr, lr, r6, lsr #8
 801d76c:	19d6      	adds	r6, r2, r7
 801d76e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801d772:	eba7 070e 	sub.w	r7, r7, lr
 801d776:	eba6 060e 	sub.w	r6, r6, lr
 801d77a:	f814 e00b 	ldrb.w	lr, [r4, fp]
 801d77e:	b2f6      	uxtb	r6, r6
 801d780:	fb07 aa0e 	mla	sl, r7, lr, sl
 801d784:	fb9a faf6 	sdiv	sl, sl, r6
 801d788:	f804 a00b 	strb.w	sl, [r4, fp]
 801d78c:	f89c e001 	ldrb.w	lr, [ip, #1]
 801d790:	f88c 6003 	strb.w	r6, [ip, #3]
 801d794:	fb07 990e 	mla	r9, r7, lr, r9
 801d798:	f89c e002 	ldrb.w	lr, [ip, #2]
 801d79c:	fb07 880e 	mla	r8, r7, lr, r8
 801d7a0:	fb99 f9f6 	sdiv	r9, r9, r6
 801d7a4:	fb98 f8f6 	sdiv	r8, r8, r6
 801d7a8:	f88c 9001 	strb.w	r9, [ip, #1]
 801d7ac:	f88c 8002 	strb.w	r8, [ip, #2]
 801d7b0:	e7c0      	b.n	801d734 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801d7b2:	2a00      	cmp	r2, #0
 801d7b4:	f43f af47 	beq.w	801d646 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe4>
 801d7b8:	f815 bc01 	ldrb.w	fp, [r5, #-1]
 801d7bc:	fb19 f902 	smulbb	r9, r9, r2
 801d7c0:	fb12 f808 	smulbb	r8, r2, r8
 801d7c4:	fb02 fc0b 	mul.w	ip, r2, fp
 801d7c8:	eb02 060b 	add.w	r6, r2, fp
 801d7cc:	fb12 fe0e 	smulbb	lr, r2, lr
 801d7d0:	f10c 0701 	add.w	r7, ip, #1
 801d7d4:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801d7d8:	ea4f 2c27 	mov.w	ip, r7, asr #8
 801d7dc:	ebab 070c 	sub.w	r7, fp, ip
 801d7e0:	eba6 060c 	sub.w	r6, r6, ip
 801d7e4:	f815 cc04 	ldrb.w	ip, [r5, #-4]
 801d7e8:	b2f6      	uxtb	r6, r6
 801d7ea:	fb07 990c 	mla	r9, r7, ip, r9
 801d7ee:	f815 cc03 	ldrb.w	ip, [r5, #-3]
 801d7f2:	f805 6c01 	strb.w	r6, [r5, #-1]
 801d7f6:	fb07 880c 	mla	r8, r7, ip, r8
 801d7fa:	f815 cc02 	ldrb.w	ip, [r5, #-2]
 801d7fe:	fb07 ee0c 	mla	lr, r7, ip, lr
 801d802:	fb99 f9f6 	sdiv	r9, r9, r6
 801d806:	fb98 f8f6 	sdiv	r8, r8, r6
 801d80a:	fb9e fef6 	sdiv	lr, lr, r6
 801d80e:	f805 9c04 	strb.w	r9, [r5, #-4]
 801d812:	f805 8c03 	strb.w	r8, [r5, #-3]
 801d816:	f805 ec02 	strb.w	lr, [r5, #-2]
 801d81a:	e714      	b.n	801d646 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe4>
 801d81c:	b005      	add	sp, #20
 801d81e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d822 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d822:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d826:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801d828:	4693      	mov	fp, r2
 801d82a:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801d82c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d830:	6870      	ldr	r0, [r6, #4]
 801d832:	686f      	ldr	r7, [r5, #4]
 801d834:	9100      	str	r1, [sp, #0]
 801d836:	3704      	adds	r7, #4
 801d838:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 801d83c:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	@ 0x3c
 801d840:	fb00 2404 	mla	r4, r0, r4, r2
 801d844:	6832      	ldr	r2, [r6, #0]
 801d846:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 801d84a:	682a      	ldr	r2, [r5, #0]
 801d84c:	9201      	str	r2, [sp, #4]
 801d84e:	9a00      	ldr	r2, [sp, #0]
 801d850:	2a00      	cmp	r2, #0
 801d852:	dc03      	bgt.n	801d85c <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801d854:	f1bb 0f00 	cmp.w	fp, #0
 801d858:	f340 80bd 	ble.w	801d9d6 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801d85c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801d85e:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801d862:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801d866:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d868:	f9b5 900c 	ldrsh.w	r9, [r5, #12]
 801d86c:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801d870:	2b00      	cmp	r3, #0
 801d872:	dd0c      	ble.n	801d88e <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801d874:	1406      	asrs	r6, r0, #16
 801d876:	d405      	bmi.n	801d884 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801d878:	4556      	cmp	r6, sl
 801d87a:	da03      	bge.n	801d884 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801d87c:	1416      	asrs	r6, r2, #16
 801d87e:	d401      	bmi.n	801d884 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801d880:	454e      	cmp	r6, r9
 801d882:	db05      	blt.n	801d890 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801d884:	4440      	add	r0, r8
 801d886:	4472      	add	r2, lr
 801d888:	3b01      	subs	r3, #1
 801d88a:	3404      	adds	r4, #4
 801d88c:	e7f0      	b.n	801d870 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801d88e:	d03e      	beq.n	801d90e <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xec>
 801d890:	1e5e      	subs	r6, r3, #1
 801d892:	fb08 0c06 	mla	ip, r8, r6, r0
 801d896:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 801d89a:	d42e      	bmi.n	801d8fa <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd8>
 801d89c:	45d4      	cmp	ip, sl
 801d89e:	da2c      	bge.n	801d8fa <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd8>
 801d8a0:	fb0e 2606 	mla	r6, lr, r6, r2
 801d8a4:	1436      	asrs	r6, r6, #16
 801d8a6:	d428      	bmi.n	801d8fa <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd8>
 801d8a8:	454e      	cmp	r6, r9
 801d8aa:	da26      	bge.n	801d8fa <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd8>
 801d8ac:	1d26      	adds	r6, r4, #4
 801d8ae:	469c      	mov	ip, r3
 801d8b0:	f1bc 0f00 	cmp.w	ip, #0
 801d8b4:	f106 0604 	add.w	r6, r6, #4
 801d8b8:	dd25      	ble.n	801d906 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe4>
 801d8ba:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 801d8be:	ea4f 4922 	mov.w	r9, r2, asr #16
 801d8c2:	f10c 3cff 	add.w	ip, ip, #4294967295
 801d8c6:	4472      	add	r2, lr
 801d8c8:	468a      	mov	sl, r1
 801d8ca:	9901      	ldr	r1, [sp, #4]
 801d8cc:	fb0a 1909 	mla	r9, sl, r9, r1
 801d8d0:	1401      	asrs	r1, r0, #16
 801d8d2:	4440      	add	r0, r8
 801d8d4:	f819 9001 	ldrb.w	r9, [r9, r1]
 801d8d8:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801d8dc:	eb07 0a09 	add.w	sl, r7, r9
 801d8e0:	f817 9009 	ldrb.w	r9, [r7, r9]
 801d8e4:	f806 9c08 	strb.w	r9, [r6, #-8]
 801d8e8:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801d8ec:	f806 9c07 	strb.w	r9, [r6, #-7]
 801d8f0:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801d8f4:	f806 9c06 	strb.w	r9, [r6, #-6]
 801d8f8:	e7da      	b.n	801d8b0 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801d8fa:	2600      	movs	r6, #0
 801d8fc:	eb03 0c06 	add.w	ip, r3, r6
 801d900:	f1bc 0f00 	cmp.w	ip, #0
 801d904:	dc3a      	bgt.n	801d97c <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801d906:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d90a:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 801d90e:	9b00      	ldr	r3, [sp, #0]
 801d910:	2b00      	cmp	r3, #0
 801d912:	dd60      	ble.n	801d9d6 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801d914:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d918:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d91a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d91e:	eeb0 6a62 	vmov.f32	s12, s5
 801d922:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d926:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d92a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d92e:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 801d932:	eeb0 6a43 	vmov.f32	s12, s6
 801d936:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d93a:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 801d93e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d942:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d946:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d94a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d94e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d952:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d956:	ee12 2a90 	vmov	r2, s5
 801d95a:	eef0 2a47 	vmov.f32	s5, s14
 801d95e:	fb92 f8f3 	sdiv	r8, r2, r3
 801d962:	ee13 2a10 	vmov	r2, s6
 801d966:	eeb0 3a67 	vmov.f32	s6, s15
 801d96a:	fb92 fef3 	sdiv	lr, r2, r3
 801d96e:	9b00      	ldr	r3, [sp, #0]
 801d970:	3b01      	subs	r3, #1
 801d972:	9300      	str	r3, [sp, #0]
 801d974:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d976:	bf08      	it	eq
 801d978:	465b      	moveq	r3, fp
 801d97a:	e768      	b.n	801d84e <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c>
 801d97c:	ea5f 4920 	movs.w	r9, r0, asr #16
 801d980:	d425      	bmi.n	801d9ce <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801d982:	f8d5 c008 	ldr.w	ip, [r5, #8]
 801d986:	45cc      	cmp	ip, r9
 801d988:	dd21      	ble.n	801d9ce <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801d98a:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801d98e:	d41e      	bmi.n	801d9ce <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801d990:	68e9      	ldr	r1, [r5, #12]
 801d992:	4551      	cmp	r1, sl
 801d994:	dd1b      	ble.n	801d9ce <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801d996:	9901      	ldr	r1, [sp, #4]
 801d998:	fa0f fc8c 	sxth.w	ip, ip
 801d99c:	fb0a 1c0c 	mla	ip, sl, ip, r1
 801d9a0:	f06f 0103 	mvn.w	r1, #3
 801d9a4:	f81c c009 	ldrb.w	ip, [ip, r9]
 801d9a8:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801d9ac:	f817 a00c 	ldrb.w	sl, [r7, ip]
 801d9b0:	eb07 090c 	add.w	r9, r7, ip
 801d9b4:	fb01 fc06 	mul.w	ip, r1, r6
 801d9b8:	f804 a00c 	strb.w	sl, [r4, ip]
 801d9bc:	44a4      	add	ip, r4
 801d9be:	f899 a001 	ldrb.w	sl, [r9, #1]
 801d9c2:	f88c a001 	strb.w	sl, [ip, #1]
 801d9c6:	f899 9002 	ldrb.w	r9, [r9, #2]
 801d9ca:	f88c 9002 	strb.w	r9, [ip, #2]
 801d9ce:	4440      	add	r0, r8
 801d9d0:	4472      	add	r2, lr
 801d9d2:	3e01      	subs	r6, #1
 801d9d4:	e792      	b.n	801d8fc <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801d9d6:	b003      	add	sp, #12
 801d9d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d9dc <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d9dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d9e0:	b089      	sub	sp, #36	@ 0x24
 801d9e2:	469b      	mov	fp, r3
 801d9e4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d9e8:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 801d9ea:	f89d 306c 	ldrb.w	r3, [sp, #108]	@ 0x6c
 801d9ee:	9101      	str	r1, [sp, #4]
 801d9f0:	9205      	str	r2, [sp, #20]
 801d9f2:	9306      	str	r3, [sp, #24]
 801d9f4:	6842      	ldr	r2, [r0, #4]
 801d9f6:	f8dd a068 	ldr.w	sl, [sp, #104]	@ 0x68
 801d9fa:	e9dd 3118 	ldrd	r3, r1, [sp, #96]	@ 0x60
 801d9fe:	fb02 3101 	mla	r1, r2, r1, r3
 801da02:	6803      	ldr	r3, [r0, #0]
 801da04:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 801da08:	f8da 3000 	ldr.w	r3, [sl]
 801da0c:	9302      	str	r3, [sp, #8]
 801da0e:	f8da 3004 	ldr.w	r3, [sl, #4]
 801da12:	3304      	adds	r3, #4
 801da14:	9303      	str	r3, [sp, #12]
 801da16:	9b01      	ldr	r3, [sp, #4]
 801da18:	2b00      	cmp	r3, #0
 801da1a:	dc03      	bgt.n	801da24 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801da1c:	9b05      	ldr	r3, [sp, #20]
 801da1e:	2b00      	cmp	r3, #0
 801da20:	f340 814e 	ble.w	801dcc0 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 801da24:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801da26:	f9ba 6008 	ldrsh.w	r6, [sl, #8]
 801da2a:	f503 4200 	add.w	r2, r3, #32768	@ 0x8000
 801da2e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801da30:	f9ba 500c 	ldrsh.w	r5, [sl, #12]
 801da34:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 801da38:	f1bb 0f00 	cmp.w	fp, #0
 801da3c:	dd0f      	ble.n	801da5e <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801da3e:	1410      	asrs	r0, r2, #16
 801da40:	d405      	bmi.n	801da4e <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801da42:	42b0      	cmp	r0, r6
 801da44:	da03      	bge.n	801da4e <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801da46:	1418      	asrs	r0, r3, #16
 801da48:	d401      	bmi.n	801da4e <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801da4a:	42a8      	cmp	r0, r5
 801da4c:	db08      	blt.n	801da60 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801da4e:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801da50:	f10b 3bff 	add.w	fp, fp, #4294967295
 801da54:	3104      	adds	r1, #4
 801da56:	4402      	add	r2, r0
 801da58:	9816      	ldr	r0, [sp, #88]	@ 0x58
 801da5a:	4403      	add	r3, r0
 801da5c:	e7ec      	b.n	801da38 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801da5e:	d04a      	beq.n	801daf6 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11a>
 801da60:	f10b 30ff 	add.w	r0, fp, #4294967295
 801da64:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801da66:	fb04 2400 	mla	r4, r4, r0, r2
 801da6a:	1424      	asrs	r4, r4, #16
 801da6c:	d43a      	bmi.n	801dae4 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x108>
 801da6e:	42b4      	cmp	r4, r6
 801da70:	da38      	bge.n	801dae4 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x108>
 801da72:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801da74:	fb04 3000 	mla	r0, r4, r0, r3
 801da78:	1400      	asrs	r0, r0, #16
 801da7a:	d433      	bmi.n	801dae4 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x108>
 801da7c:	42a8      	cmp	r0, r5
 801da7e:	da31      	bge.n	801dae4 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x108>
 801da80:	1d08      	adds	r0, r1, #4
 801da82:	46dc      	mov	ip, fp
 801da84:	f1bc 0f00 	cmp.w	ip, #0
 801da88:	dd31      	ble.n	801daee <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801da8a:	f9ba 6008 	ldrsh.w	r6, [sl, #8]
 801da8e:	141c      	asrs	r4, r3, #16
 801da90:	9f02      	ldr	r7, [sp, #8]
 801da92:	1415      	asrs	r5, r2, #16
 801da94:	fb06 7404 	mla	r4, r6, r4, r7
 801da98:	5d64      	ldrb	r4, [r4, r5]
 801da9a:	9d03      	ldr	r5, [sp, #12]
 801da9c:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
 801daa0:	9d06      	ldr	r5, [sp, #24]
 801daa2:	0e34      	lsrs	r4, r6, #24
 801daa4:	436c      	muls	r4, r5
 801daa6:	1c65      	adds	r5, r4, #1
 801daa8:	eb05 2424 	add.w	r4, r5, r4, asr #8
 801daac:	f3c6 4507 	ubfx	r5, r6, #16, #8
 801dab0:	1224      	asrs	r4, r4, #8
 801dab2:	b2ef      	uxtb	r7, r5
 801dab4:	2cff      	cmp	r4, #255	@ 0xff
 801dab6:	9704      	str	r7, [sp, #16]
 801dab8:	f3c6 2707 	ubfx	r7, r6, #8, #8
 801dabc:	fa5f fe87 	uxtb.w	lr, r7
 801dac0:	f040 80ca 	bne.w	801dc58 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801dac4:	f800 6c04 	strb.w	r6, [r0, #-4]
 801dac8:	f800 7c03 	strb.w	r7, [r0, #-3]
 801dacc:	f800 5c02 	strb.w	r5, [r0, #-2]
 801dad0:	f800 4c01 	strb.w	r4, [r0, #-1]
 801dad4:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801dad6:	3004      	adds	r0, #4
 801dad8:	f10c 3cff 	add.w	ip, ip, #4294967295
 801dadc:	4422      	add	r2, r4
 801dade:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801dae0:	4423      	add	r3, r4
 801dae2:	e7cf      	b.n	801da84 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801dae4:	2700      	movs	r7, #0
 801dae6:	eb0b 0007 	add.w	r0, fp, r7
 801daea:	2800      	cmp	r0, #0
 801daec:	dc41      	bgt.n	801db72 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801daee:	ea2b 73eb 	bic.w	r3, fp, fp, asr #31
 801daf2:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801daf6:	9b01      	ldr	r3, [sp, #4]
 801daf8:	2b00      	cmp	r3, #0
 801dafa:	f340 80e1 	ble.w	801dcc0 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 801dafe:	ee30 0a04 	vadd.f32	s0, s0, s8
 801db02:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801db04:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801db08:	eeb0 6a62 	vmov.f32	s12, s5
 801db0c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801db10:	ee31 1a05 	vadd.f32	s2, s2, s10
 801db14:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801db18:	ed8d 6a13 	vstr	s12, [sp, #76]	@ 0x4c
 801db1c:	eeb0 6a43 	vmov.f32	s12, s6
 801db20:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801db24:	ed8d 6a14 	vstr	s12, [sp, #80]	@ 0x50
 801db28:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801db2c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801db30:	ee77 2a62 	vsub.f32	s5, s14, s5
 801db34:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801db38:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801db3c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801db40:	ee12 2a90 	vmov	r2, s5
 801db44:	eef0 2a47 	vmov.f32	s5, s14
 801db48:	fb92 f3f3 	sdiv	r3, r2, r3
 801db4c:	ee13 2a10 	vmov	r2, s6
 801db50:	9315      	str	r3, [sp, #84]	@ 0x54
 801db52:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801db54:	eeb0 3a67 	vmov.f32	s6, s15
 801db58:	fb92 f3f3 	sdiv	r3, r2, r3
 801db5c:	9316      	str	r3, [sp, #88]	@ 0x58
 801db5e:	9b01      	ldr	r3, [sp, #4]
 801db60:	9a05      	ldr	r2, [sp, #20]
 801db62:	3b01      	subs	r3, #1
 801db64:	9301      	str	r3, [sp, #4]
 801db66:	bf08      	it	eq
 801db68:	4693      	moveq	fp, r2
 801db6a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801db6c:	bf18      	it	ne
 801db6e:	469b      	movne	fp, r3
 801db70:	e751      	b.n	801da16 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801db72:	1415      	asrs	r5, r2, #16
 801db74:	d42f      	bmi.n	801dbd6 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801db76:	f8da 4008 	ldr.w	r4, [sl, #8]
 801db7a:	42ac      	cmp	r4, r5
 801db7c:	dd2b      	ble.n	801dbd6 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801db7e:	141e      	asrs	r6, r3, #16
 801db80:	d429      	bmi.n	801dbd6 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801db82:	f8da 000c 	ldr.w	r0, [sl, #12]
 801db86:	42b0      	cmp	r0, r6
 801db88:	dd25      	ble.n	801dbd6 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801db8a:	9802      	ldr	r0, [sp, #8]
 801db8c:	b224      	sxth	r4, r4
 801db8e:	fb06 0404 	mla	r4, r6, r4, r0
 801db92:	5d60      	ldrb	r0, [r4, r5]
 801db94:	9c03      	ldr	r4, [sp, #12]
 801db96:	f854 5020 	ldr.w	r5, [r4, r0, lsl #2]
 801db9a:	9c06      	ldr	r4, [sp, #24]
 801db9c:	0e28      	lsrs	r0, r5, #24
 801db9e:	4360      	muls	r0, r4
 801dba0:	1c44      	adds	r4, r0, #1
 801dba2:	eb04 2020 	add.w	r0, r4, r0, asr #8
 801dba6:	f3c5 4407 	ubfx	r4, r5, #16, #8
 801dbaa:	1200      	asrs	r0, r0, #8
 801dbac:	b2e6      	uxtb	r6, r4
 801dbae:	28ff      	cmp	r0, #255	@ 0xff
 801dbb0:	9607      	str	r6, [sp, #28]
 801dbb2:	f3c5 2607 	ubfx	r6, r5, #8, #8
 801dbb6:	fa5f fe86 	uxtb.w	lr, r6
 801dbba:	d112      	bne.n	801dbe2 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801dbbc:	f06f 0c03 	mvn.w	ip, #3
 801dbc0:	fb0c fc07 	mul.w	ip, ip, r7
 801dbc4:	f801 500c 	strb.w	r5, [r1, ip]
 801dbc8:	448c      	add	ip, r1
 801dbca:	f88c 6001 	strb.w	r6, [ip, #1]
 801dbce:	f88c 4002 	strb.w	r4, [ip, #2]
 801dbd2:	f88c 0003 	strb.w	r0, [ip, #3]
 801dbd6:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801dbd8:	3f01      	subs	r7, #1
 801dbda:	4402      	add	r2, r0
 801dbdc:	9816      	ldr	r0, [sp, #88]	@ 0x58
 801dbde:	4403      	add	r3, r0
 801dbe0:	e781      	b.n	801dae6 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10a>
 801dbe2:	b2c4      	uxtb	r4, r0
 801dbe4:	9404      	str	r4, [sp, #16]
 801dbe6:	2800      	cmp	r0, #0
 801dbe8:	d0f5      	beq.n	801dbd6 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801dbea:	f06f 0403 	mvn.w	r4, #3
 801dbee:	b2ed      	uxtb	r5, r5
 801dbf0:	fb00 fe0e 	mul.w	lr, r0, lr
 801dbf4:	fb04 f807 	mul.w	r8, r4, r7
 801dbf8:	9c04      	ldr	r4, [sp, #16]
 801dbfa:	eb01 0c08 	add.w	ip, r1, r8
 801dbfe:	f89c 9003 	ldrb.w	r9, [ip, #3]
 801dc02:	fb04 f609 	mul.w	r6, r4, r9
 801dc06:	1c74      	adds	r4, r6, #1
 801dc08:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 801dc0c:	9c04      	ldr	r4, [sp, #16]
 801dc0e:	1236      	asrs	r6, r6, #8
 801dc10:	444c      	add	r4, r9
 801dc12:	1ba4      	subs	r4, r4, r6
 801dc14:	eba9 0606 	sub.w	r6, r9, r6
 801dc18:	f811 9008 	ldrb.w	r9, [r1, r8]
 801dc1c:	b2e4      	uxtb	r4, r4
 801dc1e:	fb06 f909 	mul.w	r9, r6, r9
 801dc22:	fb00 9505 	mla	r5, r0, r5, r9
 801dc26:	fb95 f5f4 	sdiv	r5, r5, r4
 801dc2a:	f801 5008 	strb.w	r5, [r1, r8]
 801dc2e:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801dc32:	f89c 9002 	ldrb.w	r9, [ip, #2]
 801dc36:	fb06 ee05 	mla	lr, r6, r5, lr
 801dc3a:	9d07      	ldr	r5, [sp, #28]
 801dc3c:	f88c 4003 	strb.w	r4, [ip, #3]
 801dc40:	4368      	muls	r0, r5
 801dc42:	fb06 0609 	mla	r6, r6, r9, r0
 801dc46:	fb9e fef4 	sdiv	lr, lr, r4
 801dc4a:	fb96 f6f4 	sdiv	r6, r6, r4
 801dc4e:	f88c e001 	strb.w	lr, [ip, #1]
 801dc52:	f88c 6002 	strb.w	r6, [ip, #2]
 801dc56:	e7be      	b.n	801dbd6 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801dc58:	b2e5      	uxtb	r5, r4
 801dc5a:	2c00      	cmp	r4, #0
 801dc5c:	f43f af3a 	beq.w	801dad4 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf8>
 801dc60:	f810 8c01 	ldrb.w	r8, [r0, #-1]
 801dc64:	b2f6      	uxtb	r6, r6
 801dc66:	fb04 fe0e 	mul.w	lr, r4, lr
 801dc6a:	fb05 f908 	mul.w	r9, r5, r8
 801dc6e:	4445      	add	r5, r8
 801dc70:	f109 0701 	add.w	r7, r9, #1
 801dc74:	eb07 2719 	add.w	r7, r7, r9, lsr #8
 801dc78:	123f      	asrs	r7, r7, #8
 801dc7a:	1bed      	subs	r5, r5, r7
 801dc7c:	eba8 0707 	sub.w	r7, r8, r7
 801dc80:	f810 8c04 	ldrb.w	r8, [r0, #-4]
 801dc84:	b2ed      	uxtb	r5, r5
 801dc86:	fb07 f808 	mul.w	r8, r7, r8
 801dc8a:	f800 5c01 	strb.w	r5, [r0, #-1]
 801dc8e:	fb04 8606 	mla	r6, r4, r6, r8
 801dc92:	f810 8c02 	ldrb.w	r8, [r0, #-2]
 801dc96:	fb96 f6f5 	sdiv	r6, r6, r5
 801dc9a:	f800 6c04 	strb.w	r6, [r0, #-4]
 801dc9e:	f810 6c03 	ldrb.w	r6, [r0, #-3]
 801dca2:	fb07 ee06 	mla	lr, r7, r6, lr
 801dca6:	9e04      	ldr	r6, [sp, #16]
 801dca8:	4374      	muls	r4, r6
 801dcaa:	fb07 4708 	mla	r7, r7, r8, r4
 801dcae:	fb9e fef5 	sdiv	lr, lr, r5
 801dcb2:	fb97 f7f5 	sdiv	r7, r7, r5
 801dcb6:	f800 ec03 	strb.w	lr, [r0, #-3]
 801dcba:	f800 7c02 	strb.w	r7, [r0, #-2]
 801dcbe:	e709      	b.n	801dad4 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf8>
 801dcc0:	b009      	add	sp, #36	@ 0x24
 801dcc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801dcc6 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801dcc6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dcca:	b087      	sub	sp, #28
 801dccc:	469b      	mov	fp, r3
 801dcce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801dcd2:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801dcd4:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 801dcd8:	9100      	str	r1, [sp, #0]
 801dcda:	9204      	str	r2, [sp, #16]
 801dcdc:	9305      	str	r3, [sp, #20]
 801dcde:	6842      	ldr	r2, [r0, #4]
 801dce0:	e9dd 3116 	ldrd	r3, r1, [sp, #88]	@ 0x58
 801dce4:	fb02 3101 	mla	r1, r2, r1, r3
 801dce8:	6803      	ldr	r3, [r0, #0]
 801dcea:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 801dcee:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801dcf0:	681b      	ldr	r3, [r3, #0]
 801dcf2:	9301      	str	r3, [sp, #4]
 801dcf4:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801dcf6:	685b      	ldr	r3, [r3, #4]
 801dcf8:	9302      	str	r3, [sp, #8]
 801dcfa:	9b00      	ldr	r3, [sp, #0]
 801dcfc:	2b00      	cmp	r3, #0
 801dcfe:	dc03      	bgt.n	801dd08 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801dd00:	9b04      	ldr	r3, [sp, #16]
 801dd02:	2b00      	cmp	r3, #0
 801dd04:	f340 8156 	ble.w	801dfb4 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 801dd08:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801dd0a:	f9b3 6008 	ldrsh.w	r6, [r3, #8]
 801dd0e:	f9b3 500c 	ldrsh.w	r5, [r3, #12]
 801dd12:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801dd14:	f503 4200 	add.w	r2, r3, #32768	@ 0x8000
 801dd18:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801dd1a:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 801dd1e:	f1bb 0f00 	cmp.w	fp, #0
 801dd22:	dd0f      	ble.n	801dd44 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801dd24:	1410      	asrs	r0, r2, #16
 801dd26:	d405      	bmi.n	801dd34 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801dd28:	42b0      	cmp	r0, r6
 801dd2a:	da03      	bge.n	801dd34 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801dd2c:	1418      	asrs	r0, r3, #16
 801dd2e:	d401      	bmi.n	801dd34 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801dd30:	42a8      	cmp	r0, r5
 801dd32:	db08      	blt.n	801dd46 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801dd34:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801dd36:	f10b 3bff 	add.w	fp, fp, #4294967295
 801dd3a:	3104      	adds	r1, #4
 801dd3c:	4402      	add	r2, r0
 801dd3e:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801dd40:	4403      	add	r3, r0
 801dd42:	e7ec      	b.n	801dd1e <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801dd44:	d053      	beq.n	801ddee <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801dd46:	f10b 30ff 	add.w	r0, fp, #4294967295
 801dd4a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801dd4c:	fb04 2400 	mla	r4, r4, r0, r2
 801dd50:	1424      	asrs	r4, r4, #16
 801dd52:	d442      	bmi.n	801ddda <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801dd54:	42b4      	cmp	r4, r6
 801dd56:	da40      	bge.n	801ddda <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801dd58:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801dd5a:	fb04 3000 	mla	r0, r4, r0, r3
 801dd5e:	1400      	asrs	r0, r0, #16
 801dd60:	d43b      	bmi.n	801ddda <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801dd62:	42a8      	cmp	r0, r5
 801dd64:	da39      	bge.n	801ddda <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801dd66:	1d08      	adds	r0, r1, #4
 801dd68:	46d8      	mov	r8, fp
 801dd6a:	f1b8 0f00 	cmp.w	r8, #0
 801dd6e:	dd3a      	ble.n	801dde6 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 801dd70:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 801dd72:	141c      	asrs	r4, r3, #16
 801dd74:	f9b5 6008 	ldrsh.w	r6, [r5, #8]
 801dd78:	1415      	asrs	r5, r2, #16
 801dd7a:	fb06 5404 	mla	r4, r6, r4, r5
 801dd7e:	9e02      	ldr	r6, [sp, #8]
 801dd80:	9d01      	ldr	r5, [sp, #4]
 801dd82:	f835 5014 	ldrh.w	r5, [r5, r4, lsl #1]
 801dd86:	5d34      	ldrb	r4, [r6, r4]
 801dd88:	9e05      	ldr	r6, [sp, #20]
 801dd8a:	ea4f 2e25 	mov.w	lr, r5, asr #8
 801dd8e:	ea4f 0ce5 	mov.w	ip, r5, asr #3
 801dd92:	4374      	muls	r4, r6
 801dd94:	00ed      	lsls	r5, r5, #3
 801dd96:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 801dd9a:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 801dd9e:	1c66      	adds	r6, r4, #1
 801dda0:	b2ed      	uxtb	r5, r5
 801dda2:	ea4e 1e5e 	orr.w	lr, lr, lr, lsr #5
 801dda6:	eb06 2414 	add.w	r4, r6, r4, lsr #8
 801ddaa:	ea4c 1c9c 	orr.w	ip, ip, ip, lsr #6
 801ddae:	1224      	asrs	r4, r4, #8
 801ddb0:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 801ddb4:	2cff      	cmp	r4, #255	@ 0xff
 801ddb6:	f040 80cb 	bne.w	801df50 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801ddba:	f800 5c04 	strb.w	r5, [r0, #-4]
 801ddbe:	f800 cc03 	strb.w	ip, [r0, #-3]
 801ddc2:	f800 ec02 	strb.w	lr, [r0, #-2]
 801ddc6:	f800 4c01 	strb.w	r4, [r0, #-1]
 801ddca:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801ddcc:	3004      	adds	r0, #4
 801ddce:	f108 38ff 	add.w	r8, r8, #4294967295
 801ddd2:	4422      	add	r2, r4
 801ddd4:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801ddd6:	4423      	add	r3, r4
 801ddd8:	e7c7      	b.n	801dd6a <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801ddda:	f04f 0c00 	mov.w	ip, #0
 801ddde:	eb0b 000c 	add.w	r0, fp, ip
 801dde2:	2800      	cmp	r0, #0
 801dde4:	dc41      	bgt.n	801de6a <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801dde6:	ea2b 73eb 	bic.w	r3, fp, fp, asr #31
 801ddea:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801ddee:	9b00      	ldr	r3, [sp, #0]
 801ddf0:	2b00      	cmp	r3, #0
 801ddf2:	f340 80df 	ble.w	801dfb4 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 801ddf6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ddfa:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ddfc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801de00:	eeb0 6a62 	vmov.f32	s12, s5
 801de04:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801de08:	ee31 1a05 	vadd.f32	s2, s2, s10
 801de0c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801de10:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 801de14:	eeb0 6a43 	vmov.f32	s12, s6
 801de18:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801de1c:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 801de20:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801de24:	ee61 7a27 	vmul.f32	s15, s2, s15
 801de28:	ee77 2a62 	vsub.f32	s5, s14, s5
 801de2c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801de30:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801de34:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801de38:	ee12 2a90 	vmov	r2, s5
 801de3c:	eef0 2a47 	vmov.f32	s5, s14
 801de40:	fb92 f3f3 	sdiv	r3, r2, r3
 801de44:	ee13 2a10 	vmov	r2, s6
 801de48:	9313      	str	r3, [sp, #76]	@ 0x4c
 801de4a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801de4c:	eeb0 3a67 	vmov.f32	s6, s15
 801de50:	fb92 f3f3 	sdiv	r3, r2, r3
 801de54:	9314      	str	r3, [sp, #80]	@ 0x50
 801de56:	9b00      	ldr	r3, [sp, #0]
 801de58:	9a04      	ldr	r2, [sp, #16]
 801de5a:	3b01      	subs	r3, #1
 801de5c:	9300      	str	r3, [sp, #0]
 801de5e:	bf08      	it	eq
 801de60:	4693      	moveq	fp, r2
 801de62:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801de64:	bf18      	it	ne
 801de66:	469b      	movne	fp, r3
 801de68:	e747      	b.n	801dcfa <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801de6a:	1415      	asrs	r5, r2, #16
 801de6c:	d433      	bmi.n	801ded6 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801de6e:	9818      	ldr	r0, [sp, #96]	@ 0x60
 801de70:	6884      	ldr	r4, [r0, #8]
 801de72:	42ac      	cmp	r4, r5
 801de74:	dd2f      	ble.n	801ded6 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801de76:	141e      	asrs	r6, r3, #16
 801de78:	d42d      	bmi.n	801ded6 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801de7a:	68c0      	ldr	r0, [r0, #12]
 801de7c:	42b0      	cmp	r0, r6
 801de7e:	dd2a      	ble.n	801ded6 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801de80:	b224      	sxth	r4, r4
 801de82:	9801      	ldr	r0, [sp, #4]
 801de84:	fb06 5504 	mla	r5, r6, r4, r5
 801de88:	f830 4015 	ldrh.w	r4, [r0, r5, lsl #1]
 801de8c:	9802      	ldr	r0, [sp, #8]
 801de8e:	ea4f 2e24 	mov.w	lr, r4, asr #8
 801de92:	5d40      	ldrb	r0, [r0, r5]
 801de94:	10e7      	asrs	r7, r4, #3
 801de96:	9d05      	ldr	r5, [sp, #20]
 801de98:	00e4      	lsls	r4, r4, #3
 801de9a:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 801de9e:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801dea2:	4368      	muls	r0, r5
 801dea4:	b2e4      	uxtb	r4, r4
 801dea6:	ea4e 1e5e 	orr.w	lr, lr, lr, lsr #5
 801deaa:	1c45      	adds	r5, r0, #1
 801deac:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801deb0:	ea47 1797 	orr.w	r7, r7, r7, lsr #6
 801deb4:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801deb8:	9403      	str	r4, [sp, #12]
 801deba:	1200      	asrs	r0, r0, #8
 801debc:	28ff      	cmp	r0, #255	@ 0xff
 801debe:	d111      	bne.n	801dee4 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 801dec0:	f06f 0403 	mvn.w	r4, #3
 801dec4:	fb04 f50c 	mul.w	r5, r4, ip
 801dec8:	9c03      	ldr	r4, [sp, #12]
 801deca:	554c      	strb	r4, [r1, r5]
 801decc:	440d      	add	r5, r1
 801dece:	706f      	strb	r7, [r5, #1]
 801ded0:	f885 e002 	strb.w	lr, [r5, #2]
 801ded4:	70e8      	strb	r0, [r5, #3]
 801ded6:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801ded8:	f10c 3cff 	add.w	ip, ip, #4294967295
 801dedc:	4402      	add	r2, r0
 801dede:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801dee0:	4403      	add	r3, r0
 801dee2:	e77c      	b.n	801ddde <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801dee4:	b2c5      	uxtb	r5, r0
 801dee6:	2800      	cmp	r0, #0
 801dee8:	d0f5      	beq.n	801ded6 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801deea:	f06f 0403 	mvn.w	r4, #3
 801deee:	4347      	muls	r7, r0
 801def0:	fb04 f90c 	mul.w	r9, r4, ip
 801def4:	eb01 0809 	add.w	r8, r1, r9
 801def8:	f898 a003 	ldrb.w	sl, [r8, #3]
 801defc:	fb05 f60a 	mul.w	r6, r5, sl
 801df00:	4455      	add	r5, sl
 801df02:	1c74      	adds	r4, r6, #1
 801df04:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 801df08:	9c03      	ldr	r4, [sp, #12]
 801df0a:	1236      	asrs	r6, r6, #8
 801df0c:	4344      	muls	r4, r0
 801df0e:	fb00 f00e 	mul.w	r0, r0, lr
 801df12:	1bad      	subs	r5, r5, r6
 801df14:	ebaa 0606 	sub.w	r6, sl, r6
 801df18:	f811 a009 	ldrb.w	sl, [r1, r9]
 801df1c:	b2ed      	uxtb	r5, r5
 801df1e:	fb06 440a 	mla	r4, r6, sl, r4
 801df22:	fb94 f4f5 	sdiv	r4, r4, r5
 801df26:	f801 4009 	strb.w	r4, [r1, r9]
 801df2a:	f898 4001 	ldrb.w	r4, [r8, #1]
 801df2e:	f898 a002 	ldrb.w	sl, [r8, #2]
 801df32:	fb06 7704 	mla	r7, r6, r4, r7
 801df36:	fb06 060a 	mla	r6, r6, sl, r0
 801df3a:	f888 5003 	strb.w	r5, [r8, #3]
 801df3e:	fb97 f7f5 	sdiv	r7, r7, r5
 801df42:	fb96 f6f5 	sdiv	r6, r6, r5
 801df46:	f888 7001 	strb.w	r7, [r8, #1]
 801df4a:	f888 6002 	strb.w	r6, [r8, #2]
 801df4e:	e7c2      	b.n	801ded6 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801df50:	b2e6      	uxtb	r6, r4
 801df52:	2c00      	cmp	r4, #0
 801df54:	f43f af39 	beq.w	801ddca <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 801df58:	f810 9c01 	ldrb.w	r9, [r0, #-1]
 801df5c:	4365      	muls	r5, r4
 801df5e:	fb04 fc0c 	mul.w	ip, r4, ip
 801df62:	fb06 fa09 	mul.w	sl, r6, r9
 801df66:	444e      	add	r6, r9
 801df68:	fb04 f40e 	mul.w	r4, r4, lr
 801df6c:	f10a 0701 	add.w	r7, sl, #1
 801df70:	eb07 271a 	add.w	r7, r7, sl, lsr #8
 801df74:	123f      	asrs	r7, r7, #8
 801df76:	1bf6      	subs	r6, r6, r7
 801df78:	eba9 0707 	sub.w	r7, r9, r7
 801df7c:	f810 9c04 	ldrb.w	r9, [r0, #-4]
 801df80:	b2f6      	uxtb	r6, r6
 801df82:	fb07 5509 	mla	r5, r7, r9, r5
 801df86:	f810 9c02 	ldrb.w	r9, [r0, #-2]
 801df8a:	f800 6c01 	strb.w	r6, [r0, #-1]
 801df8e:	fb95 f5f6 	sdiv	r5, r5, r6
 801df92:	f800 5c04 	strb.w	r5, [r0, #-4]
 801df96:	f810 5c03 	ldrb.w	r5, [r0, #-3]
 801df9a:	fb07 cc05 	mla	ip, r7, r5, ip
 801df9e:	fb07 4709 	mla	r7, r7, r9, r4
 801dfa2:	fb9c fcf6 	sdiv	ip, ip, r6
 801dfa6:	fb97 f7f6 	sdiv	r7, r7, r6
 801dfaa:	f800 cc03 	strb.w	ip, [r0, #-3]
 801dfae:	f800 7c02 	strb.w	r7, [r0, #-2]
 801dfb2:	e70a      	b.n	801ddca <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 801dfb4:	b007      	add	sp, #28
 801dfb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801dfba <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801dfba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dfbe:	b087      	sub	sp, #28
 801dfc0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801dfc4:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801dfc6:	9101      	str	r1, [sp, #4]
 801dfc8:	9205      	str	r2, [sp, #20]
 801dfca:	6861      	ldr	r1, [r4, #4]
 801dfcc:	f8dd b060 	ldr.w	fp, [sp, #96]	@ 0x60
 801dfd0:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	@ 0x58
 801dfd4:	fb01 2000 	mla	r0, r1, r0, r2
 801dfd8:	6822      	ldr	r2, [r4, #0]
 801dfda:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 801dfde:	f8db 2000 	ldr.w	r2, [fp]
 801dfe2:	9202      	str	r2, [sp, #8]
 801dfe4:	f8db 2004 	ldr.w	r2, [fp, #4]
 801dfe8:	9203      	str	r2, [sp, #12]
 801dfea:	9a01      	ldr	r2, [sp, #4]
 801dfec:	2a00      	cmp	r2, #0
 801dfee:	dc03      	bgt.n	801dff8 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801dff0:	9a05      	ldr	r2, [sp, #20]
 801dff2:	2a00      	cmp	r2, #0
 801dff4:	f340 8151 	ble.w	801e29a <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801dff8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801dffa:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 801dffe:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801e002:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801e004:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 801e008:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801e00c:	2b00      	cmp	r3, #0
 801e00e:	dd0e      	ble.n	801e02e <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801e010:	140c      	asrs	r4, r1, #16
 801e012:	d405      	bmi.n	801e020 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e014:	42bc      	cmp	r4, r7
 801e016:	da03      	bge.n	801e020 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e018:	1414      	asrs	r4, r2, #16
 801e01a:	d401      	bmi.n	801e020 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e01c:	42b4      	cmp	r4, r6
 801e01e:	db07      	blt.n	801e030 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801e020:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801e022:	3b01      	subs	r3, #1
 801e024:	3004      	adds	r0, #4
 801e026:	4421      	add	r1, r4
 801e028:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801e02a:	4422      	add	r2, r4
 801e02c:	e7ee      	b.n	801e00c <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801e02e:	d049      	beq.n	801e0c4 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10a>
 801e030:	1e5c      	subs	r4, r3, #1
 801e032:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801e034:	fb05 1504 	mla	r5, r5, r4, r1
 801e038:	142d      	asrs	r5, r5, #16
 801e03a:	d43b      	bmi.n	801e0b4 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801e03c:	42bd      	cmp	r5, r7
 801e03e:	da39      	bge.n	801e0b4 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801e040:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801e042:	fb05 2404 	mla	r4, r5, r4, r2
 801e046:	1424      	asrs	r4, r4, #16
 801e048:	d434      	bmi.n	801e0b4 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801e04a:	42b4      	cmp	r4, r6
 801e04c:	da32      	bge.n	801e0b4 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801e04e:	1d04      	adds	r4, r0, #4
 801e050:	4699      	mov	r9, r3
 801e052:	f1b9 0f00 	cmp.w	r9, #0
 801e056:	dd31      	ble.n	801e0bc <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x102>
 801e058:	1415      	asrs	r5, r2, #16
 801e05a:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 801e05e:	140e      	asrs	r6, r1, #16
 801e060:	fb07 6605 	mla	r6, r7, r5, r6
 801e064:	9d02      	ldr	r5, [sp, #8]
 801e066:	9f03      	ldr	r7, [sp, #12]
 801e068:	f835 5016 	ldrh.w	r5, [r5, r6, lsl #1]
 801e06c:	5dbe      	ldrb	r6, [r7, r6]
 801e06e:	ea4f 2825 	mov.w	r8, r5, asr #8
 801e072:	10ef      	asrs	r7, r5, #3
 801e074:	2eff      	cmp	r6, #255	@ 0xff
 801e076:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 801e07a:	f008 08f8 	and.w	r8, r8, #248	@ 0xf8
 801e07e:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801e082:	b2ed      	uxtb	r5, r5
 801e084:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 801e088:	ea47 1797 	orr.w	r7, r7, r7, lsr #6
 801e08c:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 801e090:	f040 80cd 	bne.w	801e22e <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 801e094:	f804 5c04 	strb.w	r5, [r4, #-4]
 801e098:	f804 7c03 	strb.w	r7, [r4, #-3]
 801e09c:	f804 8c02 	strb.w	r8, [r4, #-2]
 801e0a0:	f804 6c01 	strb.w	r6, [r4, #-1]
 801e0a4:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801e0a6:	3404      	adds	r4, #4
 801e0a8:	f109 39ff 	add.w	r9, r9, #4294967295
 801e0ac:	4429      	add	r1, r5
 801e0ae:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801e0b0:	442a      	add	r2, r5
 801e0b2:	e7ce      	b.n	801e052 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801e0b4:	2700      	movs	r7, #0
 801e0b6:	19dc      	adds	r4, r3, r7
 801e0b8:	2c00      	cmp	r4, #0
 801e0ba:	dc3f      	bgt.n	801e13c <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x182>
 801e0bc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e0c0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801e0c4:	9b01      	ldr	r3, [sp, #4]
 801e0c6:	2b00      	cmp	r3, #0
 801e0c8:	f340 80e7 	ble.w	801e29a <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801e0cc:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e0d0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e0d2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e0d6:	eeb0 6a62 	vmov.f32	s12, s5
 801e0da:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e0de:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e0e2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e0e6:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 801e0ea:	eeb0 6a43 	vmov.f32	s12, s6
 801e0ee:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e0f2:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 801e0f6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e0fa:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e0fe:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e102:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e106:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e10a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e10e:	ee12 2a90 	vmov	r2, s5
 801e112:	eef0 2a47 	vmov.f32	s5, s14
 801e116:	fb92 f3f3 	sdiv	r3, r2, r3
 801e11a:	ee13 2a10 	vmov	r2, s6
 801e11e:	9313      	str	r3, [sp, #76]	@ 0x4c
 801e120:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e122:	eeb0 3a67 	vmov.f32	s6, s15
 801e126:	fb92 f3f3 	sdiv	r3, r2, r3
 801e12a:	9314      	str	r3, [sp, #80]	@ 0x50
 801e12c:	9b01      	ldr	r3, [sp, #4]
 801e12e:	9a05      	ldr	r2, [sp, #20]
 801e130:	3b01      	subs	r3, #1
 801e132:	9301      	str	r3, [sp, #4]
 801e134:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e136:	bf08      	it	eq
 801e138:	4613      	moveq	r3, r2
 801e13a:	e756      	b.n	801dfea <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801e13c:	140e      	asrs	r6, r1, #16
 801e13e:	d434      	bmi.n	801e1aa <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801e140:	f8db 5008 	ldr.w	r5, [fp, #8]
 801e144:	42b5      	cmp	r5, r6
 801e146:	dd30      	ble.n	801e1aa <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801e148:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801e14c:	d42d      	bmi.n	801e1aa <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801e14e:	f8db 400c 	ldr.w	r4, [fp, #12]
 801e152:	4564      	cmp	r4, ip
 801e154:	dd29      	ble.n	801e1aa <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801e156:	b22d      	sxth	r5, r5
 801e158:	9c02      	ldr	r4, [sp, #8]
 801e15a:	fb0c 6505 	mla	r5, ip, r5, r6
 801e15e:	9e03      	ldr	r6, [sp, #12]
 801e160:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 801e164:	5d75      	ldrb	r5, [r6, r5]
 801e166:	ea4f 2824 	mov.w	r8, r4, asr #8
 801e16a:	2dff      	cmp	r5, #255	@ 0xff
 801e16c:	f008 08f8 	and.w	r8, r8, #248	@ 0xf8
 801e170:	ea48 1658 	orr.w	r6, r8, r8, lsr #5
 801e174:	9604      	str	r6, [sp, #16]
 801e176:	ea4f 06e4 	mov.w	r6, r4, asr #3
 801e17a:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 801e17e:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801e182:	b2e4      	uxtb	r4, r4
 801e184:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 801e188:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801e18c:	d113      	bne.n	801e1b6 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 801e18e:	f06f 0c03 	mvn.w	ip, #3
 801e192:	fb0c fc07 	mul.w	ip, ip, r7
 801e196:	f800 400c 	strb.w	r4, [r0, ip]
 801e19a:	4484      	add	ip, r0
 801e19c:	9c04      	ldr	r4, [sp, #16]
 801e19e:	f88c 6001 	strb.w	r6, [ip, #1]
 801e1a2:	f88c 4002 	strb.w	r4, [ip, #2]
 801e1a6:	f88c 5003 	strb.w	r5, [ip, #3]
 801e1aa:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801e1ac:	3f01      	subs	r7, #1
 801e1ae:	4421      	add	r1, r4
 801e1b0:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801e1b2:	4422      	add	r2, r4
 801e1b4:	e77f      	b.n	801e0b6 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
 801e1b6:	2d00      	cmp	r5, #0
 801e1b8:	d0f7      	beq.n	801e1aa <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801e1ba:	fb14 f405 	smulbb	r4, r4, r5
 801e1be:	f06f 0c03 	mvn.w	ip, #3
 801e1c2:	fb15 f606 	smulbb	r6, r5, r6
 801e1c6:	fb0c fa07 	mul.w	sl, ip, r7
 801e1ca:	eb00 090a 	add.w	r9, r0, sl
 801e1ce:	f899 8003 	ldrb.w	r8, [r9, #3]
 801e1d2:	fb05 fc08 	mul.w	ip, r5, r8
 801e1d6:	f10c 0e01 	add.w	lr, ip, #1
 801e1da:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 801e1de:	eb05 0c08 	add.w	ip, r5, r8
 801e1e2:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801e1e6:	ebac 0c0e 	sub.w	ip, ip, lr
 801e1ea:	eba8 0e0e 	sub.w	lr, r8, lr
 801e1ee:	f810 800a 	ldrb.w	r8, [r0, sl]
 801e1f2:	fa5f fc8c 	uxtb.w	ip, ip
 801e1f6:	fb0e 4408 	mla	r4, lr, r8, r4
 801e1fa:	fb94 f4fc 	sdiv	r4, r4, ip
 801e1fe:	f800 400a 	strb.w	r4, [r0, sl]
 801e202:	f899 4001 	ldrb.w	r4, [r9, #1]
 801e206:	f889 c003 	strb.w	ip, [r9, #3]
 801e20a:	fb0e 6604 	mla	r6, lr, r4, r6
 801e20e:	f899 4002 	ldrb.w	r4, [r9, #2]
 801e212:	fb96 f6fc 	sdiv	r6, r6, ip
 801e216:	f889 6001 	strb.w	r6, [r9, #1]
 801e21a:	9e04      	ldr	r6, [sp, #16]
 801e21c:	fb15 f506 	smulbb	r5, r5, r6
 801e220:	fb0e 5504 	mla	r5, lr, r4, r5
 801e224:	fb95 f5fc 	sdiv	r5, r5, ip
 801e228:	f889 5002 	strb.w	r5, [r9, #2]
 801e22c:	e7bd      	b.n	801e1aa <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801e22e:	2e00      	cmp	r6, #0
 801e230:	f43f af38 	beq.w	801e0a4 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xea>
 801e234:	f814 ac01 	ldrb.w	sl, [r4, #-1]
 801e238:	fb15 f506 	smulbb	r5, r5, r6
 801e23c:	fb16 f707 	smulbb	r7, r6, r7
 801e240:	fb06 fc0a 	mul.w	ip, r6, sl
 801e244:	f10c 0e01 	add.w	lr, ip, #1
 801e248:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 801e24c:	eb06 0c0a 	add.w	ip, r6, sl
 801e250:	fb16 f608 	smulbb	r6, r6, r8
 801e254:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801e258:	ebac 0c0e 	sub.w	ip, ip, lr
 801e25c:	ebaa 0e0e 	sub.w	lr, sl, lr
 801e260:	f814 ac04 	ldrb.w	sl, [r4, #-4]
 801e264:	fa5f fc8c 	uxtb.w	ip, ip
 801e268:	fb0e 550a 	mla	r5, lr, sl, r5
 801e26c:	f804 cc01 	strb.w	ip, [r4, #-1]
 801e270:	fb95 f5fc 	sdiv	r5, r5, ip
 801e274:	f804 5c04 	strb.w	r5, [r4, #-4]
 801e278:	f814 5c03 	ldrb.w	r5, [r4, #-3]
 801e27c:	fb0e 7705 	mla	r7, lr, r5, r7
 801e280:	f814 5c02 	ldrb.w	r5, [r4, #-2]
 801e284:	fb0e 6605 	mla	r6, lr, r5, r6
 801e288:	fb97 f7fc 	sdiv	r7, r7, ip
 801e28c:	fb96 f6fc 	sdiv	r6, r6, ip
 801e290:	f804 7c03 	strb.w	r7, [r4, #-3]
 801e294:	f804 6c02 	strb.w	r6, [r4, #-2]
 801e298:	e704      	b.n	801e0a4 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xea>
 801e29a:	b007      	add	sp, #28
 801e29c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e2a0 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e2a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e2a4:	b085      	sub	sp, #20
 801e2a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801e2aa:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801e2ac:	9101      	str	r1, [sp, #4]
 801e2ae:	6868      	ldr	r0, [r5, #4]
 801e2b0:	9203      	str	r2, [sp, #12]
 801e2b2:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 801e2b6:	e9dd 1414 	ldrd	r1, r4, [sp, #80]	@ 0x50
 801e2ba:	fb00 1404 	mla	r4, r0, r4, r1
 801e2be:	6829      	ldr	r1, [r5, #0]
 801e2c0:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 801e2c4:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801e2c6:	6809      	ldr	r1, [r1, #0]
 801e2c8:	9102      	str	r1, [sp, #8]
 801e2ca:	9901      	ldr	r1, [sp, #4]
 801e2cc:	2900      	cmp	r1, #0
 801e2ce:	dc03      	bgt.n	801e2d8 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801e2d0:	9903      	ldr	r1, [sp, #12]
 801e2d2:	2900      	cmp	r1, #0
 801e2d4:	f340 8150 	ble.w	801e578 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801e2d8:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801e2da:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 801e2de:	f9b1 700c 	ldrsh.w	r7, [r1, #12]
 801e2e2:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801e2e4:	f501 4000 	add.w	r0, r1, #32768	@ 0x8000
 801e2e8:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801e2ea:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 801e2ee:	2b00      	cmp	r3, #0
 801e2f0:	dd0e      	ble.n	801e310 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e2f2:	1405      	asrs	r5, r0, #16
 801e2f4:	d405      	bmi.n	801e302 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801e2f6:	4565      	cmp	r5, ip
 801e2f8:	da03      	bge.n	801e302 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801e2fa:	140d      	asrs	r5, r1, #16
 801e2fc:	d401      	bmi.n	801e302 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801e2fe:	42bd      	cmp	r5, r7
 801e300:	db07      	blt.n	801e312 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e302:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801e304:	3b01      	subs	r3, #1
 801e306:	3404      	adds	r4, #4
 801e308:	4428      	add	r0, r5
 801e30a:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801e30c:	4429      	add	r1, r5
 801e30e:	e7ee      	b.n	801e2ee <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801e310:	d04c      	beq.n	801e3ac <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801e312:	1e5d      	subs	r5, r3, #1
 801e314:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801e316:	fb06 0605 	mla	r6, r6, r5, r0
 801e31a:	1436      	asrs	r6, r6, #16
 801e31c:	d43c      	bmi.n	801e398 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf8>
 801e31e:	4566      	cmp	r6, ip
 801e320:	da3a      	bge.n	801e398 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf8>
 801e322:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801e324:	fb06 1505 	mla	r5, r6, r5, r1
 801e328:	142d      	asrs	r5, r5, #16
 801e32a:	d435      	bmi.n	801e398 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf8>
 801e32c:	42bd      	cmp	r5, r7
 801e32e:	da33      	bge.n	801e398 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf8>
 801e330:	1d25      	adds	r5, r4, #4
 801e332:	4699      	mov	r9, r3
 801e334:	f1b9 0f00 	cmp.w	r9, #0
 801e338:	dd34      	ble.n	801e3a4 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 801e33a:	9f16      	ldr	r7, [sp, #88]	@ 0x58
 801e33c:	140e      	asrs	r6, r1, #16
 801e33e:	2aff      	cmp	r2, #255	@ 0xff
 801e340:	f9b7 c008 	ldrsh.w	ip, [r7, #8]
 801e344:	ea4f 4720 	mov.w	r7, r0, asr #16
 801e348:	fb0c 7606 	mla	r6, ip, r6, r7
 801e34c:	9f02      	ldr	r7, [sp, #8]
 801e34e:	f837 6016 	ldrh.w	r6, [r7, r6, lsl #1]
 801e352:	ea4f 2726 	mov.w	r7, r6, asr #8
 801e356:	ea4f 0ce6 	mov.w	ip, r6, asr #3
 801e35a:	ea4f 06c6 	mov.w	r6, r6, lsl #3
 801e35e:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801e362:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 801e366:	b2f6      	uxtb	r6, r6
 801e368:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 801e36c:	ea4c 1c9c 	orr.w	ip, ip, ip, lsr #6
 801e370:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801e374:	f040 80ca 	bne.w	801e50c <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 801e378:	f805 6c04 	strb.w	r6, [r5, #-4]
 801e37c:	f805 cc03 	strb.w	ip, [r5, #-3]
 801e380:	f805 7c02 	strb.w	r7, [r5, #-2]
 801e384:	f805 2c01 	strb.w	r2, [r5, #-1]
 801e388:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801e38a:	3504      	adds	r5, #4
 801e38c:	f109 39ff 	add.w	r9, r9, #4294967295
 801e390:	4430      	add	r0, r6
 801e392:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801e394:	4431      	add	r1, r6
 801e396:	e7cd      	b.n	801e334 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801e398:	f04f 0c00 	mov.w	ip, #0
 801e39c:	eb03 050c 	add.w	r5, r3, ip
 801e3a0:	2d00      	cmp	r5, #0
 801e3a2:	dc3f      	bgt.n	801e424 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x184>
 801e3a4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e3a8:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 801e3ac:	9b01      	ldr	r3, [sp, #4]
 801e3ae:	2b00      	cmp	r3, #0
 801e3b0:	f340 80e2 	ble.w	801e578 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801e3b4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e3b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e3ba:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e3be:	eeb0 6a62 	vmov.f32	s12, s5
 801e3c2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e3c6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e3ca:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e3ce:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801e3d2:	eeb0 6a43 	vmov.f32	s12, s6
 801e3d6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e3da:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801e3de:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e3e2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e3e6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e3ea:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e3ee:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e3f2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e3f6:	ee12 1a90 	vmov	r1, s5
 801e3fa:	eef0 2a47 	vmov.f32	s5, s14
 801e3fe:	fb91 f3f3 	sdiv	r3, r1, r3
 801e402:	ee13 1a10 	vmov	r1, s6
 801e406:	9311      	str	r3, [sp, #68]	@ 0x44
 801e408:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e40a:	eeb0 3a67 	vmov.f32	s6, s15
 801e40e:	fb91 f3f3 	sdiv	r3, r1, r3
 801e412:	9312      	str	r3, [sp, #72]	@ 0x48
 801e414:	9b01      	ldr	r3, [sp, #4]
 801e416:	9903      	ldr	r1, [sp, #12]
 801e418:	3b01      	subs	r3, #1
 801e41a:	9301      	str	r3, [sp, #4]
 801e41c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e41e:	bf08      	it	eq
 801e420:	460b      	moveq	r3, r1
 801e422:	e752      	b.n	801e2ca <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801e424:	1407      	asrs	r7, r0, #16
 801e426:	d42f      	bmi.n	801e488 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801e428:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 801e42a:	68ae      	ldr	r6, [r5, #8]
 801e42c:	42be      	cmp	r6, r7
 801e42e:	dd2b      	ble.n	801e488 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801e430:	ea5f 4e21 	movs.w	lr, r1, asr #16
 801e434:	d428      	bmi.n	801e488 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801e436:	68ed      	ldr	r5, [r5, #12]
 801e438:	4575      	cmp	r5, lr
 801e43a:	dd25      	ble.n	801e488 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801e43c:	b236      	sxth	r6, r6
 801e43e:	9d02      	ldr	r5, [sp, #8]
 801e440:	2aff      	cmp	r2, #255	@ 0xff
 801e442:	fb0e 7606 	mla	r6, lr, r6, r7
 801e446:	f835 5016 	ldrh.w	r5, [r5, r6, lsl #1]
 801e44a:	ea4f 2625 	mov.w	r6, r5, asr #8
 801e44e:	ea4f 07e5 	mov.w	r7, r5, asr #3
 801e452:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 801e456:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 801e45a:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801e45e:	b2ed      	uxtb	r5, r5
 801e460:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801e464:	ea47 1797 	orr.w	r7, r7, r7, lsr #6
 801e468:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 801e46c:	d113      	bne.n	801e496 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801e46e:	f06f 0e03 	mvn.w	lr, #3
 801e472:	fb0e fe0c 	mul.w	lr, lr, ip
 801e476:	f804 500e 	strb.w	r5, [r4, lr]
 801e47a:	44a6      	add	lr, r4
 801e47c:	f88e 7001 	strb.w	r7, [lr, #1]
 801e480:	f88e 6002 	strb.w	r6, [lr, #2]
 801e484:	f88e 2003 	strb.w	r2, [lr, #3]
 801e488:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801e48a:	f10c 3cff 	add.w	ip, ip, #4294967295
 801e48e:	4428      	add	r0, r5
 801e490:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801e492:	4429      	add	r1, r5
 801e494:	e782      	b.n	801e39c <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
 801e496:	2a00      	cmp	r2, #0
 801e498:	d0f6      	beq.n	801e488 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801e49a:	fb15 f502 	smulbb	r5, r5, r2
 801e49e:	f06f 0e03 	mvn.w	lr, #3
 801e4a2:	fb12 f707 	smulbb	r7, r2, r7
 801e4a6:	fb12 f606 	smulbb	r6, r2, r6
 801e4aa:	fb0e fa0c 	mul.w	sl, lr, ip
 801e4ae:	eb04 090a 	add.w	r9, r4, sl
 801e4b2:	f899 b003 	ldrb.w	fp, [r9, #3]
 801e4b6:	fb02 fe0b 	mul.w	lr, r2, fp
 801e4ba:	f10e 0801 	add.w	r8, lr, #1
 801e4be:	eb08 281e 	add.w	r8, r8, lr, lsr #8
 801e4c2:	eb02 0e0b 	add.w	lr, r2, fp
 801e4c6:	ea4f 2828 	mov.w	r8, r8, asr #8
 801e4ca:	ebae 0e08 	sub.w	lr, lr, r8
 801e4ce:	ebab 0808 	sub.w	r8, fp, r8
 801e4d2:	f814 b00a 	ldrb.w	fp, [r4, sl]
 801e4d6:	fa5f fe8e 	uxtb.w	lr, lr
 801e4da:	fb08 550b 	mla	r5, r8, fp, r5
 801e4de:	fb95 f5fe 	sdiv	r5, r5, lr
 801e4e2:	f804 500a 	strb.w	r5, [r4, sl]
 801e4e6:	f899 5001 	ldrb.w	r5, [r9, #1]
 801e4ea:	f889 e003 	strb.w	lr, [r9, #3]
 801e4ee:	fb08 7705 	mla	r7, r8, r5, r7
 801e4f2:	f899 5002 	ldrb.w	r5, [r9, #2]
 801e4f6:	fb08 6605 	mla	r6, r8, r5, r6
 801e4fa:	fb97 f7fe 	sdiv	r7, r7, lr
 801e4fe:	fb96 f6fe 	sdiv	r6, r6, lr
 801e502:	f889 7001 	strb.w	r7, [r9, #1]
 801e506:	f889 6002 	strb.w	r6, [r9, #2]
 801e50a:	e7bd      	b.n	801e488 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801e50c:	2a00      	cmp	r2, #0
 801e50e:	f43f af3b 	beq.w	801e388 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe8>
 801e512:	f815 ac01 	ldrb.w	sl, [r5, #-1]
 801e516:	fb16 f602 	smulbb	r6, r6, r2
 801e51a:	fb12 fc0c 	smulbb	ip, r2, ip
 801e51e:	fb12 f707 	smulbb	r7, r2, r7
 801e522:	fb02 fe0a 	mul.w	lr, r2, sl
 801e526:	f10e 0801 	add.w	r8, lr, #1
 801e52a:	eb08 281e 	add.w	r8, r8, lr, lsr #8
 801e52e:	eb02 0e0a 	add.w	lr, r2, sl
 801e532:	ea4f 2828 	mov.w	r8, r8, asr #8
 801e536:	ebae 0e08 	sub.w	lr, lr, r8
 801e53a:	ebaa 0808 	sub.w	r8, sl, r8
 801e53e:	f815 ac04 	ldrb.w	sl, [r5, #-4]
 801e542:	fa5f fe8e 	uxtb.w	lr, lr
 801e546:	fb08 660a 	mla	r6, r8, sl, r6
 801e54a:	f805 ec01 	strb.w	lr, [r5, #-1]
 801e54e:	fb96 f6fe 	sdiv	r6, r6, lr
 801e552:	f805 6c04 	strb.w	r6, [r5, #-4]
 801e556:	f815 6c03 	ldrb.w	r6, [r5, #-3]
 801e55a:	fb08 cc06 	mla	ip, r8, r6, ip
 801e55e:	f815 6c02 	ldrb.w	r6, [r5, #-2]
 801e562:	fb08 7706 	mla	r7, r8, r6, r7
 801e566:	fb9c fcfe 	sdiv	ip, ip, lr
 801e56a:	fb97 f7fe 	sdiv	r7, r7, lr
 801e56e:	f805 cc03 	strb.w	ip, [r5, #-3]
 801e572:	f805 7c02 	strb.w	r7, [r5, #-2]
 801e576:	e707      	b.n	801e388 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe8>
 801e578:	b005      	add	sp, #20
 801e57a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e57e <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e57e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e582:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801e584:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801e588:	9201      	str	r2, [sp, #4]
 801e58a:	6860      	ldr	r0, [r4, #4]
 801e58c:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 801e58e:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	@ 0x48
 801e592:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	@ 0x3c
 801e596:	fb00 2505 	mla	r5, r0, r5, r2
 801e59a:	6822      	ldr	r2, [r4, #0]
 801e59c:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 801e5a0:	683a      	ldr	r2, [r7, #0]
 801e5a2:	9200      	str	r2, [sp, #0]
 801e5a4:	2900      	cmp	r1, #0
 801e5a6:	dc03      	bgt.n	801e5b0 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801e5a8:	9a01      	ldr	r2, [sp, #4]
 801e5aa:	2a00      	cmp	r2, #0
 801e5ac:	f340 80be 	ble.w	801e72c <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 801e5b0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801e5b2:	f9b7 9008 	ldrsh.w	r9, [r7, #8]
 801e5b6:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801e5ba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e5bc:	f9b7 c00c 	ldrsh.w	ip, [r7, #12]
 801e5c0:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801e5c4:	2b00      	cmp	r3, #0
 801e5c6:	dd0c      	ble.n	801e5e2 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801e5c8:	1404      	asrs	r4, r0, #16
 801e5ca:	d405      	bmi.n	801e5d8 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801e5cc:	454c      	cmp	r4, r9
 801e5ce:	da03      	bge.n	801e5d8 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801e5d0:	1414      	asrs	r4, r2, #16
 801e5d2:	d401      	bmi.n	801e5d8 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801e5d4:	4564      	cmp	r4, ip
 801e5d6:	db05      	blt.n	801e5e4 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e5d8:	4440      	add	r0, r8
 801e5da:	4472      	add	r2, lr
 801e5dc:	3b01      	subs	r3, #1
 801e5de:	3504      	adds	r5, #4
 801e5e0:	e7f0      	b.n	801e5c4 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801e5e2:	d00e      	beq.n	801e602 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801e5e4:	1e5c      	subs	r4, r3, #1
 801e5e6:	fb08 0604 	mla	r6, r8, r4, r0
 801e5ea:	1436      	asrs	r6, r6, #16
 801e5ec:	d53e      	bpl.n	801e66c <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xee>
 801e5ee:	4699      	mov	r9, r3
 801e5f0:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
 801e5f4:	f1b9 0f00 	cmp.w	r9, #0
 801e5f8:	dc68      	bgt.n	801e6cc <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801e5fa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e5fe:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 801e602:	2900      	cmp	r1, #0
 801e604:	f340 8092 	ble.w	801e72c <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 801e608:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e60c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e60e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e612:	3901      	subs	r1, #1
 801e614:	eeb0 6a62 	vmov.f32	s12, s5
 801e618:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e61c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e620:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e624:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 801e628:	eeb0 6a43 	vmov.f32	s12, s6
 801e62c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e630:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 801e634:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e638:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e63c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e640:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e644:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e648:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e64c:	ee12 2a90 	vmov	r2, s5
 801e650:	eef0 2a47 	vmov.f32	s5, s14
 801e654:	fb92 f8f3 	sdiv	r8, r2, r3
 801e658:	ee13 2a10 	vmov	r2, s6
 801e65c:	eeb0 3a67 	vmov.f32	s6, s15
 801e660:	fb92 fef3 	sdiv	lr, r2, r3
 801e664:	9a01      	ldr	r2, [sp, #4]
 801e666:	bf08      	it	eq
 801e668:	4613      	moveq	r3, r2
 801e66a:	e79b      	b.n	801e5a4 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26>
 801e66c:	454e      	cmp	r6, r9
 801e66e:	dabe      	bge.n	801e5ee <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e670:	fb0e 2404 	mla	r4, lr, r4, r2
 801e674:	1424      	asrs	r4, r4, #16
 801e676:	d4ba      	bmi.n	801e5ee <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e678:	4564      	cmp	r4, ip
 801e67a:	dab8      	bge.n	801e5ee <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e67c:	4699      	mov	r9, r3
 801e67e:	46aa      	mov	sl, r5
 801e680:	f1b9 0f00 	cmp.w	r9, #0
 801e684:	ddb9      	ble.n	801e5fa <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e686:	f9b7 c008 	ldrsh.w	ip, [r7, #8]
 801e68a:	1406      	asrs	r6, r0, #16
 801e68c:	1414      	asrs	r4, r2, #16
 801e68e:	4440      	add	r0, r8
 801e690:	4472      	add	r2, lr
 801e692:	f109 39ff 	add.w	r9, r9, #4294967295
 801e696:	fb0c 6404 	mla	r4, ip, r4, r6
 801e69a:	9e00      	ldr	r6, [sp, #0]
 801e69c:	f836 6014 	ldrh.w	r6, [r6, r4, lsl #1]
 801e6a0:	10f4      	asrs	r4, r6, #3
 801e6a2:	ea4f 2c26 	mov.w	ip, r6, asr #8
 801e6a6:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 801e6aa:	00f6      	lsls	r6, r6, #3
 801e6ac:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801e6b0:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 801e6b4:	b2f6      	uxtb	r6, r6
 801e6b6:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 801e6ba:	0224      	lsls	r4, r4, #8
 801e6bc:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801e6c0:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 801e6c4:	4334      	orrs	r4, r6
 801e6c6:	f84a 4b04 	str.w	r4, [sl], #4
 801e6ca:	e7d9      	b.n	801e680 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x102>
 801e6cc:	ea5f 4c20 	movs.w	ip, r0, asr #16
 801e6d0:	d427      	bmi.n	801e722 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801e6d2:	68be      	ldr	r6, [r7, #8]
 801e6d4:	4566      	cmp	r6, ip
 801e6d6:	dd24      	ble.n	801e722 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801e6d8:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801e6dc:	d421      	bmi.n	801e722 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801e6de:	68fc      	ldr	r4, [r7, #12]
 801e6e0:	455c      	cmp	r4, fp
 801e6e2:	dd1e      	ble.n	801e722 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801e6e4:	b236      	sxth	r6, r6
 801e6e6:	9c00      	ldr	r4, [sp, #0]
 801e6e8:	fb0b c606 	mla	r6, fp, r6, ip
 801e6ec:	f06f 0b03 	mvn.w	fp, #3
 801e6f0:	f834 6016 	ldrh.w	r6, [r4, r6, lsl #1]
 801e6f4:	fb0b fb09 	mul.w	fp, fp, r9
 801e6f8:	10f4      	asrs	r4, r6, #3
 801e6fa:	ea4f 2c26 	mov.w	ip, r6, asr #8
 801e6fe:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 801e702:	00f6      	lsls	r6, r6, #3
 801e704:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801e708:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 801e70c:	b2f6      	uxtb	r6, r6
 801e70e:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 801e712:	0224      	lsls	r4, r4, #8
 801e714:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801e718:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 801e71c:	4334      	orrs	r4, r6
 801e71e:	f84a 400b 	str.w	r4, [sl, fp]
 801e722:	4440      	add	r0, r8
 801e724:	4472      	add	r2, lr
 801e726:	f109 39ff 	add.w	r9, r9, #4294967295
 801e72a:	e763      	b.n	801e5f4 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801e72c:	b003      	add	sp, #12
 801e72e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e732 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e732:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e736:	b085      	sub	sp, #20
 801e738:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801e73c:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801e73e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801e742:	6868      	ldr	r0, [r5, #4]
 801e744:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 801e748:	e9dd 1414 	ldrd	r1, r4, [sp, #80]	@ 0x50
 801e74c:	fb00 1404 	mla	r4, r0, r4, r1
 801e750:	6829      	ldr	r1, [r5, #0]
 801e752:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 801e756:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801e758:	6809      	ldr	r1, [r1, #0]
 801e75a:	9101      	str	r1, [sp, #4]
 801e75c:	9902      	ldr	r1, [sp, #8]
 801e75e:	2900      	cmp	r1, #0
 801e760:	dc03      	bgt.n	801e76a <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801e762:	9903      	ldr	r1, [sp, #12]
 801e764:	2900      	cmp	r1, #0
 801e766:	f340 8137 	ble.w	801e9d8 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801e76a:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801e76c:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 801e770:	f9b1 700c 	ldrsh.w	r7, [r1, #12]
 801e774:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801e776:	f501 4000 	add.w	r0, r1, #32768	@ 0x8000
 801e77a:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801e77c:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 801e780:	2b00      	cmp	r3, #0
 801e782:	dd0e      	ble.n	801e7a2 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e784:	1405      	asrs	r5, r0, #16
 801e786:	d405      	bmi.n	801e794 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801e788:	4565      	cmp	r5, ip
 801e78a:	da03      	bge.n	801e794 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801e78c:	140d      	asrs	r5, r1, #16
 801e78e:	d401      	bmi.n	801e794 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801e790:	42bd      	cmp	r5, r7
 801e792:	db07      	blt.n	801e7a4 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e794:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801e796:	3b01      	subs	r3, #1
 801e798:	3404      	adds	r4, #4
 801e79a:	4428      	add	r0, r5
 801e79c:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801e79e:	4429      	add	r1, r5
 801e7a0:	e7ee      	b.n	801e780 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801e7a2:	d041      	beq.n	801e828 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf6>
 801e7a4:	1e5d      	subs	r5, r3, #1
 801e7a6:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801e7a8:	fb06 0605 	mla	r6, r6, r5, r0
 801e7ac:	1436      	asrs	r6, r6, #16
 801e7ae:	d433      	bmi.n	801e818 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 801e7b0:	4566      	cmp	r6, ip
 801e7b2:	da31      	bge.n	801e818 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 801e7b4:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801e7b6:	fb06 1505 	mla	r5, r6, r5, r1
 801e7ba:	142d      	asrs	r5, r5, #16
 801e7bc:	d42c      	bmi.n	801e818 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 801e7be:	42bd      	cmp	r5, r7
 801e7c0:	da2a      	bge.n	801e818 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 801e7c2:	1d25      	adds	r5, r4, #4
 801e7c4:	469a      	mov	sl, r3
 801e7c6:	f1ba 0f00 	cmp.w	sl, #0
 801e7ca:	dd29      	ble.n	801e820 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xee>
 801e7cc:	9f16      	ldr	r7, [sp, #88]	@ 0x58
 801e7ce:	140e      	asrs	r6, r1, #16
 801e7d0:	2aff      	cmp	r2, #255	@ 0xff
 801e7d2:	f9b7 c008 	ldrsh.w	ip, [r7, #8]
 801e7d6:	ea4f 4720 	mov.w	r7, r0, asr #16
 801e7da:	fb0c 7606 	mla	r6, ip, r6, r7
 801e7de:	9f01      	ldr	r7, [sp, #4]
 801e7e0:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801e7e4:	4437      	add	r7, r6
 801e7e6:	f897 e002 	ldrb.w	lr, [r7, #2]
 801e7ea:	f897 8001 	ldrb.w	r8, [r7, #1]
 801e7ee:	9f01      	ldr	r7, [sp, #4]
 801e7f0:	f817 9006 	ldrb.w	r9, [r7, r6]
 801e7f4:	f040 80bb 	bne.w	801e96e <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23c>
 801e7f8:	f805 9c04 	strb.w	r9, [r5, #-4]
 801e7fc:	f805 8c03 	strb.w	r8, [r5, #-3]
 801e800:	f805 ec02 	strb.w	lr, [r5, #-2]
 801e804:	f805 2c01 	strb.w	r2, [r5, #-1]
 801e808:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801e80a:	3504      	adds	r5, #4
 801e80c:	f10a 3aff 	add.w	sl, sl, #4294967295
 801e810:	4430      	add	r0, r6
 801e812:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801e814:	4431      	add	r1, r6
 801e816:	e7d6      	b.n	801e7c6 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801e818:	2500      	movs	r5, #0
 801e81a:	195e      	adds	r6, r3, r5
 801e81c:	2e00      	cmp	r6, #0
 801e81e:	dc3f      	bgt.n	801e8a0 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 801e820:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e824:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 801e828:	9b02      	ldr	r3, [sp, #8]
 801e82a:	2b00      	cmp	r3, #0
 801e82c:	f340 80d4 	ble.w	801e9d8 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801e830:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e834:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e836:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e83a:	eeb0 6a62 	vmov.f32	s12, s5
 801e83e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e842:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e846:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e84a:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801e84e:	eeb0 6a43 	vmov.f32	s12, s6
 801e852:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e856:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801e85a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e85e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e862:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e866:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e86a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e86e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e872:	ee12 1a90 	vmov	r1, s5
 801e876:	eef0 2a47 	vmov.f32	s5, s14
 801e87a:	fb91 f3f3 	sdiv	r3, r1, r3
 801e87e:	ee13 1a10 	vmov	r1, s6
 801e882:	9311      	str	r3, [sp, #68]	@ 0x44
 801e884:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e886:	eeb0 3a67 	vmov.f32	s6, s15
 801e88a:	fb91 f3f3 	sdiv	r3, r1, r3
 801e88e:	9312      	str	r3, [sp, #72]	@ 0x48
 801e890:	9b02      	ldr	r3, [sp, #8]
 801e892:	9903      	ldr	r1, [sp, #12]
 801e894:	3b01      	subs	r3, #1
 801e896:	9302      	str	r3, [sp, #8]
 801e898:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e89a:	bf08      	it	eq
 801e89c:	460b      	moveq	r3, r1
 801e89e:	e75d      	b.n	801e75c <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801e8a0:	ea5f 4c20 	movs.w	ip, r0, asr #16
 801e8a4:	d424      	bmi.n	801e8f0 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 801e8a6:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 801e8a8:	68b7      	ldr	r7, [r6, #8]
 801e8aa:	4567      	cmp	r7, ip
 801e8ac:	dd20      	ble.n	801e8f0 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 801e8ae:	ea5f 4e21 	movs.w	lr, r1, asr #16
 801e8b2:	d41d      	bmi.n	801e8f0 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 801e8b4:	68f6      	ldr	r6, [r6, #12]
 801e8b6:	4576      	cmp	r6, lr
 801e8b8:	dd1a      	ble.n	801e8f0 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 801e8ba:	b23f      	sxth	r7, r7
 801e8bc:	9e01      	ldr	r6, [sp, #4]
 801e8be:	2aff      	cmp	r2, #255	@ 0xff
 801e8c0:	fb0e cc07 	mla	ip, lr, r7, ip
 801e8c4:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801e8c8:	4466      	add	r6, ip
 801e8ca:	f896 8002 	ldrb.w	r8, [r6, #2]
 801e8ce:	f896 9001 	ldrb.w	r9, [r6, #1]
 801e8d2:	9e01      	ldr	r6, [sp, #4]
 801e8d4:	f816 a00c 	ldrb.w	sl, [r6, ip]
 801e8d8:	d110      	bne.n	801e8fc <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 801e8da:	f06f 0603 	mvn.w	r6, #3
 801e8de:	436e      	muls	r6, r5
 801e8e0:	f804 a006 	strb.w	sl, [r4, r6]
 801e8e4:	4426      	add	r6, r4
 801e8e6:	f886 9001 	strb.w	r9, [r6, #1]
 801e8ea:	f886 8002 	strb.w	r8, [r6, #2]
 801e8ee:	70f2      	strb	r2, [r6, #3]
 801e8f0:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801e8f2:	3d01      	subs	r5, #1
 801e8f4:	4430      	add	r0, r6
 801e8f6:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801e8f8:	4431      	add	r1, r6
 801e8fa:	e78e      	b.n	801e81a <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe8>
 801e8fc:	2a00      	cmp	r2, #0
 801e8fe:	d0f7      	beq.n	801e8f0 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 801e900:	fb1a fa02 	smulbb	sl, sl, r2
 801e904:	f06f 0603 	mvn.w	r6, #3
 801e908:	fb12 f909 	smulbb	r9, r2, r9
 801e90c:	fb12 f808 	smulbb	r8, r2, r8
 801e910:	fb06 fb05 	mul.w	fp, r6, r5
 801e914:	eb04 0c0b 	add.w	ip, r4, fp
 801e918:	f89c 7003 	ldrb.w	r7, [ip, #3]
 801e91c:	fb02 f607 	mul.w	r6, r2, r7
 801e920:	f106 0e01 	add.w	lr, r6, #1
 801e924:	eb0e 2e16 	add.w	lr, lr, r6, lsr #8
 801e928:	19d6      	adds	r6, r2, r7
 801e92a:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801e92e:	eba7 070e 	sub.w	r7, r7, lr
 801e932:	eba6 060e 	sub.w	r6, r6, lr
 801e936:	f814 e00b 	ldrb.w	lr, [r4, fp]
 801e93a:	b2f6      	uxtb	r6, r6
 801e93c:	fb07 aa0e 	mla	sl, r7, lr, sl
 801e940:	fb9a faf6 	sdiv	sl, sl, r6
 801e944:	f804 a00b 	strb.w	sl, [r4, fp]
 801e948:	f89c e001 	ldrb.w	lr, [ip, #1]
 801e94c:	f88c 6003 	strb.w	r6, [ip, #3]
 801e950:	fb07 990e 	mla	r9, r7, lr, r9
 801e954:	f89c e002 	ldrb.w	lr, [ip, #2]
 801e958:	fb07 880e 	mla	r8, r7, lr, r8
 801e95c:	fb99 f9f6 	sdiv	r9, r9, r6
 801e960:	fb98 f8f6 	sdiv	r8, r8, r6
 801e964:	f88c 9001 	strb.w	r9, [ip, #1]
 801e968:	f88c 8002 	strb.w	r8, [ip, #2]
 801e96c:	e7c0      	b.n	801e8f0 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 801e96e:	2a00      	cmp	r2, #0
 801e970:	f43f af4a 	beq.w	801e808 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd6>
 801e974:	f815 bc01 	ldrb.w	fp, [r5, #-1]
 801e978:	fb19 f902 	smulbb	r9, r9, r2
 801e97c:	fb12 f808 	smulbb	r8, r2, r8
 801e980:	fb02 fc0b 	mul.w	ip, r2, fp
 801e984:	eb02 060b 	add.w	r6, r2, fp
 801e988:	fb12 fe0e 	smulbb	lr, r2, lr
 801e98c:	f10c 0701 	add.w	r7, ip, #1
 801e990:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801e994:	ea4f 2c27 	mov.w	ip, r7, asr #8
 801e998:	ebab 070c 	sub.w	r7, fp, ip
 801e99c:	eba6 060c 	sub.w	r6, r6, ip
 801e9a0:	f815 cc04 	ldrb.w	ip, [r5, #-4]
 801e9a4:	b2f6      	uxtb	r6, r6
 801e9a6:	fb07 990c 	mla	r9, r7, ip, r9
 801e9aa:	f815 cc03 	ldrb.w	ip, [r5, #-3]
 801e9ae:	f805 6c01 	strb.w	r6, [r5, #-1]
 801e9b2:	fb07 880c 	mla	r8, r7, ip, r8
 801e9b6:	f815 cc02 	ldrb.w	ip, [r5, #-2]
 801e9ba:	fb07 ee0c 	mla	lr, r7, ip, lr
 801e9be:	fb99 f9f6 	sdiv	r9, r9, r6
 801e9c2:	fb98 f8f6 	sdiv	r8, r8, r6
 801e9c6:	fb9e fef6 	sdiv	lr, lr, r6
 801e9ca:	f805 9c04 	strb.w	r9, [r5, #-4]
 801e9ce:	f805 8c03 	strb.w	r8, [r5, #-3]
 801e9d2:	f805 ec02 	strb.w	lr, [r5, #-2]
 801e9d6:	e717      	b.n	801e808 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd6>
 801e9d8:	b005      	add	sp, #20
 801e9da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e9de <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e9de:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e9e2:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801e9e4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801e9e8:	9201      	str	r2, [sp, #4]
 801e9ea:	6868      	ldr	r0, [r5, #4]
 801e9ec:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 801e9ee:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 801e9f2:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	@ 0x3c
 801e9f6:	fb00 2404 	mla	r4, r0, r4, r2
 801e9fa:	682a      	ldr	r2, [r5, #0]
 801e9fc:	f8d7 8000 	ldr.w	r8, [r7]
 801ea00:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 801ea04:	2900      	cmp	r1, #0
 801ea06:	dc03      	bgt.n	801ea10 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801ea08:	9a01      	ldr	r2, [sp, #4]
 801ea0a:	2a00      	cmp	r2, #0
 801ea0c:	f340 80af 	ble.w	801eb6e <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 801ea10:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801ea12:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 801ea16:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801ea1a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ea1c:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 801ea20:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801ea24:	2b00      	cmp	r3, #0
 801ea26:	dd0c      	ble.n	801ea42 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801ea28:	1405      	asrs	r5, r0, #16
 801ea2a:	d405      	bmi.n	801ea38 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801ea2c:	4555      	cmp	r5, sl
 801ea2e:	da03      	bge.n	801ea38 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801ea30:	1415      	asrs	r5, r2, #16
 801ea32:	d401      	bmi.n	801ea38 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801ea34:	454d      	cmp	r5, r9
 801ea36:	db05      	blt.n	801ea44 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801ea38:	4470      	add	r0, lr
 801ea3a:	4462      	add	r2, ip
 801ea3c:	3b01      	subs	r3, #1
 801ea3e:	3404      	adds	r4, #4
 801ea40:	e7f0      	b.n	801ea24 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801ea42:	d037      	beq.n	801eab4 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd6>
 801ea44:	1e5d      	subs	r5, r3, #1
 801ea46:	fb0e 0605 	mla	r6, lr, r5, r0
 801ea4a:	1436      	asrs	r6, r6, #16
 801ea4c:	d42a      	bmi.n	801eaa4 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc6>
 801ea4e:	4556      	cmp	r6, sl
 801ea50:	da28      	bge.n	801eaa4 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc6>
 801ea52:	fb0c 2505 	mla	r5, ip, r5, r2
 801ea56:	142d      	asrs	r5, r5, #16
 801ea58:	d424      	bmi.n	801eaa4 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc6>
 801ea5a:	454d      	cmp	r5, r9
 801ea5c:	da22      	bge.n	801eaa4 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc6>
 801ea5e:	1d26      	adds	r6, r4, #4
 801ea60:	4699      	mov	r9, r3
 801ea62:	f1b9 0f00 	cmp.w	r9, #0
 801ea66:	f106 0604 	add.w	r6, r6, #4
 801ea6a:	dd1f      	ble.n	801eaac <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xce>
 801ea6c:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 801ea70:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801ea74:	1415      	asrs	r5, r2, #16
 801ea76:	4470      	add	r0, lr
 801ea78:	4462      	add	r2, ip
 801ea7a:	f109 39ff 	add.w	r9, r9, #4294967295
 801ea7e:	fb0b a505 	mla	r5, fp, r5, sl
 801ea82:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ea86:	eb08 0a05 	add.w	sl, r8, r5
 801ea8a:	f818 5005 	ldrb.w	r5, [r8, r5]
 801ea8e:	f806 5c08 	strb.w	r5, [r6, #-8]
 801ea92:	f89a 5001 	ldrb.w	r5, [sl, #1]
 801ea96:	f806 5c07 	strb.w	r5, [r6, #-7]
 801ea9a:	f89a 5002 	ldrb.w	r5, [sl, #2]
 801ea9e:	f806 5c06 	strb.w	r5, [r6, #-6]
 801eaa2:	e7de      	b.n	801ea62 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801eaa4:	2600      	movs	r6, #0
 801eaa6:	199d      	adds	r5, r3, r6
 801eaa8:	2d00      	cmp	r5, #0
 801eaaa:	dc37      	bgt.n	801eb1c <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801eaac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801eab0:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 801eab4:	2900      	cmp	r1, #0
 801eab6:	dd5a      	ble.n	801eb6e <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 801eab8:	ee30 0a04 	vadd.f32	s0, s0, s8
 801eabc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801eabe:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801eac2:	3901      	subs	r1, #1
 801eac4:	eeb0 6a62 	vmov.f32	s12, s5
 801eac8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801eacc:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ead0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ead4:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 801ead8:	eeb0 6a43 	vmov.f32	s12, s6
 801eadc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801eae0:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 801eae4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801eae8:	ee61 7a27 	vmul.f32	s15, s2, s15
 801eaec:	ee77 2a62 	vsub.f32	s5, s14, s5
 801eaf0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801eaf4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801eaf8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801eafc:	ee12 2a90 	vmov	r2, s5
 801eb00:	eef0 2a47 	vmov.f32	s5, s14
 801eb04:	fb92 fef3 	sdiv	lr, r2, r3
 801eb08:	ee13 2a10 	vmov	r2, s6
 801eb0c:	eeb0 3a67 	vmov.f32	s6, s15
 801eb10:	fb92 fcf3 	sdiv	ip, r2, r3
 801eb14:	9a01      	ldr	r2, [sp, #4]
 801eb16:	bf08      	it	eq
 801eb18:	4613      	moveq	r3, r2
 801eb1a:	e773      	b.n	801ea04 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26>
 801eb1c:	ea5f 4920 	movs.w	r9, r0, asr #16
 801eb20:	d421      	bmi.n	801eb66 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 801eb22:	f8d7 b008 	ldr.w	fp, [r7, #8]
 801eb26:	45cb      	cmp	fp, r9
 801eb28:	dd1d      	ble.n	801eb66 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 801eb2a:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801eb2e:	d41a      	bmi.n	801eb66 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 801eb30:	68fd      	ldr	r5, [r7, #12]
 801eb32:	4555      	cmp	r5, sl
 801eb34:	dd17      	ble.n	801eb66 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 801eb36:	fa0f f58b 	sxth.w	r5, fp
 801eb3a:	fb0a 9505 	mla	r5, sl, r5, r9
 801eb3e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801eb42:	f818 9005 	ldrb.w	r9, [r8, r5]
 801eb46:	eb08 0b05 	add.w	fp, r8, r5
 801eb4a:	f06f 0503 	mvn.w	r5, #3
 801eb4e:	4375      	muls	r5, r6
 801eb50:	f804 9005 	strb.w	r9, [r4, r5]
 801eb54:	4425      	add	r5, r4
 801eb56:	f89b 9001 	ldrb.w	r9, [fp, #1]
 801eb5a:	f885 9001 	strb.w	r9, [r5, #1]
 801eb5e:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801eb62:	f885 9002 	strb.w	r9, [r5, #2]
 801eb66:	4470      	add	r0, lr
 801eb68:	4462      	add	r2, ip
 801eb6a:	3e01      	subs	r6, #1
 801eb6c:	e79b      	b.n	801eaa6 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801eb6e:	b003      	add	sp, #12
 801eb70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801eb74 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801eb74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eb78:	b087      	sub	sp, #28
 801eb7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801eb7e:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801eb80:	9203      	str	r2, [sp, #12]
 801eb82:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801eb86:	9100      	str	r1, [sp, #0]
 801eb88:	9204      	str	r2, [sp, #16]
 801eb8a:	6861      	ldr	r1, [r4, #4]
 801eb8c:	f8dd b060 	ldr.w	fp, [sp, #96]	@ 0x60
 801eb90:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	@ 0x58
 801eb94:	fb01 2000 	mla	r0, r1, r0, r2
 801eb98:	6822      	ldr	r2, [r4, #0]
 801eb9a:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 801eb9e:	f8db 2000 	ldr.w	r2, [fp]
 801eba2:	9201      	str	r2, [sp, #4]
 801eba4:	9a00      	ldr	r2, [sp, #0]
 801eba6:	2a00      	cmp	r2, #0
 801eba8:	dc03      	bgt.n	801ebb2 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801ebaa:	9a03      	ldr	r2, [sp, #12]
 801ebac:	2a00      	cmp	r2, #0
 801ebae:	f340 8147 	ble.w	801ee40 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>
 801ebb2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801ebb4:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 801ebb8:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801ebbc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801ebbe:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 801ebc2:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801ebc6:	2b00      	cmp	r3, #0
 801ebc8:	dd0e      	ble.n	801ebe8 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801ebca:	140c      	asrs	r4, r1, #16
 801ebcc:	d405      	bmi.n	801ebda <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801ebce:	42bc      	cmp	r4, r7
 801ebd0:	da03      	bge.n	801ebda <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801ebd2:	1414      	asrs	r4, r2, #16
 801ebd4:	d401      	bmi.n	801ebda <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801ebd6:	42b4      	cmp	r4, r6
 801ebd8:	db07      	blt.n	801ebea <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801ebda:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801ebdc:	3b01      	subs	r3, #1
 801ebde:	3004      	adds	r0, #4
 801ebe0:	4421      	add	r1, r4
 801ebe2:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801ebe4:	4422      	add	r2, r4
 801ebe6:	e7ee      	b.n	801ebc6 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801ebe8:	d048      	beq.n	801ec7c <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x108>
 801ebea:	1e5c      	subs	r4, r3, #1
 801ebec:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801ebee:	fb05 1504 	mla	r5, r5, r4, r1
 801ebf2:	142d      	asrs	r5, r5, #16
 801ebf4:	d438      	bmi.n	801ec68 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 801ebf6:	42bd      	cmp	r5, r7
 801ebf8:	da36      	bge.n	801ec68 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 801ebfa:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801ebfc:	fb05 2404 	mla	r4, r5, r4, r2
 801ec00:	1424      	asrs	r4, r4, #16
 801ec02:	d431      	bmi.n	801ec68 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 801ec04:	42b4      	cmp	r4, r6
 801ec06:	da2f      	bge.n	801ec68 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 801ec08:	469e      	mov	lr, r3
 801ec0a:	4604      	mov	r4, r0
 801ec0c:	f1be 0f00 	cmp.w	lr, #0
 801ec10:	dd30      	ble.n	801ec74 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 801ec12:	140e      	asrs	r6, r1, #16
 801ec14:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 801ec18:	1415      	asrs	r5, r2, #16
 801ec1a:	fb07 6505 	mla	r5, r7, r5, r6
 801ec1e:	9e01      	ldr	r6, [sp, #4]
 801ec20:	f856 6025 	ldr.w	r6, [r6, r5, lsl #2]
 801ec24:	0e35      	lsrs	r5, r6, #24
 801ec26:	d017      	beq.n	801ec58 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe4>
 801ec28:	9f04      	ldr	r7, [sp, #16]
 801ec2a:	f3c6 4907 	ubfx	r9, r6, #16, #8
 801ec2e:	f3c6 2c07 	ubfx	ip, r6, #8, #8
 801ec32:	437d      	muls	r5, r7
 801ec34:	fa5f f88c 	uxtb.w	r8, ip
 801ec38:	1c6f      	adds	r7, r5, #1
 801ec3a:	eb07 2525 	add.w	r5, r7, r5, asr #8
 801ec3e:	fa5f f789 	uxtb.w	r7, r9
 801ec42:	122d      	asrs	r5, r5, #8
 801ec44:	9702      	str	r7, [sp, #8]
 801ec46:	2dff      	cmp	r5, #255	@ 0xff
 801ec48:	f040 80c7 	bne.w	801edda <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 801ec4c:	7026      	strb	r6, [r4, #0]
 801ec4e:	f884 c001 	strb.w	ip, [r4, #1]
 801ec52:	f884 9002 	strb.w	r9, [r4, #2]
 801ec56:	70e5      	strb	r5, [r4, #3]
 801ec58:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801ec5a:	3404      	adds	r4, #4
 801ec5c:	f10e 3eff 	add.w	lr, lr, #4294967295
 801ec60:	4429      	add	r1, r5
 801ec62:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801ec64:	442a      	add	r2, r5
 801ec66:	e7d1      	b.n	801ec0c <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801ec68:	f04f 0c00 	mov.w	ip, #0
 801ec6c:	eb03 040c 	add.w	r4, r3, ip
 801ec70:	2c00      	cmp	r4, #0
 801ec72:	dc3f      	bgt.n	801ecf4 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x180>
 801ec74:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ec78:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801ec7c:	9b00      	ldr	r3, [sp, #0]
 801ec7e:	2b00      	cmp	r3, #0
 801ec80:	f340 80de 	ble.w	801ee40 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>
 801ec84:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ec88:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ec8a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ec8e:	eeb0 6a62 	vmov.f32	s12, s5
 801ec92:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ec96:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ec9a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ec9e:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 801eca2:	eeb0 6a43 	vmov.f32	s12, s6
 801eca6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ecaa:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 801ecae:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ecb2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ecb6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ecba:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ecbe:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ecc2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ecc6:	ee12 2a90 	vmov	r2, s5
 801ecca:	eef0 2a47 	vmov.f32	s5, s14
 801ecce:	fb92 f3f3 	sdiv	r3, r2, r3
 801ecd2:	ee13 2a10 	vmov	r2, s6
 801ecd6:	9313      	str	r3, [sp, #76]	@ 0x4c
 801ecd8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ecda:	eeb0 3a67 	vmov.f32	s6, s15
 801ecde:	fb92 f3f3 	sdiv	r3, r2, r3
 801ece2:	9314      	str	r3, [sp, #80]	@ 0x50
 801ece4:	9b00      	ldr	r3, [sp, #0]
 801ece6:	9a03      	ldr	r2, [sp, #12]
 801ece8:	3b01      	subs	r3, #1
 801ecea:	9300      	str	r3, [sp, #0]
 801ecec:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ecee:	bf08      	it	eq
 801ecf0:	4613      	moveq	r3, r2
 801ecf2:	e757      	b.n	801eba4 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801ecf4:	140e      	asrs	r6, r1, #16
 801ecf6:	d42e      	bmi.n	801ed56 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801ecf8:	f8db 5008 	ldr.w	r5, [fp, #8]
 801ecfc:	42b5      	cmp	r5, r6
 801ecfe:	dd2a      	ble.n	801ed56 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801ed00:	1417      	asrs	r7, r2, #16
 801ed02:	d428      	bmi.n	801ed56 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801ed04:	f8db 400c 	ldr.w	r4, [fp, #12]
 801ed08:	42bc      	cmp	r4, r7
 801ed0a:	dd24      	ble.n	801ed56 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801ed0c:	b22d      	sxth	r5, r5
 801ed0e:	9c01      	ldr	r4, [sp, #4]
 801ed10:	fb07 6505 	mla	r5, r7, r5, r6
 801ed14:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
 801ed18:	0e2c      	lsrs	r4, r5, #24
 801ed1a:	d01c      	beq.n	801ed56 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801ed1c:	9e04      	ldr	r6, [sp, #16]
 801ed1e:	4374      	muls	r4, r6
 801ed20:	1c66      	adds	r6, r4, #1
 801ed22:	eb06 2424 	add.w	r4, r6, r4, asr #8
 801ed26:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801ed2a:	1224      	asrs	r4, r4, #8
 801ed2c:	b2f7      	uxtb	r7, r6
 801ed2e:	2cff      	cmp	r4, #255	@ 0xff
 801ed30:	9705      	str	r7, [sp, #20]
 801ed32:	f3c5 2707 	ubfx	r7, r5, #8, #8
 801ed36:	fa5f f887 	uxtb.w	r8, r7
 801ed3a:	d113      	bne.n	801ed64 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801ed3c:	f06f 0e03 	mvn.w	lr, #3
 801ed40:	fb0e fe0c 	mul.w	lr, lr, ip
 801ed44:	f800 500e 	strb.w	r5, [r0, lr]
 801ed48:	4486      	add	lr, r0
 801ed4a:	f88e 7001 	strb.w	r7, [lr, #1]
 801ed4e:	f88e 6002 	strb.w	r6, [lr, #2]
 801ed52:	f88e 4003 	strb.w	r4, [lr, #3]
 801ed56:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801ed58:	f10c 3cff 	add.w	ip, ip, #4294967295
 801ed5c:	4421      	add	r1, r4
 801ed5e:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801ed60:	4422      	add	r2, r4
 801ed62:	e783      	b.n	801ec6c <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf8>
 801ed64:	b2e6      	uxtb	r6, r4
 801ed66:	9602      	str	r6, [sp, #8]
 801ed68:	2c00      	cmp	r4, #0
 801ed6a:	d0f4      	beq.n	801ed56 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801ed6c:	f06f 0603 	mvn.w	r6, #3
 801ed70:	b2ed      	uxtb	r5, r5
 801ed72:	fb04 f808 	mul.w	r8, r4, r8
 801ed76:	fb06 f90c 	mul.w	r9, r6, ip
 801ed7a:	9e02      	ldr	r6, [sp, #8]
 801ed7c:	eb00 0e09 	add.w	lr, r0, r9
 801ed80:	f89e a003 	ldrb.w	sl, [lr, #3]
 801ed84:	fb06 f70a 	mul.w	r7, r6, sl
 801ed88:	1c7e      	adds	r6, r7, #1
 801ed8a:	eb06 2717 	add.w	r7, r6, r7, lsr #8
 801ed8e:	9e02      	ldr	r6, [sp, #8]
 801ed90:	123f      	asrs	r7, r7, #8
 801ed92:	4456      	add	r6, sl
 801ed94:	1bf6      	subs	r6, r6, r7
 801ed96:	ebaa 0707 	sub.w	r7, sl, r7
 801ed9a:	f810 a009 	ldrb.w	sl, [r0, r9]
 801ed9e:	b2f6      	uxtb	r6, r6
 801eda0:	fb07 fa0a 	mul.w	sl, r7, sl
 801eda4:	fb04 a505 	mla	r5, r4, r5, sl
 801eda8:	fb95 f5f6 	sdiv	r5, r5, r6
 801edac:	f800 5009 	strb.w	r5, [r0, r9]
 801edb0:	f89e 5001 	ldrb.w	r5, [lr, #1]
 801edb4:	f89e a002 	ldrb.w	sl, [lr, #2]
 801edb8:	fb07 8805 	mla	r8, r7, r5, r8
 801edbc:	9d05      	ldr	r5, [sp, #20]
 801edbe:	f88e 6003 	strb.w	r6, [lr, #3]
 801edc2:	436c      	muls	r4, r5
 801edc4:	fb07 470a 	mla	r7, r7, sl, r4
 801edc8:	fb98 f8f6 	sdiv	r8, r8, r6
 801edcc:	fb97 f7f6 	sdiv	r7, r7, r6
 801edd0:	f88e 8001 	strb.w	r8, [lr, #1]
 801edd4:	f88e 7002 	strb.w	r7, [lr, #2]
 801edd8:	e7bd      	b.n	801ed56 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801edda:	b2ef      	uxtb	r7, r5
 801eddc:	2d00      	cmp	r5, #0
 801edde:	f43f af3b 	beq.w	801ec58 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe4>
 801ede2:	f894 9003 	ldrb.w	r9, [r4, #3]
 801ede6:	b2f6      	uxtb	r6, r6
 801ede8:	fb05 f808 	mul.w	r8, r5, r8
 801edec:	fb07 fa09 	mul.w	sl, r7, r9
 801edf0:	444f      	add	r7, r9
 801edf2:	f10a 0c01 	add.w	ip, sl, #1
 801edf6:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 801edfa:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801edfe:	eba7 070c 	sub.w	r7, r7, ip
 801ee02:	eba9 0c0c 	sub.w	ip, r9, ip
 801ee06:	f894 9000 	ldrb.w	r9, [r4]
 801ee0a:	b2ff      	uxtb	r7, r7
 801ee0c:	fb0c f909 	mul.w	r9, ip, r9
 801ee10:	70e7      	strb	r7, [r4, #3]
 801ee12:	fb05 9606 	mla	r6, r5, r6, r9
 801ee16:	f894 9002 	ldrb.w	r9, [r4, #2]
 801ee1a:	fb96 f6f7 	sdiv	r6, r6, r7
 801ee1e:	7026      	strb	r6, [r4, #0]
 801ee20:	7866      	ldrb	r6, [r4, #1]
 801ee22:	fb0c 8806 	mla	r8, ip, r6, r8
 801ee26:	9e02      	ldr	r6, [sp, #8]
 801ee28:	4375      	muls	r5, r6
 801ee2a:	fb0c 5c09 	mla	ip, ip, r9, r5
 801ee2e:	fb98 f8f7 	sdiv	r8, r8, r7
 801ee32:	fb9c fcf7 	sdiv	ip, ip, r7
 801ee36:	f884 8001 	strb.w	r8, [r4, #1]
 801ee3a:	f884 c002 	strb.w	ip, [r4, #2]
 801ee3e:	e70b      	b.n	801ec58 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe4>
 801ee40:	b007      	add	sp, #28
 801ee42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801ee48 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ee48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ee4c:	b089      	sub	sp, #36	@ 0x24
 801ee4e:	469a      	mov	sl, r3
 801ee50:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ee54:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 801ee56:	f89d 306c 	ldrb.w	r3, [sp, #108]	@ 0x6c
 801ee5a:	9102      	str	r1, [sp, #8]
 801ee5c:	9206      	str	r2, [sp, #24]
 801ee5e:	9307      	str	r3, [sp, #28]
 801ee60:	6842      	ldr	r2, [r0, #4]
 801ee62:	f8dd b068 	ldr.w	fp, [sp, #104]	@ 0x68
 801ee66:	e9dd 3118 	ldrd	r3, r1, [sp, #96]	@ 0x60
 801ee6a:	fb02 3101 	mla	r1, r2, r1, r3
 801ee6e:	6803      	ldr	r3, [r0, #0]
 801ee70:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 801ee74:	f8db 3008 	ldr.w	r3, [fp, #8]
 801ee78:	3301      	adds	r3, #1
 801ee7a:	f023 0301 	bic.w	r3, r3, #1
 801ee7e:	9303      	str	r3, [sp, #12]
 801ee80:	f8db 3000 	ldr.w	r3, [fp]
 801ee84:	9304      	str	r3, [sp, #16]
 801ee86:	9b02      	ldr	r3, [sp, #8]
 801ee88:	2b00      	cmp	r3, #0
 801ee8a:	dc03      	bgt.n	801ee94 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801ee8c:	9b06      	ldr	r3, [sp, #24]
 801ee8e:	2b00      	cmp	r3, #0
 801ee90:	f340 8154 	ble.w	801f13c <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 801ee94:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801ee96:	f9bb 6008 	ldrsh.w	r6, [fp, #8]
 801ee9a:	f503 4200 	add.w	r2, r3, #32768	@ 0x8000
 801ee9e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801eea0:	f9bb 500c 	ldrsh.w	r5, [fp, #12]
 801eea4:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 801eea8:	9301      	str	r3, [sp, #4]
 801eeaa:	f1ba 0f00 	cmp.w	sl, #0
 801eeae:	dd12      	ble.n	801eed6 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801eeb0:	1410      	asrs	r0, r2, #16
 801eeb2:	d406      	bmi.n	801eec2 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801eeb4:	42b0      	cmp	r0, r6
 801eeb6:	da04      	bge.n	801eec2 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801eeb8:	9b01      	ldr	r3, [sp, #4]
 801eeba:	1418      	asrs	r0, r3, #16
 801eebc:	d401      	bmi.n	801eec2 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801eebe:	42a8      	cmp	r0, r5
 801eec0:	db0a      	blt.n	801eed8 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801eec2:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801eec4:	f10a 3aff 	add.w	sl, sl, #4294967295
 801eec8:	9b01      	ldr	r3, [sp, #4]
 801eeca:	3104      	adds	r1, #4
 801eecc:	4402      	add	r2, r0
 801eece:	9816      	ldr	r0, [sp, #88]	@ 0x58
 801eed0:	4403      	add	r3, r0
 801eed2:	9301      	str	r3, [sp, #4]
 801eed4:	e7e9      	b.n	801eeaa <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801eed6:	d050      	beq.n	801ef7a <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 801eed8:	f10a 30ff 	add.w	r0, sl, #4294967295
 801eedc:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801eede:	fb04 2400 	mla	r4, r4, r0, r2
 801eee2:	1424      	asrs	r4, r4, #16
 801eee4:	d440      	bmi.n	801ef68 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 801eee6:	42b4      	cmp	r4, r6
 801eee8:	da3e      	bge.n	801ef68 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 801eeea:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801eeec:	9b01      	ldr	r3, [sp, #4]
 801eeee:	fb04 3000 	mla	r0, r4, r0, r3
 801eef2:	1400      	asrs	r0, r0, #16
 801eef4:	d438      	bmi.n	801ef68 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 801eef6:	42a8      	cmp	r0, r5
 801eef8:	da36      	bge.n	801ef68 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 801eefa:	1d08      	adds	r0, r1, #4
 801eefc:	46d6      	mov	lr, sl
 801eefe:	f1be 0f00 	cmp.w	lr, #0
 801ef02:	dd36      	ble.n	801ef72 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 801ef04:	9b01      	ldr	r3, [sp, #4]
 801ef06:	1414      	asrs	r4, r2, #16
 801ef08:	141d      	asrs	r5, r3, #16
 801ef0a:	9b03      	ldr	r3, [sp, #12]
 801ef0c:	fb03 4505 	mla	r5, r3, r5, r4
 801ef10:	9b04      	ldr	r3, [sp, #16]
 801ef12:	086c      	lsrs	r4, r5, #1
 801ef14:	5d1c      	ldrb	r4, [r3, r4]
 801ef16:	07eb      	lsls	r3, r5, #31
 801ef18:	9b07      	ldr	r3, [sp, #28]
 801ef1a:	bf54      	ite	pl
 801ef1c:	f004 040f 	andpl.w	r4, r4, #15
 801ef20:	1124      	asrmi	r4, r4, #4
 801ef22:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801ef26:	b2e4      	uxtb	r4, r4
 801ef28:	435c      	muls	r4, r3
 801ef2a:	1c65      	adds	r5, r4, #1
 801ef2c:	eb05 2424 	add.w	r4, r5, r4, asr #8
 801ef30:	4d84      	ldr	r5, [pc, #528]	@ (801f144 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>)
 801ef32:	1224      	asrs	r4, r4, #8
 801ef34:	f895 9002 	ldrb.w	r9, [r5, #2]
 801ef38:	786f      	ldrb	r7, [r5, #1]
 801ef3a:	2cff      	cmp	r4, #255	@ 0xff
 801ef3c:	f895 c000 	ldrb.w	ip, [r5]
 801ef40:	f040 80cb 	bne.w	801f0da <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 801ef44:	f800 cc04 	strb.w	ip, [r0, #-4]
 801ef48:	f800 7c03 	strb.w	r7, [r0, #-3]
 801ef4c:	f800 9c02 	strb.w	r9, [r0, #-2]
 801ef50:	f800 4c01 	strb.w	r4, [r0, #-1]
 801ef54:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801ef56:	3004      	adds	r0, #4
 801ef58:	9c01      	ldr	r4, [sp, #4]
 801ef5a:	f10e 3eff 	add.w	lr, lr, #4294967295
 801ef5e:	441a      	add	r2, r3
 801ef60:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801ef62:	441c      	add	r4, r3
 801ef64:	9401      	str	r4, [sp, #4]
 801ef66:	e7ca      	b.n	801eefe <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 801ef68:	2600      	movs	r6, #0
 801ef6a:	eb0a 0006 	add.w	r0, sl, r6
 801ef6e:	2800      	cmp	r0, #0
 801ef70:	dc41      	bgt.n	801eff6 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 801ef72:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 801ef76:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801ef7a:	9b02      	ldr	r3, [sp, #8]
 801ef7c:	2b00      	cmp	r3, #0
 801ef7e:	f340 80dd 	ble.w	801f13c <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 801ef82:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ef86:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801ef88:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ef8c:	eeb0 6a62 	vmov.f32	s12, s5
 801ef90:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ef94:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ef98:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ef9c:	ed8d 6a13 	vstr	s12, [sp, #76]	@ 0x4c
 801efa0:	eeb0 6a43 	vmov.f32	s12, s6
 801efa4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801efa8:	ed8d 6a14 	vstr	s12, [sp, #80]	@ 0x50
 801efac:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801efb0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801efb4:	ee77 2a62 	vsub.f32	s5, s14, s5
 801efb8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801efbc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801efc0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801efc4:	ee12 2a90 	vmov	r2, s5
 801efc8:	eef0 2a47 	vmov.f32	s5, s14
 801efcc:	fb92 f3f3 	sdiv	r3, r2, r3
 801efd0:	ee13 2a10 	vmov	r2, s6
 801efd4:	9315      	str	r3, [sp, #84]	@ 0x54
 801efd6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801efd8:	eeb0 3a67 	vmov.f32	s6, s15
 801efdc:	fb92 f3f3 	sdiv	r3, r2, r3
 801efe0:	9316      	str	r3, [sp, #88]	@ 0x58
 801efe2:	9b02      	ldr	r3, [sp, #8]
 801efe4:	9a06      	ldr	r2, [sp, #24]
 801efe6:	3b01      	subs	r3, #1
 801efe8:	9302      	str	r3, [sp, #8]
 801efea:	bf08      	it	eq
 801efec:	4692      	moveq	sl, r2
 801efee:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801eff0:	bf18      	it	ne
 801eff2:	469a      	movne	sl, r3
 801eff4:	e747      	b.n	801ee86 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801eff6:	1414      	asrs	r4, r2, #16
 801eff8:	d432      	bmi.n	801f060 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 801effa:	f8db 0008 	ldr.w	r0, [fp, #8]
 801effe:	42a0      	cmp	r0, r4
 801f000:	dd2e      	ble.n	801f060 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 801f002:	9b01      	ldr	r3, [sp, #4]
 801f004:	141d      	asrs	r5, r3, #16
 801f006:	d42b      	bmi.n	801f060 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 801f008:	f8db 000c 	ldr.w	r0, [fp, #12]
 801f00c:	42a8      	cmp	r0, r5
 801f00e:	dd27      	ble.n	801f060 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 801f010:	9803      	ldr	r0, [sp, #12]
 801f012:	fb05 4400 	mla	r4, r5, r0, r4
 801f016:	9d04      	ldr	r5, [sp, #16]
 801f018:	0860      	lsrs	r0, r4, #1
 801f01a:	07e4      	lsls	r4, r4, #31
 801f01c:	9c07      	ldr	r4, [sp, #28]
 801f01e:	5c28      	ldrb	r0, [r5, r0]
 801f020:	bf54      	ite	pl
 801f022:	f000 000f 	andpl.w	r0, r0, #15
 801f026:	1100      	asrmi	r0, r0, #4
 801f028:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801f02c:	b2c0      	uxtb	r0, r0
 801f02e:	4360      	muls	r0, r4
 801f030:	1c44      	adds	r4, r0, #1
 801f032:	eb04 2020 	add.w	r0, r4, r0, asr #8
 801f036:	4c43      	ldr	r4, [pc, #268]	@ (801f144 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>)
 801f038:	1200      	asrs	r0, r0, #8
 801f03a:	78a5      	ldrb	r5, [r4, #2]
 801f03c:	f894 c001 	ldrb.w	ip, [r4, #1]
 801f040:	28ff      	cmp	r0, #255	@ 0xff
 801f042:	9505      	str	r5, [sp, #20]
 801f044:	f894 e000 	ldrb.w	lr, [r4]
 801f048:	d112      	bne.n	801f070 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801f04a:	f06f 0303 	mvn.w	r3, #3
 801f04e:	fb03 f406 	mul.w	r4, r3, r6
 801f052:	f801 e004 	strb.w	lr, [r1, r4]
 801f056:	440c      	add	r4, r1
 801f058:	f884 c001 	strb.w	ip, [r4, #1]
 801f05c:	70a5      	strb	r5, [r4, #2]
 801f05e:	70e0      	strb	r0, [r4, #3]
 801f060:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801f062:	3e01      	subs	r6, #1
 801f064:	9801      	ldr	r0, [sp, #4]
 801f066:	441a      	add	r2, r3
 801f068:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801f06a:	4418      	add	r0, r3
 801f06c:	9001      	str	r0, [sp, #4]
 801f06e:	e77c      	b.n	801ef6a <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801f070:	b2c4      	uxtb	r4, r0
 801f072:	2800      	cmp	r0, #0
 801f074:	d0f4      	beq.n	801f060 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 801f076:	f06f 0303 	mvn.w	r3, #3
 801f07a:	fb00 fe0e 	mul.w	lr, r0, lr
 801f07e:	fb00 fc0c 	mul.w	ip, r0, ip
 801f082:	fb03 f806 	mul.w	r8, r3, r6
 801f086:	eb01 0708 	add.w	r7, r1, r8
 801f08a:	f897 9003 	ldrb.w	r9, [r7, #3]
 801f08e:	fb04 f509 	mul.w	r5, r4, r9
 801f092:	444c      	add	r4, r9
 801f094:	1c6b      	adds	r3, r5, #1
 801f096:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801f09a:	9b05      	ldr	r3, [sp, #20]
 801f09c:	122d      	asrs	r5, r5, #8
 801f09e:	4358      	muls	r0, r3
 801f0a0:	1b64      	subs	r4, r4, r5
 801f0a2:	eba9 0505 	sub.w	r5, r9, r5
 801f0a6:	f811 9008 	ldrb.w	r9, [r1, r8]
 801f0aa:	b2e4      	uxtb	r4, r4
 801f0ac:	fb05 ee09 	mla	lr, r5, r9, lr
 801f0b0:	fb9e fef4 	sdiv	lr, lr, r4
 801f0b4:	f801 e008 	strb.w	lr, [r1, r8]
 801f0b8:	f897 e001 	ldrb.w	lr, [r7, #1]
 801f0bc:	f897 9002 	ldrb.w	r9, [r7, #2]
 801f0c0:	fb05 cc0e 	mla	ip, r5, lr, ip
 801f0c4:	fb05 0509 	mla	r5, r5, r9, r0
 801f0c8:	70fc      	strb	r4, [r7, #3]
 801f0ca:	fb9c fcf4 	sdiv	ip, ip, r4
 801f0ce:	fb95 f5f4 	sdiv	r5, r5, r4
 801f0d2:	f887 c001 	strb.w	ip, [r7, #1]
 801f0d6:	70bd      	strb	r5, [r7, #2]
 801f0d8:	e7c2      	b.n	801f060 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 801f0da:	b2e5      	uxtb	r5, r4
 801f0dc:	2c00      	cmp	r4, #0
 801f0de:	f43f af39 	beq.w	801ef54 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801f0e2:	f810 8c01 	ldrb.w	r8, [r0, #-1]
 801f0e6:	fb04 fc0c 	mul.w	ip, r4, ip
 801f0ea:	4367      	muls	r7, r4
 801f0ec:	fb05 f608 	mul.w	r6, r5, r8
 801f0f0:	4445      	add	r5, r8
 801f0f2:	fb04 f409 	mul.w	r4, r4, r9
 801f0f6:	1c73      	adds	r3, r6, #1
 801f0f8:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801f0fc:	1236      	asrs	r6, r6, #8
 801f0fe:	1bad      	subs	r5, r5, r6
 801f100:	eba8 0606 	sub.w	r6, r8, r6
 801f104:	f810 8c04 	ldrb.w	r8, [r0, #-4]
 801f108:	b2ed      	uxtb	r5, r5
 801f10a:	fb06 cc08 	mla	ip, r6, r8, ip
 801f10e:	f810 8c02 	ldrb.w	r8, [r0, #-2]
 801f112:	f800 5c01 	strb.w	r5, [r0, #-1]
 801f116:	fb9c fcf5 	sdiv	ip, ip, r5
 801f11a:	f800 cc04 	strb.w	ip, [r0, #-4]
 801f11e:	f810 cc03 	ldrb.w	ip, [r0, #-3]
 801f122:	fb06 770c 	mla	r7, r6, ip, r7
 801f126:	fb06 4608 	mla	r6, r6, r8, r4
 801f12a:	fb97 f7f5 	sdiv	r7, r7, r5
 801f12e:	fb96 f6f5 	sdiv	r6, r6, r5
 801f132:	f800 7c03 	strb.w	r7, [r0, #-3]
 801f136:	f800 6c02 	strb.w	r6, [r0, #-2]
 801f13a:	e70b      	b.n	801ef54 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801f13c:	b009      	add	sp, #36	@ 0x24
 801f13e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f142:	bf00      	nop
 801f144:	20029ee8 	.word	0x20029ee8

0801f148 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f14c:	b089      	sub	sp, #36	@ 0x24
 801f14e:	469a      	mov	sl, r3
 801f150:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f154:	4cb8      	ldr	r4, [pc, #736]	@ (801f438 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>)
 801f156:	9102      	str	r1, [sp, #8]
 801f158:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801f15a:	9205      	str	r2, [sp, #20]
 801f15c:	684a      	ldr	r2, [r1, #4]
 801f15e:	f8dd b068 	ldr.w	fp, [sp, #104]	@ 0x68
 801f162:	e9dd 3018 	ldrd	r3, r0, [sp, #96]	@ 0x60
 801f166:	fb02 3000 	mla	r0, r2, r0, r3
 801f16a:	680b      	ldr	r3, [r1, #0]
 801f16c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801f170:	f8db 3008 	ldr.w	r3, [fp, #8]
 801f174:	3301      	adds	r3, #1
 801f176:	f023 0301 	bic.w	r3, r3, #1
 801f17a:	9303      	str	r3, [sp, #12]
 801f17c:	f8db 3000 	ldr.w	r3, [fp]
 801f180:	9304      	str	r3, [sp, #16]
 801f182:	9b02      	ldr	r3, [sp, #8]
 801f184:	2b00      	cmp	r3, #0
 801f186:	dc03      	bgt.n	801f190 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801f188:	9b05      	ldr	r3, [sp, #20]
 801f18a:	2b00      	cmp	r3, #0
 801f18c:	f340 8150 	ble.w	801f430 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 801f190:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f192:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 801f196:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 801f19a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801f19c:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 801f1a0:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 801f1a4:	9301      	str	r3, [sp, #4]
 801f1a6:	f1ba 0f00 	cmp.w	sl, #0
 801f1aa:	dd12      	ble.n	801f1d2 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801f1ac:	140b      	asrs	r3, r1, #16
 801f1ae:	d406      	bmi.n	801f1be <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f1b0:	42bb      	cmp	r3, r7
 801f1b2:	da04      	bge.n	801f1be <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f1b4:	9b01      	ldr	r3, [sp, #4]
 801f1b6:	141b      	asrs	r3, r3, #16
 801f1b8:	d401      	bmi.n	801f1be <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f1ba:	42b3      	cmp	r3, r6
 801f1bc:	db0a      	blt.n	801f1d4 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801f1be:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801f1c0:	f10a 3aff 	add.w	sl, sl, #4294967295
 801f1c4:	9a01      	ldr	r2, [sp, #4]
 801f1c6:	3004      	adds	r0, #4
 801f1c8:	4419      	add	r1, r3
 801f1ca:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801f1cc:	441a      	add	r2, r3
 801f1ce:	9201      	str	r2, [sp, #4]
 801f1d0:	e7e9      	b.n	801f1a6 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801f1d2:	d046      	beq.n	801f262 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11a>
 801f1d4:	f10a 33ff 	add.w	r3, sl, #4294967295
 801f1d8:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 801f1da:	fb05 1503 	mla	r5, r5, r3, r1
 801f1de:	142d      	asrs	r5, r5, #16
 801f1e0:	d436      	bmi.n	801f250 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x108>
 801f1e2:	42bd      	cmp	r5, r7
 801f1e4:	da34      	bge.n	801f250 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x108>
 801f1e6:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 801f1e8:	9a01      	ldr	r2, [sp, #4]
 801f1ea:	fb05 2303 	mla	r3, r5, r3, r2
 801f1ee:	141b      	asrs	r3, r3, #16
 801f1f0:	d42e      	bmi.n	801f250 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x108>
 801f1f2:	42b3      	cmp	r3, r6
 801f1f4:	da2c      	bge.n	801f250 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x108>
 801f1f6:	1d05      	adds	r5, r0, #4
 801f1f8:	46d0      	mov	r8, sl
 801f1fa:	f1b8 0f00 	cmp.w	r8, #0
 801f1fe:	dd2c      	ble.n	801f25a <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801f200:	9b01      	ldr	r3, [sp, #4]
 801f202:	9a03      	ldr	r2, [sp, #12]
 801f204:	141e      	asrs	r6, r3, #16
 801f206:	f894 e000 	ldrb.w	lr, [r4]
 801f20a:	140b      	asrs	r3, r1, #16
 801f20c:	fb02 3606 	mla	r6, r2, r6, r3
 801f210:	9a04      	ldr	r2, [sp, #16]
 801f212:	0873      	lsrs	r3, r6, #1
 801f214:	5cd3      	ldrb	r3, [r2, r3]
 801f216:	07f2      	lsls	r2, r6, #31
 801f218:	bf54      	ite	pl
 801f21a:	f003 030f 	andpl.w	r3, r3, #15
 801f21e:	111b      	asrmi	r3, r3, #4
 801f220:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801f224:	b2db      	uxtb	r3, r3
 801f226:	2bff      	cmp	r3, #255	@ 0xff
 801f228:	f040 80c9 	bne.w	801f3be <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801f22c:	f805 ec04 	strb.w	lr, [r5, #-4]
 801f230:	7863      	ldrb	r3, [r4, #1]
 801f232:	f805 3c03 	strb.w	r3, [r5, #-3]
 801f236:	78a3      	ldrb	r3, [r4, #2]
 801f238:	f805 3c02 	strb.w	r3, [r5, #-2]
 801f23c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801f23e:	3504      	adds	r5, #4
 801f240:	9a01      	ldr	r2, [sp, #4]
 801f242:	f108 38ff 	add.w	r8, r8, #4294967295
 801f246:	4419      	add	r1, r3
 801f248:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801f24a:	441a      	add	r2, r3
 801f24c:	9201      	str	r2, [sp, #4]
 801f24e:	e7d4      	b.n	801f1fa <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801f250:	2500      	movs	r5, #0
 801f252:	eb0a 0305 	add.w	r3, sl, r5
 801f256:	2b00      	cmp	r3, #0
 801f258:	dc41      	bgt.n	801f2de <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801f25a:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 801f25e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801f262:	9b02      	ldr	r3, [sp, #8]
 801f264:	2b00      	cmp	r3, #0
 801f266:	f340 80e3 	ble.w	801f430 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 801f26a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f26e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801f270:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f274:	eeb0 6a62 	vmov.f32	s12, s5
 801f278:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f27c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f280:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f284:	ed8d 6a13 	vstr	s12, [sp, #76]	@ 0x4c
 801f288:	eeb0 6a43 	vmov.f32	s12, s6
 801f28c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f290:	ed8d 6a14 	vstr	s12, [sp, #80]	@ 0x50
 801f294:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f298:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f29c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f2a0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f2a4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f2a8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f2ac:	ee12 2a90 	vmov	r2, s5
 801f2b0:	eef0 2a47 	vmov.f32	s5, s14
 801f2b4:	fb92 f3f3 	sdiv	r3, r2, r3
 801f2b8:	ee13 2a10 	vmov	r2, s6
 801f2bc:	9315      	str	r3, [sp, #84]	@ 0x54
 801f2be:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801f2c0:	eeb0 3a67 	vmov.f32	s6, s15
 801f2c4:	fb92 f3f3 	sdiv	r3, r2, r3
 801f2c8:	9316      	str	r3, [sp, #88]	@ 0x58
 801f2ca:	9b02      	ldr	r3, [sp, #8]
 801f2cc:	9a05      	ldr	r2, [sp, #20]
 801f2ce:	3b01      	subs	r3, #1
 801f2d0:	9302      	str	r3, [sp, #8]
 801f2d2:	bf08      	it	eq
 801f2d4:	4692      	moveq	sl, r2
 801f2d6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801f2d8:	bf18      	it	ne
 801f2da:	469a      	movne	sl, r3
 801f2dc:	e751      	b.n	801f182 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801f2de:	140e      	asrs	r6, r1, #16
 801f2e0:	d426      	bmi.n	801f330 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801f2e2:	f8db 3008 	ldr.w	r3, [fp, #8]
 801f2e6:	42b3      	cmp	r3, r6
 801f2e8:	dd22      	ble.n	801f330 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801f2ea:	9b01      	ldr	r3, [sp, #4]
 801f2ec:	141f      	asrs	r7, r3, #16
 801f2ee:	d41f      	bmi.n	801f330 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801f2f0:	f8db 300c 	ldr.w	r3, [fp, #12]
 801f2f4:	42bb      	cmp	r3, r7
 801f2f6:	dd1b      	ble.n	801f330 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801f2f8:	9b03      	ldr	r3, [sp, #12]
 801f2fa:	f894 8000 	ldrb.w	r8, [r4]
 801f2fe:	fb07 6603 	mla	r6, r7, r3, r6
 801f302:	9f04      	ldr	r7, [sp, #16]
 801f304:	0873      	lsrs	r3, r6, #1
 801f306:	07f6      	lsls	r6, r6, #31
 801f308:	5cfb      	ldrb	r3, [r7, r3]
 801f30a:	bf54      	ite	pl
 801f30c:	f003 030f 	andpl.w	r3, r3, #15
 801f310:	111b      	asrmi	r3, r3, #4
 801f312:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801f316:	b2db      	uxtb	r3, r3
 801f318:	2bff      	cmp	r3, #255	@ 0xff
 801f31a:	d111      	bne.n	801f340 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 801f31c:	f06f 0303 	mvn.w	r3, #3
 801f320:	436b      	muls	r3, r5
 801f322:	f800 8003 	strb.w	r8, [r0, r3]
 801f326:	4403      	add	r3, r0
 801f328:	7866      	ldrb	r6, [r4, #1]
 801f32a:	705e      	strb	r6, [r3, #1]
 801f32c:	78a6      	ldrb	r6, [r4, #2]
 801f32e:	709e      	strb	r6, [r3, #2]
 801f330:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801f332:	3d01      	subs	r5, #1
 801f334:	9a01      	ldr	r2, [sp, #4]
 801f336:	4419      	add	r1, r3
 801f338:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801f33a:	441a      	add	r2, r3
 801f33c:	9201      	str	r2, [sp, #4]
 801f33e:	e788      	b.n	801f252 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10a>
 801f340:	2b00      	cmp	r3, #0
 801f342:	d0f5      	beq.n	801f330 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801f344:	f06f 0203 	mvn.w	r2, #3
 801f348:	78a6      	ldrb	r6, [r4, #2]
 801f34a:	fb18 f803 	smulbb	r8, r8, r3
 801f34e:	fb02 f905 	mul.w	r9, r2, r5
 801f352:	9606      	str	r6, [sp, #24]
 801f354:	eb00 0c09 	add.w	ip, r0, r9
 801f358:	7866      	ldrb	r6, [r4, #1]
 801f35a:	f89c 7003 	ldrb.w	r7, [ip, #3]
 801f35e:	9607      	str	r6, [sp, #28]
 801f360:	fb03 f607 	mul.w	r6, r3, r7
 801f364:	9a07      	ldr	r2, [sp, #28]
 801f366:	f106 0e01 	add.w	lr, r6, #1
 801f36a:	eb0e 2e26 	add.w	lr, lr, r6, asr #8
 801f36e:	18fe      	adds	r6, r7, r3
 801f370:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801f374:	eba7 070e 	sub.w	r7, r7, lr
 801f378:	eba6 060e 	sub.w	r6, r6, lr
 801f37c:	f810 e009 	ldrb.w	lr, [r0, r9]
 801f380:	b2f6      	uxtb	r6, r6
 801f382:	fb07 880e 	mla	r8, r7, lr, r8
 801f386:	fb98 f8f6 	sdiv	r8, r8, r6
 801f38a:	f800 8009 	strb.w	r8, [r0, r9]
 801f38e:	fb13 f902 	smulbb	r9, r3, r2
 801f392:	f89c e001 	ldrb.w	lr, [ip, #1]
 801f396:	9a06      	ldr	r2, [sp, #24]
 801f398:	fb07 990e 	mla	r9, r7, lr, r9
 801f39c:	f89c e002 	ldrb.w	lr, [ip, #2]
 801f3a0:	fb13 f302 	smulbb	r3, r3, r2
 801f3a4:	f88c 6003 	strb.w	r6, [ip, #3]
 801f3a8:	fb07 330e 	mla	r3, r7, lr, r3
 801f3ac:	fb99 f9f6 	sdiv	r9, r9, r6
 801f3b0:	fb93 f3f6 	sdiv	r3, r3, r6
 801f3b4:	f88c 9001 	strb.w	r9, [ip, #1]
 801f3b8:	f88c 3002 	strb.w	r3, [ip, #2]
 801f3bc:	e7b8      	b.n	801f330 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801f3be:	2b00      	cmp	r3, #0
 801f3c0:	f43f af3c 	beq.w	801f23c <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 801f3c4:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 801f3c8:	fb1e fe03 	smulbb	lr, lr, r3
 801f3cc:	78a2      	ldrb	r2, [r4, #2]
 801f3ce:	fb03 fc09 	mul.w	ip, r3, r9
 801f3d2:	eb09 0603 	add.w	r6, r9, r3
 801f3d6:	9206      	str	r2, [sp, #24]
 801f3d8:	f10c 0701 	add.w	r7, ip, #1
 801f3dc:	7862      	ldrb	r2, [r4, #1]
 801f3de:	eb07 272c 	add.w	r7, r7, ip, asr #8
 801f3e2:	ea4f 2c27 	mov.w	ip, r7, asr #8
 801f3e6:	eba9 070c 	sub.w	r7, r9, ip
 801f3ea:	eba6 060c 	sub.w	r6, r6, ip
 801f3ee:	f815 cc04 	ldrb.w	ip, [r5, #-4]
 801f3f2:	fb13 f902 	smulbb	r9, r3, r2
 801f3f6:	9a06      	ldr	r2, [sp, #24]
 801f3f8:	b2f6      	uxtb	r6, r6
 801f3fa:	fb07 ee0c 	mla	lr, r7, ip, lr
 801f3fe:	f815 cc03 	ldrb.w	ip, [r5, #-3]
 801f402:	fb13 f302 	smulbb	r3, r3, r2
 801f406:	f805 6c01 	strb.w	r6, [r5, #-1]
 801f40a:	fb07 990c 	mla	r9, r7, ip, r9
 801f40e:	f815 cc02 	ldrb.w	ip, [r5, #-2]
 801f412:	fb07 330c 	mla	r3, r7, ip, r3
 801f416:	fb9e fef6 	sdiv	lr, lr, r6
 801f41a:	fb99 f9f6 	sdiv	r9, r9, r6
 801f41e:	fb93 f3f6 	sdiv	r3, r3, r6
 801f422:	f805 ec04 	strb.w	lr, [r5, #-4]
 801f426:	f805 9c03 	strb.w	r9, [r5, #-3]
 801f42a:	f805 3c02 	strb.w	r3, [r5, #-2]
 801f42e:	e705      	b.n	801f23c <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 801f430:	b009      	add	sp, #36	@ 0x24
 801f432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f436:	bf00      	nop
 801f438:	20029ee8 	.word	0x20029ee8

0801f43c <_ZN8touchgfx8LCD32bppD1Ev>:
 801f43c:	4770      	bx	lr

0801f43e <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW9D1Ev>:
 801f43e:	4770      	bx	lr

0801f440 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLED1Ev>:
 801f440:	4770      	bx	lr

0801f442 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L4D1Ev>:
 801f442:	4770      	bx	lr

0801f444 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801f444:	4770      	bx	lr

0801f446 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801f446:	4770      	bx	lr

0801f448 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801f448:	4770      	bx	lr

0801f44a <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801f44a:	4770      	bx	lr

0801f44c <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801f44c:	4770      	bx	lr

0801f44e <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801f44e:	4770      	bx	lr

0801f450 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801f450:	4770      	bx	lr

0801f452 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801f452:	4770      	bx	lr

0801f454 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801f454:	4770      	bx	lr

0801f456 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801f456:	4770      	bx	lr

0801f458 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801f458:	4770      	bx	lr

0801f45a <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801f45a:	4770      	bx	lr

0801f45c <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801f45c:	4770      	bx	lr

0801f45e <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801f45e:	4770      	bx	lr

0801f460 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801f460:	4770      	bx	lr

0801f462 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801f462:	4770      	bx	lr

0801f464 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801f464:	4770      	bx	lr

0801f466 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 801f466:	4770      	bx	lr

0801f468 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801f468:	4770      	bx	lr

0801f46a <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801f46a:	4770      	bx	lr

0801f46c <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801f46c:	4770      	bx	lr

0801f46e <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801f46e:	4770      	bx	lr

0801f470 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801f470:	4770      	bx	lr

0801f472 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801f472:	4770      	bx	lr

0801f474 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801f474:	4770      	bx	lr

0801f476 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801f476:	4770      	bx	lr

0801f478 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801f478:	4770      	bx	lr

0801f47a <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801f47a:	4770      	bx	lr

0801f47c <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801f47c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f480:	b091      	sub	sp, #68	@ 0x44
 801f482:	460f      	mov	r7, r1
 801f484:	4614      	mov	r4, r2
 801f486:	f89d 8068 	ldrb.w	r8, [sp, #104]	@ 0x68
 801f48a:	f89d 506c 	ldrb.w	r5, [sp, #108]	@ 0x6c
 801f48e:	f1b8 0f00 	cmp.w	r8, #0
 801f492:	d054      	beq.n	801f53e <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0xc2>
 801f494:	6810      	ldr	r0, [r2, #0]
 801f496:	ae0c      	add	r6, sp, #48	@ 0x30
 801f498:	6851      	ldr	r1, [r2, #4]
 801f49a:	f8df 91d4 	ldr.w	r9, [pc, #468]	@ 801f670 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1f4>
 801f49e:	f8df a1d4 	ldr.w	sl, [pc, #468]	@ 801f674 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1f8>
 801f4a2:	c603      	stmia	r6!, {r0, r1}
 801f4a4:	6818      	ldr	r0, [r3, #0]
 801f4a6:	ae0e      	add	r6, sp, #56	@ 0x38
 801f4a8:	6859      	ldr	r1, [r3, #4]
 801f4aa:	c603      	stmia	r6!, {r0, r1}
 801f4ac:	a80c      	add	r0, sp, #48	@ 0x30
 801f4ae:	f7f9 fad5 	bl	8018a5c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f4b2:	4621      	mov	r1, r4
 801f4b4:	a80e      	add	r0, sp, #56	@ 0x38
 801f4b6:	f7f9 faf9 	bl	8018aac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f4ba:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 801f4be:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 801f4c2:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 801f4c6:	f8d9 0000 	ldr.w	r0, [r9]
 801f4ca:	fb11 2103 	smlabb	r1, r1, r3, r2
 801f4ce:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	@ 0x3e
 801f4d2:	eb07 0481 	add.w	r4, r7, r1, lsl #2
 801f4d6:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 801f4da:	f9bd 703c 	ldrsh.w	r7, [sp, #60]	@ 0x3c
 801f4de:	440a      	add	r2, r1
 801f4e0:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 801f4e4:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 801f4e8:	4413      	add	r3, r2
 801f4ea:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 801f4ee:	6803      	ldr	r3, [r0, #0]
 801f4f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f4f2:	4798      	blx	r3
 801f4f4:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 801f4f8:	d024      	beq.n	801f544 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0xc8>
 801f4fa:	f010 0f40 	tst.w	r0, #64	@ 0x40
 801f4fe:	f8d9 0000 	ldr.w	r0, [r9]
 801f502:	d022      	beq.n	801f54a <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0xce>
 801f504:	2102      	movs	r1, #2
 801f506:	f04f 0e00 	mov.w	lr, #0
 801f50a:	f8d0 c000 	ldr.w	ip, [r0]
 801f50e:	b2b6      	uxth	r6, r6
 801f510:	9106      	str	r1, [sp, #24]
 801f512:	b2bf      	uxth	r7, r7
 801f514:	f8bd 303a 	ldrh.w	r3, [sp, #58]	@ 0x3a
 801f518:	f8bd 2038 	ldrh.w	r2, [sp, #56]	@ 0x38
 801f51c:	e9cd 1e07 	strd	r1, lr, [sp, #28]
 801f520:	f8ba 1000 	ldrh.w	r1, [sl]
 801f524:	f8cd 800c 	str.w	r8, [sp, #12]
 801f528:	9601      	str	r6, [sp, #4]
 801f52a:	9700      	str	r7, [sp, #0]
 801f52c:	e9cd 5104 	strd	r5, r1, [sp, #16]
 801f530:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 801f534:	9102      	str	r1, [sp, #8]
 801f536:	4621      	mov	r1, r4
 801f538:	f8dc 5040 	ldr.w	r5, [ip, #64]	@ 0x40
 801f53c:	47a8      	blx	r5
 801f53e:	b011      	add	sp, #68	@ 0x44
 801f540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f544:	f010 0f20 	tst.w	r0, #32
 801f548:	e7d9      	b.n	801f4fe <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x82>
 801f54a:	6803      	ldr	r3, [r0, #0]
 801f54c:	ea4f 0b87 	mov.w	fp, r7, lsl #2
 801f550:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f552:	4798      	blx	r3
 801f554:	f8ba c000 	ldrh.w	ip, [sl]
 801f558:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 801f55c:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 801f560:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 801f564:	fb0c f606 	mul.w	r6, ip, r6
 801f568:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 801f56c:	fb0c 2303 	mla	r3, ip, r3, r2
 801f570:	ebac 0c07 	sub.w	ip, ip, r7
 801f574:	eba9 0907 	sub.w	r9, r9, r7
 801f578:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801f57c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 801f580:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 801f584:	ea4f 0989 	mov.w	r9, r9, lsl #2
 801f588:	d148      	bne.n	801f61c <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 801f58a:	2d00      	cmp	r5, #0
 801f58c:	d146      	bne.n	801f61c <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 801f58e:	42b0      	cmp	r0, r6
 801f590:	d268      	bcs.n	801f664 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1e8>
 801f592:	eb00 020b 	add.w	r2, r0, fp
 801f596:	4290      	cmp	r0, r2
 801f598:	d204      	bcs.n	801f5a4 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x128>
 801f59a:	f854 3b04 	ldr.w	r3, [r4], #4
 801f59e:	f840 3b04 	str.w	r3, [r0], #4
 801f5a2:	e7f8      	b.n	801f596 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x11a>
 801f5a4:	4460      	add	r0, ip
 801f5a6:	444c      	add	r4, r9
 801f5a8:	e7f1      	b.n	801f58e <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x112>
 801f5aa:	fb04 f70a 	mul.w	r7, r4, sl
 801f5ae:	4454      	add	r4, sl
 801f5b0:	1c7a      	adds	r2, r7, #1
 801f5b2:	eb02 2227 	add.w	r2, r2, r7, asr #8
 801f5b6:	1212      	asrs	r2, r2, #8
 801f5b8:	ebaa 0702 	sub.w	r7, sl, r2
 801f5bc:	f3ce 4a07 	ubfx	sl, lr, #16, #8
 801f5c0:	1aa4      	subs	r4, r4, r2
 801f5c2:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801f5c6:	fb07 fa0a 	mul.w	sl, r7, sl
 801f5ca:	b2e4      	uxtb	r4, r4
 801f5cc:	fb05 a202 	mla	r2, r5, r2, sl
 801f5d0:	fa5f fa8e 	uxtb.w	sl, lr
 801f5d4:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801f5d8:	fb07 fa0a 	mul.w	sl, r7, sl
 801f5dc:	fb07 fe0e 	mul.w	lr, r7, lr
 801f5e0:	fbb2 f2f4 	udiv	r2, r2, r4
 801f5e4:	0412      	lsls	r2, r2, #16
 801f5e6:	f402 027f 	and.w	r2, r2, #16711680	@ 0xff0000
 801f5ea:	4611      	mov	r1, r2
 801f5ec:	b2da      	uxtb	r2, r3
 801f5ee:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801f5f2:	fb05 a202 	mla	r2, r5, r2, sl
 801f5f6:	fb05 e503 	mla	r5, r5, r3, lr
 801f5fa:	fbb2 f2f4 	udiv	r2, r2, r4
 801f5fe:	b2d2      	uxtb	r2, r2
 801f600:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
 801f604:	fbb5 f4f4 	udiv	r4, r5, r4
 801f608:	0224      	lsls	r4, r4, #8
 801f60a:	430a      	orrs	r2, r1
 801f60c:	b2a4      	uxth	r4, r4
 801f60e:	4322      	orrs	r2, r4
 801f610:	6002      	str	r2, [r0, #0]
 801f612:	e025      	b.n	801f660 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1e4>
 801f614:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f616:	4460      	add	r0, ip
 801f618:	444b      	add	r3, r9
 801f61a:	461c      	mov	r4, r3
 801f61c:	42b0      	cmp	r0, r6
 801f61e:	d221      	bcs.n	801f664 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1e8>
 801f620:	eb00 030b 	add.w	r3, r0, fp
 801f624:	e9cd 430a 	strd	r4, r3, [sp, #40]	@ 0x28
 801f628:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f62a:	4298      	cmp	r0, r3
 801f62c:	d2f2      	bcs.n	801f614 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x198>
 801f62e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f630:	f852 3b04 	ldr.w	r3, [r2], #4
 801f634:	0e1d      	lsrs	r5, r3, #24
 801f636:	920a      	str	r2, [sp, #40]	@ 0x28
 801f638:	fb05 f408 	mul.w	r4, r5, r8
 801f63c:	1c65      	adds	r5, r4, #1
 801f63e:	eb05 2524 	add.w	r5, r5, r4, asr #8
 801f642:	122d      	asrs	r5, r5, #8
 801f644:	d00c      	beq.n	801f660 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1e4>
 801f646:	2dff      	cmp	r5, #255	@ 0xff
 801f648:	b2ec      	uxtb	r4, r5
 801f64a:	d004      	beq.n	801f656 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1da>
 801f64c:	f8d0 e000 	ldr.w	lr, [r0]
 801f650:	ea5f 6a1e 	movs.w	sl, lr, lsr #24
 801f654:	d1a9      	bne.n	801f5aa <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x12e>
 801f656:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 801f65a:	ea43 6505 	orr.w	r5, r3, r5, lsl #24
 801f65e:	6005      	str	r5, [r0, #0]
 801f660:	3004      	adds	r0, #4
 801f662:	e7e1      	b.n	801f628 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1ac>
 801f664:	4b02      	ldr	r3, [pc, #8]	@ (801f670 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1f4>)
 801f666:	6818      	ldr	r0, [r3, #0]
 801f668:	6803      	ldr	r3, [r0, #0]
 801f66a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f66c:	4798      	blx	r3
 801f66e:	e766      	b.n	801f53e <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0xc2>
 801f670:	20029ed8 	.word	0x20029ed8
 801f674:	20029ed2 	.word	0x20029ed2

0801f678 <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 801f678:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801f67c:	2300      	movs	r3, #0
 801f67e:	9300      	str	r3, [sp, #0]
 801f680:	4b3e      	ldr	r3, [pc, #248]	@ (801f77c <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801f682:	781b      	ldrb	r3, [r3, #0]
 801f684:	2b00      	cmp	r3, #0
 801f686:	d137      	bne.n	801f6f8 <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
 801f688:	4a3d      	ldr	r2, [pc, #244]	@ (801f780 <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 801f68a:	f9b2 2000 	ldrsh.w	r2, [r2]
 801f68e:	f8ad 2004 	strh.w	r2, [sp, #4]
 801f692:	2b00      	cmp	r3, #0
 801f694:	d132      	bne.n	801f6fc <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
 801f696:	4b3b      	ldr	r3, [pc, #236]	@ (801f784 <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
 801f698:	f9b3 3000 	ldrsh.w	r3, [r3]
 801f69c:	ac02      	add	r4, sp, #8
 801f69e:	6808      	ldr	r0, [r1, #0]
 801f6a0:	f8ad 3006 	strh.w	r3, [sp, #6]
 801f6a4:	ab02      	add	r3, sp, #8
 801f6a6:	6849      	ldr	r1, [r1, #4]
 801f6a8:	4d37      	ldr	r5, [pc, #220]	@ (801f788 <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x110>)
 801f6aa:	c303      	stmia	r3!, {r0, r1}
 801f6ac:	4669      	mov	r1, sp
 801f6ae:	4620      	mov	r0, r4
 801f6b0:	f7f9 f9fc 	bl	8018aac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f6b4:	4668      	mov	r0, sp
 801f6b6:	f7f9 f9d1 	bl	8018a5c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f6ba:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801f6be:	f8bd 2000 	ldrh.w	r2, [sp]
 801f6c2:	462f      	mov	r7, r5
 801f6c4:	6828      	ldr	r0, [r5, #0]
 801f6c6:	4413      	add	r3, r2
 801f6c8:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801f6cc:	f8ad 3008 	strh.w	r3, [sp, #8]
 801f6d0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801f6d4:	4413      	add	r3, r2
 801f6d6:	f8ad 300a 	strh.w	r3, [sp, #10]
 801f6da:	6803      	ldr	r3, [r0, #0]
 801f6dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f6de:	4798      	blx	r3
 801f6e0:	f010 0f01 	tst.w	r0, #1
 801f6e4:	d00c      	beq.n	801f700 <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
 801f6e6:	6828      	ldr	r0, [r5, #0]
 801f6e8:	6803      	ldr	r3, [r0, #0]
 801f6ea:	e894 0006 	ldmia.w	r4, {r1, r2}
 801f6ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801f6f0:	4798      	blx	r3
 801f6f2:	b004      	add	sp, #16
 801f6f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f6f8:	4a22      	ldr	r2, [pc, #136]	@ (801f784 <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
 801f6fa:	e7c6      	b.n	801f68a <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 801f6fc:	4b20      	ldr	r3, [pc, #128]	@ (801f780 <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 801f6fe:	e7cb      	b.n	801f698 <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 801f700:	6828      	ldr	r0, [r5, #0]
 801f702:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 801f706:	6803      	ldr	r3, [r0, #0]
 801f708:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 801f70c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f70e:	4798      	blx	r3
 801f710:	f9bd 5004 	ldrsh.w	r5, [sp, #4]
 801f714:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801f718:	f8bd 400a 	ldrh.w	r4, [sp, #10]
 801f71c:	fb15 3404 	smlabb	r4, r5, r4, r3
 801f720:	eba5 0508 	sub.w	r5, r5, r8
 801f724:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 801f728:	6838      	ldr	r0, [r7, #0]
 801f72a:	00ad      	lsls	r5, r5, #2
 801f72c:	6803      	ldr	r3, [r0, #0]
 801f72e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f730:	4798      	blx	r3
 801f732:	4b13      	ldr	r3, [pc, #76]	@ (801f780 <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 801f734:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801f738:	881a      	ldrh	r2, [r3, #0]
 801f73a:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801f73e:	4356      	muls	r6, r2
 801f740:	fb02 1303 	mla	r3, r2, r3, r1
 801f744:	eba2 0208 	sub.w	r2, r2, r8
 801f748:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801f74c:	0092      	lsls	r2, r2, #2
 801f74e:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 801f752:	ea4f 0388 	mov.w	r3, r8, lsl #2
 801f756:	42b0      	cmp	r0, r6
 801f758:	d20b      	bcs.n	801f772 <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
 801f75a:	eb00 0c03 	add.w	ip, r0, r3
 801f75e:	4560      	cmp	r0, ip
 801f760:	d204      	bcs.n	801f76c <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xf4>
 801f762:	f854 1b04 	ldr.w	r1, [r4], #4
 801f766:	f840 1b04 	str.w	r1, [r0], #4
 801f76a:	e7f8      	b.n	801f75e <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xe6>
 801f76c:	4410      	add	r0, r2
 801f76e:	442c      	add	r4, r5
 801f770:	e7f1      	b.n	801f756 <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xde>
 801f772:	6838      	ldr	r0, [r7, #0]
 801f774:	6803      	ldr	r3, [r0, #0]
 801f776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f778:	4798      	blx	r3
 801f77a:	e7ba      	b.n	801f6f2 <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 801f77c:	20029ed0 	.word	0x20029ed0
 801f780:	20029ed2 	.word	0x20029ed2
 801f784:	20029ed4 	.word	0x20029ed4
 801f788:	20029ed8 	.word	0x20029ed8

0801f78c <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 801f78c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f790:	461c      	mov	r4, r3
 801f792:	b093      	sub	sp, #76	@ 0x4c
 801f794:	460f      	mov	r7, r1
 801f796:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801f798:	6820      	ldr	r0, [r4, #0]
 801f79a:	6861      	ldr	r1, [r4, #4]
 801f79c:	9205      	str	r2, [sp, #20]
 801f79e:	aa0e      	add	r2, sp, #56	@ 0x38
 801f7a0:	f89d 8074 	ldrb.w	r8, [sp, #116]	@ 0x74
 801f7a4:	c203      	stmia	r2!, {r0, r1}
 801f7a6:	6818      	ldr	r0, [r3, #0]
 801f7a8:	aa10      	add	r2, sp, #64	@ 0x40
 801f7aa:	6859      	ldr	r1, [r3, #4]
 801f7ac:	c203      	stmia	r2!, {r0, r1}
 801f7ae:	a80e      	add	r0, sp, #56	@ 0x38
 801f7b0:	f7f9 f954 	bl	8018a5c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f7b4:	4621      	mov	r1, r4
 801f7b6:	a810      	add	r0, sp, #64	@ 0x40
 801f7b8:	f7f9 f978 	bl	8018aac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f7bc:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	@ 0x3c
 801f7c0:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	@ 0x3e
 801f7c4:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801f7c8:	f8bd 0040 	ldrh.w	r0, [sp, #64]	@ 0x40
 801f7cc:	bfdb      	ittet	le
 801f7ce:	b2b3      	uxthle	r3, r6
 801f7d0:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 801f7d4:	2301      	movgt	r3, #1
 801f7d6:	fb92 f3f3 	sdivle	r3, r2, r3
 801f7da:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	@ 0x42
 801f7de:	441d      	add	r5, r3
 801f7e0:	fb92 f1f3 	sdiv	r1, r2, r3
 801f7e4:	fa1f fc81 	uxth.w	ip, r1
 801f7e8:	3d01      	subs	r5, #1
 801f7ea:	fb0c 2413 	mls	r4, ip, r3, r2
 801f7ee:	4661      	mov	r1, ip
 801f7f0:	fb14 f406 	smulbb	r4, r4, r6
 801f7f4:	4404      	add	r4, r0
 801f7f6:	fb95 f5f3 	sdiv	r5, r5, r3
 801f7fa:	b2a4      	uxth	r4, r4
 801f7fc:	b121      	cbz	r1, 801f808 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x7c>
 801f7fe:	9b05      	ldr	r3, [sp, #20]
 801f800:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801f804:	ba1b      	rev	r3, r3
 801f806:	441f      	add	r7, r3
 801f808:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801f80c:	b2ad      	uxth	r5, r5
 801f80e:	f9bd 6046 	ldrsh.w	r6, [sp, #70]	@ 0x46
 801f812:	4418      	add	r0, r3
 801f814:	f8bd 303a 	ldrh.w	r3, [sp, #58]	@ 0x3a
 801f818:	00ad      	lsls	r5, r5, #2
 801f81a:	441a      	add	r2, r3
 801f81c:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	@ 0x44
 801f820:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 801f824:	9301      	str	r3, [sp, #4]
 801f826:	4b7c      	ldr	r3, [pc, #496]	@ (801fa18 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x28c>)
 801f828:	f8ad 2042 	strh.w	r2, [sp, #66]	@ 0x42
 801f82c:	6818      	ldr	r0, [r3, #0]
 801f82e:	6803      	ldr	r3, [r0, #0]
 801f830:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f832:	4798      	blx	r3
 801f834:	4a79      	ldr	r2, [pc, #484]	@ (801fa1c <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x290>)
 801f836:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	@ 0x42
 801f83a:	2c00      	cmp	r4, #0
 801f83c:	8811      	ldrh	r1, [r2, #0]
 801f83e:	f9bd c040 	ldrsh.w	ip, [sp, #64]	@ 0x40
 801f842:	fb06 f601 	mul.w	r6, r6, r1
 801f846:	fb01 c303 	mla	r3, r1, r3, ip
 801f84a:	920d      	str	r2, [sp, #52]	@ 0x34
 801f84c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801f850:	eb00 0386 	add.w	r3, r0, r6, lsl #2
 801f854:	bf18      	it	ne
 801f856:	2600      	movne	r6, #0
 801f858:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f85a:	f105 0304 	add.w	r3, r5, #4
 801f85e:	9307      	str	r3, [sp, #28]
 801f860:	9b01      	ldr	r3, [sp, #4]
 801f862:	bf08      	it	eq
 801f864:	461e      	moveq	r6, r3
 801f866:	ea4f 6308 	mov.w	r3, r8, lsl #24
 801f86a:	b2b6      	uxth	r6, r6
 801f86c:	9308      	str	r3, [sp, #32]
 801f86e:	2300      	movs	r3, #0
 801f870:	9304      	str	r3, [sp, #16]
 801f872:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801f874:	4290      	cmp	r0, r2
 801f876:	f080 80c7 	bcs.w	801fa08 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x27c>
 801f87a:	b95b      	cbnz	r3, 801f894 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x108>
 801f87c:	783a      	ldrb	r2, [r7, #0]
 801f87e:	0993      	lsrs	r3, r2, #6
 801f880:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801f884:	9204      	str	r2, [sp, #16]
 801f886:	1e5a      	subs	r2, r3, #1
 801f888:	2a02      	cmp	r2, #2
 801f88a:	bf8d      	iteet	hi
 801f88c:	787b      	ldrbhi	r3, [r7, #1]
 801f88e:	3701      	addls	r7, #1
 801f890:	b29b      	uxthls	r3, r3
 801f892:	3702      	addhi	r7, #2
 801f894:	b184      	cbz	r4, 801f8b8 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x12c>
 801f896:	429c      	cmp	r4, r3
 801f898:	d907      	bls.n	801f8aa <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x11e>
 801f89a:	1ae4      	subs	r4, r4, r3
 801f89c:	4635      	mov	r5, r6
 801f89e:	2300      	movs	r3, #0
 801f8a0:	b2a4      	uxth	r4, r4
 801f8a2:	9300      	str	r3, [sp, #0]
 801f8a4:	9b00      	ldr	r3, [sp, #0]
 801f8a6:	462e      	mov	r6, r5
 801f8a8:	e7e3      	b.n	801f872 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xe6>
 801f8aa:	1b1c      	subs	r4, r3, r4
 801f8ac:	f8bd 5004 	ldrh.w	r5, [sp, #4]
 801f8b0:	b2a3      	uxth	r3, r4
 801f8b2:	2400      	movs	r4, #0
 801f8b4:	9300      	str	r3, [sp, #0]
 801f8b6:	e7f5      	b.n	801f8a4 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x118>
 801f8b8:	2202      	movs	r2, #2
 801f8ba:	9907      	ldr	r1, [sp, #28]
 801f8bc:	429e      	cmp	r6, r3
 801f8be:	4615      	mov	r5, r2
 801f8c0:	9a04      	ldr	r2, [sp, #16]
 801f8c2:	fb15 1202 	smlabb	r2, r5, r2, r1
 801f8c6:	9905      	ldr	r1, [sp, #20]
 801f8c8:	5a8a      	ldrh	r2, [r1, r2]
 801f8ca:	d845      	bhi.n	801f958 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1cc>
 801f8cc:	1b99      	subs	r1, r3, r6
 801f8ce:	4625      	mov	r5, r4
 801f8d0:	9603      	str	r6, [sp, #12]
 801f8d2:	b289      	uxth	r1, r1
 801f8d4:	9100      	str	r1, [sp, #0]
 801f8d6:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 801f8da:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 801f8de:	ea4f 2c22 	mov.w	ip, r2, asr #8
 801f8e2:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 801f8e6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801f8ea:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801f8ee:	ea4e 1e9e 	orr.w	lr, lr, lr, lsr #6
 801f8f2:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 801f8f6:	b2d2      	uxtb	r2, r2
 801f8f8:	ea4f 210e 	mov.w	r1, lr, lsl #8
 801f8fc:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801f900:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 801f904:	ea41 0102 	orr.w	r1, r1, r2
 801f908:	d02b      	beq.n	801f962 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1d6>
 801f90a:	fb12 f208 	smulbb	r2, r2, r8
 801f90e:	f8dd a00c 	ldr.w	sl, [sp, #12]
 801f912:	4683      	mov	fp, r0
 801f914:	920a      	str	r2, [sp, #40]	@ 0x28
 801f916:	fb1e f208 	smulbb	r2, lr, r8
 801f91a:	9206      	str	r2, [sp, #24]
 801f91c:	fb18 f20c 	smulbb	r2, r8, ip
 801f920:	920c      	str	r2, [sp, #48]	@ 0x30
 801f922:	9a08      	ldr	r2, [sp, #32]
 801f924:	430a      	orrs	r2, r1
 801f926:	9209      	str	r2, [sp, #36]	@ 0x24
 801f928:	f1ba 0f00 	cmp.w	sl, #0
 801f92c:	d123      	bne.n	801f976 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1ea>
 801f92e:	9a03      	ldr	r2, [sp, #12]
 801f930:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 801f934:	429e      	cmp	r6, r3
 801f936:	d8b5      	bhi.n	801f8a4 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x118>
 801f938:	f8bd 5004 	ldrh.w	r5, [sp, #4]
 801f93c:	f8bd 403c 	ldrh.w	r4, [sp, #60]	@ 0x3c
 801f940:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f942:	1b64      	subs	r4, r4, r5
 801f944:	9a01      	ldr	r2, [sp, #4]
 801f946:	881b      	ldrh	r3, [r3, #0]
 801f948:	b2a4      	uxth	r4, r4
 801f94a:	1a9b      	subs	r3, r3, r2
 801f94c:	2c00      	cmp	r4, #0
 801f94e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801f952:	bf18      	it	ne
 801f954:	2500      	movne	r5, #0
 801f956:	e7a5      	b.n	801f8a4 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x118>
 801f958:	1af5      	subs	r5, r6, r3
 801f95a:	9303      	str	r3, [sp, #12]
 801f95c:	9400      	str	r4, [sp, #0]
 801f95e:	b2ad      	uxth	r5, r5
 801f960:	e7b9      	b.n	801f8d6 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x14a>
 801f962:	9a03      	ldr	r2, [sp, #12]
 801f964:	f041 417f 	orr.w	r1, r1, #4278190080	@ 0xff000000
 801f968:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 801f96c:	4282      	cmp	r2, r0
 801f96e:	d0e1      	beq.n	801f934 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1a8>
 801f970:	f840 1b04 	str.w	r1, [r0], #4
 801f974:	e7fa      	b.n	801f96c <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1e0>
 801f976:	f8db 2000 	ldr.w	r2, [fp]
 801f97a:	ea5f 6c12 	movs.w	ip, r2, lsr #24
 801f97e:	9202      	str	r2, [sp, #8]
 801f980:	d109      	bne.n	801f996 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x20a>
 801f982:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801f984:	f8cb 2000 	str.w	r2, [fp]
 801f988:	f10a 3aff 	add.w	sl, sl, #4294967295
 801f98c:	f10b 0b04 	add.w	fp, fp, #4
 801f990:	fa1f fa8a 	uxth.w	sl, sl
 801f994:	e7c8      	b.n	801f928 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x19c>
 801f996:	fb08 f10c 	mul.w	r1, r8, ip
 801f99a:	eb08 0e0c 	add.w	lr, r8, ip
 801f99e:	9a02      	ldr	r2, [sp, #8]
 801f9a0:	f101 0901 	add.w	r9, r1, #1
 801f9a4:	eb09 2921 	add.w	r9, r9, r1, asr #8
 801f9a8:	ea4f 2129 	mov.w	r1, r9, asr #8
 801f9ac:	ebac 0901 	sub.w	r9, ip, r1
 801f9b0:	ebae 0e01 	sub.w	lr, lr, r1
 801f9b4:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 801f9b8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801f9ba:	f89d 2008 	ldrb.w	r2, [sp, #8]
 801f9be:	fa5f fe8e 	uxtb.w	lr, lr
 801f9c2:	fb09 1c0c 	mla	ip, r9, ip, r1
 801f9c6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f9c8:	fb09 1102 	mla	r1, r9, r2, r1
 801f9cc:	9a02      	ldr	r2, [sp, #8]
 801f9ce:	fbbc fcfe 	udiv	ip, ip, lr
 801f9d2:	fbb1 f1fe 	udiv	r1, r1, lr
 801f9d6:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 801f9da:	b2c9      	uxtb	r1, r1
 801f9dc:	f40c 0c7f 	and.w	ip, ip, #16711680	@ 0xff0000
 801f9e0:	ea41 610e 	orr.w	r1, r1, lr, lsl #24
 801f9e4:	ea4c 0101 	orr.w	r1, ip, r1
 801f9e8:	f3c2 2c07 	ubfx	ip, r2, #8, #8
 801f9ec:	9a06      	ldr	r2, [sp, #24]
 801f9ee:	fb09 220c 	mla	r2, r9, ip, r2
 801f9f2:	fbb2 f2fe 	udiv	r2, r2, lr
 801f9f6:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 801f9fa:	fa1f fc8c 	uxth.w	ip, ip
 801f9fe:	ea41 010c 	orr.w	r1, r1, ip
 801fa02:	f8cb 1000 	str.w	r1, [fp]
 801fa06:	e7bf      	b.n	801f988 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1fc>
 801fa08:	4b03      	ldr	r3, [pc, #12]	@ (801fa18 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x28c>)
 801fa0a:	6818      	ldr	r0, [r3, #0]
 801fa0c:	6803      	ldr	r3, [r0, #0]
 801fa0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fa10:	4798      	blx	r3
 801fa12:	b013      	add	sp, #76	@ 0x4c
 801fa14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fa18:	20029ed8 	.word	0x20029ed8
 801fa1c:	20029ed2 	.word	0x20029ed2

0801fa20 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 801fa20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fa24:	b095      	sub	sp, #84	@ 0x54
 801fa26:	461c      	mov	r4, r3
 801fa28:	9204      	str	r2, [sp, #16]
 801fa2a:	f89d 207c 	ldrb.w	r2, [sp, #124]	@ 0x7c
 801fa2e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801fa30:	6820      	ldr	r0, [r4, #0]
 801fa32:	9100      	str	r1, [sp, #0]
 801fa34:	920e      	str	r2, [sp, #56]	@ 0x38
 801fa36:	aa10      	add	r2, sp, #64	@ 0x40
 801fa38:	6861      	ldr	r1, [r4, #4]
 801fa3a:	c203      	stmia	r2!, {r0, r1}
 801fa3c:	6818      	ldr	r0, [r3, #0]
 801fa3e:	aa12      	add	r2, sp, #72	@ 0x48
 801fa40:	6859      	ldr	r1, [r3, #4]
 801fa42:	c203      	stmia	r2!, {r0, r1}
 801fa44:	a810      	add	r0, sp, #64	@ 0x40
 801fa46:	f7f9 f809 	bl	8018a5c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801fa4a:	4621      	mov	r1, r4
 801fa4c:	a812      	add	r0, sp, #72	@ 0x48
 801fa4e:	f7f9 f82d 	bl	8018aac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801fa52:	f9bd 6044 	ldrsh.w	r6, [sp, #68]	@ 0x44
 801fa56:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	@ 0x46
 801fa5a:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801fa5e:	f8bd 0048 	ldrh.w	r0, [sp, #72]	@ 0x48
 801fa62:	bfdb      	ittet	le
 801fa64:	b2b3      	uxthle	r3, r6
 801fa66:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 801fa6a:	2301      	movgt	r3, #1
 801fa6c:	fb92 f3f3 	sdivle	r3, r2, r3
 801fa70:	f9bd 204a 	ldrsh.w	r2, [sp, #74]	@ 0x4a
 801fa74:	441d      	add	r5, r3
 801fa76:	fb92 f1f3 	sdiv	r1, r2, r3
 801fa7a:	fa1f fc81 	uxth.w	ip, r1
 801fa7e:	3d01      	subs	r5, #1
 801fa80:	fb0c 2413 	mls	r4, ip, r3, r2
 801fa84:	4661      	mov	r1, ip
 801fa86:	fb14 f406 	smulbb	r4, r4, r6
 801fa8a:	4404      	add	r4, r0
 801fa8c:	fb95 f5f3 	sdiv	r5, r5, r3
 801fa90:	b2a4      	uxth	r4, r4
 801fa92:	b131      	cbz	r1, 801faa2 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x82>
 801fa94:	9b04      	ldr	r3, [sp, #16]
 801fa96:	9900      	ldr	r1, [sp, #0]
 801fa98:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801fa9c:	ba1b      	rev	r3, r3
 801fa9e:	4419      	add	r1, r3
 801faa0:	9100      	str	r1, [sp, #0]
 801faa2:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 801faa6:	b2ad      	uxth	r5, r5
 801faa8:	f9bd 604e 	ldrsh.w	r6, [sp, #78]	@ 0x4e
 801faac:	4418      	add	r0, r3
 801faae:	f8bd 3042 	ldrh.w	r3, [sp, #66]	@ 0x42
 801fab2:	00ad      	lsls	r5, r5, #2
 801fab4:	441a      	add	r2, r3
 801fab6:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	@ 0x4c
 801faba:	f8ad 0048 	strh.w	r0, [sp, #72]	@ 0x48
 801fabe:	9301      	str	r3, [sp, #4]
 801fac0:	4b7b      	ldr	r3, [pc, #492]	@ (801fcb0 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x290>)
 801fac2:	f8ad 204a 	strh.w	r2, [sp, #74]	@ 0x4a
 801fac6:	6818      	ldr	r0, [r3, #0]
 801fac8:	6803      	ldr	r3, [r0, #0]
 801faca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801facc:	4798      	blx	r3
 801face:	4a79      	ldr	r2, [pc, #484]	@ (801fcb4 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x294>)
 801fad0:	f9bd c048 	ldrsh.w	ip, [sp, #72]	@ 0x48
 801fad4:	2c00      	cmp	r4, #0
 801fad6:	8811      	ldrh	r1, [r2, #0]
 801fad8:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	@ 0x4a
 801fadc:	fb06 f601 	mul.w	r6, r6, r1
 801fae0:	fb01 c303 	mla	r3, r1, r3, ip
 801fae4:	bf18      	it	ne
 801fae6:	f04f 0c00 	movne.w	ip, #0
 801faea:	920f      	str	r2, [sp, #60]	@ 0x3c
 801faec:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801faf0:	eb00 0386 	add.w	r3, r0, r6, lsl #2
 801faf4:	9309      	str	r3, [sp, #36]	@ 0x24
 801faf6:	f105 0304 	add.w	r3, r5, #4
 801fafa:	9305      	str	r3, [sp, #20]
 801fafc:	9b01      	ldr	r3, [sp, #4]
 801fafe:	bf08      	it	eq
 801fb00:	469c      	moveq	ip, r3
 801fb02:	2300      	movs	r3, #0
 801fb04:	fa1f fc8c 	uxth.w	ip, ip
 801fb08:	9302      	str	r3, [sp, #8]
 801fb0a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801fb0c:	4290      	cmp	r0, r2
 801fb0e:	f080 80c7 	bcs.w	801fca0 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x280>
 801fb12:	b963      	cbnz	r3, 801fb2e <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10e>
 801fb14:	9b00      	ldr	r3, [sp, #0]
 801fb16:	781a      	ldrb	r2, [r3, #0]
 801fb18:	0993      	lsrs	r3, r2, #6
 801fb1a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801fb1e:	9202      	str	r2, [sp, #8]
 801fb20:	1e5a      	subs	r2, r3, #1
 801fb22:	2a02      	cmp	r2, #2
 801fb24:	d815      	bhi.n	801fb52 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x132>
 801fb26:	9a00      	ldr	r2, [sp, #0]
 801fb28:	b29b      	uxth	r3, r3
 801fb2a:	3201      	adds	r2, #1
 801fb2c:	9200      	str	r2, [sp, #0]
 801fb2e:	b1b4      	cbz	r4, 801fb5e <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x13e>
 801fb30:	429c      	cmp	r4, r3
 801fb32:	bf91      	iteee	ls
 801fb34:	1b1c      	subls	r4, r3, r4
 801fb36:	1ae4      	subhi	r4, r4, r3
 801fb38:	4666      	movhi	r6, ip
 801fb3a:	f04f 0b00 	movhi.w	fp, #0
 801fb3e:	bf9b      	ittet	ls
 801fb40:	fa1f fb84 	uxthls.w	fp, r4
 801fb44:	f8bd 6004 	ldrhls.w	r6, [sp, #4]
 801fb48:	b2a4      	uxthhi	r4, r4
 801fb4a:	2400      	movls	r4, #0
 801fb4c:	465b      	mov	r3, fp
 801fb4e:	46b4      	mov	ip, r6
 801fb50:	e7db      	b.n	801fb0a <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xea>
 801fb52:	9a00      	ldr	r2, [sp, #0]
 801fb54:	9b00      	ldr	r3, [sp, #0]
 801fb56:	3202      	adds	r2, #2
 801fb58:	785b      	ldrb	r3, [r3, #1]
 801fb5a:	9200      	str	r2, [sp, #0]
 801fb5c:	e7e7      	b.n	801fb2e <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10e>
 801fb5e:	2204      	movs	r2, #4
 801fb60:	9905      	ldr	r1, [sp, #20]
 801fb62:	459c      	cmp	ip, r3
 801fb64:	f04f 0900 	mov.w	r9, #0
 801fb68:	4615      	mov	r5, r2
 801fb6a:	9a02      	ldr	r2, [sp, #8]
 801fb6c:	bf94      	ite	ls
 801fb6e:	eba3 0b0c 	subls.w	fp, r3, ip
 801fb72:	ebac 0603 	subhi.w	r6, ip, r3
 801fb76:	fb15 1202 	smlabb	r2, r5, r2, r1
 801fb7a:	9904      	ldr	r1, [sp, #16]
 801fb7c:	bf9c      	itt	ls
 801fb7e:	fa1f fb8b 	uxthls.w	fp, fp
 801fb82:	4626      	movls	r6, r4
 801fb84:	5889      	ldr	r1, [r1, r2]
 801fb86:	bf86      	itte	hi
 801fb88:	b2b6      	uxthhi	r6, r6
 801fb8a:	46a3      	movhi	fp, r4
 801fb8c:	f8cd c00c 	strls.w	ip, [sp, #12]
 801fb90:	ea4f 6211 	mov.w	r2, r1, lsr #24
 801fb94:	bf88      	it	hi
 801fb96:	9303      	strhi	r3, [sp, #12]
 801fb98:	0e0d      	lsrs	r5, r1, #24
 801fb9a:	9206      	str	r2, [sp, #24]
 801fb9c:	fa5f fe81 	uxtb.w	lr, r1
 801fba0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801fba2:	436a      	muls	r2, r5
 801fba4:	1c55      	adds	r5, r2, #1
 801fba6:	eb05 2522 	add.w	r5, r5, r2, asr #8
 801fbaa:	122d      	asrs	r5, r5, #8
 801fbac:	b2ea      	uxtb	r2, r5
 801fbae:	920b      	str	r2, [sp, #44]	@ 0x2c
 801fbb0:	b2aa      	uxth	r2, r5
 801fbb2:	9208      	str	r2, [sp, #32]
 801fbb4:	fb0e f205 	mul.w	r2, lr, r5
 801fbb8:	920a      	str	r2, [sp, #40]	@ 0x28
 801fbba:	f3c1 2207 	ubfx	r2, r1, #8, #8
 801fbbe:	f3c1 4107 	ubfx	r1, r1, #16, #8
 801fbc2:	fb05 f702 	mul.w	r7, r5, r2
 801fbc6:	0212      	lsls	r2, r2, #8
 801fbc8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 801fbcc:	970c      	str	r7, [sp, #48]	@ 0x30
 801fbce:	fb05 f701 	mul.w	r7, r5, r1
 801fbd2:	ea42 020e 	orr.w	r2, r2, lr
 801fbd6:	970d      	str	r7, [sp, #52]	@ 0x34
 801fbd8:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
 801fbdc:	9207      	str	r2, [sp, #28]
 801fbde:	9a03      	ldr	r2, [sp, #12]
 801fbe0:	4591      	cmp	r9, r2
 801fbe2:	d048      	beq.n	801fc76 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x256>
 801fbe4:	9a06      	ldr	r2, [sp, #24]
 801fbe6:	b14a      	cbz	r2, 801fbfc <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1dc>
 801fbe8:	2dff      	cmp	r5, #255	@ 0xff
 801fbea:	d004      	beq.n	801fbf6 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d6>
 801fbec:	f850 2029 	ldr.w	r2, [r0, r9, lsl #2]
 801fbf0:	ea5f 6e12 	movs.w	lr, r2, lsr #24
 801fbf4:	d105      	bne.n	801fc02 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1e2>
 801fbf6:	9a07      	ldr	r2, [sp, #28]
 801fbf8:	f840 2029 	str.w	r2, [r0, r9, lsl #2]
 801fbfc:	f109 0901 	add.w	r9, r9, #1
 801fc00:	e7ed      	b.n	801fbde <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1be>
 801fc02:	2d00      	cmp	r5, #0
 801fc04:	d0fa      	beq.n	801fbfc <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1dc>
 801fc06:	9908      	ldr	r1, [sp, #32]
 801fc08:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801fc0a:	fb1e f101 	smulbb	r1, lr, r1
 801fc0e:	eb07 080e 	add.w	r8, r7, lr
 801fc12:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 801fc14:	b289      	uxth	r1, r1
 801fc16:	f101 0a01 	add.w	sl, r1, #1
 801fc1a:	eb0a 2111 	add.w	r1, sl, r1, lsr #8
 801fc1e:	1209      	asrs	r1, r1, #8
 801fc20:	ebae 0a01 	sub.w	sl, lr, r1
 801fc24:	eba8 0801 	sub.w	r8, r8, r1
 801fc28:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 801fc2c:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801fc2e:	fa5f f888 	uxtb.w	r8, r8
 801fc32:	fb0a 1e0e 	mla	lr, sl, lr, r1
 801fc36:	b2d1      	uxtb	r1, r2
 801fc38:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801fc3c:	fb0a 7101 	mla	r1, sl, r1, r7
 801fc40:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801fc42:	fbbe fef8 	udiv	lr, lr, r8
 801fc46:	fbb1 f1f8 	udiv	r1, r1, r8
 801fc4a:	fb0a 7202 	mla	r2, sl, r2, r7
 801fc4e:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
 801fc52:	b2c9      	uxtb	r1, r1
 801fc54:	f40e 0e7f 	and.w	lr, lr, #16711680	@ 0xff0000
 801fc58:	ea41 6108 	orr.w	r1, r1, r8, lsl #24
 801fc5c:	fbb2 f2f8 	udiv	r2, r2, r8
 801fc60:	ea4e 0101 	orr.w	r1, lr, r1
 801fc64:	ea4f 2e02 	mov.w	lr, r2, lsl #8
 801fc68:	fa1f fe8e 	uxth.w	lr, lr
 801fc6c:	ea41 010e 	orr.w	r1, r1, lr
 801fc70:	f840 1029 	str.w	r1, [r0, r9, lsl #2]
 801fc74:	e7c2      	b.n	801fbfc <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1dc>
 801fc76:	459c      	cmp	ip, r3
 801fc78:	eb00 0089 	add.w	r0, r0, r9, lsl #2
 801fc7c:	f63f af66 	bhi.w	801fb4c <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12c>
 801fc80:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 801fc84:	f8bd 4044 	ldrh.w	r4, [sp, #68]	@ 0x44
 801fc88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801fc8a:	1ba4      	subs	r4, r4, r6
 801fc8c:	9a01      	ldr	r2, [sp, #4]
 801fc8e:	881b      	ldrh	r3, [r3, #0]
 801fc90:	b2a4      	uxth	r4, r4
 801fc92:	1a9b      	subs	r3, r3, r2
 801fc94:	2c00      	cmp	r4, #0
 801fc96:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801fc9a:	bf18      	it	ne
 801fc9c:	2600      	movne	r6, #0
 801fc9e:	e755      	b.n	801fb4c <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12c>
 801fca0:	4b03      	ldr	r3, [pc, #12]	@ (801fcb0 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x290>)
 801fca2:	6818      	ldr	r0, [r3, #0]
 801fca4:	6803      	ldr	r3, [r0, #0]
 801fca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fca8:	4798      	blx	r3
 801fcaa:	b015      	add	sp, #84	@ 0x54
 801fcac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fcb0:	20029ed8 	.word	0x20029ed8
 801fcb4:	20029ed2 	.word	0x20029ed2

0801fcb8 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 801fcb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fcbc:	461c      	mov	r4, r3
 801fcbe:	b091      	sub	sp, #68	@ 0x44
 801fcc0:	460f      	mov	r7, r1
 801fcc2:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801fcc4:	6820      	ldr	r0, [r4, #0]
 801fcc6:	6861      	ldr	r1, [r4, #4]
 801fcc8:	9207      	str	r2, [sp, #28]
 801fcca:	aa0c      	add	r2, sp, #48	@ 0x30
 801fccc:	f89d b06c 	ldrb.w	fp, [sp, #108]	@ 0x6c
 801fcd0:	c203      	stmia	r2!, {r0, r1}
 801fcd2:	6818      	ldr	r0, [r3, #0]
 801fcd4:	aa0e      	add	r2, sp, #56	@ 0x38
 801fcd6:	6859      	ldr	r1, [r3, #4]
 801fcd8:	c203      	stmia	r2!, {r0, r1}
 801fcda:	a80c      	add	r0, sp, #48	@ 0x30
 801fcdc:	f7f8 febe 	bl	8018a5c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801fce0:	4621      	mov	r1, r4
 801fce2:	a80e      	add	r0, sp, #56	@ 0x38
 801fce4:	f7f8 fee2 	bl	8018aac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801fce8:	f9bd 6034 	ldrsh.w	r6, [sp, #52]	@ 0x34
 801fcec:	f9bd 5036 	ldrsh.w	r5, [sp, #54]	@ 0x36
 801fcf0:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801fcf4:	f8bd 0038 	ldrh.w	r0, [sp, #56]	@ 0x38
 801fcf8:	bfdb      	ittet	le
 801fcfa:	b2b3      	uxthle	r3, r6
 801fcfc:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 801fd00:	2301      	movgt	r3, #1
 801fd02:	fb92 f3f3 	sdivle	r3, r2, r3
 801fd06:	f9bd 203a 	ldrsh.w	r2, [sp, #58]	@ 0x3a
 801fd0a:	441d      	add	r5, r3
 801fd0c:	fb92 f1f3 	sdiv	r1, r2, r3
 801fd10:	fa1f fc81 	uxth.w	ip, r1
 801fd14:	3d01      	subs	r5, #1
 801fd16:	fb0c 2413 	mls	r4, ip, r3, r2
 801fd1a:	4661      	mov	r1, ip
 801fd1c:	fb14 f406 	smulbb	r4, r4, r6
 801fd20:	4404      	add	r4, r0
 801fd22:	fb95 f5f3 	sdiv	r5, r5, r3
 801fd26:	b2a4      	uxth	r4, r4
 801fd28:	b121      	cbz	r1, 801fd34 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x7c>
 801fd2a:	9b07      	ldr	r3, [sp, #28]
 801fd2c:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801fd30:	ba1b      	rev	r3, r3
 801fd32:	441f      	add	r7, r3
 801fd34:	f8bd 3030 	ldrh.w	r3, [sp, #48]	@ 0x30
 801fd38:	b2ad      	uxth	r5, r5
 801fd3a:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	@ 0x3e
 801fd3e:	4418      	add	r0, r3
 801fd40:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 801fd44:	00ad      	lsls	r5, r5, #2
 801fd46:	441a      	add	r2, r3
 801fd48:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 801fd4c:	f8ad 0038 	strh.w	r0, [sp, #56]	@ 0x38
 801fd50:	9303      	str	r3, [sp, #12]
 801fd52:	4b77      	ldr	r3, [pc, #476]	@ (801ff30 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x278>)
 801fd54:	f8ad 203a 	strh.w	r2, [sp, #58]	@ 0x3a
 801fd58:	6818      	ldr	r0, [r3, #0]
 801fd5a:	6803      	ldr	r3, [r0, #0]
 801fd5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fd5e:	4798      	blx	r3
 801fd60:	4a74      	ldr	r2, [pc, #464]	@ (801ff34 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27c>)
 801fd62:	f9bd c038 	ldrsh.w	ip, [sp, #56]	@ 0x38
 801fd66:	2c00      	cmp	r4, #0
 801fd68:	8811      	ldrh	r1, [r2, #0]
 801fd6a:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 801fd6e:	fb06 f601 	mul.w	r6, r6, r1
 801fd72:	fb01 c303 	mla	r3, r1, r3, ip
 801fd76:	bf18      	it	ne
 801fd78:	f04f 0c00 	movne.w	ip, #0
 801fd7c:	920b      	str	r2, [sp, #44]	@ 0x2c
 801fd7e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801fd82:	eb00 0386 	add.w	r3, r0, r6, lsl #2
 801fd86:	930a      	str	r3, [sp, #40]	@ 0x28
 801fd88:	f105 0304 	add.w	r3, r5, #4
 801fd8c:	9308      	str	r3, [sp, #32]
 801fd8e:	9b03      	ldr	r3, [sp, #12]
 801fd90:	bf08      	it	eq
 801fd92:	469c      	moveq	ip, r3
 801fd94:	ea4f 630b 	mov.w	r3, fp, lsl #24
 801fd98:	fa1f fc8c 	uxth.w	ip, ip
 801fd9c:	9309      	str	r3, [sp, #36]	@ 0x24
 801fd9e:	2300      	movs	r3, #0
 801fda0:	9304      	str	r3, [sp, #16]
 801fda2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801fda4:	4290      	cmp	r0, r2
 801fda6:	f080 80bb 	bcs.w	801ff20 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x268>
 801fdaa:	b95b      	cbnz	r3, 801fdc4 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x10c>
 801fdac:	783a      	ldrb	r2, [r7, #0]
 801fdae:	0993      	lsrs	r3, r2, #6
 801fdb0:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801fdb4:	9204      	str	r2, [sp, #16]
 801fdb6:	1e5a      	subs	r2, r3, #1
 801fdb8:	2a02      	cmp	r2, #2
 801fdba:	bf8d      	iteet	hi
 801fdbc:	787b      	ldrbhi	r3, [r7, #1]
 801fdbe:	3701      	addls	r7, #1
 801fdc0:	b29b      	uxthls	r3, r3
 801fdc2:	3702      	addhi	r7, #2
 801fdc4:	b184      	cbz	r4, 801fde8 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x130>
 801fdc6:	429c      	cmp	r4, r3
 801fdc8:	d907      	bls.n	801fdda <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x122>
 801fdca:	1ae4      	subs	r4, r4, r3
 801fdcc:	4665      	mov	r5, ip
 801fdce:	2300      	movs	r3, #0
 801fdd0:	b2a4      	uxth	r4, r4
 801fdd2:	9302      	str	r3, [sp, #8]
 801fdd4:	9b02      	ldr	r3, [sp, #8]
 801fdd6:	46ac      	mov	ip, r5
 801fdd8:	e7e3      	b.n	801fda2 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xea>
 801fdda:	1b1c      	subs	r4, r3, r4
 801fddc:	f8bd 500c 	ldrh.w	r5, [sp, #12]
 801fde0:	b2a3      	uxth	r3, r4
 801fde2:	2400      	movs	r4, #0
 801fde4:	9302      	str	r3, [sp, #8]
 801fde6:	e7f5      	b.n	801fdd4 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11c>
 801fde8:	2203      	movs	r2, #3
 801fdea:	9908      	ldr	r1, [sp, #32]
 801fdec:	459c      	cmp	ip, r3
 801fdee:	4615      	mov	r5, r2
 801fdf0:	9a04      	ldr	r2, [sp, #16]
 801fdf2:	fb15 1202 	smlabb	r2, r5, r2, r1
 801fdf6:	9907      	ldr	r1, [sp, #28]
 801fdf8:	bf8c      	ite	hi
 801fdfa:	ebac 0503 	subhi.w	r5, ip, r3
 801fdfe:	4625      	movls	r5, r4
 801fe00:	eb01 0a02 	add.w	sl, r1, r2
 801fe04:	bf95      	itete	ls
 801fe06:	eba3 020c 	subls.w	r2, r3, ip
 801fe0a:	b2ad      	uxthhi	r5, r5
 801fe0c:	b292      	uxthls	r2, r2
 801fe0e:	e9cd 3401 	strdhi	r3, r4, [sp, #4]
 801fe12:	bf98      	it	ls
 801fe14:	e9cd c201 	strdls	ip, r2, [sp, #4]
 801fe18:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801fe1c:	d113      	bne.n	801fe46 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x18e>
 801fe1e:	9901      	ldr	r1, [sp, #4]
 801fe20:	4606      	mov	r6, r0
 801fe22:	b1a9      	cbz	r1, 801fe50 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x198>
 801fe24:	f89a 2000 	ldrb.w	r2, [sl]
 801fe28:	3901      	subs	r1, #1
 801fe2a:	f89a e002 	ldrb.w	lr, [sl, #2]
 801fe2e:	f042 427f 	orr.w	r2, r2, #4278190080	@ 0xff000000
 801fe32:	b289      	uxth	r1, r1
 801fe34:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 801fe38:	f89a e001 	ldrb.w	lr, [sl, #1]
 801fe3c:	ea42 220e 	orr.w	r2, r2, lr, lsl #8
 801fe40:	f846 2b04 	str.w	r2, [r6], #4
 801fe44:	e7ed      	b.n	801fe22 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x16a>
 801fe46:	9a01      	ldr	r2, [sp, #4]
 801fe48:	9000      	str	r0, [sp, #0]
 801fe4a:	9205      	str	r2, [sp, #20]
 801fe4c:	9a05      	ldr	r2, [sp, #20]
 801fe4e:	b9a2      	cbnz	r2, 801fe7a <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1c2>
 801fe50:	9a01      	ldr	r2, [sp, #4]
 801fe52:	459c      	cmp	ip, r3
 801fe54:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 801fe58:	d8bc      	bhi.n	801fdd4 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11c>
 801fe5a:	f8bd 500c 	ldrh.w	r5, [sp, #12]
 801fe5e:	f8bd 4034 	ldrh.w	r4, [sp, #52]	@ 0x34
 801fe62:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801fe64:	1b64      	subs	r4, r4, r5
 801fe66:	9a03      	ldr	r2, [sp, #12]
 801fe68:	881b      	ldrh	r3, [r3, #0]
 801fe6a:	b2a4      	uxth	r4, r4
 801fe6c:	1a9b      	subs	r3, r3, r2
 801fe6e:	2c00      	cmp	r4, #0
 801fe70:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801fe74:	bf18      	it	ne
 801fe76:	2500      	movne	r5, #0
 801fe78:	e7ac      	b.n	801fdd4 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11c>
 801fe7a:	9a00      	ldr	r2, [sp, #0]
 801fe7c:	f89a 1001 	ldrb.w	r1, [sl, #1]
 801fe80:	6812      	ldr	r2, [r2, #0]
 801fe82:	9106      	str	r1, [sp, #24]
 801fe84:	ea5f 6912 	movs.w	r9, r2, lsr #24
 801fe88:	f89a 6000 	ldrb.w	r6, [sl]
 801fe8c:	f89a 1002 	ldrb.w	r1, [sl, #2]
 801fe90:	d110      	bne.n	801feb4 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1fc>
 801fe92:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801fe94:	4316      	orrs	r6, r2
 801fe96:	9a06      	ldr	r2, [sp, #24]
 801fe98:	ea46 4601 	orr.w	r6, r6, r1, lsl #16
 801fe9c:	ea46 2602 	orr.w	r6, r6, r2, lsl #8
 801fea0:	9a00      	ldr	r2, [sp, #0]
 801fea2:	6016      	str	r6, [r2, #0]
 801fea4:	9a00      	ldr	r2, [sp, #0]
 801fea6:	3204      	adds	r2, #4
 801fea8:	9200      	str	r2, [sp, #0]
 801feaa:	9a05      	ldr	r2, [sp, #20]
 801feac:	3a01      	subs	r2, #1
 801feae:	b292      	uxth	r2, r2
 801feb0:	9205      	str	r2, [sp, #20]
 801feb2:	e7cb      	b.n	801fe4c <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x194>
 801feb4:	fb1b f101 	smulbb	r1, fp, r1
 801feb8:	fb0b f809 	mul.w	r8, fp, r9
 801febc:	fb16 f60b 	smulbb	r6, r6, fp
 801fec0:	f108 0e01 	add.w	lr, r8, #1
 801fec4:	eb0e 2e28 	add.w	lr, lr, r8, asr #8
 801fec8:	eb0b 0809 	add.w	r8, fp, r9
 801fecc:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801fed0:	eba9 090e 	sub.w	r9, r9, lr
 801fed4:	eba8 080e 	sub.w	r8, r8, lr
 801fed8:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 801fedc:	fa5f f888 	uxtb.w	r8, r8
 801fee0:	fb09 1e0e 	mla	lr, r9, lr, r1
 801fee4:	b2d1      	uxtb	r1, r2
 801fee6:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801feea:	fb09 6601 	mla	r6, r9, r1, r6
 801feee:	9906      	ldr	r1, [sp, #24]
 801fef0:	fbbe fef8 	udiv	lr, lr, r8
 801fef4:	fbb6 f6f8 	udiv	r6, r6, r8
 801fef8:	fb1b f101 	smulbb	r1, fp, r1
 801fefc:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
 801ff00:	b2f6      	uxtb	r6, r6
 801ff02:	fb09 1202 	mla	r2, r9, r2, r1
 801ff06:	f40e 0e7f 	and.w	lr, lr, #16711680	@ 0xff0000
 801ff0a:	ea46 6608 	orr.w	r6, r6, r8, lsl #24
 801ff0e:	fbb2 f2f8 	udiv	r2, r2, r8
 801ff12:	ea4e 0e06 	orr.w	lr, lr, r6
 801ff16:	0216      	lsls	r6, r2, #8
 801ff18:	b2b6      	uxth	r6, r6
 801ff1a:	ea4e 0606 	orr.w	r6, lr, r6
 801ff1e:	e7bf      	b.n	801fea0 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1e8>
 801ff20:	4b03      	ldr	r3, [pc, #12]	@ (801ff30 <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x278>)
 801ff22:	6818      	ldr	r0, [r3, #0]
 801ff24:	6803      	ldr	r3, [r0, #0]
 801ff26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ff28:	4798      	blx	r3
 801ff2a:	b011      	add	sp, #68	@ 0x44
 801ff2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ff30:	20029ed8 	.word	0x20029ed8
 801ff34:	20029ed2 	.word	0x20029ed2

0801ff38 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 801ff38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ff3c:	b09d      	sub	sp, #116	@ 0x74
 801ff3e:	461c      	mov	r4, r3
 801ff40:	4681      	mov	r9, r0
 801ff42:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801ff44:	6820      	ldr	r0, [r4, #0]
 801ff46:	e9cd 1212 	strd	r1, r2, [sp, #72]	@ 0x48
 801ff4a:	f89d 209c 	ldrb.w	r2, [sp, #156]	@ 0x9c
 801ff4e:	6861      	ldr	r1, [r4, #4]
 801ff50:	9202      	str	r2, [sp, #8]
 801ff52:	aa18      	add	r2, sp, #96	@ 0x60
 801ff54:	c203      	stmia	r2!, {r0, r1}
 801ff56:	6818      	ldr	r0, [r3, #0]
 801ff58:	aa1a      	add	r2, sp, #104	@ 0x68
 801ff5a:	6859      	ldr	r1, [r3, #4]
 801ff5c:	c203      	stmia	r2!, {r0, r1}
 801ff5e:	a818      	add	r0, sp, #96	@ 0x60
 801ff60:	f7f8 fd7c 	bl	8018a5c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ff64:	4621      	mov	r1, r4
 801ff66:	a81a      	add	r0, sp, #104	@ 0x68
 801ff68:	f7f8 fda0 	bl	8018aac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ff6c:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 801ff70:	f9bd 5066 	ldrsh.w	r5, [sp, #102]	@ 0x66
 801ff74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801ff78:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	@ 0x6e
 801ff7c:	bfdb      	ittet	le
 801ff7e:	b29a      	uxthle	r2, r3
 801ff80:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801ff84:	2201      	movgt	r2, #1
 801ff86:	fb91 f2f2 	sdivle	r2, r1, r2
 801ff8a:	9205      	str	r2, [sp, #20]
 801ff8c:	9805      	ldr	r0, [sp, #20]
 801ff8e:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	@ 0x6a
 801ff92:	9905      	ldr	r1, [sp, #20]
 801ff94:	fb92 f0f0 	sdiv	r0, r2, r0
 801ff98:	b280      	uxth	r0, r0
 801ff9a:	440d      	add	r5, r1
 801ff9c:	900f      	str	r0, [sp, #60]	@ 0x3c
 801ff9e:	3d01      	subs	r5, #1
 801ffa0:	9805      	ldr	r0, [sp, #20]
 801ffa2:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801ffa4:	fb04 2410 	mls	r4, r4, r0, r2
 801ffa8:	fb95 f5f1 	sdiv	r5, r5, r1
 801ffac:	fb14 f403 	smulbb	r4, r4, r3
 801ffb0:	f8bd 1068 	ldrh.w	r1, [sp, #104]	@ 0x68
 801ffb4:	f8bd 3060 	ldrh.w	r3, [sp, #96]	@ 0x60
 801ffb8:	3501      	adds	r5, #1
 801ffba:	440c      	add	r4, r1
 801ffbc:	4419      	add	r1, r3
 801ffbe:	f8bd 3062 	ldrh.w	r3, [sp, #98]	@ 0x62
 801ffc2:	b2ad      	uxth	r5, r5
 801ffc4:	441a      	add	r2, r3
 801ffc6:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
 801ffca:	f8ad 1068 	strh.w	r1, [sp, #104]	@ 0x68
 801ffce:	b2a4      	uxth	r4, r4
 801ffd0:	9306      	str	r3, [sp, #24]
 801ffd2:	4ba3      	ldr	r3, [pc, #652]	@ (8020260 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x328>)
 801ffd4:	f8ad 206a 	strh.w	r2, [sp, #106]	@ 0x6a
 801ffd8:	6818      	ldr	r0, [r3, #0]
 801ffda:	6803      	ldr	r3, [r0, #0]
 801ffdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ffde:	4798      	blx	r3
 801ffe0:	4ba0      	ldr	r3, [pc, #640]	@ (8020264 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x32c>)
 801ffe2:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	@ 0x6a
 801ffe6:	2c00      	cmp	r4, #0
 801ffe8:	8819      	ldrh	r1, [r3, #0]
 801ffea:	f9bd 7068 	ldrsh.w	r7, [sp, #104]	@ 0x68
 801ffee:	fb06 f601 	mul.w	r6, r6, r1
 801fff2:	fb01 7202 	mla	r2, r1, r2, r7
 801fff6:	9316      	str	r3, [sp, #88]	@ 0x58
 801fff8:	eb00 0b82 	add.w	fp, r0, r2, lsl #2
 801fffc:	4b9a      	ldr	r3, [pc, #616]	@ (8020268 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x330>)
 801fffe:	bf18      	it	ne
 8020000:	2000      	movne	r0, #0
 8020002:	eb0b 0286 	add.w	r2, fp, r6, lsl #2
 8020006:	eba3 0309 	sub.w	r3, r3, r9
 802000a:	920c      	str	r2, [sp, #48]	@ 0x30
 802000c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802000e:	9317      	str	r3, [sp, #92]	@ 0x5c
 8020010:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8020014:	f105 0204 	add.w	r2, r5, #4
 8020018:	9210      	str	r2, [sp, #64]	@ 0x40
 802001a:	9a06      	ldr	r2, [sp, #24]
 802001c:	bf08      	it	eq
 802001e:	4610      	moveq	r0, r2
 8020020:	9a02      	ldr	r2, [sp, #8]
 8020022:	0612      	lsls	r2, r2, #24
 8020024:	b280      	uxth	r0, r0
 8020026:	9214      	str	r2, [sp, #80]	@ 0x50
 8020028:	2200      	movs	r2, #0
 802002a:	920d      	str	r2, [sp, #52]	@ 0x34
 802002c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802002e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020030:	fa12 f383 	uxtah	r3, r2, r3
 8020034:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8020036:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802003a:	3304      	adds	r3, #4
 802003c:	930a      	str	r3, [sp, #40]	@ 0x28
 802003e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020040:	459b      	cmp	fp, r3
 8020042:	f080 8187 	bcs.w	8020354 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x41c>
 8020046:	f8bd 3064 	ldrh.w	r3, [sp, #100]	@ 0x64
 802004a:	2700      	movs	r7, #0
 802004c:	9a05      	ldr	r2, [sp, #20]
 802004e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8020050:	fbb4 f3f3 	udiv	r3, r4, r3
 8020054:	1ad3      	subs	r3, r2, r3
 8020056:	7809      	ldrb	r1, [r1, #0]
 8020058:	b29b      	uxth	r3, r3
 802005a:	910e      	str	r1, [sp, #56]	@ 0x38
 802005c:	3101      	adds	r1, #1
 802005e:	9315      	str	r3, [sp, #84]	@ 0x54
 8020060:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020062:	9107      	str	r1, [sp, #28]
 8020064:	785a      	ldrb	r2, [r3, #1]
 8020066:	789b      	ldrb	r3, [r3, #2]
 8020068:	021b      	lsls	r3, r3, #8
 802006a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802006e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020070:	78d2      	ldrb	r2, [r2, #3]
 8020072:	4313      	orrs	r3, r2
 8020074:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8020076:	441a      	add	r2, r3
 8020078:	1c51      	adds	r1, r2, #1
 802007a:	7852      	ldrb	r2, [r2, #1]
 802007c:	9104      	str	r1, [sp, #16]
 802007e:	0212      	lsls	r2, r2, #8
 8020080:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8020082:	f402 72ff 	and.w	r2, r2, #510	@ 0x1fe
 8020086:	5ccb      	ldrb	r3, [r1, r3]
 8020088:	431a      	orrs	r2, r3
 802008a:	b293      	uxth	r3, r2
 802008c:	f889 2804 	strb.w	r2, [r9, #2052]	@ 0x804
 8020090:	930b      	str	r3, [sp, #44]	@ 0x2c
 8020092:	2300      	movs	r3, #0
 8020094:	9309      	str	r3, [sp, #36]	@ 0x24
 8020096:	2301      	movs	r3, #1
 8020098:	9300      	str	r3, [sp, #0]
 802009a:	9303      	str	r3, [sp, #12]
 802009c:	469c      	mov	ip, r3
 802009e:	2c00      	cmp	r4, #0
 80200a0:	d078      	beq.n	8020194 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x25c>
 80200a2:	42a3      	cmp	r3, r4
 80200a4:	d26a      	bcs.n	802017c <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x244>
 80200a6:	1ae4      	subs	r4, r4, r3
 80200a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80200aa:	4606      	mov	r6, r0
 80200ac:	455b      	cmp	r3, fp
 80200ae:	b2a4      	uxth	r4, r4
 80200b0:	d802      	bhi.n	80200b8 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x180>
 80200b2:	e06d      	b.n	8020190 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x258>
 80200b4:	2b00      	cmp	r3, #0
 80200b6:	d15c      	bne.n	8020172 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x23a>
 80200b8:	9b04      	ldr	r3, [sp, #16]
 80200ba:	9a03      	ldr	r2, [sp, #12]
 80200bc:	785b      	ldrb	r3, [r3, #1]
 80200be:	f1c2 0207 	rsb	r2, r2, #7
 80200c2:	9903      	ldr	r1, [sp, #12]
 80200c4:	4093      	lsls	r3, r2
 80200c6:	005b      	lsls	r3, r3, #1
 80200c8:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 80200cc:	9b04      	ldr	r3, [sp, #16]
 80200ce:	781b      	ldrb	r3, [r3, #0]
 80200d0:	410b      	asrs	r3, r1
 80200d2:	b2db      	uxtb	r3, r3
 80200d4:	4313      	orrs	r3, r2
 80200d6:	9a03      	ldr	r2, [sp, #12]
 80200d8:	3201      	adds	r2, #1
 80200da:	b299      	uxth	r1, r3
 80200dc:	b2d2      	uxtb	r2, r2
 80200de:	2a08      	cmp	r2, #8
 80200e0:	9203      	str	r2, [sp, #12]
 80200e2:	9a04      	ldr	r2, [sp, #16]
 80200e4:	bf09      	itett	eq
 80200e6:	3202      	addeq	r2, #2
 80200e8:	3201      	addne	r2, #1
 80200ea:	9204      	streq	r2, [sp, #16]
 80200ec:	2200      	moveq	r2, #0
 80200ee:	bf14      	ite	ne
 80200f0:	9204      	strne	r2, [sp, #16]
 80200f2:	9203      	streq	r2, [sp, #12]
 80200f4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80200f6:	428a      	cmp	r2, r1
 80200f8:	d309      	bcc.n	802010e <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1d6>
 80200fa:	f889 3804 	strb.w	r3, [r9, #2052]	@ 0x804
 80200fe:	2301      	movs	r3, #1
 8020100:	9a07      	ldr	r2, [sp, #28]
 8020102:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 8020106:	d30e      	bcc.n	8020126 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1ee>
 8020108:	9300      	str	r3, [sp, #0]
 802010a:	2200      	movs	r2, #0
 802010c:	e032      	b.n	8020174 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x23c>
 802010e:	9b07      	ldr	r3, [sp, #28]
 8020110:	428b      	cmp	r3, r1
 8020112:	d818      	bhi.n	8020146 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x20e>
 8020114:	9b00      	ldr	r3, [sp, #0]
 8020116:	f899 2804 	ldrb.w	r2, [r9, #2052]	@ 0x804
 802011a:	444b      	add	r3, r9
 802011c:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
 8020120:	9b00      	ldr	r3, [sp, #0]
 8020122:	3301      	adds	r3, #1
 8020124:	b29b      	uxth	r3, r3
 8020126:	9a07      	ldr	r2, [sp, #28]
 8020128:	f899 0804 	ldrb.w	r0, [r9, #2052]	@ 0x804
 802012c:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8020130:	7110      	strb	r0, [r2, #4]
 8020132:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8020134:	80d0      	strh	r0, [r2, #6]
 8020136:	9800      	ldr	r0, [sp, #0]
 8020138:	3001      	adds	r0, #1
 802013a:	7150      	strb	r0, [r2, #5]
 802013c:	9a07      	ldr	r2, [sp, #28]
 802013e:	3201      	adds	r2, #1
 8020140:	b292      	uxth	r2, r2
 8020142:	9207      	str	r2, [sp, #28]
 8020144:	e7e0      	b.n	8020108 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1d0>
 8020146:	eb09 0381 	add.w	r3, r9, r1, lsl #2
 802014a:	460a      	mov	r2, r1
 802014c:	795b      	ldrb	r3, [r3, #5]
 802014e:	f603 0004 	addw	r0, r3, #2052	@ 0x804
 8020152:	4448      	add	r0, r9
 8020154:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 8020156:	4405      	add	r5, r0
 8020158:	2d00      	cmp	r5, #0
 802015a:	dd06      	ble.n	802016a <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x232>
 802015c:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8020160:	7915      	ldrb	r5, [r2, #4]
 8020162:	f800 5d01 	strb.w	r5, [r0, #-1]!
 8020166:	88d2      	ldrh	r2, [r2, #6]
 8020168:	e7f4      	b.n	8020154 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x21c>
 802016a:	f889 2804 	strb.w	r2, [r9, #2052]	@ 0x804
 802016e:	b29b      	uxth	r3, r3
 8020170:	e7c6      	b.n	8020100 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1c8>
 8020172:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020174:	4630      	mov	r0, r6
 8020176:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020178:	4617      	mov	r7, r2
 802017a:	e78f      	b.n	802009c <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x164>
 802017c:	1b1b      	subs	r3, r3, r4
 802017e:	4427      	add	r7, r4
 8020180:	f8bd 6018 	ldrh.w	r6, [sp, #24]
 8020184:	b29b      	uxth	r3, r3
 8020186:	b2ba      	uxth	r2, r7
 8020188:	2400      	movs	r4, #0
 802018a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 802018c:	458b      	cmp	fp, r1
 802018e:	d391      	bcc.n	80200b4 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x17c>
 8020190:	4630      	mov	r0, r6
 8020192:	e754      	b.n	802003e <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x106>
 8020194:	4283      	cmp	r3, r0
 8020196:	9a02      	ldr	r2, [sp, #8]
 8020198:	bf29      	itett	cs
 802019a:	1a1b      	subcs	r3, r3, r0
 802019c:	eba0 060c 	subcc.w	r6, r0, ip
 80201a0:	9008      	strcs	r0, [sp, #32]
 80201a2:	4626      	movcs	r6, r4
 80201a4:	bf2f      	iteee	cs
 80201a6:	b29b      	uxthcs	r3, r3
 80201a8:	f8cd c020 	strcc.w	ip, [sp, #32]
 80201ac:	b2b6      	uxthcc	r6, r6
 80201ae:	4623      	movcc	r3, r4
 80201b0:	2aff      	cmp	r2, #255	@ 0xff
 80201b2:	d02c      	beq.n	802020e <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2d6>
 80201b4:	2200      	movs	r2, #0
 80201b6:	9201      	str	r2, [sp, #4]
 80201b8:	9a01      	ldr	r2, [sp, #4]
 80201ba:	9908      	ldr	r1, [sp, #32]
 80201bc:	9c01      	ldr	r4, [sp, #4]
 80201be:	18ba      	adds	r2, r7, r2
 80201c0:	42a1      	cmp	r1, r4
 80201c2:	b292      	uxth	r2, r2
 80201c4:	d152      	bne.n	802026c <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x334>
 80201c6:	4584      	cmp	ip, r0
 80201c8:	eb0b 0b81 	add.w	fp, fp, r1, lsl #2
 80201cc:	d3dc      	bcc.n	8020188 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x250>
 80201ce:	9916      	ldr	r1, [sp, #88]	@ 0x58
 80201d0:	9806      	ldr	r0, [sp, #24]
 80201d2:	8809      	ldrh	r1, [r1, #0]
 80201d4:	1a09      	subs	r1, r1, r0
 80201d6:	eb0b 0b81 	add.w	fp, fp, r1, lsl #2
 80201da:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80201dc:	3101      	adds	r1, #1
 80201de:	9109      	str	r1, [sp, #36]	@ 0x24
 80201e0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80201e2:	9915      	ldr	r1, [sp, #84]	@ 0x54
 80201e4:	4281      	cmp	r1, r0
 80201e6:	f040 80ab 	bne.w	8020340 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x408>
 80201ea:	f8bd 4068 	ldrh.w	r4, [sp, #104]	@ 0x68
 80201ee:	f8bd c060 	ldrh.w	ip, [sp, #96]	@ 0x60
 80201f2:	9b06      	ldr	r3, [sp, #24]
 80201f4:	eba4 040c 	sub.w	r4, r4, ip
 80201f8:	b2a4      	uxth	r4, r4
 80201fa:	2c00      	cmp	r4, #0
 80201fc:	bf08      	it	eq
 80201fe:	4618      	moveq	r0, r3
 8020200:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020202:	bf18      	it	ne
 8020204:	2000      	movne	r0, #0
 8020206:	3301      	adds	r3, #1
 8020208:	b280      	uxth	r0, r0
 802020a:	930d      	str	r3, [sp, #52]	@ 0x34
 802020c:	e70e      	b.n	802002c <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xf4>
 802020e:	9a08      	ldr	r2, [sp, #32]
 8020210:	465d      	mov	r5, fp
 8020212:	18ba      	adds	r2, r7, r2
 8020214:	b292      	uxth	r2, r2
 8020216:	4297      	cmp	r7, r2
 8020218:	f000 8090 	beq.w	802033c <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x404>
 802021c:	f107 0e01 	add.w	lr, r7, #1
 8020220:	444f      	add	r7, r9
 8020222:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8020224:	f897 1804 	ldrb.w	r1, [r7, #2052]	@ 0x804
 8020228:	f834 4011 	ldrh.w	r4, [r4, r1, lsl #1]
 802022c:	10e1      	asrs	r1, r4, #3
 802022e:	1227      	asrs	r7, r4, #8
 8020230:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8020234:	00e4      	lsls	r4, r4, #3
 8020236:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 802023a:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 802023e:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 8020242:	b2e4      	uxtb	r4, r4
 8020244:	0209      	lsls	r1, r1, #8
 8020246:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 802024a:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 802024e:	fa1f f78e 	uxth.w	r7, lr
 8020252:	4321      	orrs	r1, r4
 8020254:	f041 417f 	orr.w	r1, r1, #4278190080	@ 0xff000000
 8020258:	f845 1b04 	str.w	r1, [r5], #4
 802025c:	e7db      	b.n	8020216 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2de>
 802025e:	bf00      	nop
 8020260:	20029ed8 	.word	0x20029ed8
 8020264:	20029ed2 	.word	0x20029ed2
 8020268:	fffff7fb 	.word	0xfffff7fb
 802026c:	444a      	add	r2, r9
 802026e:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8020270:	f892 2804 	ldrb.w	r2, [r2, #2052]	@ 0x804
 8020274:	f831 8012 	ldrh.w	r8, [r1, r2, lsl #1]
 8020278:	9a01      	ldr	r2, [sp, #4]
 802027a:	ea4f 0ec8 	mov.w	lr, r8, lsl #3
 802027e:	f85b 1022 	ldr.w	r1, [fp, r2, lsl #2]
 8020282:	ea4f 02e8 	mov.w	r2, r8, asr #3
 8020286:	ea4f 2528 	mov.w	r5, r8, asr #8
 802028a:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 802028e:	fa5f fe8e 	uxtb.w	lr, lr
 8020292:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8020296:	ea5f 6a11 	movs.w	sl, r1, lsr #24
 802029a:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 802029e:	ea4e 1e5e 	orr.w	lr, lr, lr, lsr #5
 80202a2:	9211      	str	r2, [sp, #68]	@ 0x44
 80202a4:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 80202a8:	d10c      	bne.n	80202c4 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x38c>
 80202aa:	0212      	lsls	r2, r2, #8
 80202ac:	9914      	ldr	r1, [sp, #80]	@ 0x50
 80202ae:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 80202b2:	ea42 020e 	orr.w	r2, r2, lr
 80202b6:	430a      	orrs	r2, r1
 80202b8:	9901      	ldr	r1, [sp, #4]
 80202ba:	f84b 2021 	str.w	r2, [fp, r1, lsl #2]
 80202be:	9a01      	ldr	r2, [sp, #4]
 80202c0:	3201      	adds	r2, #1
 80202c2:	e778      	b.n	80201b6 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x27e>
 80202c4:	9c02      	ldr	r4, [sp, #8]
 80202c6:	9a02      	ldr	r2, [sp, #8]
 80202c8:	fb04 f80a 	mul.w	r8, r4, sl
 80202cc:	fb12 f505 	smulbb	r5, r2, r5
 80202d0:	fb12 fe0e 	smulbb	lr, r2, lr
 80202d4:	f108 0401 	add.w	r4, r8, #1
 80202d8:	eb04 2428 	add.w	r4, r4, r8, asr #8
 80202dc:	eb02 080a 	add.w	r8, r2, sl
 80202e0:	1224      	asrs	r4, r4, #8
 80202e2:	ebaa 0a04 	sub.w	sl, sl, r4
 80202e6:	eba8 0804 	sub.w	r8, r8, r4
 80202ea:	f3c1 4407 	ubfx	r4, r1, #16, #8
 80202ee:	fa5f f888 	uxtb.w	r8, r8
 80202f2:	fb0a 5504 	mla	r5, sl, r4, r5
 80202f6:	b2cc      	uxtb	r4, r1
 80202f8:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80202fc:	fb0a ee04 	mla	lr, sl, r4, lr
 8020300:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8020302:	fbb5 f5f8 	udiv	r5, r5, r8
 8020306:	fb12 f204 	smulbb	r2, r2, r4
 802030a:	042d      	lsls	r5, r5, #16
 802030c:	fbbe fef8 	udiv	lr, lr, r8
 8020310:	fb0a 2101 	mla	r1, sl, r1, r2
 8020314:	fa5f fe8e 	uxtb.w	lr, lr
 8020318:	f405 057f 	and.w	r5, r5, #16711680	@ 0xff0000
 802031c:	9a01      	ldr	r2, [sp, #4]
 802031e:	ea4e 6e08 	orr.w	lr, lr, r8, lsl #24
 8020322:	fbb1 f1f8 	udiv	r1, r1, r8
 8020326:	ea45 050e 	orr.w	r5, r5, lr
 802032a:	ea4f 2e01 	mov.w	lr, r1, lsl #8
 802032e:	fa1f fe8e 	uxth.w	lr, lr
 8020332:	ea45 050e 	orr.w	r5, r5, lr
 8020336:	f84b 5022 	str.w	r5, [fp, r2, lsl #2]
 802033a:	e7c0      	b.n	80202be <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x386>
 802033c:	9908      	ldr	r1, [sp, #32]
 802033e:	e742      	b.n	80201c6 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x28e>
 8020340:	f8bd 6018 	ldrh.w	r6, [sp, #24]
 8020344:	f8bd 4064 	ldrh.w	r4, [sp, #100]	@ 0x64
 8020348:	1ba4      	subs	r4, r4, r6
 802034a:	b2a4      	uxth	r4, r4
 802034c:	2c00      	cmp	r4, #0
 802034e:	bf18      	it	ne
 8020350:	2600      	movne	r6, #0
 8020352:	e71a      	b.n	802018a <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x252>
 8020354:	4b03      	ldr	r3, [pc, #12]	@ (8020364 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x42c>)
 8020356:	6818      	ldr	r0, [r3, #0]
 8020358:	6803      	ldr	r3, [r0, #0]
 802035a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802035c:	4798      	blx	r3
 802035e:	b01d      	add	sp, #116	@ 0x74
 8020360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020364:	20029ed8 	.word	0x20029ed8

08020368 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 8020368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802036c:	b09f      	sub	sp, #124	@ 0x7c
 802036e:	461c      	mov	r4, r3
 8020370:	4680      	mov	r8, r0
 8020372:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8020374:	6820      	ldr	r0, [r4, #0]
 8020376:	e9cd 1211 	strd	r1, r2, [sp, #68]	@ 0x44
 802037a:	f89d 20a4 	ldrb.w	r2, [sp, #164]	@ 0xa4
 802037e:	6861      	ldr	r1, [r4, #4]
 8020380:	9215      	str	r2, [sp, #84]	@ 0x54
 8020382:	aa1a      	add	r2, sp, #104	@ 0x68
 8020384:	c203      	stmia	r2!, {r0, r1}
 8020386:	6818      	ldr	r0, [r3, #0]
 8020388:	aa1c      	add	r2, sp, #112	@ 0x70
 802038a:	6859      	ldr	r1, [r3, #4]
 802038c:	c203      	stmia	r2!, {r0, r1}
 802038e:	a81a      	add	r0, sp, #104	@ 0x68
 8020390:	f7f8 fb64 	bl	8018a5c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020394:	4621      	mov	r1, r4
 8020396:	a81c      	add	r0, sp, #112	@ 0x70
 8020398:	f7f8 fb88 	bl	8018aac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802039c:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
 80203a0:	f9bd 506e 	ldrsh.w	r5, [sp, #110]	@ 0x6e
 80203a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80203a8:	f9bd 6076 	ldrsh.w	r6, [sp, #118]	@ 0x76
 80203ac:	bfdb      	ittet	le
 80203ae:	b29a      	uxthle	r2, r3
 80203b0:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 80203b4:	2201      	movgt	r2, #1
 80203b6:	fb91 f2f2 	sdivle	r2, r1, r2
 80203ba:	9204      	str	r2, [sp, #16]
 80203bc:	9804      	ldr	r0, [sp, #16]
 80203be:	f9bd 2072 	ldrsh.w	r2, [sp, #114]	@ 0x72
 80203c2:	9904      	ldr	r1, [sp, #16]
 80203c4:	fb92 f0f0 	sdiv	r0, r2, r0
 80203c8:	b280      	uxth	r0, r0
 80203ca:	440d      	add	r5, r1
 80203cc:	9010      	str	r0, [sp, #64]	@ 0x40
 80203ce:	3d01      	subs	r5, #1
 80203d0:	9804      	ldr	r0, [sp, #16]
 80203d2:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80203d4:	fb04 2410 	mls	r4, r4, r0, r2
 80203d8:	fb95 f5f1 	sdiv	r5, r5, r1
 80203dc:	fb14 f403 	smulbb	r4, r4, r3
 80203e0:	f8bd 1070 	ldrh.w	r1, [sp, #112]	@ 0x70
 80203e4:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 80203e8:	3501      	adds	r5, #1
 80203ea:	440c      	add	r4, r1
 80203ec:	4419      	add	r1, r3
 80203ee:	f8bd 306a 	ldrh.w	r3, [sp, #106]	@ 0x6a
 80203f2:	b2ad      	uxth	r5, r5
 80203f4:	441a      	add	r2, r3
 80203f6:	f9bd 3074 	ldrsh.w	r3, [sp, #116]	@ 0x74
 80203fa:	f8ad 1070 	strh.w	r1, [sp, #112]	@ 0x70
 80203fe:	00ad      	lsls	r5, r5, #2
 8020400:	9305      	str	r3, [sp, #20]
 8020402:	b2a4      	uxth	r4, r4
 8020404:	4bad      	ldr	r3, [pc, #692]	@ (80206bc <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x354>)
 8020406:	f8ad 2072 	strh.w	r2, [sp, #114]	@ 0x72
 802040a:	6818      	ldr	r0, [r3, #0]
 802040c:	6803      	ldr	r3, [r0, #0]
 802040e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020410:	4798      	blx	r3
 8020412:	4bab      	ldr	r3, [pc, #684]	@ (80206c0 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x358>)
 8020414:	f9bd 2072 	ldrsh.w	r2, [sp, #114]	@ 0x72
 8020418:	2c00      	cmp	r4, #0
 802041a:	8819      	ldrh	r1, [r3, #0]
 802041c:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	@ 0x70
 8020420:	fb06 f601 	mul.w	r6, r6, r1
 8020424:	fb01 7202 	mla	r2, r1, r2, r7
 8020428:	bf18      	it	ne
 802042a:	2100      	movne	r1, #0
 802042c:	9318      	str	r3, [sp, #96]	@ 0x60
 802042e:	eb00 0b82 	add.w	fp, r0, r2, lsl #2
 8020432:	4ba4      	ldr	r3, [pc, #656]	@ (80206c4 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x35c>)
 8020434:	eb0b 0286 	add.w	r2, fp, r6, lsl #2
 8020438:	eba3 0308 	sub.w	r3, r3, r8
 802043c:	920c      	str	r2, [sp, #48]	@ 0x30
 802043e:	f105 0204 	add.w	r2, r5, #4
 8020442:	9319      	str	r3, [sp, #100]	@ 0x64
 8020444:	9213      	str	r2, [sp, #76]	@ 0x4c
 8020446:	9a05      	ldr	r2, [sp, #20]
 8020448:	bf08      	it	eq
 802044a:	4611      	moveq	r1, r2
 802044c:	2200      	movs	r2, #0
 802044e:	b289      	uxth	r1, r1
 8020450:	920e      	str	r2, [sp, #56]	@ 0x38
 8020452:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8020454:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020456:	fa12 f383 	uxtah	r3, r2, r3
 802045a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 802045c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8020460:	3304      	adds	r3, #4
 8020462:	9309      	str	r3, [sp, #36]	@ 0x24
 8020464:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020466:	459b      	cmp	fp, r3
 8020468:	f080 815e 	bcs.w	8020728 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3c0>
 802046c:	f8bd 306c 	ldrh.w	r3, [sp, #108]	@ 0x6c
 8020470:	f04f 0901 	mov.w	r9, #1
 8020474:	9a04      	ldr	r2, [sp, #16]
 8020476:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8020478:	46cc      	mov	ip, r9
 802047a:	fbb4 f3f3 	udiv	r3, r4, r3
 802047e:	1ad3      	subs	r3, r2, r3
 8020480:	7800      	ldrb	r0, [r0, #0]
 8020482:	b29b      	uxth	r3, r3
 8020484:	900f      	str	r0, [sp, #60]	@ 0x3c
 8020486:	3001      	adds	r0, #1
 8020488:	9314      	str	r3, [sp, #80]	@ 0x50
 802048a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802048c:	9006      	str	r0, [sp, #24]
 802048e:	785a      	ldrb	r2, [r3, #1]
 8020490:	789b      	ldrb	r3, [r3, #2]
 8020492:	021b      	lsls	r3, r3, #8
 8020494:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8020498:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802049a:	78d2      	ldrb	r2, [r2, #3]
 802049c:	4313      	orrs	r3, r2
 802049e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80204a0:	441a      	add	r2, r3
 80204a2:	1c50      	adds	r0, r2, #1
 80204a4:	7852      	ldrb	r2, [r2, #1]
 80204a6:	9003      	str	r0, [sp, #12]
 80204a8:	0212      	lsls	r2, r2, #8
 80204aa:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80204ac:	f402 72ff 	and.w	r2, r2, #510	@ 0x1fe
 80204b0:	5cc3      	ldrb	r3, [r0, r3]
 80204b2:	431a      	orrs	r2, r3
 80204b4:	b293      	uxth	r3, r2
 80204b6:	f888 2804 	strb.w	r2, [r8, #2052]	@ 0x804
 80204ba:	930b      	str	r3, [sp, #44]	@ 0x2c
 80204bc:	2300      	movs	r3, #0
 80204be:	9307      	str	r3, [sp, #28]
 80204c0:	e9cd 3901 	strd	r3, r9, [sp, #4]
 80204c4:	2c00      	cmp	r4, #0
 80204c6:	d07d      	beq.n	80205c4 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25c>
 80204c8:	45a4      	cmp	ip, r4
 80204ca:	d26c      	bcs.n	80205a6 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x23e>
 80204cc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80204ce:	eba4 040c 	sub.w	r4, r4, ip
 80204d2:	460d      	mov	r5, r1
 80204d4:	455b      	cmp	r3, fp
 80204d6:	b2a4      	uxth	r4, r4
 80204d8:	d802      	bhi.n	80204e0 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x178>
 80204da:	e071      	b.n	80205c0 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x258>
 80204dc:	2b00      	cmp	r3, #0
 80204de:	d15d      	bne.n	802059c <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x234>
 80204e0:	9b03      	ldr	r3, [sp, #12]
 80204e2:	9a02      	ldr	r2, [sp, #8]
 80204e4:	785b      	ldrb	r3, [r3, #1]
 80204e6:	f1c2 0207 	rsb	r2, r2, #7
 80204ea:	9902      	ldr	r1, [sp, #8]
 80204ec:	4093      	lsls	r3, r2
 80204ee:	005b      	lsls	r3, r3, #1
 80204f0:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 80204f4:	9b03      	ldr	r3, [sp, #12]
 80204f6:	781b      	ldrb	r3, [r3, #0]
 80204f8:	410b      	asrs	r3, r1
 80204fa:	3101      	adds	r1, #1
 80204fc:	b2c9      	uxtb	r1, r1
 80204fe:	b2db      	uxtb	r3, r3
 8020500:	2908      	cmp	r1, #8
 8020502:	9102      	str	r1, [sp, #8]
 8020504:	9903      	ldr	r1, [sp, #12]
 8020506:	ea43 0302 	orr.w	r3, r3, r2
 802050a:	bf0c      	ite	eq
 802050c:	3102      	addeq	r1, #2
 802050e:	3101      	addne	r1, #1
 8020510:	b29a      	uxth	r2, r3
 8020512:	bf05      	ittet	eq
 8020514:	9103      	streq	r1, [sp, #12]
 8020516:	2100      	moveq	r1, #0
 8020518:	9103      	strne	r1, [sp, #12]
 802051a:	9102      	streq	r1, [sp, #8]
 802051c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 802051e:	4291      	cmp	r1, r2
 8020520:	d30a      	bcc.n	8020538 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d0>
 8020522:	f888 3804 	strb.w	r3, [r8, #2052]	@ 0x804
 8020526:	2301      	movs	r3, #1
 8020528:	9906      	ldr	r1, [sp, #24]
 802052a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 802052e:	d30f      	bcc.n	8020550 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1e8>
 8020530:	2100      	movs	r1, #0
 8020532:	4699      	mov	r9, r3
 8020534:	9101      	str	r1, [sp, #4]
 8020536:	e032      	b.n	802059e <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x236>
 8020538:	9b06      	ldr	r3, [sp, #24]
 802053a:	4293      	cmp	r3, r2
 802053c:	d818      	bhi.n	8020570 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x208>
 802053e:	eb08 0309 	add.w	r3, r8, r9
 8020542:	f898 1804 	ldrb.w	r1, [r8, #2052]	@ 0x804
 8020546:	f883 1804 	strb.w	r1, [r3, #2052]	@ 0x804
 802054a:	f109 0301 	add.w	r3, r9, #1
 802054e:	b29b      	uxth	r3, r3
 8020550:	9906      	ldr	r1, [sp, #24]
 8020552:	f898 0804 	ldrb.w	r0, [r8, #2052]	@ 0x804
 8020556:	eb08 0181 	add.w	r1, r8, r1, lsl #2
 802055a:	7108      	strb	r0, [r1, #4]
 802055c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 802055e:	80c8      	strh	r0, [r1, #6]
 8020560:	f109 0001 	add.w	r0, r9, #1
 8020564:	7148      	strb	r0, [r1, #5]
 8020566:	9906      	ldr	r1, [sp, #24]
 8020568:	3101      	adds	r1, #1
 802056a:	b289      	uxth	r1, r1
 802056c:	9106      	str	r1, [sp, #24]
 802056e:	e7df      	b.n	8020530 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1c8>
 8020570:	eb08 0382 	add.w	r3, r8, r2, lsl #2
 8020574:	4611      	mov	r1, r2
 8020576:	795b      	ldrb	r3, [r3, #5]
 8020578:	f603 0004 	addw	r0, r3, #2052	@ 0x804
 802057c:	4440      	add	r0, r8
 802057e:	9e19      	ldr	r6, [sp, #100]	@ 0x64
 8020580:	4406      	add	r6, r0
 8020582:	2e00      	cmp	r6, #0
 8020584:	dd06      	ble.n	8020594 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x22c>
 8020586:	eb08 0181 	add.w	r1, r8, r1, lsl #2
 802058a:	790e      	ldrb	r6, [r1, #4]
 802058c:	f800 6d01 	strb.w	r6, [r0, #-1]!
 8020590:	88c9      	ldrh	r1, [r1, #6]
 8020592:	e7f4      	b.n	802057e <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x216>
 8020594:	f888 1804 	strb.w	r1, [r8, #2052]	@ 0x804
 8020598:	b29b      	uxth	r3, r3
 802059a:	e7c5      	b.n	8020528 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1c0>
 802059c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 802059e:	4629      	mov	r1, r5
 80205a0:	920b      	str	r2, [sp, #44]	@ 0x2c
 80205a2:	469c      	mov	ip, r3
 80205a4:	e78e      	b.n	80204c4 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x15c>
 80205a6:	9a01      	ldr	r2, [sp, #4]
 80205a8:	ebac 0304 	sub.w	r3, ip, r4
 80205ac:	f8bd 5014 	ldrh.w	r5, [sp, #20]
 80205b0:	4422      	add	r2, r4
 80205b2:	b29b      	uxth	r3, r3
 80205b4:	b292      	uxth	r2, r2
 80205b6:	9201      	str	r2, [sp, #4]
 80205b8:	2400      	movs	r4, #0
 80205ba:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80205bc:	4593      	cmp	fp, r2
 80205be:	d38d      	bcc.n	80204dc <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x174>
 80205c0:	4629      	mov	r1, r5
 80205c2:	e74f      	b.n	8020464 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xfc>
 80205c4:	458c      	cmp	ip, r1
 80205c6:	f04f 0a00 	mov.w	sl, #0
 80205ca:	bf2b      	itete	cs
 80205cc:	ebac 0301 	subcs.w	r3, ip, r1
 80205d0:	eba1 050c 	subcc.w	r5, r1, ip
 80205d4:	4625      	movcs	r5, r4
 80205d6:	4623      	movcc	r3, r4
 80205d8:	bf27      	ittee	cs
 80205da:	b29b      	uxthcs	r3, r3
 80205dc:	910d      	strcs	r1, [sp, #52]	@ 0x34
 80205de:	b2ad      	uxthcc	r5, r5
 80205e0:	f8cd c034 	strcc.w	ip, [sp, #52]	@ 0x34
 80205e4:	9a01      	ldr	r2, [sp, #4]
 80205e6:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80205e8:	4452      	add	r2, sl
 80205ea:	4550      	cmp	r0, sl
 80205ec:	b292      	uxth	r2, r2
 80205ee:	d06b      	beq.n	80206c8 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x360>
 80205f0:	2004      	movs	r0, #4
 80205f2:	4442      	add	r2, r8
 80205f4:	4604      	mov	r4, r0
 80205f6:	f892 2804 	ldrb.w	r2, [r2, #2052]	@ 0x804
 80205fa:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80205fc:	fb14 0202 	smlabb	r2, r4, r2, r0
 8020600:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8020602:	5886      	ldr	r6, [r0, r2]
 8020604:	0e32      	lsrs	r2, r6, #24
 8020606:	d013      	beq.n	8020630 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2c8>
 8020608:	9815      	ldr	r0, [sp, #84]	@ 0x54
 802060a:	4342      	muls	r2, r0
 802060c:	1c54      	adds	r4, r2, #1
 802060e:	eb04 2422 	add.w	r4, r4, r2, asr #8
 8020612:	1224      	asrs	r4, r4, #8
 8020614:	2cff      	cmp	r4, #255	@ 0xff
 8020616:	d005      	beq.n	8020624 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2bc>
 8020618:	f85b 202a 	ldr.w	r2, [fp, sl, lsl #2]
 802061c:	ea5f 6e12 	movs.w	lr, r2, lsr #24
 8020620:	9208      	str	r2, [sp, #32]
 8020622:	d108      	bne.n	8020636 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2ce>
 8020624:	f026 467f 	bic.w	r6, r6, #4278190080	@ 0xff000000
 8020628:	ea46 6604 	orr.w	r6, r6, r4, lsl #24
 802062c:	f84b 602a 	str.w	r6, [fp, sl, lsl #2]
 8020630:	f10a 0a01 	add.w	sl, sl, #1
 8020634:	e7d6      	b.n	80205e4 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x27c>
 8020636:	b2e7      	uxtb	r7, r4
 8020638:	2c00      	cmp	r4, #0
 802063a:	d0f9      	beq.n	8020630 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2c8>
 802063c:	fb07 f00e 	mul.w	r0, r7, lr
 8020640:	4477      	add	r7, lr
 8020642:	1c42      	adds	r2, r0, #1
 8020644:	eb02 2020 	add.w	r0, r2, r0, asr #8
 8020648:	1200      	asrs	r0, r0, #8
 802064a:	ebae 0200 	sub.w	r2, lr, r0
 802064e:	1a3f      	subs	r7, r7, r0
 8020650:	f89d 0020 	ldrb.w	r0, [sp, #32]
 8020654:	fa5f fe86 	uxtb.w	lr, r6
 8020658:	b2ff      	uxtb	r7, r7
 802065a:	920a      	str	r2, [sp, #40]	@ 0x28
 802065c:	4350      	muls	r0, r2
 802065e:	fb04 0e0e 	mla	lr, r4, lr, r0
 8020662:	fbbe fef7 	udiv	lr, lr, r7
 8020666:	fa5f fe8e 	uxtb.w	lr, lr
 802066a:	ea4e 6207 	orr.w	r2, lr, r7, lsl #24
 802066e:	9216      	str	r2, [sp, #88]	@ 0x58
 8020670:	9a08      	ldr	r2, [sp, #32]
 8020672:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8020676:	f3c6 4207 	ubfx	r2, r6, #16, #8
 802067a:	f3c6 2607 	ubfx	r6, r6, #8, #8
 802067e:	4362      	muls	r2, r4
 8020680:	4366      	muls	r6, r4
 8020682:	9217      	str	r2, [sp, #92]	@ 0x5c
 8020684:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020686:	4696      	mov	lr, r2
 8020688:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 802068a:	fb0e 2000 	mla	r0, lr, r0, r2
 802068e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8020690:	fbb0 f0f7 	udiv	r0, r0, r7
 8020694:	0400      	lsls	r0, r0, #16
 8020696:	f400 007f 	and.w	r0, r0, #16711680	@ 0xff0000
 802069a:	ea42 0e00 	orr.w	lr, r2, r0
 802069e:	9a08      	ldr	r2, [sp, #32]
 80206a0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80206a2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80206a6:	fb00 6202 	mla	r2, r0, r2, r6
 80206aa:	fbb2 f2f7 	udiv	r2, r2, r7
 80206ae:	0210      	lsls	r0, r2, #8
 80206b0:	b280      	uxth	r0, r0
 80206b2:	ea4e 0000 	orr.w	r0, lr, r0
 80206b6:	f84b 002a 	str.w	r0, [fp, sl, lsl #2]
 80206ba:	e7b9      	b.n	8020630 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2c8>
 80206bc:	20029ed8 	.word	0x20029ed8
 80206c0:	20029ed2 	.word	0x20029ed2
 80206c4:	fffff7fb 	.word	0xfffff7fb
 80206c8:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80206ca:	458c      	cmp	ip, r1
 80206cc:	9201      	str	r2, [sp, #4]
 80206ce:	eb0b 0b80 	add.w	fp, fp, r0, lsl #2
 80206d2:	f4ff af71 	bcc.w	80205b8 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x250>
 80206d6:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80206d8:	9905      	ldr	r1, [sp, #20]
 80206da:	8812      	ldrh	r2, [r2, #0]
 80206dc:	1a52      	subs	r2, r2, r1
 80206de:	eb0b 0b82 	add.w	fp, fp, r2, lsl #2
 80206e2:	9a07      	ldr	r2, [sp, #28]
 80206e4:	3201      	adds	r2, #1
 80206e6:	9207      	str	r2, [sp, #28]
 80206e8:	9907      	ldr	r1, [sp, #28]
 80206ea:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80206ec:	428a      	cmp	r2, r1
 80206ee:	d111      	bne.n	8020714 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ac>
 80206f0:	f8bd 4070 	ldrh.w	r4, [sp, #112]	@ 0x70
 80206f4:	f8bd a068 	ldrh.w	sl, [sp, #104]	@ 0x68
 80206f8:	9b05      	ldr	r3, [sp, #20]
 80206fa:	eba4 040a 	sub.w	r4, r4, sl
 80206fe:	b2a4      	uxth	r4, r4
 8020700:	2c00      	cmp	r4, #0
 8020702:	bf08      	it	eq
 8020704:	4619      	moveq	r1, r3
 8020706:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020708:	bf18      	it	ne
 802070a:	2100      	movne	r1, #0
 802070c:	3301      	adds	r3, #1
 802070e:	b289      	uxth	r1, r1
 8020710:	930e      	str	r3, [sp, #56]	@ 0x38
 8020712:	e69e      	b.n	8020452 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xea>
 8020714:	f8bd 5014 	ldrh.w	r5, [sp, #20]
 8020718:	f8bd 406c 	ldrh.w	r4, [sp, #108]	@ 0x6c
 802071c:	1b64      	subs	r4, r4, r5
 802071e:	b2a4      	uxth	r4, r4
 8020720:	2c00      	cmp	r4, #0
 8020722:	bf18      	it	ne
 8020724:	2500      	movne	r5, #0
 8020726:	e748      	b.n	80205ba <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x252>
 8020728:	4b03      	ldr	r3, [pc, #12]	@ (8020738 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3d0>)
 802072a:	6818      	ldr	r0, [r3, #0]
 802072c:	6803      	ldr	r3, [r0, #0]
 802072e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020730:	4798      	blx	r3
 8020732:	b01f      	add	sp, #124	@ 0x7c
 8020734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020738:	20029ed8 	.word	0x20029ed8

0802073c <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 802073c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020740:	b09d      	sub	sp, #116	@ 0x74
 8020742:	461c      	mov	r4, r3
 8020744:	4680      	mov	r8, r0
 8020746:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8020748:	6820      	ldr	r0, [r4, #0]
 802074a:	e9cd 1212 	strd	r1, r2, [sp, #72]	@ 0x48
 802074e:	f89d 209c 	ldrb.w	r2, [sp, #156]	@ 0x9c
 8020752:	6861      	ldr	r1, [r4, #4]
 8020754:	9202      	str	r2, [sp, #8]
 8020756:	aa18      	add	r2, sp, #96	@ 0x60
 8020758:	c203      	stmia	r2!, {r0, r1}
 802075a:	6818      	ldr	r0, [r3, #0]
 802075c:	aa1a      	add	r2, sp, #104	@ 0x68
 802075e:	6859      	ldr	r1, [r3, #4]
 8020760:	c203      	stmia	r2!, {r0, r1}
 8020762:	a818      	add	r0, sp, #96	@ 0x60
 8020764:	f7f8 f97a 	bl	8018a5c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020768:	4621      	mov	r1, r4
 802076a:	a81a      	add	r0, sp, #104	@ 0x68
 802076c:	f7f8 f99e 	bl	8018aac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020770:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 8020774:	f9bd 4066 	ldrsh.w	r4, [sp, #102]	@ 0x66
 8020778:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 802077c:	bfdb      	ittet	le
 802077e:	b29a      	uxthle	r2, r3
 8020780:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 8020784:	2201      	movgt	r2, #1
 8020786:	fb91 f2f2 	sdivle	r2, r1, r2
 802078a:	9205      	str	r2, [sp, #20]
 802078c:	9805      	ldr	r0, [sp, #20]
 802078e:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	@ 0x6a
 8020792:	9905      	ldr	r1, [sp, #20]
 8020794:	fb92 f0f0 	sdiv	r0, r2, r0
 8020798:	b280      	uxth	r0, r0
 802079a:	440c      	add	r4, r1
 802079c:	9010      	str	r0, [sp, #64]	@ 0x40
 802079e:	3c01      	subs	r4, #1
 80207a0:	9805      	ldr	r0, [sp, #20]
 80207a2:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80207a4:	fb05 2610 	mls	r6, r5, r0, r2
 80207a8:	f9bd 506e 	ldrsh.w	r5, [sp, #110]	@ 0x6e
 80207ac:	fb94 f4f1 	sdiv	r4, r4, r1
 80207b0:	fb16 f603 	smulbb	r6, r6, r3
 80207b4:	f8bd 1068 	ldrh.w	r1, [sp, #104]	@ 0x68
 80207b8:	f8bd 3060 	ldrh.w	r3, [sp, #96]	@ 0x60
 80207bc:	3401      	adds	r4, #1
 80207be:	440e      	add	r6, r1
 80207c0:	4419      	add	r1, r3
 80207c2:	f8bd 3062 	ldrh.w	r3, [sp, #98]	@ 0x62
 80207c6:	b2a4      	uxth	r4, r4
 80207c8:	441a      	add	r2, r3
 80207ca:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
 80207ce:	f8ad 1068 	strh.w	r1, [sp, #104]	@ 0x68
 80207d2:	b2b6      	uxth	r6, r6
 80207d4:	9306      	str	r3, [sp, #24]
 80207d6:	4ba1      	ldr	r3, [pc, #644]	@ (8020a5c <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x320>)
 80207d8:	f8ad 206a 	strh.w	r2, [sp, #106]	@ 0x6a
 80207dc:	6818      	ldr	r0, [r3, #0]
 80207de:	6803      	ldr	r3, [r0, #0]
 80207e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80207e2:	4798      	blx	r3
 80207e4:	4b9e      	ldr	r3, [pc, #632]	@ (8020a60 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x324>)
 80207e6:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	@ 0x6a
 80207ea:	2e00      	cmp	r6, #0
 80207ec:	8819      	ldrh	r1, [r3, #0]
 80207ee:	f9bd 7068 	ldrsh.w	r7, [sp, #104]	@ 0x68
 80207f2:	fb05 f501 	mul.w	r5, r5, r1
 80207f6:	fb01 7202 	mla	r2, r1, r2, r7
 80207fa:	bf18      	it	ne
 80207fc:	2100      	movne	r1, #0
 80207fe:	9316      	str	r3, [sp, #88]	@ 0x58
 8020800:	eb00 0a82 	add.w	sl, r0, r2, lsl #2
 8020804:	4b97      	ldr	r3, [pc, #604]	@ (8020a64 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x328>)
 8020806:	eb0a 0285 	add.w	r2, sl, r5, lsl #2
 802080a:	eba3 0308 	sub.w	r3, r3, r8
 802080e:	920d      	str	r2, [sp, #52]	@ 0x34
 8020810:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8020812:	9317      	str	r3, [sp, #92]	@ 0x5c
 8020814:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8020818:	f104 0204 	add.w	r2, r4, #4
 802081c:	920a      	str	r2, [sp, #40]	@ 0x28
 802081e:	9a06      	ldr	r2, [sp, #24]
 8020820:	bf08      	it	eq
 8020822:	4611      	moveq	r1, r2
 8020824:	9a02      	ldr	r2, [sp, #8]
 8020826:	0612      	lsls	r2, r2, #24
 8020828:	b289      	uxth	r1, r1
 802082a:	9214      	str	r2, [sp, #80]	@ 0x50
 802082c:	2200      	movs	r2, #0
 802082e:	920e      	str	r2, [sp, #56]	@ 0x38
 8020830:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8020832:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020834:	fa12 f383 	uxtah	r3, r2, r3
 8020838:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802083a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802083e:	3304      	adds	r3, #4
 8020840:	930b      	str	r3, [sp, #44]	@ 0x2c
 8020842:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020844:	459a      	cmp	sl, r3
 8020846:	f080 8171 	bcs.w	8020b2c <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3f0>
 802084a:	f8bd 3064 	ldrh.w	r3, [sp, #100]	@ 0x64
 802084e:	f04f 0b01 	mov.w	fp, #1
 8020852:	9a05      	ldr	r2, [sp, #20]
 8020854:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8020856:	465f      	mov	r7, fp
 8020858:	f8cd b00c 	str.w	fp, [sp, #12]
 802085c:	7800      	ldrb	r0, [r0, #0]
 802085e:	fbb6 f3f3 	udiv	r3, r6, r3
 8020862:	1ad3      	subs	r3, r2, r3
 8020864:	900f      	str	r0, [sp, #60]	@ 0x3c
 8020866:	3001      	adds	r0, #1
 8020868:	b29b      	uxth	r3, r3
 802086a:	9007      	str	r0, [sp, #28]
 802086c:	9315      	str	r3, [sp, #84]	@ 0x54
 802086e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020870:	785a      	ldrb	r2, [r3, #1]
 8020872:	789b      	ldrb	r3, [r3, #2]
 8020874:	021b      	lsls	r3, r3, #8
 8020876:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802087a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 802087c:	78d2      	ldrb	r2, [r2, #3]
 802087e:	4313      	orrs	r3, r2
 8020880:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8020882:	441a      	add	r2, r3
 8020884:	1c50      	adds	r0, r2, #1
 8020886:	7852      	ldrb	r2, [r2, #1]
 8020888:	9004      	str	r0, [sp, #16]
 802088a:	0212      	lsls	r2, r2, #8
 802088c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 802088e:	f402 72ff 	and.w	r2, r2, #510	@ 0x1fe
 8020892:	5cc3      	ldrb	r3, [r0, r3]
 8020894:	431a      	orrs	r2, r3
 8020896:	b293      	uxth	r3, r2
 8020898:	f888 2804 	strb.w	r2, [r8, #2052]	@ 0x804
 802089c:	930c      	str	r3, [sp, #48]	@ 0x30
 802089e:	2300      	movs	r3, #0
 80208a0:	461d      	mov	r5, r3
 80208a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80208a4:	2e00      	cmp	r6, #0
 80208a6:	d07e      	beq.n	80209a6 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x26a>
 80208a8:	42b7      	cmp	r7, r6
 80208aa:	d26f      	bcs.n	802098c <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x250>
 80208ac:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80208ae:	1bf6      	subs	r6, r6, r7
 80208b0:	460c      	mov	r4, r1
 80208b2:	4553      	cmp	r3, sl
 80208b4:	b2b6      	uxth	r6, r6
 80208b6:	d803      	bhi.n	80208c0 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x184>
 80208b8:	e073      	b.n	80209a2 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x266>
 80208ba:	9b00      	ldr	r3, [sp, #0]
 80208bc:	2b00      	cmp	r3, #0
 80208be:	d15f      	bne.n	8020980 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x244>
 80208c0:	9b04      	ldr	r3, [sp, #16]
 80208c2:	9a03      	ldr	r2, [sp, #12]
 80208c4:	785b      	ldrb	r3, [r3, #1]
 80208c6:	f1c2 0207 	rsb	r2, r2, #7
 80208ca:	9903      	ldr	r1, [sp, #12]
 80208cc:	4093      	lsls	r3, r2
 80208ce:	005b      	lsls	r3, r3, #1
 80208d0:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 80208d4:	9b04      	ldr	r3, [sp, #16]
 80208d6:	781b      	ldrb	r3, [r3, #0]
 80208d8:	410b      	asrs	r3, r1
 80208da:	b2db      	uxtb	r3, r3
 80208dc:	4313      	orrs	r3, r2
 80208de:	460a      	mov	r2, r1
 80208e0:	3201      	adds	r2, #1
 80208e2:	b298      	uxth	r0, r3
 80208e4:	b2d2      	uxtb	r2, r2
 80208e6:	2a08      	cmp	r2, #8
 80208e8:	9203      	str	r2, [sp, #12]
 80208ea:	9a04      	ldr	r2, [sp, #16]
 80208ec:	bf09      	itett	eq
 80208ee:	3202      	addeq	r2, #2
 80208f0:	3201      	addne	r2, #1
 80208f2:	9204      	streq	r2, [sp, #16]
 80208f4:	2200      	moveq	r2, #0
 80208f6:	bf14      	ite	ne
 80208f8:	9204      	strne	r2, [sp, #16]
 80208fa:	9203      	streq	r2, [sp, #12]
 80208fc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80208fe:	4282      	cmp	r2, r0
 8020900:	d30b      	bcc.n	802091a <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1de>
 8020902:	f888 3804 	strb.w	r3, [r8, #2052]	@ 0x804
 8020906:	2301      	movs	r3, #1
 8020908:	9a07      	ldr	r2, [sp, #28]
 802090a:	9300      	str	r3, [sp, #0]
 802090c:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 8020910:	d310      	bcc.n	8020934 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1f8>
 8020912:	f8dd b000 	ldr.w	fp, [sp]
 8020916:	2200      	movs	r2, #0
 8020918:	e033      	b.n	8020982 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x246>
 802091a:	9b07      	ldr	r3, [sp, #28]
 802091c:	4283      	cmp	r3, r0
 802091e:	d819      	bhi.n	8020954 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x218>
 8020920:	eb08 030b 	add.w	r3, r8, fp
 8020924:	f898 2804 	ldrb.w	r2, [r8, #2052]	@ 0x804
 8020928:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
 802092c:	f10b 0301 	add.w	r3, fp, #1
 8020930:	b29b      	uxth	r3, r3
 8020932:	9300      	str	r3, [sp, #0]
 8020934:	9a07      	ldr	r2, [sp, #28]
 8020936:	f898 1804 	ldrb.w	r1, [r8, #2052]	@ 0x804
 802093a:	eb08 0282 	add.w	r2, r8, r2, lsl #2
 802093e:	7111      	strb	r1, [r2, #4]
 8020940:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8020942:	80d1      	strh	r1, [r2, #6]
 8020944:	f10b 0101 	add.w	r1, fp, #1
 8020948:	7151      	strb	r1, [r2, #5]
 802094a:	9a07      	ldr	r2, [sp, #28]
 802094c:	3201      	adds	r2, #1
 802094e:	b292      	uxth	r2, r2
 8020950:	9207      	str	r2, [sp, #28]
 8020952:	e7de      	b.n	8020912 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1d6>
 8020954:	eb08 0380 	add.w	r3, r8, r0, lsl #2
 8020958:	4602      	mov	r2, r0
 802095a:	795b      	ldrb	r3, [r3, #5]
 802095c:	f603 0104 	addw	r1, r3, #2052	@ 0x804
 8020960:	4441      	add	r1, r8
 8020962:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 8020964:	440d      	add	r5, r1
 8020966:	2d00      	cmp	r5, #0
 8020968:	dd06      	ble.n	8020978 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x23c>
 802096a:	eb08 0282 	add.w	r2, r8, r2, lsl #2
 802096e:	7915      	ldrb	r5, [r2, #4]
 8020970:	f801 5d01 	strb.w	r5, [r1, #-1]!
 8020974:	88d2      	ldrh	r2, [r2, #6]
 8020976:	e7f4      	b.n	8020962 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x226>
 8020978:	f888 2804 	strb.w	r2, [r8, #2052]	@ 0x804
 802097c:	b29b      	uxth	r3, r3
 802097e:	e7c3      	b.n	8020908 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1cc>
 8020980:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8020982:	4621      	mov	r1, r4
 8020984:	900c      	str	r0, [sp, #48]	@ 0x30
 8020986:	4615      	mov	r5, r2
 8020988:	9f00      	ldr	r7, [sp, #0]
 802098a:	e78b      	b.n	80208a4 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x168>
 802098c:	1bbb      	subs	r3, r7, r6
 802098e:	4435      	add	r5, r6
 8020990:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 8020994:	b29b      	uxth	r3, r3
 8020996:	b2aa      	uxth	r2, r5
 8020998:	9300      	str	r3, [sp, #0]
 802099a:	2600      	movs	r6, #0
 802099c:	990d      	ldr	r1, [sp, #52]	@ 0x34
 802099e:	458a      	cmp	sl, r1
 80209a0:	d38b      	bcc.n	80208ba <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17e>
 80209a2:	4621      	mov	r1, r4
 80209a4:	e74d      	b.n	8020842 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x106>
 80209a6:	428f      	cmp	r7, r1
 80209a8:	d332      	bcc.n	8020a10 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2d4>
 80209aa:	1a7b      	subs	r3, r7, r1
 80209ac:	4634      	mov	r4, r6
 80209ae:	9108      	str	r1, [sp, #32]
 80209b0:	b29b      	uxth	r3, r3
 80209b2:	9300      	str	r3, [sp, #0]
 80209b4:	9a02      	ldr	r2, [sp, #8]
 80209b6:	2aff      	cmp	r2, #255	@ 0xff
 80209b8:	d02f      	beq.n	8020a1a <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2de>
 80209ba:	2200      	movs	r2, #0
 80209bc:	9201      	str	r2, [sp, #4]
 80209be:	9b01      	ldr	r3, [sp, #4]
 80209c0:	9801      	ldr	r0, [sp, #4]
 80209c2:	18ea      	adds	r2, r5, r3
 80209c4:	9b08      	ldr	r3, [sp, #32]
 80209c6:	4283      	cmp	r3, r0
 80209c8:	b292      	uxth	r2, r2
 80209ca:	d14d      	bne.n	8020a68 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x32c>
 80209cc:	428f      	cmp	r7, r1
 80209ce:	eb0a 0a83 	add.w	sl, sl, r3, lsl #2
 80209d2:	d3e2      	bcc.n	802099a <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x25e>
 80209d4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80209d6:	8819      	ldrh	r1, [r3, #0]
 80209d8:	9b06      	ldr	r3, [sp, #24]
 80209da:	1ac9      	subs	r1, r1, r3
 80209dc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80209de:	eb0a 0a81 	add.w	sl, sl, r1, lsl #2
 80209e2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80209e4:	3101      	adds	r1, #1
 80209e6:	428b      	cmp	r3, r1
 80209e8:	9109      	str	r1, [sp, #36]	@ 0x24
 80209ea:	f040 8095 	bne.w	8020b18 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3dc>
 80209ee:	f8bd 6068 	ldrh.w	r6, [sp, #104]	@ 0x68
 80209f2:	f8bd 7060 	ldrh.w	r7, [sp, #96]	@ 0x60
 80209f6:	9b06      	ldr	r3, [sp, #24]
 80209f8:	1bf6      	subs	r6, r6, r7
 80209fa:	b2b6      	uxth	r6, r6
 80209fc:	2e00      	cmp	r6, #0
 80209fe:	bf08      	it	eq
 8020a00:	4619      	moveq	r1, r3
 8020a02:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020a04:	bf18      	it	ne
 8020a06:	2100      	movne	r1, #0
 8020a08:	3301      	adds	r3, #1
 8020a0a:	b289      	uxth	r1, r1
 8020a0c:	930e      	str	r3, [sp, #56]	@ 0x38
 8020a0e:	e70f      	b.n	8020830 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf4>
 8020a10:	1bcc      	subs	r4, r1, r7
 8020a12:	9708      	str	r7, [sp, #32]
 8020a14:	9600      	str	r6, [sp, #0]
 8020a16:	b2a4      	uxth	r4, r4
 8020a18:	e7cc      	b.n	80209b4 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x278>
 8020a1a:	9a08      	ldr	r2, [sp, #32]
 8020a1c:	4656      	mov	r6, sl
 8020a1e:	18aa      	adds	r2, r5, r2
 8020a20:	b292      	uxth	r2, r2
 8020a22:	4295      	cmp	r5, r2
 8020a24:	d076      	beq.n	8020b14 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3d8>
 8020a26:	f105 0c01 	add.w	ip, r5, #1
 8020a2a:	4445      	add	r5, r8
 8020a2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020a2e:	f895 0804 	ldrb.w	r0, [r5, #2052]	@ 0x804
 8020a32:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8020a34:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020a38:	4405      	add	r5, r0
 8020a3a:	5c18      	ldrb	r0, [r3, r0]
 8020a3c:	f895 e002 	ldrb.w	lr, [r5, #2]
 8020a40:	f040 407f 	orr.w	r0, r0, #4278190080	@ 0xff000000
 8020a44:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8020a48:	f895 e001 	ldrb.w	lr, [r5, #1]
 8020a4c:	fa1f f58c 	uxth.w	r5, ip
 8020a50:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
 8020a54:	f846 0b04 	str.w	r0, [r6], #4
 8020a58:	e7e3      	b.n	8020a22 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2e6>
 8020a5a:	bf00      	nop
 8020a5c:	20029ed8 	.word	0x20029ed8
 8020a60:	20029ed2 	.word	0x20029ed2
 8020a64:	fffff7fb 	.word	0xfffff7fb
 8020a68:	4442      	add	r2, r8
 8020a6a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020a6c:	f892 6804 	ldrb.w	r6, [r2, #2052]	@ 0x804
 8020a70:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8020a74:	1998      	adds	r0, r3, r6
 8020a76:	9b01      	ldr	r3, [sp, #4]
 8020a78:	f85a 2023 	ldr.w	r2, [sl, r3, lsl #2]
 8020a7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020a7e:	ea5f 6912 	movs.w	r9, r2, lsr #24
 8020a82:	5d9e      	ldrb	r6, [r3, r6]
 8020a84:	7843      	ldrb	r3, [r0, #1]
 8020a86:	7880      	ldrb	r0, [r0, #2]
 8020a88:	9311      	str	r3, [sp, #68]	@ 0x44
 8020a8a:	d10c      	bne.n	8020aa6 <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x36a>
 8020a8c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8020a8e:	431e      	orrs	r6, r3
 8020a90:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8020a92:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8020a96:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
 8020a9a:	9b01      	ldr	r3, [sp, #4]
 8020a9c:	9a01      	ldr	r2, [sp, #4]
 8020a9e:	f84a 6023 	str.w	r6, [sl, r3, lsl #2]
 8020aa2:	3201      	adds	r2, #1
 8020aa4:	e78a      	b.n	80209bc <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x280>
 8020aa6:	9b02      	ldr	r3, [sp, #8]
 8020aa8:	fb13 f000 	smulbb	r0, r3, r0
 8020aac:	fb03 fe09 	mul.w	lr, r3, r9
 8020ab0:	fb13 f606 	smulbb	r6, r3, r6
 8020ab4:	f10e 0c01 	add.w	ip, lr, #1
 8020ab8:	eb0c 2c2e 	add.w	ip, ip, lr, asr #8
 8020abc:	eb03 0e09 	add.w	lr, r3, r9
 8020ac0:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8020ac4:	eba9 090c 	sub.w	r9, r9, ip
 8020ac8:	ebae 0e0c 	sub.w	lr, lr, ip
 8020acc:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8020ad0:	fa5f fe8e 	uxtb.w	lr, lr
 8020ad4:	fb09 0c0c 	mla	ip, r9, ip, r0
 8020ad8:	b2d0      	uxtb	r0, r2
 8020ada:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8020ade:	fb09 6600 	mla	r6, r9, r0, r6
 8020ae2:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8020ae4:	fbbc fcfe 	udiv	ip, ip, lr
 8020ae8:	fbb6 f6fe 	udiv	r6, r6, lr
 8020aec:	fb13 f000 	smulbb	r0, r3, r0
 8020af0:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 8020af4:	b2f6      	uxtb	r6, r6
 8020af6:	fb09 0202 	mla	r2, r9, r2, r0
 8020afa:	f40c 0c7f 	and.w	ip, ip, #16711680	@ 0xff0000
 8020afe:	ea46 660e 	orr.w	r6, r6, lr, lsl #24
 8020b02:	fbb2 f2fe 	udiv	r2, r2, lr
 8020b06:	ea4c 0c06 	orr.w	ip, ip, r6
 8020b0a:	0216      	lsls	r6, r2, #8
 8020b0c:	b2b6      	uxth	r6, r6
 8020b0e:	ea4c 0606 	orr.w	r6, ip, r6
 8020b12:	e7c2      	b.n	8020a9a <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x35e>
 8020b14:	9b08      	ldr	r3, [sp, #32]
 8020b16:	e759      	b.n	80209cc <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x290>
 8020b18:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 8020b1c:	f8bd 6064 	ldrh.w	r6, [sp, #100]	@ 0x64
 8020b20:	1b36      	subs	r6, r6, r4
 8020b22:	b2b6      	uxth	r6, r6
 8020b24:	2e00      	cmp	r6, #0
 8020b26:	bf18      	it	ne
 8020b28:	2400      	movne	r4, #0
 8020b2a:	e737      	b.n	802099c <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x260>
 8020b2c:	4b03      	ldr	r3, [pc, #12]	@ (8020b3c <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x400>)
 8020b2e:	6818      	ldr	r0, [r3, #0]
 8020b30:	6803      	ldr	r3, [r0, #0]
 8020b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020b34:	4798      	blx	r3
 8020b36:	b01d      	add	sp, #116	@ 0x74
 8020b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020b3c:	20029ed8 	.word	0x20029ed8

08020b40 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 8020b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020b44:	b089      	sub	sp, #36	@ 0x24
 8020b46:	4607      	mov	r7, r0
 8020b48:	4689      	mov	r9, r1
 8020b4a:	4692      	mov	sl, r2
 8020b4c:	ac08      	add	r4, sp, #32
 8020b4e:	461e      	mov	r6, r3
 8020b50:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 8020b54:	4620      	mov	r0, r4
 8020b56:	f7fc f84d 	bl	801cbf4 <_ZNK8touchgfx6Bitmap7getDataEv>
 8020b5a:	683b      	ldr	r3, [r7, #0]
 8020b5c:	4605      	mov	r5, r0
 8020b5e:	4620      	mov	r0, r4
 8020b60:	f8d3 8018 	ldr.w	r8, [r3, #24]
 8020b64:	f7fb ff5a 	bl	801ca1c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8020b68:	4683      	mov	fp, r0
 8020b6a:	4620      	mov	r0, r4
 8020b6c:	f7fb ff8a 	bl	801ca84 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8020b70:	4653      	mov	r3, sl
 8020b72:	464a      	mov	r2, r9
 8020b74:	4639      	mov	r1, r7
 8020b76:	9500      	str	r5, [sp, #0]
 8020b78:	e9cd b001 	strd	fp, r0, [sp, #4]
 8020b7c:	a806      	add	r0, sp, #24
 8020b7e:	47c0      	blx	r8
 8020b80:	a906      	add	r1, sp, #24
 8020b82:	4630      	mov	r0, r6
 8020b84:	f7fb fe2e 	bl	801c7e4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>
 8020b88:	4628      	mov	r0, r5
 8020b8a:	b009      	add	sp, #36	@ 0x24
 8020b8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020b90 <_ZN8touchgfx8LCD32bppD0Ev>:
 8020b90:	b510      	push	{r4, lr}
 8020b92:	4604      	mov	r4, r0
 8020b94:	2184      	movs	r1, #132	@ 0x84
 8020b96:	f009 fb93 	bl	802a2c0 <_ZdlPvj>
 8020b9a:	4620      	mov	r0, r4
 8020b9c:	bd10      	pop	{r4, pc}

08020b9e <_ZN8touchgfx8LCD32bpp17DecompressorL8_L4D0Ev>:
 8020b9e:	b510      	push	{r4, lr}
 8020ba0:	4604      	mov	r4, r0
 8020ba2:	2104      	movs	r1, #4
 8020ba4:	f009 fb8c 	bl	802a2c0 <_ZdlPvj>
 8020ba8:	4620      	mov	r0, r4
 8020baa:	bd10      	pop	{r4, pc}

08020bac <_ZN8touchgfx8LCD32bpp18DecompressorL8_RLED0Ev>:
 8020bac:	b510      	push	{r4, lr}
 8020bae:	4604      	mov	r4, r0
 8020bb0:	2104      	movs	r1, #4
 8020bb2:	f009 fb85 	bl	802a2c0 <_ZdlPvj>
 8020bb6:	4620      	mov	r0, r4
 8020bb8:	bd10      	pop	{r4, pc}

08020bba <_ZN8touchgfx8LCD32bpp19DecompressorL8_LZW9D0Ev>:
 8020bba:	b510      	push	{r4, lr}
 8020bbc:	4604      	mov	r4, r0
 8020bbe:	f640 0144 	movw	r1, #2116	@ 0x844
 8020bc2:	f009 fb7d 	bl	802a2c0 <_ZdlPvj>
 8020bc6:	4620      	mov	r0, r4
 8020bc8:	bd10      	pop	{r4, pc}

08020bca <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8020bca:	b510      	push	{r4, lr}
 8020bcc:	4604      	mov	r4, r0
 8020bce:	2104      	movs	r1, #4
 8020bd0:	f009 fb76 	bl	802a2c0 <_ZdlPvj>
 8020bd4:	4620      	mov	r0, r4
 8020bd6:	bd10      	pop	{r4, pc}

08020bd8 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 8020bd8:	b510      	push	{r4, lr}
 8020bda:	4604      	mov	r4, r0
 8020bdc:	2104      	movs	r1, #4
 8020bde:	f009 fb6f 	bl	802a2c0 <_ZdlPvj>
 8020be2:	4620      	mov	r0, r4
 8020be4:	bd10      	pop	{r4, pc}

08020be6 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 8020be6:	b510      	push	{r4, lr}
 8020be8:	4604      	mov	r4, r0
 8020bea:	2104      	movs	r1, #4
 8020bec:	f009 fb68 	bl	802a2c0 <_ZdlPvj>
 8020bf0:	4620      	mov	r0, r4
 8020bf2:	bd10      	pop	{r4, pc}

08020bf4 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 8020bf4:	b510      	push	{r4, lr}
 8020bf6:	4604      	mov	r4, r0
 8020bf8:	2104      	movs	r1, #4
 8020bfa:	f009 fb61 	bl	802a2c0 <_ZdlPvj>
 8020bfe:	4620      	mov	r0, r4
 8020c00:	bd10      	pop	{r4, pc}

08020c02 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8020c02:	b510      	push	{r4, lr}
 8020c04:	4604      	mov	r4, r0
 8020c06:	2104      	movs	r1, #4
 8020c08:	f009 fb5a 	bl	802a2c0 <_ZdlPvj>
 8020c0c:	4620      	mov	r0, r4
 8020c0e:	bd10      	pop	{r4, pc}

08020c10 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8020c10:	b510      	push	{r4, lr}
 8020c12:	4604      	mov	r4, r0
 8020c14:	2104      	movs	r1, #4
 8020c16:	f009 fb53 	bl	802a2c0 <_ZdlPvj>
 8020c1a:	4620      	mov	r0, r4
 8020c1c:	bd10      	pop	{r4, pc}

08020c1e <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8020c1e:	b510      	push	{r4, lr}
 8020c20:	4604      	mov	r4, r0
 8020c22:	2104      	movs	r1, #4
 8020c24:	f009 fb4c 	bl	802a2c0 <_ZdlPvj>
 8020c28:	4620      	mov	r0, r4
 8020c2a:	bd10      	pop	{r4, pc}

08020c2c <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8020c2c:	b510      	push	{r4, lr}
 8020c2e:	4604      	mov	r4, r0
 8020c30:	2104      	movs	r1, #4
 8020c32:	f009 fb45 	bl	802a2c0 <_ZdlPvj>
 8020c36:	4620      	mov	r0, r4
 8020c38:	bd10      	pop	{r4, pc}

08020c3a <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8020c3a:	b510      	push	{r4, lr}
 8020c3c:	4604      	mov	r4, r0
 8020c3e:	2104      	movs	r1, #4
 8020c40:	f009 fb3e 	bl	802a2c0 <_ZdlPvj>
 8020c44:	4620      	mov	r0, r4
 8020c46:	bd10      	pop	{r4, pc}

08020c48 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8020c48:	b510      	push	{r4, lr}
 8020c4a:	4604      	mov	r4, r0
 8020c4c:	2104      	movs	r1, #4
 8020c4e:	f009 fb37 	bl	802a2c0 <_ZdlPvj>
 8020c52:	4620      	mov	r0, r4
 8020c54:	bd10      	pop	{r4, pc}

08020c56 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8020c56:	b510      	push	{r4, lr}
 8020c58:	4604      	mov	r4, r0
 8020c5a:	2104      	movs	r1, #4
 8020c5c:	f009 fb30 	bl	802a2c0 <_ZdlPvj>
 8020c60:	4620      	mov	r0, r4
 8020c62:	bd10      	pop	{r4, pc}

08020c64 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 8020c64:	b510      	push	{r4, lr}
 8020c66:	4604      	mov	r4, r0
 8020c68:	2104      	movs	r1, #4
 8020c6a:	f009 fb29 	bl	802a2c0 <_ZdlPvj>
 8020c6e:	4620      	mov	r0, r4
 8020c70:	bd10      	pop	{r4, pc}

08020c72 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8020c72:	b510      	push	{r4, lr}
 8020c74:	4604      	mov	r4, r0
 8020c76:	2104      	movs	r1, #4
 8020c78:	f009 fb22 	bl	802a2c0 <_ZdlPvj>
 8020c7c:	4620      	mov	r0, r4
 8020c7e:	bd10      	pop	{r4, pc}

08020c80 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8020c80:	b510      	push	{r4, lr}
 8020c82:	4604      	mov	r4, r0
 8020c84:	2104      	movs	r1, #4
 8020c86:	f009 fb1b 	bl	802a2c0 <_ZdlPvj>
 8020c8a:	4620      	mov	r0, r4
 8020c8c:	bd10      	pop	{r4, pc}

08020c8e <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 8020c8e:	b510      	push	{r4, lr}
 8020c90:	4604      	mov	r4, r0
 8020c92:	2104      	movs	r1, #4
 8020c94:	f009 fb14 	bl	802a2c0 <_ZdlPvj>
 8020c98:	4620      	mov	r0, r4
 8020c9a:	bd10      	pop	{r4, pc}

08020c9c <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 8020c9c:	b510      	push	{r4, lr}
 8020c9e:	4604      	mov	r4, r0
 8020ca0:	2104      	movs	r1, #4
 8020ca2:	f009 fb0d 	bl	802a2c0 <_ZdlPvj>
 8020ca6:	4620      	mov	r0, r4
 8020ca8:	bd10      	pop	{r4, pc}

08020caa <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8020caa:	b510      	push	{r4, lr}
 8020cac:	4604      	mov	r4, r0
 8020cae:	2104      	movs	r1, #4
 8020cb0:	f009 fb06 	bl	802a2c0 <_ZdlPvj>
 8020cb4:	4620      	mov	r0, r4
 8020cb6:	bd10      	pop	{r4, pc}

08020cb8 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 8020cb8:	b510      	push	{r4, lr}
 8020cba:	4604      	mov	r4, r0
 8020cbc:	2104      	movs	r1, #4
 8020cbe:	f009 faff 	bl	802a2c0 <_ZdlPvj>
 8020cc2:	4620      	mov	r0, r4
 8020cc4:	bd10      	pop	{r4, pc}

08020cc6 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8020cc6:	b510      	push	{r4, lr}
 8020cc8:	4604      	mov	r4, r0
 8020cca:	2104      	movs	r1, #4
 8020ccc:	f009 faf8 	bl	802a2c0 <_ZdlPvj>
 8020cd0:	4620      	mov	r0, r4
 8020cd2:	bd10      	pop	{r4, pc}

08020cd4 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8020cd4:	b510      	push	{r4, lr}
 8020cd6:	4604      	mov	r4, r0
 8020cd8:	2104      	movs	r1, #4
 8020cda:	f009 faf1 	bl	802a2c0 <_ZdlPvj>
 8020cde:	4620      	mov	r0, r4
 8020ce0:	bd10      	pop	{r4, pc}

08020ce2 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8020ce2:	b510      	push	{r4, lr}
 8020ce4:	4604      	mov	r4, r0
 8020ce6:	2104      	movs	r1, #4
 8020ce8:	f009 faea 	bl	802a2c0 <_ZdlPvj>
 8020cec:	4620      	mov	r0, r4
 8020cee:	bd10      	pop	{r4, pc}

08020cf0 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8020cf0:	b510      	push	{r4, lr}
 8020cf2:	4604      	mov	r4, r0
 8020cf4:	2104      	movs	r1, #4
 8020cf6:	f009 fae3 	bl	802a2c0 <_ZdlPvj>
 8020cfa:	4620      	mov	r0, r4
 8020cfc:	bd10      	pop	{r4, pc}

08020cfe <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8020cfe:	b510      	push	{r4, lr}
 8020d00:	4604      	mov	r4, r0
 8020d02:	2104      	movs	r1, #4
 8020d04:	f009 fadc 	bl	802a2c0 <_ZdlPvj>
 8020d08:	4620      	mov	r0, r4
 8020d0a:	bd10      	pop	{r4, pc}

08020d0c <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8020d0c:	b510      	push	{r4, lr}
 8020d0e:	4604      	mov	r4, r0
 8020d10:	2104      	movs	r1, #4
 8020d12:	f009 fad5 	bl	802a2c0 <_ZdlPvj>
 8020d16:	4620      	mov	r0, r4
 8020d18:	bd10      	pop	{r4, pc}

08020d1a <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 8020d1a:	b510      	push	{r4, lr}
 8020d1c:	4604      	mov	r4, r0
 8020d1e:	2104      	movs	r1, #4
 8020d20:	f009 face 	bl	802a2c0 <_ZdlPvj>
 8020d24:	4620      	mov	r0, r4
 8020d26:	bd10      	pop	{r4, pc}

08020d28 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 8020d28:	b510      	push	{r4, lr}
 8020d2a:	4604      	mov	r4, r0
 8020d2c:	2104      	movs	r1, #4
 8020d2e:	f009 fac7 	bl	802a2c0 <_ZdlPvj>
 8020d32:	4620      	mov	r0, r4
 8020d34:	bd10      	pop	{r4, pc}

08020d36 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 8020d36:	b510      	push	{r4, lr}
 8020d38:	4604      	mov	r4, r0
 8020d3a:	2104      	movs	r1, #4
 8020d3c:	f009 fac0 	bl	802a2c0 <_ZdlPvj>
 8020d40:	4620      	mov	r0, r4
 8020d42:	bd10      	pop	{r4, pc}

08020d44 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 8020d44:	b510      	push	{r4, lr}
 8020d46:	4604      	mov	r4, r0
 8020d48:	2104      	movs	r1, #4
 8020d4a:	f009 fab9 	bl	802a2c0 <_ZdlPvj>
 8020d4e:	4620      	mov	r0, r4
 8020d50:	bd10      	pop	{r4, pc}
	...

08020d54 <_ZN8touchgfx8LCD32bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8020d54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020d56:	4606      	mov	r6, r0
 8020d58:	b087      	sub	sp, #28
 8020d5a:	4615      	mov	r5, r2
 8020d5c:	461f      	mov	r7, r3
 8020d5e:	b353      	cbz	r3, 8020db6 <_ZN8touchgfx8LCD32bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8020d60:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8020d64:	2b00      	cmp	r3, #0
 8020d66:	dd26      	ble.n	8020db6 <_ZN8touchgfx8LCD32bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8020d68:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8020d6c:	2b00      	cmp	r3, #0
 8020d6e:	dd22      	ble.n	8020db6 <_ZN8touchgfx8LCD32bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8020d70:	6808      	ldr	r0, [r1, #0]
 8020d72:	aa04      	add	r2, sp, #16
 8020d74:	6849      	ldr	r1, [r1, #4]
 8020d76:	4c1b      	ldr	r4, [pc, #108]	@ (8020de4 <_ZN8touchgfx8LCD32bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 8020d78:	c203      	stmia	r2!, {r0, r1}
 8020d7a:	a804      	add	r0, sp, #16
 8020d7c:	f7f7 fe6e 	bl	8018a5c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020d80:	6820      	ldr	r0, [r4, #0]
 8020d82:	6803      	ldr	r3, [r0, #0]
 8020d84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8020d86:	4798      	blx	r3
 8020d88:	2fff      	cmp	r7, #255	@ 0xff
 8020d8a:	d016      	beq.n	8020dba <_ZN8touchgfx8LCD32bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 8020d8c:	f010 0f08 	tst.w	r0, #8
 8020d90:	6820      	ldr	r0, [r4, #0]
 8020d92:	d015      	beq.n	8020dc0 <_ZN8touchgfx8LCD32bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 8020d94:	2400      	movs	r4, #0
 8020d96:	6801      	ldr	r1, [r0, #0]
 8020d98:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8020d9c:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8020da0:	e9cd 7402 	strd	r7, r4, [sp, #8]
 8020da4:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8020da8:	9401      	str	r4, [sp, #4]
 8020daa:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8020dae:	9400      	str	r4, [sp, #0]
 8020db0:	6e0c      	ldr	r4, [r1, #96]	@ 0x60
 8020db2:	4629      	mov	r1, r5
 8020db4:	47a0      	blx	r4
 8020db6:	b007      	add	sp, #28
 8020db8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020dba:	f010 0f02 	tst.w	r0, #2
 8020dbe:	e7e7      	b.n	8020d90 <_ZN8touchgfx8LCD32bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 8020dc0:	6803      	ldr	r3, [r0, #0]
 8020dc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020dc4:	4798      	blx	r3
 8020dc6:	4b08      	ldr	r3, [pc, #32]	@ (8020de8 <_ZN8touchgfx8LCD32bpp8fillRectERKNS_4RectENS_9colortypeEh+0x94>)
 8020dc8:	4601      	mov	r1, r0
 8020dca:	4630      	mov	r0, r6
 8020dcc:	881a      	ldrh	r2, [r3, #0]
 8020dce:	6833      	ldr	r3, [r6, #0]
 8020dd0:	e9cd 5700 	strd	r5, r7, [sp]
 8020dd4:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8020dd6:	ab04      	add	r3, sp, #16
 8020dd8:	47a8      	blx	r5
 8020dda:	6820      	ldr	r0, [r4, #0]
 8020ddc:	6803      	ldr	r3, [r0, #0]
 8020dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020de0:	4798      	blx	r3
 8020de2:	e7e8      	b.n	8020db6 <_ZN8touchgfx8LCD32bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8020de4:	20029ed8 	.word	0x20029ed8
 8020de8:	20029ed2 	.word	0x20029ed2

08020dec <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 8020dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020df0:	b08d      	sub	sp, #52	@ 0x34
 8020df2:	469b      	mov	fp, r3
 8020df4:	4617      	mov	r7, r2
 8020df6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8020dfa:	f9bd a05c 	ldrsh.w	sl, [sp, #92]	@ 0x5c
 8020dfe:	4604      	mov	r4, r0
 8020e00:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8020e04:	a806      	add	r0, sp, #24
 8020e06:	f9bd 6060 	ldrsh.w	r6, [sp, #96]	@ 0x60
 8020e0a:	460d      	mov	r5, r1
 8020e0c:	4659      	mov	r1, fp
 8020e0e:	f8ad 2018 	strh.w	r2, [sp, #24]
 8020e12:	f8ad 301a 	strh.w	r3, [sp, #26]
 8020e16:	f8ad a01c 	strh.w	sl, [sp, #28]
 8020e1a:	f8ad 601e 	strh.w	r6, [sp, #30]
 8020e1e:	f7f1 fc43 	bl	80126a8 <_ZN8touchgfx4RectaNERKS0_>
 8020e22:	4639      	mov	r1, r7
 8020e24:	a806      	add	r0, sp, #24
 8020e26:	f7f1 fc3f 	bl	80126a8 <_ZN8touchgfx4RectaNERKS0_>
 8020e2a:	4b6b      	ldr	r3, [pc, #428]	@ (8020fd8 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ec>)
 8020e2c:	f8b3 9000 	ldrh.w	r9, [r3]
 8020e30:	4b6a      	ldr	r3, [pc, #424]	@ (8020fdc <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>)
 8020e32:	fa0f f289 	sxth.w	r2, r9
 8020e36:	8819      	ldrh	r1, [r3, #0]
 8020e38:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8020e3c:	b208      	sxth	r0, r1
 8020e3e:	2b00      	cmp	r3, #0
 8020e40:	da07      	bge.n	8020e52 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x66>
 8020e42:	f8bd 701c 	ldrh.w	r7, [sp, #28]
 8020e46:	443b      	add	r3, r7
 8020e48:	f8ad 301c 	strh.w	r3, [sp, #28]
 8020e4c:	2300      	movs	r3, #0
 8020e4e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8020e52:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8020e56:	f9bd 701c 	ldrsh.w	r7, [sp, #28]
 8020e5a:	1ad2      	subs	r2, r2, r3
 8020e5c:	4297      	cmp	r7, r2
 8020e5e:	bfc4      	itt	gt
 8020e60:	eba9 0203 	subgt.w	r2, r9, r3
 8020e64:	f8ad 201c 	strhgt.w	r2, [sp, #28]
 8020e68:	f9bd 201a 	ldrsh.w	r2, [sp, #26]
 8020e6c:	2a00      	cmp	r2, #0
 8020e6e:	da07      	bge.n	8020e80 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x94>
 8020e70:	f8bd 701e 	ldrh.w	r7, [sp, #30]
 8020e74:	443a      	add	r2, r7
 8020e76:	f8ad 201e 	strh.w	r2, [sp, #30]
 8020e7a:	2200      	movs	r2, #0
 8020e7c:	f8ad 201a 	strh.w	r2, [sp, #26]
 8020e80:	f9bd 201a 	ldrsh.w	r2, [sp, #26]
 8020e84:	f9bd 701e 	ldrsh.w	r7, [sp, #30]
 8020e88:	1a80      	subs	r0, r0, r2
 8020e8a:	4287      	cmp	r7, r0
 8020e8c:	f9bd 701c 	ldrsh.w	r7, [sp, #28]
 8020e90:	bfc4      	itt	gt
 8020e92:	1a88      	subgt	r0, r1, r2
 8020e94:	f8ad 001e 	strhgt.w	r0, [sp, #30]
 8020e98:	4851      	ldr	r0, [pc, #324]	@ (8020fe0 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f4>)
 8020e9a:	7800      	ldrb	r0, [r0, #0]
 8020e9c:	2800      	cmp	r0, #0
 8020e9e:	d178      	bne.n	8020f92 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a6>
 8020ea0:	454f      	cmp	r7, r9
 8020ea2:	bf14      	ite	ne
 8020ea4:	f04f 0900 	movne.w	r9, #0
 8020ea8:	f04f 0901 	moveq.w	r9, #1
 8020eac:	2f00      	cmp	r7, #0
 8020eae:	dd74      	ble.n	8020f9a <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ae>
 8020eb0:	f9bd 801e 	ldrsh.w	r8, [sp, #30]
 8020eb4:	f1b8 0f00 	cmp.w	r8, #0
 8020eb8:	dd6f      	ble.n	8020f9a <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ae>
 8020eba:	f8bb 1000 	ldrh.w	r1, [fp]
 8020ebe:	a808      	add	r0, sp, #32
 8020ec0:	f8ad a02c 	strh.w	sl, [sp, #44]	@ 0x2c
 8020ec4:	1a5b      	subs	r3, r3, r1
 8020ec6:	a90a      	add	r1, sp, #40	@ 0x28
 8020ec8:	f8ad 602e 	strh.w	r6, [sp, #46]	@ 0x2e
 8020ecc:	b21b      	sxth	r3, r3
 8020ece:	f8ad 7024 	strh.w	r7, [sp, #36]	@ 0x24
 8020ed2:	f8ad 8026 	strh.w	r8, [sp, #38]	@ 0x26
 8020ed6:	9302      	str	r3, [sp, #8]
 8020ed8:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8020edc:	1ad2      	subs	r2, r2, r3
 8020ede:	b213      	sxth	r3, r2
 8020ee0:	9303      	str	r3, [sp, #12]
 8020ee2:	9b02      	ldr	r3, [sp, #8]
 8020ee4:	f8ad 3020 	strh.w	r3, [sp, #32]
 8020ee8:	9b03      	ldr	r3, [sp, #12]
 8020eea:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8020eee:	2300      	movs	r3, #0
 8020ef0:	930a      	str	r3, [sp, #40]	@ 0x28
 8020ef2:	f7f7 fddb 	bl	8018aac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020ef6:	a806      	add	r0, sp, #24
 8020ef8:	f7f7 fdb0 	bl	8018a5c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020efc:	a80a      	add	r0, sp, #40	@ 0x28
 8020efe:	f7f7 fdad 	bl	8018a5c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020f02:	4b38      	ldr	r3, [pc, #224]	@ (8020fe4 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f8>)
 8020f04:	4628      	mov	r0, r5
 8020f06:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	@ 0x2c
 8020f0a:	881a      	ldrh	r2, [r3, #0]
 8020f0c:	682b      	ldr	r3, [r5, #0]
 8020f0e:	9205      	str	r2, [sp, #20]
 8020f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8020f12:	4798      	blx	r3
 8020f14:	f8bd 6022 	ldrh.w	r6, [sp, #34]	@ 0x22
 8020f18:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8020f1c:	f3c0 0b8f 	ubfx	fp, r0, #2, #16
 8020f20:	fb1a 3306 	smlabb	r3, sl, r6, r3
 8020f24:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 8020f26:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 8020f2a:	4b2f      	ldr	r3, [pc, #188]	@ (8020fe8 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1fc>)
 8020f2c:	6818      	ldr	r0, [r3, #0]
 8020f2e:	9304      	str	r3, [sp, #16]
 8020f30:	6801      	ldr	r1, [r0, #0]
 8020f32:	6b09      	ldr	r1, [r1, #48]	@ 0x30
 8020f34:	4788      	blx	r1
 8020f36:	f9bd 501a 	ldrsh.w	r5, [sp, #26]
 8020f3a:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 8020f3e:	fb0b 1505 	mla	r5, fp, r5, r1
 8020f42:	eb00 0385 	add.w	r3, r0, r5, lsl #2
 8020f46:	9301      	str	r3, [sp, #4]
 8020f48:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8020f4c:	f1b9 0f00 	cmp.w	r9, #0
 8020f50:	d12c      	bne.n	8020fac <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1c0>
 8020f52:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8020f56:	f04f 0900 	mov.w	r9, #0
 8020f5a:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8020f5e:	f8df b088 	ldr.w	fp, [pc, #136]	@ 8020fe8 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1fc>
 8020f62:	9304      	str	r3, [sp, #16]
 8020f64:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	@ 0x26
 8020f68:	454b      	cmp	r3, r9
 8020f6a:	dd2d      	ble.n	8020fc8 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1dc>
 8020f6c:	f8db 0000 	ldr.w	r0, [fp]
 8020f70:	4631      	mov	r1, r6
 8020f72:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	@ 0x24
 8020f76:	4456      	add	r6, sl
 8020f78:	6802      	ldr	r2, [r0, #0]
 8020f7a:	f109 0901 	add.w	r9, r9, #1
 8020f7e:	009b      	lsls	r3, r3, #2
 8020f80:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8020f82:	4615      	mov	r5, r2
 8020f84:	9a01      	ldr	r2, [sp, #4]
 8020f86:	47a8      	blx	r5
 8020f88:	9a01      	ldr	r2, [sp, #4]
 8020f8a:	9b04      	ldr	r3, [sp, #16]
 8020f8c:	441a      	add	r2, r3
 8020f8e:	9201      	str	r2, [sp, #4]
 8020f90:	e7e8      	b.n	8020f64 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x178>
 8020f92:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 8020f96:	4589      	cmp	r9, r1
 8020f98:	e783      	b.n	8020ea2 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb6>
 8020f9a:	2300      	movs	r3, #0
 8020f9c:	8023      	strh	r3, [r4, #0]
 8020f9e:	8063      	strh	r3, [r4, #2]
 8020fa0:	80a3      	strh	r3, [r4, #4]
 8020fa2:	80e3      	strh	r3, [r4, #6]
 8020fa4:	4620      	mov	r0, r4
 8020fa6:	b00d      	add	sp, #52	@ 0x34
 8020fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020fac:	4592      	cmp	sl, r2
 8020fae:	d1d0      	bne.n	8020f52 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x166>
 8020fb0:	6818      	ldr	r0, [r3, #0]
 8020fb2:	4631      	mov	r1, r6
 8020fb4:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	@ 0x26
 8020fb8:	6802      	ldr	r2, [r0, #0]
 8020fba:	fb0b f303 	mul.w	r3, fp, r3
 8020fbe:	f8d2 9034 	ldr.w	r9, [r2, #52]	@ 0x34
 8020fc2:	009b      	lsls	r3, r3, #2
 8020fc4:	9a01      	ldr	r2, [sp, #4]
 8020fc6:	47c8      	blx	r9
 8020fc8:	9b02      	ldr	r3, [sp, #8]
 8020fca:	80a7      	strh	r7, [r4, #4]
 8020fcc:	8023      	strh	r3, [r4, #0]
 8020fce:	9b03      	ldr	r3, [sp, #12]
 8020fd0:	f8a4 8006 	strh.w	r8, [r4, #6]
 8020fd4:	8063      	strh	r3, [r4, #2]
 8020fd6:	e7e5      	b.n	8020fa4 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b8>
 8020fd8:	20029ecc 	.word	0x20029ecc
 8020fdc:	20029ece 	.word	0x20029ece
 8020fe0:	20029ed0 	.word	0x20029ed0
 8020fe4:	20029ed2 	.word	0x20029ed2
 8020fe8:	20029ed8 	.word	0x20029ed8

08020fec <_ZN8touchgfx8LCD32bppC1Ev>:
 8020fec:	2200      	movs	r2, #0
 8020fee:	4912      	ldr	r1, [pc, #72]	@ (8021038 <_ZN8touchgfx8LCD32bppC1Ev+0x4c>)
 8020ff0:	6042      	str	r2, [r0, #4]
 8020ff2:	6001      	str	r1, [r0, #0]
 8020ff4:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8020ff8:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8020ffc:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8021000:	e9c0 2208 	strd	r2, r2, [r0, #32]
 8021004:	e9c0 220a 	strd	r2, r2, [r0, #40]	@ 0x28
 8021008:	e9c0 220c 	strd	r2, r2, [r0, #48]	@ 0x30
 802100c:	e9c0 220e 	strd	r2, r2, [r0, #56]	@ 0x38
 8021010:	e9c0 2210 	strd	r2, r2, [r0, #64]	@ 0x40
 8021014:	e9c0 2212 	strd	r2, r2, [r0, #72]	@ 0x48
 8021018:	e9c0 2214 	strd	r2, r2, [r0, #80]	@ 0x50
 802101c:	e9c0 2216 	strd	r2, r2, [r0, #88]	@ 0x58
 8021020:	e9c0 2218 	strd	r2, r2, [r0, #96]	@ 0x60
 8021024:	e9c0 221a 	strd	r2, r2, [r0, #104]	@ 0x68
 8021028:	e9c0 221c 	strd	r2, r2, [r0, #112]	@ 0x70
 802102c:	e9c0 221e 	strd	r2, r2, [r0, #120]	@ 0x78
 8021030:	f8c0 2080 	str.w	r2, [r0, #128]	@ 0x80
 8021034:	4770      	bx	lr
 8021036:	bf00      	nop
 8021038:	08042adc 	.word	0x08042adc

0802103c <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h>:
 802103c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021040:	4604      	mov	r4, r0
 8021042:	b08f      	sub	sp, #60	@ 0x3c
 8021044:	460d      	mov	r5, r1
 8021046:	461e      	mov	r6, r3
 8021048:	2b00      	cmp	r3, #0
 802104a:	d052      	beq.n	80210f2 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0xb6>
 802104c:	6808      	ldr	r0, [r1, #0]
 802104e:	ab0a      	add	r3, sp, #40	@ 0x28
 8021050:	6849      	ldr	r1, [r1, #4]
 8021052:	4f70      	ldr	r7, [pc, #448]	@ (8021214 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x1d8>)
 8021054:	f8df 91c0 	ldr.w	r9, [pc, #448]	@ 8021218 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x1dc>
 8021058:	c303      	stmia	r3!, {r0, r1}
 802105a:	6810      	ldr	r0, [r2, #0]
 802105c:	ab0c      	add	r3, sp, #48	@ 0x30
 802105e:	6851      	ldr	r1, [r2, #4]
 8021060:	c303      	stmia	r3!, {r0, r1}
 8021062:	a80a      	add	r0, sp, #40	@ 0x28
 8021064:	f7f7 fcfa 	bl	8018a5c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021068:	4629      	mov	r1, r5
 802106a:	a80c      	add	r0, sp, #48	@ 0x30
 802106c:	f7f7 fd1e 	bl	8018aac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021070:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8021074:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8021078:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 802107c:	6838      	ldr	r0, [r7, #0]
 802107e:	fb11 2103 	smlabb	r1, r1, r3, r2
 8021082:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	@ 0x34
 8021086:	f9bd 5036 	ldrsh.w	r5, [sp, #54]	@ 0x36
 802108a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802108e:	440c      	add	r4, r1
 8021090:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 8021094:	440a      	add	r2, r1
 8021096:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 802109a:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 802109e:	4413      	add	r3, r2
 80210a0:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 80210a4:	6803      	ldr	r3, [r0, #0]
 80210a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80210a8:	4798      	blx	r3
 80210aa:	2eff      	cmp	r6, #255	@ 0xff
 80210ac:	d024      	beq.n	80210f8 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0xbc>
 80210ae:	f010 0f04 	tst.w	r0, #4
 80210b2:	6838      	ldr	r0, [r7, #0]
 80210b4:	d023      	beq.n	80210fe <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0xc2>
 80210b6:	2100      	movs	r1, #0
 80210b8:	f04f 0c02 	mov.w	ip, #2
 80210bc:	6807      	ldr	r7, [r0, #0]
 80210be:	b2ad      	uxth	r5, r5
 80210c0:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 80210c4:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 80210c8:	e9cd c107 	strd	ip, r1, [sp, #28]
 80210cc:	f04f 0c01 	mov.w	ip, #1
 80210d0:	f8cd c018 	str.w	ip, [sp, #24]
 80210d4:	f8b9 c000 	ldrh.w	ip, [r9]
 80210d8:	9603      	str	r6, [sp, #12]
 80210da:	9501      	str	r5, [sp, #4]
 80210dc:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 80210e0:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 80210e4:	9102      	str	r1, [sp, #8]
 80210e6:	fa1f f188 	uxth.w	r1, r8
 80210ea:	9100      	str	r1, [sp, #0]
 80210ec:	4621      	mov	r1, r4
 80210ee:	6c3d      	ldr	r5, [r7, #64]	@ 0x40
 80210f0:	47a8      	blx	r5
 80210f2:	b00f      	add	sp, #60	@ 0x3c
 80210f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80210f8:	f010 0f01 	tst.w	r0, #1
 80210fc:	e7d9      	b.n	80210b2 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x76>
 80210fe:	6803      	ldr	r3, [r0, #0]
 8021100:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021102:	4798      	blx	r3
 8021104:	f8b9 3000 	ldrh.w	r3, [r9]
 8021108:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 802110c:	2eff      	cmp	r6, #255	@ 0xff
 802110e:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 8021112:	fb03 f505 	mul.w	r5, r3, r5
 8021116:	f9bd 702c 	ldrsh.w	r7, [sp, #44]	@ 0x2c
 802111a:	ea4f 0c88 	mov.w	ip, r8, lsl #2
 802111e:	fb03 1202 	mla	r2, r3, r2, r1
 8021122:	eba3 0308 	sub.w	r3, r3, r8
 8021126:	eba7 0708 	sub.w	r7, r7, r8
 802112a:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 802112e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8021132:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8021136:	ea4f 0383 	mov.w	r3, r3, lsl #2
 802113a:	d04c      	beq.n	80211d6 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x19a>
 802113c:	42a8      	cmp	r0, r5
 802113e:	d263      	bcs.n	8021208 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x1cc>
 8021140:	eb00 0e0c 	add.w	lr, r0, ip
 8021144:	4621      	mov	r1, r4
 8021146:	4570      	cmp	r0, lr
 8021148:	460c      	mov	r4, r1
 802114a:	f101 0103 	add.w	r1, r1, #3
 802114e:	d23d      	bcs.n	80211cc <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x190>
 8021150:	6802      	ldr	r2, [r0, #0]
 8021152:	f811 bc01 	ldrb.w	fp, [r1, #-1]
 8021156:	ea4f 6912 	mov.w	r9, r2, lsr #24
 802115a:	fb1b fb06 	smulbb	fp, fp, r6
 802115e:	fa5f fa82 	uxtb.w	sl, r2
 8021162:	fb06 f809 	mul.w	r8, r6, r9
 8021166:	f108 0401 	add.w	r4, r8, #1
 802116a:	eb04 2428 	add.w	r4, r4, r8, asr #8
 802116e:	eb06 0809 	add.w	r8, r6, r9
 8021172:	1224      	asrs	r4, r4, #8
 8021174:	eba9 0904 	sub.w	r9, r9, r4
 8021178:	eba8 0804 	sub.w	r8, r8, r4
 802117c:	f811 4c03 	ldrb.w	r4, [r1, #-3]
 8021180:	fb09 fa0a 	mul.w	sl, r9, sl
 8021184:	fa5f f888 	uxtb.w	r8, r8
 8021188:	fb04 a406 	mla	r4, r4, r6, sl
 802118c:	fbb4 f4f8 	udiv	r4, r4, r8
 8021190:	b2e4      	uxtb	r4, r4
 8021192:	ea44 6a08 	orr.w	sl, r4, r8, lsl #24
 8021196:	f3c2 4407 	ubfx	r4, r2, #16, #8
 802119a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802119e:	fb09 b404 	mla	r4, r9, r4, fp
 80211a2:	fbb4 f4f8 	udiv	r4, r4, r8
 80211a6:	0424      	lsls	r4, r4, #16
 80211a8:	f404 047f 	and.w	r4, r4, #16711680	@ 0xff0000
 80211ac:	ea4a 0404 	orr.w	r4, sl, r4
 80211b0:	f811 ac02 	ldrb.w	sl, [r1, #-2]
 80211b4:	fb1a fa06 	smulbb	sl, sl, r6
 80211b8:	fb09 a202 	mla	r2, r9, r2, sl
 80211bc:	fbb2 f2f8 	udiv	r2, r2, r8
 80211c0:	0212      	lsls	r2, r2, #8
 80211c2:	b292      	uxth	r2, r2
 80211c4:	4322      	orrs	r2, r4
 80211c6:	f840 2b04 	str.w	r2, [r0], #4
 80211ca:	e7bc      	b.n	8021146 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x10a>
 80211cc:	4418      	add	r0, r3
 80211ce:	443c      	add	r4, r7
 80211d0:	e7b4      	b.n	802113c <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x100>
 80211d2:	4418      	add	r0, r3
 80211d4:	443c      	add	r4, r7
 80211d6:	42a8      	cmp	r0, r5
 80211d8:	d216      	bcs.n	8021208 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x1cc>
 80211da:	eb00 060c 	add.w	r6, r0, ip
 80211de:	4621      	mov	r1, r4
 80211e0:	42b0      	cmp	r0, r6
 80211e2:	460c      	mov	r4, r1
 80211e4:	f101 0103 	add.w	r1, r1, #3
 80211e8:	d2f3      	bcs.n	80211d2 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x196>
 80211ea:	f811 2c03 	ldrb.w	r2, [r1, #-3]
 80211ee:	f811 4c01 	ldrb.w	r4, [r1, #-1]
 80211f2:	f042 427f 	orr.w	r2, r2, #4278190080	@ 0xff000000
 80211f6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80211fa:	f811 4c02 	ldrb.w	r4, [r1, #-2]
 80211fe:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 8021202:	f840 2b04 	str.w	r2, [r0], #4
 8021206:	e7eb      	b.n	80211e0 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x1a4>
 8021208:	4b02      	ldr	r3, [pc, #8]	@ (8021214 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x1d8>)
 802120a:	6818      	ldr	r0, [r3, #0]
 802120c:	6803      	ldr	r3, [r0, #0]
 802120e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021210:	4798      	blx	r3
 8021212:	e76e      	b.n	80210f2 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0xb6>
 8021214:	20029ed8 	.word	0x20029ed8
 8021218:	20029ed2 	.word	0x20029ed2

0802121c <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 802121c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021220:	4607      	mov	r7, r0
 8021222:	b091      	sub	sp, #68	@ 0x44
 8021224:	460c      	mov	r4, r1
 8021226:	4698      	mov	r8, r3
 8021228:	2b00      	cmp	r3, #0
 802122a:	d04f      	beq.n	80212cc <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb0>
 802122c:	6808      	ldr	r0, [r1, #0]
 802122e:	ab0c      	add	r3, sp, #48	@ 0x30
 8021230:	6849      	ldr	r1, [r1, #4]
 8021232:	4e7e      	ldr	r6, [pc, #504]	@ (802142c <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x210>)
 8021234:	f8df 91f8 	ldr.w	r9, [pc, #504]	@ 8021430 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x214>
 8021238:	c303      	stmia	r3!, {r0, r1}
 802123a:	6810      	ldr	r0, [r2, #0]
 802123c:	ab0e      	add	r3, sp, #56	@ 0x38
 802123e:	6851      	ldr	r1, [r2, #4]
 8021240:	c303      	stmia	r3!, {r0, r1}
 8021242:	a80c      	add	r0, sp, #48	@ 0x30
 8021244:	f7f7 fc0a 	bl	8018a5c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021248:	4621      	mov	r1, r4
 802124a:	a80e      	add	r0, sp, #56	@ 0x38
 802124c:	f7f7 fc2e 	bl	8018aac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021250:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 8021254:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 8021258:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 802125c:	6830      	ldr	r0, [r6, #0]
 802125e:	fb11 2103 	smlabb	r1, r1, r3, r2
 8021262:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	@ 0x3c
 8021266:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	@ 0x3e
 802126a:	eb07 0741 	add.w	r7, r7, r1, lsl #1
 802126e:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 8021272:	440a      	add	r2, r1
 8021274:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 8021278:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 802127c:	4413      	add	r3, r2
 802127e:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 8021282:	6803      	ldr	r3, [r0, #0]
 8021284:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8021286:	4798      	blx	r3
 8021288:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 802128c:	d021      	beq.n	80212d2 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 802128e:	f010 0f04 	tst.w	r0, #4
 8021292:	6830      	ldr	r0, [r6, #0]
 8021294:	d020      	beq.n	80212d8 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xbc>
 8021296:	2100      	movs	r1, #0
 8021298:	f04f 0c02 	mov.w	ip, #2
 802129c:	6806      	ldr	r6, [r0, #0]
 802129e:	b2a4      	uxth	r4, r4
 80212a0:	9106      	str	r1, [sp, #24]
 80212a2:	b2ad      	uxth	r5, r5
 80212a4:	f8bd 303a 	ldrh.w	r3, [sp, #58]	@ 0x3a
 80212a8:	f8bd 2038 	ldrh.w	r2, [sp, #56]	@ 0x38
 80212ac:	e9cd c107 	strd	ip, r1, [sp, #28]
 80212b0:	f8b9 c000 	ldrh.w	ip, [r9]
 80212b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80212b8:	9501      	str	r5, [sp, #4]
 80212ba:	9400      	str	r4, [sp, #0]
 80212bc:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 80212c0:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 80212c4:	9102      	str	r1, [sp, #8]
 80212c6:	4639      	mov	r1, r7
 80212c8:	6c34      	ldr	r4, [r6, #64]	@ 0x40
 80212ca:	47a0      	blx	r4
 80212cc:	b011      	add	sp, #68	@ 0x44
 80212ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80212d2:	f010 0f01 	tst.w	r0, #1
 80212d6:	e7dc      	b.n	8021292 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x76>
 80212d8:	6803      	ldr	r3, [r0, #0]
 80212da:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80212de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80212e0:	4798      	blx	r3
 80212e2:	f8b9 c000 	ldrh.w	ip, [r9]
 80212e6:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 80212ea:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 80212ee:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 80212f2:	f9bd a034 	ldrsh.w	sl, [sp, #52]	@ 0x34
 80212f6:	fb0c 2303 	mla	r3, ip, r3, r2
 80212fa:	ebaa 0a04 	sub.w	sl, sl, r4
 80212fe:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8021302:	fb0c f305 	mul.w	r3, ip, r5
 8021306:	ebac 0c04 	sub.w	ip, ip, r4
 802130a:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 802130e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8021312:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8021316:	d02d      	beq.n	8021374 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x158>
 8021318:	ea4f 6208 	mov.w	r2, r8, lsl #24
 802131c:	920a      	str	r2, [sp, #40]	@ 0x28
 802131e:	4298      	cmp	r0, r3
 8021320:	d27d      	bcs.n	802141e <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x202>
 8021322:	eb00 020b 	add.w	r2, r0, fp
 8021326:	920b      	str	r2, [sp, #44]	@ 0x2c
 8021328:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 802132a:	4290      	cmp	r0, r2
 802132c:	d274      	bcs.n	8021418 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1fc>
 802132e:	f837 eb02 	ldrh.w	lr, [r7], #2
 8021332:	f850 4b04 	ldr.w	r4, [r0], #4
 8021336:	ea4f 05ce 	mov.w	r5, lr, lsl #3
 802133a:	ea4f 02ee 	mov.w	r2, lr, asr #3
 802133e:	ea4f 262e 	mov.w	r6, lr, asr #8
 8021342:	b2ed      	uxtb	r5, r5
 8021344:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8021348:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 802134c:	ea5f 6914 	movs.w	r9, r4, lsr #24
 8021350:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 8021354:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 8021358:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 802135c:	d129      	bne.n	80213b2 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x196>
 802135e:	0212      	lsls	r2, r2, #8
 8021360:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8021364:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8021366:	4335      	orrs	r5, r6
 8021368:	4315      	orrs	r5, r2
 802136a:	f840 5c04 	str.w	r5, [r0, #-4]
 802136e:	e7db      	b.n	8021328 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x10c>
 8021370:	4460      	add	r0, ip
 8021372:	4457      	add	r7, sl
 8021374:	4298      	cmp	r0, r3
 8021376:	d252      	bcs.n	802141e <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x202>
 8021378:	eb00 040b 	add.w	r4, r0, fp
 802137c:	42a0      	cmp	r0, r4
 802137e:	d2f7      	bcs.n	8021370 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x154>
 8021380:	f837 5b02 	ldrh.w	r5, [r7], #2
 8021384:	10e9      	asrs	r1, r5, #3
 8021386:	122e      	asrs	r6, r5, #8
 8021388:	f001 02fc 	and.w	r2, r1, #252	@ 0xfc
 802138c:	00ed      	lsls	r5, r5, #3
 802138e:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 8021392:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 8021396:	b2ed      	uxtb	r5, r5
 8021398:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 802139c:	0212      	lsls	r2, r2, #8
 802139e:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 80213a2:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80213a6:	432a      	orrs	r2, r5
 80213a8:	f042 427f 	orr.w	r2, r2, #4278190080	@ 0xff000000
 80213ac:	f840 2b04 	str.w	r2, [r0], #4
 80213b0:	e7e4      	b.n	802137c <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x160>
 80213b2:	fb18 f505 	smulbb	r5, r8, r5
 80213b6:	fb08 fe09 	mul.w	lr, r8, r9
 80213ba:	fb18 f606 	smulbb	r6, r8, r6
 80213be:	fb18 f202 	smulbb	r2, r8, r2
 80213c2:	f10e 0101 	add.w	r1, lr, #1
 80213c6:	eb01 212e 	add.w	r1, r1, lr, asr #8
 80213ca:	eb08 0e09 	add.w	lr, r8, r9
 80213ce:	1209      	asrs	r1, r1, #8
 80213d0:	eba9 0901 	sub.w	r9, r9, r1
 80213d4:	ebae 0e01 	sub.w	lr, lr, r1
 80213d8:	b2e1      	uxtb	r1, r4
 80213da:	fa5f fe8e 	uxtb.w	lr, lr
 80213de:	fb09 5101 	mla	r1, r9, r1, r5
 80213e2:	f3c4 4507 	ubfx	r5, r4, #16, #8
 80213e6:	fb09 6605 	mla	r6, r9, r5, r6
 80213ea:	fbb1 f1fe 	udiv	r1, r1, lr
 80213ee:	fbb6 f6fe 	udiv	r6, r6, lr
 80213f2:	b2c9      	uxtb	r1, r1
 80213f4:	0436      	lsls	r6, r6, #16
 80213f6:	ea41 610e 	orr.w	r1, r1, lr, lsl #24
 80213fa:	f406 067f 	and.w	r6, r6, #16711680	@ 0xff0000
 80213fe:	4331      	orrs	r1, r6
 8021400:	f3c4 2607 	ubfx	r6, r4, #8, #8
 8021404:	fb09 2606 	mla	r6, r9, r6, r2
 8021408:	fbb6 f6fe 	udiv	r6, r6, lr
 802140c:	0236      	lsls	r6, r6, #8
 802140e:	b2b6      	uxth	r6, r6
 8021410:	4331      	orrs	r1, r6
 8021412:	f840 1c04 	str.w	r1, [r0, #-4]
 8021416:	e787      	b.n	8021328 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x10c>
 8021418:	4460      	add	r0, ip
 802141a:	4457      	add	r7, sl
 802141c:	e77f      	b.n	802131e <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x102>
 802141e:	4b03      	ldr	r3, [pc, #12]	@ (802142c <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x210>)
 8021420:	6818      	ldr	r0, [r3, #0]
 8021422:	6803      	ldr	r3, [r0, #0]
 8021424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021426:	4798      	blx	r3
 8021428:	e750      	b.n	80212cc <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb0>
 802142a:	bf00      	nop
 802142c:	20029ed8 	.word	0x20029ed8
 8021430:	20029ed2 	.word	0x20029ed2

08021434 <_ZN8touchgfx8LCD32bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 8021434:	b4f0      	push	{r4, r5, r6, r7}
 8021436:	4616      	mov	r6, r2
 8021438:	461c      	mov	r4, r3
 802143a:	460d      	mov	r5, r1
 802143c:	9a04      	ldr	r2, [sp, #16]
 802143e:	2e01      	cmp	r6, #1
 8021440:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8021444:	f89d 7018 	ldrb.w	r7, [sp, #24]
 8021448:	d012      	beq.n	8021470 <_ZN8touchgfx8LCD32bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
 802144a:	d303      	bcc.n	8021454 <_ZN8touchgfx8LCD32bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x20>
 802144c:	2e02      	cmp	r6, #2
 802144e:	d006      	beq.n	802145e <_ZN8touchgfx8LCD32bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x2a>
 8021450:	bcf0      	pop	{r4, r5, r6, r7}
 8021452:	4770      	bx	lr
 8021454:	4621      	mov	r1, r4
 8021456:	4628      	mov	r0, r5
 8021458:	bcf0      	pop	{r4, r5, r6, r7}
 802145a:	f7ff bedf 	b.w	802121c <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 802145e:	6805      	ldr	r5, [r0, #0]
 8021460:	e9cd 3704 	strd	r3, r7, [sp, #16]
 8021464:	68ed      	ldr	r5, [r5, #12]
 8021466:	4613      	mov	r3, r2
 8021468:	4622      	mov	r2, r4
 802146a:	46ac      	mov	ip, r5
 802146c:	bcf0      	pop	{r4, r5, r6, r7}
 802146e:	4760      	bx	ip
 8021470:	4621      	mov	r1, r4
 8021472:	4628      	mov	r0, r5
 8021474:	bcf0      	pop	{r4, r5, r6, r7}
 8021476:	f7ff bde1 	b.w	802103c <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h>
	...

0802147c <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 802147c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021480:	b093      	sub	sp, #76	@ 0x4c
 8021482:	4681      	mov	r9, r0
 8021484:	460f      	mov	r7, r1
 8021486:	6810      	ldr	r0, [r2, #0]
 8021488:	6851      	ldr	r1, [r2, #4]
 802148a:	ac0e      	add	r4, sp, #56	@ 0x38
 802148c:	4616      	mov	r6, r2
 802148e:	f89d 8070 	ldrb.w	r8, [sp, #112]	@ 0x70
 8021492:	f8df a1ac 	ldr.w	sl, [pc, #428]	@ 8021640 <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>
 8021496:	c403      	stmia	r4!, {r0, r1}
 8021498:	6818      	ldr	r0, [r3, #0]
 802149a:	ac10      	add	r4, sp, #64	@ 0x40
 802149c:	6859      	ldr	r1, [r3, #4]
 802149e:	c403      	stmia	r4!, {r0, r1}
 80214a0:	a80e      	add	r0, sp, #56	@ 0x38
 80214a2:	f7f7 fadb 	bl	8018a5c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80214a6:	4631      	mov	r1, r6
 80214a8:	a810      	add	r0, sp, #64	@ 0x40
 80214aa:	4e64      	ldr	r6, [pc, #400]	@ (802163c <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c0>)
 80214ac:	f7f7 fafe 	bl	8018aac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80214b0:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	@ 0x40
 80214b4:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	@ 0x42
 80214b8:	f8bd 103c 	ldrh.w	r1, [sp, #60]	@ 0x3c
 80214bc:	6830      	ldr	r0, [r6, #0]
 80214be:	fb11 2103 	smlabb	r1, r1, r3, r2
 80214c2:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	@ 0x44
 80214c6:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	@ 0x46
 80214ca:	4489      	add	r9, r1
 80214cc:	f8bd 1038 	ldrh.w	r1, [sp, #56]	@ 0x38
 80214d0:	440a      	add	r2, r1
 80214d2:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 80214d6:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 80214da:	4413      	add	r3, r2
 80214dc:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 80214e0:	6803      	ldr	r3, [r0, #0]
 80214e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80214e4:	4798      	blx	r3
 80214e6:	f010 0f80 	tst.w	r0, #128	@ 0x80
 80214ea:	6830      	ldr	r0, [r6, #0]
 80214ec:	d01f      	beq.n	802152e <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb2>
 80214ee:	2102      	movs	r1, #2
 80214f0:	2600      	movs	r6, #0
 80214f2:	6802      	ldr	r2, [r0, #0]
 80214f4:	b2a4      	uxth	r4, r4
 80214f6:	b2ad      	uxth	r5, r5
 80214f8:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 80214fc:	e9cd 1608 	strd	r1, r6, [sp, #32]
 8021500:	210b      	movs	r1, #11
 8021502:	9107      	str	r1, [sp, #28]
 8021504:	f8ba 1000 	ldrh.w	r1, [sl]
 8021508:	9502      	str	r5, [sp, #8]
 802150a:	9106      	str	r1, [sp, #24]
 802150c:	2101      	movs	r1, #1
 802150e:	9401      	str	r4, [sp, #4]
 8021510:	e9cd 8104 	strd	r8, r1, [sp, #16]
 8021514:	f8bd 103c 	ldrh.w	r1, [sp, #60]	@ 0x3c
 8021518:	9103      	str	r1, [sp, #12]
 802151a:	f8bd 1042 	ldrh.w	r1, [sp, #66]	@ 0x42
 802151e:	9100      	str	r1, [sp, #0]
 8021520:	4649      	mov	r1, r9
 8021522:	6bd4      	ldr	r4, [r2, #60]	@ 0x3c
 8021524:	463a      	mov	r2, r7
 8021526:	47a0      	blx	r4
 8021528:	b013      	add	sp, #76	@ 0x4c
 802152a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802152e:	6803      	ldr	r3, [r0, #0]
 8021530:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021532:	4798      	blx	r3
 8021534:	f8ba 3000 	ldrh.w	r3, [sl]
 8021538:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	@ 0x42
 802153c:	f04f 0e04 	mov.w	lr, #4
 8021540:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	@ 0x40
 8021544:	435d      	muls	r5, r3
 8021546:	fb03 1202 	mla	r2, r3, r2, r1
 802154a:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 802154e:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8021552:	920c      	str	r2, [sp, #48]	@ 0x30
 8021554:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 8021558:	1b12      	subs	r2, r2, r4
 802155a:	920d      	str	r2, [sp, #52]	@ 0x34
 802155c:	00a2      	lsls	r2, r4, #2
 802155e:	1b1c      	subs	r4, r3, r4
 8021560:	920a      	str	r2, [sp, #40]	@ 0x28
 8021562:	00a3      	lsls	r3, r4, #2
 8021564:	930b      	str	r3, [sp, #44]	@ 0x2c
 8021566:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021568:	4298      	cmp	r0, r3
 802156a:	d261      	bcs.n	8021630 <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b4>
 802156c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802156e:	eb00 0a03 	add.w	sl, r0, r3
 8021572:	4550      	cmp	r0, sl
 8021574:	d257      	bcs.n	8021626 <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1aa>
 8021576:	f819 2b01 	ldrb.w	r2, [r9], #1
 802157a:	fb1e e202 	smlabb	r2, lr, r2, lr
 802157e:	eb07 0c02 	add.w	ip, r7, r2
 8021582:	f89c 3003 	ldrb.w	r3, [ip, #3]
 8021586:	fb03 f308 	mul.w	r3, r3, r8
 802158a:	1c5c      	adds	r4, r3, #1
 802158c:	eb04 2413 	add.w	r4, r4, r3, lsr #8
 8021590:	1224      	asrs	r4, r4, #8
 8021592:	2cff      	cmp	r4, #255	@ 0xff
 8021594:	d003      	beq.n	802159e <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x122>
 8021596:	6803      	ldr	r3, [r0, #0]
 8021598:	ea5f 6b13 	movs.w	fp, r3, lsr #24
 802159c:	d10d      	bne.n	80215ba <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13e>
 802159e:	f89c 3001 	ldrb.w	r3, [ip, #1]
 80215a2:	f89c 1002 	ldrb.w	r1, [ip, #2]
 80215a6:	021b      	lsls	r3, r3, #8
 80215a8:	5cba      	ldrb	r2, [r7, r2]
 80215aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80215ae:	4313      	orrs	r3, r2
 80215b0:	ea43 6404 	orr.w	r4, r3, r4, lsl #24
 80215b4:	6004      	str	r4, [r0, #0]
 80215b6:	3004      	adds	r0, #4
 80215b8:	e7db      	b.n	8021572 <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf6>
 80215ba:	b2e5      	uxtb	r5, r4
 80215bc:	2c00      	cmp	r4, #0
 80215be:	d0fa      	beq.n	80215b6 <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13a>
 80215c0:	fb05 f10b 	mul.w	r1, r5, fp
 80215c4:	445d      	add	r5, fp
 80215c6:	5cba      	ldrb	r2, [r7, r2]
 80215c8:	1c4e      	adds	r6, r1, #1
 80215ca:	eb06 2121 	add.w	r1, r6, r1, asr #8
 80215ce:	f3c3 4607 	ubfx	r6, r3, #16, #8
 80215d2:	1209      	asrs	r1, r1, #8
 80215d4:	1a6d      	subs	r5, r5, r1
 80215d6:	ebab 0101 	sub.w	r1, fp, r1
 80215da:	f89c b002 	ldrb.w	fp, [ip, #2]
 80215de:	b2ed      	uxtb	r5, r5
 80215e0:	fb04 fb0b 	mul.w	fp, r4, fp
 80215e4:	fb01 b606 	mla	r6, r1, r6, fp
 80215e8:	fa5f fb83 	uxtb.w	fp, r3
 80215ec:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80215f0:	fb01 fb0b 	mul.w	fp, r1, fp
 80215f4:	fb04 b202 	mla	r2, r4, r2, fp
 80215f8:	fbb6 f6f5 	udiv	r6, r6, r5
 80215fc:	fbb2 f2f5 	udiv	r2, r2, r5
 8021600:	0436      	lsls	r6, r6, #16
 8021602:	b2d2      	uxtb	r2, r2
 8021604:	f406 067f 	and.w	r6, r6, #16711680	@ 0xff0000
 8021608:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
 802160c:	4316      	orrs	r6, r2
 802160e:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8021612:	4354      	muls	r4, r2
 8021614:	fb01 4203 	mla	r2, r1, r3, r4
 8021618:	fbb2 f2f5 	udiv	r2, r2, r5
 802161c:	0212      	lsls	r2, r2, #8
 802161e:	b292      	uxth	r2, r2
 8021620:	4316      	orrs	r6, r2
 8021622:	6006      	str	r6, [r0, #0]
 8021624:	e7c7      	b.n	80215b6 <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13a>
 8021626:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8021628:	4418      	add	r0, r3
 802162a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802162c:	4499      	add	r9, r3
 802162e:	e79a      	b.n	8021566 <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xea>
 8021630:	4b02      	ldr	r3, [pc, #8]	@ (802163c <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c0>)
 8021632:	6818      	ldr	r0, [r3, #0]
 8021634:	6803      	ldr	r3, [r0, #0]
 8021636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021638:	4798      	blx	r3
 802163a:	e775      	b.n	8021528 <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 802163c:	20029ed8 	.word	0x20029ed8
 8021640:	20029ed2 	.word	0x20029ed2

08021644 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8021644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021648:	b093      	sub	sp, #76	@ 0x4c
 802164a:	4606      	mov	r6, r0
 802164c:	4689      	mov	r9, r1
 802164e:	6810      	ldr	r0, [r2, #0]
 8021650:	6851      	ldr	r1, [r2, #4]
 8021652:	ac0e      	add	r4, sp, #56	@ 0x38
 8021654:	4615      	mov	r5, r2
 8021656:	f89d 8070 	ldrb.w	r8, [sp, #112]	@ 0x70
 802165a:	f8df a1e4 	ldr.w	sl, [pc, #484]	@ 8021840 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1fc>
 802165e:	c403      	stmia	r4!, {r0, r1}
 8021660:	6818      	ldr	r0, [r3, #0]
 8021662:	ac10      	add	r4, sp, #64	@ 0x40
 8021664:	6859      	ldr	r1, [r3, #4]
 8021666:	c403      	stmia	r4!, {r0, r1}
 8021668:	a80e      	add	r0, sp, #56	@ 0x38
 802166a:	f7f7 f9f7 	bl	8018a5c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802166e:	4629      	mov	r1, r5
 8021670:	a810      	add	r0, sp, #64	@ 0x40
 8021672:	f7f7 fa1b 	bl	8018aac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021676:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	@ 0x40
 802167a:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	@ 0x42
 802167e:	f8bd 103c 	ldrh.w	r1, [sp, #60]	@ 0x3c
 8021682:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	@ 0x44
 8021686:	fb11 2103 	smlabb	r1, r1, r3, r2
 802168a:	f9bd 7046 	ldrsh.w	r7, [sp, #70]	@ 0x46
 802168e:	1875      	adds	r5, r6, r1
 8021690:	f8bd 1038 	ldrh.w	r1, [sp, #56]	@ 0x38
 8021694:	4e69      	ldr	r6, [pc, #420]	@ (802183c <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f8>)
 8021696:	440a      	add	r2, r1
 8021698:	6830      	ldr	r0, [r6, #0]
 802169a:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 802169e:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 80216a2:	4413      	add	r3, r2
 80216a4:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 80216a8:	6803      	ldr	r3, [r0, #0]
 80216aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80216ac:	4798      	blx	r3
 80216ae:	f010 0f80 	tst.w	r0, #128	@ 0x80
 80216b2:	d020      	beq.n	80216f6 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb2>
 80216b4:	6830      	ldr	r0, [r6, #0]
 80216b6:	2200      	movs	r2, #0
 80216b8:	2602      	movs	r6, #2
 80216ba:	b2a4      	uxth	r4, r4
 80216bc:	6801      	ldr	r1, [r0, #0]
 80216be:	b2bf      	uxth	r7, r7
 80216c0:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 80216c4:	e9cd 6208 	strd	r6, r2, [sp, #32]
 80216c8:	260b      	movs	r6, #11
 80216ca:	9607      	str	r6, [sp, #28]
 80216cc:	f8ba 6000 	ldrh.w	r6, [sl]
 80216d0:	f8cd 8010 	str.w	r8, [sp, #16]
 80216d4:	9702      	str	r7, [sp, #8]
 80216d6:	9401      	str	r4, [sp, #4]
 80216d8:	e9cd 2605 	strd	r2, r6, [sp, #20]
 80216dc:	f8bd 203c 	ldrh.w	r2, [sp, #60]	@ 0x3c
 80216e0:	9203      	str	r2, [sp, #12]
 80216e2:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 80216e6:	9200      	str	r2, [sp, #0]
 80216e8:	464a      	mov	r2, r9
 80216ea:	6bcc      	ldr	r4, [r1, #60]	@ 0x3c
 80216ec:	4629      	mov	r1, r5
 80216ee:	47a0      	blx	r4
 80216f0:	b013      	add	sp, #76	@ 0x4c
 80216f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80216f6:	6830      	ldr	r0, [r6, #0]
 80216f8:	f109 0904 	add.w	r9, r9, #4
 80216fc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8021700:	6803      	ldr	r3, [r0, #0]
 8021702:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021704:	4798      	blx	r3
 8021706:	f8ba c000 	ldrh.w	ip, [sl]
 802170a:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	@ 0x42
 802170e:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8021712:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	@ 0x40
 8021716:	fb0c f707 	mul.w	r7, ip, r7
 802171a:	fb0c 2303 	mla	r3, ip, r3, r2
 802171e:	ebac 0c04 	sub.w	ip, ip, r4
 8021722:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8021726:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 802172a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 802172e:	eba3 0304 	sub.w	r3, r3, r4
 8021732:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8021736:	930b      	str	r3, [sp, #44]	@ 0x2c
 8021738:	d025      	beq.n	8021786 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x142>
 802173a:	ea4f 6308 	mov.w	r3, r8, lsl #24
 802173e:	930c      	str	r3, [sp, #48]	@ 0x30
 8021740:	42b8      	cmp	r0, r7
 8021742:	d274      	bcs.n	802182e <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1ea>
 8021744:	eb00 030b 	add.w	r3, r0, fp
 8021748:	930d      	str	r3, [sp, #52]	@ 0x34
 802174a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802174c:	4298      	cmp	r0, r3
 802174e:	d26a      	bcs.n	8021826 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1e2>
 8021750:	f815 1b01 	ldrb.w	r1, [r5], #1
 8021754:	f850 3b04 	ldr.w	r3, [r0], #4
 8021758:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802175c:	0e1c      	lsrs	r4, r3, #24
 802175e:	eb09 0201 	add.w	r2, r9, r1
 8021762:	f819 6001 	ldrb.w	r6, [r9, r1]
 8021766:	f892 a002 	ldrb.w	sl, [r2, #2]
 802176a:	7851      	ldrb	r1, [r2, #1]
 802176c:	d124      	bne.n	80217b8 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x174>
 802176e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021770:	431e      	orrs	r6, r3
 8021772:	ea46 4a0a 	orr.w	sl, r6, sl, lsl #16
 8021776:	ea4a 2101 	orr.w	r1, sl, r1, lsl #8
 802177a:	f840 1c04 	str.w	r1, [r0, #-4]
 802177e:	e7e4      	b.n	802174a <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x106>
 8021780:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8021782:	4460      	add	r0, ip
 8021784:	441d      	add	r5, r3
 8021786:	42b8      	cmp	r0, r7
 8021788:	d251      	bcs.n	802182e <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1ea>
 802178a:	eb00 010b 	add.w	r1, r0, fp
 802178e:	4288      	cmp	r0, r1
 8021790:	d2f6      	bcs.n	8021780 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x13c>
 8021792:	f815 2b01 	ldrb.w	r2, [r5], #1
 8021796:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802179a:	f819 3002 	ldrb.w	r3, [r9, r2]
 802179e:	eb09 0402 	add.w	r4, r9, r2
 80217a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80217a6:	78a6      	ldrb	r6, [r4, #2]
 80217a8:	7862      	ldrb	r2, [r4, #1]
 80217aa:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80217ae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80217b2:	f840 3b04 	str.w	r3, [r0], #4
 80217b6:	e7ea      	b.n	802178e <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x14a>
 80217b8:	fb18 f606 	smulbb	r6, r8, r6
 80217bc:	fb08 fe04 	mul.w	lr, r8, r4
 80217c0:	fb18 fa0a 	smulbb	sl, r8, sl
 80217c4:	fb18 f101 	smulbb	r1, r8, r1
 80217c8:	f10e 0201 	add.w	r2, lr, #1
 80217cc:	eb02 222e 	add.w	r2, r2, lr, asr #8
 80217d0:	eb08 0e04 	add.w	lr, r8, r4
 80217d4:	1212      	asrs	r2, r2, #8
 80217d6:	ebae 0e02 	sub.w	lr, lr, r2
 80217da:	1aa2      	subs	r2, r4, r2
 80217dc:	b2dc      	uxtb	r4, r3
 80217de:	fa5f fe8e 	uxtb.w	lr, lr
 80217e2:	fb02 6604 	mla	r6, r2, r4, r6
 80217e6:	f3c3 4407 	ubfx	r4, r3, #16, #8
 80217ea:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80217ee:	fb02 aa04 	mla	sl, r2, r4, sl
 80217f2:	fb02 1303 	mla	r3, r2, r3, r1
 80217f6:	fbb6 f6fe 	udiv	r6, r6, lr
 80217fa:	fbba fafe 	udiv	sl, sl, lr
 80217fe:	b2f6      	uxtb	r6, r6
 8021800:	ea4f 4a0a 	mov.w	sl, sl, lsl #16
 8021804:	ea46 660e 	orr.w	r6, r6, lr, lsl #24
 8021808:	f40a 0a7f 	and.w	sl, sl, #16711680	@ 0xff0000
 802180c:	ea46 060a 	orr.w	r6, r6, sl
 8021810:	fbb3 fafe 	udiv	sl, r3, lr
 8021814:	ea4f 2a0a 	mov.w	sl, sl, lsl #8
 8021818:	fa1f fa8a 	uxth.w	sl, sl
 802181c:	ea46 060a 	orr.w	r6, r6, sl
 8021820:	f840 6c04 	str.w	r6, [r0, #-4]
 8021824:	e791      	b.n	802174a <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x106>
 8021826:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8021828:	4460      	add	r0, ip
 802182a:	441d      	add	r5, r3
 802182c:	e788      	b.n	8021740 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xfc>
 802182e:	4b03      	ldr	r3, [pc, #12]	@ (802183c <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f8>)
 8021830:	6818      	ldr	r0, [r3, #0]
 8021832:	6803      	ldr	r3, [r0, #0]
 8021834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021836:	4798      	blx	r3
 8021838:	e75a      	b.n	80216f0 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xac>
 802183a:	bf00      	nop
 802183c:	20029ed8 	.word	0x20029ed8
 8021840:	20029ed2 	.word	0x20029ed2

08021844 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 8021844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021848:	b089      	sub	sp, #36	@ 0x24
 802184a:	4605      	mov	r5, r0
 802184c:	4689      	mov	r9, r1
 802184e:	6810      	ldr	r0, [r2, #0]
 8021850:	6851      	ldr	r1, [r2, #4]
 8021852:	ac04      	add	r4, sp, #16
 8021854:	4616      	mov	r6, r2
 8021856:	f89d 8048 	ldrb.w	r8, [sp, #72]	@ 0x48
 802185a:	f109 0904 	add.w	r9, r9, #4
 802185e:	c403      	stmia	r4!, {r0, r1}
 8021860:	6818      	ldr	r0, [r3, #0]
 8021862:	ac06      	add	r4, sp, #24
 8021864:	6859      	ldr	r1, [r3, #4]
 8021866:	c403      	stmia	r4!, {r0, r1}
 8021868:	a804      	add	r0, sp, #16
 802186a:	f7f7 f8f7 	bl	8018a5c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802186e:	4631      	mov	r1, r6
 8021870:	a806      	add	r0, sp, #24
 8021872:	f7f7 f91b 	bl	8018aac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021876:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 802187a:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 802187e:	f8bd 6014 	ldrh.w	r6, [sp, #20]
 8021882:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8021886:	fb16 2103 	smlabb	r1, r6, r3, r2
 802188a:	f9bd a01e 	ldrsh.w	sl, [sp, #30]
 802188e:	186e      	adds	r6, r5, r1
 8021890:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8021894:	440a      	add	r2, r1
 8021896:	f8ad 2018 	strh.w	r2, [sp, #24]
 802189a:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 802189e:	4413      	add	r3, r2
 80218a0:	f8ad 301a 	strh.w	r3, [sp, #26]
 80218a4:	4b57      	ldr	r3, [pc, #348]	@ (8021a04 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1c0>)
 80218a6:	6818      	ldr	r0, [r3, #0]
 80218a8:	6803      	ldr	r3, [r0, #0]
 80218aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80218ac:	4798      	blx	r3
 80218ae:	4b56      	ldr	r3, [pc, #344]	@ (8021a08 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1c4>)
 80218b0:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 80218b4:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 80218b8:	f8b3 c000 	ldrh.w	ip, [r3]
 80218bc:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 80218c0:	fb0a fa0c 	mul.w	sl, sl, ip
 80218c4:	fb0c 2303 	mla	r3, ip, r3, r2
 80218c8:	ebac 0c0b 	sub.w	ip, ip, fp
 80218cc:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80218d0:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 80218d4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80218d8:	eba3 030b 	sub.w	r3, r3, fp
 80218dc:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 80218e0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80218e4:	9301      	str	r3, [sp, #4]
 80218e6:	d02e      	beq.n	8021946 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x102>
 80218e8:	ea4f 6308 	mov.w	r3, r8, lsl #24
 80218ec:	9302      	str	r3, [sp, #8]
 80218ee:	4550      	cmp	r0, sl
 80218f0:	d27f      	bcs.n	80219f2 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1ae>
 80218f2:	eb00 030b 	add.w	r3, r0, fp
 80218f6:	9303      	str	r3, [sp, #12]
 80218f8:	9b03      	ldr	r3, [sp, #12]
 80218fa:	4298      	cmp	r0, r3
 80218fc:	d275      	bcs.n	80219ea <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1a6>
 80218fe:	f816 3b01 	ldrb.w	r3, [r6], #1
 8021902:	6802      	ldr	r2, [r0, #0]
 8021904:	f839 1013 	ldrh.w	r1, [r9, r3, lsl #1]
 8021908:	0e17      	lsrs	r7, r2, #24
 802190a:	ea4f 04c1 	mov.w	r4, r1, lsl #3
 802190e:	ea4f 03e1 	mov.w	r3, r1, asr #3
 8021912:	ea4f 2521 	mov.w	r5, r1, asr #8
 8021916:	b2e4      	uxtb	r4, r4
 8021918:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 802191c:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8021920:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8021924:	ea43 1393 	orr.w	r3, r3, r3, lsr #6
 8021928:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 802192c:	d12c      	bne.n	8021988 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x144>
 802192e:	021b      	lsls	r3, r3, #8
 8021930:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 8021934:	9b02      	ldr	r3, [sp, #8]
 8021936:	432c      	orrs	r4, r5
 8021938:	431c      	orrs	r4, r3
 802193a:	6004      	str	r4, [r0, #0]
 802193c:	3004      	adds	r0, #4
 802193e:	e7db      	b.n	80218f8 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xb4>
 8021940:	9b01      	ldr	r3, [sp, #4]
 8021942:	4460      	add	r0, ip
 8021944:	441e      	add	r6, r3
 8021946:	4550      	cmp	r0, sl
 8021948:	d253      	bcs.n	80219f2 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1ae>
 802194a:	eb00 020b 	add.w	r2, r0, fp
 802194e:	4290      	cmp	r0, r2
 8021950:	d2f6      	bcs.n	8021940 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xfc>
 8021952:	f816 3b01 	ldrb.w	r3, [r6], #1
 8021956:	f839 5013 	ldrh.w	r5, [r9, r3, lsl #1]
 802195a:	10e9      	asrs	r1, r5, #3
 802195c:	122c      	asrs	r4, r5, #8
 802195e:	f001 03fc 	and.w	r3, r1, #252	@ 0xfc
 8021962:	00e9      	lsls	r1, r5, #3
 8021964:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 8021968:	ea43 1393 	orr.w	r3, r3, r3, lsr #6
 802196c:	b2c9      	uxtb	r1, r1
 802196e:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8021972:	021b      	lsls	r3, r3, #8
 8021974:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 8021978:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 802197c:	430b      	orrs	r3, r1
 802197e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8021982:	f840 3b04 	str.w	r3, [r0], #4
 8021986:	e7e2      	b.n	802194e <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x10a>
 8021988:	fb18 f404 	smulbb	r4, r8, r4
 802198c:	fb08 fe07 	mul.w	lr, r8, r7
 8021990:	fb18 f505 	smulbb	r5, r8, r5
 8021994:	fb18 f303 	smulbb	r3, r8, r3
 8021998:	f10e 0101 	add.w	r1, lr, #1
 802199c:	eb01 212e 	add.w	r1, r1, lr, asr #8
 80219a0:	eb08 0e07 	add.w	lr, r8, r7
 80219a4:	1209      	asrs	r1, r1, #8
 80219a6:	ebae 0e01 	sub.w	lr, lr, r1
 80219aa:	1a79      	subs	r1, r7, r1
 80219ac:	b2d7      	uxtb	r7, r2
 80219ae:	fa5f fe8e 	uxtb.w	lr, lr
 80219b2:	fb01 4707 	mla	r7, r1, r7, r4
 80219b6:	f3c2 4407 	ubfx	r4, r2, #16, #8
 80219ba:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80219be:	fb01 5504 	mla	r5, r1, r4, r5
 80219c2:	fb01 3202 	mla	r2, r1, r2, r3
 80219c6:	fbb7 f7fe 	udiv	r7, r7, lr
 80219ca:	fbb5 f5fe 	udiv	r5, r5, lr
 80219ce:	b2ff      	uxtb	r7, r7
 80219d0:	042d      	lsls	r5, r5, #16
 80219d2:	ea47 670e 	orr.w	r7, r7, lr, lsl #24
 80219d6:	f405 057f 	and.w	r5, r5, #16711680	@ 0xff0000
 80219da:	432f      	orrs	r7, r5
 80219dc:	fbb2 f5fe 	udiv	r5, r2, lr
 80219e0:	022d      	lsls	r5, r5, #8
 80219e2:	b2ad      	uxth	r5, r5
 80219e4:	432f      	orrs	r7, r5
 80219e6:	6007      	str	r7, [r0, #0]
 80219e8:	e7a8      	b.n	802193c <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xf8>
 80219ea:	9b01      	ldr	r3, [sp, #4]
 80219ec:	4460      	add	r0, ip
 80219ee:	441e      	add	r6, r3
 80219f0:	e77d      	b.n	80218ee <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xaa>
 80219f2:	4b04      	ldr	r3, [pc, #16]	@ (8021a04 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1c0>)
 80219f4:	6818      	ldr	r0, [r3, #0]
 80219f6:	6803      	ldr	r3, [r0, #0]
 80219f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80219fa:	4798      	blx	r3
 80219fc:	b009      	add	sp, #36	@ 0x24
 80219fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021a02:	bf00      	nop
 8021a04:	20029ed8 	.word	0x20029ed8
 8021a08:	20029ed2 	.word	0x20029ed2

08021a0c <_ZN8touchgfx8LCD32bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8021a0c:	b4f0      	push	{r4, r5, r6, r7}
 8021a0e:	460c      	mov	r4, r1
 8021a10:	4611      	mov	r1, r2
 8021a12:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8021a16:	461a      	mov	r2, r3
 8021a18:	780f      	ldrb	r7, [r1, #0]
 8021a1a:	9b04      	ldr	r3, [sp, #16]
 8021a1c:	2f01      	cmp	r7, #1
 8021a1e:	784e      	ldrb	r6, [r1, #1]
 8021a20:	d036      	beq.n	8021a90 <_ZN8touchgfx8LCD32bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x84>
 8021a22:	d31e      	bcc.n	8021a62 <_ZN8touchgfx8LCD32bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x56>
 8021a24:	2f02      	cmp	r7, #2
 8021a26:	d14a      	bne.n	8021abe <_ZN8touchgfx8LCD32bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb2>
 8021a28:	2e03      	cmp	r6, #3
 8021a2a:	d848      	bhi.n	8021abe <_ZN8touchgfx8LCD32bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb2>
 8021a2c:	e8df f006 	tbb	[pc, r6]
 8021a30:	16140702 	.word	0x16140702
 8021a34:	9504      	str	r5, [sp, #16]
 8021a36:	4620      	mov	r0, r4
 8021a38:	bcf0      	pop	{r4, r5, r6, r7}
 8021a3a:	f7ff bf03 	b.w	8021844 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 8021a3e:	6f80      	ldr	r0, [r0, #120]	@ 0x78
 8021a40:	2800      	cmp	r0, #0
 8021a42:	d03c      	beq.n	8021abe <_ZN8touchgfx8LCD32bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb2>
 8021a44:	6806      	ldr	r6, [r0, #0]
 8021a46:	e9cd 3504 	strd	r3, r5, [sp, #16]
 8021a4a:	68b5      	ldr	r5, [r6, #8]
 8021a4c:	4613      	mov	r3, r2
 8021a4e:	46ac      	mov	ip, r5
 8021a50:	460a      	mov	r2, r1
 8021a52:	4621      	mov	r1, r4
 8021a54:	bcf0      	pop	{r4, r5, r6, r7}
 8021a56:	4760      	bx	ip
 8021a58:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 8021a5a:	e7f1      	b.n	8021a40 <_ZN8touchgfx8LCD32bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 8021a5c:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 8021a60:	e7ee      	b.n	8021a40 <_ZN8touchgfx8LCD32bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 8021a62:	2e03      	cmp	r6, #3
 8021a64:	d82b      	bhi.n	8021abe <_ZN8touchgfx8LCD32bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb2>
 8021a66:	e8df f006 	tbb	[pc, r6]
 8021a6a:	0702      	.short	0x0702
 8021a6c:	100e      	.short	0x100e
 8021a6e:	9504      	str	r5, [sp, #16]
 8021a70:	4620      	mov	r0, r4
 8021a72:	bcf0      	pop	{r4, r5, r6, r7}
 8021a74:	f7ff bd02 	b.w	802147c <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 8021a78:	6f80      	ldr	r0, [r0, #120]	@ 0x78
 8021a7a:	b300      	cbz	r0, 8021abe <_ZN8touchgfx8LCD32bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb2>
 8021a7c:	6806      	ldr	r6, [r0, #0]
 8021a7e:	e9cd 3504 	strd	r3, r5, [sp, #16]
 8021a82:	6935      	ldr	r5, [r6, #16]
 8021a84:	e7e2      	b.n	8021a4c <_ZN8touchgfx8LCD32bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 8021a86:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 8021a88:	e7f7      	b.n	8021a7a <_ZN8touchgfx8LCD32bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6e>
 8021a8a:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 8021a8e:	e7f4      	b.n	8021a7a <_ZN8touchgfx8LCD32bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6e>
 8021a90:	2e03      	cmp	r6, #3
 8021a92:	d814      	bhi.n	8021abe <_ZN8touchgfx8LCD32bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb2>
 8021a94:	e8df f006 	tbb	[pc, r6]
 8021a98:	100e0702 	.word	0x100e0702
 8021a9c:	9504      	str	r5, [sp, #16]
 8021a9e:	4620      	mov	r0, r4
 8021aa0:	bcf0      	pop	{r4, r5, r6, r7}
 8021aa2:	f7ff bdcf 	b.w	8021644 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 8021aa6:	6f80      	ldr	r0, [r0, #120]	@ 0x78
 8021aa8:	b148      	cbz	r0, 8021abe <_ZN8touchgfx8LCD32bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb2>
 8021aaa:	6806      	ldr	r6, [r0, #0]
 8021aac:	e9cd 3504 	strd	r3, r5, [sp, #16]
 8021ab0:	68f5      	ldr	r5, [r6, #12]
 8021ab2:	e7cb      	b.n	8021a4c <_ZN8touchgfx8LCD32bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 8021ab4:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 8021ab6:	e7f7      	b.n	8021aa8 <_ZN8touchgfx8LCD32bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x9c>
 8021ab8:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 8021abc:	e7f4      	b.n	8021aa8 <_ZN8touchgfx8LCD32bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x9c>
 8021abe:	bcf0      	pop	{r4, r5, r6, r7}
 8021ac0:	4770      	bx	lr

08021ac2 <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8021ac2:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8021ac6:	f89d 5034 	ldrb.w	r5, [sp, #52]	@ 0x34
 8021aca:	4607      	mov	r7, r0
 8021acc:	460c      	mov	r4, r1
 8021ace:	4692      	mov	sl, r2
 8021ad0:	4699      	mov	r9, r3
 8021ad2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8021ad4:	b1d5      	cbz	r5, 8021b0c <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x4a>
 8021ad6:	4608      	mov	r0, r1
 8021ad8:	f7fa ffa0 	bl	801ca1c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8021adc:	4680      	mov	r8, r0
 8021ade:	4620      	mov	r0, r4
 8021ae0:	f7fa ffd0 	bl	801ca84 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8021ae4:	f8ad 000e 	strh.w	r0, [sp, #14]
 8021ae8:	4620      	mov	r0, r4
 8021aea:	f8ad a008 	strh.w	sl, [sp, #8]
 8021aee:	f8ad 900a 	strh.w	r9, [sp, #10]
 8021af2:	f8ad 800c 	strh.w	r8, [sp, #12]
 8021af6:	f7fb f901 	bl	801ccfc <_ZNK8touchgfx6Bitmap9getFormatEv>
 8021afa:	b950      	cbnz	r0, 8021b12 <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x50>
 8021afc:	4620      	mov	r0, r4
 8021afe:	f7fb f879 	bl	801cbf4 <_ZNK8touchgfx6Bitmap7getDataEv>
 8021b02:	462b      	mov	r3, r5
 8021b04:	4632      	mov	r2, r6
 8021b06:	a902      	add	r1, sp, #8
 8021b08:	f7ff fb88 	bl	802121c <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 8021b0c:	b004      	add	sp, #16
 8021b0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021b12:	2801      	cmp	r0, #1
 8021b14:	d108      	bne.n	8021b28 <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x66>
 8021b16:	4620      	mov	r0, r4
 8021b18:	f7fb f86c 	bl	801cbf4 <_ZNK8touchgfx6Bitmap7getDataEv>
 8021b1c:	462b      	mov	r3, r5
 8021b1e:	4632      	mov	r2, r6
 8021b20:	a902      	add	r1, sp, #8
 8021b22:	f7ff fa8b 	bl	802103c <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h>
 8021b26:	e7f1      	b.n	8021b0c <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x4a>
 8021b28:	2802      	cmp	r0, #2
 8021b2a:	d111      	bne.n	8021b50 <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x8e>
 8021b2c:	683b      	ldr	r3, [r7, #0]
 8021b2e:	4620      	mov	r0, r4
 8021b30:	f8d3 800c 	ldr.w	r8, [r3, #12]
 8021b34:	f7fb f85e 	bl	801cbf4 <_ZNK8touchgfx6Bitmap7getDataEv>
 8021b38:	4681      	mov	r9, r0
 8021b3a:	4620      	mov	r0, r4
 8021b3c:	f7fb f822 	bl	801cb84 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8021b40:	4633      	mov	r3, r6
 8021b42:	aa02      	add	r2, sp, #8
 8021b44:	4649      	mov	r1, r9
 8021b46:	e9cd 5000 	strd	r5, r0, [sp]
 8021b4a:	4638      	mov	r0, r7
 8021b4c:	47c0      	blx	r8
 8021b4e:	e7dd      	b.n	8021b0c <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x4a>
 8021b50:	280b      	cmp	r0, #11
 8021b52:	d1db      	bne.n	8021b0c <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x4a>
 8021b54:	4620      	mov	r0, r4
 8021b56:	f7fb f84d 	bl	801cbf4 <_ZNK8touchgfx6Bitmap7getDataEv>
 8021b5a:	4680      	mov	r8, r0
 8021b5c:	4620      	mov	r0, r4
 8021b5e:	f7fb f879 	bl	801cc54 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8021b62:	ab02      	add	r3, sp, #8
 8021b64:	4602      	mov	r2, r0
 8021b66:	4641      	mov	r1, r8
 8021b68:	4638      	mov	r0, r7
 8021b6a:	e9cd 6500 	strd	r6, r5, [sp]
 8021b6e:	f7ff ff4d 	bl	8021a0c <_ZN8touchgfx8LCD32bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 8021b72:	e7cb      	b.n	8021b0c <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x4a>

08021b74 <_ZN8touchgfx8LCD32bpp9nextPixelEbNS_12TextRotationE>:
 8021b74:	b160      	cbz	r0, 8021b90 <_ZN8touchgfx8LCD32bpp9nextPixelEbNS_12TextRotationE+0x1c>
 8021b76:	2903      	cmp	r1, #3
 8021b78:	d818      	bhi.n	8021bac <_ZN8touchgfx8LCD32bpp9nextPixelEbNS_12TextRotationE+0x38>
 8021b7a:	e8df f001 	tbb	[pc, r1]
 8021b7e:	1902      	.short	0x1902
 8021b80:	1b06      	.short	0x1b06
 8021b82:	4b0e      	ldr	r3, [pc, #56]	@ (8021bbc <_ZN8touchgfx8LCD32bpp9nextPixelEbNS_12TextRotationE+0x48>)
 8021b84:	8818      	ldrh	r0, [r3, #0]
 8021b86:	4240      	negs	r0, r0
 8021b88:	4770      	bx	lr
 8021b8a:	4b0c      	ldr	r3, [pc, #48]	@ (8021bbc <_ZN8touchgfx8LCD32bpp9nextPixelEbNS_12TextRotationE+0x48>)
 8021b8c:	8818      	ldrh	r0, [r3, #0]
 8021b8e:	4770      	bx	lr
 8021b90:	2903      	cmp	r1, #3
 8021b92:	d80b      	bhi.n	8021bac <_ZN8touchgfx8LCD32bpp9nextPixelEbNS_12TextRotationE+0x38>
 8021b94:	a301      	add	r3, pc, #4	@ (adr r3, 8021b9c <_ZN8touchgfx8LCD32bpp9nextPixelEbNS_12TextRotationE+0x28>)
 8021b96:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8021b9a:	bf00      	nop
 8021b9c:	08021bb1 	.word	0x08021bb1
 8021ba0:	08021b8b 	.word	0x08021b8b
 8021ba4:	08021bb5 	.word	0x08021bb5
 8021ba8:	08021b83 	.word	0x08021b83
 8021bac:	2000      	movs	r0, #0
 8021bae:	4770      	bx	lr
 8021bb0:	2001      	movs	r0, #1
 8021bb2:	4770      	bx	lr
 8021bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8021bb8:	4770      	bx	lr
 8021bba:	bf00      	nop
 8021bbc:	20029ed2 	.word	0x20029ed2

08021bc0 <_ZN8touchgfx8LCD32bpp8nextLineEbNS_12TextRotationE>:
 8021bc0:	b160      	cbz	r0, 8021bdc <_ZN8touchgfx8LCD32bpp8nextLineEbNS_12TextRotationE+0x1c>
 8021bc2:	2903      	cmp	r1, #3
 8021bc4:	d818      	bhi.n	8021bf8 <_ZN8touchgfx8LCD32bpp8nextLineEbNS_12TextRotationE+0x38>
 8021bc6:	e8df f001 	tbb	[pc, r1]
 8021bca:	0219      	.short	0x0219
 8021bcc:	051b      	.short	0x051b
 8021bce:	4b0e      	ldr	r3, [pc, #56]	@ (8021c08 <_ZN8touchgfx8LCD32bpp8nextLineEbNS_12TextRotationE+0x48>)
 8021bd0:	8818      	ldrh	r0, [r3, #0]
 8021bd2:	4770      	bx	lr
 8021bd4:	4b0c      	ldr	r3, [pc, #48]	@ (8021c08 <_ZN8touchgfx8LCD32bpp8nextLineEbNS_12TextRotationE+0x48>)
 8021bd6:	8818      	ldrh	r0, [r3, #0]
 8021bd8:	4240      	negs	r0, r0
 8021bda:	4770      	bx	lr
 8021bdc:	2903      	cmp	r1, #3
 8021bde:	d80b      	bhi.n	8021bf8 <_ZN8touchgfx8LCD32bpp8nextLineEbNS_12TextRotationE+0x38>
 8021be0:	a301      	add	r3, pc, #4	@ (adr r3, 8021be8 <_ZN8touchgfx8LCD32bpp8nextLineEbNS_12TextRotationE+0x28>)
 8021be2:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8021be6:	bf00      	nop
 8021be8:	08021bcf 	.word	0x08021bcf
 8021bec:	08021c01 	.word	0x08021c01
 8021bf0:	08021bd5 	.word	0x08021bd5
 8021bf4:	08021bfd 	.word	0x08021bfd
 8021bf8:	2000      	movs	r0, #0
 8021bfa:	4770      	bx	lr
 8021bfc:	2001      	movs	r0, #1
 8021bfe:	4770      	bx	lr
 8021c00:	f04f 30ff 	mov.w	r0, #4294967295
 8021c04:	4770      	bx	lr
 8021c06:	bf00      	nop
 8021c08:	20029ed2 	.word	0x20029ed2

08021c0c <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8021c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021c10:	b099      	sub	sp, #100	@ 0x64
 8021c12:	910b      	str	r1, [sp, #44]	@ 0x2c
 8021c14:	a914      	add	r1, sp, #80	@ 0x50
 8021c16:	f9bd 6088 	ldrsh.w	r6, [sp, #136]	@ 0x88
 8021c1a:	f8bd 7090 	ldrh.w	r7, [sp, #144]	@ 0x90
 8021c1e:	f8bd 4094 	ldrh.w	r4, [sp, #148]	@ 0x94
 8021c22:	f89d 90b4 	ldrb.w	r9, [sp, #180]	@ 0xb4
 8021c26:	e881 000c 	stmia.w	r1, {r2, r3}
 8021c2a:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	@ 0x8c
 8021c2e:	930a      	str	r3, [sp, #40]	@ 0x28
 8021c30:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 8021c34:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	@ 0x98
 8021c38:	9310      	str	r3, [sp, #64]	@ 0x40
 8021c3a:	f89d 30ac 	ldrb.w	r3, [sp, #172]	@ 0xac
 8021c3e:	9309      	str	r3, [sp, #36]	@ 0x24
 8021c40:	7b4b      	ldrb	r3, [r1, #13]
 8021c42:	ea4f 1843 	mov.w	r8, r3, lsl #5
 8021c46:	f408 7080 	and.w	r0, r8, #256	@ 0x100
 8021c4a:	f891 8006 	ldrb.w	r8, [r1, #6]
 8021c4e:	ea58 0800 	orrs.w	r8, r8, r0
 8021c52:	f000 815b 	beq.w	8021f0c <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x300>
 8021c56:	011b      	lsls	r3, r3, #4
 8021c58:	79c8      	ldrb	r0, [r1, #7]
 8021c5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8021c5e:	4303      	orrs	r3, r0
 8021c60:	930d      	str	r3, [sp, #52]	@ 0x34
 8021c62:	f000 8153 	beq.w	8021f0c <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x300>
 8021c66:	f991 3009 	ldrsb.w	r3, [r1, #9]
 8021c6a:	b29b      	uxth	r3, r3
 8021c6c:	2f00      	cmp	r7, #0
 8021c6e:	f000 80f3 	beq.w	8021e58 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x24c>
 8021c72:	1aff      	subs	r7, r7, r3
 8021c74:	b2bf      	uxth	r7, r7
 8021c76:	043d      	lsls	r5, r7, #16
 8021c78:	d502      	bpl.n	8021c80 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 8021c7a:	1bf6      	subs	r6, r6, r7
 8021c7c:	2700      	movs	r7, #0
 8021c7e:	b236      	sxth	r6, r6
 8021c80:	f9b2 1000 	ldrsh.w	r1, [r2]
 8021c84:	fa1f f588 	uxth.w	r5, r8
 8021c88:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 8021c8c:	428e      	cmp	r6, r1
 8021c8e:	b28b      	uxth	r3, r1
 8021c90:	bfbf      	itttt	lt
 8021c92:	18ff      	addlt	r7, r7, r3
 8021c94:	1bbe      	sublt	r6, r7, r6
 8021c96:	b2b7      	uxthlt	r7, r6
 8021c98:	460e      	movlt	r6, r1
 8021c9a:	8891      	ldrh	r1, [r2, #4]
 8021c9c:	440b      	add	r3, r1
 8021c9e:	4631      	mov	r1, r6
 8021ca0:	b21b      	sxth	r3, r3
 8021ca2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8021ca4:	88d3      	ldrh	r3, [r2, #6]
 8021ca6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8021ca8:	449a      	add	sl, r3
 8021caa:	fa0f f38a 	sxth.w	r3, sl
 8021cae:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 8021cb2:	930e      	str	r3, [sp, #56]	@ 0x38
 8021cb4:	4bb1      	ldr	r3, [pc, #708]	@ (8021f7c <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x370>)
 8021cb6:	f893 b000 	ldrb.w	fp, [r3]
 8021cba:	f10b 30ff 	add.w	r0, fp, #4294967295
 8021cbe:	4243      	negs	r3, r0
 8021cc0:	4143      	adcs	r3, r0
 8021cc2:	a814      	add	r0, sp, #80	@ 0x50
 8021cc4:	930c      	str	r3, [sp, #48]	@ 0x30
 8021cc6:	464b      	mov	r3, r9
 8021cc8:	f7f6 fd3c 	bl	8018744 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8021ccc:	4631      	mov	r1, r6
 8021cce:	f8ad 005c 	strh.w	r0, [sp, #92]	@ 0x5c
 8021cd2:	464b      	mov	r3, r9
 8021cd4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8021cd6:	a814      	add	r0, sp, #80	@ 0x50
 8021cd8:	f7f6 fd51 	bl	801877e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8021cdc:	a918      	add	r1, sp, #96	@ 0x60
 8021cde:	f821 0d02 	strh.w	r0, [r1, #-2]!
 8021ce2:	a817      	add	r0, sp, #92	@ 0x5c
 8021ce4:	f7f6 fe78 	bl	80189d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8021ce8:	f1b9 0f00 	cmp.w	r9, #0
 8021cec:	f040 80b7 	bne.w	8021e5e <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x252>
 8021cf0:	f1bb 0f01 	cmp.w	fp, #1
 8021cf4:	f040 80bb 	bne.w	8021e6e <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x262>
 8021cf8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8021cfa:	b153      	cbz	r3, 8021d12 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x106>
 8021cfc:	2508      	movs	r5, #8
 8021cfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021d00:	fb95 f3f3 	sdiv	r3, r5, r3
 8021d04:	1e5d      	subs	r5, r3, #1
 8021d06:	4445      	add	r5, r8
 8021d08:	fb95 f5f3 	sdiv	r5, r5, r3
 8021d0c:	fb15 f503 	smulbb	r5, r5, r3
 8021d10:	b2ad      	uxth	r5, r5
 8021d12:	b907      	cbnz	r7, 8021d16 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 8021d14:	b16c      	cbz	r4, 8021d32 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x126>
 8021d16:	fb04 7305 	mla	r3, r4, r5, r7
 8021d1a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021d1c:	ebaa 0a04 	sub.w	sl, sl, r4
 8021d20:	4353      	muls	r3, r2
 8021d22:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8021d24:	fa1f fa8a 	uxth.w	sl, sl
 8021d28:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 8021d2c:	f003 0407 	and.w	r4, r3, #7
 8021d30:	9228      	str	r2, [sp, #160]	@ 0xa0
 8021d32:	4649      	mov	r1, r9
 8021d34:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8021d36:	f7ff ff1d 	bl	8021b74 <_ZN8touchgfx8LCD32bpp9nextPixelEbNS_12TextRotationE>
 8021d3a:	4683      	mov	fp, r0
 8021d3c:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8021d3e:	f7ff ff3f 	bl	8021bc0 <_ZN8touchgfx8LCD32bpp8nextLineEbNS_12TextRotationE>
 8021d42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021d44:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8021d46:	4681      	mov	r9, r0
 8021d48:	1a9b      	subs	r3, r3, r2
 8021d4a:	459a      	cmp	sl, r3
 8021d4c:	bfa8      	it	ge
 8021d4e:	469a      	movge	sl, r3
 8021d50:	f1ba 0f00 	cmp.w	sl, #0
 8021d54:	f340 80da 	ble.w	8021f0c <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x300>
 8021d58:	1bf6      	subs	r6, r6, r7
 8021d5a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021d5c:	1b9e      	subs	r6, r3, r6
 8021d5e:	4546      	cmp	r6, r8
 8021d60:	bfd4      	ite	le
 8021d62:	ebc7 0706 	rsble	r7, r7, r6
 8021d66:	ebc7 0708 	rsbgt	r7, r7, r8
 8021d6a:	2f00      	cmp	r7, #0
 8021d6c:	f340 80ce 	ble.w	8021f0c <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x300>
 8021d70:	1bed      	subs	r5, r5, r7
 8021d72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021d74:	436b      	muls	r3, r5
 8021d76:	930e      	str	r3, [sp, #56]	@ 0x38
 8021d78:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8021d7a:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8021d7e:	0c1d      	lsrs	r5, r3, #16
 8021d80:	0a1e      	lsrs	r6, r3, #8
 8021d82:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8021d86:	930f      	str	r3, [sp, #60]	@ 0x3c
 8021d88:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8021d8a:	2b00      	cmp	r3, #0
 8021d8c:	f040 80c3 	bne.w	8021f16 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x30a>
 8021d90:	4b7b      	ldr	r3, [pc, #492]	@ (8021f80 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>)
 8021d92:	6818      	ldr	r0, [r3, #0]
 8021d94:	6803      	ldr	r3, [r0, #0]
 8021d96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021d98:	4798      	blx	r3
 8021d9a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021d9c:	2301      	movs	r3, #1
 8021d9e:	4093      	lsls	r3, r2
 8021da0:	4a78      	ldr	r2, [pc, #480]	@ (8021f84 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>)
 8021da2:	3b01      	subs	r3, #1
 8021da4:	8811      	ldrh	r1, [r2, #0]
 8021da6:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	@ 0x5c
 8021daa:	b2db      	uxtb	r3, r3
 8021dac:	930d      	str	r3, [sp, #52]	@ 0x34
 8021dae:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	@ 0x5e
 8021db2:	fb01 2303 	mla	r3, r1, r3, r2
 8021db6:	22ff      	movs	r2, #255	@ 0xff
 8021db8:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8021dba:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8021dbe:	fb92 f2f1 	sdiv	r2, r2, r1
 8021dc2:	fb02 f208 	mul.w	r2, r2, r8
 8021dc6:	930a      	str	r3, [sp, #40]	@ 0x28
 8021dc8:	9210      	str	r2, [sp, #64]	@ 0x40
 8021dca:	ea4f 028b 	mov.w	r2, fp, lsl #2
 8021dce:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8021dd0:	fb07 9b1b 	mls	fp, r7, fp, r9
 8021dd4:	920c      	str	r2, [sp, #48]	@ 0x30
 8021dd6:	fb02 f907 	mul.w	r9, r2, r7
 8021dda:	b2f2      	uxtb	r2, r6
 8021ddc:	781b      	ldrb	r3, [r3, #0]
 8021dde:	9211      	str	r2, [sp, #68]	@ 0x44
 8021de0:	eb09 0b8b 	add.w	fp, r9, fp, lsl #2
 8021de4:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 8021de6:	4123      	asrs	r3, r4
 8021de8:	b2d2      	uxtb	r2, r2
 8021dea:	b2db      	uxtb	r3, r3
 8021dec:	9212      	str	r2, [sp, #72]	@ 0x48
 8021dee:	b2ea      	uxtb	r2, r5
 8021df0:	9213      	str	r2, [sp, #76]	@ 0x4c
 8021df2:	f11a 3aff 	adds.w	sl, sl, #4294967295
 8021df6:	f0c0 80d8 	bcc.w	8021faa <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 8021dfa:	46b8      	mov	r8, r7
 8021dfc:	f8dd c028 	ldr.w	ip, [sp, #40]	@ 0x28
 8021e00:	f118 38ff 	adds.w	r8, r8, #4294967295
 8021e04:	f0c0 80c0 	bcc.w	8021f88 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>
 8021e08:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8021e0a:	401a      	ands	r2, r3
 8021e0c:	d013      	beq.n	8021e36 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x22a>
 8021e0e:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8021e10:	fb12 f201 	smulbb	r2, r2, r1
 8021e14:	b292      	uxth	r2, r2
 8021e16:	1c51      	adds	r1, r2, #1
 8021e18:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 8021e1c:	1209      	asrs	r1, r1, #8
 8021e1e:	b2ce      	uxtb	r6, r1
 8021e20:	2eff      	cmp	r6, #255	@ 0xff
 8021e22:	d003      	beq.n	8021e2c <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x220>
 8021e24:	f8dc 5000 	ldr.w	r5, [ip]
 8021e28:	0e2a      	lsrs	r2, r5, #24
 8021e2a:	d176      	bne.n	8021f1a <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x30e>
 8021e2c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8021e2e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 8021e32:	f8cc 1000 	str.w	r1, [ip]
 8021e36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021e38:	4414      	add	r4, r2
 8021e3a:	b2a4      	uxth	r4, r4
 8021e3c:	2c07      	cmp	r4, #7
 8021e3e:	bf89      	itett	hi
 8021e40:	9a28      	ldrhi	r2, [sp, #160]	@ 0xa0
 8021e42:	4113      	asrls	r3, r2
 8021e44:	9b28      	ldrhi	r3, [sp, #160]	@ 0xa0
 8021e46:	2400      	movhi	r4, #0
 8021e48:	bf89      	itett	hi
 8021e4a:	3201      	addhi	r2, #1
 8021e4c:	b2db      	uxtbls	r3, r3
 8021e4e:	785b      	ldrbhi	r3, [r3, #1]
 8021e50:	9228      	strhi	r2, [sp, #160]	@ 0xa0
 8021e52:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8021e54:	4494      	add	ip, r2
 8021e56:	e7d3      	b.n	8021e00 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1f4>
 8021e58:	441e      	add	r6, r3
 8021e5a:	b236      	sxth	r6, r6
 8021e5c:	e710      	b.n	8021c80 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 8021e5e:	f1b9 0f01 	cmp.w	r9, #1
 8021e62:	f47f af49 	bne.w	8021cf8 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xec>
 8021e66:	f1bb 0f01 	cmp.w	fp, #1
 8021e6a:	f47f af45 	bne.w	8021cf8 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xec>
 8021e6e:	f8df b110 	ldr.w	fp, [pc, #272]	@ 8021f80 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 8021e72:	f8db 0000 	ldr.w	r0, [fp]
 8021e76:	6803      	ldr	r3, [r0, #0]
 8021e78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8021e7a:	4798      	blx	r3
 8021e7c:	f410 7380 	ands.w	r3, r0, #256	@ 0x100
 8021e80:	465a      	mov	r2, fp
 8021e82:	d006      	beq.n	8021e92 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x286>
 8021e84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021e86:	2b04      	cmp	r3, #4
 8021e88:	d143      	bne.n	8021f12 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x306>
 8021e8a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8021e8c:	3300      	adds	r3, #0
 8021e8e:	bf18      	it	ne
 8021e90:	2301      	movne	r3, #1
 8021e92:	0581      	lsls	r1, r0, #22
 8021e94:	f140 8092 	bpl.w	8021fbc <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>
 8021e98:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8021e9a:	2908      	cmp	r1, #8
 8021e9c:	f040 808e 	bne.w	8021fbc <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>
 8021ea0:	2b00      	cmp	r3, #0
 8021ea2:	bf0c      	ite	eq
 8021ea4:	f44f 7100 	moveq.w	r1, #512	@ 0x200
 8021ea8:	f44f 7180 	movne.w	r1, #256	@ 0x100
 8021eac:	2f00      	cmp	r7, #0
 8021eae:	f47f af23 	bne.w	8021cf8 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xec>
 8021eb2:	2c00      	cmp	r4, #0
 8021eb4:	f47f af20 	bne.w	8021cf8 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xec>
 8021eb8:	eb08 0306 	add.w	r3, r8, r6
 8021ebc:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8021ebe:	4283      	cmp	r3, r0
 8021ec0:	f73f af1a 	bgt.w	8021cf8 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xec>
 8021ec4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8021ec6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021ec8:	4403      	add	r3, r0
 8021eca:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8021ecc:	4283      	cmp	r3, r0
 8021ece:	f73f af13 	bgt.w	8021cf8 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xec>
 8021ed2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021ed4:	2600      	movs	r6, #0
 8021ed6:	6810      	ldr	r0, [r2, #0]
 8021ed8:	2b08      	cmp	r3, #8
 8021eda:	f8bd 205c 	ldrh.w	r2, [sp, #92]	@ 0x5c
 8021ede:	6804      	ldr	r4, [r0, #0]
 8021ee0:	bf18      	it	ne
 8021ee2:	3501      	addne	r5, #1
 8021ee4:	f8bd 305e 	ldrh.w	r3, [sp, #94]	@ 0x5e
 8021ee8:	bf18      	it	ne
 8021eea:	f025 0501 	bicne.w	r5, r5, #1
 8021eee:	e9cd 1605 	strd	r1, r6, [sp, #20]
 8021ef2:	f89d 10b0 	ldrb.w	r1, [sp, #176]	@ 0xb0
 8021ef6:	bf18      	it	ne
 8021ef8:	b2ad      	uxthne	r5, r5
 8021efa:	9104      	str	r1, [sp, #16]
 8021efc:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 8021efe:	e9cd 5a00 	strd	r5, sl, [sp]
 8021f02:	e9cd 5102 	strd	r5, r1, [sp, #8]
 8021f06:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8021f08:	6d64      	ldr	r4, [r4, #84]	@ 0x54
 8021f0a:	47a0      	blx	r4
 8021f0c:	b019      	add	sp, #100	@ 0x64
 8021f0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021f12:	2300      	movs	r3, #0
 8021f14:	e7bd      	b.n	8021e92 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x286>
 8021f16:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8021f18:	e73f      	b.n	8021d9a <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x18e>
 8021f1a:	2e00      	cmp	r6, #0
 8021f1c:	d08b      	beq.n	8021e36 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x22a>
 8021f1e:	fb06 f102 	mul.w	r1, r6, r2
 8021f22:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8021f24:	f101 0e01 	add.w	lr, r1, #1
 8021f28:	eb0e 2e21 	add.w	lr, lr, r1, asr #8
 8021f2c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8021f30:	eba2 090e 	sub.w	r9, r2, lr
 8021f34:	4432      	add	r2, r6
 8021f36:	eba2 020e 	sub.w	r2, r2, lr
 8021f3a:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 8021f3e:	b2d1      	uxtb	r1, r2
 8021f40:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8021f42:	4372      	muls	r2, r6
 8021f44:	fb09 2e0e 	mla	lr, r9, lr, r2
 8021f48:	b2ea      	uxtb	r2, r5
 8021f4a:	f3c5 4507 	ubfx	r5, r5, #16, #8
 8021f4e:	fb09 f202 	mul.w	r2, r9, r2
 8021f52:	fb06 2200 	mla	r2, r6, r0, r2
 8021f56:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8021f58:	fb92 f2f1 	sdiv	r2, r2, r1
 8021f5c:	4346      	muls	r6, r0
 8021f5e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8021f62:	fb9e fef1 	sdiv	lr, lr, r1
 8021f66:	fb09 6505 	mla	r5, r9, r5, r6
 8021f6a:	ea42 220e 	orr.w	r2, r2, lr, lsl #8
 8021f6e:	fb95 f5f1 	sdiv	r5, r5, r1
 8021f72:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8021f76:	f8cc 5000 	str.w	r5, [ip]
 8021f7a:	e75c      	b.n	8021e36 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x22a>
 8021f7c:	20029ed0 	.word	0x20029ed0
 8021f80:	20029ed8 	.word	0x20029ed8
 8021f84:	20029ed2 	.word	0x20029ed2
 8021f88:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021f8a:	b152      	cbz	r2, 8021fa2 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
 8021f8c:	4414      	add	r4, r2
 8021f8e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8021f90:	b2a4      	uxth	r4, r4
 8021f92:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 8021f96:	f004 0407 	and.w	r4, r4, #7
 8021f9a:	9328      	str	r3, [sp, #160]	@ 0xa0
 8021f9c:	781b      	ldrb	r3, [r3, #0]
 8021f9e:	4123      	asrs	r3, r4
 8021fa0:	b2db      	uxtb	r3, r3
 8021fa2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8021fa4:	445a      	add	r2, fp
 8021fa6:	920a      	str	r2, [sp, #40]	@ 0x28
 8021fa8:	e723      	b.n	8021df2 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e6>
 8021faa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8021fac:	2b00      	cmp	r3, #0
 8021fae:	d1ad      	bne.n	8021f0c <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x300>
 8021fb0:	4b05      	ldr	r3, [pc, #20]	@ (8021fc8 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3bc>)
 8021fb2:	6818      	ldr	r0, [r3, #0]
 8021fb4:	6803      	ldr	r3, [r0, #0]
 8021fb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021fb8:	4798      	blx	r3
 8021fba:	e7a7      	b.n	8021f0c <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x300>
 8021fbc:	2b00      	cmp	r3, #0
 8021fbe:	f43f ae9b 	beq.w	8021cf8 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xec>
 8021fc2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8021fc6:	e771      	b.n	8021eac <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a0>
 8021fc8:	20029ed8 	.word	0x20029ed8

08021fcc <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 8021fcc:	b538      	push	{r3, r4, r5, lr}
 8021fce:	4c15      	ldr	r4, [pc, #84]	@ (8022024 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 8021fd0:	4605      	mov	r5, r0
 8021fd2:	7823      	ldrb	r3, [r4, #0]
 8021fd4:	f3bf 8f5b 	dmb	ish
 8021fd8:	07da      	lsls	r2, r3, #31
 8021fda:	d40b      	bmi.n	8021ff4 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 8021fdc:	4620      	mov	r0, r4
 8021fde:	f008 f971 	bl	802a2c4 <__cxa_guard_acquire>
 8021fe2:	b138      	cbz	r0, 8021ff4 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 8021fe4:	4620      	mov	r0, r4
 8021fe6:	f008 f979 	bl	802a2dc <__cxa_guard_release>
 8021fea:	4a0f      	ldr	r2, [pc, #60]	@ (8022028 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 8021fec:	490f      	ldr	r1, [pc, #60]	@ (802202c <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 8021fee:	4810      	ldr	r0, [pc, #64]	@ (8022030 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 8021ff0:	f008 f961 	bl	802a2b6 <__aeabi_atexit>
 8021ff4:	4c0f      	ldr	r4, [pc, #60]	@ (8022034 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 8021ff6:	7823      	ldrb	r3, [r4, #0]
 8021ff8:	f3bf 8f5b 	dmb	ish
 8021ffc:	07db      	lsls	r3, r3, #31
 8021ffe:	d40b      	bmi.n	8022018 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 8022000:	4620      	mov	r0, r4
 8022002:	f008 f95f 	bl	802a2c4 <__cxa_guard_acquire>
 8022006:	b138      	cbz	r0, 8022018 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 8022008:	4620      	mov	r0, r4
 802200a:	f008 f967 	bl	802a2dc <__cxa_guard_release>
 802200e:	4a06      	ldr	r2, [pc, #24]	@ (8022028 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 8022010:	4909      	ldr	r1, [pc, #36]	@ (8022038 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 8022012:	480a      	ldr	r0, [pc, #40]	@ (802203c <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 8022014:	f008 f94f 	bl	802a2b6 <__aeabi_atexit>
 8022018:	4b05      	ldr	r3, [pc, #20]	@ (8022030 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 802201a:	612b      	str	r3, [r5, #16]
 802201c:	4b07      	ldr	r3, [pc, #28]	@ (802203c <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 802201e:	616b      	str	r3, [r5, #20]
 8022020:	bd38      	pop	{r3, r4, r5, pc}
 8022022:	bf00      	nop
 8022024:	20029fbc 	.word	0x20029fbc
 8022028:	20000000 	.word	0x20000000
 802202c:	0801f477 	.word	0x0801f477
 8022030:	20007b00 	.word	0x20007b00
 8022034:	20029fc0 	.word	0x20029fc0
 8022038:	0801f475 	.word	0x0801f475
 802203c:	20007b04 	.word	0x20007b04

08022040 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 8022040:	b538      	push	{r3, r4, r5, lr}
 8022042:	4c15      	ldr	r4, [pc, #84]	@ (8022098 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 8022044:	4605      	mov	r5, r0
 8022046:	7823      	ldrb	r3, [r4, #0]
 8022048:	f3bf 8f5b 	dmb	ish
 802204c:	07da      	lsls	r2, r3, #31
 802204e:	d40b      	bmi.n	8022068 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 8022050:	4620      	mov	r0, r4
 8022052:	f008 f937 	bl	802a2c4 <__cxa_guard_acquire>
 8022056:	b138      	cbz	r0, 8022068 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 8022058:	4620      	mov	r0, r4
 802205a:	f008 f93f 	bl	802a2dc <__cxa_guard_release>
 802205e:	4a0f      	ldr	r2, [pc, #60]	@ (802209c <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 8022060:	490f      	ldr	r1, [pc, #60]	@ (80220a0 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 8022062:	4810      	ldr	r0, [pc, #64]	@ (80220a4 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 8022064:	f008 f927 	bl	802a2b6 <__aeabi_atexit>
 8022068:	4c0f      	ldr	r4, [pc, #60]	@ (80220a8 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 802206a:	7823      	ldrb	r3, [r4, #0]
 802206c:	f3bf 8f5b 	dmb	ish
 8022070:	07db      	lsls	r3, r3, #31
 8022072:	d40b      	bmi.n	802208c <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 8022074:	4620      	mov	r0, r4
 8022076:	f008 f925 	bl	802a2c4 <__cxa_guard_acquire>
 802207a:	b138      	cbz	r0, 802208c <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 802207c:	4620      	mov	r0, r4
 802207e:	f008 f92d 	bl	802a2dc <__cxa_guard_release>
 8022082:	4a06      	ldr	r2, [pc, #24]	@ (802209c <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 8022084:	4909      	ldr	r1, [pc, #36]	@ (80220ac <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 8022086:	480a      	ldr	r0, [pc, #40]	@ (80220b0 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 8022088:	f008 f915 	bl	802a2b6 <__aeabi_atexit>
 802208c:	4b05      	ldr	r3, [pc, #20]	@ (80220a4 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 802208e:	60ab      	str	r3, [r5, #8]
 8022090:	4b07      	ldr	r3, [pc, #28]	@ (80220b0 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 8022092:	60eb      	str	r3, [r5, #12]
 8022094:	bd38      	pop	{r3, r4, r5, pc}
 8022096:	bf00      	nop
 8022098:	20029f94 	.word	0x20029f94
 802209c:	20000000 	.word	0x20000000
 80220a0:	0801f47b 	.word	0x0801f47b
 80220a4:	20007ad8 	.word	0x20007ad8
 80220a8:	20029f98 	.word	0x20029f98
 80220ac:	0801f479 	.word	0x0801f479
 80220b0:	20007adc 	.word	0x20007adc

080220b4 <_ZN8touchgfx8LCD32bpp28enableTextureMapperL8_RGB565Ev>:
 80220b4:	b510      	push	{r4, lr}
 80220b6:	4604      	mov	r4, r0
 80220b8:	f7ff ff88 	bl	8021fcc <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 80220bc:	4620      	mov	r0, r4
 80220be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80220c2:	f7ff bfbd 	b.w	8022040 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

080220c8 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 80220c8:	b538      	push	{r3, r4, r5, lr}
 80220ca:	4c15      	ldr	r4, [pc, #84]	@ (8022120 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 80220cc:	4605      	mov	r5, r0
 80220ce:	7823      	ldrb	r3, [r4, #0]
 80220d0:	f3bf 8f5b 	dmb	ish
 80220d4:	07da      	lsls	r2, r3, #31
 80220d6:	d40b      	bmi.n	80220f0 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 80220d8:	4620      	mov	r0, r4
 80220da:	f008 f8f3 	bl	802a2c4 <__cxa_guard_acquire>
 80220de:	b138      	cbz	r0, 80220f0 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 80220e0:	4620      	mov	r0, r4
 80220e2:	f008 f8fb 	bl	802a2dc <__cxa_guard_release>
 80220e6:	4a0f      	ldr	r2, [pc, #60]	@ (8022124 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 80220e8:	490f      	ldr	r1, [pc, #60]	@ (8022128 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 80220ea:	4810      	ldr	r0, [pc, #64]	@ (802212c <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 80220ec:	f008 f8e3 	bl	802a2b6 <__aeabi_atexit>
 80220f0:	4c0f      	ldr	r4, [pc, #60]	@ (8022130 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 80220f2:	7823      	ldrb	r3, [r4, #0]
 80220f4:	f3bf 8f5b 	dmb	ish
 80220f8:	07db      	lsls	r3, r3, #31
 80220fa:	d40b      	bmi.n	8022114 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 80220fc:	4620      	mov	r0, r4
 80220fe:	f008 f8e1 	bl	802a2c4 <__cxa_guard_acquire>
 8022102:	b138      	cbz	r0, 8022114 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8022104:	4620      	mov	r0, r4
 8022106:	f008 f8e9 	bl	802a2dc <__cxa_guard_release>
 802210a:	4a06      	ldr	r2, [pc, #24]	@ (8022124 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 802210c:	4909      	ldr	r1, [pc, #36]	@ (8022134 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 802210e:	480a      	ldr	r0, [pc, #40]	@ (8022138 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8022110:	f008 f8d1 	bl	802a2b6 <__aeabi_atexit>
 8022114:	4b05      	ldr	r3, [pc, #20]	@ (802212c <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8022116:	622b      	str	r3, [r5, #32]
 8022118:	4b07      	ldr	r3, [pc, #28]	@ (8022138 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 802211a:	626b      	str	r3, [r5, #36]	@ 0x24
 802211c:	bd38      	pop	{r3, r4, r5, pc}
 802211e:	bf00      	nop
 8022120:	20029fc4 	.word	0x20029fc4
 8022124:	20000000 	.word	0x20000000
 8022128:	0801f46f 	.word	0x0801f46f
 802212c:	20007b08 	.word	0x20007b08
 8022130:	20029fc8 	.word	0x20029fc8
 8022134:	0801f46d 	.word	0x0801f46d
 8022138:	20007b0c 	.word	0x20007b0c

0802213c <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 802213c:	b538      	push	{r3, r4, r5, lr}
 802213e:	4c15      	ldr	r4, [pc, #84]	@ (8022194 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8022140:	4605      	mov	r5, r0
 8022142:	7823      	ldrb	r3, [r4, #0]
 8022144:	f3bf 8f5b 	dmb	ish
 8022148:	07da      	lsls	r2, r3, #31
 802214a:	d40b      	bmi.n	8022164 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 802214c:	4620      	mov	r0, r4
 802214e:	f008 f8b9 	bl	802a2c4 <__cxa_guard_acquire>
 8022152:	b138      	cbz	r0, 8022164 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8022154:	4620      	mov	r0, r4
 8022156:	f008 f8c1 	bl	802a2dc <__cxa_guard_release>
 802215a:	4a0f      	ldr	r2, [pc, #60]	@ (8022198 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 802215c:	490f      	ldr	r1, [pc, #60]	@ (802219c <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 802215e:	4810      	ldr	r0, [pc, #64]	@ (80221a0 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8022160:	f008 f8a9 	bl	802a2b6 <__aeabi_atexit>
 8022164:	4c0f      	ldr	r4, [pc, #60]	@ (80221a4 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 8022166:	7823      	ldrb	r3, [r4, #0]
 8022168:	f3bf 8f5b 	dmb	ish
 802216c:	07db      	lsls	r3, r3, #31
 802216e:	d40b      	bmi.n	8022188 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8022170:	4620      	mov	r0, r4
 8022172:	f008 f8a7 	bl	802a2c4 <__cxa_guard_acquire>
 8022176:	b138      	cbz	r0, 8022188 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8022178:	4620      	mov	r0, r4
 802217a:	f008 f8af 	bl	802a2dc <__cxa_guard_release>
 802217e:	4a06      	ldr	r2, [pc, #24]	@ (8022198 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8022180:	4909      	ldr	r1, [pc, #36]	@ (80221a8 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 8022182:	480a      	ldr	r0, [pc, #40]	@ (80221ac <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8022184:	f008 f897 	bl	802a2b6 <__aeabi_atexit>
 8022188:	4b05      	ldr	r3, [pc, #20]	@ (80221a0 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 802218a:	61ab      	str	r3, [r5, #24]
 802218c:	4b07      	ldr	r3, [pc, #28]	@ (80221ac <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 802218e:	61eb      	str	r3, [r5, #28]
 8022190:	bd38      	pop	{r3, r4, r5, pc}
 8022192:	bf00      	nop
 8022194:	20029f9c 	.word	0x20029f9c
 8022198:	20000000 	.word	0x20000000
 802219c:	0801f473 	.word	0x0801f473
 80221a0:	20007ae0 	.word	0x20007ae0
 80221a4:	20029fa0 	.word	0x20029fa0
 80221a8:	0801f471 	.word	0x0801f471
 80221ac:	20007ae4 	.word	0x20007ae4

080221b0 <_ZN8touchgfx8LCD32bpp28enableTextureMapperL8_RGB888Ev>:
 80221b0:	b510      	push	{r4, lr}
 80221b2:	4604      	mov	r4, r0
 80221b4:	f7ff ff88 	bl	80220c8 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 80221b8:	4620      	mov	r0, r4
 80221ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80221be:	f7ff bfbd 	b.w	802213c <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

080221c4 <_ZN8touchgfx8LCD32bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 80221c4:	b538      	push	{r3, r4, r5, lr}
 80221c6:	4c0b      	ldr	r4, [pc, #44]	@ (80221f4 <_ZN8touchgfx8LCD32bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x30>)
 80221c8:	4605      	mov	r5, r0
 80221ca:	7823      	ldrb	r3, [r4, #0]
 80221cc:	f3bf 8f5b 	dmb	ish
 80221d0:	07db      	lsls	r3, r3, #31
 80221d2:	d40b      	bmi.n	80221ec <_ZN8touchgfx8LCD32bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 80221d4:	4620      	mov	r0, r4
 80221d6:	f008 f875 	bl	802a2c4 <__cxa_guard_acquire>
 80221da:	b138      	cbz	r0, 80221ec <_ZN8touchgfx8LCD32bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 80221dc:	4620      	mov	r0, r4
 80221de:	f008 f87d 	bl	802a2dc <__cxa_guard_release>
 80221e2:	4a05      	ldr	r2, [pc, #20]	@ (80221f8 <_ZN8touchgfx8LCD32bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x34>)
 80221e4:	4905      	ldr	r1, [pc, #20]	@ (80221fc <_ZN8touchgfx8LCD32bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x38>)
 80221e6:	4806      	ldr	r0, [pc, #24]	@ (8022200 <_ZN8touchgfx8LCD32bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x3c>)
 80221e8:	f008 f865 	bl	802a2b6 <__aeabi_atexit>
 80221ec:	4b04      	ldr	r3, [pc, #16]	@ (8022200 <_ZN8touchgfx8LCD32bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x3c>)
 80221ee:	62eb      	str	r3, [r5, #44]	@ 0x2c
 80221f0:	bd38      	pop	{r3, r4, r5, pc}
 80221f2:	bf00      	nop
 80221f4:	20029fd4 	.word	0x20029fd4
 80221f8:	20000000 	.word	0x20000000
 80221fc:	0801f469 	.word	0x0801f469
 8022200:	20007b18 	.word	0x20007b18

08022204 <_ZN8touchgfx8LCD32bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8022204:	b538      	push	{r3, r4, r5, lr}
 8022206:	4c0b      	ldr	r4, [pc, #44]	@ (8022234 <_ZN8touchgfx8LCD32bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x30>)
 8022208:	4605      	mov	r5, r0
 802220a:	7823      	ldrb	r3, [r4, #0]
 802220c:	f3bf 8f5b 	dmb	ish
 8022210:	07db      	lsls	r3, r3, #31
 8022212:	d40b      	bmi.n	802222c <_ZN8touchgfx8LCD32bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8022214:	4620      	mov	r0, r4
 8022216:	f008 f855 	bl	802a2c4 <__cxa_guard_acquire>
 802221a:	b138      	cbz	r0, 802222c <_ZN8touchgfx8LCD32bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 802221c:	4620      	mov	r0, r4
 802221e:	f008 f85d 	bl	802a2dc <__cxa_guard_release>
 8022222:	4a05      	ldr	r2, [pc, #20]	@ (8022238 <_ZN8touchgfx8LCD32bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x34>)
 8022224:	4905      	ldr	r1, [pc, #20]	@ (802223c <_ZN8touchgfx8LCD32bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x38>)
 8022226:	4806      	ldr	r0, [pc, #24]	@ (8022240 <_ZN8touchgfx8LCD32bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x3c>)
 8022228:	f008 f845 	bl	802a2b6 <__aeabi_atexit>
 802222c:	4b04      	ldr	r3, [pc, #16]	@ (8022240 <_ZN8touchgfx8LCD32bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x3c>)
 802222e:	62ab      	str	r3, [r5, #40]	@ 0x28
 8022230:	bd38      	pop	{r3, r4, r5, pc}
 8022232:	bf00      	nop
 8022234:	20029fa4 	.word	0x20029fa4
 8022238:	20000000 	.word	0x20000000
 802223c:	0801f46b 	.word	0x0801f46b
 8022240:	20007ae8 	.word	0x20007ae8

08022244 <_ZN8touchgfx8LCD32bpp30enableTextureMapperL8_ARGB8888Ev>:
 8022244:	b510      	push	{r4, lr}
 8022246:	4604      	mov	r4, r0
 8022248:	f7ff ffbc 	bl	80221c4 <_ZN8touchgfx8LCD32bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 802224c:	4620      	mov	r0, r4
 802224e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022252:	f7ff bfd7 	b.w	8022204 <_ZN8touchgfx8LCD32bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

08022258 <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 8022258:	b538      	push	{r3, r4, r5, lr}
 802225a:	4c15      	ldr	r4, [pc, #84]	@ (80222b0 <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 802225c:	4605      	mov	r5, r0
 802225e:	7823      	ldrb	r3, [r4, #0]
 8022260:	f3bf 8f5b 	dmb	ish
 8022264:	07da      	lsls	r2, r3, #31
 8022266:	d40b      	bmi.n	8022280 <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 8022268:	4620      	mov	r0, r4
 802226a:	f008 f82b 	bl	802a2c4 <__cxa_guard_acquire>
 802226e:	b138      	cbz	r0, 8022280 <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 8022270:	4620      	mov	r0, r4
 8022272:	f008 f833 	bl	802a2dc <__cxa_guard_release>
 8022276:	4a0f      	ldr	r2, [pc, #60]	@ (80222b4 <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 8022278:	490f      	ldr	r1, [pc, #60]	@ (80222b8 <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 802227a:	4810      	ldr	r0, [pc, #64]	@ (80222bc <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 802227c:	f008 f81b 	bl	802a2b6 <__aeabi_atexit>
 8022280:	4c0f      	ldr	r4, [pc, #60]	@ (80222c0 <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 8022282:	7823      	ldrb	r3, [r4, #0]
 8022284:	f3bf 8f5b 	dmb	ish
 8022288:	07db      	lsls	r3, r3, #31
 802228a:	d40b      	bmi.n	80222a4 <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 802228c:	4620      	mov	r0, r4
 802228e:	f008 f819 	bl	802a2c4 <__cxa_guard_acquire>
 8022292:	b138      	cbz	r0, 80222a4 <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 8022294:	4620      	mov	r0, r4
 8022296:	f008 f821 	bl	802a2dc <__cxa_guard_release>
 802229a:	4a06      	ldr	r2, [pc, #24]	@ (80222b4 <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 802229c:	4909      	ldr	r1, [pc, #36]	@ (80222c4 <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 802229e:	480a      	ldr	r0, [pc, #40]	@ (80222c8 <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 80222a0:	f008 f809 	bl	802a2b6 <__aeabi_atexit>
 80222a4:	4b05      	ldr	r3, [pc, #20]	@ (80222bc <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 80222a6:	64ab      	str	r3, [r5, #72]	@ 0x48
 80222a8:	4b07      	ldr	r3, [pc, #28]	@ (80222c8 <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 80222aa:	64eb      	str	r3, [r5, #76]	@ 0x4c
 80222ac:	bd38      	pop	{r3, r4, r5, pc}
 80222ae:	bf00      	nop
 80222b0:	20029fd8 	.word	0x20029fd8
 80222b4:	20000000 	.word	0x20000000
 80222b8:	0801f45b 	.word	0x0801f45b
 80222bc:	20007b1c 	.word	0x20007b1c
 80222c0:	20029fdc 	.word	0x20029fdc
 80222c4:	0801f459 	.word	0x0801f459
 80222c8:	20007b20 	.word	0x20007b20

080222cc <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 80222cc:	b538      	push	{r3, r4, r5, lr}
 80222ce:	4c15      	ldr	r4, [pc, #84]	@ (8022324 <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 80222d0:	4605      	mov	r5, r0
 80222d2:	7823      	ldrb	r3, [r4, #0]
 80222d4:	f3bf 8f5b 	dmb	ish
 80222d8:	07da      	lsls	r2, r3, #31
 80222da:	d40b      	bmi.n	80222f4 <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 80222dc:	4620      	mov	r0, r4
 80222de:	f007 fff1 	bl	802a2c4 <__cxa_guard_acquire>
 80222e2:	b138      	cbz	r0, 80222f4 <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 80222e4:	4620      	mov	r0, r4
 80222e6:	f007 fff9 	bl	802a2dc <__cxa_guard_release>
 80222ea:	4a0f      	ldr	r2, [pc, #60]	@ (8022328 <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 80222ec:	490f      	ldr	r1, [pc, #60]	@ (802232c <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 80222ee:	4810      	ldr	r0, [pc, #64]	@ (8022330 <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 80222f0:	f007 ffe1 	bl	802a2b6 <__aeabi_atexit>
 80222f4:	4c0f      	ldr	r4, [pc, #60]	@ (8022334 <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 80222f6:	7823      	ldrb	r3, [r4, #0]
 80222f8:	f3bf 8f5b 	dmb	ish
 80222fc:	07db      	lsls	r3, r3, #31
 80222fe:	d40b      	bmi.n	8022318 <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 8022300:	4620      	mov	r0, r4
 8022302:	f007 ffdf 	bl	802a2c4 <__cxa_guard_acquire>
 8022306:	b138      	cbz	r0, 8022318 <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 8022308:	4620      	mov	r0, r4
 802230a:	f007 ffe7 	bl	802a2dc <__cxa_guard_release>
 802230e:	4a06      	ldr	r2, [pc, #24]	@ (8022328 <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 8022310:	4909      	ldr	r1, [pc, #36]	@ (8022338 <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 8022312:	480a      	ldr	r0, [pc, #40]	@ (802233c <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 8022314:	f007 ffcf 	bl	802a2b6 <__aeabi_atexit>
 8022318:	4b05      	ldr	r3, [pc, #20]	@ (8022330 <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 802231a:	642b      	str	r3, [r5, #64]	@ 0x40
 802231c:	4b07      	ldr	r3, [pc, #28]	@ (802233c <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 802231e:	646b      	str	r3, [r5, #68]	@ 0x44
 8022320:	bd38      	pop	{r3, r4, r5, pc}
 8022322:	bf00      	nop
 8022324:	20029fe0 	.word	0x20029fe0
 8022328:	20000000 	.word	0x20000000
 802232c:	0801f463 	.word	0x0801f463
 8022330:	20007b24 	.word	0x20007b24
 8022334:	20029fe4 	.word	0x20029fe4
 8022338:	0801f461 	.word	0x0801f461
 802233c:	20007b28 	.word	0x20007b28

08022340 <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 8022340:	b538      	push	{r3, r4, r5, lr}
 8022342:	4c15      	ldr	r4, [pc, #84]	@ (8022398 <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 8022344:	4605      	mov	r5, r0
 8022346:	7823      	ldrb	r3, [r4, #0]
 8022348:	f3bf 8f5b 	dmb	ish
 802234c:	07da      	lsls	r2, r3, #31
 802234e:	d40b      	bmi.n	8022368 <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 8022350:	4620      	mov	r0, r4
 8022352:	f007 ffb7 	bl	802a2c4 <__cxa_guard_acquire>
 8022356:	b138      	cbz	r0, 8022368 <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 8022358:	4620      	mov	r0, r4
 802235a:	f007 ffbf 	bl	802a2dc <__cxa_guard_release>
 802235e:	4a0f      	ldr	r2, [pc, #60]	@ (802239c <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 8022360:	490f      	ldr	r1, [pc, #60]	@ (80223a0 <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 8022362:	4810      	ldr	r0, [pc, #64]	@ (80223a4 <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 8022364:	f007 ffa7 	bl	802a2b6 <__aeabi_atexit>
 8022368:	4c0f      	ldr	r4, [pc, #60]	@ (80223a8 <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 802236a:	7823      	ldrb	r3, [r4, #0]
 802236c:	f3bf 8f5b 	dmb	ish
 8022370:	07db      	lsls	r3, r3, #31
 8022372:	d40b      	bmi.n	802238c <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 8022374:	4620      	mov	r0, r4
 8022376:	f007 ffa5 	bl	802a2c4 <__cxa_guard_acquire>
 802237a:	b138      	cbz	r0, 802238c <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 802237c:	4620      	mov	r0, r4
 802237e:	f007 ffad 	bl	802a2dc <__cxa_guard_release>
 8022382:	4a06      	ldr	r2, [pc, #24]	@ (802239c <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 8022384:	4909      	ldr	r1, [pc, #36]	@ (80223ac <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 8022386:	480a      	ldr	r0, [pc, #40]	@ (80223b0 <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 8022388:	f007 ff95 	bl	802a2b6 <__aeabi_atexit>
 802238c:	4b05      	ldr	r3, [pc, #20]	@ (80223a4 <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 802238e:	63ab      	str	r3, [r5, #56]	@ 0x38
 8022390:	4b07      	ldr	r3, [pc, #28]	@ (80223b0 <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 8022392:	63eb      	str	r3, [r5, #60]	@ 0x3c
 8022394:	bd38      	pop	{r3, r4, r5, pc}
 8022396:	bf00      	nop
 8022398:	20029fb0 	.word	0x20029fb0
 802239c:	20000000 	.word	0x20000000
 80223a0:	0801f45f 	.word	0x0801f45f
 80223a4:	20007af4 	.word	0x20007af4
 80223a8:	20029fb4 	.word	0x20029fb4
 80223ac:	0801f45d 	.word	0x0801f45d
 80223b0:	20007af8 	.word	0x20007af8

080223b4 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 80223b4:	b538      	push	{r3, r4, r5, lr}
 80223b6:	4c15      	ldr	r4, [pc, #84]	@ (802240c <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 80223b8:	4605      	mov	r5, r0
 80223ba:	7823      	ldrb	r3, [r4, #0]
 80223bc:	f3bf 8f5b 	dmb	ish
 80223c0:	07da      	lsls	r2, r3, #31
 80223c2:	d40b      	bmi.n	80223dc <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 80223c4:	4620      	mov	r0, r4
 80223c6:	f007 ff7d 	bl	802a2c4 <__cxa_guard_acquire>
 80223ca:	b138      	cbz	r0, 80223dc <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 80223cc:	4620      	mov	r0, r4
 80223ce:	f007 ff85 	bl	802a2dc <__cxa_guard_release>
 80223d2:	4a0f      	ldr	r2, [pc, #60]	@ (8022410 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 80223d4:	490f      	ldr	r1, [pc, #60]	@ (8022414 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 80223d6:	4810      	ldr	r0, [pc, #64]	@ (8022418 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 80223d8:	f007 ff6d 	bl	802a2b6 <__aeabi_atexit>
 80223dc:	4c0f      	ldr	r4, [pc, #60]	@ (802241c <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 80223de:	7823      	ldrb	r3, [r4, #0]
 80223e0:	f3bf 8f5b 	dmb	ish
 80223e4:	07db      	lsls	r3, r3, #31
 80223e6:	d40b      	bmi.n	8022400 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 80223e8:	4620      	mov	r0, r4
 80223ea:	f007 ff6b 	bl	802a2c4 <__cxa_guard_acquire>
 80223ee:	b138      	cbz	r0, 8022400 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 80223f0:	4620      	mov	r0, r4
 80223f2:	f007 ff73 	bl	802a2dc <__cxa_guard_release>
 80223f6:	4a06      	ldr	r2, [pc, #24]	@ (8022410 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 80223f8:	4909      	ldr	r1, [pc, #36]	@ (8022420 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 80223fa:	480a      	ldr	r0, [pc, #40]	@ (8022424 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 80223fc:	f007 ff5b 	bl	802a2b6 <__aeabi_atexit>
 8022400:	4b05      	ldr	r3, [pc, #20]	@ (8022418 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 8022402:	632b      	str	r3, [r5, #48]	@ 0x30
 8022404:	4b07      	ldr	r3, [pc, #28]	@ (8022424 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 8022406:	636b      	str	r3, [r5, #52]	@ 0x34
 8022408:	bd38      	pop	{r3, r4, r5, pc}
 802240a:	bf00      	nop
 802240c:	20029fcc 	.word	0x20029fcc
 8022410:	20000000 	.word	0x20000000
 8022414:	0801f467 	.word	0x0801f467
 8022418:	20007b10 	.word	0x20007b10
 802241c:	20029fd0 	.word	0x20029fd0
 8022420:	0801f465 	.word	0x0801f465
 8022424:	20007b14 	.word	0x20007b14

08022428 <_ZN8touchgfx8LCD32bpp25enableTextureMapperRGB565Ev>:
 8022428:	b510      	push	{r4, lr}
 802242a:	4604      	mov	r4, r0
 802242c:	f7ff ff14 	bl	8022258 <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 8022430:	4620      	mov	r0, r4
 8022432:	f7ff ff85 	bl	8022340 <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 8022436:	4620      	mov	r0, r4
 8022438:	f7ff ff48 	bl	80222cc <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 802243c:	4620      	mov	r0, r4
 802243e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022442:	f7ff bfb7 	b.w	80223b4 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

08022448 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 8022448:	b538      	push	{r3, r4, r5, lr}
 802244a:	4c15      	ldr	r4, [pc, #84]	@ (80224a0 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 802244c:	4605      	mov	r5, r0
 802244e:	7823      	ldrb	r3, [r4, #0]
 8022450:	f3bf 8f5b 	dmb	ish
 8022454:	07da      	lsls	r2, r3, #31
 8022456:	d40b      	bmi.n	8022470 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8022458:	4620      	mov	r0, r4
 802245a:	f007 ff33 	bl	802a2c4 <__cxa_guard_acquire>
 802245e:	b138      	cbz	r0, 8022470 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8022460:	4620      	mov	r0, r4
 8022462:	f007 ff3b 	bl	802a2dc <__cxa_guard_release>
 8022466:	4a0f      	ldr	r2, [pc, #60]	@ (80224a4 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8022468:	490f      	ldr	r1, [pc, #60]	@ (80224a8 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 802246a:	4810      	ldr	r0, [pc, #64]	@ (80224ac <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 802246c:	f007 ff23 	bl	802a2b6 <__aeabi_atexit>
 8022470:	4c0f      	ldr	r4, [pc, #60]	@ (80224b0 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 8022472:	7823      	ldrb	r3, [r4, #0]
 8022474:	f3bf 8f5b 	dmb	ish
 8022478:	07db      	lsls	r3, r3, #31
 802247a:	d40b      	bmi.n	8022494 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 802247c:	4620      	mov	r0, r4
 802247e:	f007 ff21 	bl	802a2c4 <__cxa_guard_acquire>
 8022482:	b138      	cbz	r0, 8022494 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8022484:	4620      	mov	r0, r4
 8022486:	f007 ff29 	bl	802a2dc <__cxa_guard_release>
 802248a:	4a06      	ldr	r2, [pc, #24]	@ (80224a4 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 802248c:	4909      	ldr	r1, [pc, #36]	@ (80224b4 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 802248e:	480a      	ldr	r0, [pc, #40]	@ (80224b8 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8022490:	f007 ff11 	bl	802a2b6 <__aeabi_atexit>
 8022494:	4b05      	ldr	r3, [pc, #20]	@ (80224ac <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8022496:	65ab      	str	r3, [r5, #88]	@ 0x58
 8022498:	4b07      	ldr	r3, [pc, #28]	@ (80224b8 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 802249a:	65eb      	str	r3, [r5, #92]	@ 0x5c
 802249c:	bd38      	pop	{r3, r4, r5, pc}
 802249e:	bf00      	nop
 80224a0:	20029fa8 	.word	0x20029fa8
 80224a4:	20000000 	.word	0x20000000
 80224a8:	0801f453 	.word	0x0801f453
 80224ac:	20007aec 	.word	0x20007aec
 80224b0:	20029fac 	.word	0x20029fac
 80224b4:	0801f451 	.word	0x0801f451
 80224b8:	20007af0 	.word	0x20007af0

080224bc <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 80224bc:	b538      	push	{r3, r4, r5, lr}
 80224be:	4c15      	ldr	r4, [pc, #84]	@ (8022514 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 80224c0:	4605      	mov	r5, r0
 80224c2:	7823      	ldrb	r3, [r4, #0]
 80224c4:	f3bf 8f5b 	dmb	ish
 80224c8:	07da      	lsls	r2, r3, #31
 80224ca:	d40b      	bmi.n	80224e4 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 80224cc:	4620      	mov	r0, r4
 80224ce:	f007 fef9 	bl	802a2c4 <__cxa_guard_acquire>
 80224d2:	b138      	cbz	r0, 80224e4 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 80224d4:	4620      	mov	r0, r4
 80224d6:	f007 ff01 	bl	802a2dc <__cxa_guard_release>
 80224da:	4a0f      	ldr	r2, [pc, #60]	@ (8022518 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 80224dc:	490f      	ldr	r1, [pc, #60]	@ (802251c <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 80224de:	4810      	ldr	r0, [pc, #64]	@ (8022520 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 80224e0:	f007 fee9 	bl	802a2b6 <__aeabi_atexit>
 80224e4:	4c0f      	ldr	r4, [pc, #60]	@ (8022524 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 80224e6:	7823      	ldrb	r3, [r4, #0]
 80224e8:	f3bf 8f5b 	dmb	ish
 80224ec:	07db      	lsls	r3, r3, #31
 80224ee:	d40b      	bmi.n	8022508 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 80224f0:	4620      	mov	r0, r4
 80224f2:	f007 fee7 	bl	802a2c4 <__cxa_guard_acquire>
 80224f6:	b138      	cbz	r0, 8022508 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 80224f8:	4620      	mov	r0, r4
 80224fa:	f007 feef 	bl	802a2dc <__cxa_guard_release>
 80224fe:	4a06      	ldr	r2, [pc, #24]	@ (8022518 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8022500:	4909      	ldr	r1, [pc, #36]	@ (8022528 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 8022502:	480a      	ldr	r0, [pc, #40]	@ (802252c <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8022504:	f007 fed7 	bl	802a2b6 <__aeabi_atexit>
 8022508:	4b05      	ldr	r3, [pc, #20]	@ (8022520 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 802250a:	652b      	str	r3, [r5, #80]	@ 0x50
 802250c:	4b07      	ldr	r3, [pc, #28]	@ (802252c <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 802250e:	656b      	str	r3, [r5, #84]	@ 0x54
 8022510:	bd38      	pop	{r3, r4, r5, pc}
 8022512:	bf00      	nop
 8022514:	20029f80 	.word	0x20029f80
 8022518:	20000000 	.word	0x20000000
 802251c:	0801f457 	.word	0x0801f457
 8022520:	20007ac4 	.word	0x20007ac4
 8022524:	20029f84 	.word	0x20029f84
 8022528:	0801f455 	.word	0x0801f455
 802252c:	20007ac8 	.word	0x20007ac8

08022530 <_ZN8touchgfx8LCD32bpp25enableTextureMapperRGB888Ev>:
 8022530:	b510      	push	{r4, lr}
 8022532:	4604      	mov	r4, r0
 8022534:	f7ff ff88 	bl	8022448 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 8022538:	4620      	mov	r0, r4
 802253a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802253e:	f7ff bfbd 	b.w	80224bc <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

08022544 <_ZN8touchgfx8LCD32bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8022544:	b538      	push	{r3, r4, r5, lr}
 8022546:	4c0b      	ldr	r4, [pc, #44]	@ (8022574 <_ZN8touchgfx8LCD32bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x30>)
 8022548:	4605      	mov	r5, r0
 802254a:	7823      	ldrb	r3, [r4, #0]
 802254c:	f3bf 8f5b 	dmb	ish
 8022550:	07db      	lsls	r3, r3, #31
 8022552:	d40b      	bmi.n	802256c <_ZN8touchgfx8LCD32bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8022554:	4620      	mov	r0, r4
 8022556:	f007 feb5 	bl	802a2c4 <__cxa_guard_acquire>
 802255a:	b138      	cbz	r0, 802256c <_ZN8touchgfx8LCD32bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 802255c:	4620      	mov	r0, r4
 802255e:	f007 febd 	bl	802a2dc <__cxa_guard_release>
 8022562:	4a05      	ldr	r2, [pc, #20]	@ (8022578 <_ZN8touchgfx8LCD32bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x34>)
 8022564:	4905      	ldr	r1, [pc, #20]	@ (802257c <_ZN8touchgfx8LCD32bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x38>)
 8022566:	4806      	ldr	r0, [pc, #24]	@ (8022580 <_ZN8touchgfx8LCD32bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x3c>)
 8022568:	f007 fea5 	bl	802a2b6 <__aeabi_atexit>
 802256c:	4b04      	ldr	r3, [pc, #16]	@ (8022580 <_ZN8touchgfx8LCD32bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x3c>)
 802256e:	666b      	str	r3, [r5, #100]	@ 0x64
 8022570:	bd38      	pop	{r3, r4, r5, pc}
 8022572:	bf00      	nop
 8022574:	20029fb8 	.word	0x20029fb8
 8022578:	20000000 	.word	0x20000000
 802257c:	0801f44d 	.word	0x0801f44d
 8022580:	20007afc 	.word	0x20007afc

08022584 <_ZN8touchgfx8LCD32bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8022584:	b538      	push	{r3, r4, r5, lr}
 8022586:	4c0b      	ldr	r4, [pc, #44]	@ (80225b4 <_ZN8touchgfx8LCD32bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x30>)
 8022588:	4605      	mov	r5, r0
 802258a:	7823      	ldrb	r3, [r4, #0]
 802258c:	f3bf 8f5b 	dmb	ish
 8022590:	07db      	lsls	r3, r3, #31
 8022592:	d40b      	bmi.n	80225ac <_ZN8touchgfx8LCD32bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8022594:	4620      	mov	r0, r4
 8022596:	f007 fe95 	bl	802a2c4 <__cxa_guard_acquire>
 802259a:	b138      	cbz	r0, 80225ac <_ZN8touchgfx8LCD32bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 802259c:	4620      	mov	r0, r4
 802259e:	f007 fe9d 	bl	802a2dc <__cxa_guard_release>
 80225a2:	4a05      	ldr	r2, [pc, #20]	@ (80225b8 <_ZN8touchgfx8LCD32bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x34>)
 80225a4:	4905      	ldr	r1, [pc, #20]	@ (80225bc <_ZN8touchgfx8LCD32bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x38>)
 80225a6:	4806      	ldr	r0, [pc, #24]	@ (80225c0 <_ZN8touchgfx8LCD32bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x3c>)
 80225a8:	f007 fe85 	bl	802a2b6 <__aeabi_atexit>
 80225ac:	4b04      	ldr	r3, [pc, #16]	@ (80225c0 <_ZN8touchgfx8LCD32bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x3c>)
 80225ae:	662b      	str	r3, [r5, #96]	@ 0x60
 80225b0:	bd38      	pop	{r3, r4, r5, pc}
 80225b2:	bf00      	nop
 80225b4:	20029f90 	.word	0x20029f90
 80225b8:	20000000 	.word	0x20000000
 80225bc:	0801f44f 	.word	0x0801f44f
 80225c0:	20007ad4 	.word	0x20007ad4

080225c4 <_ZN8touchgfx8LCD32bpp27enableTextureMapperARGB8888Ev>:
 80225c4:	b510      	push	{r4, lr}
 80225c6:	4604      	mov	r4, r0
 80225c8:	f7ff ffbc 	bl	8022544 <_ZN8touchgfx8LCD32bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 80225cc:	4620      	mov	r0, r4
 80225ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80225d2:	f7ff bfd7 	b.w	8022584 <_ZN8touchgfx8LCD32bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

080225d8 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 80225d8:	b538      	push	{r3, r4, r5, lr}
 80225da:	4c15      	ldr	r4, [pc, #84]	@ (8022630 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 80225dc:	4605      	mov	r5, r0
 80225de:	7823      	ldrb	r3, [r4, #0]
 80225e0:	f3bf 8f5b 	dmb	ish
 80225e4:	07da      	lsls	r2, r3, #31
 80225e6:	d40b      	bmi.n	8022600 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 80225e8:	4620      	mov	r0, r4
 80225ea:	f007 fe6b 	bl	802a2c4 <__cxa_guard_acquire>
 80225ee:	b138      	cbz	r0, 8022600 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 80225f0:	4620      	mov	r0, r4
 80225f2:	f007 fe73 	bl	802a2dc <__cxa_guard_release>
 80225f6:	4a0f      	ldr	r2, [pc, #60]	@ (8022634 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 80225f8:	490f      	ldr	r1, [pc, #60]	@ (8022638 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 80225fa:	4810      	ldr	r0, [pc, #64]	@ (802263c <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 80225fc:	f007 fe5b 	bl	802a2b6 <__aeabi_atexit>
 8022600:	4c0f      	ldr	r4, [pc, #60]	@ (8022640 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 8022602:	7823      	ldrb	r3, [r4, #0]
 8022604:	f3bf 8f5b 	dmb	ish
 8022608:	07db      	lsls	r3, r3, #31
 802260a:	d40b      	bmi.n	8022624 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 802260c:	4620      	mov	r0, r4
 802260e:	f007 fe59 	bl	802a2c4 <__cxa_guard_acquire>
 8022612:	b138      	cbz	r0, 8022624 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8022614:	4620      	mov	r0, r4
 8022616:	f007 fe61 	bl	802a2dc <__cxa_guard_release>
 802261a:	4a06      	ldr	r2, [pc, #24]	@ (8022634 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 802261c:	4909      	ldr	r1, [pc, #36]	@ (8022644 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 802261e:	480a      	ldr	r0, [pc, #40]	@ (8022648 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8022620:	f007 fe49 	bl	802a2b6 <__aeabi_atexit>
 8022624:	4b05      	ldr	r3, [pc, #20]	@ (802263c <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8022626:	672b      	str	r3, [r5, #112]	@ 0x70
 8022628:	4b07      	ldr	r3, [pc, #28]	@ (8022648 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 802262a:	676b      	str	r3, [r5, #116]	@ 0x74
 802262c:	bd38      	pop	{r3, r4, r5, pc}
 802262e:	bf00      	nop
 8022630:	20029f88 	.word	0x20029f88
 8022634:	20000000 	.word	0x20000000
 8022638:	0801f447 	.word	0x0801f447
 802263c:	20007acc 	.word	0x20007acc
 8022640:	20029f8c 	.word	0x20029f8c
 8022644:	0801f445 	.word	0x0801f445
 8022648:	20007ad0 	.word	0x20007ad0

0802264c <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv>:
 802264c:	b538      	push	{r3, r4, r5, lr}
 802264e:	4c15      	ldr	r4, [pc, #84]	@ (80226a4 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8022650:	4605      	mov	r5, r0
 8022652:	7823      	ldrb	r3, [r4, #0]
 8022654:	f3bf 8f5b 	dmb	ish
 8022658:	07da      	lsls	r2, r3, #31
 802265a:	d40b      	bmi.n	8022674 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 802265c:	4620      	mov	r0, r4
 802265e:	f007 fe31 	bl	802a2c4 <__cxa_guard_acquire>
 8022662:	b138      	cbz	r0, 8022674 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8022664:	4620      	mov	r0, r4
 8022666:	f007 fe39 	bl	802a2dc <__cxa_guard_release>
 802266a:	4a0f      	ldr	r2, [pc, #60]	@ (80226a8 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 802266c:	490f      	ldr	r1, [pc, #60]	@ (80226ac <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 802266e:	4810      	ldr	r0, [pc, #64]	@ (80226b0 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8022670:	f007 fe21 	bl	802a2b6 <__aeabi_atexit>
 8022674:	4c0f      	ldr	r4, [pc, #60]	@ (80226b4 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 8022676:	7823      	ldrb	r3, [r4, #0]
 8022678:	f3bf 8f5b 	dmb	ish
 802267c:	07db      	lsls	r3, r3, #31
 802267e:	d40b      	bmi.n	8022698 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8022680:	4620      	mov	r0, r4
 8022682:	f007 fe1f 	bl	802a2c4 <__cxa_guard_acquire>
 8022686:	b138      	cbz	r0, 8022698 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8022688:	4620      	mov	r0, r4
 802268a:	f007 fe27 	bl	802a2dc <__cxa_guard_release>
 802268e:	4a06      	ldr	r2, [pc, #24]	@ (80226a8 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8022690:	4909      	ldr	r1, [pc, #36]	@ (80226b8 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8022692:	480a      	ldr	r0, [pc, #40]	@ (80226bc <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8022694:	f007 fe0f 	bl	802a2b6 <__aeabi_atexit>
 8022698:	4b05      	ldr	r3, [pc, #20]	@ (80226b0 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 802269a:	66ab      	str	r3, [r5, #104]	@ 0x68
 802269c:	4b07      	ldr	r3, [pc, #28]	@ (80226bc <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 802269e:	66eb      	str	r3, [r5, #108]	@ 0x6c
 80226a0:	bd38      	pop	{r3, r4, r5, pc}
 80226a2:	bf00      	nop
 80226a4:	20029f78 	.word	0x20029f78
 80226a8:	20000000 	.word	0x20000000
 80226ac:	0801f44b 	.word	0x0801f44b
 80226b0:	20007abc 	.word	0x20007abc
 80226b4:	20029f7c 	.word	0x20029f7c
 80226b8:	0801f449 	.word	0x0801f449
 80226bc:	20007ac0 	.word	0x20007ac0

080226c0 <_ZN8touchgfx8LCD32bpp21enableTextureMapperA4Ev>:
 80226c0:	b510      	push	{r4, lr}
 80226c2:	4604      	mov	r4, r0
 80226c4:	f7ff ff88 	bl	80225d8 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv>
 80226c8:	4620      	mov	r0, r4
 80226ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80226ce:	f7ff bfbd 	b.w	802264c <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv>

080226d2 <_ZN8touchgfx8LCD32bpp22enableTextureMapperAllEv>:
 80226d2:	b510      	push	{r4, lr}
 80226d4:	4604      	mov	r4, r0
 80226d6:	f7ff fff3 	bl	80226c0 <_ZN8touchgfx8LCD32bpp21enableTextureMapperA4Ev>
 80226da:	4620      	mov	r0, r4
 80226dc:	f7ff ff72 	bl	80225c4 <_ZN8touchgfx8LCD32bpp27enableTextureMapperARGB8888Ev>
 80226e0:	4620      	mov	r0, r4
 80226e2:	f7ff fdaf 	bl	8022244 <_ZN8touchgfx8LCD32bpp30enableTextureMapperL8_ARGB8888Ev>
 80226e6:	4620      	mov	r0, r4
 80226e8:	f7ff fce4 	bl	80220b4 <_ZN8touchgfx8LCD32bpp28enableTextureMapperL8_RGB565Ev>
 80226ec:	4620      	mov	r0, r4
 80226ee:	f7ff fd5f 	bl	80221b0 <_ZN8touchgfx8LCD32bpp28enableTextureMapperL8_RGB888Ev>
 80226f2:	4620      	mov	r0, r4
 80226f4:	f7ff fe98 	bl	8022428 <_ZN8touchgfx8LCD32bpp25enableTextureMapperRGB565Ev>
 80226f8:	4620      	mov	r0, r4
 80226fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80226fe:	f7ff bf17 	b.w	8022530 <_ZN8touchgfx8LCD32bpp25enableTextureMapperRGB888Ev>
	...

08022704 <_ZN8touchgfx8LCD32bpp23enableDecompressorL8_L4Ev>:
 8022704:	b538      	push	{r3, r4, r5, lr}
 8022706:	4c0b      	ldr	r4, [pc, #44]	@ (8022734 <_ZN8touchgfx8LCD32bpp23enableDecompressorL8_L4Ev+0x30>)
 8022708:	4605      	mov	r5, r0
 802270a:	7823      	ldrb	r3, [r4, #0]
 802270c:	f3bf 8f5b 	dmb	ish
 8022710:	07db      	lsls	r3, r3, #31
 8022712:	d40b      	bmi.n	802272c <_ZN8touchgfx8LCD32bpp23enableDecompressorL8_L4Ev+0x28>
 8022714:	4620      	mov	r0, r4
 8022716:	f007 fdd5 	bl	802a2c4 <__cxa_guard_acquire>
 802271a:	b138      	cbz	r0, 802272c <_ZN8touchgfx8LCD32bpp23enableDecompressorL8_L4Ev+0x28>
 802271c:	4620      	mov	r0, r4
 802271e:	f007 fddd 	bl	802a2dc <__cxa_guard_release>
 8022722:	4a05      	ldr	r2, [pc, #20]	@ (8022738 <_ZN8touchgfx8LCD32bpp23enableDecompressorL8_L4Ev+0x34>)
 8022724:	4905      	ldr	r1, [pc, #20]	@ (802273c <_ZN8touchgfx8LCD32bpp23enableDecompressorL8_L4Ev+0x38>)
 8022726:	4806      	ldr	r0, [pc, #24]	@ (8022740 <_ZN8touchgfx8LCD32bpp23enableDecompressorL8_L4Ev+0x3c>)
 8022728:	f007 fdc5 	bl	802a2b6 <__aeabi_atexit>
 802272c:	4b04      	ldr	r3, [pc, #16]	@ (8022740 <_ZN8touchgfx8LCD32bpp23enableDecompressorL8_L4Ev+0x3c>)
 802272e:	67ab      	str	r3, [r5, #120]	@ 0x78
 8022730:	bd38      	pop	{r3, r4, r5, pc}
 8022732:	bf00      	nop
 8022734:	20029f6c 	.word	0x20029f6c
 8022738:	20000000 	.word	0x20000000
 802273c:	0801f443 	.word	0x0801f443
 8022740:	20007ab4 	.word	0x20007ab4

08022744 <_ZN8touchgfx8LCD32bpp24enableDecompressorL8_RLEEv>:
 8022744:	b538      	push	{r3, r4, r5, lr}
 8022746:	4c0b      	ldr	r4, [pc, #44]	@ (8022774 <_ZN8touchgfx8LCD32bpp24enableDecompressorL8_RLEEv+0x30>)
 8022748:	4605      	mov	r5, r0
 802274a:	7823      	ldrb	r3, [r4, #0]
 802274c:	f3bf 8f5b 	dmb	ish
 8022750:	07db      	lsls	r3, r3, #31
 8022752:	d40b      	bmi.n	802276c <_ZN8touchgfx8LCD32bpp24enableDecompressorL8_RLEEv+0x28>
 8022754:	4620      	mov	r0, r4
 8022756:	f007 fdb5 	bl	802a2c4 <__cxa_guard_acquire>
 802275a:	b138      	cbz	r0, 802276c <_ZN8touchgfx8LCD32bpp24enableDecompressorL8_RLEEv+0x28>
 802275c:	4620      	mov	r0, r4
 802275e:	f007 fdbd 	bl	802a2dc <__cxa_guard_release>
 8022762:	4a05      	ldr	r2, [pc, #20]	@ (8022778 <_ZN8touchgfx8LCD32bpp24enableDecompressorL8_RLEEv+0x34>)
 8022764:	4905      	ldr	r1, [pc, #20]	@ (802277c <_ZN8touchgfx8LCD32bpp24enableDecompressorL8_RLEEv+0x38>)
 8022766:	4806      	ldr	r0, [pc, #24]	@ (8022780 <_ZN8touchgfx8LCD32bpp24enableDecompressorL8_RLEEv+0x3c>)
 8022768:	f007 fda5 	bl	802a2b6 <__aeabi_atexit>
 802276c:	4b04      	ldr	r3, [pc, #16]	@ (8022780 <_ZN8touchgfx8LCD32bpp24enableDecompressorL8_RLEEv+0x3c>)
 802276e:	67eb      	str	r3, [r5, #124]	@ 0x7c
 8022770:	bd38      	pop	{r3, r4, r5, pc}
 8022772:	bf00      	nop
 8022774:	20029f70 	.word	0x20029f70
 8022778:	20000000 	.word	0x20000000
 802277c:	0801f441 	.word	0x0801f441
 8022780:	20007ab8 	.word	0x20007ab8

08022784 <_ZN8touchgfx8LCD32bpp25enableDecompressorL8_LZW9Ev>:
 8022784:	b570      	push	{r4, r5, r6, lr}
 8022786:	4d0d      	ldr	r5, [pc, #52]	@ (80227bc <_ZN8touchgfx8LCD32bpp25enableDecompressorL8_LZW9Ev+0x38>)
 8022788:	4606      	mov	r6, r0
 802278a:	4c0d      	ldr	r4, [pc, #52]	@ (80227c0 <_ZN8touchgfx8LCD32bpp25enableDecompressorL8_LZW9Ev+0x3c>)
 802278c:	782b      	ldrb	r3, [r5, #0]
 802278e:	f3bf 8f5b 	dmb	ish
 8022792:	f013 0f01 	tst.w	r3, #1
 8022796:	d10d      	bne.n	80227b4 <_ZN8touchgfx8LCD32bpp25enableDecompressorL8_LZW9Ev+0x30>
 8022798:	4628      	mov	r0, r5
 802279a:	f007 fd93 	bl	802a2c4 <__cxa_guard_acquire>
 802279e:	b148      	cbz	r0, 80227b4 <_ZN8touchgfx8LCD32bpp25enableDecompressorL8_LZW9Ev+0x30>
 80227a0:	4b08      	ldr	r3, [pc, #32]	@ (80227c4 <_ZN8touchgfx8LCD32bpp25enableDecompressorL8_LZW9Ev+0x40>)
 80227a2:	4628      	mov	r0, r5
 80227a4:	6023      	str	r3, [r4, #0]
 80227a6:	f007 fd99 	bl	802a2dc <__cxa_guard_release>
 80227aa:	4a07      	ldr	r2, [pc, #28]	@ (80227c8 <_ZN8touchgfx8LCD32bpp25enableDecompressorL8_LZW9Ev+0x44>)
 80227ac:	4620      	mov	r0, r4
 80227ae:	4907      	ldr	r1, [pc, #28]	@ (80227cc <_ZN8touchgfx8LCD32bpp25enableDecompressorL8_LZW9Ev+0x48>)
 80227b0:	f007 fd81 	bl	802a2b6 <__aeabi_atexit>
 80227b4:	f8c6 4080 	str.w	r4, [r6, #128]	@ 0x80
 80227b8:	bd70      	pop	{r4, r5, r6, pc}
 80227ba:	bf00      	nop
 80227bc:	20029f74 	.word	0x20029f74
 80227c0:	20029fe8 	.word	0x20029fe8
 80227c4:	08042890 	.word	0x08042890
 80227c8:	20000000 	.word	0x20000000
 80227cc:	0801f43f 	.word	0x0801f43f

080227d0 <_ZN8touchgfx8LCD32bpp24enableDecompressorL8_AllEv>:
 80227d0:	b510      	push	{r4, lr}
 80227d2:	4604      	mov	r4, r0
 80227d4:	f7ff ff96 	bl	8022704 <_ZN8touchgfx8LCD32bpp23enableDecompressorL8_L4Ev>
 80227d8:	4620      	mov	r0, r4
 80227da:	f7ff ffb3 	bl	8022744 <_ZN8touchgfx8LCD32bpp24enableDecompressorL8_RLEEv>
 80227de:	4620      	mov	r0, r4
 80227e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80227e4:	f7ff bfce 	b.w	8022784 <_ZN8touchgfx8LCD32bpp25enableDecompressorL8_LZW9Ev>

080227e8 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh>:
 80227e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80227ec:	e9dd 680e 	ldrd	r6, r8, [sp, #56]	@ 0x38
 80227f0:	f9bd e030 	ldrsh.w	lr, [sp, #48]	@ 0x30
 80227f4:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 80227f8:	f1b8 0f00 	cmp.w	r8, #0
 80227fc:	fb08 640e 	mla	r4, r8, lr, r6
 8022800:	f9bd b034 	ldrsh.w	fp, [sp, #52]	@ 0x34
 8022804:	9001      	str	r0, [sp, #4]
 8022806:	f89d 5040 	ldrb.w	r5, [sp, #64]	@ 0x40
 802280a:	eb02 0a04 	add.w	sl, r2, r4
 802280e:	f89d 7048 	ldrb.w	r7, [sp, #72]	@ 0x48
 8022812:	6808      	ldr	r0, [r1, #0]
 8022814:	f2c0 80dc 	blt.w	80229d0 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1e8>
 8022818:	45c3      	cmp	fp, r8
 802281a:	f340 80d9 	ble.w	80229d0 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1e8>
 802281e:	2e00      	cmp	r6, #0
 8022820:	f2c0 80d4 	blt.w	80229cc <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1e4>
 8022824:	45b6      	cmp	lr, r6
 8022826:	f340 80d1 	ble.w	80229cc <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1e4>
 802282a:	5d12      	ldrb	r2, [r2, r4]
 802282c:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 8022830:	ea4f 222c 	mov.w	r2, ip, asr #8
 8022834:	ea4f 04ec 	mov.w	r4, ip, asr #3
 8022838:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 802283c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8022840:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 8022844:	ea42 1952 	orr.w	r9, r2, r2, lsr #5
 8022848:	ea44 1294 	orr.w	r2, r4, r4, lsr #6
 802284c:	fa5f fc8c 	uxtb.w	ip, ip
 8022850:	0212      	lsls	r2, r2, #8
 8022852:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 8022856:	ea42 4209 	orr.w	r2, r2, r9, lsl #16
 802285a:	ea42 020c 	orr.w	r2, r2, ip
 802285e:	1c74      	adds	r4, r6, #1
 8022860:	f100 80b7 	bmi.w	80229d2 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1ea>
 8022864:	45a6      	cmp	lr, r4
 8022866:	f340 80b4 	ble.w	80229d2 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1ea>
 802286a:	2d00      	cmp	r5, #0
 802286c:	f000 80b1 	beq.w	80229d2 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1ea>
 8022870:	f89a 4001 	ldrb.w	r4, [sl, #1]
 8022874:	f833 c014 	ldrh.w	ip, [r3, r4, lsl #1]
 8022878:	ea4f 04ec 	mov.w	r4, ip, asr #3
 802287c:	ea4f 292c 	mov.w	r9, ip, asr #8
 8022880:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 8022884:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8022888:	f009 09f8 	and.w	r9, r9, #248	@ 0xf8
 802288c:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 8022890:	fa5f fc8c 	uxtb.w	ip, ip
 8022894:	ea49 1959 	orr.w	r9, r9, r9, lsr #5
 8022898:	0224      	lsls	r4, r4, #8
 802289a:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 802289e:	ea44 4909 	orr.w	r9, r4, r9, lsl #16
 80228a2:	ea49 090c 	orr.w	r9, r9, ip
 80228a6:	f118 0801 	adds.w	r8, r8, #1
 80228aa:	f100 8096 	bmi.w	80229da <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1f2>
 80228ae:	45c3      	cmp	fp, r8
 80228b0:	f340 8093 	ble.w	80229da <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1f2>
 80228b4:	9c01      	ldr	r4, [sp, #4]
 80228b6:	2c00      	cmp	r4, #0
 80228b8:	f000 808f 	beq.w	80229da <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1f2>
 80228bc:	2e00      	cmp	r6, #0
 80228be:	f2c0 808a 	blt.w	80229d6 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1ee>
 80228c2:	45b6      	cmp	lr, r6
 80228c4:	f340 8087 	ble.w	80229d6 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1ee>
 80228c8:	f81a 400e 	ldrb.w	r4, [sl, lr]
 80228cc:	f833 4014 	ldrh.w	r4, [r3, r4, lsl #1]
 80228d0:	ea4f 2824 	mov.w	r8, r4, asr #8
 80228d4:	ea4f 0ce4 	mov.w	ip, r4, asr #3
 80228d8:	f008 08f8 	and.w	r8, r8, #248	@ 0xf8
 80228dc:	00e4      	lsls	r4, r4, #3
 80228de:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 80228e2:	ea48 1b58 	orr.w	fp, r8, r8, lsr #5
 80228e6:	ea4c 189c 	orr.w	r8, ip, ip, lsr #6
 80228ea:	b2e4      	uxtb	r4, r4
 80228ec:	ea4f 2808 	mov.w	r8, r8, lsl #8
 80228f0:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 80228f4:	ea48 480b 	orr.w	r8, r8, fp, lsl #16
 80228f8:	ea48 0804 	orr.w	r8, r8, r4
 80228fc:	3601      	adds	r6, #1
 80228fe:	d419      	bmi.n	8022934 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x14c>
 8022900:	45b6      	cmp	lr, r6
 8022902:	dd17      	ble.n	8022934 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x14c>
 8022904:	b1b5      	cbz	r5, 8022934 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x14c>
 8022906:	44d6      	add	lr, sl
 8022908:	f89e 0001 	ldrb.w	r0, [lr, #1]
 802290c:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
 8022910:	10dc      	asrs	r4, r3, #3
 8022912:	1218      	asrs	r0, r3, #8
 8022914:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 8022918:	00db      	lsls	r3, r3, #3
 802291a:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 802291e:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 8022922:	ea40 1650 	orr.w	r6, r0, r0, lsr #5
 8022926:	b2db      	uxtb	r3, r3
 8022928:	0220      	lsls	r0, r4, #8
 802292a:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 802292e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8022932:	4318      	orrs	r0, r3
 8022934:	b2ad      	uxth	r5, r5
 8022936:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 802293a:	f002 16ff 	and.w	r6, r2, #16711935	@ 0xff00ff
 802293e:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8022942:	fb05 fa03 	mul.w	sl, r5, r3
 8022946:	012d      	lsls	r5, r5, #4
 8022948:	2fff      	cmp	r7, #255	@ 0xff
 802294a:	ebca 1303 	rsb	r3, sl, r3, lsl #4
 802294e:	f5c5 7b80 	rsb	fp, r5, #256	@ 0x100
 8022952:	eba5 050a 	sub.w	r5, r5, sl
 8022956:	fa1f fe83 	uxth.w	lr, r3
 802295a:	f009 13ff 	and.w	r3, r9, #16711935	@ 0xff00ff
 802295e:	b2ad      	uxth	r5, r5
 8022960:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 8022964:	ebab 0b0e 	sub.w	fp, fp, lr
 8022968:	fb05 f303 	mul.w	r3, r5, r3
 802296c:	fa1f fb8b 	uxth.w	fp, fp
 8022970:	fb05 f509 	mul.w	r5, r5, r9
 8022974:	fb0b 3606 	mla	r6, fp, r6, r3
 8022978:	f000 13ff 	and.w	r3, r0, #16711935	@ 0xff00ff
 802297c:	fb0b 5502 	mla	r5, fp, r2, r5
 8022980:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8022984:	fb0a 6603 	mla	r6, sl, r3, r6
 8022988:	f008 13ff 	and.w	r3, r8, #16711935	@ 0xff00ff
 802298c:	fb0a 5000 	mla	r0, sl, r0, r5
 8022990:	fb0e 6303 	mla	r3, lr, r3, r6
 8022994:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8022998:	f003 16ff 	and.w	r6, r3, #16711935	@ 0xff00ff
 802299c:	f408 437f 	and.w	r3, r8, #65280	@ 0xff00
 80229a0:	fb0e 0303 	mla	r3, lr, r3, r0
 80229a4:	ea4f 2313 	mov.w	r3, r3, lsr #8
 80229a8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80229ac:	ea43 0306 	orr.w	r3, r3, r6
 80229b0:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80229b4:	f3c3 2007 	ubfx	r0, r3, #8, #8
 80229b8:	b2d4      	uxtb	r4, r2
 80229ba:	b2c5      	uxtb	r5, r0
 80229bc:	d10f      	bne.n	80229de <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1f6>
 80229be:	700b      	strb	r3, [r1, #0]
 80229c0:	7048      	strb	r0, [r1, #1]
 80229c2:	708a      	strb	r2, [r1, #2]
 80229c4:	70cf      	strb	r7, [r1, #3]
 80229c6:	b003      	add	sp, #12
 80229c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80229cc:	4602      	mov	r2, r0
 80229ce:	e746      	b.n	802285e <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x76>
 80229d0:	4602      	mov	r2, r0
 80229d2:	4681      	mov	r9, r0
 80229d4:	e767      	b.n	80228a6 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0xbe>
 80229d6:	4680      	mov	r8, r0
 80229d8:	e790      	b.n	80228fc <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x114>
 80229da:	4680      	mov	r8, r0
 80229dc:	e7aa      	b.n	8022934 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x14c>
 80229de:	2f00      	cmp	r7, #0
 80229e0:	d0f1      	beq.n	80229c6 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1de>
 80229e2:	78ce      	ldrb	r6, [r1, #3]
 80229e4:	b2db      	uxtb	r3, r3
 80229e6:	fb17 f505 	smulbb	r5, r7, r5
 80229ea:	fb07 f206 	mul.w	r2, r7, r6
 80229ee:	1c50      	adds	r0, r2, #1
 80229f0:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 80229f4:	19ba      	adds	r2, r7, r6
 80229f6:	1200      	asrs	r0, r0, #8
 80229f8:	1a12      	subs	r2, r2, r0
 80229fa:	1a30      	subs	r0, r6, r0
 80229fc:	780e      	ldrb	r6, [r1, #0]
 80229fe:	b2d2      	uxtb	r2, r2
 8022a00:	4346      	muls	r6, r0
 8022a02:	70ca      	strb	r2, [r1, #3]
 8022a04:	fb07 6303 	mla	r3, r7, r3, r6
 8022a08:	fb17 f704 	smulbb	r7, r7, r4
 8022a0c:	fb93 f3f2 	sdiv	r3, r3, r2
 8022a10:	700b      	strb	r3, [r1, #0]
 8022a12:	784b      	ldrb	r3, [r1, #1]
 8022a14:	fb00 5303 	mla	r3, r0, r3, r5
 8022a18:	fb93 f3f2 	sdiv	r3, r3, r2
 8022a1c:	704b      	strb	r3, [r1, #1]
 8022a1e:	788b      	ldrb	r3, [r1, #2]
 8022a20:	fb00 7703 	mla	r7, r0, r3, r7
 8022a24:	fb97 f7f2 	sdiv	r7, r7, r2
 8022a28:	708f      	strb	r7, [r1, #2]
 8022a2a:	e7cc      	b.n	80229c6 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1de>

08022a2c <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022a30:	b097      	sub	sp, #92	@ 0x5c
 8022a32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8022a36:	9213      	str	r2, [sp, #76]	@ 0x4c
 8022a38:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8022a3a:	9014      	str	r0, [sp, #80]	@ 0x50
 8022a3c:	910c      	str	r1, [sp, #48]	@ 0x30
 8022a3e:	6850      	ldr	r0, [r2, #4]
 8022a40:	9309      	str	r3, [sp, #36]	@ 0x24
 8022a42:	6812      	ldr	r2, [r2, #0]
 8022a44:	f89d 40a4 	ldrb.w	r4, [sp, #164]	@ 0xa4
 8022a48:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	@ 0x98
 8022a4c:	e9dd a621 	ldrd	sl, r6, [sp, #132]	@ 0x84
 8022a50:	fb00 1303 	mla	r3, r0, r3, r1
 8022a54:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8022a58:	930a      	str	r3, [sp, #40]	@ 0x28
 8022a5a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8022a5c:	681b      	ldr	r3, [r3, #0]
 8022a5e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8022a60:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8022a62:	685f      	ldr	r7, [r3, #4]
 8022a64:	3704      	adds	r7, #4
 8022a66:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022a68:	2b00      	cmp	r3, #0
 8022a6a:	dc03      	bgt.n	8022a74 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8022a6c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8022a6e:	2b00      	cmp	r3, #0
 8022a70:	f340 826a 	ble.w	8022f48 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51c>
 8022a74:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8022a76:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022a7a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022a7e:	1e48      	subs	r0, r1, #1
 8022a80:	f102 3cff 	add.w	ip, r2, #4294967295
 8022a84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022a86:	2b00      	cmp	r3, #0
 8022a88:	f340 80ce 	ble.w	8022c28 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 8022a8c:	ea5f 4e2a 	movs.w	lr, sl, asr #16
 8022a90:	ea4f 4326 	mov.w	r3, r6, asr #16
 8022a94:	d406      	bmi.n	8022aa4 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8022a96:	4586      	cmp	lr, r0
 8022a98:	da04      	bge.n	8022aa4 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8022a9a:	2b00      	cmp	r3, #0
 8022a9c:	db02      	blt.n	8022aa4 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8022a9e:	4563      	cmp	r3, ip
 8022aa0:	f2c0 80c3 	blt.w	8022c2a <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 8022aa4:	f11e 0e01 	adds.w	lr, lr, #1
 8022aa8:	f100 80b3 	bmi.w	8022c12 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8022aac:	4571      	cmp	r1, lr
 8022aae:	f2c0 80b0 	blt.w	8022c12 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8022ab2:	3301      	adds	r3, #1
 8022ab4:	f100 80ad 	bmi.w	8022c12 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8022ab8:	429a      	cmp	r2, r3
 8022aba:	f2c0 80aa 	blt.w	8022c12 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8022abe:	e9dd b809 	ldrd	fp, r8, [sp, #36]	@ 0x24
 8022ac2:	f1bb 0f00 	cmp.w	fp, #0
 8022ac6:	f340 80ce 	ble.w	8022c66 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8022aca:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8022acc:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8022ad0:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8022ad2:	f3ca 3003 	ubfx	r0, sl, #12, #4
 8022ad6:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8022ada:	ea5f 422a 	movs.w	r2, sl, asr #16
 8022ade:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8022ae2:	689b      	ldr	r3, [r3, #8]
 8022ae4:	f100 8141 	bmi.w	8022d6a <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8022ae8:	f103 39ff 	add.w	r9, r3, #4294967295
 8022aec:	454a      	cmp	r2, r9
 8022aee:	f280 813c 	bge.w	8022d6a <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8022af2:	f1bc 0f00 	cmp.w	ip, #0
 8022af6:	f2c0 8138 	blt.w	8022d6a <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8022afa:	f10e 39ff 	add.w	r9, lr, #4294967295
 8022afe:	45cc      	cmp	ip, r9
 8022b00:	f280 8133 	bge.w	8022d6a <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8022b04:	b21b      	sxth	r3, r3
 8022b06:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8022b08:	fb0c 2203 	mla	r2, ip, r3, r2
 8022b0c:	eb05 0902 	add.w	r9, r5, r2
 8022b10:	5caa      	ldrb	r2, [r5, r2]
 8022b12:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 8022b16:	2800      	cmp	r0, #0
 8022b18:	f000 80e9 	beq.w	8022cee <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c2>
 8022b1c:	f899 2001 	ldrb.w	r2, [r9, #1]
 8022b20:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 8022b24:	920f      	str	r2, [sp, #60]	@ 0x3c
 8022b26:	b151      	cbz	r1, 8022b3e <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8022b28:	eb09 0203 	add.w	r2, r9, r3
 8022b2c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8022b30:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8022b34:	930d      	str	r3, [sp, #52]	@ 0x34
 8022b36:	7853      	ldrb	r3, [r2, #1]
 8022b38:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8022b3c:	9310      	str	r3, [sp, #64]	@ 0x40
 8022b3e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8022b40:	fb10 f201 	smulbb	r2, r0, r1
 8022b44:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8022b46:	2cff      	cmp	r4, #255	@ 0xff
 8022b48:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8022b4c:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8022b50:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 8022b54:	ea4f 02e2 	mov.w	r2, r2, asr #3
 8022b58:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 8022b5c:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 8022b60:	ea4c 0c03 	orr.w	ip, ip, r3
 8022b64:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8022b66:	ea4f 4303 	mov.w	r3, r3, lsl #16
 8022b6a:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 8022b6e:	ea43 0305 	orr.w	r3, r3, r5
 8022b72:	fb02 f303 	mul.w	r3, r2, r3
 8022b76:	fb09 330c 	mla	r3, r9, ip, r3
 8022b7a:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 8022b7e:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 8022b82:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 8022b86:	ea4c 0e0e 	orr.w	lr, ip, lr
 8022b8a:	f1c1 0c10 	rsb	ip, r1, #16
 8022b8e:	ebac 0c00 	sub.w	ip, ip, r0
 8022b92:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8022b96:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8022b9a:	fb0c 3c0e 	mla	ip, ip, lr, r3
 8022b9e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8022ba0:	ea4f 4003 	mov.w	r0, r3, lsl #16
 8022ba4:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8022ba8:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 8022bac:	ea40 0003 	orr.w	r0, r0, r3
 8022bb0:	fb02 c200 	mla	r2, r2, r0, ip
 8022bb4:	ea4f 5352 	mov.w	r3, r2, lsr #21
 8022bb8:	ea4f 1252 	mov.w	r2, r2, lsr #5
 8022bbc:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8022bc0:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8022bc4:	ea42 0203 	orr.w	r2, r2, r3
 8022bc8:	b293      	uxth	r3, r2
 8022bca:	ea4f 2223 	mov.w	r2, r3, asr #8
 8022bce:	ea4f 01e3 	mov.w	r1, r3, asr #3
 8022bd2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8022bd6:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 8022bda:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8022bde:	b2db      	uxtb	r3, r3
 8022be0:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8022be4:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 8022be8:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 8022bec:	f040 8088 	bne.w	8022d00 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 8022bf0:	f888 3000 	strb.w	r3, [r8]
 8022bf4:	f888 1001 	strb.w	r1, [r8, #1]
 8022bf8:	f888 2002 	strb.w	r2, [r8, #2]
 8022bfc:	f888 4003 	strb.w	r4, [r8, #3]
 8022c00:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8022c02:	f108 0804 	add.w	r8, r8, #4
 8022c06:	f10b 3bff 	add.w	fp, fp, #4294967295
 8022c0a:	449a      	add	sl, r3
 8022c0c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8022c0e:	441e      	add	r6, r3
 8022c10:	e757      	b.n	8022ac2 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8022c12:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8022c14:	449a      	add	sl, r3
 8022c16:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8022c18:	441e      	add	r6, r3
 8022c1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022c1c:	3b01      	subs	r3, #1
 8022c1e:	9309      	str	r3, [sp, #36]	@ 0x24
 8022c20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022c22:	3304      	adds	r3, #4
 8022c24:	930a      	str	r3, [sp, #40]	@ 0x28
 8022c26:	e72d      	b.n	8022a84 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8022c28:	d024      	beq.n	8022c74 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8022c2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022c2c:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 8022c2e:	3b01      	subs	r3, #1
 8022c30:	fb00 a003 	mla	r0, r0, r3, sl
 8022c34:	1400      	asrs	r0, r0, #16
 8022c36:	f53f af42 	bmi.w	8022abe <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8022c3a:	3901      	subs	r1, #1
 8022c3c:	4288      	cmp	r0, r1
 8022c3e:	f6bf af3e 	bge.w	8022abe <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8022c42:	9924      	ldr	r1, [sp, #144]	@ 0x90
 8022c44:	fb01 6303 	mla	r3, r1, r3, r6
 8022c48:	141b      	asrs	r3, r3, #16
 8022c4a:	f53f af38 	bmi.w	8022abe <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8022c4e:	3a01      	subs	r2, #1
 8022c50:	4293      	cmp	r3, r2
 8022c52:	f6bf af34 	bge.w	8022abe <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8022c56:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022c58:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
 8022c5c:	3304      	adds	r3, #4
 8022c5e:	f1b9 0f00 	cmp.w	r9, #0
 8022c62:	f300 80a1 	bgt.w	8022da8 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8022c66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022c68:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8022c6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022c6e:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8022c72:	930a      	str	r3, [sp, #40]	@ 0x28
 8022c74:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022c76:	2b00      	cmp	r3, #0
 8022c78:	f340 8166 	ble.w	8022f48 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51c>
 8022c7c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022c80:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8022c82:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022c86:	eeb0 6a62 	vmov.f32	s12, s5
 8022c8a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8022c8e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022c92:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022c96:	ee16 aa10 	vmov	sl, s12
 8022c9a:	eeb0 6a43 	vmov.f32	s12, s6
 8022c9e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022ca2:	ee16 6a10 	vmov	r6, s12
 8022ca6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022caa:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022cae:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022cb2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022cb6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022cba:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022cbe:	ee12 2a90 	vmov	r2, s5
 8022cc2:	eef0 2a47 	vmov.f32	s5, s14
 8022cc6:	fb92 f3f3 	sdiv	r3, r2, r3
 8022cca:	ee13 2a10 	vmov	r2, s6
 8022cce:	9323      	str	r3, [sp, #140]	@ 0x8c
 8022cd0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8022cd2:	eeb0 3a67 	vmov.f32	s6, s15
 8022cd6:	fb92 f3f3 	sdiv	r3, r2, r3
 8022cda:	9324      	str	r3, [sp, #144]	@ 0x90
 8022cdc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022cde:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8022ce0:	3b01      	subs	r3, #1
 8022ce2:	930c      	str	r3, [sp, #48]	@ 0x30
 8022ce4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8022ce6:	bf08      	it	eq
 8022ce8:	4613      	moveq	r3, r2
 8022cea:	9309      	str	r3, [sp, #36]	@ 0x24
 8022cec:	e6bb      	b.n	8022a66 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8022cee:	2900      	cmp	r1, #0
 8022cf0:	f43f af25 	beq.w	8022b3e <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8022cf4:	f819 3003 	ldrb.w	r3, [r9, r3]
 8022cf8:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8022cfc:	930d      	str	r3, [sp, #52]	@ 0x34
 8022cfe:	e71e      	b.n	8022b3e <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8022d00:	2c00      	cmp	r4, #0
 8022d02:	f43f af7d 	beq.w	8022c00 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8022d06:	f898 e003 	ldrb.w	lr, [r8, #3]
 8022d0a:	fb13 f304 	smulbb	r3, r3, r4
 8022d0e:	fb14 f101 	smulbb	r1, r4, r1
 8022d12:	fb14 f202 	smulbb	r2, r4, r2
 8022d16:	fb04 fc0e 	mul.w	ip, r4, lr
 8022d1a:	f10c 0001 	add.w	r0, ip, #1
 8022d1e:	eb00 201c 	add.w	r0, r0, ip, lsr #8
 8022d22:	eb04 0c0e 	add.w	ip, r4, lr
 8022d26:	1200      	asrs	r0, r0, #8
 8022d28:	ebac 0c00 	sub.w	ip, ip, r0
 8022d2c:	ebae 0000 	sub.w	r0, lr, r0
 8022d30:	f898 e000 	ldrb.w	lr, [r8]
 8022d34:	fa5f fc8c 	uxtb.w	ip, ip
 8022d38:	fb00 330e 	mla	r3, r0, lr, r3
 8022d3c:	f888 c003 	strb.w	ip, [r8, #3]
 8022d40:	fb93 f3fc 	sdiv	r3, r3, ip
 8022d44:	f888 3000 	strb.w	r3, [r8]
 8022d48:	f898 3001 	ldrb.w	r3, [r8, #1]
 8022d4c:	fb00 1103 	mla	r1, r0, r3, r1
 8022d50:	f898 3002 	ldrb.w	r3, [r8, #2]
 8022d54:	fb00 2003 	mla	r0, r0, r3, r2
 8022d58:	fb91 f1fc 	sdiv	r1, r1, ip
 8022d5c:	fb90 f0fc 	sdiv	r0, r0, ip
 8022d60:	f888 1001 	strb.w	r1, [r8, #1]
 8022d64:	f888 0002 	strb.w	r0, [r8, #2]
 8022d68:	e74a      	b.n	8022c00 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8022d6a:	f112 0901 	adds.w	r9, r2, #1
 8022d6e:	f53f af47 	bmi.w	8022c00 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8022d72:	454b      	cmp	r3, r9
 8022d74:	f6ff af44 	blt.w	8022c00 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8022d78:	f11c 0901 	adds.w	r9, ip, #1
 8022d7c:	f53f af40 	bmi.w	8022c00 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8022d80:	45ce      	cmp	lr, r9
 8022d82:	f6ff af3d 	blt.w	8022c00 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8022d86:	9202      	str	r2, [sp, #8]
 8022d88:	b21b      	sxth	r3, r3
 8022d8a:	fa0f f28e 	sxth.w	r2, lr
 8022d8e:	9300      	str	r3, [sp, #0]
 8022d90:	463b      	mov	r3, r7
 8022d92:	9201      	str	r2, [sp, #4]
 8022d94:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8022d96:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8022d9a:	e9cd c003 	strd	ip, r0, [sp, #12]
 8022d9e:	4641      	mov	r1, r8
 8022da0:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8022da2:	f7ff fd21 	bl	80227e8 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh>
 8022da6:	e72b      	b.n	8022c00 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8022da8:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8022daa:	ea4f 412a 	mov.w	r1, sl, asr #16
 8022dae:	1430      	asrs	r0, r6, #16
 8022db0:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8022db2:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8022db6:	f3ca 3803 	ubfx	r8, sl, #12, #4
 8022dba:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8022dbe:	fb02 1000 	mla	r0, r2, r0, r1
 8022dc2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8022dc4:	4401      	add	r1, r0
 8022dc6:	5c28      	ldrb	r0, [r5, r0]
 8022dc8:	f837 0010 	ldrh.w	r0, [r7, r0, lsl #1]
 8022dcc:	f1b8 0f00 	cmp.w	r8, #0
 8022dd0:	d07d      	beq.n	8022ece <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a2>
 8022dd2:	f891 e001 	ldrb.w	lr, [r1, #1]
 8022dd6:	f837 501e 	ldrh.w	r5, [r7, lr, lsl #1]
 8022dda:	9511      	str	r5, [sp, #68]	@ 0x44
 8022ddc:	f1bc 0f00 	cmp.w	ip, #0
 8022de0:	d00a      	beq.n	8022df8 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 8022de2:	eb01 0e02 	add.w	lr, r1, r2
 8022de6:	5c8a      	ldrb	r2, [r1, r2]
 8022de8:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 8022dec:	920e      	str	r2, [sp, #56]	@ 0x38
 8022dee:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8022df2:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 8022df6:	9212      	str	r2, [sp, #72]	@ 0x48
 8022df8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8022dfa:	fb18 f10c 	smulbb	r1, r8, ip
 8022dfe:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8022e00:	2cff      	cmp	r4, #255	@ 0xff
 8022e02:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 8022e06:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8022e0a:	ea4f 01e1 	mov.w	r1, r1, asr #3
 8022e0e:	f425 6bfc 	bic.w	fp, r5, #2016	@ 0x7e0
 8022e12:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
 8022e16:	ea4e 0e02 	orr.w	lr, lr, r2
 8022e1a:	ebc1 0248 	rsb	r2, r1, r8, lsl #1
 8022e1e:	9215      	str	r2, [sp, #84]	@ 0x54
 8022e20:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8022e22:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8022e24:	ea4f 4202 	mov.w	r2, r2, lsl #16
 8022e28:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8022e2c:	ea42 020b 	orr.w	r2, r2, fp
 8022e30:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8022e34:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8022e38:	fb01 f202 	mul.w	r2, r1, r2
 8022e3c:	fb05 2e0e 	mla	lr, r5, lr, r2
 8022e40:	f00b 62fc 	and.w	r2, fp, #132120576	@ 0x7e00000
 8022e44:	ea42 0b00 	orr.w	fp, r2, r0
 8022e48:	f1cc 0010 	rsb	r0, ip, #16
 8022e4c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8022e4e:	eba0 0808 	sub.w	r8, r0, r8
 8022e52:	eb01 0848 	add.w	r8, r1, r8, lsl #1
 8022e56:	ebc1 014c 	rsb	r1, r1, ip, lsl #1
 8022e5a:	fb08 ee0b 	mla	lr, r8, fp, lr
 8022e5e:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8022e62:	f422 68fc 	bic.w	r8, r2, #2016	@ 0x7e0
 8022e66:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8022e6a:	ea4b 0808 	orr.w	r8, fp, r8
 8022e6e:	fb01 ee08 	mla	lr, r1, r8, lr
 8022e72:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8022e76:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8022e7a:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8022e7e:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 8022e82:	ea42 0e0e 	orr.w	lr, r2, lr
 8022e86:	fa1f f28e 	uxth.w	r2, lr
 8022e8a:	ea4f 2122 	mov.w	r1, r2, asr #8
 8022e8e:	ea4f 00e2 	mov.w	r0, r2, asr #3
 8022e92:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8022e96:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8022e9a:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8022e9e:	b2d2      	uxtb	r2, r2
 8022ea0:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 8022ea4:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 8022ea8:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8022eac:	d117      	bne.n	8022ede <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b2>
 8022eae:	f803 2c04 	strb.w	r2, [r3, #-4]
 8022eb2:	f803 0c03 	strb.w	r0, [r3, #-3]
 8022eb6:	f803 1c02 	strb.w	r1, [r3, #-2]
 8022eba:	f803 4c01 	strb.w	r4, [r3, #-1]
 8022ebe:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8022ec0:	3304      	adds	r3, #4
 8022ec2:	f109 39ff 	add.w	r9, r9, #4294967295
 8022ec6:	4492      	add	sl, r2
 8022ec8:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8022eca:	4416      	add	r6, r2
 8022ecc:	e6c7      	b.n	8022c5e <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 8022ece:	f1bc 0f00 	cmp.w	ip, #0
 8022ed2:	d091      	beq.n	8022df8 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 8022ed4:	5c8a      	ldrb	r2, [r1, r2]
 8022ed6:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 8022eda:	920e      	str	r2, [sp, #56]	@ 0x38
 8022edc:	e78c      	b.n	8022df8 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 8022ede:	2c00      	cmp	r4, #0
 8022ee0:	d0ed      	beq.n	8022ebe <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x492>
 8022ee2:	f813 8c01 	ldrb.w	r8, [r3, #-1]
 8022ee6:	fb12 f204 	smulbb	r2, r2, r4
 8022eea:	fb14 f000 	smulbb	r0, r4, r0
 8022eee:	fb14 f101 	smulbb	r1, r4, r1
 8022ef2:	fb04 fc08 	mul.w	ip, r4, r8
 8022ef6:	f10c 0e01 	add.w	lr, ip, #1
 8022efa:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 8022efe:	eb04 0c08 	add.w	ip, r4, r8
 8022f02:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8022f06:	ebac 0c0e 	sub.w	ip, ip, lr
 8022f0a:	eba8 0e0e 	sub.w	lr, r8, lr
 8022f0e:	f813 8c04 	ldrb.w	r8, [r3, #-4]
 8022f12:	fa5f fc8c 	uxtb.w	ip, ip
 8022f16:	fb0e 2208 	mla	r2, lr, r8, r2
 8022f1a:	f803 cc01 	strb.w	ip, [r3, #-1]
 8022f1e:	fb92 f2fc 	sdiv	r2, r2, ip
 8022f22:	f803 2c04 	strb.w	r2, [r3, #-4]
 8022f26:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 8022f2a:	fb0e 0002 	mla	r0, lr, r2, r0
 8022f2e:	f813 2c02 	ldrb.w	r2, [r3, #-2]
 8022f32:	fb0e 1e02 	mla	lr, lr, r2, r1
 8022f36:	fb90 f0fc 	sdiv	r0, r0, ip
 8022f3a:	fb9e fefc 	sdiv	lr, lr, ip
 8022f3e:	f803 0c03 	strb.w	r0, [r3, #-3]
 8022f42:	f803 ec02 	strb.w	lr, [r3, #-2]
 8022f46:	e7ba      	b.n	8022ebe <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x492>
 8022f48:	b017      	add	sp, #92	@ 0x5c
 8022f4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022f4e <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh>:
 8022f4e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022f52:	e9dd 7e0b 	ldrd	r7, lr, [sp, #44]	@ 0x2c
 8022f56:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 8022f5a:	f1be 0f00 	cmp.w	lr, #0
 8022f5e:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	@ 0x28
 8022f62:	fb0e 7409 	mla	r4, lr, r9, r7
 8022f66:	f89d 6034 	ldrb.w	r6, [sp, #52]	@ 0x34
 8022f6a:	f89d c038 	ldrb.w	ip, [sp, #56]	@ 0x38
 8022f6e:	eb02 0a04 	add.w	sl, r2, r4
 8022f72:	6808      	ldr	r0, [r1, #0]
 8022f74:	f2c0 80c5 	blt.w	8023102 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x1b4>
 8022f78:	45f0      	cmp	r8, lr
 8022f7a:	f340 80c2 	ble.w	8023102 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x1b4>
 8022f7e:	2f00      	cmp	r7, #0
 8022f80:	f2c0 80bd 	blt.w	80230fe <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x1b0>
 8022f84:	45b9      	cmp	r9, r7
 8022f86:	f340 80ba 	ble.w	80230fe <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x1b0>
 8022f8a:	5d12      	ldrb	r2, [r2, r4]
 8022f8c:	f833 5012 	ldrh.w	r5, [r3, r2, lsl #1]
 8022f90:	122c      	asrs	r4, r5, #8
 8022f92:	10ea      	asrs	r2, r5, #3
 8022f94:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 8022f98:	00ed      	lsls	r5, r5, #3
 8022f9a:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8022f9e:	ea44 1b54 	orr.w	fp, r4, r4, lsr #5
 8022fa2:	ea42 1492 	orr.w	r4, r2, r2, lsr #6
 8022fa6:	b2ed      	uxtb	r5, r5
 8022fa8:	0224      	lsls	r4, r4, #8
 8022faa:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 8022fae:	ea44 440b 	orr.w	r4, r4, fp, lsl #16
 8022fb2:	432c      	orrs	r4, r5
 8022fb4:	1c7a      	adds	r2, r7, #1
 8022fb6:	f100 80a7 	bmi.w	8023108 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x1ba>
 8022fba:	4591      	cmp	r9, r2
 8022fbc:	f340 80a4 	ble.w	8023108 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x1ba>
 8022fc0:	2e00      	cmp	r6, #0
 8022fc2:	f000 80a1 	beq.w	8023108 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x1ba>
 8022fc6:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8022fca:	f833 b012 	ldrh.w	fp, [r3, r2, lsl #1]
 8022fce:	ea4f 02eb 	mov.w	r2, fp, asr #3
 8022fd2:	ea4f 252b 	mov.w	r5, fp, asr #8
 8022fd6:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8022fda:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8022fde:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8022fe2:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 8022fe6:	fa5f fb8b 	uxtb.w	fp, fp
 8022fea:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 8022fee:	0212      	lsls	r2, r2, #8
 8022ff0:	ea4b 1b5b 	orr.w	fp, fp, fp, lsr #5
 8022ff4:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8022ff8:	ea45 050b 	orr.w	r5, r5, fp
 8022ffc:	f11e 0e01 	adds.w	lr, lr, #1
 8023000:	f100 8086 	bmi.w	8023110 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x1c2>
 8023004:	45f0      	cmp	r8, lr
 8023006:	f340 8083 	ble.w	8023110 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x1c2>
 802300a:	f1bc 0f00 	cmp.w	ip, #0
 802300e:	d07f      	beq.n	8023110 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x1c2>
 8023010:	2f00      	cmp	r7, #0
 8023012:	db7b      	blt.n	802310c <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x1be>
 8023014:	45b9      	cmp	r9, r7
 8023016:	dd79      	ble.n	802310c <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x1be>
 8023018:	f81a 2009 	ldrb.w	r2, [sl, r9]
 802301c:	f833 e012 	ldrh.w	lr, [r3, r2, lsl #1]
 8023020:	ea4f 222e 	mov.w	r2, lr, asr #8
 8023024:	ea4f 08ee 	mov.w	r8, lr, asr #3
 8023028:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 802302c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8023030:	f008 08fc 	and.w	r8, r8, #252	@ 0xfc
 8023034:	ea42 1b52 	orr.w	fp, r2, r2, lsr #5
 8023038:	ea48 1298 	orr.w	r2, r8, r8, lsr #6
 802303c:	fa5f fe8e 	uxtb.w	lr, lr
 8023040:	0212      	lsls	r2, r2, #8
 8023042:	ea4e 1e5e 	orr.w	lr, lr, lr, lsr #5
 8023046:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
 802304a:	ea42 020e 	orr.w	r2, r2, lr
 802304e:	3701      	adds	r7, #1
 8023050:	d419      	bmi.n	8023086 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x138>
 8023052:	45b9      	cmp	r9, r7
 8023054:	dd17      	ble.n	8023086 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x138>
 8023056:	b1b6      	cbz	r6, 8023086 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x138>
 8023058:	44d1      	add	r9, sl
 802305a:	f899 0001 	ldrb.w	r0, [r9, #1]
 802305e:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
 8023062:	10df      	asrs	r7, r3, #3
 8023064:	1218      	asrs	r0, r3, #8
 8023066:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 802306a:	00db      	lsls	r3, r3, #3
 802306c:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8023070:	ea47 1797 	orr.w	r7, r7, r7, lsr #6
 8023074:	ea40 1e50 	orr.w	lr, r0, r0, lsr #5
 8023078:	b2db      	uxtb	r3, r3
 802307a:	0238      	lsls	r0, r7, #8
 802307c:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 8023080:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8023084:	4318      	orrs	r0, r3
 8023086:	b2b6      	uxth	r6, r6
 8023088:	f005 13ff 	and.w	r3, r5, #16711935	@ 0xff00ff
 802308c:	fa1f f78c 	uxth.w	r7, ip
 8023090:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 8023094:	f004 18ff 	and.w	r8, r4, #16711935	@ 0xff00ff
 8023098:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 802309c:	fb06 fc07 	mul.w	ip, r6, r7
 80230a0:	0136      	lsls	r6, r6, #4
 80230a2:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 80230a6:	f5c6 7e80 	rsb	lr, r6, #256	@ 0x100
 80230aa:	eba6 060c 	sub.w	r6, r6, ip
 80230ae:	b2bf      	uxth	r7, r7
 80230b0:	b2b6      	uxth	r6, r6
 80230b2:	ebae 0e07 	sub.w	lr, lr, r7
 80230b6:	4373      	muls	r3, r6
 80230b8:	fa1f fe8e 	uxth.w	lr, lr
 80230bc:	4375      	muls	r5, r6
 80230be:	fb0e 3808 	mla	r8, lr, r8, r3
 80230c2:	f000 13ff 	and.w	r3, r0, #16711935	@ 0xff00ff
 80230c6:	fb0e 5404 	mla	r4, lr, r4, r5
 80230ca:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 80230ce:	fb0c 8803 	mla	r8, ip, r3, r8
 80230d2:	f002 13ff 	and.w	r3, r2, #16711935	@ 0xff00ff
 80230d6:	fb0c 4000 	mla	r0, ip, r0, r4
 80230da:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 80230de:	fb07 8303 	mla	r3, r7, r3, r8
 80230e2:	fb07 0002 	mla	r0, r7, r2, r0
 80230e6:	0a1b      	lsrs	r3, r3, #8
 80230e8:	0a00      	lsrs	r0, r0, #8
 80230ea:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80230ee:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 80230f2:	4318      	orrs	r0, r3
 80230f4:	f040 407f 	orr.w	r0, r0, #4278190080	@ 0xff000000
 80230f8:	6008      	str	r0, [r1, #0]
 80230fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80230fe:	4604      	mov	r4, r0
 8023100:	e758      	b.n	8022fb4 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x66>
 8023102:	4605      	mov	r5, r0
 8023104:	4604      	mov	r4, r0
 8023106:	e779      	b.n	8022ffc <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0xae>
 8023108:	4605      	mov	r5, r0
 802310a:	e777      	b.n	8022ffc <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0xae>
 802310c:	4602      	mov	r2, r0
 802310e:	e79e      	b.n	802304e <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x100>
 8023110:	4602      	mov	r2, r0
 8023112:	e7b8      	b.n	8023086 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x138>

08023114 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023118:	b093      	sub	sp, #76	@ 0x4c
 802311a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 802311e:	920f      	str	r2, [sp, #60]	@ 0x3c
 8023120:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8023122:	9010      	str	r0, [sp, #64]	@ 0x40
 8023124:	9108      	str	r1, [sp, #32]
 8023126:	6850      	ldr	r0, [r2, #4]
 8023128:	9306      	str	r3, [sp, #24]
 802312a:	6812      	ldr	r2, [r2, #0]
 802312c:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 8023130:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	@ 0x74
 8023134:	fb00 1303 	mla	r3, r0, r3, r1
 8023138:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 802313c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802313e:	681b      	ldr	r3, [r3, #0]
 8023140:	9307      	str	r3, [sp, #28]
 8023142:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8023144:	685f      	ldr	r7, [r3, #4]
 8023146:	3704      	adds	r7, #4
 8023148:	9b08      	ldr	r3, [sp, #32]
 802314a:	2b00      	cmp	r3, #0
 802314c:	dc03      	bgt.n	8023156 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 802314e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023150:	2b00      	cmp	r3, #0
 8023152:	f340 81d9 	ble.w	8023508 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 8023156:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8023158:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802315c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023160:	1e48      	subs	r0, r1, #1
 8023162:	f102 3cff 	add.w	ip, r2, #4294967295
 8023166:	9b06      	ldr	r3, [sp, #24]
 8023168:	2b00      	cmp	r3, #0
 802316a:	f340 80bc 	ble.w	80232e6 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 802316e:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8023172:	ea4f 4326 	mov.w	r3, r6, asr #16
 8023176:	d406      	bmi.n	8023186 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8023178:	4586      	cmp	lr, r0
 802317a:	da04      	bge.n	8023186 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 802317c:	2b00      	cmp	r3, #0
 802317e:	db02      	blt.n	8023186 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8023180:	4563      	cmp	r3, ip
 8023182:	f2c0 80b1 	blt.w	80232e8 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8023186:	f11e 0e01 	adds.w	lr, lr, #1
 802318a:	f100 80a2 	bmi.w	80232d2 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 802318e:	4571      	cmp	r1, lr
 8023190:	f2c0 809f 	blt.w	80232d2 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8023194:	3301      	adds	r3, #1
 8023196:	f100 809c 	bmi.w	80232d2 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 802319a:	429a      	cmp	r2, r3
 802319c:	f2c0 8099 	blt.w	80232d2 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 80231a0:	f8dd b018 	ldr.w	fp, [sp, #24]
 80231a4:	46c8      	mov	r8, r9
 80231a6:	f1bb 0f00 	cmp.w	fp, #0
 80231aa:	f340 80b9 	ble.w	8023320 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 80231ae:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80231b0:	ea4f 4c26 	mov.w	ip, r6, asr #16
 80231b4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80231b6:	f3c4 3003 	ubfx	r0, r4, #12, #4
 80231ba:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80231be:	1422      	asrs	r2, r4, #16
 80231c0:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80231c4:	689b      	ldr	r3, [r3, #8]
 80231c6:	f100 80f6 	bmi.w	80233b6 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 80231ca:	f103 3aff 	add.w	sl, r3, #4294967295
 80231ce:	4552      	cmp	r2, sl
 80231d0:	f280 80f1 	bge.w	80233b6 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 80231d4:	f1bc 0f00 	cmp.w	ip, #0
 80231d8:	f2c0 80ed 	blt.w	80233b6 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 80231dc:	f10e 3aff 	add.w	sl, lr, #4294967295
 80231e0:	45d4      	cmp	ip, sl
 80231e2:	f280 80e8 	bge.w	80233b6 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 80231e6:	b21b      	sxth	r3, r3
 80231e8:	9d07      	ldr	r5, [sp, #28]
 80231ea:	fb0c 2203 	mla	r2, ip, r3, r2
 80231ee:	eb05 0a02 	add.w	sl, r5, r2
 80231f2:	5caa      	ldrb	r2, [r5, r2]
 80231f4:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 80231f8:	2800      	cmp	r0, #0
 80231fa:	f000 80d3 	beq.w	80233a4 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 80231fe:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8023202:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 8023206:	920b      	str	r2, [sp, #44]	@ 0x2c
 8023208:	b151      	cbz	r1, 8023220 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 802320a:	eb0a 0203 	add.w	r2, sl, r3
 802320e:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8023212:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8023216:	9309      	str	r3, [sp, #36]	@ 0x24
 8023218:	7853      	ldrb	r3, [r2, #1]
 802321a:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 802321e:	930c      	str	r3, [sp, #48]	@ 0x30
 8023220:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023222:	fb10 f201 	smulbb	r2, r0, r1
 8023226:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8023228:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 802322c:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8023230:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 8023234:	10d2      	asrs	r2, r2, #3
 8023236:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 802323a:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 802323e:	ea4c 0c03 	orr.w	ip, ip, r3
 8023242:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023244:	041b      	lsls	r3, r3, #16
 8023246:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 802324a:	432b      	orrs	r3, r5
 802324c:	4353      	muls	r3, r2
 802324e:	fb0a 330c 	mla	r3, sl, ip, r3
 8023252:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 8023256:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 802325a:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 802325e:	ea4c 0e0e 	orr.w	lr, ip, lr
 8023262:	f1c1 0c10 	rsb	ip, r1, #16
 8023266:	ebac 0c00 	sub.w	ip, ip, r0
 802326a:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 802326e:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8023272:	fb0c 3c0e 	mla	ip, ip, lr, r3
 8023276:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023278:	0418      	lsls	r0, r3, #16
 802327a:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 802327e:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 8023282:	4318      	orrs	r0, r3
 8023284:	fb02 c200 	mla	r2, r2, r0, ip
 8023288:	0d51      	lsrs	r1, r2, #21
 802328a:	0952      	lsrs	r2, r2, #5
 802328c:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8023290:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8023294:	430a      	orrs	r2, r1
 8023296:	b291      	uxth	r1, r2
 8023298:	10ca      	asrs	r2, r1, #3
 802329a:	1208      	asrs	r0, r1, #8
 802329c:	f002 03fc 	and.w	r3, r2, #252	@ 0xfc
 80232a0:	00c9      	lsls	r1, r1, #3
 80232a2:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 80232a6:	ea43 1393 	orr.w	r3, r3, r3, lsr #6
 80232aa:	b2c9      	uxtb	r1, r1
 80232ac:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 80232b0:	021b      	lsls	r3, r3, #8
 80232b2:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 80232b6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80232ba:	430b      	orrs	r3, r1
 80232bc:	f8c8 3000 	str.w	r3, [r8]
 80232c0:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80232c2:	f108 0804 	add.w	r8, r8, #4
 80232c6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80232ca:	441c      	add	r4, r3
 80232cc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80232ce:	441e      	add	r6, r3
 80232d0:	e769      	b.n	80231a6 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80232d2:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80232d4:	f109 0904 	add.w	r9, r9, #4
 80232d8:	441c      	add	r4, r3
 80232da:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80232dc:	441e      	add	r6, r3
 80232de:	9b06      	ldr	r3, [sp, #24]
 80232e0:	3b01      	subs	r3, #1
 80232e2:	9306      	str	r3, [sp, #24]
 80232e4:	e73f      	b.n	8023166 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 80232e6:	d020      	beq.n	802332a <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 80232e8:	9b06      	ldr	r3, [sp, #24]
 80232ea:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 80232ec:	3b01      	subs	r3, #1
 80232ee:	fb00 4003 	mla	r0, r0, r3, r4
 80232f2:	1400      	asrs	r0, r0, #16
 80232f4:	f53f af54 	bmi.w	80231a0 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80232f8:	3901      	subs	r1, #1
 80232fa:	4288      	cmp	r0, r1
 80232fc:	f6bf af50 	bge.w	80231a0 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8023300:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8023302:	fb01 6303 	mla	r3, r1, r3, r6
 8023306:	141b      	asrs	r3, r3, #16
 8023308:	f53f af4a 	bmi.w	80231a0 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802330c:	3a01      	subs	r2, #1
 802330e:	4293      	cmp	r3, r2
 8023310:	f6bf af46 	bge.w	80231a0 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8023314:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8023318:	46ca      	mov	sl, r9
 802331a:	f1b8 0f00 	cmp.w	r8, #0
 802331e:	dc67      	bgt.n	80233f0 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>
 8023320:	9b06      	ldr	r3, [sp, #24]
 8023322:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8023326:	eb09 0985 	add.w	r9, r9, r5, lsl #2
 802332a:	9b08      	ldr	r3, [sp, #32]
 802332c:	2b00      	cmp	r3, #0
 802332e:	f340 80eb 	ble.w	8023508 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 8023332:	ee30 0a04 	vadd.f32	s0, s0, s8
 8023336:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8023338:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802333c:	eeb0 6a62 	vmov.f32	s12, s5
 8023340:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8023344:	ee31 1a05 	vadd.f32	s2, s2, s10
 8023348:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802334c:	ee16 4a10 	vmov	r4, s12
 8023350:	eeb0 6a43 	vmov.f32	s12, s6
 8023354:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8023358:	ee16 6a10 	vmov	r6, s12
 802335c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8023360:	ee61 7a27 	vmul.f32	s15, s2, s15
 8023364:	ee77 2a62 	vsub.f32	s5, s14, s5
 8023368:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802336c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8023370:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8023374:	ee12 2a90 	vmov	r2, s5
 8023378:	eef0 2a47 	vmov.f32	s5, s14
 802337c:	fb92 f3f3 	sdiv	r3, r2, r3
 8023380:	ee13 2a10 	vmov	r2, s6
 8023384:	931f      	str	r3, [sp, #124]	@ 0x7c
 8023386:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8023388:	eeb0 3a67 	vmov.f32	s6, s15
 802338c:	fb92 f3f3 	sdiv	r3, r2, r3
 8023390:	9320      	str	r3, [sp, #128]	@ 0x80
 8023392:	9b08      	ldr	r3, [sp, #32]
 8023394:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8023396:	3b01      	subs	r3, #1
 8023398:	9308      	str	r3, [sp, #32]
 802339a:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802339c:	bf08      	it	eq
 802339e:	4613      	moveq	r3, r2
 80233a0:	9306      	str	r3, [sp, #24]
 80233a2:	e6d1      	b.n	8023148 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 80233a4:	2900      	cmp	r1, #0
 80233a6:	f43f af3b 	beq.w	8023220 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 80233aa:	f81a 3003 	ldrb.w	r3, [sl, r3]
 80233ae:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80233b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80233b4:	e734      	b.n	8023220 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 80233b6:	f112 0a01 	adds.w	sl, r2, #1
 80233ba:	d481      	bmi.n	80232c0 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 80233bc:	4553      	cmp	r3, sl
 80233be:	f6ff af7f 	blt.w	80232c0 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 80233c2:	f11c 0a01 	adds.w	sl, ip, #1
 80233c6:	f53f af7b 	bmi.w	80232c0 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 80233ca:	45d6      	cmp	lr, sl
 80233cc:	f6ff af78 	blt.w	80232c0 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 80233d0:	b21b      	sxth	r3, r3
 80233d2:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 80233d6:	fa0f f28e 	sxth.w	r2, lr
 80233da:	9300      	str	r3, [sp, #0]
 80233dc:	463b      	mov	r3, r7
 80233de:	9201      	str	r2, [sp, #4]
 80233e0:	9a07      	ldr	r2, [sp, #28]
 80233e2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80233e6:	4641      	mov	r1, r8
 80233e8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80233ea:	f7ff fdb0 	bl	8022f4e <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh>
 80233ee:	e767      	b.n	80232c0 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 80233f0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80233f2:	1422      	asrs	r2, r4, #16
 80233f4:	1431      	asrs	r1, r6, #16
 80233f6:	9d07      	ldr	r5, [sp, #28]
 80233f8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80233fc:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 8023400:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8023404:	fb03 2101 	mla	r1, r3, r1, r2
 8023408:	9a07      	ldr	r2, [sp, #28]
 802340a:	440a      	add	r2, r1
 802340c:	5c69      	ldrb	r1, [r5, r1]
 802340e:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 8023412:	f1be 0f00 	cmp.w	lr, #0
 8023416:	d070      	beq.n	80234fa <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 8023418:	f892 c001 	ldrb.w	ip, [r2, #1]
 802341c:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 8023420:	950d      	str	r5, [sp, #52]	@ 0x34
 8023422:	b150      	cbz	r0, 802343a <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 8023424:	eb02 0c03 	add.w	ip, r2, r3
 8023428:	5cd3      	ldrb	r3, [r2, r3]
 802342a:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 802342e:	930a      	str	r3, [sp, #40]	@ 0x28
 8023430:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8023434:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8023438:	930e      	str	r3, [sp, #56]	@ 0x38
 802343a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802343c:	fb1e f200 	smulbb	r2, lr, r0
 8023440:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8023442:	f108 38ff 	add.w	r8, r8, #4294967295
 8023446:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 802344a:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 802344e:	10d2      	asrs	r2, r2, #3
 8023450:	f425 6bfc 	bic.w	fp, r5, #2016	@ 0x7e0
 8023454:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 8023458:	ea4c 0c03 	orr.w	ip, ip, r3
 802345c:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 8023460:	9311      	str	r3, [sp, #68]	@ 0x44
 8023462:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023464:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8023466:	041b      	lsls	r3, r3, #16
 8023468:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 802346c:	ea43 030b 	orr.w	r3, r3, fp
 8023470:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8023474:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 8023478:	4353      	muls	r3, r2
 802347a:	fb05 3c0c 	mla	ip, r5, ip, r3
 802347e:	f00b 63fc 	and.w	r3, fp, #132120576	@ 0x7e00000
 8023482:	ea43 0b01 	orr.w	fp, r3, r1
 8023486:	f1c0 0110 	rsb	r1, r0, #16
 802348a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802348c:	eba1 0e0e 	sub.w	lr, r1, lr
 8023490:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 8023494:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 8023498:	fb0e cc0b 	mla	ip, lr, fp, ip
 802349c:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 80234a0:	f423 6efc 	bic.w	lr, r3, #2016	@ 0x7e0
 80234a4:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 80234a8:	ea4b 0e0e 	orr.w	lr, fp, lr
 80234ac:	fb02 cc0e 	mla	ip, r2, lr, ip
 80234b0:	ea4f 525c 	mov.w	r2, ip, lsr #21
 80234b4:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80234b8:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80234bc:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 80234c0:	ea42 0c0c 	orr.w	ip, r2, ip
 80234c4:	fa1f f28c 	uxth.w	r2, ip
 80234c8:	10d3      	asrs	r3, r2, #3
 80234ca:	1211      	asrs	r1, r2, #8
 80234cc:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 80234d0:	00d2      	lsls	r2, r2, #3
 80234d2:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 80234d6:	ea43 1393 	orr.w	r3, r3, r3, lsr #6
 80234da:	b2d2      	uxtb	r2, r2
 80234dc:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 80234e0:	021b      	lsls	r3, r3, #8
 80234e2:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 80234e6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80234ea:	431a      	orrs	r2, r3
 80234ec:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80234ee:	441c      	add	r4, r3
 80234f0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80234f2:	f84a 2b04 	str.w	r2, [sl], #4
 80234f6:	441e      	add	r6, r3
 80234f8:	e70f      	b.n	802331a <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 80234fa:	2800      	cmp	r0, #0
 80234fc:	d09d      	beq.n	802343a <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 80234fe:	5cd3      	ldrb	r3, [r2, r3]
 8023500:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8023504:	930a      	str	r3, [sp, #40]	@ 0x28
 8023506:	e798      	b.n	802343a <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 8023508:	b013      	add	sp, #76	@ 0x4c
 802350a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802350e <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh>:
 802350e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023512:	e9dd 780e 	ldrd	r7, r8, [sp, #56]	@ 0x38
 8023516:	f9bd e030 	ldrsh.w	lr, [sp, #48]	@ 0x30
 802351a:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 802351e:	f1b8 0f00 	cmp.w	r8, #0
 8023522:	fb08 750e 	mla	r5, r8, lr, r7
 8023526:	f9bd b034 	ldrsh.w	fp, [sp, #52]	@ 0x34
 802352a:	9001      	str	r0, [sp, #4]
 802352c:	f89d 4040 	ldrb.w	r4, [sp, #64]	@ 0x40
 8023530:	eb02 0a05 	add.w	sl, r2, r5
 8023534:	f89d c048 	ldrb.w	ip, [sp, #72]	@ 0x48
 8023538:	6808      	ldr	r0, [r1, #0]
 802353a:	f2c0 80b2 	blt.w	80236a2 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x194>
 802353e:	45c3      	cmp	fp, r8
 8023540:	f340 80af 	ble.w	80236a2 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x194>
 8023544:	2f00      	cmp	r7, #0
 8023546:	f2c0 80aa 	blt.w	802369e <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x190>
 802354a:	45be      	cmp	lr, r7
 802354c:	f340 80a7 	ble.w	802369e <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x190>
 8023550:	5d55      	ldrb	r5, [r2, r5]
 8023552:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8023556:	195a      	adds	r2, r3, r5
 8023558:	5d5d      	ldrb	r5, [r3, r5]
 802355a:	f892 9001 	ldrb.w	r9, [r2, #1]
 802355e:	7892      	ldrb	r2, [r2, #2]
 8023560:	0412      	lsls	r2, r2, #16
 8023562:	ea42 2209 	orr.w	r2, r2, r9, lsl #8
 8023566:	432a      	orrs	r2, r5
 8023568:	1c7d      	adds	r5, r7, #1
 802356a:	f100 809b 	bmi.w	80236a4 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x196>
 802356e:	45ae      	cmp	lr, r5
 8023570:	f340 8098 	ble.w	80236a4 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x196>
 8023574:	2c00      	cmp	r4, #0
 8023576:	f000 8095 	beq.w	80236a4 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x196>
 802357a:	f89a 9001 	ldrb.w	r9, [sl, #1]
 802357e:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8023582:	eb03 0509 	add.w	r5, r3, r9
 8023586:	f813 9009 	ldrb.w	r9, [r3, r9]
 802358a:	786e      	ldrb	r6, [r5, #1]
 802358c:	78ad      	ldrb	r5, [r5, #2]
 802358e:	042d      	lsls	r5, r5, #16
 8023590:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
 8023594:	ea45 0509 	orr.w	r5, r5, r9
 8023598:	f118 0801 	adds.w	r8, r8, #1
 802359c:	f100 8086 	bmi.w	80236ac <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x19e>
 80235a0:	45c3      	cmp	fp, r8
 80235a2:	f340 8083 	ble.w	80236ac <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x19e>
 80235a6:	9e01      	ldr	r6, [sp, #4]
 80235a8:	2e00      	cmp	r6, #0
 80235aa:	d07f      	beq.n	80236ac <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x19e>
 80235ac:	2f00      	cmp	r7, #0
 80235ae:	eb0a 090e 	add.w	r9, sl, lr
 80235b2:	db79      	blt.n	80236a8 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x19a>
 80235b4:	45be      	cmp	lr, r7
 80235b6:	dd77      	ble.n	80236a8 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x19a>
 80235b8:	f81a a00e 	ldrb.w	sl, [sl, lr]
 80235bc:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 80235c0:	eb03 080a 	add.w	r8, r3, sl
 80235c4:	f813 a00a 	ldrb.w	sl, [r3, sl]
 80235c8:	f898 b001 	ldrb.w	fp, [r8, #1]
 80235cc:	f898 8002 	ldrb.w	r8, [r8, #2]
 80235d0:	ea4f 4808 	mov.w	r8, r8, lsl #16
 80235d4:	ea48 280b 	orr.w	r8, r8, fp, lsl #8
 80235d8:	ea48 080a 	orr.w	r8, r8, sl
 80235dc:	3701      	adds	r7, #1
 80235de:	d411      	bmi.n	8023604 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0xf6>
 80235e0:	45be      	cmp	lr, r7
 80235e2:	dd0f      	ble.n	8023604 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0xf6>
 80235e4:	b174      	cbz	r4, 8023604 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0xf6>
 80235e6:	f899 7001 	ldrb.w	r7, [r9, #1]
 80235ea:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80235ee:	eb03 0e07 	add.w	lr, r3, r7
 80235f2:	5ddb      	ldrb	r3, [r3, r7]
 80235f4:	f89e 0002 	ldrb.w	r0, [lr, #2]
 80235f8:	f89e 9001 	ldrb.w	r9, [lr, #1]
 80235fc:	0400      	lsls	r0, r0, #16
 80235fe:	ea40 2009 	orr.w	r0, r0, r9, lsl #8
 8023602:	4318      	orrs	r0, r3
 8023604:	b2a4      	uxth	r4, r4
 8023606:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 802360a:	f005 13ff 	and.w	r3, r5, #16711935	@ 0xff00ff
 802360e:	f002 17ff 	and.w	r7, r2, #16711935	@ 0xff00ff
 8023612:	fb04 fe06 	mul.w	lr, r4, r6
 8023616:	0124      	lsls	r4, r4, #4
 8023618:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 802361c:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8023620:	ebce 1606 	rsb	r6, lr, r6, lsl #4
 8023624:	f5c4 7980 	rsb	r9, r4, #256	@ 0x100
 8023628:	eba4 040e 	sub.w	r4, r4, lr
 802362c:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 8023630:	b2b6      	uxth	r6, r6
 8023632:	b2a4      	uxth	r4, r4
 8023634:	eba9 0906 	sub.w	r9, r9, r6
 8023638:	fb04 f303 	mul.w	r3, r4, r3
 802363c:	fa1f f989 	uxth.w	r9, r9
 8023640:	fb04 f405 	mul.w	r4, r4, r5
 8023644:	fb09 3707 	mla	r7, r9, r7, r3
 8023648:	f000 13ff 	and.w	r3, r0, #16711935	@ 0xff00ff
 802364c:	fb09 4402 	mla	r4, r9, r2, r4
 8023650:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8023654:	fb0e 7703 	mla	r7, lr, r3, r7
 8023658:	f008 13ff 	and.w	r3, r8, #16711935	@ 0xff00ff
 802365c:	fb0e 4000 	mla	r0, lr, r0, r4
 8023660:	fb06 7303 	mla	r3, r6, r3, r7
 8023664:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8023668:	f003 17ff 	and.w	r7, r3, #16711935	@ 0xff00ff
 802366c:	f408 437f 	and.w	r3, r8, #65280	@ 0xff00
 8023670:	fb06 0303 	mla	r3, r6, r3, r0
 8023674:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8023678:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802367c:	ea43 0307 	orr.w	r3, r3, r7
 8023680:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8023684:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8023688:	b2d4      	uxtb	r4, r2
 802368a:	b2c5      	uxtb	r5, r0
 802368c:	d110      	bne.n	80236b0 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1a2>
 802368e:	700b      	strb	r3, [r1, #0]
 8023690:	7048      	strb	r0, [r1, #1]
 8023692:	708a      	strb	r2, [r1, #2]
 8023694:	f881 c003 	strb.w	ip, [r1, #3]
 8023698:	b003      	add	sp, #12
 802369a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802369e:	4602      	mov	r2, r0
 80236a0:	e762      	b.n	8023568 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x5a>
 80236a2:	4602      	mov	r2, r0
 80236a4:	4605      	mov	r5, r0
 80236a6:	e777      	b.n	8023598 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x8a>
 80236a8:	4680      	mov	r8, r0
 80236aa:	e797      	b.n	80235dc <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0xce>
 80236ac:	4680      	mov	r8, r0
 80236ae:	e7a9      	b.n	8023604 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0xf6>
 80236b0:	f1bc 0f00 	cmp.w	ip, #0
 80236b4:	d0f0      	beq.n	8023698 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x18a>
 80236b6:	78ce      	ldrb	r6, [r1, #3]
 80236b8:	b2db      	uxtb	r3, r3
 80236ba:	fb1c f505 	smulbb	r5, ip, r5
 80236be:	fb0c f206 	mul.w	r2, ip, r6
 80236c2:	1c50      	adds	r0, r2, #1
 80236c4:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 80236c8:	eb0c 0206 	add.w	r2, ip, r6
 80236cc:	1200      	asrs	r0, r0, #8
 80236ce:	1a12      	subs	r2, r2, r0
 80236d0:	1a30      	subs	r0, r6, r0
 80236d2:	780e      	ldrb	r6, [r1, #0]
 80236d4:	b2d2      	uxtb	r2, r2
 80236d6:	4346      	muls	r6, r0
 80236d8:	70ca      	strb	r2, [r1, #3]
 80236da:	fb0c 6303 	mla	r3, ip, r3, r6
 80236de:	fb1c fc04 	smulbb	ip, ip, r4
 80236e2:	fb93 f3f2 	sdiv	r3, r3, r2
 80236e6:	700b      	strb	r3, [r1, #0]
 80236e8:	784b      	ldrb	r3, [r1, #1]
 80236ea:	fb00 5303 	mla	r3, r0, r3, r5
 80236ee:	fb93 f3f2 	sdiv	r3, r3, r2
 80236f2:	704b      	strb	r3, [r1, #1]
 80236f4:	788b      	ldrb	r3, [r1, #2]
 80236f6:	fb00 cc03 	mla	ip, r0, r3, ip
 80236fa:	fb9c fcf2 	sdiv	ip, ip, r2
 80236fe:	f881 c002 	strb.w	ip, [r1, #2]
 8023702:	e7c9      	b.n	8023698 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x18a>

08023704 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023708:	b091      	sub	sp, #68	@ 0x44
 802370a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 802370e:	920e      	str	r2, [sp, #56]	@ 0x38
 8023710:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 8023712:	900f      	str	r0, [sp, #60]	@ 0x3c
 8023714:	910c      	str	r1, [sp, #48]	@ 0x30
 8023716:	6850      	ldr	r0, [r2, #4]
 8023718:	9309      	str	r3, [sp, #36]	@ 0x24
 802371a:	6812      	ldr	r2, [r2, #0]
 802371c:	f89d 408c 	ldrb.w	r4, [sp, #140]	@ 0x8c
 8023720:	e9dd 1320 	ldrd	r1, r3, [sp, #128]	@ 0x80
 8023724:	fb00 1303 	mla	r3, r0, r3, r1
 8023728:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802372c:	930a      	str	r3, [sp, #40]	@ 0x28
 802372e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8023730:	681b      	ldr	r3, [r3, #0]
 8023732:	930b      	str	r3, [sp, #44]	@ 0x2c
 8023734:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8023736:	685d      	ldr	r5, [r3, #4]
 8023738:	3504      	adds	r5, #4
 802373a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802373c:	2b00      	cmp	r3, #0
 802373e:	dc03      	bgt.n	8023748 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 8023740:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023742:	2b00      	cmp	r3, #0
 8023744:	f340 825d 	ble.w	8023c02 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fe>
 8023748:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802374a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802374e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023752:	1e48      	subs	r0, r1, #1
 8023754:	1e56      	subs	r6, r2, #1
 8023756:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023758:	2b00      	cmp	r3, #0
 802375a:	f340 80c9 	ble.w	80238f0 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 802375e:	9f1b      	ldr	r7, [sp, #108]	@ 0x6c
 8023760:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8023762:	143f      	asrs	r7, r7, #16
 8023764:	ea4f 4323 	mov.w	r3, r3, asr #16
 8023768:	d406      	bmi.n	8023778 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 802376a:	4287      	cmp	r7, r0
 802376c:	da04      	bge.n	8023778 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 802376e:	2b00      	cmp	r3, #0
 8023770:	db02      	blt.n	8023778 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8023772:	42b3      	cmp	r3, r6
 8023774:	f2c0 80bd 	blt.w	80238f2 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8023778:	3701      	adds	r7, #1
 802377a:	f100 80aa 	bmi.w	80238d2 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ce>
 802377e:	42b9      	cmp	r1, r7
 8023780:	f2c0 80a7 	blt.w	80238d2 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ce>
 8023784:	3301      	adds	r3, #1
 8023786:	f100 80a4 	bmi.w	80238d2 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ce>
 802378a:	429a      	cmp	r2, r3
 802378c:	f2c0 80a1 	blt.w	80238d2 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ce>
 8023790:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023792:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8023794:	930d      	str	r3, [sp, #52]	@ 0x34
 8023796:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8023798:	2b00      	cmp	r3, #0
 802379a:	f340 80ca 	ble.w	8023932 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 802379e:	9822      	ldr	r0, [sp, #136]	@ 0x88
 80237a0:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80237a2:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80237a4:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 80237a8:	141f      	asrs	r7, r3, #16
 80237aa:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 80237ac:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80237b0:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80237b2:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80237b4:	1400      	asrs	r0, r0, #16
 80237b6:	f3c3 3303 	ubfx	r3, r3, #12, #4
 80237ba:	6892      	ldr	r2, [r2, #8]
 80237bc:	f100 8138 	bmi.w	8023a30 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 80237c0:	f102 3eff 	add.w	lr, r2, #4294967295
 80237c4:	4570      	cmp	r0, lr
 80237c6:	f280 8133 	bge.w	8023a30 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 80237ca:	2f00      	cmp	r7, #0
 80237cc:	f2c0 8130 	blt.w	8023a30 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 80237d0:	f10c 3eff 	add.w	lr, ip, #4294967295
 80237d4:	4577      	cmp	r7, lr
 80237d6:	f280 812b 	bge.w	8023a30 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 80237da:	b212      	sxth	r2, r2
 80237dc:	fb07 0002 	mla	r0, r7, r2, r0
 80237e0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80237e2:	eb07 0c00 	add.w	ip, r7, r0
 80237e6:	5c38      	ldrb	r0, [r7, r0]
 80237e8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80237ec:	eb05 0800 	add.w	r8, r5, r0
 80237f0:	2b00      	cmp	r3, #0
 80237f2:	f000 80e2 	beq.w	80239ba <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 80237f6:	f89c e001 	ldrb.w	lr, [ip, #1]
 80237fa:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80237fe:	44ae      	add	lr, r5
 8023800:	2900      	cmp	r1, #0
 8023802:	f000 80e3 	beq.w	80239cc <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 8023806:	eb0c 0702 	add.w	r7, ip, r2
 802380a:	f81c 2002 	ldrb.w	r2, [ip, r2]
 802380e:	f897 c001 	ldrb.w	ip, [r7, #1]
 8023812:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023816:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 802381a:	442a      	add	r2, r5
 802381c:	44ac      	add	ip, r5
 802381e:	b29b      	uxth	r3, r3
 8023820:	5c2f      	ldrb	r7, [r5, r0]
 8023822:	b289      	uxth	r1, r1
 8023824:	f89e 0000 	ldrb.w	r0, [lr]
 8023828:	f89e a001 	ldrb.w	sl, [lr, #1]
 802382c:	2cff      	cmp	r4, #255	@ 0xff
 802382e:	fb03 fb01 	mul.w	fp, r3, r1
 8023832:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8023836:	f89e e002 	ldrb.w	lr, [lr, #2]
 802383a:	ebcb 1101 	rsb	r1, fp, r1, lsl #4
 802383e:	f5c3 7980 	rsb	r9, r3, #256	@ 0x100
 8023842:	eba3 030b 	sub.w	r3, r3, fp
 8023846:	b289      	uxth	r1, r1
 8023848:	b29b      	uxth	r3, r3
 802384a:	eba9 0901 	sub.w	r9, r9, r1
 802384e:	fb03 f000 	mul.w	r0, r3, r0
 8023852:	fa1f f989 	uxth.w	r9, r9
 8023856:	fb03 fa0a 	mul.w	sl, r3, sl
 802385a:	fb03 f30e 	mul.w	r3, r3, lr
 802385e:	f892 e002 	ldrb.w	lr, [r2, #2]
 8023862:	fb09 0007 	mla	r0, r9, r7, r0
 8023866:	7817      	ldrb	r7, [r2, #0]
 8023868:	fb01 0007 	mla	r0, r1, r7, r0
 802386c:	f89c 7000 	ldrb.w	r7, [ip]
 8023870:	fb0b 0707 	mla	r7, fp, r7, r0
 8023874:	f898 0001 	ldrb.w	r0, [r8, #1]
 8023878:	f898 8002 	ldrb.w	r8, [r8, #2]
 802387c:	fb09 aa00 	mla	sl, r9, r0, sl
 8023880:	7850      	ldrb	r0, [r2, #1]
 8023882:	fb09 3308 	mla	r3, r9, r8, r3
 8023886:	f89c 2002 	ldrb.w	r2, [ip, #2]
 802388a:	fb01 aa00 	mla	sl, r1, r0, sl
 802388e:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8023892:	fb01 330e 	mla	r3, r1, lr, r3
 8023896:	ea4f 2727 	mov.w	r7, r7, asr #8
 802389a:	fb0b a000 	mla	r0, fp, r0, sl
 802389e:	fb0b 3b02 	mla	fp, fp, r2, r3
 80238a2:	ea4f 2020 	mov.w	r0, r0, asr #8
 80238a6:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 80238aa:	f040 8095 	bne.w	80239d8 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 80238ae:	7037      	strb	r7, [r6, #0]
 80238b0:	7070      	strb	r0, [r6, #1]
 80238b2:	f886 b002 	strb.w	fp, [r6, #2]
 80238b6:	70f4      	strb	r4, [r6, #3]
 80238b8:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80238ba:	3604      	adds	r6, #4
 80238bc:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80238be:	4413      	add	r3, r2
 80238c0:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 80238c2:	931b      	str	r3, [sp, #108]	@ 0x6c
 80238c4:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80238c6:	4413      	add	r3, r2
 80238c8:	931c      	str	r3, [sp, #112]	@ 0x70
 80238ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80238cc:	3b01      	subs	r3, #1
 80238ce:	930d      	str	r3, [sp, #52]	@ 0x34
 80238d0:	e761      	b.n	8023796 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80238d2:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80238d4:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 80238d6:	443b      	add	r3, r7
 80238d8:	9f1e      	ldr	r7, [sp, #120]	@ 0x78
 80238da:	931b      	str	r3, [sp, #108]	@ 0x6c
 80238dc:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80238de:	443b      	add	r3, r7
 80238e0:	931c      	str	r3, [sp, #112]	@ 0x70
 80238e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80238e4:	3b01      	subs	r3, #1
 80238e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80238e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80238ea:	3304      	adds	r3, #4
 80238ec:	930a      	str	r3, [sp, #40]	@ 0x28
 80238ee:	e732      	b.n	8023756 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 80238f0:	d026      	beq.n	8023940 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23c>
 80238f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80238f4:	981d      	ldr	r0, [sp, #116]	@ 0x74
 80238f6:	3b01      	subs	r3, #1
 80238f8:	9e1b      	ldr	r6, [sp, #108]	@ 0x6c
 80238fa:	fb00 6003 	mla	r0, r0, r3, r6
 80238fe:	1400      	asrs	r0, r0, #16
 8023900:	f53f af46 	bmi.w	8023790 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8023904:	3901      	subs	r1, #1
 8023906:	4288      	cmp	r0, r1
 8023908:	f6bf af42 	bge.w	8023790 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802390c:	991e      	ldr	r1, [sp, #120]	@ 0x78
 802390e:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8023910:	fb01 0303 	mla	r3, r1, r3, r0
 8023914:	141b      	asrs	r3, r3, #16
 8023916:	f53f af3b 	bmi.w	8023790 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802391a:	3a01      	subs	r2, #1
 802391c:	4293      	cmp	r3, r2
 802391e:	f6bf af37 	bge.w	8023790 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8023922:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023924:	1d19      	adds	r1, r3, #4
 8023926:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023928:	930d      	str	r3, [sp, #52]	@ 0x34
 802392a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802392c:	2b00      	cmp	r3, #0
 802392e:	f300 809e 	bgt.w	8023a6e <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 8023932:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023934:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8023936:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802393a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802393e:	930a      	str	r3, [sp, #40]	@ 0x28
 8023940:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023942:	2b00      	cmp	r3, #0
 8023944:	f340 815d 	ble.w	8023c02 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fe>
 8023948:	ee30 0a04 	vadd.f32	s0, s0, s8
 802394c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 802394e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8023952:	eeb0 6a62 	vmov.f32	s12, s5
 8023956:	eec6 7a80 	vdiv.f32	s15, s13, s0
 802395a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802395e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8023962:	ed8d 6a1b 	vstr	s12, [sp, #108]	@ 0x6c
 8023966:	eeb0 6a43 	vmov.f32	s12, s6
 802396a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802396e:	ed8d 6a1c 	vstr	s12, [sp, #112]	@ 0x70
 8023972:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8023976:	ee61 7a27 	vmul.f32	s15, s2, s15
 802397a:	ee77 2a62 	vsub.f32	s5, s14, s5
 802397e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8023982:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8023986:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802398a:	ee12 2a90 	vmov	r2, s5
 802398e:	eef0 2a47 	vmov.f32	s5, s14
 8023992:	fb92 f3f3 	sdiv	r3, r2, r3
 8023996:	ee13 2a10 	vmov	r2, s6
 802399a:	931d      	str	r3, [sp, #116]	@ 0x74
 802399c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 802399e:	eeb0 3a67 	vmov.f32	s6, s15
 80239a2:	fb92 f3f3 	sdiv	r3, r2, r3
 80239a6:	931e      	str	r3, [sp, #120]	@ 0x78
 80239a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80239aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80239ac:	3b01      	subs	r3, #1
 80239ae:	930c      	str	r3, [sp, #48]	@ 0x30
 80239b0:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80239b2:	bf08      	it	eq
 80239b4:	4613      	moveq	r3, r2
 80239b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80239b8:	e6bf      	b.n	802373a <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 80239ba:	b151      	cbz	r1, 80239d2 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ce>
 80239bc:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80239c0:	46c4      	mov	ip, r8
 80239c2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80239c6:	442a      	add	r2, r5
 80239c8:	46c6      	mov	lr, r8
 80239ca:	e728      	b.n	802381e <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11a>
 80239cc:	46c4      	mov	ip, r8
 80239ce:	4642      	mov	r2, r8
 80239d0:	e725      	b.n	802381e <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11a>
 80239d2:	46c4      	mov	ip, r8
 80239d4:	4642      	mov	r2, r8
 80239d6:	e7f7      	b.n	80239c8 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c4>
 80239d8:	2c00      	cmp	r4, #0
 80239da:	f43f af6d 	beq.w	80238b8 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 80239de:	78f1      	ldrb	r1, [r6, #3]
 80239e0:	b2ff      	uxtb	r7, r7
 80239e2:	f896 a001 	ldrb.w	sl, [r6, #1]
 80239e6:	b2c0      	uxtb	r0, r0
 80239e8:	fb04 f201 	mul.w	r2, r4, r1
 80239ec:	fa5f fb8b 	uxtb.w	fp, fp
 80239f0:	1c53      	adds	r3, r2, #1
 80239f2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80239f6:	1862      	adds	r2, r4, r1
 80239f8:	121b      	asrs	r3, r3, #8
 80239fa:	1ad2      	subs	r2, r2, r3
 80239fc:	1acb      	subs	r3, r1, r3
 80239fe:	7831      	ldrb	r1, [r6, #0]
 8023a00:	fb03 fa0a 	mul.w	sl, r3, sl
 8023a04:	b2d2      	uxtb	r2, r2
 8023a06:	4359      	muls	r1, r3
 8023a08:	fb04 a000 	mla	r0, r4, r0, sl
 8023a0c:	fb04 1707 	mla	r7, r4, r7, r1
 8023a10:	78b1      	ldrb	r1, [r6, #2]
 8023a12:	70f2      	strb	r2, [r6, #3]
 8023a14:	434b      	muls	r3, r1
 8023a16:	fb04 3b0b 	mla	fp, r4, fp, r3
 8023a1a:	fb97 f7f2 	sdiv	r7, r7, r2
 8023a1e:	fb90 f0f2 	sdiv	r0, r0, r2
 8023a22:	fb9b fbf2 	sdiv	fp, fp, r2
 8023a26:	7037      	strb	r7, [r6, #0]
 8023a28:	7070      	strb	r0, [r6, #1]
 8023a2a:	f886 b002 	strb.w	fp, [r6, #2]
 8023a2e:	e743      	b.n	80238b8 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8023a30:	f110 0e01 	adds.w	lr, r0, #1
 8023a34:	f53f af40 	bmi.w	80238b8 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8023a38:	4572      	cmp	r2, lr
 8023a3a:	f6ff af3d 	blt.w	80238b8 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8023a3e:	f117 0e01 	adds.w	lr, r7, #1
 8023a42:	f53f af39 	bmi.w	80238b8 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8023a46:	45f4      	cmp	ip, lr
 8023a48:	f6ff af36 	blt.w	80238b8 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8023a4c:	b212      	sxth	r2, r2
 8023a4e:	9002      	str	r0, [sp, #8]
 8023a50:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8023a52:	9200      	str	r2, [sp, #0]
 8023a54:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8023a56:	e9cd 7303 	strd	r7, r3, [sp, #12]
 8023a5a:	fa0f f38c 	sxth.w	r3, ip
 8023a5e:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8023a62:	9301      	str	r3, [sp, #4]
 8023a64:	4631      	mov	r1, r6
 8023a66:	462b      	mov	r3, r5
 8023a68:	f7ff fd51 	bl	802350e <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh>
 8023a6c:	e724      	b.n	80238b8 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8023a6e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8023a70:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8023a72:	f3c2 3003 	ubfx	r0, r2, #12, #4
 8023a76:	9f1b      	ldr	r7, [sp, #108]	@ 0x6c
 8023a78:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8023a7a:	1436      	asrs	r6, r6, #16
 8023a7c:	143f      	asrs	r7, r7, #16
 8023a7e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8023a80:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8023a84:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8023a88:	fb02 7606 	mla	r6, r2, r6, r7
 8023a8c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8023a8e:	eb07 0c06 	add.w	ip, r7, r6
 8023a92:	5dbe      	ldrb	r6, [r7, r6]
 8023a94:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8023a98:	eb05 0806 	add.w	r8, r5, r6
 8023a9c:	2b00      	cmp	r3, #0
 8023a9e:	d06d      	beq.n	8023b7c <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x478>
 8023aa0:	f89c e001 	ldrb.w	lr, [ip, #1]
 8023aa4:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8023aa8:	44ae      	add	lr, r5
 8023aaa:	2800      	cmp	r0, #0
 8023aac:	d06f      	beq.n	8023b8e <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48a>
 8023aae:	eb0c 0702 	add.w	r7, ip, r2
 8023ab2:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8023ab6:	f897 c001 	ldrb.w	ip, [r7, #1]
 8023aba:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023abe:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8023ac2:	442a      	add	r2, r5
 8023ac4:	44ac      	add	ip, r5
 8023ac6:	b29b      	uxth	r3, r3
 8023ac8:	5daf      	ldrb	r7, [r5, r6]
 8023aca:	b280      	uxth	r0, r0
 8023acc:	f89e 6000 	ldrb.w	r6, [lr]
 8023ad0:	f89e a001 	ldrb.w	sl, [lr, #1]
 8023ad4:	2cff      	cmp	r4, #255	@ 0xff
 8023ad6:	fb03 fb00 	mul.w	fp, r3, r0
 8023ada:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8023ade:	f89e e002 	ldrb.w	lr, [lr, #2]
 8023ae2:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 8023ae6:	f5c3 7980 	rsb	r9, r3, #256	@ 0x100
 8023aea:	eba3 030b 	sub.w	r3, r3, fp
 8023aee:	b280      	uxth	r0, r0
 8023af0:	b29b      	uxth	r3, r3
 8023af2:	eba9 0900 	sub.w	r9, r9, r0
 8023af6:	fb03 f606 	mul.w	r6, r3, r6
 8023afa:	fa1f f989 	uxth.w	r9, r9
 8023afe:	fb03 fa0a 	mul.w	sl, r3, sl
 8023b02:	fb03 f30e 	mul.w	r3, r3, lr
 8023b06:	f892 e002 	ldrb.w	lr, [r2, #2]
 8023b0a:	fb09 6607 	mla	r6, r9, r7, r6
 8023b0e:	7817      	ldrb	r7, [r2, #0]
 8023b10:	fb00 6607 	mla	r6, r0, r7, r6
 8023b14:	f89c 7000 	ldrb.w	r7, [ip]
 8023b18:	fb0b 6707 	mla	r7, fp, r7, r6
 8023b1c:	f898 6001 	ldrb.w	r6, [r8, #1]
 8023b20:	f898 8002 	ldrb.w	r8, [r8, #2]
 8023b24:	fb09 aa06 	mla	sl, r9, r6, sl
 8023b28:	7856      	ldrb	r6, [r2, #1]
 8023b2a:	fb09 3308 	mla	r3, r9, r8, r3
 8023b2e:	ea4f 2727 	mov.w	r7, r7, asr #8
 8023b32:	fb00 aa06 	mla	sl, r0, r6, sl
 8023b36:	f89c 6001 	ldrb.w	r6, [ip, #1]
 8023b3a:	fb00 330e 	mla	r3, r0, lr, r3
 8023b3e:	f89c e002 	ldrb.w	lr, [ip, #2]
 8023b42:	fb0b a606 	mla	r6, fp, r6, sl
 8023b46:	fb0b 330e 	mla	r3, fp, lr, r3
 8023b4a:	ea4f 2626 	mov.w	r6, r6, asr #8
 8023b4e:	ea4f 2b23 	mov.w	fp, r3, asr #8
 8023b52:	d122      	bne.n	8023b9a <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 8023b54:	f801 7c04 	strb.w	r7, [r1, #-4]
 8023b58:	f801 6c03 	strb.w	r6, [r1, #-3]
 8023b5c:	f801 bc02 	strb.w	fp, [r1, #-2]
 8023b60:	f801 4c01 	strb.w	r4, [r1, #-1]
 8023b64:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8023b66:	3104      	adds	r1, #4
 8023b68:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8023b6a:	4413      	add	r3, r2
 8023b6c:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8023b6e:	931b      	str	r3, [sp, #108]	@ 0x6c
 8023b70:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8023b72:	4413      	add	r3, r2
 8023b74:	931c      	str	r3, [sp, #112]	@ 0x70
 8023b76:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8023b78:	3b01      	subs	r3, #1
 8023b7a:	e6d5      	b.n	8023928 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8023b7c:	b150      	cbz	r0, 8023b94 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 8023b7e:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8023b82:	46c4      	mov	ip, r8
 8023b84:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023b88:	442a      	add	r2, r5
 8023b8a:	46c6      	mov	lr, r8
 8023b8c:	e79b      	b.n	8023ac6 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 8023b8e:	46c4      	mov	ip, r8
 8023b90:	4642      	mov	r2, r8
 8023b92:	e798      	b.n	8023ac6 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 8023b94:	46c4      	mov	ip, r8
 8023b96:	4642      	mov	r2, r8
 8023b98:	e7f7      	b.n	8023b8a <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 8023b9a:	2c00      	cmp	r4, #0
 8023b9c:	d0e2      	beq.n	8023b64 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x460>
 8023b9e:	f811 0c01 	ldrb.w	r0, [r1, #-1]
 8023ba2:	b2ff      	uxtb	r7, r7
 8023ba4:	f811 ac03 	ldrb.w	sl, [r1, #-3]
 8023ba8:	b2f6      	uxtb	r6, r6
 8023baa:	fb04 f300 	mul.w	r3, r4, r0
 8023bae:	eb04 0c00 	add.w	ip, r4, r0
 8023bb2:	fa5f fb8b 	uxtb.w	fp, fp
 8023bb6:	1c5a      	adds	r2, r3, #1
 8023bb8:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8023bbc:	1213      	asrs	r3, r2, #8
 8023bbe:	1ac2      	subs	r2, r0, r3
 8023bc0:	ebac 0c03 	sub.w	ip, ip, r3
 8023bc4:	f811 3c04 	ldrb.w	r3, [r1, #-4]
 8023bc8:	fb02 fa0a 	mul.w	sl, r2, sl
 8023bcc:	fa5f fc8c 	uxtb.w	ip, ip
 8023bd0:	4353      	muls	r3, r2
 8023bd2:	fb04 a606 	mla	r6, r4, r6, sl
 8023bd6:	fb04 3707 	mla	r7, r4, r7, r3
 8023bda:	f811 3c02 	ldrb.w	r3, [r1, #-2]
 8023bde:	f801 cc01 	strb.w	ip, [r1, #-1]
 8023be2:	435a      	muls	r2, r3
 8023be4:	fb04 2b0b 	mla	fp, r4, fp, r2
 8023be8:	fb97 f7fc 	sdiv	r7, r7, ip
 8023bec:	fb96 f6fc 	sdiv	r6, r6, ip
 8023bf0:	fb9b fbfc 	sdiv	fp, fp, ip
 8023bf4:	f801 7c04 	strb.w	r7, [r1, #-4]
 8023bf8:	f801 6c03 	strb.w	r6, [r1, #-3]
 8023bfc:	f801 bc02 	strb.w	fp, [r1, #-2]
 8023c00:	e7b0      	b.n	8023b64 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x460>
 8023c02:	b011      	add	sp, #68	@ 0x44
 8023c04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023c08 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh>:
 8023c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023c0c:	e9dd 780b 	ldrd	r7, r8, [sp, #44]	@ 0x2c
 8023c10:	f9bd e024 	ldrsh.w	lr, [sp, #36]	@ 0x24
 8023c14:	f1b8 0f00 	cmp.w	r8, #0
 8023c18:	f9bd a028 	ldrsh.w	sl, [sp, #40]	@ 0x28
 8023c1c:	fb08 740e 	mla	r4, r8, lr, r7
 8023c20:	f89d 5034 	ldrb.w	r5, [sp, #52]	@ 0x34
 8023c24:	f89d c038 	ldrb.w	ip, [sp, #56]	@ 0x38
 8023c28:	eb02 0904 	add.w	r9, r2, r4
 8023c2c:	6808      	ldr	r0, [r1, #0]
 8023c2e:	f2c0 8099 	blt.w	8023d64 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x15c>
 8023c32:	45c2      	cmp	sl, r8
 8023c34:	f340 8096 	ble.w	8023d64 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x15c>
 8023c38:	2f00      	cmp	r7, #0
 8023c3a:	f2c0 8091 	blt.w	8023d60 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x158>
 8023c3e:	45be      	cmp	lr, r7
 8023c40:	f340 808e 	ble.w	8023d60 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x158>
 8023c44:	5d12      	ldrb	r2, [r2, r4]
 8023c46:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023c4a:	189c      	adds	r4, r3, r2
 8023c4c:	5c9a      	ldrb	r2, [r3, r2]
 8023c4e:	7866      	ldrb	r6, [r4, #1]
 8023c50:	78a4      	ldrb	r4, [r4, #2]
 8023c52:	0424      	lsls	r4, r4, #16
 8023c54:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
 8023c58:	4314      	orrs	r4, r2
 8023c5a:	1c7a      	adds	r2, r7, #1
 8023c5c:	f100 8085 	bmi.w	8023d6a <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x162>
 8023c60:	4596      	cmp	lr, r2
 8023c62:	f340 8082 	ble.w	8023d6a <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x162>
 8023c66:	2d00      	cmp	r5, #0
 8023c68:	d07f      	beq.n	8023d6a <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x162>
 8023c6a:	f899 2001 	ldrb.w	r2, [r9, #1]
 8023c6e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023c72:	189e      	adds	r6, r3, r2
 8023c74:	5c9a      	ldrb	r2, [r3, r2]
 8023c76:	f896 b001 	ldrb.w	fp, [r6, #1]
 8023c7a:	78b6      	ldrb	r6, [r6, #2]
 8023c7c:	0436      	lsls	r6, r6, #16
 8023c7e:	ea46 260b 	orr.w	r6, r6, fp, lsl #8
 8023c82:	4316      	orrs	r6, r2
 8023c84:	f118 0801 	adds.w	r8, r8, #1
 8023c88:	d473      	bmi.n	8023d72 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x16a>
 8023c8a:	45c2      	cmp	sl, r8
 8023c8c:	dd71      	ble.n	8023d72 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x16a>
 8023c8e:	f1bc 0f00 	cmp.w	ip, #0
 8023c92:	d06e      	beq.n	8023d72 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x16a>
 8023c94:	2f00      	cmp	r7, #0
 8023c96:	eb09 080e 	add.w	r8, r9, lr
 8023c9a:	db68      	blt.n	8023d6e <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x166>
 8023c9c:	45be      	cmp	lr, r7
 8023c9e:	dd66      	ble.n	8023d6e <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x166>
 8023ca0:	f819 900e 	ldrb.w	r9, [r9, lr]
 8023ca4:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8023ca8:	eb03 0209 	add.w	r2, r3, r9
 8023cac:	f813 9009 	ldrb.w	r9, [r3, r9]
 8023cb0:	f892 a001 	ldrb.w	sl, [r2, #1]
 8023cb4:	7892      	ldrb	r2, [r2, #2]
 8023cb6:	0412      	lsls	r2, r2, #16
 8023cb8:	ea42 220a 	orr.w	r2, r2, sl, lsl #8
 8023cbc:	ea42 0209 	orr.w	r2, r2, r9
 8023cc0:	3701      	adds	r7, #1
 8023cc2:	d411      	bmi.n	8023ce8 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0xe0>
 8023cc4:	45be      	cmp	lr, r7
 8023cc6:	dd0f      	ble.n	8023ce8 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0xe0>
 8023cc8:	b175      	cbz	r5, 8023ce8 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0xe0>
 8023cca:	f898 7001 	ldrb.w	r7, [r8, #1]
 8023cce:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8023cd2:	eb03 0e07 	add.w	lr, r3, r7
 8023cd6:	5ddb      	ldrb	r3, [r3, r7]
 8023cd8:	f89e 0002 	ldrb.w	r0, [lr, #2]
 8023cdc:	f89e 8001 	ldrb.w	r8, [lr, #1]
 8023ce0:	0400      	lsls	r0, r0, #16
 8023ce2:	ea40 2008 	orr.w	r0, r0, r8, lsl #8
 8023ce6:	4318      	orrs	r0, r3
 8023ce8:	b2ad      	uxth	r5, r5
 8023cea:	f006 13ff 	and.w	r3, r6, #16711935	@ 0xff00ff
 8023cee:	fa1f f78c 	uxth.w	r7, ip
 8023cf2:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8023cf6:	f004 18ff 	and.w	r8, r4, #16711935	@ 0xff00ff
 8023cfa:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 8023cfe:	fb05 fc07 	mul.w	ip, r5, r7
 8023d02:	012d      	lsls	r5, r5, #4
 8023d04:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 8023d08:	f5c5 7e80 	rsb	lr, r5, #256	@ 0x100
 8023d0c:	eba5 050c 	sub.w	r5, r5, ip
 8023d10:	b2bf      	uxth	r7, r7
 8023d12:	b2ad      	uxth	r5, r5
 8023d14:	ebae 0e07 	sub.w	lr, lr, r7
 8023d18:	436b      	muls	r3, r5
 8023d1a:	fa1f fe8e 	uxth.w	lr, lr
 8023d1e:	436e      	muls	r6, r5
 8023d20:	fb0e 3808 	mla	r8, lr, r8, r3
 8023d24:	f000 13ff 	and.w	r3, r0, #16711935	@ 0xff00ff
 8023d28:	fb0e 6404 	mla	r4, lr, r4, r6
 8023d2c:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8023d30:	fb0c 8803 	mla	r8, ip, r3, r8
 8023d34:	f002 13ff 	and.w	r3, r2, #16711935	@ 0xff00ff
 8023d38:	fb0c 4000 	mla	r0, ip, r0, r4
 8023d3c:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8023d40:	fb07 8303 	mla	r3, r7, r3, r8
 8023d44:	fb07 0002 	mla	r0, r7, r2, r0
 8023d48:	0a1b      	lsrs	r3, r3, #8
 8023d4a:	0a00      	lsrs	r0, r0, #8
 8023d4c:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8023d50:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8023d54:	4318      	orrs	r0, r3
 8023d56:	f040 407f 	orr.w	r0, r0, #4278190080	@ 0xff000000
 8023d5a:	6008      	str	r0, [r1, #0]
 8023d5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023d60:	4604      	mov	r4, r0
 8023d62:	e77a      	b.n	8023c5a <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x52>
 8023d64:	4606      	mov	r6, r0
 8023d66:	4604      	mov	r4, r0
 8023d68:	e78c      	b.n	8023c84 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x7c>
 8023d6a:	4606      	mov	r6, r0
 8023d6c:	e78a      	b.n	8023c84 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x7c>
 8023d6e:	4602      	mov	r2, r0
 8023d70:	e7a6      	b.n	8023cc0 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0xb8>
 8023d72:	4602      	mov	r2, r0
 8023d74:	e7b8      	b.n	8023ce8 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0xe0>

08023d76 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023d76:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023d7a:	b08f      	sub	sp, #60	@ 0x3c
 8023d7c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8023d80:	920c      	str	r2, [sp, #48]	@ 0x30
 8023d82:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8023d84:	900d      	str	r0, [sp, #52]	@ 0x34
 8023d86:	910a      	str	r1, [sp, #40]	@ 0x28
 8023d88:	6850      	ldr	r0, [r2, #4]
 8023d8a:	9306      	str	r3, [sp, #24]
 8023d8c:	6812      	ldr	r2, [r2, #0]
 8023d8e:	e9dd 131e 	ldrd	r1, r3, [sp, #120]	@ 0x78
 8023d92:	e9dd b519 	ldrd	fp, r5, [sp, #100]	@ 0x64
 8023d96:	fb00 1303 	mla	r3, r0, r3, r1
 8023d9a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8023d9e:	9307      	str	r3, [sp, #28]
 8023da0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8023da2:	681b      	ldr	r3, [r3, #0]
 8023da4:	9308      	str	r3, [sp, #32]
 8023da6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8023da8:	685c      	ldr	r4, [r3, #4]
 8023daa:	3404      	adds	r4, #4
 8023dac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023dae:	2b00      	cmp	r3, #0
 8023db0:	dc03      	bgt.n	8023dba <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 8023db2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023db4:	2b00      	cmp	r3, #0
 8023db6:	f340 81dc 	ble.w	8024172 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
 8023dba:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8023dbc:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023dc0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023dc4:	1e48      	subs	r0, r1, #1
 8023dc6:	1e56      	subs	r6, r2, #1
 8023dc8:	9b06      	ldr	r3, [sp, #24]
 8023dca:	2b00      	cmp	r3, #0
 8023dcc:	f340 80ba 	ble.w	8023f44 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ce>
 8023dd0:	ea5f 472b 	movs.w	r7, fp, asr #16
 8023dd4:	ea4f 4325 	mov.w	r3, r5, asr #16
 8023dd8:	d406      	bmi.n	8023de8 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8023dda:	4287      	cmp	r7, r0
 8023ddc:	da04      	bge.n	8023de8 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8023dde:	2b00      	cmp	r3, #0
 8023de0:	db02      	blt.n	8023de8 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8023de2:	42b3      	cmp	r3, r6
 8023de4:	f2c0 80af 	blt.w	8023f46 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 8023de8:	3701      	adds	r7, #1
 8023dea:	f100 80a0 	bmi.w	8023f2e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 8023dee:	42b9      	cmp	r1, r7
 8023df0:	f2c0 809d 	blt.w	8023f2e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 8023df4:	3301      	adds	r3, #1
 8023df6:	f100 809a 	bmi.w	8023f2e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 8023dfa:	429a      	cmp	r2, r3
 8023dfc:	f2c0 8097 	blt.w	8023f2e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 8023e00:	9b06      	ldr	r3, [sp, #24]
 8023e02:	930b      	str	r3, [sp, #44]	@ 0x2c
 8023e04:	9b07      	ldr	r3, [sp, #28]
 8023e06:	9309      	str	r3, [sp, #36]	@ 0x24
 8023e08:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023e0a:	2b00      	cmp	r3, #0
 8023e0c:	f340 80b8 	ble.w	8023f80 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 8023e10:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8023e12:	142e      	asrs	r6, r5, #16
 8023e14:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8023e16:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8023e1a:	68c7      	ldr	r7, [r0, #12]
 8023e1c:	ea5f 402b 	movs.w	r0, fp, asr #16
 8023e20:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8023e24:	6892      	ldr	r2, [r2, #8]
 8023e26:	f100 80fe 	bmi.w	8024026 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8023e2a:	f102 3cff 	add.w	ip, r2, #4294967295
 8023e2e:	4560      	cmp	r0, ip
 8023e30:	f280 80f9 	bge.w	8024026 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8023e34:	2e00      	cmp	r6, #0
 8023e36:	f2c0 80f6 	blt.w	8024026 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8023e3a:	f107 3cff 	add.w	ip, r7, #4294967295
 8023e3e:	4566      	cmp	r6, ip
 8023e40:	f280 80f1 	bge.w	8024026 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8023e44:	b212      	sxth	r2, r2
 8023e46:	fb06 0002 	mla	r0, r6, r2, r0
 8023e4a:	9e08      	ldr	r6, [sp, #32]
 8023e4c:	5c37      	ldrb	r7, [r6, r0]
 8023e4e:	eb06 0e00 	add.w	lr, r6, r0
 8023e52:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8023e56:	eb04 0c07 	add.w	ip, r4, r7
 8023e5a:	2b00      	cmp	r3, #0
 8023e5c:	f000 80d4 	beq.w	8024008 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 8023e60:	f89e 6001 	ldrb.w	r6, [lr, #1]
 8023e64:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8023e68:	4426      	add	r6, r4
 8023e6a:	2900      	cmp	r1, #0
 8023e6c:	f000 80d5 	beq.w	802401a <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 8023e70:	eb0e 0002 	add.w	r0, lr, r2
 8023e74:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8023e78:	7840      	ldrb	r0, [r0, #1]
 8023e7a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023e7e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8023e82:	4422      	add	r2, r4
 8023e84:	4420      	add	r0, r4
 8023e86:	b29b      	uxth	r3, r3
 8023e88:	f814 a007 	ldrb.w	sl, [r4, r7]
 8023e8c:	b289      	uxth	r1, r1
 8023e8e:	7837      	ldrb	r7, [r6, #0]
 8023e90:	f896 8001 	ldrb.w	r8, [r6, #1]
 8023e94:	fb03 f901 	mul.w	r9, r3, r1
 8023e98:	011b      	lsls	r3, r3, #4
 8023e9a:	78b6      	ldrb	r6, [r6, #2]
 8023e9c:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8023ea0:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 8023ea4:	eba3 0309 	sub.w	r3, r3, r9
 8023ea8:	b289      	uxth	r1, r1
 8023eaa:	b29b      	uxth	r3, r3
 8023eac:	ebae 0e01 	sub.w	lr, lr, r1
 8023eb0:	435f      	muls	r7, r3
 8023eb2:	fa1f fe8e 	uxth.w	lr, lr
 8023eb6:	fb03 f808 	mul.w	r8, r3, r8
 8023eba:	4373      	muls	r3, r6
 8023ebc:	fb0e 770a 	mla	r7, lr, sl, r7
 8023ec0:	f892 a000 	ldrb.w	sl, [r2]
 8023ec4:	fb01 770a 	mla	r7, r1, sl, r7
 8023ec8:	f890 a000 	ldrb.w	sl, [r0]
 8023ecc:	fb09 7a0a 	mla	sl, r9, sl, r7
 8023ed0:	f89c 7001 	ldrb.w	r7, [ip, #1]
 8023ed4:	f89c c002 	ldrb.w	ip, [ip, #2]
 8023ed8:	fb0e 8807 	mla	r8, lr, r7, r8
 8023edc:	7857      	ldrb	r7, [r2, #1]
 8023ede:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 8023ee2:	fb0e 330c 	mla	r3, lr, ip, r3
 8023ee6:	fb01 8807 	mla	r8, r1, r7, r8
 8023eea:	7847      	ldrb	r7, [r0, #1]
 8023eec:	fb09 8707 	mla	r7, r9, r7, r8
 8023ef0:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8023ef4:	ea4a 0707 	orr.w	r7, sl, r7
 8023ef8:	f892 a002 	ldrb.w	sl, [r2, #2]
 8023efc:	fb01 310a 	mla	r1, r1, sl, r3
 8023f00:	f890 a002 	ldrb.w	sl, [r0, #2]
 8023f04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023f06:	fb09 1a0a 	mla	sl, r9, sl, r1
 8023f0a:	ea4f 2a0a 	mov.w	sl, sl, lsl #8
 8023f0e:	f40a 0a7f 	and.w	sl, sl, #16711680	@ 0xff0000
 8023f12:	ea47 070a 	orr.w	r7, r7, sl
 8023f16:	601f      	str	r7, [r3, #0]
 8023f18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023f1a:	3304      	adds	r3, #4
 8023f1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8023f1e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8023f20:	449b      	add	fp, r3
 8023f22:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8023f24:	441d      	add	r5, r3
 8023f26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023f28:	3b01      	subs	r3, #1
 8023f2a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8023f2c:	e76c      	b.n	8023e08 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8023f2e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8023f30:	449b      	add	fp, r3
 8023f32:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8023f34:	441d      	add	r5, r3
 8023f36:	9b06      	ldr	r3, [sp, #24]
 8023f38:	3b01      	subs	r3, #1
 8023f3a:	9306      	str	r3, [sp, #24]
 8023f3c:	9b07      	ldr	r3, [sp, #28]
 8023f3e:	3304      	adds	r3, #4
 8023f40:	9307      	str	r3, [sp, #28]
 8023f42:	e741      	b.n	8023dc8 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8023f44:	d023      	beq.n	8023f8e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8023f46:	9b06      	ldr	r3, [sp, #24]
 8023f48:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8023f4a:	3b01      	subs	r3, #1
 8023f4c:	fb00 b003 	mla	r0, r0, r3, fp
 8023f50:	1400      	asrs	r0, r0, #16
 8023f52:	f53f af55 	bmi.w	8023e00 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8023f56:	3901      	subs	r1, #1
 8023f58:	4288      	cmp	r0, r1
 8023f5a:	f6bf af51 	bge.w	8023e00 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8023f5e:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8023f60:	fb01 5303 	mla	r3, r1, r3, r5
 8023f64:	141b      	asrs	r3, r3, #16
 8023f66:	f53f af4b 	bmi.w	8023e00 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8023f6a:	3a01      	subs	r2, #1
 8023f6c:	4293      	cmp	r3, r2
 8023f6e:	f6bf af47 	bge.w	8023e00 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8023f72:	9b06      	ldr	r3, [sp, #24]
 8023f74:	9309      	str	r3, [sp, #36]	@ 0x24
 8023f76:	9b07      	ldr	r3, [sp, #28]
 8023f78:	930b      	str	r3, [sp, #44]	@ 0x2c
 8023f7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023f7c:	2b00      	cmp	r3, #0
 8023f7e:	dc6f      	bgt.n	8024060 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ea>
 8023f80:	9b06      	ldr	r3, [sp, #24]
 8023f82:	9a07      	ldr	r2, [sp, #28]
 8023f84:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8023f88:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8023f8c:	9307      	str	r3, [sp, #28]
 8023f8e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023f90:	2b00      	cmp	r3, #0
 8023f92:	f340 80ee 	ble.w	8024172 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
 8023f96:	ee30 0a04 	vadd.f32	s0, s0, s8
 8023f9a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8023f9c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8023fa0:	eeb0 6a62 	vmov.f32	s12, s5
 8023fa4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8023fa8:	ee31 1a05 	vadd.f32	s2, s2, s10
 8023fac:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8023fb0:	ee16 ba10 	vmov	fp, s12
 8023fb4:	eeb0 6a43 	vmov.f32	s12, s6
 8023fb8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8023fbc:	ee16 5a10 	vmov	r5, s12
 8023fc0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8023fc4:	ee61 7a27 	vmul.f32	s15, s2, s15
 8023fc8:	ee77 2a62 	vsub.f32	s5, s14, s5
 8023fcc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8023fd0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8023fd4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8023fd8:	ee12 2a90 	vmov	r2, s5
 8023fdc:	eef0 2a47 	vmov.f32	s5, s14
 8023fe0:	fb92 f3f3 	sdiv	r3, r2, r3
 8023fe4:	ee13 2a10 	vmov	r2, s6
 8023fe8:	931b      	str	r3, [sp, #108]	@ 0x6c
 8023fea:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8023fec:	eeb0 3a67 	vmov.f32	s6, s15
 8023ff0:	fb92 f3f3 	sdiv	r3, r2, r3
 8023ff4:	931c      	str	r3, [sp, #112]	@ 0x70
 8023ff6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023ff8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8023ffa:	3b01      	subs	r3, #1
 8023ffc:	930a      	str	r3, [sp, #40]	@ 0x28
 8023ffe:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8024000:	bf08      	it	eq
 8024002:	4613      	moveq	r3, r2
 8024004:	9306      	str	r3, [sp, #24]
 8024006:	e6d1      	b.n	8023dac <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8024008:	b151      	cbz	r1, 8024020 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2aa>
 802400a:	f81e 2002 	ldrb.w	r2, [lr, r2]
 802400e:	4660      	mov	r0, ip
 8024010:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024014:	4422      	add	r2, r4
 8024016:	4666      	mov	r6, ip
 8024018:	e735      	b.n	8023e86 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 802401a:	4660      	mov	r0, ip
 802401c:	4662      	mov	r2, ip
 802401e:	e732      	b.n	8023e86 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8024020:	4660      	mov	r0, ip
 8024022:	4662      	mov	r2, ip
 8024024:	e7f7      	b.n	8024016 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8024026:	f110 0c01 	adds.w	ip, r0, #1
 802402a:	f53f af75 	bmi.w	8023f18 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802402e:	4562      	cmp	r2, ip
 8024030:	f6ff af72 	blt.w	8023f18 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8024034:	f116 0c01 	adds.w	ip, r6, #1
 8024038:	f53f af6e 	bmi.w	8023f18 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802403c:	4567      	cmp	r7, ip
 802403e:	f6ff af6b 	blt.w	8023f18 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8024042:	b23f      	sxth	r7, r7
 8024044:	b212      	sxth	r2, r2
 8024046:	9701      	str	r7, [sp, #4]
 8024048:	9200      	str	r2, [sp, #0]
 802404a:	e9cd 3104 	strd	r3, r1, [sp, #16]
 802404e:	e9cd 0602 	strd	r0, r6, [sp, #8]
 8024052:	4623      	mov	r3, r4
 8024054:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8024056:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 802405a:	f7ff fdd5 	bl	8023c08 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh>
 802405e:	e75b      	b.n	8023f18 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8024060:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8024062:	ea4f 462b 	mov.w	r6, fp, asr #16
 8024066:	1428      	asrs	r0, r5, #16
 8024068:	f3cb 3303 	ubfx	r3, fp, #12, #4
 802406c:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8024070:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8024074:	fb02 6000 	mla	r0, r2, r0, r6
 8024078:	9e08      	ldr	r6, [sp, #32]
 802407a:	5c37      	ldrb	r7, [r6, r0]
 802407c:	eb06 0e00 	add.w	lr, r6, r0
 8024080:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8024084:	eb04 0c07 	add.w	ip, r4, r7
 8024088:	2b00      	cmp	r3, #0
 802408a:	d063      	beq.n	8024154 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 802408c:	f89e 6001 	ldrb.w	r6, [lr, #1]
 8024090:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8024094:	4426      	add	r6, r4
 8024096:	2900      	cmp	r1, #0
 8024098:	d065      	beq.n	8024166 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 802409a:	eb0e 0002 	add.w	r0, lr, r2
 802409e:	f81e 2002 	ldrb.w	r2, [lr, r2]
 80240a2:	7840      	ldrb	r0, [r0, #1]
 80240a4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80240a8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80240ac:	4422      	add	r2, r4
 80240ae:	4420      	add	r0, r4
 80240b0:	b29b      	uxth	r3, r3
 80240b2:	f814 a007 	ldrb.w	sl, [r4, r7]
 80240b6:	b289      	uxth	r1, r1
 80240b8:	7837      	ldrb	r7, [r6, #0]
 80240ba:	f896 8001 	ldrb.w	r8, [r6, #1]
 80240be:	fb03 f901 	mul.w	r9, r3, r1
 80240c2:	011b      	lsls	r3, r3, #4
 80240c4:	78b6      	ldrb	r6, [r6, #2]
 80240c6:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80240ca:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 80240ce:	eba3 0309 	sub.w	r3, r3, r9
 80240d2:	b289      	uxth	r1, r1
 80240d4:	b29b      	uxth	r3, r3
 80240d6:	ebae 0e01 	sub.w	lr, lr, r1
 80240da:	435f      	muls	r7, r3
 80240dc:	fa1f fe8e 	uxth.w	lr, lr
 80240e0:	fb03 f808 	mul.w	r8, r3, r8
 80240e4:	4373      	muls	r3, r6
 80240e6:	7896      	ldrb	r6, [r2, #2]
 80240e8:	fb0e 770a 	mla	r7, lr, sl, r7
 80240ec:	f892 a000 	ldrb.w	sl, [r2]
 80240f0:	fb01 770a 	mla	r7, r1, sl, r7
 80240f4:	f890 a000 	ldrb.w	sl, [r0]
 80240f8:	fb09 7a0a 	mla	sl, r9, sl, r7
 80240fc:	f89c 7001 	ldrb.w	r7, [ip, #1]
 8024100:	f89c c002 	ldrb.w	ip, [ip, #2]
 8024104:	fb0e 8807 	mla	r8, lr, r7, r8
 8024108:	7857      	ldrb	r7, [r2, #1]
 802410a:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 802410e:	fb0e 330c 	mla	r3, lr, ip, r3
 8024112:	fb01 8807 	mla	r8, r1, r7, r8
 8024116:	7847      	ldrb	r7, [r0, #1]
 8024118:	fb01 3306 	mla	r3, r1, r6, r3
 802411c:	fb09 8707 	mla	r7, r9, r7, r8
 8024120:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8024124:	ea4a 0707 	orr.w	r7, sl, r7
 8024128:	f890 a002 	ldrb.w	sl, [r0, #2]
 802412c:	fb09 3a0a 	mla	sl, r9, sl, r3
 8024130:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024132:	ea4f 2a0a 	mov.w	sl, sl, lsl #8
 8024136:	f40a 0a7f 	and.w	sl, sl, #16711680	@ 0xff0000
 802413a:	ea47 070a 	orr.w	r7, r7, sl
 802413e:	f843 7b04 	str.w	r7, [r3], #4
 8024142:	930b      	str	r3, [sp, #44]	@ 0x2c
 8024144:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8024146:	449b      	add	fp, r3
 8024148:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802414a:	441d      	add	r5, r3
 802414c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802414e:	3b01      	subs	r3, #1
 8024150:	9309      	str	r3, [sp, #36]	@ 0x24
 8024152:	e712      	b.n	8023f7a <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8024154:	b151      	cbz	r1, 802416c <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 8024156:	f81e 2002 	ldrb.w	r2, [lr, r2]
 802415a:	4660      	mov	r0, ip
 802415c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024160:	4422      	add	r2, r4
 8024162:	4666      	mov	r6, ip
 8024164:	e7a4      	b.n	80240b0 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 8024166:	4660      	mov	r0, ip
 8024168:	4662      	mov	r2, ip
 802416a:	e7a1      	b.n	80240b0 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 802416c:	4660      	mov	r0, ip
 802416e:	4662      	mov	r2, ip
 8024170:	e7f7      	b.n	8024162 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ec>
 8024172:	b00f      	add	sp, #60	@ 0x3c
 8024174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024178 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh>:
 8024178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802417c:	b085      	sub	sp, #20
 802417e:	6808      	ldr	r0, [r1, #0]
 8024180:	e9dd 6910 	ldrd	r6, r9, [sp, #64]	@ 0x40
 8024184:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	@ 0x38
 8024188:	f1b9 0f00 	cmp.w	r9, #0
 802418c:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	@ 0x3c
 8024190:	fb09 6408 	mla	r4, r9, r8, r6
 8024194:	f89d c048 	ldrb.w	ip, [sp, #72]	@ 0x48
 8024198:	f89d e04c 	ldrb.w	lr, [sp, #76]	@ 0x4c
 802419c:	f89d 7050 	ldrb.w	r7, [sp, #80]	@ 0x50
 80241a0:	eb02 0a04 	add.w	sl, r2, r4
 80241a4:	f2c0 8103 	blt.w	80243ae <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x236>
 80241a8:	45cb      	cmp	fp, r9
 80241aa:	f340 8100 	ble.w	80243ae <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x236>
 80241ae:	2e00      	cmp	r6, #0
 80241b0:	f2c0 80fb 	blt.w	80243aa <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x232>
 80241b4:	45b0      	cmp	r8, r6
 80241b6:	f340 80f8 	ble.w	80243aa <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x232>
 80241ba:	5d12      	ldrb	r2, [r2, r4]
 80241bc:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80241c0:	1c72      	adds	r2, r6, #1
 80241c2:	f100 80f5 	bmi.w	80243b0 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x238>
 80241c6:	4590      	cmp	r8, r2
 80241c8:	f340 80f2 	ble.w	80243b0 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x238>
 80241cc:	f1bc 0f00 	cmp.w	ip, #0
 80241d0:	f000 80ee 	beq.w	80243b0 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x238>
 80241d4:	f89a 2001 	ldrb.w	r2, [sl, #1]
 80241d8:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 80241dc:	f119 0901 	adds.w	r9, r9, #1
 80241e0:	f100 80ea 	bmi.w	80243b8 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x240>
 80241e4:	45cb      	cmp	fp, r9
 80241e6:	f340 80e7 	ble.w	80243b8 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x240>
 80241ea:	f1be 0f00 	cmp.w	lr, #0
 80241ee:	f000 80e3 	beq.w	80243b8 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x240>
 80241f2:	2e00      	cmp	r6, #0
 80241f4:	f2c0 80de 	blt.w	80243b4 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x23c>
 80241f8:	45b0      	cmp	r8, r6
 80241fa:	f340 80db 	ble.w	80243b4 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x23c>
 80241fe:	f81a 2008 	ldrb.w	r2, [sl, r8]
 8024202:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8024206:	3601      	adds	r6, #1
 8024208:	d409      	bmi.n	802421e <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0xa6>
 802420a:	45b0      	cmp	r8, r6
 802420c:	dd07      	ble.n	802421e <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0xa6>
 802420e:	f1bc 0f00 	cmp.w	ip, #0
 8024212:	d004      	beq.n	802421e <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0xa6>
 8024214:	44d0      	add	r8, sl
 8024216:	f898 0001 	ldrb.w	r0, [r8, #1]
 802421a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 802421e:	fa1f fc8c 	uxth.w	ip, ip
 8024222:	fa1f f38e 	uxth.w	r3, lr
 8024226:	ea4f 6a14 	mov.w	sl, r4, lsr #24
 802422a:	fb03 fe0c 	mul.w	lr, r3, ip
 802422e:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8024232:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8024236:	ebce 1303 	rsb	r3, lr, r3, lsl #4
 802423a:	ebac 060e 	sub.w	r6, ip, lr
 802423e:	f5cc 7c80 	rsb	ip, ip, #256	@ 0x100
 8024242:	ea4f 6912 	mov.w	r9, r2, lsr #24
 8024246:	b29b      	uxth	r3, r3
 8024248:	b2b6      	uxth	r6, r6
 802424a:	ebac 0c03 	sub.w	ip, ip, r3
 802424e:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8024252:	9601      	str	r6, [sp, #4]
 8024254:	fa1f f68c 	uxth.w	r6, ip
 8024258:	9602      	str	r6, [sp, #8]
 802425a:	9e01      	ldr	r6, [sp, #4]
 802425c:	fb06 fc0a 	mul.w	ip, r6, sl
 8024260:	9e02      	ldr	r6, [sp, #8]
 8024262:	fb06 cc0b 	mla	ip, r6, fp, ip
 8024266:	fb03 cc09 	mla	ip, r3, r9, ip
 802426a:	fb0e cc08 	mla	ip, lr, r8, ip
 802426e:	f3cc 2607 	ubfx	r6, ip, #8, #8
 8024272:	9603      	str	r6, [sp, #12]
 8024274:	2e00      	cmp	r6, #0
 8024276:	f000 8095 	beq.w	80243a4 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x22c>
 802427a:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 802427e:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 8024282:	fb0b fc0c 	mul.w	ip, fp, ip
 8024286:	fb0b f505 	mul.w	r5, fp, r5
 802428a:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 802428e:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8024292:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 8024296:	44dc      	add	ip, fp
 8024298:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802429c:	f00c 16ff 	and.w	r6, ip, #16711935	@ 0xff00ff
 80242a0:	f505 7c80 	add.w	ip, r5, #256	@ 0x100
 80242a4:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 80242a8:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80242ac:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 80242b0:	fb0a fc0c 	mul.w	ip, sl, ip
 80242b4:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 80242b8:	fb0a fa04 	mul.w	sl, sl, r4
 80242bc:	ea4f 251c 	mov.w	r5, ip, lsr #8
 80242c0:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 80242c4:	f50a 7480 	add.w	r4, sl, #256	@ 0x100
 80242c8:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 80242cc:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 80242d0:	eb04 2a1a 	add.w	sl, r4, sl, lsr #8
 80242d4:	4465      	add	r5, ip
 80242d6:	f002 1cff 	and.w	ip, r2, #16711935	@ 0xff00ff
 80242da:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 80242de:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80242e2:	fb09 fc0c 	mul.w	ip, r9, ip
 80242e6:	0a2d      	lsrs	r5, r5, #8
 80242e8:	fb09 f902 	mul.w	r9, r9, r2
 80242ec:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80242f0:	ea4f 241c 	mov.w	r4, ip, lsr #8
 80242f4:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 80242f8:	f509 7280 	add.w	r2, r9, #256	@ 0x100
 80242fc:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8024300:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 8024304:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 8024308:	f000 12ff 	and.w	r2, r0, #16711935	@ 0xff00ff
 802430c:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8024310:	4464      	add	r4, ip
 8024312:	fb08 f202 	mul.w	r2, r8, r2
 8024316:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802431a:	fb08 f800 	mul.w	r8, r8, r0
 802431e:	0a24      	lsrs	r4, r4, #8
 8024320:	0a10      	lsrs	r0, r2, #8
 8024322:	f102 1201 	add.w	r2, r2, #65537	@ 0x10001
 8024326:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 802432a:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 802432e:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8024332:	4402      	add	r2, r0
 8024334:	f508 7080 	add.w	r0, r8, #256	@ 0x100
 8024338:	eb00 2818 	add.w	r8, r0, r8, lsr #8
 802433c:	9801      	ldr	r0, [sp, #4]
 802433e:	0a12      	lsrs	r2, r2, #8
 8024340:	4345      	muls	r5, r0
 8024342:	9802      	ldr	r0, [sp, #8]
 8024344:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8024348:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802434c:	fb06 5500 	mla	r5, r6, r0, r5
 8024350:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 8024354:	fb02 520e 	mla	r2, r2, lr, r5
 8024358:	fb04 2403 	mla	r4, r4, r3, r2
 802435c:	9a01      	ldr	r2, [sp, #4]
 802435e:	fb02 f60a 	mul.w	r6, r2, sl
 8024362:	0a24      	lsrs	r4, r4, #8
 8024364:	9a03      	ldr	r2, [sp, #12]
 8024366:	fb00 660b 	mla	r6, r0, fp, r6
 802436a:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 802436e:	fb07 fc02 	mul.w	ip, r7, r2
 8024372:	fb0e 6e08 	mla	lr, lr, r8, r6
 8024376:	fb03 e309 	mla	r3, r3, r9, lr
 802437a:	0a1b      	lsrs	r3, r3, #8
 802437c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8024380:	4323      	orrs	r3, r4
 8024382:	f10c 0401 	add.w	r4, ip, #1
 8024386:	eb04 241c 	add.w	r4, r4, ip, lsr #8
 802438a:	f3c3 4207 	ubfx	r2, r3, #16, #8
 802438e:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8024392:	1224      	asrs	r4, r4, #8
 8024394:	b2d5      	uxtb	r5, r2
 8024396:	2cff      	cmp	r4, #255	@ 0xff
 8024398:	b2c6      	uxtb	r6, r0
 802439a:	d10f      	bne.n	80243bc <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x244>
 802439c:	700b      	strb	r3, [r1, #0]
 802439e:	7048      	strb	r0, [r1, #1]
 80243a0:	708a      	strb	r2, [r1, #2]
 80243a2:	70cc      	strb	r4, [r1, #3]
 80243a4:	b005      	add	sp, #20
 80243a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80243aa:	4605      	mov	r5, r0
 80243ac:	e708      	b.n	80241c0 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x48>
 80243ae:	4605      	mov	r5, r0
 80243b0:	4604      	mov	r4, r0
 80243b2:	e713      	b.n	80241dc <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x64>
 80243b4:	4602      	mov	r2, r0
 80243b6:	e726      	b.n	8024206 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x8e>
 80243b8:	4602      	mov	r2, r0
 80243ba:	e730      	b.n	802421e <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0xa6>
 80243bc:	b2e2      	uxtb	r2, r4
 80243be:	2c00      	cmp	r4, #0
 80243c0:	d0f0      	beq.n	80243a4 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x22c>
 80243c2:	78cc      	ldrb	r4, [r1, #3]
 80243c4:	b2db      	uxtb	r3, r3
 80243c6:	fb17 f606 	smulbb	r6, r7, r6
 80243ca:	fb02 fc04 	mul.w	ip, r2, r4
 80243ce:	4422      	add	r2, r4
 80243d0:	f10c 0001 	add.w	r0, ip, #1
 80243d4:	eb00 201c 	add.w	r0, r0, ip, lsr #8
 80243d8:	1200      	asrs	r0, r0, #8
 80243da:	1a24      	subs	r4, r4, r0
 80243dc:	1a12      	subs	r2, r2, r0
 80243de:	7808      	ldrb	r0, [r1, #0]
 80243e0:	b2d2      	uxtb	r2, r2
 80243e2:	4360      	muls	r0, r4
 80243e4:	70ca      	strb	r2, [r1, #3]
 80243e6:	fb07 0303 	mla	r3, r7, r3, r0
 80243ea:	7848      	ldrb	r0, [r1, #1]
 80243ec:	fb17 f705 	smulbb	r7, r7, r5
 80243f0:	fb04 6000 	mla	r0, r4, r0, r6
 80243f4:	fb93 f3f2 	sdiv	r3, r3, r2
 80243f8:	2bff      	cmp	r3, #255	@ 0xff
 80243fa:	bfd6      	itet	le
 80243fc:	ea23 73e3 	bicle.w	r3, r3, r3, asr #31
 8024400:	23ff      	movgt	r3, #255	@ 0xff
 8024402:	b2db      	uxtble	r3, r3
 8024404:	fb90 f0f2 	sdiv	r0, r0, r2
 8024408:	700b      	strb	r3, [r1, #0]
 802440a:	28ff      	cmp	r0, #255	@ 0xff
 802440c:	788b      	ldrb	r3, [r1, #2]
 802440e:	bfd4      	ite	le
 8024410:	ea20 70e0 	bicle.w	r0, r0, r0, asr #31
 8024414:	20ff      	movgt	r0, #255	@ 0xff
 8024416:	fb04 7303 	mla	r3, r4, r3, r7
 802441a:	bfd8      	it	le
 802441c:	b2c0      	uxtble	r0, r0
 802441e:	fb93 f3f2 	sdiv	r3, r3, r2
 8024422:	2bff      	cmp	r3, #255	@ 0xff
 8024424:	7048      	strb	r0, [r1, #1]
 8024426:	bfd6      	itet	le
 8024428:	ea23 73e3 	bicle.w	r3, r3, r3, asr #31
 802442c:	23ff      	movgt	r3, #255	@ 0xff
 802442e:	b2db      	uxtble	r3, r3
 8024430:	708b      	strb	r3, [r1, #2]
 8024432:	e7b7      	b.n	80243a4 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x22c>

08024434 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024438:	b09d      	sub	sp, #116	@ 0x74
 802443a:	921a      	str	r2, [sp, #104]	@ 0x68
 802443c:	9308      	str	r3, [sp, #32]
 802443e:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
 8024440:	f89d 30bc 	ldrb.w	r3, [sp, #188]	@ 0xbc
 8024444:	901b      	str	r0, [sp, #108]	@ 0x6c
 8024446:	9118      	str	r1, [sp, #96]	@ 0x60
 8024448:	6850      	ldr	r0, [r2, #4]
 802444a:	9309      	str	r3, [sp, #36]	@ 0x24
 802444c:	6812      	ldr	r2, [r2, #0]
 802444e:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	@ 0xb0
 8024452:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	@ 0x9c
 8024456:	fb00 1303 	mla	r3, r0, r3, r1
 802445a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802445e:	930c      	str	r3, [sp, #48]	@ 0x30
 8024460:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8024462:	681b      	ldr	r3, [r3, #0]
 8024464:	9311      	str	r3, [sp, #68]	@ 0x44
 8024466:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8024468:	685f      	ldr	r7, [r3, #4]
 802446a:	3704      	adds	r7, #4
 802446c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802446e:	2b00      	cmp	r3, #0
 8024470:	dc03      	bgt.n	802447a <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8024472:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8024474:	2b00      	cmp	r3, #0
 8024476:	f340 83cd 	ble.w	8024c14 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e0>
 802447a:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 802447c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024480:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024484:	1e48      	subs	r0, r1, #1
 8024486:	f102 3cff 	add.w	ip, r2, #4294967295
 802448a:	9b08      	ldr	r3, [sp, #32]
 802448c:	2b00      	cmp	r3, #0
 802448e:	f340 816c 	ble.w	802476a <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x336>
 8024492:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8024496:	ea4f 4326 	mov.w	r3, r6, asr #16
 802449a:	d406      	bmi.n	80244aa <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 802449c:	4586      	cmp	lr, r0
 802449e:	da04      	bge.n	80244aa <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80244a0:	2b00      	cmp	r3, #0
 80244a2:	db02      	blt.n	80244aa <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80244a4:	4563      	cmp	r3, ip
 80244a6:	f2c0 8161 	blt.w	802476c <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x338>
 80244aa:	f11e 0e01 	adds.w	lr, lr, #1
 80244ae:	f100 8151 	bmi.w	8024754 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 80244b2:	4571      	cmp	r1, lr
 80244b4:	f2c0 814e 	blt.w	8024754 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 80244b8:	3301      	adds	r3, #1
 80244ba:	f100 814b 	bmi.w	8024754 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 80244be:	429a      	cmp	r2, r3
 80244c0:	f2c0 8148 	blt.w	8024754 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 80244c4:	9b08      	ldr	r3, [sp, #32]
 80244c6:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
 80244ca:	9319      	str	r3, [sp, #100]	@ 0x64
 80244cc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80244ce:	2b00      	cmp	r3, #0
 80244d0:	f340 8169 	ble.w	80247a6 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 80244d4:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 80244d6:	ea4f 4c26 	mov.w	ip, r6, asr #16
 80244da:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80244de:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80244e2:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 80244e6:	1423      	asrs	r3, r4, #16
 80244e8:	f100 81f7 	bmi.w	80248da <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a6>
 80244ec:	f100 39ff 	add.w	r9, r0, #4294967295
 80244f0:	454b      	cmp	r3, r9
 80244f2:	f280 81f2 	bge.w	80248da <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a6>
 80244f6:	f1bc 0f00 	cmp.w	ip, #0
 80244fa:	f2c0 81ee 	blt.w	80248da <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a6>
 80244fe:	f10e 39ff 	add.w	r9, lr, #4294967295
 8024502:	45cc      	cmp	ip, r9
 8024504:	f280 81e9 	bge.w	80248da <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a6>
 8024508:	b200      	sxth	r0, r0
 802450a:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 802450c:	fb0c 3300 	mla	r3, ip, r0, r3
 8024510:	eb05 0903 	add.w	r9, r5, r3
 8024514:	5ceb      	ldrb	r3, [r5, r3]
 8024516:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 802451a:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 802451e:	2a00      	cmp	r2, #0
 8024520:	f000 8187 	beq.w	8024832 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fe>
 8024524:	f899 c001 	ldrb.w	ip, [r9, #1]
 8024528:	f857 502c 	ldr.w	r5, [r7, ip, lsl #2]
 802452c:	950d      	str	r5, [sp, #52]	@ 0x34
 802452e:	0e2d      	lsrs	r5, r5, #24
 8024530:	9514      	str	r5, [sp, #80]	@ 0x50
 8024532:	b179      	cbz	r1, 8024554 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 8024534:	eb09 0c00 	add.w	ip, r9, r0
 8024538:	f819 0000 	ldrb.w	r0, [r9, r0]
 802453c:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 8024540:	900a      	str	r0, [sp, #40]	@ 0x28
 8024542:	0e00      	lsrs	r0, r0, #24
 8024544:	9012      	str	r0, [sp, #72]	@ 0x48
 8024546:	f89c 0001 	ldrb.w	r0, [ip, #1]
 802454a:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 802454e:	900e      	str	r0, [sp, #56]	@ 0x38
 8024550:	0e00      	lsrs	r0, r0, #24
 8024552:	9015      	str	r0, [sp, #84]	@ 0x54
 8024554:	b292      	uxth	r2, r2
 8024556:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8024558:	b289      	uxth	r1, r1
 802455a:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 802455c:	fb02 fa01 	mul.w	sl, r2, r1
 8024560:	0112      	lsls	r2, r2, #4
 8024562:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 8024566:	eba2 090a 	sub.w	r9, r2, sl
 802456a:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 802456e:	b289      	uxth	r1, r1
 8024570:	fa1f f989 	uxth.w	r9, r9
 8024574:	1a52      	subs	r2, r2, r1
 8024576:	fb09 f000 	mul.w	r0, r9, r0
 802457a:	b292      	uxth	r2, r2
 802457c:	fb02 000e 	mla	r0, r2, lr, r0
 8024580:	fb01 0005 	mla	r0, r1, r5, r0
 8024584:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8024586:	fb0a 0005 	mla	r0, sl, r5, r0
 802458a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802458e:	2800      	cmp	r0, #0
 8024590:	f000 80d6 	beq.w	8024740 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8024594:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8024598:	d01b      	beq.n	80245d2 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 802459a:	f003 1bff 	and.w	fp, r3, #16711935	@ 0xff00ff
 802459e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80245a2:	fb0e fb0b 	mul.w	fp, lr, fp
 80245a6:	fb0e fe03 	mul.w	lr, lr, r3
 80245aa:	ea4f 231b 	mov.w	r3, fp, lsr #8
 80245ae:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80245b2:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 80245b6:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80245ba:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80245be:	445b      	add	r3, fp
 80245c0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80245c4:	0a1b      	lsrs	r3, r3, #8
 80245c6:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 80245ca:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80245ce:	ea43 030c 	orr.w	r3, r3, ip
 80245d2:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80245d4:	2dff      	cmp	r5, #255	@ 0xff
 80245d6:	d021      	beq.n	802461c <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 80245d8:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80245da:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 80245de:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80245e0:	fb05 fc0c 	mul.w	ip, r5, ip
 80245e4:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80245e6:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80245ea:	f405 4b7f 	and.w	fp, r5, #65280	@ 0xff00
 80245ee:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80245f0:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 80245f4:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80245f8:	fb05 fb0b 	mul.w	fp, r5, fp
 80245fc:	44e6      	add	lr, ip
 80245fe:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 8024602:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024606:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 802460a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802460e:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8024612:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 8024616:	ea4e 050b 	orr.w	r5, lr, fp
 802461a:	950d      	str	r5, [sp, #52]	@ 0x34
 802461c:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 802461e:	2dff      	cmp	r5, #255	@ 0xff
 8024620:	d021      	beq.n	8024666 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 8024622:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8024624:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8024628:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 802462a:	fb05 fc0c 	mul.w	ip, r5, ip
 802462e:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8024630:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8024634:	f405 4b7f 	and.w	fp, r5, #65280	@ 0xff00
 8024638:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 802463a:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 802463e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8024642:	fb05 fb0b 	mul.w	fp, r5, fp
 8024646:	44e6      	add	lr, ip
 8024648:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 802464c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024650:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8024654:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8024658:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 802465c:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 8024660:	ea4e 050b 	orr.w	r5, lr, fp
 8024664:	950a      	str	r5, [sp, #40]	@ 0x28
 8024666:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8024668:	2dff      	cmp	r5, #255	@ 0xff
 802466a:	d021      	beq.n	80246b0 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 802466c:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 802466e:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8024672:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8024674:	fb05 fc0c 	mul.w	ip, r5, ip
 8024678:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 802467a:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 802467e:	f405 4b7f 	and.w	fp, r5, #65280	@ 0xff00
 8024682:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8024684:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8024688:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802468c:	fb05 fb0b 	mul.w	fp, r5, fp
 8024690:	44e6      	add	lr, ip
 8024692:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 8024696:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802469a:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 802469e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80246a2:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80246a6:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 80246aa:	ea4e 050b 	orr.w	r5, lr, fp
 80246ae:	950e      	str	r5, [sp, #56]	@ 0x38
 80246b0:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80246b2:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 80246b6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80246ba:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 80246be:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80246c0:	fb09 fc0c 	mul.w	ip, r9, ip
 80246c4:	fb02 cc0e 	mla	ip, r2, lr, ip
 80246c8:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 80246cc:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 80246ce:	fb01 cc0e 	mla	ip, r1, lr, ip
 80246d2:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 80246d6:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80246d8:	fb0a cc0e 	mla	ip, sl, lr, ip
 80246dc:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 80246e0:	fb09 f90e 	mul.w	r9, r9, lr
 80246e4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80246e8:	fb02 9303 	mla	r3, r2, r3, r9
 80246ec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80246ee:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80246f2:	f402 4b7f 	and.w	fp, r2, #65280	@ 0xff00
 80246f6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80246f8:	fb01 330b 	mla	r3, r1, fp, r3
 80246fc:	f402 417f 	and.w	r1, r2, #65280	@ 0xff00
 8024700:	fb0a 3a01 	mla	sl, sl, r1, r3
 8024704:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024706:	4358      	muls	r0, r3
 8024708:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802470c:	1c43      	adds	r3, r0, #1
 802470e:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8024712:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8024716:	ea4c 0c0a 	orr.w	ip, ip, sl
 802471a:	1200      	asrs	r0, r0, #8
 802471c:	f3cc 4307 	ubfx	r3, ip, #16, #8
 8024720:	f3cc 2207 	ubfx	r2, ip, #8, #8
 8024724:	28ff      	cmp	r0, #255	@ 0xff
 8024726:	b2d9      	uxtb	r1, r3
 8024728:	fa5f fe82 	uxtb.w	lr, r2
 802472c:	f040 808c 	bne.w	8024848 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x414>
 8024730:	f888 c000 	strb.w	ip, [r8]
 8024734:	f888 2001 	strb.w	r2, [r8, #1]
 8024738:	f888 3002 	strb.w	r3, [r8, #2]
 802473c:	f888 0003 	strb.w	r0, [r8, #3]
 8024740:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8024742:	f108 0804 	add.w	r8, r8, #4
 8024746:	441c      	add	r4, r3
 8024748:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 802474a:	441e      	add	r6, r3
 802474c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802474e:	3b01      	subs	r3, #1
 8024750:	9319      	str	r3, [sp, #100]	@ 0x64
 8024752:	e6bb      	b.n	80244cc <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8024754:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8024756:	441c      	add	r4, r3
 8024758:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 802475a:	441e      	add	r6, r3
 802475c:	9b08      	ldr	r3, [sp, #32]
 802475e:	3b01      	subs	r3, #1
 8024760:	9308      	str	r3, [sp, #32]
 8024762:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024764:	3304      	adds	r3, #4
 8024766:	930c      	str	r3, [sp, #48]	@ 0x30
 8024768:	e68f      	b.n	802448a <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 802476a:	d023      	beq.n	80247b4 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 802476c:	9b08      	ldr	r3, [sp, #32]
 802476e:	9829      	ldr	r0, [sp, #164]	@ 0xa4
 8024770:	3b01      	subs	r3, #1
 8024772:	fb00 4003 	mla	r0, r0, r3, r4
 8024776:	1400      	asrs	r0, r0, #16
 8024778:	f53f aea4 	bmi.w	80244c4 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802477c:	3901      	subs	r1, #1
 802477e:	4288      	cmp	r0, r1
 8024780:	f6bf aea0 	bge.w	80244c4 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8024784:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 8024786:	fb01 6303 	mla	r3, r1, r3, r6
 802478a:	141b      	asrs	r3, r3, #16
 802478c:	f53f ae9a 	bmi.w	80244c4 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8024790:	3a01      	subs	r2, #1
 8024792:	4293      	cmp	r3, r2
 8024794:	f6bf ae96 	bge.w	80244c4 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8024798:	9b08      	ldr	r3, [sp, #32]
 802479a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 802479c:	9319      	str	r3, [sp, #100]	@ 0x64
 802479e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80247a0:	2b00      	cmp	r3, #0
 80247a2:	f300 80ba 	bgt.w	802491a <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 80247a6:	9b08      	ldr	r3, [sp, #32]
 80247a8:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 80247ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80247ae:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80247b2:	930c      	str	r3, [sp, #48]	@ 0x30
 80247b4:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80247b6:	2b00      	cmp	r3, #0
 80247b8:	f340 822c 	ble.w	8024c14 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e0>
 80247bc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80247c0:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80247c2:	ee30 0a04 	vadd.f32	s0, s0, s8
 80247c6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80247ca:	eef0 6a62 	vmov.f32	s13, s5
 80247ce:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80247d2:	ee31 1a05 	vadd.f32	s2, s2, s10
 80247d6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80247da:	ee16 4a90 	vmov	r4, s13
 80247de:	eef0 6a43 	vmov.f32	s13, s6
 80247e2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80247e6:	ee16 6a90 	vmov	r6, s13
 80247ea:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80247ee:	ee61 7a27 	vmul.f32	s15, s2, s15
 80247f2:	ee77 2a62 	vsub.f32	s5, s14, s5
 80247f6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80247fa:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80247fe:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8024802:	ee12 2a90 	vmov	r2, s5
 8024806:	eef0 2a47 	vmov.f32	s5, s14
 802480a:	fb92 f3f3 	sdiv	r3, r2, r3
 802480e:	ee13 2a10 	vmov	r2, s6
 8024812:	9329      	str	r3, [sp, #164]	@ 0xa4
 8024814:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8024816:	eeb0 3a67 	vmov.f32	s6, s15
 802481a:	fb92 f3f3 	sdiv	r3, r2, r3
 802481e:	932a      	str	r3, [sp, #168]	@ 0xa8
 8024820:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8024822:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8024824:	3b01      	subs	r3, #1
 8024826:	9318      	str	r3, [sp, #96]	@ 0x60
 8024828:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 802482a:	bf08      	it	eq
 802482c:	4613      	moveq	r3, r2
 802482e:	9308      	str	r3, [sp, #32]
 8024830:	e61c      	b.n	802446c <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8024832:	2900      	cmp	r1, #0
 8024834:	f43f ae8e 	beq.w	8024554 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 8024838:	f819 0000 	ldrb.w	r0, [r9, r0]
 802483c:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 8024840:	900a      	str	r0, [sp, #40]	@ 0x28
 8024842:	0e00      	lsrs	r0, r0, #24
 8024844:	9012      	str	r0, [sp, #72]	@ 0x48
 8024846:	e685      	b.n	8024554 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 8024848:	b2c3      	uxtb	r3, r0
 802484a:	2800      	cmp	r0, #0
 802484c:	f43f af78 	beq.w	8024740 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8024850:	f898 0003 	ldrb.w	r0, [r8, #3]
 8024854:	fa5f fc8c 	uxtb.w	ip, ip
 8024858:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 802485a:	fb03 f900 	mul.w	r9, r3, r0
 802485e:	4403      	add	r3, r0
 8024860:	f109 0201 	add.w	r2, r9, #1
 8024864:	eb02 2219 	add.w	r2, r2, r9, lsr #8
 8024868:	1212      	asrs	r2, r2, #8
 802486a:	1a80      	subs	r0, r0, r2
 802486c:	1a9b      	subs	r3, r3, r2
 802486e:	f898 2000 	ldrb.w	r2, [r8]
 8024872:	b2db      	uxtb	r3, r3
 8024874:	4342      	muls	r2, r0
 8024876:	f888 3003 	strb.w	r3, [r8, #3]
 802487a:	fb05 220c 	mla	r2, r5, ip, r2
 802487e:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8024880:	fb92 f2f3 	sdiv	r2, r2, r3
 8024884:	fb15 fe0e 	smulbb	lr, r5, lr
 8024888:	2aff      	cmp	r2, #255	@ 0xff
 802488a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 802488c:	bfd4      	ite	le
 802488e:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 8024892:	22ff      	movgt	r2, #255	@ 0xff
 8024894:	fb15 f101 	smulbb	r1, r5, r1
 8024898:	bfd8      	it	le
 802489a:	b2d2      	uxtble	r2, r2
 802489c:	f888 2000 	strb.w	r2, [r8]
 80248a0:	f898 2001 	ldrb.w	r2, [r8, #1]
 80248a4:	fb00 e202 	mla	r2, r0, r2, lr
 80248a8:	fb92 f2f3 	sdiv	r2, r2, r3
 80248ac:	2aff      	cmp	r2, #255	@ 0xff
 80248ae:	bfd6      	itet	le
 80248b0:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 80248b4:	22ff      	movgt	r2, #255	@ 0xff
 80248b6:	b2d2      	uxtble	r2, r2
 80248b8:	f888 2001 	strb.w	r2, [r8, #1]
 80248bc:	f898 2002 	ldrb.w	r2, [r8, #2]
 80248c0:	fb00 1202 	mla	r2, r0, r2, r1
 80248c4:	fb92 f2f3 	sdiv	r2, r2, r3
 80248c8:	2aff      	cmp	r2, #255	@ 0xff
 80248ca:	bfd6      	itet	le
 80248cc:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 80248d0:	22ff      	movgt	r2, #255	@ 0xff
 80248d2:	b2d2      	uxtble	r2, r2
 80248d4:	f888 2002 	strb.w	r2, [r8, #2]
 80248d8:	e732      	b.n	8024740 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 80248da:	f113 0901 	adds.w	r9, r3, #1
 80248de:	f53f af2f 	bmi.w	8024740 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 80248e2:	4548      	cmp	r0, r9
 80248e4:	f6ff af2c 	blt.w	8024740 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 80248e8:	f11c 0901 	adds.w	r9, ip, #1
 80248ec:	f53f af28 	bmi.w	8024740 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 80248f0:	45ce      	cmp	lr, r9
 80248f2:	f6ff af25 	blt.w	8024740 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 80248f6:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80248f8:	b200      	sxth	r0, r0
 80248fa:	9302      	str	r3, [sp, #8]
 80248fc:	fa0f f38e 	sxth.w	r3, lr
 8024900:	9000      	str	r0, [sp, #0]
 8024902:	9301      	str	r3, [sp, #4]
 8024904:	463b      	mov	r3, r7
 8024906:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8024908:	e9cd 1505 	strd	r1, r5, [sp, #20]
 802490c:	e9cd c203 	strd	ip, r2, [sp, #12]
 8024910:	4641      	mov	r1, r8
 8024912:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8024914:	f7ff fc30 	bl	8024178 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh>
 8024918:	e712      	b.n	8024740 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 802491a:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 802491c:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8024920:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8024922:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8024926:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 802492a:	1433      	asrs	r3, r6, #16
 802492c:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8024930:	fb0c e303 	mla	r3, ip, r3, lr
 8024934:	eb05 0e03 	add.w	lr, r5, r3
 8024938:	5ceb      	ldrb	r3, [r5, r3]
 802493a:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 802493e:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8024942:	2a00      	cmp	r2, #0
 8024944:	f000 8116 	beq.w	8024b74 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x740>
 8024948:	f89e 9001 	ldrb.w	r9, [lr, #1]
 802494c:	f857 5029 	ldr.w	r5, [r7, r9, lsl #2]
 8024950:	950f      	str	r5, [sp, #60]	@ 0x3c
 8024952:	0e2d      	lsrs	r5, r5, #24
 8024954:	9516      	str	r5, [sp, #88]	@ 0x58
 8024956:	b178      	cbz	r0, 8024978 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x544>
 8024958:	eb0e 090c 	add.w	r9, lr, ip
 802495c:	f81e c00c 	ldrb.w	ip, [lr, ip]
 8024960:	f857 502c 	ldr.w	r5, [r7, ip, lsl #2]
 8024964:	f899 c001 	ldrb.w	ip, [r9, #1]
 8024968:	950b      	str	r5, [sp, #44]	@ 0x2c
 802496a:	0e2d      	lsrs	r5, r5, #24
 802496c:	9513      	str	r5, [sp, #76]	@ 0x4c
 802496e:	f857 502c 	ldr.w	r5, [r7, ip, lsl #2]
 8024972:	9510      	str	r5, [sp, #64]	@ 0x40
 8024974:	0e2d      	lsrs	r5, r5, #24
 8024976:	9517      	str	r5, [sp, #92]	@ 0x5c
 8024978:	b292      	uxth	r2, r2
 802497a:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 802497c:	b280      	uxth	r0, r0
 802497e:	fb02 fa00 	mul.w	sl, r2, r0
 8024982:	0112      	lsls	r2, r2, #4
 8024984:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8024988:	eba2 090a 	sub.w	r9, r2, sl
 802498c:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 8024990:	fa1f fc80 	uxth.w	ip, r0
 8024994:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8024996:	fa1f f989 	uxth.w	r9, r9
 802499a:	eba2 020c 	sub.w	r2, r2, ip
 802499e:	fb09 f000 	mul.w	r0, r9, r0
 80249a2:	b292      	uxth	r2, r2
 80249a4:	fb02 0008 	mla	r0, r2, r8, r0
 80249a8:	fb0c 0005 	mla	r0, ip, r5, r0
 80249ac:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 80249ae:	fb0a 0005 	mla	r0, sl, r5, r0
 80249b2:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80249b6:	2800      	cmp	r0, #0
 80249b8:	f000 80d3 	beq.w	8024b62 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 80249bc:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 80249c0:	d01b      	beq.n	80249fa <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c6>
 80249c2:	f003 1bff 	and.w	fp, r3, #16711935	@ 0xff00ff
 80249c6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80249ca:	fb08 fb0b 	mul.w	fp, r8, fp
 80249ce:	fb08 f803 	mul.w	r8, r8, r3
 80249d2:	ea4f 231b 	mov.w	r3, fp, lsr #8
 80249d6:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80249da:	f508 7e80 	add.w	lr, r8, #256	@ 0x100
 80249de:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80249e2:	eb0e 2e18 	add.w	lr, lr, r8, lsr #8
 80249e6:	445b      	add	r3, fp
 80249e8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80249ec:	0a1b      	lsrs	r3, r3, #8
 80249ee:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 80249f2:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80249f6:	ea43 030e 	orr.w	r3, r3, lr
 80249fa:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 80249fc:	2dff      	cmp	r5, #255	@ 0xff
 80249fe:	d021      	beq.n	8024a44 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x610>
 8024a00:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8024a02:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 8024a06:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8024a08:	fb05 fe0e 	mul.w	lr, r5, lr
 8024a0c:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8024a0e:	ea4f 281e 	mov.w	r8, lr, lsr #8
 8024a12:	f405 4b7f 	and.w	fp, r5, #65280	@ 0xff00
 8024a16:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8024a18:	f10e 1e01 	add.w	lr, lr, #65537	@ 0x10001
 8024a1c:	f008 18ff 	and.w	r8, r8, #16711935	@ 0xff00ff
 8024a20:	fb05 fb0b 	mul.w	fp, r5, fp
 8024a24:	44f0      	add	r8, lr
 8024a26:	f50b 7e80 	add.w	lr, fp, #256	@ 0x100
 8024a2a:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8024a2e:	eb0e 2b1b 	add.w	fp, lr, fp, lsr #8
 8024a32:	f008 18ff 	and.w	r8, r8, #16711935	@ 0xff00ff
 8024a36:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8024a3a:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 8024a3e:	ea48 050b 	orr.w	r5, r8, fp
 8024a42:	950f      	str	r5, [sp, #60]	@ 0x3c
 8024a44:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8024a46:	2dff      	cmp	r5, #255	@ 0xff
 8024a48:	d021      	beq.n	8024a8e <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x65a>
 8024a4a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8024a4c:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 8024a50:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8024a52:	fb05 fe0e 	mul.w	lr, r5, lr
 8024a56:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8024a58:	ea4f 281e 	mov.w	r8, lr, lsr #8
 8024a5c:	f405 4b7f 	and.w	fp, r5, #65280	@ 0xff00
 8024a60:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8024a62:	f10e 1e01 	add.w	lr, lr, #65537	@ 0x10001
 8024a66:	f008 18ff 	and.w	r8, r8, #16711935	@ 0xff00ff
 8024a6a:	fb05 fb0b 	mul.w	fp, r5, fp
 8024a6e:	44f0      	add	r8, lr
 8024a70:	f50b 7e80 	add.w	lr, fp, #256	@ 0x100
 8024a74:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8024a78:	eb0e 2b1b 	add.w	fp, lr, fp, lsr #8
 8024a7c:	f008 18ff 	and.w	r8, r8, #16711935	@ 0xff00ff
 8024a80:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8024a84:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 8024a88:	ea48 050b 	orr.w	r5, r8, fp
 8024a8c:	950b      	str	r5, [sp, #44]	@ 0x2c
 8024a8e:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 8024a90:	2dff      	cmp	r5, #255	@ 0xff
 8024a92:	d021      	beq.n	8024ad8 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a4>
 8024a94:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8024a96:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 8024a9a:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 8024a9c:	fb05 fe0e 	mul.w	lr, r5, lr
 8024aa0:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8024aa2:	ea4f 281e 	mov.w	r8, lr, lsr #8
 8024aa6:	f405 4b7f 	and.w	fp, r5, #65280	@ 0xff00
 8024aaa:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 8024aac:	f10e 1e01 	add.w	lr, lr, #65537	@ 0x10001
 8024ab0:	f008 18ff 	and.w	r8, r8, #16711935	@ 0xff00ff
 8024ab4:	fb05 fb0b 	mul.w	fp, r5, fp
 8024ab8:	44f0      	add	r8, lr
 8024aba:	f50b 7e80 	add.w	lr, fp, #256	@ 0x100
 8024abe:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8024ac2:	eb0e 2b1b 	add.w	fp, lr, fp, lsr #8
 8024ac6:	f008 18ff 	and.w	r8, r8, #16711935	@ 0xff00ff
 8024aca:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8024ace:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 8024ad2:	ea48 050b 	orr.w	r5, r8, fp
 8024ad6:	9510      	str	r5, [sp, #64]	@ 0x40
 8024ad8:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8024ada:	f003 18ff 	and.w	r8, r3, #16711935	@ 0xff00ff
 8024ade:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8024ae2:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 8024ae6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8024ae8:	fb09 fe0e 	mul.w	lr, r9, lr
 8024aec:	fb02 ee08 	mla	lr, r2, r8, lr
 8024af0:	f005 18ff 	and.w	r8, r5, #16711935	@ 0xff00ff
 8024af4:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8024af6:	fb0c ee08 	mla	lr, ip, r8, lr
 8024afa:	f005 18ff 	and.w	r8, r5, #16711935	@ 0xff00ff
 8024afe:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8024b00:	fb0a ee08 	mla	lr, sl, r8, lr
 8024b04:	f405 487f 	and.w	r8, r5, #65280	@ 0xff00
 8024b08:	fb09 f908 	mul.w	r9, r9, r8
 8024b0c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024b10:	fb02 9303 	mla	r3, r2, r3, r9
 8024b14:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8024b16:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8024b1a:	f402 4b7f 	and.w	fp, r2, #65280	@ 0xff00
 8024b1e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8024b20:	fb0c 330b 	mla	r3, ip, fp, r3
 8024b24:	f402 487f 	and.w	r8, r2, #65280	@ 0xff00
 8024b28:	fb0a 3808 	mla	r8, sl, r8, r3
 8024b2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024b2e:	4358      	muls	r0, r3
 8024b30:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8024b34:	1c43      	adds	r3, r0, #1
 8024b36:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 8024b3a:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8024b3e:	ea4e 0e08 	orr.w	lr, lr, r8
 8024b42:	1200      	asrs	r0, r0, #8
 8024b44:	f3ce 4307 	ubfx	r3, lr, #16, #8
 8024b48:	f3ce 2207 	ubfx	r2, lr, #8, #8
 8024b4c:	28ff      	cmp	r0, #255	@ 0xff
 8024b4e:	fa5f fc83 	uxtb.w	ip, r3
 8024b52:	fa5f f882 	uxtb.w	r8, r2
 8024b56:	d118      	bne.n	8024b8a <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x756>
 8024b58:	f881 e000 	strb.w	lr, [r1]
 8024b5c:	704a      	strb	r2, [r1, #1]
 8024b5e:	708b      	strb	r3, [r1, #2]
 8024b60:	70c8      	strb	r0, [r1, #3]
 8024b62:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8024b64:	3104      	adds	r1, #4
 8024b66:	441c      	add	r4, r3
 8024b68:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8024b6a:	441e      	add	r6, r3
 8024b6c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8024b6e:	3b01      	subs	r3, #1
 8024b70:	9319      	str	r3, [sp, #100]	@ 0x64
 8024b72:	e614      	b.n	802479e <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 8024b74:	2800      	cmp	r0, #0
 8024b76:	f43f aeff 	beq.w	8024978 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x544>
 8024b7a:	f81e c00c 	ldrb.w	ip, [lr, ip]
 8024b7e:	f857 502c 	ldr.w	r5, [r7, ip, lsl #2]
 8024b82:	950b      	str	r5, [sp, #44]	@ 0x2c
 8024b84:	0e2d      	lsrs	r5, r5, #24
 8024b86:	9513      	str	r5, [sp, #76]	@ 0x4c
 8024b88:	e6f6      	b.n	8024978 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x544>
 8024b8a:	b2c3      	uxtb	r3, r0
 8024b8c:	2800      	cmp	r0, #0
 8024b8e:	d0e8      	beq.n	8024b62 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 8024b90:	78c8      	ldrb	r0, [r1, #3]
 8024b92:	fa5f fe8e 	uxtb.w	lr, lr
 8024b96:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8024b98:	fb03 f900 	mul.w	r9, r3, r0
 8024b9c:	4403      	add	r3, r0
 8024b9e:	f109 0201 	add.w	r2, r9, #1
 8024ba2:	eb02 2219 	add.w	r2, r2, r9, lsr #8
 8024ba6:	1212      	asrs	r2, r2, #8
 8024ba8:	1a9b      	subs	r3, r3, r2
 8024baa:	1a82      	subs	r2, r0, r2
 8024bac:	7808      	ldrb	r0, [r1, #0]
 8024bae:	b2db      	uxtb	r3, r3
 8024bb0:	4350      	muls	r0, r2
 8024bb2:	70cb      	strb	r3, [r1, #3]
 8024bb4:	fb05 0e0e 	mla	lr, r5, lr, r0
 8024bb8:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8024bba:	7848      	ldrb	r0, [r1, #1]
 8024bbc:	fb15 f808 	smulbb	r8, r5, r8
 8024bc0:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8024bc2:	fb9e fef3 	sdiv	lr, lr, r3
 8024bc6:	fb02 8000 	mla	r0, r2, r0, r8
 8024bca:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8024bce:	fb15 fc0c 	smulbb	ip, r5, ip
 8024bd2:	bfd4      	ite	le
 8024bd4:	ea2e 7eee 	bicle.w	lr, lr, lr, asr #31
 8024bd8:	f04f 0eff 	movgt.w	lr, #255	@ 0xff
 8024bdc:	fb90 f0f3 	sdiv	r0, r0, r3
 8024be0:	bfd8      	it	le
 8024be2:	fa5f fe8e 	uxtble.w	lr, lr
 8024be6:	28ff      	cmp	r0, #255	@ 0xff
 8024be8:	bfd4      	ite	le
 8024bea:	ea20 70e0 	bicle.w	r0, r0, r0, asr #31
 8024bee:	20ff      	movgt	r0, #255	@ 0xff
 8024bf0:	f881 e000 	strb.w	lr, [r1]
 8024bf4:	bfd8      	it	le
 8024bf6:	b2c0      	uxtble	r0, r0
 8024bf8:	7048      	strb	r0, [r1, #1]
 8024bfa:	7888      	ldrb	r0, [r1, #2]
 8024bfc:	fb02 c200 	mla	r2, r2, r0, ip
 8024c00:	fb92 f2f3 	sdiv	r2, r2, r3
 8024c04:	2aff      	cmp	r2, #255	@ 0xff
 8024c06:	bfd6      	itet	le
 8024c08:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 8024c0c:	22ff      	movgt	r2, #255	@ 0xff
 8024c0e:	b2d2      	uxtble	r2, r2
 8024c10:	708a      	strb	r2, [r1, #2]
 8024c12:	e7a6      	b.n	8024b62 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 8024c14:	b01d      	add	sp, #116	@ 0x74
 8024c16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024c1a <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh>:
 8024c1a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024c1e:	b087      	sub	sp, #28
 8024c20:	e9dd 8612 	ldrd	r8, r6, [sp, #72]	@ 0x48
 8024c24:	f89d 0058 	ldrb.w	r0, [sp, #88]	@ 0x58
 8024c28:	f9bd 5040 	ldrsh.w	r5, [sp, #64]	@ 0x40
 8024c2c:	2e00      	cmp	r6, #0
 8024c2e:	9002      	str	r0, [sp, #8]
 8024c30:	fb06 8005 	mla	r0, r6, r5, r8
 8024c34:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 8024c38:	f89d 4050 	ldrb.w	r4, [sp, #80]	@ 0x50
 8024c3c:	eb02 0740 	add.w	r7, r2, r0, lsl #1
 8024c40:	f89d e054 	ldrb.w	lr, [sp, #84]	@ 0x54
 8024c44:	9703      	str	r7, [sp, #12]
 8024c46:	eb03 0700 	add.w	r7, r3, r0
 8024c4a:	9704      	str	r7, [sp, #16]
 8024c4c:	f2c0 8133 	blt.w	8024eb6 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x29c>
 8024c50:	45b3      	cmp	fp, r6
 8024c52:	f340 8130 	ble.w	8024eb6 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x29c>
 8024c56:	f1b8 0f00 	cmp.w	r8, #0
 8024c5a:	f2c0 8128 	blt.w	8024eae <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x294>
 8024c5e:	4545      	cmp	r5, r8
 8024c60:	f340 8125 	ble.w	8024eae <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x294>
 8024c64:	f813 c000 	ldrb.w	ip, [r3, r0]
 8024c68:	f64f 071f 	movw	r7, #63519	@ 0xf81f
 8024c6c:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
 8024c70:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8024c74:	f423 6afc 	bic.w	sl, r3, #2016	@ 0x7e0
 8024c78:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8024c7c:	fb0c f303 	mul.w	r3, ip, r3
 8024c80:	fb0a f202 	mul.w	r2, sl, r2
 8024c84:	f103 0a20 	add.w	sl, r3, #32
 8024c88:	ea07 1052 	and.w	r0, r7, r2, lsr #5
 8024c8c:	f602 0201 	addw	r2, r2, #2049	@ 0x801
 8024c90:	eb0a 2313 	add.w	r3, sl, r3, lsr #8
 8024c94:	4402      	add	r2, r0
 8024c96:	0a1b      	lsrs	r3, r3, #8
 8024c98:	ea07 1752 	and.w	r7, r7, r2, lsr #5
 8024c9c:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8024ca0:	ea47 0a03 	orr.w	sl, r7, r3
 8024ca4:	f118 0301 	adds.w	r3, r8, #1
 8024ca8:	f100 810a 	bmi.w	8024ec0 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x2a6>
 8024cac:	429d      	cmp	r5, r3
 8024cae:	f340 8107 	ble.w	8024ec0 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x2a6>
 8024cb2:	2c00      	cmp	r4, #0
 8024cb4:	f000 8107 	beq.w	8024ec6 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x2ac>
 8024cb8:	9b04      	ldr	r3, [sp, #16]
 8024cba:	785a      	ldrb	r2, [r3, #1]
 8024cbc:	9b03      	ldr	r3, [sp, #12]
 8024cbe:	10d7      	asrs	r7, r2, #3
 8024cc0:	885b      	ldrh	r3, [r3, #2]
 8024cc2:	f423 60fc 	bic.w	r0, r3, #2016	@ 0x7e0
 8024cc6:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8024cca:	4347      	muls	r7, r0
 8024ccc:	f64f 001f 	movw	r0, #63519	@ 0xf81f
 8024cd0:	4353      	muls	r3, r2
 8024cd2:	ea00 1957 	and.w	r9, r0, r7, lsr #5
 8024cd6:	f607 0701 	addw	r7, r7, #2049	@ 0x801
 8024cda:	444f      	add	r7, r9
 8024cdc:	f103 0920 	add.w	r9, r3, #32
 8024ce0:	eb09 2313 	add.w	r3, r9, r3, lsr #8
 8024ce4:	ea00 1057 	and.w	r0, r0, r7, lsr #5
 8024ce8:	0a1b      	lsrs	r3, r3, #8
 8024cea:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8024cee:	4303      	orrs	r3, r0
 8024cf0:	9301      	str	r3, [sp, #4]
 8024cf2:	3601      	adds	r6, #1
 8024cf4:	f100 80ed 	bmi.w	8024ed2 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x2b8>
 8024cf8:	45b3      	cmp	fp, r6
 8024cfa:	f340 80ea 	ble.w	8024ed2 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x2b8>
 8024cfe:	f1be 0f00 	cmp.w	lr, #0
 8024d02:	f000 80eb 	beq.w	8024edc <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x2c2>
 8024d06:	f1b8 0f00 	cmp.w	r8, #0
 8024d0a:	f2c0 80df 	blt.w	8024ecc <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x2b2>
 8024d0e:	4545      	cmp	r5, r8
 8024d10:	f340 80dc 	ble.w	8024ecc <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x2b2>
 8024d14:	9b04      	ldr	r3, [sp, #16]
 8024d16:	5d5f      	ldrb	r7, [r3, r5]
 8024d18:	9b03      	ldr	r3, [sp, #12]
 8024d1a:	ea4f 09e7 	mov.w	r9, r7, asr #3
 8024d1e:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 8024d22:	f423 66fc 	bic.w	r6, r3, #2016	@ 0x7e0
 8024d26:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8024d2a:	fb09 f906 	mul.w	r9, r9, r6
 8024d2e:	f64f 061f 	movw	r6, #63519	@ 0xf81f
 8024d32:	437b      	muls	r3, r7
 8024d34:	ea06 1b59 	and.w	fp, r6, r9, lsr #5
 8024d38:	f609 0901 	addw	r9, r9, #2049	@ 0x801
 8024d3c:	44d9      	add	r9, fp
 8024d3e:	f103 0b20 	add.w	fp, r3, #32
 8024d42:	eb0b 2313 	add.w	r3, fp, r3, lsr #8
 8024d46:	ea06 1659 	and.w	r6, r6, r9, lsr #5
 8024d4a:	0a1b      	lsrs	r3, r3, #8
 8024d4c:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8024d50:	431e      	orrs	r6, r3
 8024d52:	f118 0801 	adds.w	r8, r8, #1
 8024d56:	f100 80c6 	bmi.w	8024ee6 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x2cc>
 8024d5a:	4545      	cmp	r5, r8
 8024d5c:	f340 80c3 	ble.w	8024ee6 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x2cc>
 8024d60:	2c00      	cmp	r4, #0
 8024d62:	f000 80c3 	beq.w	8024eec <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x2d2>
 8024d66:	3501      	adds	r5, #1
 8024d68:	9b04      	ldr	r3, [sp, #16]
 8024d6a:	9803      	ldr	r0, [sp, #12]
 8024d6c:	5d5b      	ldrb	r3, [r3, r5]
 8024d6e:	f830 8015 	ldrh.w	r8, [r0, r5, lsl #1]
 8024d72:	ea4f 09e3 	mov.w	r9, r3, asr #3
 8024d76:	f428 65fc 	bic.w	r5, r8, #2016	@ 0x7e0
 8024d7a:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 8024d7e:	fb09 f905 	mul.w	r9, r9, r5
 8024d82:	f64f 051f 	movw	r5, #63519	@ 0xf81f
 8024d86:	fb03 f808 	mul.w	r8, r3, r8
 8024d8a:	ea05 1b59 	and.w	fp, r5, r9, lsr #5
 8024d8e:	f609 0901 	addw	r9, r9, #2049	@ 0x801
 8024d92:	44d9      	add	r9, fp
 8024d94:	ea05 1559 	and.w	r5, r5, r9, lsr #5
 8024d98:	f108 0920 	add.w	r9, r8, #32
 8024d9c:	eb09 2818 	add.w	r8, r9, r8, lsr #8
 8024da0:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8024da4:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 8024da8:	ea45 0508 	orr.w	r5, r5, r8
 8024dac:	fa1f f984 	uxth.w	r9, r4
 8024db0:	fa1f f88e 	uxth.w	r8, lr
 8024db4:	fb09 f008 	mul.w	r0, r9, r8
 8024db8:	9003      	str	r0, [sp, #12]
 8024dba:	ea4f 1009 	mov.w	r0, r9, lsl #4
 8024dbe:	ea4f 490a 	mov.w	r9, sl, lsl #16
 8024dc2:	f42a 6afc 	bic.w	sl, sl, #2016	@ 0x7e0
 8024dc6:	9004      	str	r0, [sp, #16]
 8024dc8:	9803      	ldr	r0, [sp, #12]
 8024dca:	f009 69fc 	and.w	r9, r9, #132120576	@ 0x7e00000
 8024dce:	ebc0 1808 	rsb	r8, r0, r8, lsl #4
 8024dd2:	ea49 090a 	orr.w	r9, r9, sl
 8024dd6:	f1ce 0a10 	rsb	sl, lr, #16
 8024dda:	fa1f f088 	uxth.w	r0, r8
 8024dde:	fb14 f80e 	smulbb	r8, r4, lr
 8024de2:	ebaa 0a04 	sub.w	sl, sl, r4
 8024de6:	9005      	str	r0, [sp, #20]
 8024de8:	9801      	ldr	r0, [sp, #4]
 8024dea:	f3c8 08c7 	ubfx	r8, r8, #3, #8
 8024dee:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8024df2:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8024df6:	ebc8 0444 	rsb	r4, r8, r4, lsl #1
 8024dfa:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8024dfe:	eb08 0a4a 	add.w	sl, r8, sl, lsl #1
 8024e02:	ebc8 0e4e 	rsb	lr, r8, lr, lsl #1
 8024e06:	ea4b 0000 	orr.w	r0, fp, r0
 8024e0a:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8024e0e:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 8024e12:	4360      	muls	r0, r4
 8024e14:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8024e18:	9c04      	ldr	r4, [sp, #16]
 8024e1a:	ea4b 0505 	orr.w	r5, fp, r5
 8024e1e:	fb0a 0009 	mla	r0, sl, r9, r0
 8024e22:	f5c4 7480 	rsb	r4, r4, #256	@ 0x100
 8024e26:	fb08 0005 	mla	r0, r8, r5, r0
 8024e2a:	0435      	lsls	r5, r6, #16
 8024e2c:	f426 66fc 	bic.w	r6, r6, #2016	@ 0x7e0
 8024e30:	f005 65fc 	and.w	r5, r5, #132120576	@ 0x7e00000
 8024e34:	432e      	orrs	r6, r5
 8024e36:	9d05      	ldr	r5, [sp, #20]
 8024e38:	fb0e 0e06 	mla	lr, lr, r6, r0
 8024e3c:	1b64      	subs	r4, r4, r5
 8024e3e:	e9dd 6503 	ldrd	r6, r5, [sp, #12]
 8024e42:	b2a4      	uxth	r4, r4
 8024e44:	1bad      	subs	r5, r5, r6
 8024e46:	ea4f 505e 	mov.w	r0, lr, lsr #21
 8024e4a:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8024e4e:	b2ad      	uxth	r5, r5
 8024e50:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8024e54:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 8024e58:	436a      	muls	r2, r5
 8024e5a:	ea40 0e0e 	orr.w	lr, r0, lr
 8024e5e:	fb0c 2204 	mla	r2, ip, r4, r2
 8024e62:	9c05      	ldr	r4, [sp, #20]
 8024e64:	fa1f f08e 	uxth.w	r0, lr
 8024e68:	fb04 2707 	mla	r7, r4, r7, r2
 8024e6c:	9a02      	ldr	r2, [sp, #8]
 8024e6e:	1205      	asrs	r5, r0, #8
 8024e70:	fb06 7303 	mla	r3, r6, r3, r7
 8024e74:	10c7      	asrs	r7, r0, #3
 8024e76:	00c0      	lsls	r0, r0, #3
 8024e78:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8024e7c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024e80:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8024e84:	b2c0      	uxtb	r0, r0
 8024e86:	4353      	muls	r3, r2
 8024e88:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 8024e8c:	ea47 1797 	orr.w	r7, r7, r7, lsr #6
 8024e90:	1c5a      	adds	r2, r3, #1
 8024e92:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 8024e96:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8024e9a:	121b      	asrs	r3, r3, #8
 8024e9c:	2bff      	cmp	r3, #255	@ 0xff
 8024e9e:	d128      	bne.n	8024ef2 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x2d8>
 8024ea0:	7008      	strb	r0, [r1, #0]
 8024ea2:	704f      	strb	r7, [r1, #1]
 8024ea4:	708d      	strb	r5, [r1, #2]
 8024ea6:	70cb      	strb	r3, [r1, #3]
 8024ea8:	b007      	add	sp, #28
 8024eaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024eae:	f04f 0c00 	mov.w	ip, #0
 8024eb2:	46e2      	mov	sl, ip
 8024eb4:	e6f6      	b.n	8024ca4 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x8a>
 8024eb6:	2200      	movs	r2, #0
 8024eb8:	4694      	mov	ip, r2
 8024eba:	9201      	str	r2, [sp, #4]
 8024ebc:	4692      	mov	sl, r2
 8024ebe:	e718      	b.n	8024cf2 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0xd8>
 8024ec0:	2200      	movs	r2, #0
 8024ec2:	9201      	str	r2, [sp, #4]
 8024ec4:	e715      	b.n	8024cf2 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0xd8>
 8024ec6:	4622      	mov	r2, r4
 8024ec8:	9401      	str	r4, [sp, #4]
 8024eca:	e712      	b.n	8024cf2 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0xd8>
 8024ecc:	2700      	movs	r7, #0
 8024ece:	463e      	mov	r6, r7
 8024ed0:	e73f      	b.n	8024d52 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x138>
 8024ed2:	2300      	movs	r3, #0
 8024ed4:	461f      	mov	r7, r3
 8024ed6:	461d      	mov	r5, r3
 8024ed8:	461e      	mov	r6, r3
 8024eda:	e767      	b.n	8024dac <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x192>
 8024edc:	4673      	mov	r3, lr
 8024ede:	4677      	mov	r7, lr
 8024ee0:	4675      	mov	r5, lr
 8024ee2:	4676      	mov	r6, lr
 8024ee4:	e762      	b.n	8024dac <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x192>
 8024ee6:	2300      	movs	r3, #0
 8024ee8:	461d      	mov	r5, r3
 8024eea:	e75f      	b.n	8024dac <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x192>
 8024eec:	4623      	mov	r3, r4
 8024eee:	4625      	mov	r5, r4
 8024ef0:	e75c      	b.n	8024dac <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x192>
 8024ef2:	b2dc      	uxtb	r4, r3
 8024ef4:	2b00      	cmp	r3, #0
 8024ef6:	d0d7      	beq.n	8024ea8 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x28e>
 8024ef8:	f891 c003 	ldrb.w	ip, [r1, #3]
 8024efc:	fb04 f20c 	mul.w	r2, r4, ip
 8024f00:	eb0c 0304 	add.w	r3, ip, r4
 8024f04:	780c      	ldrb	r4, [r1, #0]
 8024f06:	1c56      	adds	r6, r2, #1
 8024f08:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 8024f0c:	1232      	asrs	r2, r6, #8
 8024f0e:	ebac 0602 	sub.w	r6, ip, r2
 8024f12:	1a9b      	subs	r3, r3, r2
 8024f14:	9a02      	ldr	r2, [sp, #8]
 8024f16:	b2db      	uxtb	r3, r3
 8024f18:	fb10 f002 	smulbb	r0, r0, r2
 8024f1c:	9a02      	ldr	r2, [sp, #8]
 8024f1e:	fb06 0404 	mla	r4, r6, r4, r0
 8024f22:	fb12 f707 	smulbb	r7, r2, r7
 8024f26:	7848      	ldrb	r0, [r1, #1]
 8024f28:	788a      	ldrb	r2, [r1, #2]
 8024f2a:	fb06 7000 	mla	r0, r6, r0, r7
 8024f2e:	fb94 f4f3 	sdiv	r4, r4, r3
 8024f32:	fb90 f0f3 	sdiv	r0, r0, r3
 8024f36:	2cff      	cmp	r4, #255	@ 0xff
 8024f38:	bfd6      	itet	le
 8024f3a:	ea24 74e4 	bicle.w	r4, r4, r4, asr #31
 8024f3e:	24ff      	movgt	r4, #255	@ 0xff
 8024f40:	b2e4      	uxtble	r4, r4
 8024f42:	28ff      	cmp	r0, #255	@ 0xff
 8024f44:	bfd4      	ite	le
 8024f46:	ea20 70e0 	bicle.w	r0, r0, r0, asr #31
 8024f4a:	20ff      	movgt	r0, #255	@ 0xff
 8024f4c:	700c      	strb	r4, [r1, #0]
 8024f4e:	bfd8      	it	le
 8024f50:	b2c0      	uxtble	r0, r0
 8024f52:	7048      	strb	r0, [r1, #1]
 8024f54:	9802      	ldr	r0, [sp, #8]
 8024f56:	fb10 f505 	smulbb	r5, r0, r5
 8024f5a:	fb06 5202 	mla	r2, r6, r2, r5
 8024f5e:	fb92 f2f3 	sdiv	r2, r2, r3
 8024f62:	2aff      	cmp	r2, #255	@ 0xff
 8024f64:	bfd6      	itet	le
 8024f66:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 8024f6a:	22ff      	movgt	r2, #255	@ 0xff
 8024f6c:	b2d2      	uxtble	r2, r2
 8024f6e:	708a      	strb	r2, [r1, #2]
 8024f70:	e799      	b.n	8024ea6 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x28c>

08024f72 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024f72:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024f76:	b097      	sub	sp, #92	@ 0x5c
 8024f78:	9214      	str	r2, [sp, #80]	@ 0x50
 8024f7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8024f7c:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8024f7e:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 8024f82:	9015      	str	r0, [sp, #84]	@ 0x54
 8024f84:	9112      	str	r1, [sp, #72]	@ 0x48
 8024f86:	6850      	ldr	r0, [r2, #4]
 8024f88:	930a      	str	r3, [sp, #40]	@ 0x28
 8024f8a:	6812      	ldr	r2, [r2, #0]
 8024f8c:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	@ 0x98
 8024f90:	fb00 1303 	mla	r3, r0, r3, r1
 8024f94:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8024f98:	930b      	str	r3, [sp, #44]	@ 0x2c
 8024f9a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8024f9c:	681b      	ldr	r3, [r3, #0]
 8024f9e:	930c      	str	r3, [sp, #48]	@ 0x30
 8024fa0:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8024fa2:	685b      	ldr	r3, [r3, #4]
 8024fa4:	930d      	str	r3, [sp, #52]	@ 0x34
 8024fa6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8024fa8:	2b00      	cmp	r3, #0
 8024faa:	dc03      	bgt.n	8024fb4 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8024fac:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8024fae:	2b00      	cmp	r3, #0
 8024fb0:	f340 8407 	ble.w	80257c2 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x850>
 8024fb4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8024fb6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024fba:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024fbe:	1e48      	subs	r0, r1, #1
 8024fc0:	1e55      	subs	r5, r2, #1
 8024fc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024fc4:	2b00      	cmp	r3, #0
 8024fc6:	f340 81b7 	ble.w	8025338 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 8024fca:	9e21      	ldr	r6, [sp, #132]	@ 0x84
 8024fcc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8024fce:	1436      	asrs	r6, r6, #16
 8024fd0:	ea4f 4323 	mov.w	r3, r3, asr #16
 8024fd4:	d406      	bmi.n	8024fe4 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8024fd6:	4286      	cmp	r6, r0
 8024fd8:	da04      	bge.n	8024fe4 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8024fda:	2b00      	cmp	r3, #0
 8024fdc:	db02      	blt.n	8024fe4 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8024fde:	42ab      	cmp	r3, r5
 8024fe0:	f2c0 81ab 	blt.w	802533a <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c8>
 8024fe4:	3601      	adds	r6, #1
 8024fe6:	f100 8198 	bmi.w	802531a <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 8024fea:	42b1      	cmp	r1, r6
 8024fec:	f2c0 8195 	blt.w	802531a <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 8024ff0:	3301      	adds	r3, #1
 8024ff2:	f100 8192 	bmi.w	802531a <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 8024ff6:	429a      	cmp	r2, r3
 8024ff8:	f2c0 818f 	blt.w	802531a <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 8024ffc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024ffe:	f64f 071f 	movw	r7, #63519	@ 0xf81f
 8025002:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8025004:	9313      	str	r3, [sp, #76]	@ 0x4c
 8025006:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025008:	2b00      	cmp	r3, #0
 802500a:	f340 81b7 	ble.w	802537c <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 802500e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8025010:	9e21      	ldr	r6, [sp, #132]	@ 0x84
 8025012:	1418      	asrs	r0, r3, #16
 8025014:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8025016:	1436      	asrs	r6, r6, #16
 8025018:	f3c3 3103 	ubfx	r1, r3, #12, #4
 802501c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802501e:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8025022:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8025024:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8025028:	f100 820f 	bmi.w	802544a <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 802502c:	f102 3eff 	add.w	lr, r2, #4294967295
 8025030:	4576      	cmp	r6, lr
 8025032:	f280 820a 	bge.w	802544a <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8025036:	2800      	cmp	r0, #0
 8025038:	f2c0 8207 	blt.w	802544a <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 802503c:	f103 3eff 	add.w	lr, r3, #4294967295
 8025040:	4570      	cmp	r0, lr
 8025042:	f280 8202 	bge.w	802544a <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8025046:	b212      	sxth	r2, r2
 8025048:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802504a:	fa1f fe81 	uxth.w	lr, r1
 802504e:	fb00 6002 	mla	r0, r0, r2, r6
 8025052:	ea4f 160e 	mov.w	r6, lr, lsl #4
 8025056:	eb03 0a00 	add.w	sl, r3, r0
 802505a:	f813 9000 	ldrb.w	r9, [r3, r0]
 802505e:	f5c6 7380 	rsb	r3, r6, #256	@ 0x100
 8025062:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8025066:	b29b      	uxth	r3, r3
 8025068:	f1bc 0f00 	cmp.w	ip, #0
 802506c:	f000 81cc 	beq.w	8025408 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 8025070:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8025074:	eb0a 0b02 	add.w	fp, sl, r2
 8025078:	fa1f fa8c 	uxth.w	sl, ip
 802507c:	940e      	str	r4, [sp, #56]	@ 0x38
 802507e:	fb0a fe0e 	mul.w	lr, sl, lr
 8025082:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8025086:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 802508a:	eba6 060e 	sub.w	r6, r6, lr
 802508e:	940f      	str	r4, [sp, #60]	@ 0x3c
 8025090:	fa1f fa8a 	uxth.w	sl, sl
 8025094:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8025096:	b2b6      	uxth	r6, r6
 8025098:	eba3 030a 	sub.w	r3, r3, sl
 802509c:	fb08 f606 	mul.w	r6, r8, r6
 80250a0:	b29b      	uxth	r3, r3
 80250a2:	fb09 6303 	mla	r3, r9, r3, r6
 80250a6:	fb0a 3304 	mla	r3, sl, r4, r3
 80250aa:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80250ac:	fb0e 3304 	mla	r3, lr, r4, r3
 80250b0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80250b4:	2b00      	cmp	r3, #0
 80250b6:	f000 8123 	beq.w	8025300 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 80250ba:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80250bc:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 80250c0:	eb04 0640 	add.w	r6, r4, r0, lsl #1
 80250c4:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 80250c8:	f000 81a3 	beq.w	8025412 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a0>
 80250cc:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
 80250d0:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 80250d4:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 80250d8:	fb0a fe0e 	mul.w	lr, sl, lr
 80250dc:	fb09 f000 	mul.w	r0, r9, r0
 80250e0:	ea07 195e 	and.w	r9, r7, lr, lsr #5
 80250e4:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 80250e8:	f100 0b20 	add.w	fp, r0, #32
 80250ec:	44ce      	add	lr, r9
 80250ee:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 80250f2:	ea07 1e5e 	and.w	lr, r7, lr, lsr #5
 80250f6:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80250fa:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 80250fe:	ea4e 0909 	orr.w	r9, lr, r9
 8025102:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8025106:	8870      	ldrh	r0, [r6, #2]
 8025108:	d019      	beq.n	802513e <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1cc>
 802510a:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
 802510e:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8025112:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8025116:	fb0a fe0e 	mul.w	lr, sl, lr
 802511a:	fb08 f800 	mul.w	r8, r8, r0
 802511e:	ea07 105e 	and.w	r0, r7, lr, lsr #5
 8025122:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 8025126:	f108 0b20 	add.w	fp, r8, #32
 802512a:	4486      	add	lr, r0
 802512c:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8025130:	ea07 1e5e 	and.w	lr, r7, lr, lsr #5
 8025134:	0a00      	lsrs	r0, r0, #8
 8025136:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802513a:	ea4e 0000 	orr.w	r0, lr, r0
 802513e:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8025142:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 8025146:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 802514a:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 802514e:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
 8025152:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8025156:	ea4e 0909 	orr.w	r9, lr, r9
 802515a:	ea4a 0000 	orr.w	r0, sl, r0
 802515e:	f1bc 0f00 	cmp.w	ip, #0
 8025162:	f000 8158 	beq.w	8025416 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>
 8025166:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 802516a:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 802516c:	3a01      	subs	r2, #1
 802516e:	2cff      	cmp	r4, #255	@ 0xff
 8025170:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8025174:	f102 0202 	add.w	r2, r2, #2
 8025178:	eb06 0e02 	add.w	lr, r6, r2
 802517c:	5ab2      	ldrh	r2, [r6, r2]
 802517e:	d018      	beq.n	80251b2 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8025180:	f422 66fc 	bic.w	r6, r2, #2016	@ 0x7e0
 8025184:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8025188:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802518c:	fb04 fa02 	mul.w	sl, r4, r2
 8025190:	fb08 f806 	mul.w	r8, r8, r6
 8025194:	f10a 0620 	add.w	r6, sl, #32
 8025198:	ea07 1258 	and.w	r2, r7, r8, lsr #5
 802519c:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 80251a0:	eb06 261a 	add.w	r6, r6, sl, lsr #8
 80251a4:	4442      	add	r2, r8
 80251a6:	0a36      	lsrs	r6, r6, #8
 80251a8:	ea07 1252 	and.w	r2, r7, r2, lsr #5
 80251ac:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 80251b0:	4332      	orrs	r2, r6
 80251b2:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80251b4:	f8be 6002 	ldrh.w	r6, [lr, #2]
 80251b8:	2cff      	cmp	r4, #255	@ 0xff
 80251ba:	d01a      	beq.n	80251f2 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x280>
 80251bc:	f426 6efc 	bic.w	lr, r6, #2016	@ 0x7e0
 80251c0:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 80251c4:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80251c8:	fb04 fa06 	mul.w	sl, r4, r6
 80251cc:	fb08 f80e 	mul.w	r8, r8, lr
 80251d0:	f10a 0e20 	add.w	lr, sl, #32
 80251d4:	ea07 1658 	and.w	r6, r7, r8, lsr #5
 80251d8:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 80251dc:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 80251e0:	4446      	add	r6, r8
 80251e2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80251e6:	ea07 1656 	and.w	r6, r7, r6, lsr #5
 80251ea:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
 80251ee:	ea46 060e 	orr.w	r6, r6, lr
 80251f2:	fb1c fe01 	smulbb	lr, ip, r1
 80251f6:	f1cc 0810 	rsb	r8, ip, #16
 80251fa:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 80251fe:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8025202:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8025206:	eba8 0801 	sub.w	r8, r8, r1
 802520a:	ea4f 4b06 	mov.w	fp, r6, lsl #16
 802520e:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8025212:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8025216:	f426 66fc 	bic.w	r6, r6, #2016	@ 0x7e0
 802521a:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 802521e:	ea4a 0202 	orr.w	r2, sl, r2
 8025222:	4341      	muls	r1, r0
 8025224:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8025228:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 802522c:	fb09 1108 	mla	r1, r9, r8, r1
 8025230:	ea4b 0606 	orr.w	r6, fp, r6
 8025234:	fb0c 1102 	mla	r1, ip, r2, r1
 8025238:	fb0e 1e06 	mla	lr, lr, r6, r1
 802523c:	ea4f 505e 	mov.w	r0, lr, lsr #21
 8025240:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8025244:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8025248:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 802524c:	ea40 0e0e 	orr.w	lr, r0, lr
 8025250:	fa1f f08e 	uxth.w	r0, lr
 8025254:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8025256:	1206      	asrs	r6, r0, #8
 8025258:	10c1      	asrs	r1, r0, #3
 802525a:	4353      	muls	r3, r2
 802525c:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 8025260:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8025264:	1c5a      	adds	r2, r3, #1
 8025266:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 802526a:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 802526e:	eb02 2323 	add.w	r3, r2, r3, asr #8
 8025272:	00c2      	lsls	r2, r0, #3
 8025274:	121b      	asrs	r3, r3, #8
 8025276:	b2d2      	uxtb	r2, r2
 8025278:	2bff      	cmp	r3, #255	@ 0xff
 802527a:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 802527e:	f000 80de 	beq.w	802543e <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4cc>
 8025282:	b2d8      	uxtb	r0, r3
 8025284:	2b00      	cmp	r3, #0
 8025286:	d03b      	beq.n	8025300 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 8025288:	f895 c003 	ldrb.w	ip, [r5, #3]
 802528c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 802528e:	fb00 fe0c 	mul.w	lr, r0, ip
 8025292:	4460      	add	r0, ip
 8025294:	fb12 f204 	smulbb	r2, r2, r4
 8025298:	f10e 0301 	add.w	r3, lr, #1
 802529c:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 80252a0:	121b      	asrs	r3, r3, #8
 80252a2:	ebac 0c03 	sub.w	ip, ip, r3
 80252a6:	1ac0      	subs	r0, r0, r3
 80252a8:	782b      	ldrb	r3, [r5, #0]
 80252aa:	b2c0      	uxtb	r0, r0
 80252ac:	fb0c 2303 	mla	r3, ip, r3, r2
 80252b0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80252b2:	70e8      	strb	r0, [r5, #3]
 80252b4:	fb12 f101 	smulbb	r1, r2, r1
 80252b8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80252ba:	fb93 f3f0 	sdiv	r3, r3, r0
 80252be:	fb12 f606 	smulbb	r6, r2, r6
 80252c2:	2bff      	cmp	r3, #255	@ 0xff
 80252c4:	bfd6      	itet	le
 80252c6:	ea23 73e3 	bicle.w	r3, r3, r3, asr #31
 80252ca:	23ff      	movgt	r3, #255	@ 0xff
 80252cc:	b2db      	uxtble	r3, r3
 80252ce:	702b      	strb	r3, [r5, #0]
 80252d0:	786b      	ldrb	r3, [r5, #1]
 80252d2:	fb0c 1303 	mla	r3, ip, r3, r1
 80252d6:	fb93 f3f0 	sdiv	r3, r3, r0
 80252da:	2bff      	cmp	r3, #255	@ 0xff
 80252dc:	bfd6      	itet	le
 80252de:	ea23 73e3 	bicle.w	r3, r3, r3, asr #31
 80252e2:	23ff      	movgt	r3, #255	@ 0xff
 80252e4:	b2db      	uxtble	r3, r3
 80252e6:	706b      	strb	r3, [r5, #1]
 80252e8:	78ab      	ldrb	r3, [r5, #2]
 80252ea:	fb0c 6303 	mla	r3, ip, r3, r6
 80252ee:	fb93 f3f0 	sdiv	r3, r3, r0
 80252f2:	2bff      	cmp	r3, #255	@ 0xff
 80252f4:	bfd6      	itet	le
 80252f6:	ea23 73e3 	bicle.w	r3, r3, r3, asr #31
 80252fa:	23ff      	movgt	r3, #255	@ 0xff
 80252fc:	b2db      	uxtble	r3, r3
 80252fe:	70ab      	strb	r3, [r5, #2]
 8025300:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8025302:	3504      	adds	r5, #4
 8025304:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8025306:	4413      	add	r3, r2
 8025308:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 802530a:	9321      	str	r3, [sp, #132]	@ 0x84
 802530c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802530e:	441a      	add	r2, r3
 8025310:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025312:	3b01      	subs	r3, #1
 8025314:	9222      	str	r2, [sp, #136]	@ 0x88
 8025316:	9313      	str	r3, [sp, #76]	@ 0x4c
 8025318:	e675      	b.n	8025006 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802531a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 802531c:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 802531e:	9c22      	ldr	r4, [sp, #136]	@ 0x88
 8025320:	4433      	add	r3, r6
 8025322:	9321      	str	r3, [sp, #132]	@ 0x84
 8025324:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8025326:	441c      	add	r4, r3
 8025328:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802532a:	3b01      	subs	r3, #1
 802532c:	9422      	str	r4, [sp, #136]	@ 0x88
 802532e:	9309      	str	r3, [sp, #36]	@ 0x24
 8025330:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025332:	3304      	adds	r3, #4
 8025334:	930b      	str	r3, [sp, #44]	@ 0x2c
 8025336:	e644      	b.n	8024fc2 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8025338:	d027      	beq.n	802538a <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x418>
 802533a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802533c:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 802533e:	3b01      	subs	r3, #1
 8025340:	9d21      	ldr	r5, [sp, #132]	@ 0x84
 8025342:	fb00 5003 	mla	r0, r0, r3, r5
 8025346:	1400      	asrs	r0, r0, #16
 8025348:	f53f ae58 	bmi.w	8024ffc <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802534c:	3901      	subs	r1, #1
 802534e:	4288      	cmp	r0, r1
 8025350:	f6bf ae54 	bge.w	8024ffc <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8025354:	9924      	ldr	r1, [sp, #144]	@ 0x90
 8025356:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8025358:	fb01 0303 	mla	r3, r1, r3, r0
 802535c:	141b      	asrs	r3, r3, #16
 802535e:	f53f ae4d 	bmi.w	8024ffc <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8025362:	3a01      	subs	r2, #1
 8025364:	4293      	cmp	r3, r2
 8025366:	f6bf ae49 	bge.w	8024ffc <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802536a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802536c:	f64f 071f 	movw	r7, #63519	@ 0xf81f
 8025370:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8025372:	9313      	str	r3, [sp, #76]	@ 0x4c
 8025374:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025376:	2b00      	cmp	r3, #0
 8025378:	f300 8086 	bgt.w	8025488 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x516>
 802537c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802537e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8025382:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025384:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8025388:	930b      	str	r3, [sp, #44]	@ 0x2c
 802538a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802538c:	2b00      	cmp	r3, #0
 802538e:	f340 8218 	ble.w	80257c2 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x850>
 8025392:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8025396:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8025398:	ee30 0a04 	vadd.f32	s0, s0, s8
 802539c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80253a0:	eef0 6a62 	vmov.f32	s13, s5
 80253a4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80253a8:	ee31 1a05 	vadd.f32	s2, s2, s10
 80253ac:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80253b0:	edcd 6a21 	vstr	s13, [sp, #132]	@ 0x84
 80253b4:	eef0 6a43 	vmov.f32	s13, s6
 80253b8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80253bc:	edcd 6a22 	vstr	s13, [sp, #136]	@ 0x88
 80253c0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80253c4:	ee61 7a27 	vmul.f32	s15, s2, s15
 80253c8:	ee77 2a62 	vsub.f32	s5, s14, s5
 80253cc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80253d0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80253d4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80253d8:	ee12 2a90 	vmov	r2, s5
 80253dc:	eef0 2a47 	vmov.f32	s5, s14
 80253e0:	fb92 f3f3 	sdiv	r3, r2, r3
 80253e4:	ee13 2a10 	vmov	r2, s6
 80253e8:	9323      	str	r3, [sp, #140]	@ 0x8c
 80253ea:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80253ec:	eeb0 3a67 	vmov.f32	s6, s15
 80253f0:	fb92 f3f3 	sdiv	r3, r2, r3
 80253f4:	9324      	str	r3, [sp, #144]	@ 0x90
 80253f6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80253f8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80253fa:	3b01      	subs	r3, #1
 80253fc:	9312      	str	r3, [sp, #72]	@ 0x48
 80253fe:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8025400:	bf08      	it	eq
 8025402:	4613      	moveq	r3, r2
 8025404:	9309      	str	r3, [sp, #36]	@ 0x24
 8025406:	e5ce      	b.n	8024fa6 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8025408:	fb08 f606 	mul.w	r6, r8, r6
 802540c:	fb09 6303 	mla	r3, r9, r3, r6
 8025410:	e64e      	b.n	80250b0 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8025412:	4681      	mov	r9, r0
 8025414:	e675      	b.n	8025102 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 8025416:	f1c1 0210 	rsb	r2, r1, #16
 802541a:	4341      	muls	r1, r0
 802541c:	fb09 1902 	mla	r9, r9, r2, r1
 8025420:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8025424:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8025428:	ea4f 1959 	mov.w	r9, r9, lsr #5
 802542c:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8025430:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 8025434:	ea40 0909 	orr.w	r9, r0, r9
 8025438:	fa1f f089 	uxth.w	r0, r9
 802543c:	e70a      	b.n	8025254 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
 802543e:	0209      	lsls	r1, r1, #8
 8025440:	ea41 4606 	orr.w	r6, r1, r6, lsl #16
 8025444:	4332      	orrs	r2, r6
 8025446:	602a      	str	r2, [r5, #0]
 8025448:	e75a      	b.n	8025300 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 802544a:	f116 0e01 	adds.w	lr, r6, #1
 802544e:	f53f af57 	bmi.w	8025300 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 8025452:	4572      	cmp	r2, lr
 8025454:	f6ff af54 	blt.w	8025300 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 8025458:	f110 0e01 	adds.w	lr, r0, #1
 802545c:	f53f af50 	bmi.w	8025300 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 8025460:	4573      	cmp	r3, lr
 8025462:	f6ff af4d 	blt.w	8025300 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 8025466:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8025468:	b21b      	sxth	r3, r3
 802546a:	b212      	sxth	r2, r2
 802546c:	9602      	str	r6, [sp, #8]
 802546e:	9301      	str	r3, [sp, #4]
 8025470:	9200      	str	r2, [sp, #0]
 8025472:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8025476:	e9cd c405 	strd	ip, r4, [sp, #20]
 802547a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 802547e:	4629      	mov	r1, r5
 8025480:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8025482:	f7ff fbca 	bl	8024c1a <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh>
 8025486:	e73b      	b.n	8025300 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 8025488:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 802548a:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802548e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8025490:	f3c3 3603 	ubfx	r6, r3, #12, #4
 8025494:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8025496:	fa1f fe82 	uxth.w	lr, r2
 802549a:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 802549e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80254a0:	ea4f 150e 	mov.w	r5, lr, lsl #4
 80254a4:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80254a8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80254aa:	141b      	asrs	r3, r3, #16
 80254ac:	fb00 3c0c 	mla	ip, r0, ip, r3
 80254b0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80254b2:	eb03 0a0c 	add.w	sl, r3, ip
 80254b6:	f813 900c 	ldrb.w	r9, [r3, ip]
 80254ba:	f5c5 7380 	rsb	r3, r5, #256	@ 0x100
 80254be:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80254c2:	b29b      	uxth	r3, r3
 80254c4:	2e00      	cmp	r6, #0
 80254c6:	f000 815c 	beq.w	8025782 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x810>
 80254ca:	f81a 4000 	ldrb.w	r4, [sl, r0]
 80254ce:	eb0a 0b00 	add.w	fp, sl, r0
 80254d2:	fa1f fa86 	uxth.w	sl, r6
 80254d6:	9410      	str	r4, [sp, #64]	@ 0x40
 80254d8:	fb0a fe0e 	mul.w	lr, sl, lr
 80254dc:	f89b 4001 	ldrb.w	r4, [fp, #1]
 80254e0:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 80254e4:	eba5 050e 	sub.w	r5, r5, lr
 80254e8:	9411      	str	r4, [sp, #68]	@ 0x44
 80254ea:	fa1f fa8a 	uxth.w	sl, sl
 80254ee:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80254f0:	b2ad      	uxth	r5, r5
 80254f2:	eba3 030a 	sub.w	r3, r3, sl
 80254f6:	fb08 f505 	mul.w	r5, r8, r5
 80254fa:	b29b      	uxth	r3, r3
 80254fc:	fb09 5303 	mla	r3, r9, r3, r5
 8025500:	fb0a 3304 	mla	r3, sl, r4, r3
 8025504:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8025506:	fb0e 3304 	mla	r3, lr, r4, r3
 802550a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802550e:	2b00      	cmp	r3, #0
 8025510:	f000 812a 	beq.w	8025768 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7f6>
 8025514:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8025516:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 802551a:	eb04 054c 	add.w	r5, r4, ip, lsl #1
 802551e:	f834 c01c 	ldrh.w	ip, [r4, ip, lsl #1]
 8025522:	f000 8133 	beq.w	802578c <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x81a>
 8025526:	f42c 6efc 	bic.w	lr, ip, #2016	@ 0x7e0
 802552a:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 802552e:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 8025532:	fb0a fe0e 	mul.w	lr, sl, lr
 8025536:	fb09 fc0c 	mul.w	ip, r9, ip
 802553a:	ea07 195e 	and.w	r9, r7, lr, lsr #5
 802553e:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 8025542:	f10c 0b20 	add.w	fp, ip, #32
 8025546:	44ce      	add	lr, r9
 8025548:	eb0b 291c 	add.w	r9, fp, ip, lsr #8
 802554c:	ea07 1e5e 	and.w	lr, r7, lr, lsr #5
 8025550:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025554:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8025558:	ea4e 0909 	orr.w	r9, lr, r9
 802555c:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8025560:	f8b5 c002 	ldrh.w	ip, [r5, #2]
 8025564:	d01a      	beq.n	802559c <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62a>
 8025566:	f42c 6efc 	bic.w	lr, ip, #2016	@ 0x7e0
 802556a:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 802556e:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 8025572:	fb0a fe0e 	mul.w	lr, sl, lr
 8025576:	fb08 f80c 	mul.w	r8, r8, ip
 802557a:	ea07 1c5e 	and.w	ip, r7, lr, lsr #5
 802557e:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 8025582:	f108 0b20 	add.w	fp, r8, #32
 8025586:	44e6      	add	lr, ip
 8025588:	eb0b 2c18 	add.w	ip, fp, r8, lsr #8
 802558c:	ea07 1e5e 	and.w	lr, r7, lr, lsr #5
 8025590:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025594:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 8025598:	ea4e 0c0c 	orr.w	ip, lr, ip
 802559c:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 80255a0:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 80255a4:	ea4f 4a0c 	mov.w	sl, ip, lsl #16
 80255a8:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 80255ac:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
 80255b0:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 80255b4:	ea4e 0909 	orr.w	r9, lr, r9
 80255b8:	ea4a 0c0c 	orr.w	ip, sl, ip
 80255bc:	2e00      	cmp	r6, #0
 80255be:	f000 80e7 	beq.w	8025790 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x81e>
 80255c2:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 80255c6:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80255c8:	3801      	subs	r0, #1
 80255ca:	2cff      	cmp	r4, #255	@ 0xff
 80255cc:	ea4f 0040 	mov.w	r0, r0, lsl #1
 80255d0:	f100 0002 	add.w	r0, r0, #2
 80255d4:	eb05 0e00 	add.w	lr, r5, r0
 80255d8:	5a28      	ldrh	r0, [r5, r0]
 80255da:	d018      	beq.n	802560e <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x69c>
 80255dc:	f420 65fc 	bic.w	r5, r0, #2016	@ 0x7e0
 80255e0:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 80255e4:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80255e8:	fb04 fa00 	mul.w	sl, r4, r0
 80255ec:	fb08 f805 	mul.w	r8, r8, r5
 80255f0:	f10a 0520 	add.w	r5, sl, #32
 80255f4:	ea07 1058 	and.w	r0, r7, r8, lsr #5
 80255f8:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 80255fc:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8025600:	4440      	add	r0, r8
 8025602:	0a2d      	lsrs	r5, r5, #8
 8025604:	ea07 1050 	and.w	r0, r7, r0, lsr #5
 8025608:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 802560c:	4328      	orrs	r0, r5
 802560e:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8025610:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8025614:	2cff      	cmp	r4, #255	@ 0xff
 8025616:	d01a      	beq.n	802564e <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 8025618:	f425 6efc 	bic.w	lr, r5, #2016	@ 0x7e0
 802561c:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8025620:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8025624:	fb04 fa05 	mul.w	sl, r4, r5
 8025628:	fb08 f80e 	mul.w	r8, r8, lr
 802562c:	f10a 0e20 	add.w	lr, sl, #32
 8025630:	ea07 1558 	and.w	r5, r7, r8, lsr #5
 8025634:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8025638:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 802563c:	4445      	add	r5, r8
 802563e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025642:	ea07 1555 	and.w	r5, r7, r5, lsr #5
 8025646:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
 802564a:	ea45 050e 	orr.w	r5, r5, lr
 802564e:	fb16 fe02 	smulbb	lr, r6, r2
 8025652:	f1c6 0810 	rsb	r8, r6, #16
 8025656:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 802565a:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 802565e:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8025662:	eba8 0802 	sub.w	r8, r8, r2
 8025666:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 802566a:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 802566e:	ebce 0242 	rsb	r2, lr, r2, lsl #1
 8025672:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 8025676:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 802567a:	ea4a 0000 	orr.w	r0, sl, r0
 802567e:	fb0c f202 	mul.w	r2, ip, r2
 8025682:	ebce 0646 	rsb	r6, lr, r6, lsl #1
 8025686:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 802568a:	fb09 2208 	mla	r2, r9, r8, r2
 802568e:	ea4b 0505 	orr.w	r5, fp, r5
 8025692:	fb06 2200 	mla	r2, r6, r0, r2
 8025696:	fb0e 2205 	mla	r2, lr, r5, r2
 802569a:	ea4f 5c52 	mov.w	ip, r2, lsr #21
 802569e:	0952      	lsrs	r2, r2, #5
 80256a0:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 80256a4:	f422 65fc 	bic.w	r5, r2, #2016	@ 0x7e0
 80256a8:	ea4c 0c05 	orr.w	ip, ip, r5
 80256ac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80256ae:	fa1f fc8c 	uxth.w	ip, ip
 80256b2:	4353      	muls	r3, r2
 80256b4:	ea4f 262c 	mov.w	r6, ip, asr #8
 80256b8:	ea4f 00ec 	mov.w	r0, ip, asr #3
 80256bc:	1c5a      	adds	r2, r3, #1
 80256be:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 80256c2:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 80256c6:	eb02 2323 	add.w	r3, r2, r3, asr #8
 80256ca:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 80256ce:	121b      	asrs	r3, r3, #8
 80256d0:	b2d2      	uxtb	r2, r2
 80256d2:	2bff      	cmp	r3, #255	@ 0xff
 80256d4:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 80256d8:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 80256dc:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 80256e0:	d069      	beq.n	80257b6 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x844>
 80256e2:	b2dd      	uxtb	r5, r3
 80256e4:	2b00      	cmp	r3, #0
 80256e6:	d03f      	beq.n	8025768 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7f6>
 80256e8:	f891 c003 	ldrb.w	ip, [r1, #3]
 80256ec:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80256ee:	fb05 fe0c 	mul.w	lr, r5, ip
 80256f2:	4465      	add	r5, ip
 80256f4:	f891 8000 	ldrb.w	r8, [r1]
 80256f8:	fb12 f204 	smulbb	r2, r2, r4
 80256fc:	f10e 0301 	add.w	r3, lr, #1
 8025700:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 8025704:	121b      	asrs	r3, r3, #8
 8025706:	1aed      	subs	r5, r5, r3
 8025708:	ebac 0303 	sub.w	r3, ip, r3
 802570c:	f891 c001 	ldrb.w	ip, [r1, #1]
 8025710:	b2ed      	uxtb	r5, r5
 8025712:	fb03 2208 	mla	r2, r3, r8, r2
 8025716:	fb92 f2f5 	sdiv	r2, r2, r5
 802571a:	2aff      	cmp	r2, #255	@ 0xff
 802571c:	70cd      	strb	r5, [r1, #3]
 802571e:	bfd6      	itet	le
 8025720:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 8025724:	22ff      	movgt	r2, #255	@ 0xff
 8025726:	b2d2      	uxtble	r2, r2
 8025728:	700a      	strb	r2, [r1, #0]
 802572a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802572c:	fb12 f000 	smulbb	r0, r2, r0
 8025730:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8025732:	fb03 000c 	mla	r0, r3, ip, r0
 8025736:	fb12 f606 	smulbb	r6, r2, r6
 802573a:	f891 c002 	ldrb.w	ip, [r1, #2]
 802573e:	fb90 f0f5 	sdiv	r0, r0, r5
 8025742:	fb03 630c 	mla	r3, r3, ip, r6
 8025746:	28ff      	cmp	r0, #255	@ 0xff
 8025748:	fb93 f3f5 	sdiv	r3, r3, r5
 802574c:	bfd6      	itet	le
 802574e:	ea20 70e0 	bicle.w	r0, r0, r0, asr #31
 8025752:	20ff      	movgt	r0, #255	@ 0xff
 8025754:	b2c0      	uxtble	r0, r0
 8025756:	2bff      	cmp	r3, #255	@ 0xff
 8025758:	bfd4      	ite	le
 802575a:	ea23 73e3 	bicle.w	r3, r3, r3, asr #31
 802575e:	23ff      	movgt	r3, #255	@ 0xff
 8025760:	7048      	strb	r0, [r1, #1]
 8025762:	bfd8      	it	le
 8025764:	b2db      	uxtble	r3, r3
 8025766:	708b      	strb	r3, [r1, #2]
 8025768:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 802576a:	3104      	adds	r1, #4
 802576c:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 802576e:	4413      	add	r3, r2
 8025770:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8025772:	9321      	str	r3, [sp, #132]	@ 0x84
 8025774:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8025776:	441a      	add	r2, r3
 8025778:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802577a:	3b01      	subs	r3, #1
 802577c:	9222      	str	r2, [sp, #136]	@ 0x88
 802577e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8025780:	e5f8      	b.n	8025374 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x402>
 8025782:	fb08 f505 	mul.w	r5, r8, r5
 8025786:	fb09 5303 	mla	r3, r9, r3, r5
 802578a:	e6be      	b.n	802550a <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x598>
 802578c:	46e1      	mov	r9, ip
 802578e:	e6e5      	b.n	802555c <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ea>
 8025790:	f1c2 0010 	rsb	r0, r2, #16
 8025794:	fb0c f202 	mul.w	r2, ip, r2
 8025798:	fb09 2900 	mla	r9, r9, r0, r2
 802579c:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80257a0:	ea4f 5c59 	mov.w	ip, r9, lsr #21
 80257a4:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80257a8:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 80257ac:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 80257b0:	ea4c 0c09 	orr.w	ip, ip, r9
 80257b4:	e77a      	b.n	80256ac <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73a>
 80257b6:	0200      	lsls	r0, r0, #8
 80257b8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80257bc:	4302      	orrs	r2, r0
 80257be:	600a      	str	r2, [r1, #0]
 80257c0:	e7d2      	b.n	8025768 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7f6>
 80257c2:	b017      	add	sp, #92	@ 0x5c
 80257c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080257c8 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh>:
 80257c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80257cc:	b085      	sub	sp, #20
 80257ce:	e9dd 8010 	ldrd	r8, r0, [sp, #64]	@ 0x40
 80257d2:	f9bd 4038 	ldrsh.w	r4, [sp, #56]	@ 0x38
 80257d6:	2800      	cmp	r0, #0
 80257d8:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	@ 0x3c
 80257dc:	fb00 8504 	mla	r5, r0, r4, r8
 80257e0:	f89d 6048 	ldrb.w	r6, [sp, #72]	@ 0x48
 80257e4:	f89d c04c 	ldrb.w	ip, [sp, #76]	@ 0x4c
 80257e8:	eb02 0745 	add.w	r7, r2, r5, lsl #1
 80257ec:	9702      	str	r7, [sp, #8]
 80257ee:	eb03 0705 	add.w	r7, r3, r5
 80257f2:	9703      	str	r7, [sp, #12]
 80257f4:	f2c0 812e 	blt.w	8025a54 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x28c>
 80257f8:	4582      	cmp	sl, r0
 80257fa:	f340 812b 	ble.w	8025a54 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x28c>
 80257fe:	f1b8 0f00 	cmp.w	r8, #0
 8025802:	f2c0 8122 	blt.w	8025a4a <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x282>
 8025806:	4544      	cmp	r4, r8
 8025808:	f340 811f 	ble.w	8025a4a <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x282>
 802580c:	f813 e005 	ldrb.w	lr, [r3, r5]
 8025810:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 8025814:	ea4f 02ee 	mov.w	r2, lr, asr #3
 8025818:	f423 67fc 	bic.w	r7, r3, #2016	@ 0x7e0
 802581c:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8025820:	4357      	muls	r7, r2
 8025822:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8025826:	fb0e f503 	mul.w	r5, lr, r3
 802582a:	ea02 1357 	and.w	r3, r2, r7, lsr #5
 802582e:	f607 0701 	addw	r7, r7, #2049	@ 0x801
 8025832:	441f      	add	r7, r3
 8025834:	f105 0320 	add.w	r3, r5, #32
 8025838:	eb03 2315 	add.w	r3, r3, r5, lsr #8
 802583c:	ea02 1257 	and.w	r2, r2, r7, lsr #5
 8025840:	0a1b      	lsrs	r3, r3, #8
 8025842:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8025846:	4313      	orrs	r3, r2
 8025848:	9301      	str	r3, [sp, #4]
 802584a:	f118 0301 	adds.w	r3, r8, #1
 802584e:	f100 8106 	bmi.w	8025a5e <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x296>
 8025852:	429c      	cmp	r4, r3
 8025854:	f340 8103 	ble.w	8025a5e <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x296>
 8025858:	2e00      	cmp	r6, #0
 802585a:	f000 8103 	beq.w	8025a64 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x29c>
 802585e:	9b03      	ldr	r3, [sp, #12]
 8025860:	f64f 0b1f 	movw	fp, #63519	@ 0xf81f
 8025864:	785a      	ldrb	r2, [r3, #1]
 8025866:	9b02      	ldr	r3, [sp, #8]
 8025868:	10d7      	asrs	r7, r2, #3
 802586a:	885b      	ldrh	r3, [r3, #2]
 802586c:	f423 65fc 	bic.w	r5, r3, #2016	@ 0x7e0
 8025870:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8025874:	436f      	muls	r7, r5
 8025876:	4353      	muls	r3, r2
 8025878:	ea0b 1957 	and.w	r9, fp, r7, lsr #5
 802587c:	f607 0701 	addw	r7, r7, #2049	@ 0x801
 8025880:	444f      	add	r7, r9
 8025882:	ea0b 1557 	and.w	r5, fp, r7, lsr #5
 8025886:	f103 0b20 	add.w	fp, r3, #32
 802588a:	eb0b 2313 	add.w	r3, fp, r3, lsr #8
 802588e:	0a1b      	lsrs	r3, r3, #8
 8025890:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8025894:	431d      	orrs	r5, r3
 8025896:	3001      	adds	r0, #1
 8025898:	f100 80ea 	bmi.w	8025a70 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x2a8>
 802589c:	4582      	cmp	sl, r0
 802589e:	f340 80e7 	ble.w	8025a70 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x2a8>
 80258a2:	f1bc 0f00 	cmp.w	ip, #0
 80258a6:	f000 80e8 	beq.w	8025a7a <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x2b2>
 80258aa:	f1b8 0f00 	cmp.w	r8, #0
 80258ae:	f2c0 80dc 	blt.w	8025a6a <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x2a2>
 80258b2:	4544      	cmp	r4, r8
 80258b4:	f340 80d9 	ble.w	8025a6a <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x2a2>
 80258b8:	9b03      	ldr	r3, [sp, #12]
 80258ba:	f64f 0b1f 	movw	fp, #63519	@ 0xf81f
 80258be:	5d1f      	ldrb	r7, [r3, r4]
 80258c0:	9b02      	ldr	r3, [sp, #8]
 80258c2:	ea4f 09e7 	mov.w	r9, r7, asr #3
 80258c6:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80258ca:	f423 60fc 	bic.w	r0, r3, #2016	@ 0x7e0
 80258ce:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80258d2:	fb09 f900 	mul.w	r9, r9, r0
 80258d6:	437b      	muls	r3, r7
 80258d8:	ea0b 1a59 	and.w	sl, fp, r9, lsr #5
 80258dc:	f609 0901 	addw	r9, r9, #2049	@ 0x801
 80258e0:	44d1      	add	r9, sl
 80258e2:	ea0b 1059 	and.w	r0, fp, r9, lsr #5
 80258e6:	f103 0b20 	add.w	fp, r3, #32
 80258ea:	eb0b 2313 	add.w	r3, fp, r3, lsr #8
 80258ee:	0a1b      	lsrs	r3, r3, #8
 80258f0:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80258f4:	4318      	orrs	r0, r3
 80258f6:	f118 0801 	adds.w	r8, r8, #1
 80258fa:	f100 80c3 	bmi.w	8025a84 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x2bc>
 80258fe:	4544      	cmp	r4, r8
 8025900:	f340 80c0 	ble.w	8025a84 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x2bc>
 8025904:	2e00      	cmp	r6, #0
 8025906:	f000 80c0 	beq.w	8025a8a <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x2c2>
 802590a:	f104 0801 	add.w	r8, r4, #1
 802590e:	9b03      	ldr	r3, [sp, #12]
 8025910:	9c02      	ldr	r4, [sp, #8]
 8025912:	f813 3008 	ldrb.w	r3, [r3, r8]
 8025916:	f834 4018 	ldrh.w	r4, [r4, r8, lsl #1]
 802591a:	ea4f 0ae3 	mov.w	sl, r3, asr #3
 802591e:	f424 68fc 	bic.w	r8, r4, #2016	@ 0x7e0
 8025922:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 8025926:	fb0a fa08 	mul.w	sl, sl, r8
 802592a:	fb03 f904 	mul.w	r9, r3, r4
 802592e:	f64f 041f 	movw	r4, #63519	@ 0xf81f
 8025932:	ea04 1b5a 	and.w	fp, r4, sl, lsr #5
 8025936:	f60a 0a01 	addw	sl, sl, #2049	@ 0x801
 802593a:	44da      	add	sl, fp
 802593c:	ea04 185a 	and.w	r8, r4, sl, lsr #5
 8025940:	f109 0420 	add.w	r4, r9, #32
 8025944:	eb04 2419 	add.w	r4, r4, r9, lsr #8
 8025948:	0a24      	lsrs	r4, r4, #8
 802594a:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 802594e:	ea48 0404 	orr.w	r4, r8, r4
 8025952:	fa1f f886 	uxth.w	r8, r6
 8025956:	fa1f fa8c 	uxth.w	sl, ip
 802595a:	fb08 fb0a 	mul.w	fp, r8, sl
 802595e:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8025962:	ebcb 1a0a 	rsb	sl, fp, sl, lsl #4
 8025966:	f5c8 7980 	rsb	r9, r8, #256	@ 0x100
 802596a:	eba8 080b 	sub.w	r8, r8, fp
 802596e:	fa1f fa8a 	uxth.w	sl, sl
 8025972:	fa1f f888 	uxth.w	r8, r8
 8025976:	eba9 090a 	sub.w	r9, r9, sl
 802597a:	fb02 f808 	mul.w	r8, r2, r8
 802597e:	9a01      	ldr	r2, [sp, #4]
 8025980:	fa1f f989 	uxth.w	r9, r9
 8025984:	0412      	lsls	r2, r2, #16
 8025986:	fb0e 8809 	mla	r8, lr, r9, r8
 802598a:	f002 6efc 	and.w	lr, r2, #132120576	@ 0x7e00000
 802598e:	9a01      	ldr	r2, [sp, #4]
 8025990:	fb0a 8707 	mla	r7, sl, r7, r8
 8025994:	ea4f 4805 	mov.w	r8, r5, lsl #16
 8025998:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 802599c:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 80259a0:	fb0b 7303 	mla	r3, fp, r3, r7
 80259a4:	fb16 f70c 	smulbb	r7, r6, ip
 80259a8:	ea4e 0202 	orr.w	r2, lr, r2
 80259ac:	f008 68fc 	and.w	r8, r8, #132120576	@ 0x7e00000
 80259b0:	f3c7 07c7 	ubfx	r7, r7, #3, #8
 80259b4:	f1cc 0e10 	rsb	lr, ip, #16
 80259b8:	ea48 0505 	orr.w	r5, r8, r5
 80259bc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80259c0:	ebae 0e06 	sub.w	lr, lr, r6
 80259c4:	ebc7 0646 	rsb	r6, r7, r6, lsl #1
 80259c8:	ebc7 0c4c 	rsb	ip, r7, ip, lsl #1
 80259cc:	2bff      	cmp	r3, #255	@ 0xff
 80259ce:	fb06 f605 	mul.w	r6, r6, r5
 80259d2:	eb07 0e4e 	add.w	lr, r7, lr, lsl #1
 80259d6:	fb0e 6202 	mla	r2, lr, r2, r6
 80259da:	ea4f 4604 	mov.w	r6, r4, lsl #16
 80259de:	f424 64fc 	bic.w	r4, r4, #2016	@ 0x7e0
 80259e2:	f006 66fc 	and.w	r6, r6, #132120576	@ 0x7e00000
 80259e6:	ea44 0406 	orr.w	r4, r4, r6
 80259ea:	fb07 2604 	mla	r6, r7, r4, r2
 80259ee:	ea4f 4200 	mov.w	r2, r0, lsl #16
 80259f2:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 80259f6:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 80259fa:	ea40 0002 	orr.w	r0, r0, r2
 80259fe:	fb0c 6c00 	mla	ip, ip, r0, r6
 8025a02:	ea4f 525c 	mov.w	r2, ip, lsr #21
 8025a06:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8025a0a:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8025a0e:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 8025a12:	ea42 020c 	orr.w	r2, r2, ip
 8025a16:	b292      	uxth	r2, r2
 8025a18:	ea4f 2022 	mov.w	r0, r2, asr #8
 8025a1c:	ea4f 05e2 	mov.w	r5, r2, asr #3
 8025a20:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8025a24:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8025a28:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8025a2c:	b2d2      	uxtb	r2, r2
 8025a2e:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 8025a32:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8025a36:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8025a3a:	d129      	bne.n	8025a90 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x2c8>
 8025a3c:	700a      	strb	r2, [r1, #0]
 8025a3e:	704d      	strb	r5, [r1, #1]
 8025a40:	7088      	strb	r0, [r1, #2]
 8025a42:	70cb      	strb	r3, [r1, #3]
 8025a44:	b005      	add	sp, #20
 8025a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025a4a:	f04f 0e00 	mov.w	lr, #0
 8025a4e:	f8cd e004 	str.w	lr, [sp, #4]
 8025a52:	e6fa      	b.n	802584a <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x82>
 8025a54:	2200      	movs	r2, #0
 8025a56:	4696      	mov	lr, r2
 8025a58:	4615      	mov	r5, r2
 8025a5a:	9201      	str	r2, [sp, #4]
 8025a5c:	e71b      	b.n	8025896 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0xce>
 8025a5e:	2200      	movs	r2, #0
 8025a60:	4615      	mov	r5, r2
 8025a62:	e718      	b.n	8025896 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0xce>
 8025a64:	4632      	mov	r2, r6
 8025a66:	4635      	mov	r5, r6
 8025a68:	e715      	b.n	8025896 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0xce>
 8025a6a:	2700      	movs	r7, #0
 8025a6c:	4638      	mov	r0, r7
 8025a6e:	e742      	b.n	80258f6 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x12e>
 8025a70:	2300      	movs	r3, #0
 8025a72:	461f      	mov	r7, r3
 8025a74:	461c      	mov	r4, r3
 8025a76:	4618      	mov	r0, r3
 8025a78:	e76b      	b.n	8025952 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x18a>
 8025a7a:	4663      	mov	r3, ip
 8025a7c:	4667      	mov	r7, ip
 8025a7e:	4664      	mov	r4, ip
 8025a80:	4660      	mov	r0, ip
 8025a82:	e766      	b.n	8025952 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x18a>
 8025a84:	2300      	movs	r3, #0
 8025a86:	461c      	mov	r4, r3
 8025a88:	e763      	b.n	8025952 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x18a>
 8025a8a:	4633      	mov	r3, r6
 8025a8c:	4634      	mov	r4, r6
 8025a8e:	e760      	b.n	8025952 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x18a>
 8025a90:	2b00      	cmp	r3, #0
 8025a92:	d0d7      	beq.n	8025a44 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x27c>
 8025a94:	78cf      	ldrb	r7, [r1, #3]
 8025a96:	fb03 f607 	mul.w	r6, r3, r7
 8025a9a:	443b      	add	r3, r7
 8025a9c:	1c74      	adds	r4, r6, #1
 8025a9e:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 8025aa2:	780e      	ldrb	r6, [r1, #0]
 8025aa4:	1224      	asrs	r4, r4, #8
 8025aa6:	1b3f      	subs	r7, r7, r4
 8025aa8:	1b1b      	subs	r3, r3, r4
 8025aaa:	24ff      	movs	r4, #255	@ 0xff
 8025aac:	437e      	muls	r6, r7
 8025aae:	b2db      	uxtb	r3, r3
 8025ab0:	fb14 6202 	smlabb	r2, r4, r2, r6
 8025ab4:	fb92 f6f3 	sdiv	r6, r2, r3
 8025ab8:	42a6      	cmp	r6, r4
 8025aba:	f04f 02ff 	mov.w	r2, #255	@ 0xff
 8025abe:	bfc8      	it	gt
 8025ac0:	4626      	movgt	r6, r4
 8025ac2:	784c      	ldrb	r4, [r1, #1]
 8025ac4:	bfd8      	it	le
 8025ac6:	ea26 76e6 	bicle.w	r6, r6, r6, asr #31
 8025aca:	fb07 f404 	mul.w	r4, r7, r4
 8025ace:	bfd8      	it	le
 8025ad0:	b2f6      	uxtble	r6, r6
 8025ad2:	fb12 4505 	smlabb	r5, r2, r5, r4
 8025ad6:	700e      	strb	r6, [r1, #0]
 8025ad8:	fb95 f4f3 	sdiv	r4, r5, r3
 8025adc:	4294      	cmp	r4, r2
 8025ade:	bfd4      	ite	le
 8025ae0:	ea24 74e4 	bicle.w	r4, r4, r4, asr #31
 8025ae4:	4614      	movgt	r4, r2
 8025ae6:	788a      	ldrb	r2, [r1, #2]
 8025ae8:	bfd8      	it	le
 8025aea:	b2e4      	uxtble	r4, r4
 8025aec:	437a      	muls	r2, r7
 8025aee:	704c      	strb	r4, [r1, #1]
 8025af0:	24ff      	movs	r4, #255	@ 0xff
 8025af2:	fb14 2000 	smlabb	r0, r4, r0, r2
 8025af6:	fb90 f2f3 	sdiv	r2, r0, r3
 8025afa:	42a2      	cmp	r2, r4
 8025afc:	bfd6      	itet	le
 8025afe:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 8025b02:	4622      	movgt	r2, r4
 8025b04:	b2d2      	uxtble	r2, r2
 8025b06:	708a      	strb	r2, [r1, #2]
 8025b08:	e79b      	b.n	8025a42 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x27a>

08025b0a <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025b0a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025b0e:	b093      	sub	sp, #76	@ 0x4c
 8025b10:	9210      	str	r2, [sp, #64]	@ 0x40
 8025b12:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8025b14:	9011      	str	r0, [sp, #68]	@ 0x44
 8025b16:	910e      	str	r1, [sp, #56]	@ 0x38
 8025b18:	6850      	ldr	r0, [r2, #4]
 8025b1a:	9306      	str	r3, [sp, #24]
 8025b1c:	6812      	ldr	r2, [r2, #0]
 8025b1e:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 8025b22:	fb00 1303 	mla	r3, r0, r3, r1
 8025b26:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8025b2a:	9307      	str	r3, [sp, #28]
 8025b2c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8025b2e:	681b      	ldr	r3, [r3, #0]
 8025b30:	9308      	str	r3, [sp, #32]
 8025b32:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8025b34:	685b      	ldr	r3, [r3, #4]
 8025b36:	9309      	str	r3, [sp, #36]	@ 0x24
 8025b38:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8025b3a:	2b00      	cmp	r3, #0
 8025b3c:	dc03      	bgt.n	8025b46 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8025b3e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8025b40:	2b00      	cmp	r3, #0
 8025b42:	f340 83f9 	ble.w	8026338 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82e>
 8025b46:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8025b48:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025b4c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025b50:	1e48      	subs	r0, r1, #1
 8025b52:	1e55      	subs	r5, r2, #1
 8025b54:	9b06      	ldr	r3, [sp, #24]
 8025b56:	2b00      	cmp	r3, #0
 8025b58:	f340 81b4 	ble.w	8025ec4 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 8025b5c:	9e1d      	ldr	r6, [sp, #116]	@ 0x74
 8025b5e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8025b60:	1436      	asrs	r6, r6, #16
 8025b62:	ea4f 4323 	mov.w	r3, r3, asr #16
 8025b66:	d406      	bmi.n	8025b76 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8025b68:	4286      	cmp	r6, r0
 8025b6a:	da04      	bge.n	8025b76 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8025b6c:	2b00      	cmp	r3, #0
 8025b6e:	db02      	blt.n	8025b76 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8025b70:	42ab      	cmp	r3, r5
 8025b72:	f2c0 81a8 	blt.w	8025ec6 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3bc>
 8025b76:	3601      	adds	r6, #1
 8025b78:	f100 8195 	bmi.w	8025ea6 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 8025b7c:	42b1      	cmp	r1, r6
 8025b7e:	f2c0 8192 	blt.w	8025ea6 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 8025b82:	3301      	adds	r3, #1
 8025b84:	f100 818f 	bmi.w	8025ea6 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 8025b88:	429a      	cmp	r2, r3
 8025b8a:	f2c0 818c 	blt.w	8025ea6 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 8025b8e:	9b06      	ldr	r3, [sp, #24]
 8025b90:	f64f 071f 	movw	r7, #63519	@ 0xf81f
 8025b94:	9d07      	ldr	r5, [sp, #28]
 8025b96:	930f      	str	r3, [sp, #60]	@ 0x3c
 8025b98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025b9a:	2b00      	cmp	r3, #0
 8025b9c:	f340 81b5 	ble.w	8025f0a <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x400>
 8025ba0:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8025ba2:	9e1d      	ldr	r6, [sp, #116]	@ 0x74
 8025ba4:	1418      	asrs	r0, r3, #16
 8025ba6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8025ba8:	1436      	asrs	r6, r6, #16
 8025baa:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8025bae:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8025bb0:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8025bb4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8025bb6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8025bba:	f100 820e 	bmi.w	8025fda <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d0>
 8025bbe:	f102 3eff 	add.w	lr, r2, #4294967295
 8025bc2:	4576      	cmp	r6, lr
 8025bc4:	f280 8209 	bge.w	8025fda <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d0>
 8025bc8:	2800      	cmp	r0, #0
 8025bca:	f2c0 8206 	blt.w	8025fda <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d0>
 8025bce:	f103 3eff 	add.w	lr, r3, #4294967295
 8025bd2:	4570      	cmp	r0, lr
 8025bd4:	f280 8201 	bge.w	8025fda <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d0>
 8025bd8:	b212      	sxth	r2, r2
 8025bda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025bdc:	fa1f fe81 	uxth.w	lr, r1
 8025be0:	fb00 6002 	mla	r0, r0, r2, r6
 8025be4:	ea4f 160e 	mov.w	r6, lr, lsl #4
 8025be8:	eb03 0a00 	add.w	sl, r3, r0
 8025bec:	f813 9000 	ldrb.w	r9, [r3, r0]
 8025bf0:	f5c6 7380 	rsb	r3, r6, #256	@ 0x100
 8025bf4:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8025bf8:	b29b      	uxth	r3, r3
 8025bfa:	f1bc 0f00 	cmp.w	ip, #0
 8025bfe:	f000 81ca 	beq.w	8025f96 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 8025c02:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8025c06:	eb0a 0b02 	add.w	fp, sl, r2
 8025c0a:	fa1f fa8c 	uxth.w	sl, ip
 8025c0e:	940a      	str	r4, [sp, #40]	@ 0x28
 8025c10:	fb0a fe0e 	mul.w	lr, sl, lr
 8025c14:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8025c18:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8025c1c:	eba6 060e 	sub.w	r6, r6, lr
 8025c20:	940b      	str	r4, [sp, #44]	@ 0x2c
 8025c22:	fa1f fa8a 	uxth.w	sl, sl
 8025c26:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8025c28:	b2b6      	uxth	r6, r6
 8025c2a:	eba3 030a 	sub.w	r3, r3, sl
 8025c2e:	fb08 f606 	mul.w	r6, r8, r6
 8025c32:	b29b      	uxth	r3, r3
 8025c34:	fb09 6303 	mla	r3, r9, r3, r6
 8025c38:	fb0a 3304 	mla	r3, sl, r4, r3
 8025c3c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025c3e:	fb0e 3304 	mla	r3, lr, r4, r3
 8025c42:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8025c46:	2b00      	cmp	r3, #0
 8025c48:	f000 8120 	beq.w	8025e8c <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 8025c4c:	9c08      	ldr	r4, [sp, #32]
 8025c4e:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8025c52:	eb04 0640 	add.w	r6, r4, r0, lsl #1
 8025c56:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8025c5a:	f000 81a1 	beq.w	8025fa0 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 8025c5e:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
 8025c62:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8025c66:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8025c6a:	fb0a fe0e 	mul.w	lr, sl, lr
 8025c6e:	fb09 f000 	mul.w	r0, r9, r0
 8025c72:	ea07 195e 	and.w	r9, r7, lr, lsr #5
 8025c76:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 8025c7a:	f100 0b20 	add.w	fp, r0, #32
 8025c7e:	44ce      	add	lr, r9
 8025c80:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8025c84:	ea07 1e5e 	and.w	lr, r7, lr, lsr #5
 8025c88:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025c8c:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8025c90:	ea4e 0909 	orr.w	r9, lr, r9
 8025c94:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8025c98:	8870      	ldrh	r0, [r6, #2]
 8025c9a:	d019      	beq.n	8025cd0 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8025c9c:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
 8025ca0:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8025ca4:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8025ca8:	fb0a fe0e 	mul.w	lr, sl, lr
 8025cac:	fb08 f800 	mul.w	r8, r8, r0
 8025cb0:	ea07 105e 	and.w	r0, r7, lr, lsr #5
 8025cb4:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 8025cb8:	f108 0b20 	add.w	fp, r8, #32
 8025cbc:	4486      	add	lr, r0
 8025cbe:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8025cc2:	ea07 1e5e 	and.w	lr, r7, lr, lsr #5
 8025cc6:	0a00      	lsrs	r0, r0, #8
 8025cc8:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8025ccc:	ea4e 0000 	orr.w	r0, lr, r0
 8025cd0:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8025cd4:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 8025cd8:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8025cdc:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8025ce0:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
 8025ce4:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8025ce8:	ea4e 0909 	orr.w	r9, lr, r9
 8025cec:	ea4a 0000 	orr.w	r0, sl, r0
 8025cf0:	f1bc 0f00 	cmp.w	ip, #0
 8025cf4:	f000 8156 	beq.w	8025fa4 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49a>
 8025cf8:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 8025cfc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8025cfe:	3a01      	subs	r2, #1
 8025d00:	2cff      	cmp	r4, #255	@ 0xff
 8025d02:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8025d06:	f102 0202 	add.w	r2, r2, #2
 8025d0a:	eb06 0e02 	add.w	lr, r6, r2
 8025d0e:	5ab2      	ldrh	r2, [r6, r2]
 8025d10:	d018      	beq.n	8025d44 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8025d12:	f422 66fc 	bic.w	r6, r2, #2016	@ 0x7e0
 8025d16:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8025d1a:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8025d1e:	fb04 fa02 	mul.w	sl, r4, r2
 8025d22:	fb08 f806 	mul.w	r8, r8, r6
 8025d26:	f10a 0620 	add.w	r6, sl, #32
 8025d2a:	ea07 1258 	and.w	r2, r7, r8, lsr #5
 8025d2e:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8025d32:	eb06 261a 	add.w	r6, r6, sl, lsr #8
 8025d36:	4442      	add	r2, r8
 8025d38:	0a36      	lsrs	r6, r6, #8
 8025d3a:	ea07 1252 	and.w	r2, r7, r2, lsr #5
 8025d3e:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 8025d42:	4332      	orrs	r2, r6
 8025d44:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025d46:	f8be 6002 	ldrh.w	r6, [lr, #2]
 8025d4a:	2cff      	cmp	r4, #255	@ 0xff
 8025d4c:	d01a      	beq.n	8025d84 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8025d4e:	f426 6efc 	bic.w	lr, r6, #2016	@ 0x7e0
 8025d52:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 8025d56:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8025d5a:	fb04 fa06 	mul.w	sl, r4, r6
 8025d5e:	fb08 f80e 	mul.w	r8, r8, lr
 8025d62:	f10a 0e20 	add.w	lr, sl, #32
 8025d66:	ea07 1658 	and.w	r6, r7, r8, lsr #5
 8025d6a:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8025d6e:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8025d72:	4446      	add	r6, r8
 8025d74:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025d78:	ea07 1656 	and.w	r6, r7, r6, lsr #5
 8025d7c:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
 8025d80:	ea46 060e 	orr.w	r6, r6, lr
 8025d84:	fb1c fe01 	smulbb	lr, ip, r1
 8025d88:	f1cc 0810 	rsb	r8, ip, #16
 8025d8c:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8025d90:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8025d94:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8025d98:	eba8 0801 	sub.w	r8, r8, r1
 8025d9c:	ea4f 4b06 	mov.w	fp, r6, lsl #16
 8025da0:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8025da4:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8025da8:	f426 66fc 	bic.w	r6, r6, #2016	@ 0x7e0
 8025dac:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8025db0:	ea4a 0202 	orr.w	r2, sl, r2
 8025db4:	4341      	muls	r1, r0
 8025db6:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8025dba:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8025dbe:	fb09 1108 	mla	r1, r9, r8, r1
 8025dc2:	ea4b 0606 	orr.w	r6, fp, r6
 8025dc6:	fb0c 1102 	mla	r1, ip, r2, r1
 8025dca:	fb0e 1e06 	mla	lr, lr, r6, r1
 8025dce:	ea4f 515e 	mov.w	r1, lr, lsr #21
 8025dd2:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8025dd6:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8025dda:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 8025dde:	ea41 0e0e 	orr.w	lr, r1, lr
 8025de2:	fa1f f18e 	uxth.w	r1, lr
 8025de6:	ea4f 2c21 	mov.w	ip, r1, asr #8
 8025dea:	2bff      	cmp	r3, #255	@ 0xff
 8025dec:	ea4f 00e1 	mov.w	r0, r1, asr #3
 8025df0:	ea4f 02c1 	mov.w	r2, r1, lsl #3
 8025df4:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8025df8:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8025dfc:	b2d2      	uxtb	r2, r2
 8025dfe:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 8025e02:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 8025e06:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8025e0a:	f000 80df 	beq.w	8025fcc <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8025e0e:	f895 8003 	ldrb.w	r8, [r5, #3]
 8025e12:	24ff      	movs	r4, #255	@ 0xff
 8025e14:	fb03 f608 	mul.w	r6, r3, r8
 8025e18:	4443      	add	r3, r8
 8025e1a:	1c71      	adds	r1, r6, #1
 8025e1c:	eb01 2126 	add.w	r1, r1, r6, asr #8
 8025e20:	782e      	ldrb	r6, [r5, #0]
 8025e22:	1209      	asrs	r1, r1, #8
 8025e24:	1a5b      	subs	r3, r3, r1
 8025e26:	eba8 0101 	sub.w	r1, r8, r1
 8025e2a:	f895 8002 	ldrb.w	r8, [r5, #2]
 8025e2e:	434e      	muls	r6, r1
 8025e30:	b2db      	uxtb	r3, r3
 8025e32:	fb14 6202 	smlabb	r2, r4, r2, r6
 8025e36:	24ff      	movs	r4, #255	@ 0xff
 8025e38:	70eb      	strb	r3, [r5, #3]
 8025e3a:	fb92 f2f3 	sdiv	r2, r2, r3
 8025e3e:	2aff      	cmp	r2, #255	@ 0xff
 8025e40:	bfd6      	itet	le
 8025e42:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 8025e46:	22ff      	movgt	r2, #255	@ 0xff
 8025e48:	b2d2      	uxtble	r2, r2
 8025e4a:	702a      	strb	r2, [r5, #0]
 8025e4c:	786a      	ldrb	r2, [r5, #1]
 8025e4e:	434a      	muls	r2, r1
 8025e50:	fb01 f108 	mul.w	r1, r1, r8
 8025e54:	fb14 2000 	smlabb	r0, r4, r0, r2
 8025e58:	22ff      	movs	r2, #255	@ 0xff
 8025e5a:	fb90 f0f3 	sdiv	r0, r0, r3
 8025e5e:	fb12 1c0c 	smlabb	ip, r2, ip, r1
 8025e62:	28ff      	cmp	r0, #255	@ 0xff
 8025e64:	fb9c fcf3 	sdiv	ip, ip, r3
 8025e68:	bfd6      	itet	le
 8025e6a:	ea20 70e0 	bicle.w	r0, r0, r0, asr #31
 8025e6e:	20ff      	movgt	r0, #255	@ 0xff
 8025e70:	b2c0      	uxtble	r0, r0
 8025e72:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 8025e76:	bfd4      	ite	le
 8025e78:	ea2c 7cec 	bicle.w	ip, ip, ip, asr #31
 8025e7c:	f04f 0cff 	movgt.w	ip, #255	@ 0xff
 8025e80:	7068      	strb	r0, [r5, #1]
 8025e82:	bfd8      	it	le
 8025e84:	fa5f fc8c 	uxtble.w	ip, ip
 8025e88:	f885 c002 	strb.w	ip, [r5, #2]
 8025e8c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8025e8e:	3504      	adds	r5, #4
 8025e90:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 8025e92:	4413      	add	r3, r2
 8025e94:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8025e96:	931d      	str	r3, [sp, #116]	@ 0x74
 8025e98:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8025e9a:	441a      	add	r2, r3
 8025e9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025e9e:	3b01      	subs	r3, #1
 8025ea0:	921e      	str	r2, [sp, #120]	@ 0x78
 8025ea2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8025ea4:	e678      	b.n	8025b98 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8025ea6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8025ea8:	9e1f      	ldr	r6, [sp, #124]	@ 0x7c
 8025eaa:	9c1e      	ldr	r4, [sp, #120]	@ 0x78
 8025eac:	4433      	add	r3, r6
 8025eae:	931d      	str	r3, [sp, #116]	@ 0x74
 8025eb0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8025eb2:	441c      	add	r4, r3
 8025eb4:	9b06      	ldr	r3, [sp, #24]
 8025eb6:	3b01      	subs	r3, #1
 8025eb8:	941e      	str	r4, [sp, #120]	@ 0x78
 8025eba:	9306      	str	r3, [sp, #24]
 8025ebc:	9b07      	ldr	r3, [sp, #28]
 8025ebe:	3304      	adds	r3, #4
 8025ec0:	9307      	str	r3, [sp, #28]
 8025ec2:	e647      	b.n	8025b54 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8025ec4:	d028      	beq.n	8025f18 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40e>
 8025ec6:	9b06      	ldr	r3, [sp, #24]
 8025ec8:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 8025eca:	3b01      	subs	r3, #1
 8025ecc:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 8025ece:	fb00 5003 	mla	r0, r0, r3, r5
 8025ed2:	1400      	asrs	r0, r0, #16
 8025ed4:	f53f ae5b 	bmi.w	8025b8e <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8025ed8:	3901      	subs	r1, #1
 8025eda:	4288      	cmp	r0, r1
 8025edc:	f6bf ae57 	bge.w	8025b8e <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8025ee0:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8025ee2:	981e      	ldr	r0, [sp, #120]	@ 0x78
 8025ee4:	fb01 0303 	mla	r3, r1, r3, r0
 8025ee8:	141b      	asrs	r3, r3, #16
 8025eea:	f53f ae50 	bmi.w	8025b8e <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8025eee:	3a01      	subs	r2, #1
 8025ef0:	4293      	cmp	r3, r2
 8025ef2:	f6bf ae4c 	bge.w	8025b8e <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8025ef6:	9b07      	ldr	r3, [sp, #28]
 8025ef8:	f64f 071f 	movw	r7, #63519	@ 0xf81f
 8025efc:	1d19      	adds	r1, r3, #4
 8025efe:	9b06      	ldr	r3, [sp, #24]
 8025f00:	930f      	str	r3, [sp, #60]	@ 0x3c
 8025f02:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025f04:	2b00      	cmp	r3, #0
 8025f06:	f300 8085 	bgt.w	8026014 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50a>
 8025f0a:	9b06      	ldr	r3, [sp, #24]
 8025f0c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8025f10:	9b07      	ldr	r3, [sp, #28]
 8025f12:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8025f16:	9307      	str	r3, [sp, #28]
 8025f18:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8025f1a:	2b00      	cmp	r3, #0
 8025f1c:	f340 820c 	ble.w	8026338 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82e>
 8025f20:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8025f24:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8025f26:	ee30 0a04 	vadd.f32	s0, s0, s8
 8025f2a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8025f2e:	eef0 6a62 	vmov.f32	s13, s5
 8025f32:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8025f36:	ee31 1a05 	vadd.f32	s2, s2, s10
 8025f3a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025f3e:	edcd 6a1d 	vstr	s13, [sp, #116]	@ 0x74
 8025f42:	eef0 6a43 	vmov.f32	s13, s6
 8025f46:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025f4a:	edcd 6a1e 	vstr	s13, [sp, #120]	@ 0x78
 8025f4e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8025f52:	ee61 7a27 	vmul.f32	s15, s2, s15
 8025f56:	ee77 2a62 	vsub.f32	s5, s14, s5
 8025f5a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8025f5e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8025f62:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8025f66:	ee12 2a90 	vmov	r2, s5
 8025f6a:	eef0 2a47 	vmov.f32	s5, s14
 8025f6e:	fb92 f3f3 	sdiv	r3, r2, r3
 8025f72:	ee13 2a10 	vmov	r2, s6
 8025f76:	931f      	str	r3, [sp, #124]	@ 0x7c
 8025f78:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8025f7a:	eeb0 3a67 	vmov.f32	s6, s15
 8025f7e:	fb92 f3f3 	sdiv	r3, r2, r3
 8025f82:	9320      	str	r3, [sp, #128]	@ 0x80
 8025f84:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8025f86:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8025f88:	3b01      	subs	r3, #1
 8025f8a:	930e      	str	r3, [sp, #56]	@ 0x38
 8025f8c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8025f8e:	bf08      	it	eq
 8025f90:	4613      	moveq	r3, r2
 8025f92:	9306      	str	r3, [sp, #24]
 8025f94:	e5d0      	b.n	8025b38 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8025f96:	fb08 f606 	mul.w	r6, r8, r6
 8025f9a:	fb09 6303 	mla	r3, r9, r3, r6
 8025f9e:	e650      	b.n	8025c42 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8025fa0:	4681      	mov	r9, r0
 8025fa2:	e677      	b.n	8025c94 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8025fa4:	f1c1 0210 	rsb	r2, r1, #16
 8025fa8:	4341      	muls	r1, r0
 8025faa:	fb09 1902 	mla	r9, r9, r2, r1
 8025fae:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8025fb2:	ea4f 5159 	mov.w	r1, r9, lsr #21
 8025fb6:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8025fba:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8025fbe:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 8025fc2:	ea41 0909 	orr.w	r9, r1, r9
 8025fc6:	fa1f f189 	uxth.w	r1, r9
 8025fca:	e70c      	b.n	8025de6 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>
 8025fcc:	0200      	lsls	r0, r0, #8
 8025fce:	ea40 4c0c 	orr.w	ip, r0, ip, lsl #16
 8025fd2:	ea4c 0202 	orr.w	r2, ip, r2
 8025fd6:	602a      	str	r2, [r5, #0]
 8025fd8:	e758      	b.n	8025e8c <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 8025fda:	f116 0e01 	adds.w	lr, r6, #1
 8025fde:	f53f af55 	bmi.w	8025e8c <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 8025fe2:	4572      	cmp	r2, lr
 8025fe4:	f6ff af52 	blt.w	8025e8c <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 8025fe8:	f110 0e01 	adds.w	lr, r0, #1
 8025fec:	f53f af4e 	bmi.w	8025e8c <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 8025ff0:	4573      	cmp	r3, lr
 8025ff2:	f6ff af4b 	blt.w	8025e8c <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 8025ff6:	b21b      	sxth	r3, r3
 8025ff8:	b212      	sxth	r2, r2
 8025ffa:	9301      	str	r3, [sp, #4]
 8025ffc:	9200      	str	r2, [sp, #0]
 8025ffe:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 8026002:	e9cd 6002 	strd	r6, r0, [sp, #8]
 8026006:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 802600a:	4629      	mov	r1, r5
 802600c:	9811      	ldr	r0, [sp, #68]	@ 0x44
 802600e:	f7ff fbdb 	bl	80257c8 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh>
 8026012:	e73b      	b.n	8025e8c <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 8026014:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8026016:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802601a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 802601c:	f3c3 3603 	ubfx	r6, r3, #12, #4
 8026020:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8026022:	fa1f fe82 	uxth.w	lr, r2
 8026026:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 802602a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 802602c:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8026030:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8026034:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8026036:	141b      	asrs	r3, r3, #16
 8026038:	fb00 3c0c 	mla	ip, r0, ip, r3
 802603c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802603e:	eb03 0a0c 	add.w	sl, r3, ip
 8026042:	f813 900c 	ldrb.w	r9, [r3, ip]
 8026046:	f5c5 7380 	rsb	r3, r5, #256	@ 0x100
 802604a:	f89a 8001 	ldrb.w	r8, [sl, #1]
 802604e:	b29b      	uxth	r3, r3
 8026050:	2e00      	cmp	r6, #0
 8026052:	f000 8152 	beq.w	80262fa <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7f0>
 8026056:	f81a 4000 	ldrb.w	r4, [sl, r0]
 802605a:	eb0a 0b00 	add.w	fp, sl, r0
 802605e:	fa1f fa86 	uxth.w	sl, r6
 8026062:	940c      	str	r4, [sp, #48]	@ 0x30
 8026064:	fb0a fe0e 	mul.w	lr, sl, lr
 8026068:	f89b 4001 	ldrb.w	r4, [fp, #1]
 802606c:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8026070:	eba5 050e 	sub.w	r5, r5, lr
 8026074:	940d      	str	r4, [sp, #52]	@ 0x34
 8026076:	fa1f fa8a 	uxth.w	sl, sl
 802607a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 802607c:	b2ad      	uxth	r5, r5
 802607e:	eba3 030a 	sub.w	r3, r3, sl
 8026082:	fb08 f505 	mul.w	r5, r8, r5
 8026086:	b29b      	uxth	r3, r3
 8026088:	fb09 5303 	mla	r3, r9, r3, r5
 802608c:	fb0a 3304 	mla	r3, sl, r4, r3
 8026090:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8026092:	fb0e 3304 	mla	r3, lr, r4, r3
 8026096:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802609a:	2b00      	cmp	r3, #0
 802609c:	f000 8120 	beq.w	80262e0 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d6>
 80260a0:	9c08      	ldr	r4, [sp, #32]
 80260a2:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 80260a6:	eb04 0e4c 	add.w	lr, r4, ip, lsl #1
 80260aa:	f834 501c 	ldrh.w	r5, [r4, ip, lsl #1]
 80260ae:	f000 8129 	beq.w	8026304 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7fa>
 80260b2:	f425 6cfc 	bic.w	ip, r5, #2016	@ 0x7e0
 80260b6:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 80260ba:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 80260be:	fb0a fc0c 	mul.w	ip, sl, ip
 80260c2:	fb09 f505 	mul.w	r5, r9, r5
 80260c6:	ea07 195c 	and.w	r9, r7, ip, lsr #5
 80260ca:	f60c 0c01 	addw	ip, ip, #2049	@ 0x801
 80260ce:	f105 0b20 	add.w	fp, r5, #32
 80260d2:	44cc      	add	ip, r9
 80260d4:	eb0b 2915 	add.w	r9, fp, r5, lsr #8
 80260d8:	ea07 1c5c 	and.w	ip, r7, ip, lsr #5
 80260dc:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80260e0:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 80260e4:	ea4c 0909 	orr.w	r9, ip, r9
 80260e8:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 80260ec:	f8be 5002 	ldrh.w	r5, [lr, #2]
 80260f0:	d019      	beq.n	8026126 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 80260f2:	f425 6cfc 	bic.w	ip, r5, #2016	@ 0x7e0
 80260f6:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 80260fa:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 80260fe:	fb0a fc0c 	mul.w	ip, sl, ip
 8026102:	fb08 f805 	mul.w	r8, r8, r5
 8026106:	ea07 155c 	and.w	r5, r7, ip, lsr #5
 802610a:	f60c 0c01 	addw	ip, ip, #2049	@ 0x801
 802610e:	f108 0b20 	add.w	fp, r8, #32
 8026112:	44ac      	add	ip, r5
 8026114:	eb0b 2518 	add.w	r5, fp, r8, lsr #8
 8026118:	ea07 1c5c 	and.w	ip, r7, ip, lsr #5
 802611c:	0a2d      	lsrs	r5, r5, #8
 802611e:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8026122:	ea4c 0505 	orr.w	r5, ip, r5
 8026126:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 802612a:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 802612e:	ea4f 4a05 	mov.w	sl, r5, lsl #16
 8026132:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 8026136:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 802613a:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 802613e:	ea4c 0909 	orr.w	r9, ip, r9
 8026142:	ea4a 0505 	orr.w	r5, sl, r5
 8026146:	2e00      	cmp	r6, #0
 8026148:	f000 80de 	beq.w	8026308 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7fe>
 802614c:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8026150:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8026152:	3801      	subs	r0, #1
 8026154:	2cff      	cmp	r4, #255	@ 0xff
 8026156:	ea4f 0040 	mov.w	r0, r0, lsl #1
 802615a:	f100 0002 	add.w	r0, r0, #2
 802615e:	eb0e 0800 	add.w	r8, lr, r0
 8026162:	f83e 0000 	ldrh.w	r0, [lr, r0]
 8026166:	d01a      	beq.n	802619e <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x694>
 8026168:	f420 6cfc 	bic.w	ip, r0, #2016	@ 0x7e0
 802616c:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8026170:	ea4f 0ee4 	mov.w	lr, r4, asr #3
 8026174:	fb04 fa00 	mul.w	sl, r4, r0
 8026178:	fb0e fe0c 	mul.w	lr, lr, ip
 802617c:	f10a 0c20 	add.w	ip, sl, #32
 8026180:	ea07 105e 	and.w	r0, r7, lr, lsr #5
 8026184:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 8026188:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 802618c:	4470      	add	r0, lr
 802618e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026192:	ea07 1050 	and.w	r0, r7, r0, lsr #5
 8026196:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 802619a:	ea40 000c 	orr.w	r0, r0, ip
 802619e:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80261a0:	f8b8 c002 	ldrh.w	ip, [r8, #2]
 80261a4:	2cff      	cmp	r4, #255	@ 0xff
 80261a6:	d01a      	beq.n	80261de <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d4>
 80261a8:	f42c 6efc 	bic.w	lr, ip, #2016	@ 0x7e0
 80261ac:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 80261b0:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80261b4:	fb04 fa0c 	mul.w	sl, r4, ip
 80261b8:	fb08 f80e 	mul.w	r8, r8, lr
 80261bc:	f10a 0e20 	add.w	lr, sl, #32
 80261c0:	ea07 1c58 	and.w	ip, r7, r8, lsr #5
 80261c4:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 80261c8:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 80261cc:	44c4      	add	ip, r8
 80261ce:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80261d2:	ea07 1c5c 	and.w	ip, r7, ip, lsr #5
 80261d6:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
 80261da:	ea4c 0c0e 	orr.w	ip, ip, lr
 80261de:	fb16 fe02 	smulbb	lr, r6, r2
 80261e2:	f1c6 0810 	rsb	r8, r6, #16
 80261e6:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 80261ea:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 80261ee:	ea4f 0eee 	mov.w	lr, lr, asr #3
 80261f2:	eba8 0802 	sub.w	r8, r8, r2
 80261f6:	ea4f 4b0c 	mov.w	fp, ip, lsl #16
 80261fa:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 80261fe:	ebce 0242 	rsb	r2, lr, r2, lsl #1
 8026202:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 8026206:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 802620a:	ea4a 0000 	orr.w	r0, sl, r0
 802620e:	436a      	muls	r2, r5
 8026210:	ebce 0646 	rsb	r6, lr, r6, lsl #1
 8026214:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8026218:	fb09 2208 	mla	r2, r9, r8, r2
 802621c:	ea4b 0c0c 	orr.w	ip, fp, ip
 8026220:	fb06 2200 	mla	r2, r6, r0, r2
 8026224:	fb0e 220c 	mla	r2, lr, ip, r2
 8026228:	0d55      	lsrs	r5, r2, #21
 802622a:	0952      	lsrs	r2, r2, #5
 802622c:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8026230:	f422 6cfc 	bic.w	ip, r2, #2016	@ 0x7e0
 8026234:	ea45 000c 	orr.w	r0, r5, ip
 8026238:	b280      	uxth	r0, r0
 802623a:	2bff      	cmp	r3, #255	@ 0xff
 802623c:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8026240:	ea4f 06e0 	mov.w	r6, r0, asr #3
 8026244:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8026248:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 802624c:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8026250:	b2d2      	uxtb	r2, r2
 8026252:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 8026256:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 802625a:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 802625e:	d064      	beq.n	802632a <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x820>
 8026260:	f811 8c01 	ldrb.w	r8, [r1, #-1]
 8026264:	24ff      	movs	r4, #255	@ 0xff
 8026266:	fb03 f508 	mul.w	r5, r3, r8
 802626a:	4443      	add	r3, r8
 802626c:	1c68      	adds	r0, r5, #1
 802626e:	eb00 2025 	add.w	r0, r0, r5, asr #8
 8026272:	f811 5c04 	ldrb.w	r5, [r1, #-4]
 8026276:	1200      	asrs	r0, r0, #8
 8026278:	1a1b      	subs	r3, r3, r0
 802627a:	eba8 0000 	sub.w	r0, r8, r0
 802627e:	f811 8c02 	ldrb.w	r8, [r1, #-2]
 8026282:	4345      	muls	r5, r0
 8026284:	b2db      	uxtb	r3, r3
 8026286:	fb14 5202 	smlabb	r2, r4, r2, r5
 802628a:	24ff      	movs	r4, #255	@ 0xff
 802628c:	f801 3c01 	strb.w	r3, [r1, #-1]
 8026290:	fb92 f2f3 	sdiv	r2, r2, r3
 8026294:	2aff      	cmp	r2, #255	@ 0xff
 8026296:	bfd6      	itet	le
 8026298:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 802629c:	22ff      	movgt	r2, #255	@ 0xff
 802629e:	b2d2      	uxtble	r2, r2
 80262a0:	f801 2c04 	strb.w	r2, [r1, #-4]
 80262a4:	f811 2c03 	ldrb.w	r2, [r1, #-3]
 80262a8:	4342      	muls	r2, r0
 80262aa:	fb00 f008 	mul.w	r0, r0, r8
 80262ae:	fb14 2206 	smlabb	r2, r4, r6, r2
 80262b2:	fb92 f2f3 	sdiv	r2, r2, r3
 80262b6:	2aff      	cmp	r2, #255	@ 0xff
 80262b8:	bfd6      	itet	le
 80262ba:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 80262be:	22ff      	movgt	r2, #255	@ 0xff
 80262c0:	b2d2      	uxtble	r2, r2
 80262c2:	f801 2c03 	strb.w	r2, [r1, #-3]
 80262c6:	22ff      	movs	r2, #255	@ 0xff
 80262c8:	fb12 000c 	smlabb	r0, r2, ip, r0
 80262cc:	fb90 f0f3 	sdiv	r0, r0, r3
 80262d0:	28ff      	cmp	r0, #255	@ 0xff
 80262d2:	bfd6      	itet	le
 80262d4:	ea20 70e0 	bicle.w	r0, r0, r0, asr #31
 80262d8:	20ff      	movgt	r0, #255	@ 0xff
 80262da:	b2c0      	uxtble	r0, r0
 80262dc:	f801 0c02 	strb.w	r0, [r1, #-2]
 80262e0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80262e2:	3104      	adds	r1, #4
 80262e4:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 80262e6:	4413      	add	r3, r2
 80262e8:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 80262ea:	931d      	str	r3, [sp, #116]	@ 0x74
 80262ec:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80262ee:	441a      	add	r2, r3
 80262f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80262f2:	3b01      	subs	r3, #1
 80262f4:	921e      	str	r2, [sp, #120]	@ 0x78
 80262f6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80262f8:	e603      	b.n	8025f02 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 80262fa:	fb08 f505 	mul.w	r5, r8, r5
 80262fe:	fb09 5303 	mla	r3, r9, r3, r5
 8026302:	e6c8      	b.n	8026096 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58c>
 8026304:	46a9      	mov	r9, r5
 8026306:	e6ef      	b.n	80260e8 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5de>
 8026308:	f1c2 0010 	rsb	r0, r2, #16
 802630c:	436a      	muls	r2, r5
 802630e:	fb09 2900 	mla	r9, r9, r0, r2
 8026312:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8026316:	ea4f 5659 	mov.w	r6, r9, lsr #21
 802631a:	ea4f 1059 	mov.w	r0, r9, lsr #5
 802631e:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 8026322:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8026326:	4330      	orrs	r0, r6
 8026328:	e786      	b.n	8026238 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 802632a:	0236      	lsls	r6, r6, #8
 802632c:	ea46 460c 	orr.w	r6, r6, ip, lsl #16
 8026330:	4332      	orrs	r2, r6
 8026332:	f841 2c04 	str.w	r2, [r1, #-4]
 8026336:	e7d3      	b.n	80262e0 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d6>
 8026338:	b013      	add	sp, #76	@ 0x4c
 802633a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802633e <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh>:
 802633e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026342:	e9dd 680a 	ldrd	r6, r8, [sp, #40]	@ 0x28
 8026346:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 802634a:	fb08 6703 	mla	r7, r8, r3, r6
 802634e:	f1b8 0f00 	cmp.w	r8, #0
 8026352:	f89d 4030 	ldrb.w	r4, [sp, #48]	@ 0x30
 8026356:	f89d e034 	ldrb.w	lr, [sp, #52]	@ 0x34
 802635a:	eb02 0a47 	add.w	sl, r2, r7, lsl #1
 802635e:	f89d 5038 	ldrb.w	r5, [sp, #56]	@ 0x38
 8026362:	6808      	ldr	r0, [r1, #0]
 8026364:	f2c0 80d5 	blt.w	8026512 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1d4>
 8026368:	45c1      	cmp	r9, r8
 802636a:	f340 80d2 	ble.w	8026512 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1d4>
 802636e:	2e00      	cmp	r6, #0
 8026370:	f2c0 80cd 	blt.w	802650e <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1d0>
 8026374:	42b3      	cmp	r3, r6
 8026376:	f340 80ca 	ble.w	802650e <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1d0>
 802637a:	f832 c017 	ldrh.w	ip, [r2, r7, lsl #1]
 802637e:	ea4f 272c 	mov.w	r7, ip, asr #8
 8026382:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8026386:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 802638a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802638e:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8026392:	ea47 1b57 	orr.w	fp, r7, r7, lsr #5
 8026396:	ea42 1792 	orr.w	r7, r2, r2, lsr #6
 802639a:	fa5f fc8c 	uxtb.w	ip, ip
 802639e:	023f      	lsls	r7, r7, #8
 80263a0:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 80263a4:	ea47 470b 	orr.w	r7, r7, fp, lsl #16
 80263a8:	ea47 070c 	orr.w	r7, r7, ip
 80263ac:	1c72      	adds	r2, r6, #1
 80263ae:	f100 80b3 	bmi.w	8026518 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1da>
 80263b2:	4293      	cmp	r3, r2
 80263b4:	f340 80b0 	ble.w	8026518 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1da>
 80263b8:	2c00      	cmp	r4, #0
 80263ba:	f000 80ad 	beq.w	8026518 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1da>
 80263be:	f8ba b002 	ldrh.w	fp, [sl, #2]
 80263c2:	ea4f 02eb 	mov.w	r2, fp, asr #3
 80263c6:	ea4f 2c2b 	mov.w	ip, fp, asr #8
 80263ca:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 80263ce:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 80263d2:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 80263d6:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 80263da:	fa5f fb8b 	uxtb.w	fp, fp
 80263de:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 80263e2:	0212      	lsls	r2, r2, #8
 80263e4:	ea4b 1b5b 	orr.w	fp, fp, fp, lsr #5
 80263e8:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
 80263ec:	ea4c 0c0b 	orr.w	ip, ip, fp
 80263f0:	f118 0801 	adds.w	r8, r8, #1
 80263f4:	f100 8094 	bmi.w	8026520 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1e2>
 80263f8:	45c1      	cmp	r9, r8
 80263fa:	f340 8091 	ble.w	8026520 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1e2>
 80263fe:	f1be 0f00 	cmp.w	lr, #0
 8026402:	f000 808d 	beq.w	8026520 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1e2>
 8026406:	2e00      	cmp	r6, #0
 8026408:	f2c0 8088 	blt.w	802651c <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1de>
 802640c:	42b3      	cmp	r3, r6
 802640e:	f340 8085 	ble.w	802651c <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1de>
 8026412:	f83a 8013 	ldrh.w	r8, [sl, r3, lsl #1]
 8026416:	ea4f 2228 	mov.w	r2, r8, asr #8
 802641a:	ea4f 09e8 	mov.w	r9, r8, asr #3
 802641e:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 8026422:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8026426:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
 802642a:	ea42 1b52 	orr.w	fp, r2, r2, lsr #5
 802642e:	ea49 1299 	orr.w	r2, r9, r9, lsr #6
 8026432:	fa5f f888 	uxtb.w	r8, r8
 8026436:	0212      	lsls	r2, r2, #8
 8026438:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 802643c:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
 8026440:	ea42 0208 	orr.w	r2, r2, r8
 8026444:	3601      	adds	r6, #1
 8026446:	d417      	bmi.n	8026478 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x13a>
 8026448:	42b3      	cmp	r3, r6
 802644a:	dd15      	ble.n	8026478 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x13a>
 802644c:	b1a4      	cbz	r4, 8026478 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x13a>
 802644e:	3301      	adds	r3, #1
 8026450:	f83a 6013 	ldrh.w	r6, [sl, r3, lsl #1]
 8026454:	10f3      	asrs	r3, r6, #3
 8026456:	1230      	asrs	r0, r6, #8
 8026458:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 802645c:	00f6      	lsls	r6, r6, #3
 802645e:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8026462:	ea43 1393 	orr.w	r3, r3, r3, lsr #6
 8026466:	ea40 1850 	orr.w	r8, r0, r0, lsr #5
 802646a:	b2f6      	uxtb	r6, r6
 802646c:	0218      	lsls	r0, r3, #8
 802646e:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8026472:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8026476:	4330      	orrs	r0, r6
 8026478:	b2a4      	uxth	r4, r4
 802647a:	f00c 13ff 	and.w	r3, ip, #16711935	@ 0xff00ff
 802647e:	fa1f fe8e 	uxth.w	lr, lr
 8026482:	f007 16ff 	and.w	r6, r7, #16711935	@ 0xff00ff
 8026486:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 802648a:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 802648e:	fb04 f80e 	mul.w	r8, r4, lr
 8026492:	0124      	lsls	r4, r4, #4
 8026494:	2dff      	cmp	r5, #255	@ 0xff
 8026496:	ebc8 1e0e 	rsb	lr, r8, lr, lsl #4
 802649a:	f5c4 7980 	rsb	r9, r4, #256	@ 0x100
 802649e:	eba4 0408 	sub.w	r4, r4, r8
 80264a2:	fa1f fe8e 	uxth.w	lr, lr
 80264a6:	b2a4      	uxth	r4, r4
 80264a8:	eba9 090e 	sub.w	r9, r9, lr
 80264ac:	fb04 f303 	mul.w	r3, r4, r3
 80264b0:	fa1f f989 	uxth.w	r9, r9
 80264b4:	fb04 f40c 	mul.w	r4, r4, ip
 80264b8:	fb09 3606 	mla	r6, r9, r6, r3
 80264bc:	f000 13ff 	and.w	r3, r0, #16711935	@ 0xff00ff
 80264c0:	fb09 4407 	mla	r4, r9, r7, r4
 80264c4:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 80264c8:	fb08 6603 	mla	r6, r8, r3, r6
 80264cc:	f002 13ff 	and.w	r3, r2, #16711935	@ 0xff00ff
 80264d0:	fb08 4000 	mla	r0, r8, r0, r4
 80264d4:	fb0e 6303 	mla	r3, lr, r3, r6
 80264d8:	ea4f 2313 	mov.w	r3, r3, lsr #8
 80264dc:	f003 16ff 	and.w	r6, r3, #16711935	@ 0xff00ff
 80264e0:	f402 437f 	and.w	r3, r2, #65280	@ 0xff00
 80264e4:	fb0e 0303 	mla	r3, lr, r3, r0
 80264e8:	ea4f 2313 	mov.w	r3, r3, lsr #8
 80264ec:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80264f0:	ea43 0306 	orr.w	r3, r3, r6
 80264f4:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80264f8:	f3c3 2007 	ubfx	r0, r3, #8, #8
 80264fc:	b2d4      	uxtb	r4, r2
 80264fe:	b2c6      	uxtb	r6, r0
 8026500:	d110      	bne.n	8026524 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1e6>
 8026502:	700b      	strb	r3, [r1, #0]
 8026504:	7048      	strb	r0, [r1, #1]
 8026506:	708a      	strb	r2, [r1, #2]
 8026508:	70cd      	strb	r5, [r1, #3]
 802650a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802650e:	4607      	mov	r7, r0
 8026510:	e74c      	b.n	80263ac <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x6e>
 8026512:	4684      	mov	ip, r0
 8026514:	4607      	mov	r7, r0
 8026516:	e76b      	b.n	80263f0 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0xb2>
 8026518:	4684      	mov	ip, r0
 802651a:	e769      	b.n	80263f0 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0xb2>
 802651c:	4602      	mov	r2, r0
 802651e:	e791      	b.n	8026444 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x106>
 8026520:	4602      	mov	r2, r0
 8026522:	e7a9      	b.n	8026478 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x13a>
 8026524:	2d00      	cmp	r5, #0
 8026526:	d0f0      	beq.n	802650a <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1cc>
 8026528:	78cf      	ldrb	r7, [r1, #3]
 802652a:	b2db      	uxtb	r3, r3
 802652c:	fb15 f606 	smulbb	r6, r5, r6
 8026530:	fb05 f207 	mul.w	r2, r5, r7
 8026534:	1c50      	adds	r0, r2, #1
 8026536:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 802653a:	19ea      	adds	r2, r5, r7
 802653c:	1200      	asrs	r0, r0, #8
 802653e:	1a12      	subs	r2, r2, r0
 8026540:	1a38      	subs	r0, r7, r0
 8026542:	780f      	ldrb	r7, [r1, #0]
 8026544:	b2d2      	uxtb	r2, r2
 8026546:	4347      	muls	r7, r0
 8026548:	70ca      	strb	r2, [r1, #3]
 802654a:	fb05 7303 	mla	r3, r5, r3, r7
 802654e:	fb15 f504 	smulbb	r5, r5, r4
 8026552:	fb93 f3f2 	sdiv	r3, r3, r2
 8026556:	700b      	strb	r3, [r1, #0]
 8026558:	784b      	ldrb	r3, [r1, #1]
 802655a:	fb00 6303 	mla	r3, r0, r3, r6
 802655e:	fb93 f3f2 	sdiv	r3, r3, r2
 8026562:	704b      	strb	r3, [r1, #1]
 8026564:	788b      	ldrb	r3, [r1, #2]
 8026566:	fb00 5503 	mla	r5, r0, r3, r5
 802656a:	fb95 f5f2 	sdiv	r5, r5, r2
 802656e:	708d      	strb	r5, [r1, #2]
 8026570:	e7cb      	b.n	802650a <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1cc>

08026572 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026572:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026576:	b08f      	sub	sp, #60	@ 0x3c
 8026578:	461f      	mov	r7, r3
 802657a:	920c      	str	r2, [sp, #48]	@ 0x30
 802657c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 802657e:	900d      	str	r0, [sp, #52]	@ 0x34
 8026580:	9107      	str	r1, [sp, #28]
 8026582:	6850      	ldr	r0, [r2, #4]
 8026584:	6812      	ldr	r2, [r2, #0]
 8026586:	f89d 4084 	ldrb.w	r4, [sp, #132]	@ 0x84
 802658a:	e9dd 131e 	ldrd	r1, r3, [sp, #120]	@ 0x78
 802658e:	e9dd 5819 	ldrd	r5, r8, [sp, #100]	@ 0x64
 8026592:	fb00 1303 	mla	r3, r0, r3, r1
 8026596:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 802659a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802659c:	681b      	ldr	r3, [r3, #0]
 802659e:	9306      	str	r3, [sp, #24]
 80265a0:	9b07      	ldr	r3, [sp, #28]
 80265a2:	2b00      	cmp	r3, #0
 80265a4:	dc03      	bgt.n	80265ae <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80265a6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80265a8:	2b00      	cmp	r3, #0
 80265aa:	f340 8230 	ble.w	8026a0e <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49c>
 80265ae:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80265b0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80265b4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80265b8:	1e48      	subs	r0, r1, #1
 80265ba:	1e56      	subs	r6, r2, #1
 80265bc:	2f00      	cmp	r7, #0
 80265be:	f340 80bd 	ble.w	802673c <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 80265c2:	ea5f 4c25 	movs.w	ip, r5, asr #16
 80265c6:	ea4f 4328 	mov.w	r3, r8, asr #16
 80265ca:	d406      	bmi.n	80265da <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80265cc:	4584      	cmp	ip, r0
 80265ce:	da04      	bge.n	80265da <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80265d0:	2b00      	cmp	r3, #0
 80265d2:	db02      	blt.n	80265da <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80265d4:	42b3      	cmp	r3, r6
 80265d6:	f2c0 80b2 	blt.w	802673e <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1cc>
 80265da:	f11c 0c01 	adds.w	ip, ip, #1
 80265de:	f100 80a5 	bmi.w	802672c <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80265e2:	4561      	cmp	r1, ip
 80265e4:	f2c0 80a2 	blt.w	802672c <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80265e8:	3301      	adds	r3, #1
 80265ea:	f100 809f 	bmi.w	802672c <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80265ee:	429a      	cmp	r2, r3
 80265f0:	f2c0 809c 	blt.w	802672c <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80265f4:	46ba      	mov	sl, r7
 80265f6:	464e      	mov	r6, r9
 80265f8:	f1ba 0f00 	cmp.w	sl, #0
 80265fc:	f340 80bb 	ble.w	8026776 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8026600:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8026602:	1429      	asrs	r1, r5, #16
 8026604:	ea4f 4028 	mov.w	r0, r8, asr #16
 8026608:	f3c5 3203 	ubfx	r2, r5, #12, #4
 802660c:	f3c8 3c03 	ubfx	ip, r8, #12, #4
 8026610:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8026614:	f100 8122 	bmi.w	802685c <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ea>
 8026618:	f10e 3bff 	add.w	fp, lr, #4294967295
 802661c:	4559      	cmp	r1, fp
 802661e:	f280 811d 	bge.w	802685c <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ea>
 8026622:	2800      	cmp	r0, #0
 8026624:	f2c0 811a 	blt.w	802685c <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ea>
 8026628:	f103 3bff 	add.w	fp, r3, #4294967295
 802662c:	4558      	cmp	r0, fp
 802662e:	f280 8115 	bge.w	802685c <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ea>
 8026632:	fa0f fe8e 	sxth.w	lr, lr
 8026636:	9b06      	ldr	r3, [sp, #24]
 8026638:	fb00 110e 	mla	r1, r0, lr, r1
 802663c:	eb03 0041 	add.w	r0, r3, r1, lsl #1
 8026640:	f833 b011 	ldrh.w	fp, [r3, r1, lsl #1]
 8026644:	8841      	ldrh	r1, [r0, #2]
 8026646:	f1bc 0f00 	cmp.w	ip, #0
 802664a:	d00b      	beq.n	8026664 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf2>
 802664c:	f10e 4300 	add.w	r3, lr, #2147483648	@ 0x80000000
 8026650:	3b01      	subs	r3, #1
 8026652:	005b      	lsls	r3, r3, #1
 8026654:	3302      	adds	r3, #2
 8026656:	eb00 0e03 	add.w	lr, r0, r3
 802665a:	5ac3      	ldrh	r3, [r0, r3]
 802665c:	9308      	str	r3, [sp, #32]
 802665e:	f8be 3002 	ldrh.w	r3, [lr, #2]
 8026662:	9309      	str	r3, [sp, #36]	@ 0x24
 8026664:	ea4f 400b 	mov.w	r0, fp, lsl #16
 8026668:	f42b 6bfc 	bic.w	fp, fp, #2016	@ 0x7e0
 802666c:	fb12 f30c 	smulbb	r3, r2, ip
 8026670:	f1cc 0e10 	rsb	lr, ip, #16
 8026674:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 8026678:	2cff      	cmp	r4, #255	@ 0xff
 802667a:	ea4f 03e3 	mov.w	r3, r3, asr #3
 802667e:	ebae 0e02 	sub.w	lr, lr, r2
 8026682:	ea40 000b 	orr.w	r0, r0, fp
 8026686:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 802668a:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 802668e:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8026692:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8026696:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 802669a:	ebc3 0c4c 	rsb	ip, r3, ip, lsl #1
 802669e:	ea4b 0101 	orr.w	r1, fp, r1
 80266a2:	fb02 f101 	mul.w	r1, r2, r1
 80266a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80266a8:	fb0e 1e00 	mla	lr, lr, r0, r1
 80266ac:	ea4f 4002 	mov.w	r0, r2, lsl #16
 80266b0:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 80266b4:	9908      	ldr	r1, [sp, #32]
 80266b6:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 80266ba:	ea40 0002 	orr.w	r0, r0, r2
 80266be:	9a08      	ldr	r2, [sp, #32]
 80266c0:	ea4f 4202 	mov.w	r2, r2, lsl #16
 80266c4:	fb03 e000 	mla	r0, r3, r0, lr
 80266c8:	f421 6efc 	bic.w	lr, r1, #2016	@ 0x7e0
 80266cc:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 80266d0:	ea42 020e 	orr.w	r2, r2, lr
 80266d4:	fb0c 0c02 	mla	ip, ip, r2, r0
 80266d8:	ea4f 535c 	mov.w	r3, ip, lsr #21
 80266dc:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80266e0:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80266e4:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 80266e8:	ea43 0c0c 	orr.w	ip, r3, ip
 80266ec:	fa1f f38c 	uxth.w	r3, ip
 80266f0:	ea4f 2223 	mov.w	r2, r3, asr #8
 80266f4:	ea4f 01e3 	mov.w	r1, r3, asr #3
 80266f8:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80266fc:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 8026700:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8026704:	b2db      	uxtb	r3, r3
 8026706:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 802670a:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 802670e:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 8026712:	d174      	bne.n	80267fe <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8026714:	7033      	strb	r3, [r6, #0]
 8026716:	7071      	strb	r1, [r6, #1]
 8026718:	70b2      	strb	r2, [r6, #2]
 802671a:	70f4      	strb	r4, [r6, #3]
 802671c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 802671e:	3604      	adds	r6, #4
 8026720:	f10a 3aff 	add.w	sl, sl, #4294967295
 8026724:	441d      	add	r5, r3
 8026726:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8026728:	4498      	add	r8, r3
 802672a:	e765      	b.n	80265f8 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 802672c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 802672e:	3f01      	subs	r7, #1
 8026730:	f109 0904 	add.w	r9, r9, #4
 8026734:	441d      	add	r5, r3
 8026736:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8026738:	4498      	add	r8, r3
 802673a:	e73f      	b.n	80265bc <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 802673c:	d01f      	beq.n	802677e <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 802673e:	1e7b      	subs	r3, r7, #1
 8026740:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8026742:	fb00 5003 	mla	r0, r0, r3, r5
 8026746:	1400      	asrs	r0, r0, #16
 8026748:	f53f af54 	bmi.w	80265f4 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802674c:	3901      	subs	r1, #1
 802674e:	4288      	cmp	r0, r1
 8026750:	f6bf af50 	bge.w	80265f4 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8026754:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8026756:	fb01 8303 	mla	r3, r1, r3, r8
 802675a:	141b      	asrs	r3, r3, #16
 802675c:	f53f af4a 	bmi.w	80265f4 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8026760:	3a01      	subs	r2, #1
 8026762:	4293      	cmp	r3, r2
 8026764:	f6bf af46 	bge.w	80265f4 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8026768:	f109 0304 	add.w	r3, r9, #4
 802676c:	46ba      	mov	sl, r7
 802676e:	f1ba 0f00 	cmp.w	sl, #0
 8026772:	f300 8090 	bgt.w	8026896 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 8026776:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
 802677a:	eb09 0987 	add.w	r9, r9, r7, lsl #2
 802677e:	9b07      	ldr	r3, [sp, #28]
 8026780:	2b00      	cmp	r3, #0
 8026782:	f340 8144 	ble.w	8026a0e <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49c>
 8026786:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802678a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802678c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8026790:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8026794:	eef0 6a62 	vmov.f32	s13, s5
 8026798:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802679c:	ee31 1a05 	vadd.f32	s2, s2, s10
 80267a0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80267a4:	ee16 5a90 	vmov	r5, s13
 80267a8:	eef0 6a43 	vmov.f32	s13, s6
 80267ac:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80267b0:	ee16 8a90 	vmov	r8, s13
 80267b4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80267b8:	ee61 7a27 	vmul.f32	s15, s2, s15
 80267bc:	ee77 2a62 	vsub.f32	s5, s14, s5
 80267c0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80267c4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80267c8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80267cc:	ee12 2a90 	vmov	r2, s5
 80267d0:	eef0 2a47 	vmov.f32	s5, s14
 80267d4:	fb92 f3f3 	sdiv	r3, r2, r3
 80267d8:	ee13 2a10 	vmov	r2, s6
 80267dc:	931b      	str	r3, [sp, #108]	@ 0x6c
 80267de:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80267e0:	eeb0 3a67 	vmov.f32	s6, s15
 80267e4:	fb92 f3f3 	sdiv	r3, r2, r3
 80267e8:	931c      	str	r3, [sp, #112]	@ 0x70
 80267ea:	9b07      	ldr	r3, [sp, #28]
 80267ec:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80267ee:	3b01      	subs	r3, #1
 80267f0:	9307      	str	r3, [sp, #28]
 80267f2:	bf08      	it	eq
 80267f4:	4617      	moveq	r7, r2
 80267f6:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80267f8:	bf18      	it	ne
 80267fa:	461f      	movne	r7, r3
 80267fc:	e6d0      	b.n	80265a0 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 80267fe:	2c00      	cmp	r4, #0
 8026800:	d08c      	beq.n	802671c <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8026802:	f896 e003 	ldrb.w	lr, [r6, #3]
 8026806:	fb13 f304 	smulbb	r3, r3, r4
 802680a:	fb14 f101 	smulbb	r1, r4, r1
 802680e:	fb14 f202 	smulbb	r2, r4, r2
 8026812:	fb04 fc0e 	mul.w	ip, r4, lr
 8026816:	f10c 0001 	add.w	r0, ip, #1
 802681a:	eb00 201c 	add.w	r0, r0, ip, lsr #8
 802681e:	eb04 0c0e 	add.w	ip, r4, lr
 8026822:	1200      	asrs	r0, r0, #8
 8026824:	ebac 0c00 	sub.w	ip, ip, r0
 8026828:	ebae 0000 	sub.w	r0, lr, r0
 802682c:	f896 e000 	ldrb.w	lr, [r6]
 8026830:	fa5f fc8c 	uxtb.w	ip, ip
 8026834:	fb00 330e 	mla	r3, r0, lr, r3
 8026838:	f886 c003 	strb.w	ip, [r6, #3]
 802683c:	fb93 f3fc 	sdiv	r3, r3, ip
 8026840:	7033      	strb	r3, [r6, #0]
 8026842:	7873      	ldrb	r3, [r6, #1]
 8026844:	fb00 1103 	mla	r1, r0, r3, r1
 8026848:	78b3      	ldrb	r3, [r6, #2]
 802684a:	fb00 2003 	mla	r0, r0, r3, r2
 802684e:	fb91 f1fc 	sdiv	r1, r1, ip
 8026852:	fb90 f0fc 	sdiv	r0, r0, ip
 8026856:	7071      	strb	r1, [r6, #1]
 8026858:	70b0      	strb	r0, [r6, #2]
 802685a:	e75f      	b.n	802671c <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 802685c:	f111 0b01 	adds.w	fp, r1, #1
 8026860:	f53f af5c 	bmi.w	802671c <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8026864:	45de      	cmp	lr, fp
 8026866:	f6ff af59 	blt.w	802671c <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 802686a:	f110 0b01 	adds.w	fp, r0, #1
 802686e:	f53f af55 	bmi.w	802671c <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8026872:	455b      	cmp	r3, fp
 8026874:	f6ff af52 	blt.w	802671c <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8026878:	b21b      	sxth	r3, r3
 802687a:	9101      	str	r1, [sp, #4]
 802687c:	4631      	mov	r1, r6
 802687e:	9300      	str	r3, [sp, #0]
 8026880:	fa0f f38e 	sxth.w	r3, lr
 8026884:	e9cd 0202 	strd	r0, r2, [sp, #8]
 8026888:	e9cd c404 	strd	ip, r4, [sp, #16]
 802688c:	9a06      	ldr	r2, [sp, #24]
 802688e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8026890:	f7ff fd55 	bl	802633e <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh>
 8026894:	e742      	b.n	802671c <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8026896:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8026898:	142e      	asrs	r6, r5, #16
 802689a:	ea4f 4028 	mov.w	r0, r8, asr #16
 802689e:	f3c8 3e03 	ubfx	lr, r8, #12, #4
 80268a2:	f9b2 b008 	ldrsh.w	fp, [r2, #8]
 80268a6:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80268aa:	9a06      	ldr	r2, [sp, #24]
 80268ac:	fb0b 6000 	mla	r0, fp, r0, r6
 80268b0:	9e06      	ldr	r6, [sp, #24]
 80268b2:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 80268b6:	f832 c010 	ldrh.w	ip, [r2, r0, lsl #1]
 80268ba:	8870      	ldrh	r0, [r6, #2]
 80268bc:	f1be 0f00 	cmp.w	lr, #0
 80268c0:	d00b      	beq.n	80268da <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 80268c2:	f10b 4200 	add.w	r2, fp, #2147483648	@ 0x80000000
 80268c6:	3a01      	subs	r2, #1
 80268c8:	0052      	lsls	r2, r2, #1
 80268ca:	3202      	adds	r2, #2
 80268cc:	eb06 0b02 	add.w	fp, r6, r2
 80268d0:	5ab2      	ldrh	r2, [r6, r2]
 80268d2:	920a      	str	r2, [sp, #40]	@ 0x28
 80268d4:	f8bb 2002 	ldrh.w	r2, [fp, #2]
 80268d8:	920b      	str	r2, [sp, #44]	@ 0x2c
 80268da:	ea4f 460c 	mov.w	r6, ip, lsl #16
 80268de:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 80268e2:	fb11 f20e 	smulbb	r2, r1, lr
 80268e6:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 80268ea:	f006 66fc 	and.w	r6, r6, #132120576	@ 0x7e00000
 80268ee:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 80268f2:	10d2      	asrs	r2, r2, #3
 80268f4:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 80268f8:	ea46 060c 	orr.w	r6, r6, ip
 80268fc:	f1ce 0c10 	rsb	ip, lr, #16
 8026900:	ea4b 0000 	orr.w	r0, fp, r0
 8026904:	2cff      	cmp	r4, #255	@ 0xff
 8026906:	ebac 0c01 	sub.w	ip, ip, r1
 802690a:	ebc2 0141 	rsb	r1, r2, r1, lsl #1
 802690e:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8026912:	fb01 f000 	mul.w	r0, r1, r0
 8026916:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8026918:	fb0c 0c06 	mla	ip, ip, r6, r0
 802691c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 802691e:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8026922:	f421 66fc 	bic.w	r6, r1, #2016	@ 0x7e0
 8026926:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8026928:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 802692c:	ea4f 4101 	mov.w	r1, r1, lsl #16
 8026930:	ea4b 0606 	orr.w	r6, fp, r6
 8026934:	f420 6bfc 	bic.w	fp, r0, #2016	@ 0x7e0
 8026938:	f001 61fc 	and.w	r1, r1, #132120576	@ 0x7e00000
 802693c:	fb02 c606 	mla	r6, r2, r6, ip
 8026940:	ebc2 024e 	rsb	r2, r2, lr, lsl #1
 8026944:	ea41 0b0b 	orr.w	fp, r1, fp
 8026948:	fb02 660b 	mla	r6, r2, fp, r6
 802694c:	ea4f 5256 	mov.w	r2, r6, lsr #21
 8026950:	ea4f 1656 	mov.w	r6, r6, lsr #5
 8026954:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8026958:	f426 66fc 	bic.w	r6, r6, #2016	@ 0x7e0
 802695c:	ea46 0602 	orr.w	r6, r6, r2
 8026960:	b2b2      	uxth	r2, r6
 8026962:	ea4f 2122 	mov.w	r1, r2, asr #8
 8026966:	ea4f 00e2 	mov.w	r0, r2, asr #3
 802696a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 802696e:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8026972:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8026976:	b2d2      	uxtb	r2, r2
 8026978:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 802697c:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 8026980:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8026984:	d10f      	bne.n	80269a6 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8026986:	f803 2c04 	strb.w	r2, [r3, #-4]
 802698a:	f803 0c03 	strb.w	r0, [r3, #-3]
 802698e:	f803 1c02 	strb.w	r1, [r3, #-2]
 8026992:	f803 4c01 	strb.w	r4, [r3, #-1]
 8026996:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8026998:	3304      	adds	r3, #4
 802699a:	f10a 3aff 	add.w	sl, sl, #4294967295
 802699e:	4415      	add	r5, r2
 80269a0:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80269a2:	4490      	add	r8, r2
 80269a4:	e6e3      	b.n	802676e <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 80269a6:	2c00      	cmp	r4, #0
 80269a8:	d0f5      	beq.n	8026996 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 80269aa:	f813 ec01 	ldrb.w	lr, [r3, #-1]
 80269ae:	fb12 f204 	smulbb	r2, r2, r4
 80269b2:	fb14 f000 	smulbb	r0, r4, r0
 80269b6:	fb14 f101 	smulbb	r1, r4, r1
 80269ba:	fb04 f60e 	mul.w	r6, r4, lr
 80269be:	f106 0c01 	add.w	ip, r6, #1
 80269c2:	eb0c 2c16 	add.w	ip, ip, r6, lsr #8
 80269c6:	eb04 060e 	add.w	r6, r4, lr
 80269ca:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80269ce:	eba6 060c 	sub.w	r6, r6, ip
 80269d2:	ebae 0c0c 	sub.w	ip, lr, ip
 80269d6:	f813 ec04 	ldrb.w	lr, [r3, #-4]
 80269da:	b2f6      	uxtb	r6, r6
 80269dc:	fb0c 220e 	mla	r2, ip, lr, r2
 80269e0:	f803 6c01 	strb.w	r6, [r3, #-1]
 80269e4:	fb92 f2f6 	sdiv	r2, r2, r6
 80269e8:	f803 2c04 	strb.w	r2, [r3, #-4]
 80269ec:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 80269f0:	fb0c 0002 	mla	r0, ip, r2, r0
 80269f4:	f813 2c02 	ldrb.w	r2, [r3, #-2]
 80269f8:	fb0c 1c02 	mla	ip, ip, r2, r1
 80269fc:	fb90 f0f6 	sdiv	r0, r0, r6
 8026a00:	fb9c fcf6 	sdiv	ip, ip, r6
 8026a04:	f803 0c03 	strb.w	r0, [r3, #-3]
 8026a08:	f803 cc02 	strb.w	ip, [r3, #-2]
 8026a0c:	e7c3      	b.n	8026996 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 8026a0e:	b00f      	add	sp, #60	@ 0x3c
 8026a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026a14 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh>:
 8026a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026a18:	e9dd 780a 	ldrd	r7, r8, [sp, #40]	@ 0x28
 8026a1c:	f9bd a024 	ldrsh.w	sl, [sp, #36]	@ 0x24
 8026a20:	fb08 7403 	mla	r4, r8, r3, r7
 8026a24:	f1b8 0f00 	cmp.w	r8, #0
 8026a28:	f89d 6030 	ldrb.w	r6, [sp, #48]	@ 0x30
 8026a2c:	f89d c034 	ldrb.w	ip, [sp, #52]	@ 0x34
 8026a30:	eb02 0944 	add.w	r9, r2, r4, lsl #1
 8026a34:	6808      	ldr	r0, [r1, #0]
 8026a36:	f2c0 80be 	blt.w	8026bb6 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x1a2>
 8026a3a:	45c2      	cmp	sl, r8
 8026a3c:	f340 80bb 	ble.w	8026bb6 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x1a2>
 8026a40:	2f00      	cmp	r7, #0
 8026a42:	f2c0 80b6 	blt.w	8026bb2 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x19e>
 8026a46:	42bb      	cmp	r3, r7
 8026a48:	f340 80b3 	ble.w	8026bb2 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x19e>
 8026a4c:	f832 2014 	ldrh.w	r2, [r2, r4, lsl #1]
 8026a50:	10d5      	asrs	r5, r2, #3
 8026a52:	1214      	asrs	r4, r2, #8
 8026a54:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8026a58:	00d2      	lsls	r2, r2, #3
 8026a5a:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 8026a5e:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8026a62:	ea44 1e54 	orr.w	lr, r4, r4, lsr #5
 8026a66:	b2d2      	uxtb	r2, r2
 8026a68:	022c      	lsls	r4, r5, #8
 8026a6a:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8026a6e:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8026a72:	4314      	orrs	r4, r2
 8026a74:	1c7a      	adds	r2, r7, #1
 8026a76:	f100 80a1 	bmi.w	8026bbc <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x1a8>
 8026a7a:	4293      	cmp	r3, r2
 8026a7c:	f340 809e 	ble.w	8026bbc <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x1a8>
 8026a80:	2e00      	cmp	r6, #0
 8026a82:	f000 809b 	beq.w	8026bbc <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x1a8>
 8026a86:	f8b9 e002 	ldrh.w	lr, [r9, #2]
 8026a8a:	ea4f 252e 	mov.w	r5, lr, asr #8
 8026a8e:	ea4f 02ee 	mov.w	r2, lr, asr #3
 8026a92:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8026a96:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8026a9a:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8026a9e:	ea45 1b55 	orr.w	fp, r5, r5, lsr #5
 8026aa2:	ea42 1592 	orr.w	r5, r2, r2, lsr #6
 8026aa6:	fa5f fe8e 	uxtb.w	lr, lr
 8026aaa:	022d      	lsls	r5, r5, #8
 8026aac:	ea4e 1e5e 	orr.w	lr, lr, lr, lsr #5
 8026ab0:	ea45 450b 	orr.w	r5, r5, fp, lsl #16
 8026ab4:	ea45 050e 	orr.w	r5, r5, lr
 8026ab8:	f118 0801 	adds.w	r8, r8, #1
 8026abc:	f100 8082 	bmi.w	8026bc4 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x1b0>
 8026ac0:	45c2      	cmp	sl, r8
 8026ac2:	dd7f      	ble.n	8026bc4 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x1b0>
 8026ac4:	f1bc 0f00 	cmp.w	ip, #0
 8026ac8:	d07c      	beq.n	8026bc4 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x1b0>
 8026aca:	2f00      	cmp	r7, #0
 8026acc:	db78      	blt.n	8026bc0 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x1ac>
 8026ace:	42bb      	cmp	r3, r7
 8026ad0:	dd76      	ble.n	8026bc0 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x1ac>
 8026ad2:	f839 e013 	ldrh.w	lr, [r9, r3, lsl #1]
 8026ad6:	ea4f 08ee 	mov.w	r8, lr, asr #3
 8026ada:	ea4f 222e 	mov.w	r2, lr, asr #8
 8026ade:	f008 08fc 	and.w	r8, r8, #252	@ 0xfc
 8026ae2:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8026ae6:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 8026aea:	ea48 1898 	orr.w	r8, r8, r8, lsr #6
 8026aee:	ea42 1a52 	orr.w	sl, r2, r2, lsr #5
 8026af2:	fa5f fe8e 	uxtb.w	lr, lr
 8026af6:	ea4f 2208 	mov.w	r2, r8, lsl #8
 8026afa:	ea4e 1e5e 	orr.w	lr, lr, lr, lsr #5
 8026afe:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 8026b02:	ea42 020e 	orr.w	r2, r2, lr
 8026b06:	3701      	adds	r7, #1
 8026b08:	d417      	bmi.n	8026b3a <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x126>
 8026b0a:	42bb      	cmp	r3, r7
 8026b0c:	dd15      	ble.n	8026b3a <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x126>
 8026b0e:	b1a6      	cbz	r6, 8026b3a <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x126>
 8026b10:	3301      	adds	r3, #1
 8026b12:	f839 3013 	ldrh.w	r3, [r9, r3, lsl #1]
 8026b16:	10df      	asrs	r7, r3, #3
 8026b18:	1218      	asrs	r0, r3, #8
 8026b1a:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8026b1e:	00db      	lsls	r3, r3, #3
 8026b20:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8026b24:	ea47 1797 	orr.w	r7, r7, r7, lsr #6
 8026b28:	ea40 1e50 	orr.w	lr, r0, r0, lsr #5
 8026b2c:	b2db      	uxtb	r3, r3
 8026b2e:	0238      	lsls	r0, r7, #8
 8026b30:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 8026b34:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8026b38:	4318      	orrs	r0, r3
 8026b3a:	b2b6      	uxth	r6, r6
 8026b3c:	f005 13ff 	and.w	r3, r5, #16711935	@ 0xff00ff
 8026b40:	fa1f f78c 	uxth.w	r7, ip
 8026b44:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 8026b48:	f004 18ff 	and.w	r8, r4, #16711935	@ 0xff00ff
 8026b4c:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 8026b50:	fb06 fc07 	mul.w	ip, r6, r7
 8026b54:	0136      	lsls	r6, r6, #4
 8026b56:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 8026b5a:	f5c6 7e80 	rsb	lr, r6, #256	@ 0x100
 8026b5e:	eba6 060c 	sub.w	r6, r6, ip
 8026b62:	b2bf      	uxth	r7, r7
 8026b64:	b2b6      	uxth	r6, r6
 8026b66:	ebae 0e07 	sub.w	lr, lr, r7
 8026b6a:	4373      	muls	r3, r6
 8026b6c:	fa1f fe8e 	uxth.w	lr, lr
 8026b70:	4375      	muls	r5, r6
 8026b72:	fb0e 3808 	mla	r8, lr, r8, r3
 8026b76:	f000 13ff 	and.w	r3, r0, #16711935	@ 0xff00ff
 8026b7a:	fb0e 5404 	mla	r4, lr, r4, r5
 8026b7e:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8026b82:	fb0c 8803 	mla	r8, ip, r3, r8
 8026b86:	f002 13ff 	and.w	r3, r2, #16711935	@ 0xff00ff
 8026b8a:	fb0c 4000 	mla	r0, ip, r0, r4
 8026b8e:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8026b92:	fb07 8303 	mla	r3, r7, r3, r8
 8026b96:	fb07 0002 	mla	r0, r7, r2, r0
 8026b9a:	0a1b      	lsrs	r3, r3, #8
 8026b9c:	0a00      	lsrs	r0, r0, #8
 8026b9e:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8026ba2:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8026ba6:	4318      	orrs	r0, r3
 8026ba8:	f040 407f 	orr.w	r0, r0, #4278190080	@ 0xff000000
 8026bac:	6008      	str	r0, [r1, #0]
 8026bae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026bb2:	4604      	mov	r4, r0
 8026bb4:	e75e      	b.n	8026a74 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x60>
 8026bb6:	4605      	mov	r5, r0
 8026bb8:	4604      	mov	r4, r0
 8026bba:	e77d      	b.n	8026ab8 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0xa4>
 8026bbc:	4605      	mov	r5, r0
 8026bbe:	e77b      	b.n	8026ab8 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0xa4>
 8026bc0:	4602      	mov	r2, r0
 8026bc2:	e7a0      	b.n	8026b06 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0xf2>
 8026bc4:	4602      	mov	r2, r0
 8026bc6:	e7b8      	b.n	8026b3a <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x126>

08026bc8 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026bcc:	b08f      	sub	sp, #60	@ 0x3c
 8026bce:	461d      	mov	r5, r3
 8026bd0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8026bd2:	9107      	str	r1, [sp, #28]
 8026bd4:	920c      	str	r2, [sp, #48]	@ 0x30
 8026bd6:	6859      	ldr	r1, [r3, #4]
 8026bd8:	681b      	ldr	r3, [r3, #0]
 8026bda:	900d      	str	r0, [sp, #52]	@ 0x34
 8026bdc:	e9dd 271e 	ldrd	r2, r7, [sp, #120]	@ 0x78
 8026be0:	e9dd 4619 	ldrd	r4, r6, [sp, #100]	@ 0x64
 8026be4:	fb01 2707 	mla	r7, r1, r7, r2
 8026be8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8026bec:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8026bee:	f8d3 8000 	ldr.w	r8, [r3]
 8026bf2:	9b07      	ldr	r3, [sp, #28]
 8026bf4:	2b00      	cmp	r3, #0
 8026bf6:	dc03      	bgt.n	8026c00 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8026bf8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8026bfa:	2b00      	cmp	r3, #0
 8026bfc:	f340 81aa 	ble.w	8026f54 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38c>
 8026c00:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8026c02:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026c06:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8026c0a:	1e48      	subs	r0, r1, #1
 8026c0c:	f102 3cff 	add.w	ip, r2, #4294967295
 8026c10:	2d00      	cmp	r5, #0
 8026c12:	f340 80b0 	ble.w	8026d76 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8026c16:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8026c1a:	ea4f 4326 	mov.w	r3, r6, asr #16
 8026c1e:	d406      	bmi.n	8026c2e <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8026c20:	4586      	cmp	lr, r0
 8026c22:	da04      	bge.n	8026c2e <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8026c24:	2b00      	cmp	r3, #0
 8026c26:	db02      	blt.n	8026c2e <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8026c28:	4563      	cmp	r3, ip
 8026c2a:	f2c0 80a5 	blt.w	8026d78 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8026c2e:	f11e 0e01 	adds.w	lr, lr, #1
 8026c32:	f100 8099 	bmi.w	8026d68 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 8026c36:	4571      	cmp	r1, lr
 8026c38:	f2c0 8096 	blt.w	8026d68 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 8026c3c:	3301      	adds	r3, #1
 8026c3e:	f100 8093 	bmi.w	8026d68 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 8026c42:	429a      	cmp	r2, r3
 8026c44:	f2c0 8090 	blt.w	8026d68 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 8026c48:	46aa      	mov	sl, r5
 8026c4a:	46b9      	mov	r9, r7
 8026c4c:	f1ba 0f00 	cmp.w	sl, #0
 8026c50:	f340 80ac 	ble.w	8026dac <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 8026c54:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8026c56:	1421      	asrs	r1, r4, #16
 8026c58:	ea4f 4026 	mov.w	r0, r6, asr #16
 8026c5c:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8026c60:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8026c64:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8026c68:	f100 80e4 	bmi.w	8026e34 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8026c6c:	f10e 3bff 	add.w	fp, lr, #4294967295
 8026c70:	4559      	cmp	r1, fp
 8026c72:	f280 80df 	bge.w	8026e34 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8026c76:	2800      	cmp	r0, #0
 8026c78:	f2c0 80dc 	blt.w	8026e34 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8026c7c:	f103 3bff 	add.w	fp, r3, #4294967295
 8026c80:	4558      	cmp	r0, fp
 8026c82:	f280 80d7 	bge.w	8026e34 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8026c86:	fa0f fe8e 	sxth.w	lr, lr
 8026c8a:	fb00 110e 	mla	r1, r0, lr, r1
 8026c8e:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8026c92:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 8026c96:	8841      	ldrh	r1, [r0, #2]
 8026c98:	f1bc 0f00 	cmp.w	ip, #0
 8026c9c:	d00b      	beq.n	8026cb6 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xee>
 8026c9e:	f10e 4300 	add.w	r3, lr, #2147483648	@ 0x80000000
 8026ca2:	3b01      	subs	r3, #1
 8026ca4:	005b      	lsls	r3, r3, #1
 8026ca6:	3302      	adds	r3, #2
 8026ca8:	eb00 0e03 	add.w	lr, r0, r3
 8026cac:	5ac3      	ldrh	r3, [r0, r3]
 8026cae:	9308      	str	r3, [sp, #32]
 8026cb0:	f8be 3002 	ldrh.w	r3, [lr, #2]
 8026cb4:	9309      	str	r3, [sp, #36]	@ 0x24
 8026cb6:	ea4f 400b 	mov.w	r0, fp, lsl #16
 8026cba:	f42b 6bfc 	bic.w	fp, fp, #2016	@ 0x7e0
 8026cbe:	fb12 f30c 	smulbb	r3, r2, ip
 8026cc2:	f1cc 0e10 	rsb	lr, ip, #16
 8026cc6:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 8026cca:	10db      	asrs	r3, r3, #3
 8026ccc:	ebae 0e02 	sub.w	lr, lr, r2
 8026cd0:	ea40 000b 	orr.w	r0, r0, fp
 8026cd4:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8026cd8:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 8026cdc:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8026ce0:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8026ce4:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8026ce8:	ea4b 0101 	orr.w	r1, fp, r1
 8026cec:	4351      	muls	r1, r2
 8026cee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8026cf0:	fb0e 1e00 	mla	lr, lr, r0, r1
 8026cf4:	0410      	lsls	r0, r2, #16
 8026cf6:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8026cfa:	9908      	ldr	r1, [sp, #32]
 8026cfc:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 8026d00:	4310      	orrs	r0, r2
 8026d02:	9a08      	ldr	r2, [sp, #32]
 8026d04:	0412      	lsls	r2, r2, #16
 8026d06:	fb03 e000 	mla	r0, r3, r0, lr
 8026d0a:	f421 6efc 	bic.w	lr, r1, #2016	@ 0x7e0
 8026d0e:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8026d12:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8026d16:	ea42 020e 	orr.w	r2, r2, lr
 8026d1a:	fb03 0302 	mla	r3, r3, r2, r0
 8026d1e:	0d59      	lsrs	r1, r3, #21
 8026d20:	095b      	lsrs	r3, r3, #5
 8026d22:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8026d26:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8026d2a:	430b      	orrs	r3, r1
 8026d2c:	b299      	uxth	r1, r3
 8026d2e:	10ca      	asrs	r2, r1, #3
 8026d30:	1208      	asrs	r0, r1, #8
 8026d32:	f002 03fc 	and.w	r3, r2, #252	@ 0xfc
 8026d36:	00c9      	lsls	r1, r1, #3
 8026d38:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8026d3c:	ea43 1393 	orr.w	r3, r3, r3, lsr #6
 8026d40:	b2c9      	uxtb	r1, r1
 8026d42:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 8026d46:	021b      	lsls	r3, r3, #8
 8026d48:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 8026d4c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8026d50:	430b      	orrs	r3, r1
 8026d52:	f8c9 3000 	str.w	r3, [r9]
 8026d56:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8026d58:	f109 0904 	add.w	r9, r9, #4
 8026d5c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8026d60:	441c      	add	r4, r3
 8026d62:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8026d64:	441e      	add	r6, r3
 8026d66:	e771      	b.n	8026c4c <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8026d68:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8026d6a:	3d01      	subs	r5, #1
 8026d6c:	3704      	adds	r7, #4
 8026d6e:	441c      	add	r4, r3
 8026d70:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8026d72:	441e      	add	r6, r3
 8026d74:	e74c      	b.n	8026c10 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8026d76:	d01d      	beq.n	8026db4 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 8026d78:	1e6b      	subs	r3, r5, #1
 8026d7a:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8026d7c:	fb00 4003 	mla	r0, r0, r3, r4
 8026d80:	1400      	asrs	r0, r0, #16
 8026d82:	f53f af61 	bmi.w	8026c48 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8026d86:	3901      	subs	r1, #1
 8026d88:	4288      	cmp	r0, r1
 8026d8a:	f6bf af5d 	bge.w	8026c48 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8026d8e:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8026d90:	fb01 6303 	mla	r3, r1, r3, r6
 8026d94:	141b      	asrs	r3, r3, #16
 8026d96:	f53f af57 	bmi.w	8026c48 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8026d9a:	3a01      	subs	r2, #1
 8026d9c:	4293      	cmp	r3, r2
 8026d9e:	f6bf af53 	bge.w	8026c48 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8026da2:	46a9      	mov	r9, r5
 8026da4:	46ba      	mov	sl, r7
 8026da6:	f1b9 0f00 	cmp.w	r9, #0
 8026daa:	dc5b      	bgt.n	8026e64 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 8026dac:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8026db0:	eb07 0785 	add.w	r7, r7, r5, lsl #2
 8026db4:	9b07      	ldr	r3, [sp, #28]
 8026db6:	2b00      	cmp	r3, #0
 8026db8:	f340 80cc 	ble.w	8026f54 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38c>
 8026dbc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8026dc0:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8026dc2:	ee30 0a04 	vadd.f32	s0, s0, s8
 8026dc6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8026dca:	eef0 6a62 	vmov.f32	s13, s5
 8026dce:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8026dd2:	ee31 1a05 	vadd.f32	s2, s2, s10
 8026dd6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026dda:	ee16 4a90 	vmov	r4, s13
 8026dde:	eef0 6a43 	vmov.f32	s13, s6
 8026de2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026de6:	ee16 6a90 	vmov	r6, s13
 8026dea:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8026dee:	ee61 7a27 	vmul.f32	s15, s2, s15
 8026df2:	ee77 2a62 	vsub.f32	s5, s14, s5
 8026df6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8026dfa:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8026dfe:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8026e02:	ee12 2a90 	vmov	r2, s5
 8026e06:	eef0 2a47 	vmov.f32	s5, s14
 8026e0a:	fb92 f3f3 	sdiv	r3, r2, r3
 8026e0e:	ee13 2a10 	vmov	r2, s6
 8026e12:	931b      	str	r3, [sp, #108]	@ 0x6c
 8026e14:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8026e16:	eeb0 3a67 	vmov.f32	s6, s15
 8026e1a:	fb92 f3f3 	sdiv	r3, r2, r3
 8026e1e:	931c      	str	r3, [sp, #112]	@ 0x70
 8026e20:	9b07      	ldr	r3, [sp, #28]
 8026e22:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8026e24:	3b01      	subs	r3, #1
 8026e26:	9307      	str	r3, [sp, #28]
 8026e28:	bf08      	it	eq
 8026e2a:	4615      	moveq	r5, r2
 8026e2c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8026e2e:	bf18      	it	ne
 8026e30:	461d      	movne	r5, r3
 8026e32:	e6de      	b.n	8026bf2 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 8026e34:	f111 0b01 	adds.w	fp, r1, #1
 8026e38:	d48d      	bmi.n	8026d56 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 8026e3a:	45de      	cmp	lr, fp
 8026e3c:	db8b      	blt.n	8026d56 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 8026e3e:	f110 0b01 	adds.w	fp, r0, #1
 8026e42:	d488      	bmi.n	8026d56 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 8026e44:	455b      	cmp	r3, fp
 8026e46:	db86      	blt.n	8026d56 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 8026e48:	b21b      	sxth	r3, r3
 8026e4a:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8026e4e:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 8026e52:	9300      	str	r3, [sp, #0]
 8026e54:	4642      	mov	r2, r8
 8026e56:	fa0f f38e 	sxth.w	r3, lr
 8026e5a:	4649      	mov	r1, r9
 8026e5c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8026e5e:	f7ff fdd9 	bl	8026a14 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh>
 8026e62:	e778      	b.n	8026d56 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 8026e64:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8026e66:	1420      	asrs	r0, r4, #16
 8026e68:	1431      	asrs	r1, r6, #16
 8026e6a:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8026e6e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8026e72:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8026e76:	fb03 0101 	mla	r1, r3, r1, r0
 8026e7a:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8026e7e:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 8026e82:	8841      	ldrh	r1, [r0, #2]
 8026e84:	f1be 0f00 	cmp.w	lr, #0
 8026e88:	d00b      	beq.n	8026ea2 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8026e8a:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8026e8e:	3b01      	subs	r3, #1
 8026e90:	005b      	lsls	r3, r3, #1
 8026e92:	3302      	adds	r3, #2
 8026e94:	eb00 0b03 	add.w	fp, r0, r3
 8026e98:	5ac3      	ldrh	r3, [r0, r3]
 8026e9a:	930a      	str	r3, [sp, #40]	@ 0x28
 8026e9c:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8026ea0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8026ea2:	ea4f 400c 	mov.w	r0, ip, lsl #16
 8026ea6:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 8026eaa:	fb12 f30e 	smulbb	r3, r2, lr
 8026eae:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8026eb2:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 8026eb6:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 8026eba:	10db      	asrs	r3, r3, #3
 8026ebc:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8026ec0:	ea40 000c 	orr.w	r0, r0, ip
 8026ec4:	f1ce 0c10 	rsb	ip, lr, #16
 8026ec8:	ea4b 0101 	orr.w	r1, fp, r1
 8026ecc:	f109 39ff 	add.w	r9, r9, #4294967295
 8026ed0:	ebac 0c02 	sub.w	ip, ip, r2
 8026ed4:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8026ed8:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8026edc:	4351      	muls	r1, r2
 8026ede:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8026ee0:	fb0c 1c00 	mla	ip, ip, r0, r1
 8026ee4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8026ee6:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8026eea:	f422 60fc 	bic.w	r0, r2, #2016	@ 0x7e0
 8026eee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8026ef0:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8026ef4:	0412      	lsls	r2, r2, #16
 8026ef6:	ea4b 0000 	orr.w	r0, fp, r0
 8026efa:	f421 6bfc 	bic.w	fp, r1, #2016	@ 0x7e0
 8026efe:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8026f02:	fb03 c000 	mla	r0, r3, r0, ip
 8026f06:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8026f0a:	ea42 0b0b 	orr.w	fp, r2, fp
 8026f0e:	fb03 000b 	mla	r0, r3, fp, r0
 8026f12:	0d42      	lsrs	r2, r0, #21
 8026f14:	0940      	lsrs	r0, r0, #5
 8026f16:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8026f1a:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8026f1e:	4310      	orrs	r0, r2
 8026f20:	b282      	uxth	r2, r0
 8026f22:	10d3      	asrs	r3, r2, #3
 8026f24:	1211      	asrs	r1, r2, #8
 8026f26:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 8026f2a:	00d2      	lsls	r2, r2, #3
 8026f2c:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8026f30:	ea43 1393 	orr.w	r3, r3, r3, lsr #6
 8026f34:	b2d2      	uxtb	r2, r2
 8026f36:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 8026f3a:	021b      	lsls	r3, r3, #8
 8026f3c:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8026f40:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8026f44:	431a      	orrs	r2, r3
 8026f46:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8026f48:	441c      	add	r4, r3
 8026f4a:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8026f4c:	f84a 2b04 	str.w	r2, [sl], #4
 8026f50:	441e      	add	r6, r3
 8026f52:	e728      	b.n	8026da6 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 8026f54:	b00f      	add	sp, #60	@ 0x3c
 8026f56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026f5a <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh>:
 8026f5a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026f5e:	e9dd 690a 	ldrd	r6, r9, [sp, #40]	@ 0x28
 8026f62:	f9bd a024 	ldrsh.w	sl, [sp, #36]	@ 0x24
 8026f66:	fb09 6c03 	mla	ip, r9, r3, r6
 8026f6a:	f1b9 0f00 	cmp.w	r9, #0
 8026f6e:	f89d 4030 	ldrb.w	r4, [sp, #48]	@ 0x30
 8026f72:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8026f76:	f89d e034 	ldrb.w	lr, [sp, #52]	@ 0x34
 8026f7a:	f89d 5038 	ldrb.w	r5, [sp, #56]	@ 0x38
 8026f7e:	eb02 080c 	add.w	r8, r2, ip
 8026f82:	6808      	ldr	r0, [r1, #0]
 8026f84:	f2c0 80a0 	blt.w	80270c8 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x16e>
 8026f88:	45ca      	cmp	sl, r9
 8026f8a:	f340 809d 	ble.w	80270c8 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x16e>
 8026f8e:	2e00      	cmp	r6, #0
 8026f90:	f2c0 8098 	blt.w	80270c4 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x16a>
 8026f94:	42b3      	cmp	r3, r6
 8026f96:	f340 8095 	ble.w	80270c4 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x16a>
 8026f9a:	f898 7002 	ldrb.w	r7, [r8, #2]
 8026f9e:	f898 b001 	ldrb.w	fp, [r8, #1]
 8026fa2:	043f      	lsls	r7, r7, #16
 8026fa4:	f812 200c 	ldrb.w	r2, [r2, ip]
 8026fa8:	ea47 270b 	orr.w	r7, r7, fp, lsl #8
 8026fac:	4317      	orrs	r7, r2
 8026fae:	1c72      	adds	r2, r6, #1
 8026fb0:	f100 808b 	bmi.w	80270ca <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x170>
 8026fb4:	4293      	cmp	r3, r2
 8026fb6:	f340 8088 	ble.w	80270ca <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x170>
 8026fba:	2c00      	cmp	r4, #0
 8026fbc:	f000 8085 	beq.w	80270ca <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x170>
 8026fc0:	f898 c005 	ldrb.w	ip, [r8, #5]
 8026fc4:	f898 2004 	ldrb.w	r2, [r8, #4]
 8026fc8:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 8026fcc:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8
 8026fd0:	f898 2003 	ldrb.w	r2, [r8, #3]
 8026fd4:	ea4c 0c02 	orr.w	ip, ip, r2
 8026fd8:	f119 0901 	adds.w	r9, r9, #1
 8026fdc:	d479      	bmi.n	80270d2 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x178>
 8026fde:	45ca      	cmp	sl, r9
 8026fe0:	dd77      	ble.n	80270d2 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x178>
 8026fe2:	f1be 0f00 	cmp.w	lr, #0
 8026fe6:	d074      	beq.n	80270d2 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x178>
 8026fe8:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
 8026fec:	2e00      	cmp	r6, #0
 8026fee:	eb08 090a 	add.w	r9, r8, sl
 8026ff2:	db6c      	blt.n	80270ce <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x174>
 8026ff4:	42b3      	cmp	r3, r6
 8026ff6:	dd6a      	ble.n	80270ce <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x174>
 8026ff8:	f899 2002 	ldrb.w	r2, [r9, #2]
 8026ffc:	f899 b001 	ldrb.w	fp, [r9, #1]
 8027000:	0412      	lsls	r2, r2, #16
 8027002:	f818 800a 	ldrb.w	r8, [r8, sl]
 8027006:	ea42 220b 	orr.w	r2, r2, fp, lsl #8
 802700a:	ea42 0208 	orr.w	r2, r2, r8
 802700e:	3601      	adds	r6, #1
 8027010:	d40c      	bmi.n	802702c <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0xd2>
 8027012:	42b3      	cmp	r3, r6
 8027014:	dd0a      	ble.n	802702c <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0xd2>
 8027016:	b14c      	cbz	r4, 802702c <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0xd2>
 8027018:	f899 0005 	ldrb.w	r0, [r9, #5]
 802701c:	f899 3004 	ldrb.w	r3, [r9, #4]
 8027020:	0400      	lsls	r0, r0, #16
 8027022:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8027026:	f899 3003 	ldrb.w	r3, [r9, #3]
 802702a:	4318      	orrs	r0, r3
 802702c:	fa1f f38e 	uxth.w	r3, lr
 8027030:	f007 16ff 	and.w	r6, r7, #16711935	@ 0xff00ff
 8027034:	b2a4      	uxth	r4, r4
 8027036:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 802703a:	2dff      	cmp	r5, #255	@ 0xff
 802703c:	fb04 f803 	mul.w	r8, r4, r3
 8027040:	ea4f 1404 	mov.w	r4, r4, lsl #4
 8027044:	ebc8 1303 	rsb	r3, r8, r3, lsl #4
 8027048:	f5c4 7980 	rsb	r9, r4, #256	@ 0x100
 802704c:	eba4 0408 	sub.w	r4, r4, r8
 8027050:	fa1f fe83 	uxth.w	lr, r3
 8027054:	f00c 13ff 	and.w	r3, ip, #16711935	@ 0xff00ff
 8027058:	b2a4      	uxth	r4, r4
 802705a:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 802705e:	eba9 090e 	sub.w	r9, r9, lr
 8027062:	fb04 f303 	mul.w	r3, r4, r3
 8027066:	fa1f f989 	uxth.w	r9, r9
 802706a:	fb04 f40c 	mul.w	r4, r4, ip
 802706e:	fb09 3606 	mla	r6, r9, r6, r3
 8027072:	f000 13ff 	and.w	r3, r0, #16711935	@ 0xff00ff
 8027076:	fb09 4407 	mla	r4, r9, r7, r4
 802707a:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 802707e:	fb08 6603 	mla	r6, r8, r3, r6
 8027082:	f002 13ff 	and.w	r3, r2, #16711935	@ 0xff00ff
 8027086:	fb08 4000 	mla	r0, r8, r0, r4
 802708a:	fb0e 6303 	mla	r3, lr, r3, r6
 802708e:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8027092:	f003 16ff 	and.w	r6, r3, #16711935	@ 0xff00ff
 8027096:	f402 437f 	and.w	r3, r2, #65280	@ 0xff00
 802709a:	fb0e 0303 	mla	r3, lr, r3, r0
 802709e:	ea4f 2313 	mov.w	r3, r3, lsr #8
 80270a2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80270a6:	ea43 0306 	orr.w	r3, r3, r6
 80270aa:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80270ae:	f3c3 2007 	ubfx	r0, r3, #8, #8
 80270b2:	b2d4      	uxtb	r4, r2
 80270b4:	b2c6      	uxtb	r6, r0
 80270b6:	d10e      	bne.n	80270d6 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x17c>
 80270b8:	700b      	strb	r3, [r1, #0]
 80270ba:	7048      	strb	r0, [r1, #1]
 80270bc:	708a      	strb	r2, [r1, #2]
 80270be:	70cd      	strb	r5, [r1, #3]
 80270c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80270c4:	4607      	mov	r7, r0
 80270c6:	e772      	b.n	8026fae <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x54>
 80270c8:	4607      	mov	r7, r0
 80270ca:	4684      	mov	ip, r0
 80270cc:	e784      	b.n	8026fd8 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x7e>
 80270ce:	4602      	mov	r2, r0
 80270d0:	e79d      	b.n	802700e <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0xb4>
 80270d2:	4602      	mov	r2, r0
 80270d4:	e7aa      	b.n	802702c <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0xd2>
 80270d6:	2d00      	cmp	r5, #0
 80270d8:	d0f2      	beq.n	80270c0 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x166>
 80270da:	78cf      	ldrb	r7, [r1, #3]
 80270dc:	b2db      	uxtb	r3, r3
 80270de:	fb15 f606 	smulbb	r6, r5, r6
 80270e2:	fb05 f207 	mul.w	r2, r5, r7
 80270e6:	1c50      	adds	r0, r2, #1
 80270e8:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 80270ec:	19ea      	adds	r2, r5, r7
 80270ee:	1200      	asrs	r0, r0, #8
 80270f0:	1a12      	subs	r2, r2, r0
 80270f2:	1a38      	subs	r0, r7, r0
 80270f4:	780f      	ldrb	r7, [r1, #0]
 80270f6:	b2d2      	uxtb	r2, r2
 80270f8:	4347      	muls	r7, r0
 80270fa:	70ca      	strb	r2, [r1, #3]
 80270fc:	fb05 7303 	mla	r3, r5, r3, r7
 8027100:	fb15 f504 	smulbb	r5, r5, r4
 8027104:	fb93 f3f2 	sdiv	r3, r3, r2
 8027108:	700b      	strb	r3, [r1, #0]
 802710a:	784b      	ldrb	r3, [r1, #1]
 802710c:	fb00 6303 	mla	r3, r0, r3, r6
 8027110:	fb93 f3f2 	sdiv	r3, r3, r2
 8027114:	704b      	strb	r3, [r1, #1]
 8027116:	788b      	ldrb	r3, [r1, #2]
 8027118:	fb00 5503 	mla	r5, r0, r3, r5
 802711c:	fb95 f5f2 	sdiv	r5, r5, r2
 8027120:	708d      	strb	r5, [r1, #2]
 8027122:	e7cd      	b.n	80270c0 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x166>

08027124 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027128:	b09b      	sub	sp, #108	@ 0x6c
 802712a:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 802712e:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8027130:	9019      	str	r0, [sp, #100]	@ 0x64
 8027132:	9307      	str	r3, [sp, #28]
 8027134:	6850      	ldr	r0, [r2, #4]
 8027136:	6812      	ldr	r2, [r2, #0]
 8027138:	f89d 40b4 	ldrb.w	r4, [sp, #180]	@ 0xb4
 802713c:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 8027140:	fb00 1303 	mla	r3, r0, r3, r1
 8027144:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8027148:	9308      	str	r3, [sp, #32]
 802714a:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802714c:	681b      	ldr	r3, [r3, #0]
 802714e:	9309      	str	r3, [sp, #36]	@ 0x24
 8027150:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8027152:	2b00      	cmp	r3, #0
 8027154:	dc03      	bgt.n	802715e <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8027156:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8027158:	2b00      	cmp	r3, #0
 802715a:	f340 8231 	ble.w	80275c0 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49c>
 802715e:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8027160:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027164:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8027168:	1e48      	subs	r0, r1, #1
 802716a:	1e55      	subs	r5, r2, #1
 802716c:	9b07      	ldr	r3, [sp, #28]
 802716e:	2b00      	cmp	r3, #0
 8027170:	f340 80c3 	ble.w	80272fa <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8027174:	9e25      	ldr	r6, [sp, #148]	@ 0x94
 8027176:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8027178:	1436      	asrs	r6, r6, #16
 802717a:	ea4f 4323 	mov.w	r3, r3, asr #16
 802717e:	d406      	bmi.n	802718e <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8027180:	4286      	cmp	r6, r0
 8027182:	da04      	bge.n	802718e <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8027184:	2b00      	cmp	r3, #0
 8027186:	db02      	blt.n	802718e <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8027188:	42ab      	cmp	r3, r5
 802718a:	f2c0 80b7 	blt.w	80272fc <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 802718e:	3601      	adds	r6, #1
 8027190:	f100 80a4 	bmi.w	80272dc <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 8027194:	42b1      	cmp	r1, r6
 8027196:	f2c0 80a1 	blt.w	80272dc <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 802719a:	3301      	adds	r3, #1
 802719c:	f100 809e 	bmi.w	80272dc <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 80271a0:	429a      	cmp	r2, r3
 80271a2:	f2c0 809b 	blt.w	80272dc <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 80271a6:	e9dd b607 	ldrd	fp, r6, [sp, #28]
 80271aa:	f1bb 0f00 	cmp.w	fp, #0
 80271ae:	f340 80c5 	ble.w	802733c <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 80271b2:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80271b4:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 80271b6:	1418      	asrs	r0, r3, #16
 80271b8:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80271ba:	68cf      	ldr	r7, [r1, #12]
 80271bc:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80271c0:	9925      	ldr	r1, [sp, #148]	@ 0x94
 80271c2:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80271c4:	1409      	asrs	r1, r1, #16
 80271c6:	f3c3 3503 	ubfx	r5, r3, #12, #4
 80271ca:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80271cc:	689b      	ldr	r3, [r3, #8]
 80271ce:	f100 8127 	bmi.w	8027420 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 80271d2:	f103 3cff 	add.w	ip, r3, #4294967295
 80271d6:	4561      	cmp	r1, ip
 80271d8:	f280 8122 	bge.w	8027420 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 80271dc:	2800      	cmp	r0, #0
 80271de:	f2c0 811f 	blt.w	8027420 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 80271e2:	f107 3cff 	add.w	ip, r7, #4294967295
 80271e6:	4560      	cmp	r0, ip
 80271e8:	f280 811a 	bge.w	8027420 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 80271ec:	b21b      	sxth	r3, r3
 80271ee:	fb00 1103 	mla	r1, r0, r3, r1
 80271f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80271f4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80271f8:	1847      	adds	r7, r0, r1
 80271fa:	5c40      	ldrb	r0, [r0, r1]
 80271fc:	7879      	ldrb	r1, [r7, #1]
 80271fe:	f897 e002 	ldrb.w	lr, [r7, #2]
 8027202:	910c      	str	r1, [sp, #48]	@ 0x30
 8027204:	f897 9003 	ldrb.w	r9, [r7, #3]
 8027208:	f897 8004 	ldrb.w	r8, [r7, #4]
 802720c:	f897 a005 	ldrb.w	sl, [r7, #5]
 8027210:	b1cd      	cbz	r5, 8027246 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8027212:	f04f 0c03 	mov.w	ip, #3
 8027216:	f06f 0104 	mvn.w	r1, #4
 802721a:	3705      	adds	r7, #5
 802721c:	fb13 130c 	smlabb	r3, r3, ip, r1
 8027220:	eb07 0c03 	add.w	ip, r7, r3
 8027224:	5cfb      	ldrb	r3, [r7, r3]
 8027226:	930d      	str	r3, [sp, #52]	@ 0x34
 8027228:	f89c 3001 	ldrb.w	r3, [ip, #1]
 802722c:	930f      	str	r3, [sp, #60]	@ 0x3c
 802722e:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8027232:	9311      	str	r3, [sp, #68]	@ 0x44
 8027234:	f89c 3003 	ldrb.w	r3, [ip, #3]
 8027238:	930e      	str	r3, [sp, #56]	@ 0x38
 802723a:	f89c 3004 	ldrb.w	r3, [ip, #4]
 802723e:	9310      	str	r3, [sp, #64]	@ 0x40
 8027240:	f89c 3005 	ldrb.w	r3, [ip, #5]
 8027244:	9312      	str	r3, [sp, #72]	@ 0x48
 8027246:	b292      	uxth	r2, r2
 8027248:	990c      	ldr	r1, [sp, #48]	@ 0x30
 802724a:	b2ad      	uxth	r5, r5
 802724c:	2cff      	cmp	r4, #255	@ 0xff
 802724e:	fb02 f305 	mul.w	r3, r2, r5
 8027252:	ea4f 1202 	mov.w	r2, r2, lsl #4
 8027256:	ebc3 1505 	rsb	r5, r3, r5, lsl #4
 802725a:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 802725e:	eba2 0203 	sub.w	r2, r2, r3
 8027262:	b2ad      	uxth	r5, r5
 8027264:	b292      	uxth	r2, r2
 8027266:	eba7 0705 	sub.w	r7, r7, r5
 802726a:	fb02 f909 	mul.w	r9, r2, r9
 802726e:	b2bf      	uxth	r7, r7
 8027270:	fb02 f808 	mul.w	r8, r2, r8
 8027274:	fb02 fa0a 	mul.w	sl, r2, sl
 8027278:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802727a:	fb07 9900 	mla	r9, r7, r0, r9
 802727e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8027280:	fb07 8801 	mla	r8, r7, r1, r8
 8027284:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8027286:	fb07 aa0e 	mla	sl, r7, lr, sl
 802728a:	fb05 9900 	mla	r9, r5, r0, r9
 802728e:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8027290:	fb05 8801 	mla	r8, r5, r1, r8
 8027294:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8027296:	fb05 a502 	mla	r5, r5, r2, sl
 802729a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 802729c:	fb03 9900 	mla	r9, r3, r0, r9
 80272a0:	fb03 8801 	mla	r8, r3, r1, r8
 80272a4:	fb03 5302 	mla	r3, r3, r2, r5
 80272a8:	ea4f 2929 	mov.w	r9, r9, asr #8
 80272ac:	ea4f 2828 	mov.w	r8, r8, asr #8
 80272b0:	ea4f 2323 	mov.w	r3, r3, asr #8
 80272b4:	f040 8088 	bne.w	80273c8 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 80272b8:	f886 9000 	strb.w	r9, [r6]
 80272bc:	f886 8001 	strb.w	r8, [r6, #1]
 80272c0:	70b3      	strb	r3, [r6, #2]
 80272c2:	70f4      	strb	r4, [r6, #3]
 80272c4:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80272c6:	3604      	adds	r6, #4
 80272c8:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 80272ca:	f10b 3bff 	add.w	fp, fp, #4294967295
 80272ce:	4413      	add	r3, r2
 80272d0:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 80272d2:	9325      	str	r3, [sp, #148]	@ 0x94
 80272d4:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80272d6:	4413      	add	r3, r2
 80272d8:	9326      	str	r3, [sp, #152]	@ 0x98
 80272da:	e766      	b.n	80271aa <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80272dc:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80272de:	9e27      	ldr	r6, [sp, #156]	@ 0x9c
 80272e0:	4433      	add	r3, r6
 80272e2:	9e28      	ldr	r6, [sp, #160]	@ 0xa0
 80272e4:	9325      	str	r3, [sp, #148]	@ 0x94
 80272e6:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80272e8:	4433      	add	r3, r6
 80272ea:	9326      	str	r3, [sp, #152]	@ 0x98
 80272ec:	9b07      	ldr	r3, [sp, #28]
 80272ee:	3b01      	subs	r3, #1
 80272f0:	9307      	str	r3, [sp, #28]
 80272f2:	9b08      	ldr	r3, [sp, #32]
 80272f4:	3304      	adds	r3, #4
 80272f6:	9308      	str	r3, [sp, #32]
 80272f8:	e738      	b.n	802716c <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80272fa:	d026      	beq.n	802734a <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 80272fc:	9b07      	ldr	r3, [sp, #28]
 80272fe:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 8027300:	3b01      	subs	r3, #1
 8027302:	9d25      	ldr	r5, [sp, #148]	@ 0x94
 8027304:	fb00 5003 	mla	r0, r0, r3, r5
 8027308:	1400      	asrs	r0, r0, #16
 802730a:	f53f af4c 	bmi.w	80271a6 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802730e:	3901      	subs	r1, #1
 8027310:	4288      	cmp	r0, r1
 8027312:	f6bf af48 	bge.w	80271a6 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8027316:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8027318:	9826      	ldr	r0, [sp, #152]	@ 0x98
 802731a:	fb01 0303 	mla	r3, r1, r3, r0
 802731e:	141b      	asrs	r3, r3, #16
 8027320:	f53f af41 	bmi.w	80271a6 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8027324:	3a01      	subs	r2, #1
 8027326:	4293      	cmp	r3, r2
 8027328:	f6bf af3d 	bge.w	80271a6 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802732c:	9b08      	ldr	r3, [sp, #32]
 802732e:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8027332:	1d18      	adds	r0, r3, #4
 8027334:	f1be 0f00 	cmp.w	lr, #0
 8027338:	f300 808e 	bgt.w	8027458 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x334>
 802733c:	9b07      	ldr	r3, [sp, #28]
 802733e:	9a08      	ldr	r2, [sp, #32]
 8027340:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8027344:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8027348:	9308      	str	r3, [sp, #32]
 802734a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802734c:	2b00      	cmp	r3, #0
 802734e:	f340 8137 	ble.w	80275c0 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49c>
 8027352:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8027356:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8027358:	ee30 0a04 	vadd.f32	s0, s0, s8
 802735c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8027360:	eef0 6a62 	vmov.f32	s13, s5
 8027364:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8027368:	ee31 1a05 	vadd.f32	s2, s2, s10
 802736c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027370:	edcd 6a25 	vstr	s13, [sp, #148]	@ 0x94
 8027374:	eef0 6a43 	vmov.f32	s13, s6
 8027378:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802737c:	edcd 6a26 	vstr	s13, [sp, #152]	@ 0x98
 8027380:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8027384:	ee61 7a27 	vmul.f32	s15, s2, s15
 8027388:	ee77 2a62 	vsub.f32	s5, s14, s5
 802738c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8027390:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8027394:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8027398:	ee12 2a90 	vmov	r2, s5
 802739c:	eef0 2a47 	vmov.f32	s5, s14
 80273a0:	fb92 f3f3 	sdiv	r3, r2, r3
 80273a4:	ee13 2a10 	vmov	r2, s6
 80273a8:	9327      	str	r3, [sp, #156]	@ 0x9c
 80273aa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80273ac:	eeb0 3a67 	vmov.f32	s6, s15
 80273b0:	fb92 f3f3 	sdiv	r3, r2, r3
 80273b4:	9328      	str	r3, [sp, #160]	@ 0xa0
 80273b6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80273b8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80273ba:	3b01      	subs	r3, #1
 80273bc:	930a      	str	r3, [sp, #40]	@ 0x28
 80273be:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80273c0:	bf08      	it	eq
 80273c2:	4613      	moveq	r3, r2
 80273c4:	9307      	str	r3, [sp, #28]
 80273c6:	e6c3      	b.n	8027150 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c>
 80273c8:	2c00      	cmp	r4, #0
 80273ca:	f43f af7b 	beq.w	80272c4 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 80273ce:	78f0      	ldrb	r0, [r6, #3]
 80273d0:	fa5f f989 	uxtb.w	r9, r9
 80273d4:	fa5f f888 	uxtb.w	r8, r8
 80273d8:	fb04 f100 	mul.w	r1, r4, r0
 80273dc:	1822      	adds	r2, r4, r0
 80273de:	b2db      	uxtb	r3, r3
 80273e0:	1c4d      	adds	r5, r1, #1
 80273e2:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 80273e6:	1229      	asrs	r1, r5, #8
 80273e8:	1a45      	subs	r5, r0, r1
 80273ea:	1a52      	subs	r2, r2, r1
 80273ec:	7831      	ldrb	r1, [r6, #0]
 80273ee:	b2d2      	uxtb	r2, r2
 80273f0:	4369      	muls	r1, r5
 80273f2:	70f2      	strb	r2, [r6, #3]
 80273f4:	fb04 1909 	mla	r9, r4, r9, r1
 80273f8:	7871      	ldrb	r1, [r6, #1]
 80273fa:	4369      	muls	r1, r5
 80273fc:	fb04 1808 	mla	r8, r4, r8, r1
 8027400:	78b1      	ldrb	r1, [r6, #2]
 8027402:	434d      	muls	r5, r1
 8027404:	fb04 5303 	mla	r3, r4, r3, r5
 8027408:	fb99 f9f2 	sdiv	r9, r9, r2
 802740c:	fb98 f8f2 	sdiv	r8, r8, r2
 8027410:	fb93 f3f2 	sdiv	r3, r3, r2
 8027414:	f886 9000 	strb.w	r9, [r6]
 8027418:	f886 8001 	strb.w	r8, [r6, #1]
 802741c:	70b3      	strb	r3, [r6, #2]
 802741e:	e751      	b.n	80272c4 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 8027420:	f111 0c01 	adds.w	ip, r1, #1
 8027424:	f53f af4e 	bmi.w	80272c4 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 8027428:	4563      	cmp	r3, ip
 802742a:	f6ff af4b 	blt.w	80272c4 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 802742e:	f110 0c01 	adds.w	ip, r0, #1
 8027432:	f53f af47 	bmi.w	80272c4 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 8027436:	4567      	cmp	r7, ip
 8027438:	f6ff af44 	blt.w	80272c4 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 802743c:	b23f      	sxth	r7, r7
 802743e:	9101      	str	r1, [sp, #4]
 8027440:	b21b      	sxth	r3, r3
 8027442:	4631      	mov	r1, r6
 8027444:	9700      	str	r7, [sp, #0]
 8027446:	e9cd 0202 	strd	r0, r2, [sp, #8]
 802744a:	e9cd 5404 	strd	r5, r4, [sp, #16]
 802744e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8027450:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8027452:	f7ff fd82 	bl	8026f5a <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh>
 8027456:	e735      	b.n	80272c4 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 8027458:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 802745a:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 802745c:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8027460:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8027462:	1412      	asrs	r2, r2, #16
 8027464:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8027468:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802746a:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 802746e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8027470:	141b      	asrs	r3, r3, #16
 8027472:	fb0c 2303 	mla	r3, ip, r3, r2
 8027476:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8027478:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802747c:	18d6      	adds	r6, r2, r3
 802747e:	5cd2      	ldrb	r2, [r2, r3]
 8027480:	7873      	ldrb	r3, [r6, #1]
 8027482:	f896 8002 	ldrb.w	r8, [r6, #2]
 8027486:	930c      	str	r3, [sp, #48]	@ 0x30
 8027488:	f896 a003 	ldrb.w	sl, [r6, #3]
 802748c:	f896 9004 	ldrb.w	r9, [r6, #4]
 8027490:	f896 b005 	ldrb.w	fp, [r6, #5]
 8027494:	b1a5      	cbz	r5, 80274c0 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 8027496:	2703      	movs	r7, #3
 8027498:	f06f 0304 	mvn.w	r3, #4
 802749c:	3605      	adds	r6, #5
 802749e:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 80274a2:	eb06 070c 	add.w	r7, r6, ip
 80274a6:	f816 600c 	ldrb.w	r6, [r6, ip]
 80274aa:	9613      	str	r6, [sp, #76]	@ 0x4c
 80274ac:	787e      	ldrb	r6, [r7, #1]
 80274ae:	9615      	str	r6, [sp, #84]	@ 0x54
 80274b0:	78be      	ldrb	r6, [r7, #2]
 80274b2:	9617      	str	r6, [sp, #92]	@ 0x5c
 80274b4:	78fe      	ldrb	r6, [r7, #3]
 80274b6:	9614      	str	r6, [sp, #80]	@ 0x50
 80274b8:	793e      	ldrb	r6, [r7, #4]
 80274ba:	9616      	str	r6, [sp, #88]	@ 0x58
 80274bc:	797e      	ldrb	r6, [r7, #5]
 80274be:	9618      	str	r6, [sp, #96]	@ 0x60
 80274c0:	b289      	uxth	r1, r1
 80274c2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80274c4:	b2ad      	uxth	r5, r5
 80274c6:	2cff      	cmp	r4, #255	@ 0xff
 80274c8:	fb01 f605 	mul.w	r6, r1, r5
 80274cc:	ea4f 1101 	mov.w	r1, r1, lsl #4
 80274d0:	ebc6 1505 	rsb	r5, r6, r5, lsl #4
 80274d4:	f5c1 7780 	rsb	r7, r1, #256	@ 0x100
 80274d8:	eba1 0106 	sub.w	r1, r1, r6
 80274dc:	b2ad      	uxth	r5, r5
 80274de:	b289      	uxth	r1, r1
 80274e0:	eba7 0705 	sub.w	r7, r7, r5
 80274e4:	fb01 f909 	mul.w	r9, r1, r9
 80274e8:	b2bf      	uxth	r7, r7
 80274ea:	fb01 fa0a 	mul.w	sl, r1, sl
 80274ee:	fb01 fb0b 	mul.w	fp, r1, fp
 80274f2:	fb07 9903 	mla	r9, r7, r3, r9
 80274f6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80274f8:	fb07 aa02 	mla	sl, r7, r2, sl
 80274fc:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80274fe:	fb05 9903 	mla	r9, r5, r3, r9
 8027502:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8027504:	fb07 bb08 	mla	fp, r7, r8, fp
 8027508:	fb06 9903 	mla	r9, r6, r3, r9
 802750c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802750e:	fb05 aa02 	mla	sl, r5, r2, sl
 8027512:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8027514:	fb05 bb03 	mla	fp, r5, r3, fp
 8027518:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802751a:	fb06 aa02 	mla	sl, r6, r2, sl
 802751e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8027522:	fb06 b603 	mla	r6, r6, r3, fp
 8027526:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 802752a:	ea4f 2626 	mov.w	r6, r6, asr #8
 802752e:	d113      	bne.n	8027558 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8027530:	f800 ac04 	strb.w	sl, [r0, #-4]
 8027534:	f800 9c03 	strb.w	r9, [r0, #-3]
 8027538:	f800 6c02 	strb.w	r6, [r0, #-2]
 802753c:	f800 4c01 	strb.w	r4, [r0, #-1]
 8027540:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8027542:	3004      	adds	r0, #4
 8027544:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8027546:	f10e 3eff 	add.w	lr, lr, #4294967295
 802754a:	4413      	add	r3, r2
 802754c:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 802754e:	9325      	str	r3, [sp, #148]	@ 0x94
 8027550:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8027552:	4413      	add	r3, r2
 8027554:	9326      	str	r3, [sp, #152]	@ 0x98
 8027556:	e6ed      	b.n	8027334 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 8027558:	2c00      	cmp	r4, #0
 802755a:	d0f1      	beq.n	8027540 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41c>
 802755c:	f810 2c01 	ldrb.w	r2, [r0, #-1]
 8027560:	fa5f fa8a 	uxtb.w	sl, sl
 8027564:	fa5f f989 	uxtb.w	r9, r9
 8027568:	fb04 f302 	mul.w	r3, r4, r2
 802756c:	eb04 0c02 	add.w	ip, r4, r2
 8027570:	b2f6      	uxtb	r6, r6
 8027572:	1c59      	adds	r1, r3, #1
 8027574:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8027578:	120b      	asrs	r3, r1, #8
 802757a:	1ad1      	subs	r1, r2, r3
 802757c:	ebac 0c03 	sub.w	ip, ip, r3
 8027580:	f810 3c04 	ldrb.w	r3, [r0, #-4]
 8027584:	fa5f fc8c 	uxtb.w	ip, ip
 8027588:	434b      	muls	r3, r1
 802758a:	f800 cc01 	strb.w	ip, [r0, #-1]
 802758e:	fb04 3a0a 	mla	sl, r4, sl, r3
 8027592:	f810 3c03 	ldrb.w	r3, [r0, #-3]
 8027596:	434b      	muls	r3, r1
 8027598:	fb04 3909 	mla	r9, r4, r9, r3
 802759c:	f810 3c02 	ldrb.w	r3, [r0, #-2]
 80275a0:	4359      	muls	r1, r3
 80275a2:	fb04 1606 	mla	r6, r4, r6, r1
 80275a6:	fb9a fafc 	sdiv	sl, sl, ip
 80275aa:	fb99 f9fc 	sdiv	r9, r9, ip
 80275ae:	fb96 f6fc 	sdiv	r6, r6, ip
 80275b2:	f800 ac04 	strb.w	sl, [r0, #-4]
 80275b6:	f800 9c03 	strb.w	r9, [r0, #-3]
 80275ba:	f800 6c02 	strb.w	r6, [r0, #-2]
 80275be:	e7bf      	b.n	8027540 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41c>
 80275c0:	b01b      	add	sp, #108	@ 0x6c
 80275c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080275c6 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh>:
 80275c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80275ca:	e9dd 7809 	ldrd	r7, r8, [sp, #36]	@ 0x24
 80275ce:	f9bd 9020 	ldrsh.w	r9, [sp, #32]
 80275d2:	fb08 7603 	mla	r6, r8, r3, r7
 80275d6:	f1b8 0f00 	cmp.w	r8, #0
 80275da:	f89d 502c 	ldrb.w	r5, [sp, #44]	@ 0x2c
 80275de:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80275e2:	f89d c030 	ldrb.w	ip, [sp, #48]	@ 0x30
 80275e6:	6808      	ldr	r0, [r1, #0]
 80275e8:	eb02 0e06 	add.w	lr, r2, r6
 80275ec:	f2c0 8089 	blt.w	8027702 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x13c>
 80275f0:	45c1      	cmp	r9, r8
 80275f2:	f340 8086 	ble.w	8027702 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x13c>
 80275f6:	2f00      	cmp	r7, #0
 80275f8:	f2c0 8081 	blt.w	80276fe <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x138>
 80275fc:	42bb      	cmp	r3, r7
 80275fe:	dd7e      	ble.n	80276fe <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x138>
 8027600:	f89e 4002 	ldrb.w	r4, [lr, #2]
 8027604:	f89e a001 	ldrb.w	sl, [lr, #1]
 8027608:	0424      	lsls	r4, r4, #16
 802760a:	5d92      	ldrb	r2, [r2, r6]
 802760c:	ea44 240a 	orr.w	r4, r4, sl, lsl #8
 8027610:	4314      	orrs	r4, r2
 8027612:	1c7a      	adds	r2, r7, #1
 8027614:	d478      	bmi.n	8027708 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x142>
 8027616:	4293      	cmp	r3, r2
 8027618:	dd76      	ble.n	8027708 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x142>
 802761a:	2d00      	cmp	r5, #0
 802761c:	d074      	beq.n	8027708 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x142>
 802761e:	f89e 6005 	ldrb.w	r6, [lr, #5]
 8027622:	f89e 2004 	ldrb.w	r2, [lr, #4]
 8027626:	0436      	lsls	r6, r6, #16
 8027628:	ea46 2602 	orr.w	r6, r6, r2, lsl #8
 802762c:	f89e 2003 	ldrb.w	r2, [lr, #3]
 8027630:	4316      	orrs	r6, r2
 8027632:	f118 0801 	adds.w	r8, r8, #1
 8027636:	d46b      	bmi.n	8027710 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x14a>
 8027638:	45c1      	cmp	r9, r8
 802763a:	dd69      	ble.n	8027710 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x14a>
 802763c:	f1bc 0f00 	cmp.w	ip, #0
 8027640:	d066      	beq.n	8027710 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x14a>
 8027642:	eb03 0943 	add.w	r9, r3, r3, lsl #1
 8027646:	2f00      	cmp	r7, #0
 8027648:	eb0e 0809 	add.w	r8, lr, r9
 802764c:	db5e      	blt.n	802770c <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x146>
 802764e:	42bb      	cmp	r3, r7
 8027650:	dd5c      	ble.n	802770c <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x146>
 8027652:	f898 2002 	ldrb.w	r2, [r8, #2]
 8027656:	f898 a001 	ldrb.w	sl, [r8, #1]
 802765a:	0412      	lsls	r2, r2, #16
 802765c:	f81e e009 	ldrb.w	lr, [lr, r9]
 8027660:	ea42 220a 	orr.w	r2, r2, sl, lsl #8
 8027664:	ea42 020e 	orr.w	r2, r2, lr
 8027668:	3701      	adds	r7, #1
 802766a:	d40c      	bmi.n	8027686 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0xc0>
 802766c:	42bb      	cmp	r3, r7
 802766e:	dd0a      	ble.n	8027686 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0xc0>
 8027670:	b14d      	cbz	r5, 8027686 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0xc0>
 8027672:	f898 0005 	ldrb.w	r0, [r8, #5]
 8027676:	f898 3004 	ldrb.w	r3, [r8, #4]
 802767a:	0400      	lsls	r0, r0, #16
 802767c:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8027680:	f898 3003 	ldrb.w	r3, [r8, #3]
 8027684:	4318      	orrs	r0, r3
 8027686:	b2ad      	uxth	r5, r5
 8027688:	f006 13ff 	and.w	r3, r6, #16711935	@ 0xff00ff
 802768c:	fa1f f78c 	uxth.w	r7, ip
 8027690:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8027694:	f004 18ff 	and.w	r8, r4, #16711935	@ 0xff00ff
 8027698:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 802769c:	fb05 fc07 	mul.w	ip, r5, r7
 80276a0:	012d      	lsls	r5, r5, #4
 80276a2:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 80276a6:	f5c5 7e80 	rsb	lr, r5, #256	@ 0x100
 80276aa:	eba5 050c 	sub.w	r5, r5, ip
 80276ae:	b2bf      	uxth	r7, r7
 80276b0:	b2ad      	uxth	r5, r5
 80276b2:	ebae 0e07 	sub.w	lr, lr, r7
 80276b6:	436b      	muls	r3, r5
 80276b8:	fa1f fe8e 	uxth.w	lr, lr
 80276bc:	436e      	muls	r6, r5
 80276be:	fb0e 3808 	mla	r8, lr, r8, r3
 80276c2:	f000 13ff 	and.w	r3, r0, #16711935	@ 0xff00ff
 80276c6:	fb0e 6404 	mla	r4, lr, r4, r6
 80276ca:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 80276ce:	fb0c 8803 	mla	r8, ip, r3, r8
 80276d2:	f002 13ff 	and.w	r3, r2, #16711935	@ 0xff00ff
 80276d6:	fb0c 4000 	mla	r0, ip, r0, r4
 80276da:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 80276de:	fb07 8303 	mla	r3, r7, r3, r8
 80276e2:	fb07 0002 	mla	r0, r7, r2, r0
 80276e6:	0a1b      	lsrs	r3, r3, #8
 80276e8:	0a00      	lsrs	r0, r0, #8
 80276ea:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80276ee:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 80276f2:	4318      	orrs	r0, r3
 80276f4:	f040 407f 	orr.w	r0, r0, #4278190080	@ 0xff000000
 80276f8:	6008      	str	r0, [r1, #0]
 80276fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80276fe:	4604      	mov	r4, r0
 8027700:	e787      	b.n	8027612 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x4c>
 8027702:	4606      	mov	r6, r0
 8027704:	4604      	mov	r4, r0
 8027706:	e794      	b.n	8027632 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x6c>
 8027708:	4606      	mov	r6, r0
 802770a:	e792      	b.n	8027632 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x6c>
 802770c:	4602      	mov	r2, r0
 802770e:	e7ab      	b.n	8027668 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0xa2>
 8027710:	4602      	mov	r2, r0
 8027712:	e7b8      	b.n	8027686 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0xc0>

08027714 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027718:	b09b      	sub	sp, #108	@ 0x6c
 802771a:	e9cd 1209 	strd	r1, r2, [sp, #36]	@ 0x24
 802771e:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8027720:	9019      	str	r0, [sp, #100]	@ 0x64
 8027722:	9306      	str	r3, [sp, #24]
 8027724:	6850      	ldr	r0, [r2, #4]
 8027726:	6812      	ldr	r2, [r2, #0]
 8027728:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 802772c:	e9dd 4a25 	ldrd	r4, sl, [sp, #148]	@ 0x94
 8027730:	fb00 1303 	mla	r3, r0, r3, r1
 8027734:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8027738:	9307      	str	r3, [sp, #28]
 802773a:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802773c:	681b      	ldr	r3, [r3, #0]
 802773e:	9308      	str	r3, [sp, #32]
 8027740:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027742:	2b00      	cmp	r3, #0
 8027744:	dc03      	bgt.n	802774e <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8027746:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8027748:	2b00      	cmp	r3, #0
 802774a:	f340 81a6 	ble.w	8027a9a <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 802774e:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8027750:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027754:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8027758:	1e48      	subs	r0, r1, #1
 802775a:	1e55      	subs	r5, r2, #1
 802775c:	9b06      	ldr	r3, [sp, #24]
 802775e:	2b00      	cmp	r3, #0
 8027760:	f340 80b0 	ble.w	80278c4 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8027764:	1426      	asrs	r6, r4, #16
 8027766:	ea4f 432a 	mov.w	r3, sl, asr #16
 802776a:	d406      	bmi.n	802777a <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802776c:	4286      	cmp	r6, r0
 802776e:	da04      	bge.n	802777a <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8027770:	2b00      	cmp	r3, #0
 8027772:	db02      	blt.n	802777a <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8027774:	42ab      	cmp	r3, r5
 8027776:	f2c0 80a6 	blt.w	80278c6 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b2>
 802777a:	3601      	adds	r6, #1
 802777c:	f100 8097 	bmi.w	80278ae <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8027780:	42b1      	cmp	r1, r6
 8027782:	f2c0 8094 	blt.w	80278ae <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8027786:	3301      	adds	r3, #1
 8027788:	f100 8091 	bmi.w	80278ae <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 802778c:	429a      	cmp	r2, r3
 802778e:	f2c0 808e 	blt.w	80278ae <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8027792:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 8027796:	f1bb 0f00 	cmp.w	fp, #0
 802779a:	f340 80af 	ble.w	80278fc <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 802779e:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 80277a0:	ea4f 452a 	mov.w	r5, sl, asr #16
 80277a4:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80277a6:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80277aa:	68c7      	ldr	r7, [r0, #12]
 80277ac:	1420      	asrs	r0, r4, #16
 80277ae:	f3ca 3103 	ubfx	r1, sl, #12, #4
 80277b2:	689b      	ldr	r3, [r3, #8]
 80277b4:	f100 80e8 	bmi.w	8027988 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 80277b8:	f103 3cff 	add.w	ip, r3, #4294967295
 80277bc:	4560      	cmp	r0, ip
 80277be:	f280 80e3 	bge.w	8027988 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 80277c2:	2d00      	cmp	r5, #0
 80277c4:	f2c0 80e0 	blt.w	8027988 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 80277c8:	f107 3cff 	add.w	ip, r7, #4294967295
 80277cc:	4565      	cmp	r5, ip
 80277ce:	f280 80db 	bge.w	8027988 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 80277d2:	b21b      	sxth	r3, r3
 80277d4:	fb05 0003 	mla	r0, r5, r3, r0
 80277d8:	9d08      	ldr	r5, [sp, #32]
 80277da:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80277de:	182f      	adds	r7, r5, r0
 80277e0:	5c28      	ldrb	r0, [r5, r0]
 80277e2:	900b      	str	r0, [sp, #44]	@ 0x2c
 80277e4:	7978      	ldrb	r0, [r7, #5]
 80277e6:	787d      	ldrb	r5, [r7, #1]
 80277e8:	f897 e002 	ldrb.w	lr, [r7, #2]
 80277ec:	f897 9003 	ldrb.w	r9, [r7, #3]
 80277f0:	f897 8004 	ldrb.w	r8, [r7, #4]
 80277f4:	900c      	str	r0, [sp, #48]	@ 0x30
 80277f6:	b1c1      	cbz	r1, 802782a <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 80277f8:	f06f 0c04 	mvn.w	ip, #4
 80277fc:	2003      	movs	r0, #3
 80277fe:	3705      	adds	r7, #5
 8027800:	fb13 c300 	smlabb	r3, r3, r0, ip
 8027804:	eb07 0c03 	add.w	ip, r7, r3
 8027808:	5cfb      	ldrb	r3, [r7, r3]
 802780a:	930d      	str	r3, [sp, #52]	@ 0x34
 802780c:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8027810:	930f      	str	r3, [sp, #60]	@ 0x3c
 8027812:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8027816:	9311      	str	r3, [sp, #68]	@ 0x44
 8027818:	f89c 3003 	ldrb.w	r3, [ip, #3]
 802781c:	930e      	str	r3, [sp, #56]	@ 0x38
 802781e:	f89c 3004 	ldrb.w	r3, [ip, #4]
 8027822:	9310      	str	r3, [sp, #64]	@ 0x40
 8027824:	f89c 3005 	ldrb.w	r3, [ip, #5]
 8027828:	9312      	str	r3, [sp, #72]	@ 0x48
 802782a:	b292      	uxth	r2, r2
 802782c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 802782e:	b289      	uxth	r1, r1
 8027830:	fb02 f301 	mul.w	r3, r2, r1
 8027834:	0112      	lsls	r2, r2, #4
 8027836:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 802783a:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 802783e:	1ad2      	subs	r2, r2, r3
 8027840:	b289      	uxth	r1, r1
 8027842:	b292      	uxth	r2, r2
 8027844:	1a7f      	subs	r7, r7, r1
 8027846:	fb02 f909 	mul.w	r9, r2, r9
 802784a:	b2bf      	uxth	r7, r7
 802784c:	fb02 f808 	mul.w	r8, r2, r8
 8027850:	fb07 9900 	mla	r9, r7, r0, r9
 8027854:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8027856:	fb07 8805 	mla	r8, r7, r5, r8
 802785a:	fb01 9900 	mla	r9, r1, r0, r9
 802785e:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8027860:	fb03 9900 	mla	r9, r3, r0, r9
 8027864:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8027866:	fb01 8800 	mla	r8, r1, r0, r8
 802786a:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802786c:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8027870:	fb03 8800 	mla	r8, r3, r0, r8
 8027874:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8027876:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 802787a:	4342      	muls	r2, r0
 802787c:	ea49 0908 	orr.w	r9, r9, r8
 8027880:	fb07 280e 	mla	r8, r7, lr, r2
 8027884:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8027886:	fb01 8802 	mla	r8, r1, r2, r8
 802788a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 802788c:	fb03 8802 	mla	r8, r3, r2, r8
 8027890:	ea4f 2808 	mov.w	r8, r8, lsl #8
 8027894:	f408 087f 	and.w	r8, r8, #16711680	@ 0xff0000
 8027898:	ea49 0308 	orr.w	r3, r9, r8
 802789c:	6033      	str	r3, [r6, #0]
 802789e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80278a0:	3604      	adds	r6, #4
 80278a2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80278a6:	441c      	add	r4, r3
 80278a8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80278aa:	449a      	add	sl, r3
 80278ac:	e773      	b.n	8027796 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80278ae:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80278b0:	441c      	add	r4, r3
 80278b2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80278b4:	449a      	add	sl, r3
 80278b6:	9b06      	ldr	r3, [sp, #24]
 80278b8:	3b01      	subs	r3, #1
 80278ba:	9306      	str	r3, [sp, #24]
 80278bc:	9b07      	ldr	r3, [sp, #28]
 80278be:	3304      	adds	r3, #4
 80278c0:	9307      	str	r3, [sp, #28]
 80278c2:	e74b      	b.n	802775c <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80278c4:	d021      	beq.n	802790a <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 80278c6:	9b06      	ldr	r3, [sp, #24]
 80278c8:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 80278ca:	3b01      	subs	r3, #1
 80278cc:	fb00 4003 	mla	r0, r0, r3, r4
 80278d0:	1400      	asrs	r0, r0, #16
 80278d2:	f53f af5e 	bmi.w	8027792 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80278d6:	3901      	subs	r1, #1
 80278d8:	4288      	cmp	r0, r1
 80278da:	f6bf af5a 	bge.w	8027792 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80278de:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 80278e0:	fb01 a303 	mla	r3, r1, r3, sl
 80278e4:	141b      	asrs	r3, r3, #16
 80278e6:	f53f af54 	bmi.w	8027792 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80278ea:	3a01      	subs	r2, #1
 80278ec:	4293      	cmp	r3, r2
 80278ee:	f6bf af50 	bge.w	8027792 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80278f2:	e9dd ce06 	ldrd	ip, lr, [sp, #24]
 80278f6:	f1bc 0f00 	cmp.w	ip, #0
 80278fa:	dc5c      	bgt.n	80279b6 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 80278fc:	9b06      	ldr	r3, [sp, #24]
 80278fe:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8027902:	9b07      	ldr	r3, [sp, #28]
 8027904:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8027908:	9307      	str	r3, [sp, #28]
 802790a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802790c:	2b00      	cmp	r3, #0
 802790e:	f340 80c4 	ble.w	8027a9a <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8027912:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8027916:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8027918:	ee30 0a04 	vadd.f32	s0, s0, s8
 802791c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8027920:	eef0 6a62 	vmov.f32	s13, s5
 8027924:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8027928:	ee31 1a05 	vadd.f32	s2, s2, s10
 802792c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027930:	ee16 4a90 	vmov	r4, s13
 8027934:	eef0 6a43 	vmov.f32	s13, s6
 8027938:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802793c:	ee16 aa90 	vmov	sl, s13
 8027940:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8027944:	ee61 7a27 	vmul.f32	s15, s2, s15
 8027948:	ee77 2a62 	vsub.f32	s5, s14, s5
 802794c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8027950:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8027954:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8027958:	ee12 2a90 	vmov	r2, s5
 802795c:	eef0 2a47 	vmov.f32	s5, s14
 8027960:	fb92 f3f3 	sdiv	r3, r2, r3
 8027964:	ee13 2a10 	vmov	r2, s6
 8027968:	9327      	str	r3, [sp, #156]	@ 0x9c
 802796a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802796c:	eeb0 3a67 	vmov.f32	s6, s15
 8027970:	fb92 f3f3 	sdiv	r3, r2, r3
 8027974:	9328      	str	r3, [sp, #160]	@ 0xa0
 8027976:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027978:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802797a:	3b01      	subs	r3, #1
 802797c:	9309      	str	r3, [sp, #36]	@ 0x24
 802797e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8027980:	bf08      	it	eq
 8027982:	4613      	moveq	r3, r2
 8027984:	9306      	str	r3, [sp, #24]
 8027986:	e6db      	b.n	8027740 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c>
 8027988:	f110 0c01 	adds.w	ip, r0, #1
 802798c:	d487      	bmi.n	802789e <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 802798e:	4563      	cmp	r3, ip
 8027990:	db85      	blt.n	802789e <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8027992:	f115 0c01 	adds.w	ip, r5, #1
 8027996:	d482      	bmi.n	802789e <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8027998:	4567      	cmp	r7, ip
 802799a:	db80      	blt.n	802789e <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 802799c:	b23f      	sxth	r7, r7
 802799e:	b21b      	sxth	r3, r3
 80279a0:	9700      	str	r7, [sp, #0]
 80279a2:	e9cd 2103 	strd	r2, r1, [sp, #12]
 80279a6:	e9cd 0501 	strd	r0, r5, [sp, #4]
 80279aa:	9a08      	ldr	r2, [sp, #32]
 80279ac:	4631      	mov	r1, r6
 80279ae:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80279b0:	f7ff fe09 	bl	80275c6 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh>
 80279b4:	e773      	b.n	802789e <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 80279b6:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 80279b8:	1420      	asrs	r0, r4, #16
 80279ba:	f3c4 3303 	ubfx	r3, r4, #12, #4
 80279be:	f3ca 3203 	ubfx	r2, sl, #12, #4
 80279c2:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 80279c6:	ea4f 412a 	mov.w	r1, sl, asr #16
 80279ca:	930b      	str	r3, [sp, #44]	@ 0x2c
 80279cc:	fb07 0101 	mla	r1, r7, r1, r0
 80279d0:	9808      	ldr	r0, [sp, #32]
 80279d2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80279d6:	1845      	adds	r5, r0, r1
 80279d8:	5c41      	ldrb	r1, [r0, r1]
 80279da:	78ae      	ldrb	r6, [r5, #2]
 80279dc:	7868      	ldrb	r0, [r5, #1]
 80279de:	960c      	str	r6, [sp, #48]	@ 0x30
 80279e0:	f895 9003 	ldrb.w	r9, [r5, #3]
 80279e4:	f895 8004 	ldrb.w	r8, [r5, #4]
 80279e8:	f895 b005 	ldrb.w	fp, [r5, #5]
 80279ec:	b192      	cbz	r2, 8027a14 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 80279ee:	2603      	movs	r6, #3
 80279f0:	f06f 0304 	mvn.w	r3, #4
 80279f4:	3505      	adds	r5, #5
 80279f6:	fb17 3706 	smlabb	r7, r7, r6, r3
 80279fa:	19ee      	adds	r6, r5, r7
 80279fc:	5ded      	ldrb	r5, [r5, r7]
 80279fe:	9513      	str	r5, [sp, #76]	@ 0x4c
 8027a00:	7875      	ldrb	r5, [r6, #1]
 8027a02:	9515      	str	r5, [sp, #84]	@ 0x54
 8027a04:	78b5      	ldrb	r5, [r6, #2]
 8027a06:	9517      	str	r5, [sp, #92]	@ 0x5c
 8027a08:	78f5      	ldrb	r5, [r6, #3]
 8027a0a:	9514      	str	r5, [sp, #80]	@ 0x50
 8027a0c:	7935      	ldrb	r5, [r6, #4]
 8027a0e:	9516      	str	r5, [sp, #88]	@ 0x58
 8027a10:	7975      	ldrb	r5, [r6, #5]
 8027a12:	9518      	str	r5, [sp, #96]	@ 0x60
 8027a14:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8027a18:	b292      	uxth	r2, r2
 8027a1a:	f10c 3cff 	add.w	ip, ip, #4294967295
 8027a1e:	fb03 f502 	mul.w	r5, r3, r2
 8027a22:	011b      	lsls	r3, r3, #4
 8027a24:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 8027a28:	f5c3 7680 	rsb	r6, r3, #256	@ 0x100
 8027a2c:	1b5b      	subs	r3, r3, r5
 8027a2e:	b292      	uxth	r2, r2
 8027a30:	b29b      	uxth	r3, r3
 8027a32:	1ab6      	subs	r6, r6, r2
 8027a34:	fb03 f909 	mul.w	r9, r3, r9
 8027a38:	b2b6      	uxth	r6, r6
 8027a3a:	fb03 f808 	mul.w	r8, r3, r8
 8027a3e:	fb03 fb0b 	mul.w	fp, r3, fp
 8027a42:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8027a44:	fb06 9901 	mla	r9, r6, r1, r9
 8027a48:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8027a4a:	fb06 8800 	mla	r8, r6, r0, r8
 8027a4e:	fb02 9901 	mla	r9, r2, r1, r9
 8027a52:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8027a54:	fb06 bb03 	mla	fp, r6, r3, fp
 8027a58:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8027a5a:	fb05 9901 	mla	r9, r5, r1, r9
 8027a5e:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8027a60:	fb02 bb03 	mla	fp, r2, r3, fp
 8027a64:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8027a66:	fb02 8801 	mla	r8, r2, r1, r8
 8027a6a:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8027a6c:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8027a70:	fb05 8801 	mla	r8, r5, r1, r8
 8027a74:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 8027a78:	ea49 0908 	orr.w	r9, r9, r8
 8027a7c:	fb05 b803 	mla	r8, r5, r3, fp
 8027a80:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8027a82:	ea4f 2808 	mov.w	r8, r8, lsl #8
 8027a86:	441c      	add	r4, r3
 8027a88:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8027a8a:	f408 087f 	and.w	r8, r8, #16711680	@ 0xff0000
 8027a8e:	449a      	add	sl, r3
 8027a90:	ea49 0508 	orr.w	r5, r9, r8
 8027a94:	f84e 5b04 	str.w	r5, [lr], #4
 8027a98:	e72d      	b.n	80278f6 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8027a9a:	b01b      	add	sp, #108	@ 0x6c
 8027a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08027aa0 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh>:
 8027aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027aa4:	b085      	sub	sp, #20
 8027aa6:	6808      	ldr	r0, [r1, #0]
 8027aa8:	e9dd 680f 	ldrd	r6, r8, [sp, #60]	@ 0x3c
 8027aac:	f9bd a038 	ldrsh.w	sl, [sp, #56]	@ 0x38
 8027ab0:	fb08 6403 	mla	r4, r8, r3, r6
 8027ab4:	f1b8 0f00 	cmp.w	r8, #0
 8027ab8:	f89d c044 	ldrb.w	ip, [sp, #68]	@ 0x44
 8027abc:	f89d e048 	ldrb.w	lr, [sp, #72]	@ 0x48
 8027ac0:	eb02 0984 	add.w	r9, r2, r4, lsl #2
 8027ac4:	f89d 704c 	ldrb.w	r7, [sp, #76]	@ 0x4c
 8027ac8:	f2c0 80fc 	blt.w	8027cc4 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x224>
 8027acc:	45c2      	cmp	sl, r8
 8027ace:	f340 80f9 	ble.w	8027cc4 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x224>
 8027ad2:	2e00      	cmp	r6, #0
 8027ad4:	f2c0 80f4 	blt.w	8027cc0 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x220>
 8027ad8:	42b3      	cmp	r3, r6
 8027ada:	f340 80f1 	ble.w	8027cc0 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x220>
 8027ade:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
 8027ae2:	1c72      	adds	r2, r6, #1
 8027ae4:	f100 80ef 	bmi.w	8027cc6 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x226>
 8027ae8:	4293      	cmp	r3, r2
 8027aea:	f340 80ec 	ble.w	8027cc6 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x226>
 8027aee:	f1bc 0f00 	cmp.w	ip, #0
 8027af2:	f000 80e8 	beq.w	8027cc6 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x226>
 8027af6:	f8d9 4004 	ldr.w	r4, [r9, #4]
 8027afa:	f118 0801 	adds.w	r8, r8, #1
 8027afe:	f100 80e6 	bmi.w	8027cce <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x22e>
 8027b02:	45c2      	cmp	sl, r8
 8027b04:	f340 80e3 	ble.w	8027cce <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x22e>
 8027b08:	f1be 0f00 	cmp.w	lr, #0
 8027b0c:	f000 80df 	beq.w	8027cce <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x22e>
 8027b10:	2e00      	cmp	r6, #0
 8027b12:	f2c0 80da 	blt.w	8027cca <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x22a>
 8027b16:	42b3      	cmp	r3, r6
 8027b18:	f340 80d7 	ble.w	8027cca <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x22a>
 8027b1c:	f859 2023 	ldr.w	r2, [r9, r3, lsl #2]
 8027b20:	3601      	adds	r6, #1
 8027b22:	d407      	bmi.n	8027b34 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x94>
 8027b24:	42b3      	cmp	r3, r6
 8027b26:	dd05      	ble.n	8027b34 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x94>
 8027b28:	f1bc 0f00 	cmp.w	ip, #0
 8027b2c:	d002      	beq.n	8027b34 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x94>
 8027b2e:	3301      	adds	r3, #1
 8027b30:	f859 0023 	ldr.w	r0, [r9, r3, lsl #2]
 8027b34:	fa1f fc8c 	uxth.w	ip, ip
 8027b38:	fa1f f38e 	uxth.w	r3, lr
 8027b3c:	ea4f 6a14 	mov.w	sl, r4, lsr #24
 8027b40:	fb03 fe0c 	mul.w	lr, r3, ip
 8027b44:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8027b48:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8027b4c:	ebce 1303 	rsb	r3, lr, r3, lsl #4
 8027b50:	ebac 060e 	sub.w	r6, ip, lr
 8027b54:	f5cc 7c80 	rsb	ip, ip, #256	@ 0x100
 8027b58:	ea4f 6912 	mov.w	r9, r2, lsr #24
 8027b5c:	b29b      	uxth	r3, r3
 8027b5e:	b2b6      	uxth	r6, r6
 8027b60:	ebac 0c03 	sub.w	ip, ip, r3
 8027b64:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8027b68:	9601      	str	r6, [sp, #4]
 8027b6a:	fa1f f68c 	uxth.w	r6, ip
 8027b6e:	9602      	str	r6, [sp, #8]
 8027b70:	9e01      	ldr	r6, [sp, #4]
 8027b72:	fb06 fc0a 	mul.w	ip, r6, sl
 8027b76:	9e02      	ldr	r6, [sp, #8]
 8027b78:	fb06 cc0b 	mla	ip, r6, fp, ip
 8027b7c:	fb03 cc09 	mla	ip, r3, r9, ip
 8027b80:	fb0e cc08 	mla	ip, lr, r8, ip
 8027b84:	f3cc 2607 	ubfx	r6, ip, #8, #8
 8027b88:	9603      	str	r6, [sp, #12]
 8027b8a:	2e00      	cmp	r6, #0
 8027b8c:	f000 8095 	beq.w	8027cba <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x21a>
 8027b90:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8027b94:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 8027b98:	fb0b fc0c 	mul.w	ip, fp, ip
 8027b9c:	fb0b f505 	mul.w	r5, fp, r5
 8027ba0:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8027ba4:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8027ba8:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 8027bac:	44dc      	add	ip, fp
 8027bae:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027bb2:	f00c 16ff 	and.w	r6, ip, #16711935	@ 0xff00ff
 8027bb6:	f505 7c80 	add.w	ip, r5, #256	@ 0x100
 8027bba:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8027bbe:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8027bc2:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 8027bc6:	fb0a fc0c 	mul.w	ip, sl, ip
 8027bca:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8027bce:	fb0a fa04 	mul.w	sl, sl, r4
 8027bd2:	ea4f 251c 	mov.w	r5, ip, lsr #8
 8027bd6:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8027bda:	f50a 7480 	add.w	r4, sl, #256	@ 0x100
 8027bde:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 8027be2:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8027be6:	eb04 2a1a 	add.w	sl, r4, sl, lsr #8
 8027bea:	4465      	add	r5, ip
 8027bec:	f002 1cff 	and.w	ip, r2, #16711935	@ 0xff00ff
 8027bf0:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8027bf4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027bf8:	fb09 fc0c 	mul.w	ip, r9, ip
 8027bfc:	0a2d      	lsrs	r5, r5, #8
 8027bfe:	fb09 f902 	mul.w	r9, r9, r2
 8027c02:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8027c06:	ea4f 241c 	mov.w	r4, ip, lsr #8
 8027c0a:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8027c0e:	f509 7280 	add.w	r2, r9, #256	@ 0x100
 8027c12:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8027c16:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 8027c1a:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 8027c1e:	f000 12ff 	and.w	r2, r0, #16711935	@ 0xff00ff
 8027c22:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8027c26:	4464      	add	r4, ip
 8027c28:	fb08 f202 	mul.w	r2, r8, r2
 8027c2c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8027c30:	fb08 f800 	mul.w	r8, r8, r0
 8027c34:	0a24      	lsrs	r4, r4, #8
 8027c36:	0a10      	lsrs	r0, r2, #8
 8027c38:	f102 1201 	add.w	r2, r2, #65537	@ 0x10001
 8027c3c:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 8027c40:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 8027c44:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8027c48:	4402      	add	r2, r0
 8027c4a:	f508 7080 	add.w	r0, r8, #256	@ 0x100
 8027c4e:	eb00 2818 	add.w	r8, r0, r8, lsr #8
 8027c52:	9801      	ldr	r0, [sp, #4]
 8027c54:	0a12      	lsrs	r2, r2, #8
 8027c56:	4345      	muls	r5, r0
 8027c58:	9802      	ldr	r0, [sp, #8]
 8027c5a:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8027c5e:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8027c62:	fb06 5500 	mla	r5, r6, r0, r5
 8027c66:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 8027c6a:	fb02 520e 	mla	r2, r2, lr, r5
 8027c6e:	fb04 2403 	mla	r4, r4, r3, r2
 8027c72:	9a01      	ldr	r2, [sp, #4]
 8027c74:	fb02 f60a 	mul.w	r6, r2, sl
 8027c78:	0a24      	lsrs	r4, r4, #8
 8027c7a:	9a03      	ldr	r2, [sp, #12]
 8027c7c:	fb00 660b 	mla	r6, r0, fp, r6
 8027c80:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 8027c84:	fb07 fc02 	mul.w	ip, r7, r2
 8027c88:	fb0e 6e08 	mla	lr, lr, r8, r6
 8027c8c:	fb03 e309 	mla	r3, r3, r9, lr
 8027c90:	0a1b      	lsrs	r3, r3, #8
 8027c92:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8027c96:	4323      	orrs	r3, r4
 8027c98:	f10c 0401 	add.w	r4, ip, #1
 8027c9c:	eb04 241c 	add.w	r4, r4, ip, lsr #8
 8027ca0:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8027ca4:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8027ca8:	1224      	asrs	r4, r4, #8
 8027caa:	b2d5      	uxtb	r5, r2
 8027cac:	2cff      	cmp	r4, #255	@ 0xff
 8027cae:	b2c6      	uxtb	r6, r0
 8027cb0:	d10f      	bne.n	8027cd2 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x232>
 8027cb2:	700b      	strb	r3, [r1, #0]
 8027cb4:	7048      	strb	r0, [r1, #1]
 8027cb6:	708a      	strb	r2, [r1, #2]
 8027cb8:	70cc      	strb	r4, [r1, #3]
 8027cba:	b005      	add	sp, #20
 8027cbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027cc0:	4605      	mov	r5, r0
 8027cc2:	e70e      	b.n	8027ae2 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x42>
 8027cc4:	4605      	mov	r5, r0
 8027cc6:	4604      	mov	r4, r0
 8027cc8:	e717      	b.n	8027afa <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x5a>
 8027cca:	4602      	mov	r2, r0
 8027ccc:	e728      	b.n	8027b20 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x80>
 8027cce:	4602      	mov	r2, r0
 8027cd0:	e730      	b.n	8027b34 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x94>
 8027cd2:	b2e2      	uxtb	r2, r4
 8027cd4:	2c00      	cmp	r4, #0
 8027cd6:	d0f0      	beq.n	8027cba <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x21a>
 8027cd8:	78cc      	ldrb	r4, [r1, #3]
 8027cda:	b2db      	uxtb	r3, r3
 8027cdc:	fb17 f606 	smulbb	r6, r7, r6
 8027ce0:	fb02 fc04 	mul.w	ip, r2, r4
 8027ce4:	4422      	add	r2, r4
 8027ce6:	f10c 0001 	add.w	r0, ip, #1
 8027cea:	eb00 201c 	add.w	r0, r0, ip, lsr #8
 8027cee:	1200      	asrs	r0, r0, #8
 8027cf0:	1a24      	subs	r4, r4, r0
 8027cf2:	1a12      	subs	r2, r2, r0
 8027cf4:	7808      	ldrb	r0, [r1, #0]
 8027cf6:	b2d2      	uxtb	r2, r2
 8027cf8:	4360      	muls	r0, r4
 8027cfa:	70ca      	strb	r2, [r1, #3]
 8027cfc:	fb07 0303 	mla	r3, r7, r3, r0
 8027d00:	7848      	ldrb	r0, [r1, #1]
 8027d02:	fb17 f705 	smulbb	r7, r7, r5
 8027d06:	fb04 6000 	mla	r0, r4, r0, r6
 8027d0a:	fb93 f3f2 	sdiv	r3, r3, r2
 8027d0e:	2bff      	cmp	r3, #255	@ 0xff
 8027d10:	bfd6      	itet	le
 8027d12:	ea23 73e3 	bicle.w	r3, r3, r3, asr #31
 8027d16:	23ff      	movgt	r3, #255	@ 0xff
 8027d18:	b2db      	uxtble	r3, r3
 8027d1a:	fb90 f0f2 	sdiv	r0, r0, r2
 8027d1e:	700b      	strb	r3, [r1, #0]
 8027d20:	28ff      	cmp	r0, #255	@ 0xff
 8027d22:	788b      	ldrb	r3, [r1, #2]
 8027d24:	bfd4      	ite	le
 8027d26:	ea20 70e0 	bicle.w	r0, r0, r0, asr #31
 8027d2a:	20ff      	movgt	r0, #255	@ 0xff
 8027d2c:	fb04 7303 	mla	r3, r4, r3, r7
 8027d30:	bfd8      	it	le
 8027d32:	b2c0      	uxtble	r0, r0
 8027d34:	fb93 f3f2 	sdiv	r3, r3, r2
 8027d38:	2bff      	cmp	r3, #255	@ 0xff
 8027d3a:	7048      	strb	r0, [r1, #1]
 8027d3c:	bfd6      	itet	le
 8027d3e:	ea23 73e3 	bicle.w	r3, r3, r3, asr #31
 8027d42:	23ff      	movgt	r3, #255	@ 0xff
 8027d44:	b2db      	uxtble	r3, r3
 8027d46:	708b      	strb	r3, [r1, #2]
 8027d48:	e7b7      	b.n	8027cba <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x21a>

08027d4a <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027d4a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027d4e:	b09b      	sub	sp, #108	@ 0x6c
 8027d50:	9218      	str	r2, [sp, #96]	@ 0x60
 8027d52:	9306      	str	r3, [sp, #24]
 8027d54:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8027d56:	f89d 30b4 	ldrb.w	r3, [sp, #180]	@ 0xb4
 8027d5a:	9019      	str	r0, [sp, #100]	@ 0x64
 8027d5c:	9116      	str	r1, [sp, #88]	@ 0x58
 8027d5e:	6850      	ldr	r0, [r2, #4]
 8027d60:	9307      	str	r3, [sp, #28]
 8027d62:	6812      	ldr	r2, [r2, #0]
 8027d64:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 8027d68:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	@ 0x94
 8027d6c:	fb00 1303 	mla	r3, r0, r3, r1
 8027d70:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8027d74:	930a      	str	r3, [sp, #40]	@ 0x28
 8027d76:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8027d78:	681b      	ldr	r3, [r3, #0]
 8027d7a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8027d7c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8027d7e:	2b00      	cmp	r3, #0
 8027d80:	dc03      	bgt.n	8027d8a <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8027d82:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8027d84:	2b00      	cmp	r3, #0
 8027d86:	f340 83b3 	ble.w	80284f0 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a6>
 8027d8a:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8027d8c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027d90:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8027d94:	1e48      	subs	r0, r1, #1
 8027d96:	1e57      	subs	r7, r2, #1
 8027d98:	9b06      	ldr	r3, [sp, #24]
 8027d9a:	2b00      	cmp	r3, #0
 8027d9c:	f340 8167 	ble.w	802806e <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 8027da0:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8027da4:	ea4f 4326 	mov.w	r3, r6, asr #16
 8027da8:	d406      	bmi.n	8027db8 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8027daa:	4584      	cmp	ip, r0
 8027dac:	da04      	bge.n	8027db8 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8027dae:	2b00      	cmp	r3, #0
 8027db0:	db02      	blt.n	8027db8 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8027db2:	42bb      	cmp	r3, r7
 8027db4:	f2c0 815c 	blt.w	8028070 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 8027db8:	f11c 0c01 	adds.w	ip, ip, #1
 8027dbc:	f100 814c 	bmi.w	8028058 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30e>
 8027dc0:	4561      	cmp	r1, ip
 8027dc2:	f2c0 8149 	blt.w	8028058 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30e>
 8027dc6:	3301      	adds	r3, #1
 8027dc8:	f100 8146 	bmi.w	8028058 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30e>
 8027dcc:	429a      	cmp	r2, r3
 8027dce:	f2c0 8143 	blt.w	8028058 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30e>
 8027dd2:	9b06      	ldr	r3, [sp, #24]
 8027dd4:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8027dd6:	9317      	str	r3, [sp, #92]	@ 0x5c
 8027dd8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8027dda:	2b00      	cmp	r3, #0
 8027ddc:	f340 8165 	ble.w	80280aa <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8027de0:	9a2c      	ldr	r2, [sp, #176]	@ 0xb0
 8027de2:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8027de6:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8027de8:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8027dec:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8027df0:	1422      	asrs	r2, r4, #16
 8027df2:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8027df6:	689b      	ldr	r3, [r3, #8]
 8027df8:	f100 81e7 	bmi.w	80281ca <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 8027dfc:	f103 38ff 	add.w	r8, r3, #4294967295
 8027e00:	4542      	cmp	r2, r8
 8027e02:	f280 81e2 	bge.w	80281ca <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 8027e06:	f1bc 0f00 	cmp.w	ip, #0
 8027e0a:	f2c0 81de 	blt.w	80281ca <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 8027e0e:	f10e 38ff 	add.w	r8, lr, #4294967295
 8027e12:	45c4      	cmp	ip, r8
 8027e14:	f280 81d9 	bge.w	80281ca <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 8027e18:	b21b      	sxth	r3, r3
 8027e1a:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8027e1c:	fb0c 2203 	mla	r2, ip, r3, r2
 8027e20:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8027e24:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8027e28:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8027e2c:	2800      	cmp	r0, #0
 8027e2e:	f000 8182 	beq.w	8028136 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ec>
 8027e32:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8027e36:	950b      	str	r5, [sp, #44]	@ 0x2c
 8027e38:	0e2d      	lsrs	r5, r5, #24
 8027e3a:	9512      	str	r5, [sp, #72]	@ 0x48
 8027e3c:	b181      	cbz	r1, 8027e60 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8027e3e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8027e42:	3b01      	subs	r3, #1
 8027e44:	009b      	lsls	r3, r3, #2
 8027e46:	3304      	adds	r3, #4
 8027e48:	eb08 0c03 	add.w	ip, r8, r3
 8027e4c:	f858 3003 	ldr.w	r3, [r8, r3]
 8027e50:	9308      	str	r3, [sp, #32]
 8027e52:	0e1b      	lsrs	r3, r3, #24
 8027e54:	9310      	str	r3, [sp, #64]	@ 0x40
 8027e56:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8027e5a:	930c      	str	r3, [sp, #48]	@ 0x30
 8027e5c:	0e1b      	lsrs	r3, r3, #24
 8027e5e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8027e60:	b280      	uxth	r0, r0
 8027e62:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8027e64:	b289      	uxth	r1, r1
 8027e66:	fb00 f901 	mul.w	r9, r0, r1
 8027e6a:	0100      	lsls	r0, r0, #4
 8027e6c:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8027e70:	eba0 0809 	sub.w	r8, r0, r9
 8027e74:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 8027e78:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8027e7a:	b289      	uxth	r1, r1
 8027e7c:	fa1f f888 	uxth.w	r8, r8
 8027e80:	1a5b      	subs	r3, r3, r1
 8027e82:	fb08 f000 	mul.w	r0, r8, r0
 8027e86:	b29b      	uxth	r3, r3
 8027e88:	fb03 000e 	mla	r0, r3, lr, r0
 8027e8c:	fb01 0005 	mla	r0, r1, r5, r0
 8027e90:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8027e92:	fb09 0005 	mla	r0, r9, r5, r0
 8027e96:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8027e9a:	2800      	cmp	r0, #0
 8027e9c:	f000 80d3 	beq.w	8028046 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8027ea0:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8027ea4:	d01b      	beq.n	8027ede <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x194>
 8027ea6:	f002 1aff 	and.w	sl, r2, #16711935	@ 0xff00ff
 8027eaa:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8027eae:	fb0e fa0a 	mul.w	sl, lr, sl
 8027eb2:	fb0e fe02 	mul.w	lr, lr, r2
 8027eb6:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8027eba:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8027ebe:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 8027ec2:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8027ec6:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8027eca:	4452      	add	r2, sl
 8027ecc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027ed0:	0a12      	lsrs	r2, r2, #8
 8027ed2:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8027ed6:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8027eda:	ea42 020c 	orr.w	r2, r2, ip
 8027ede:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8027ee0:	2dff      	cmp	r5, #255	@ 0xff
 8027ee2:	d021      	beq.n	8027f28 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 8027ee4:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8027ee6:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 8027eea:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8027eec:	fb05 fb0b 	mul.w	fp, r5, fp
 8027ef0:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8027ef2:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8027ef6:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8027ef8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8027efc:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8027f00:	fb05 fa0a 	mul.w	sl, r5, sl
 8027f04:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8027f08:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8027f0c:	44de      	add	lr, fp
 8027f0e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8027f12:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027f16:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027f1a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8027f1e:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8027f22:	ea4e 050a 	orr.w	r5, lr, sl
 8027f26:	950b      	str	r5, [sp, #44]	@ 0x2c
 8027f28:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8027f2a:	2dff      	cmp	r5, #255	@ 0xff
 8027f2c:	d021      	beq.n	8027f72 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8027f2e:	9d08      	ldr	r5, [sp, #32]
 8027f30:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 8027f34:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8027f36:	fb05 fb0b 	mul.w	fp, r5, fp
 8027f3a:	9d08      	ldr	r5, [sp, #32]
 8027f3c:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8027f40:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8027f42:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8027f46:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8027f4a:	fb05 fa0a 	mul.w	sl, r5, sl
 8027f4e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8027f52:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8027f56:	44de      	add	lr, fp
 8027f58:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8027f5c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027f60:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027f64:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8027f68:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8027f6c:	ea4e 050a 	orr.w	r5, lr, sl
 8027f70:	9508      	str	r5, [sp, #32]
 8027f72:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8027f74:	2dff      	cmp	r5, #255	@ 0xff
 8027f76:	d021      	beq.n	8027fbc <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 8027f78:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8027f7a:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 8027f7e:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8027f80:	fb05 fb0b 	mul.w	fp, r5, fp
 8027f84:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8027f86:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8027f8a:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8027f8c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8027f90:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8027f94:	fb05 fa0a 	mul.w	sl, r5, sl
 8027f98:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8027f9c:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8027fa0:	44de      	add	lr, fp
 8027fa2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8027fa6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027faa:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027fae:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8027fb2:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8027fb6:	ea4e 050a 	orr.w	r5, lr, sl
 8027fba:	950c      	str	r5, [sp, #48]	@ 0x30
 8027fbc:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8027fbe:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 8027fc2:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8027fc6:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8027fca:	9d08      	ldr	r5, [sp, #32]
 8027fcc:	fb08 fc0c 	mul.w	ip, r8, ip
 8027fd0:	fb03 cc0e 	mla	ip, r3, lr, ip
 8027fd4:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 8027fd8:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8027fda:	fb01 cc0e 	mla	ip, r1, lr, ip
 8027fde:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 8027fe2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8027fe4:	fb09 cc0e 	mla	ip, r9, lr, ip
 8027fe8:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 8027fec:	fb08 f80e 	mul.w	r8, r8, lr
 8027ff0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027ff4:	fb03 8202 	mla	r2, r3, r2, r8
 8027ff8:	9b08      	ldr	r3, [sp, #32]
 8027ffa:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8027ffe:	f403 4a7f 	and.w	sl, r3, #65280	@ 0xff00
 8028002:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8028004:	fb01 220a 	mla	r2, r1, sl, r2
 8028008:	f403 417f 	and.w	r1, r3, #65280	@ 0xff00
 802800c:	9b07      	ldr	r3, [sp, #28]
 802800e:	fb09 2901 	mla	r9, r9, r1, r2
 8028012:	4358      	muls	r0, r3
 8028014:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8028018:	1c43      	adds	r3, r0, #1
 802801a:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 802801e:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8028022:	ea4c 0c09 	orr.w	ip, ip, r9
 8028026:	1200      	asrs	r0, r0, #8
 8028028:	f3cc 4307 	ubfx	r3, ip, #16, #8
 802802c:	f3cc 2207 	ubfx	r2, ip, #8, #8
 8028030:	28ff      	cmp	r0, #255	@ 0xff
 8028032:	b2d9      	uxtb	r1, r3
 8028034:	fa5f fe82 	uxtb.w	lr, r2
 8028038:	f040 8086 	bne.w	8028148 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fe>
 802803c:	f887 c000 	strb.w	ip, [r7]
 8028040:	707a      	strb	r2, [r7, #1]
 8028042:	70bb      	strb	r3, [r7, #2]
 8028044:	70f8      	strb	r0, [r7, #3]
 8028046:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8028048:	3704      	adds	r7, #4
 802804a:	441c      	add	r4, r3
 802804c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802804e:	441e      	add	r6, r3
 8028050:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8028052:	3b01      	subs	r3, #1
 8028054:	9317      	str	r3, [sp, #92]	@ 0x5c
 8028056:	e6bf      	b.n	8027dd8 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8028058:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802805a:	441c      	add	r4, r3
 802805c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802805e:	441e      	add	r6, r3
 8028060:	9b06      	ldr	r3, [sp, #24]
 8028062:	3b01      	subs	r3, #1
 8028064:	9306      	str	r3, [sp, #24]
 8028066:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8028068:	3304      	adds	r3, #4
 802806a:	930a      	str	r3, [sp, #40]	@ 0x28
 802806c:	e694      	b.n	8027d98 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 802806e:	d023      	beq.n	80280b8 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8028070:	9b06      	ldr	r3, [sp, #24]
 8028072:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 8028074:	3b01      	subs	r3, #1
 8028076:	fb00 4003 	mla	r0, r0, r3, r4
 802807a:	1400      	asrs	r0, r0, #16
 802807c:	f53f aea9 	bmi.w	8027dd2 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 8028080:	3901      	subs	r1, #1
 8028082:	4288      	cmp	r0, r1
 8028084:	f6bf aea5 	bge.w	8027dd2 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 8028088:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 802808a:	fb01 6303 	mla	r3, r1, r3, r6
 802808e:	141b      	asrs	r3, r3, #16
 8028090:	f53f ae9f 	bmi.w	8027dd2 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 8028094:	3a01      	subs	r2, #1
 8028096:	4293      	cmp	r3, r2
 8028098:	f6bf ae9b 	bge.w	8027dd2 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 802809c:	f8dd b018 	ldr.w	fp, [sp, #24]
 80280a0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80280a2:	f1bb 0f00 	cmp.w	fp, #0
 80280a6:	f300 80ae 	bgt.w	8028206 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4bc>
 80280aa:	9b06      	ldr	r3, [sp, #24]
 80280ac:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 80280b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80280b2:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80280b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80280b8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80280ba:	2b00      	cmp	r3, #0
 80280bc:	f340 8218 	ble.w	80284f0 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a6>
 80280c0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80280c4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80280c6:	ee30 0a04 	vadd.f32	s0, s0, s8
 80280ca:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80280ce:	eef0 6a62 	vmov.f32	s13, s5
 80280d2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80280d6:	ee31 1a05 	vadd.f32	s2, s2, s10
 80280da:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80280de:	ee16 4a90 	vmov	r4, s13
 80280e2:	eef0 6a43 	vmov.f32	s13, s6
 80280e6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80280ea:	ee16 6a90 	vmov	r6, s13
 80280ee:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80280f2:	ee61 7a27 	vmul.f32	s15, s2, s15
 80280f6:	ee77 2a62 	vsub.f32	s5, s14, s5
 80280fa:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80280fe:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8028102:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8028106:	ee12 2a90 	vmov	r2, s5
 802810a:	eef0 2a47 	vmov.f32	s5, s14
 802810e:	fb92 f3f3 	sdiv	r3, r2, r3
 8028112:	ee13 2a10 	vmov	r2, s6
 8028116:	9327      	str	r3, [sp, #156]	@ 0x9c
 8028118:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802811a:	eeb0 3a67 	vmov.f32	s6, s15
 802811e:	fb92 f3f3 	sdiv	r3, r2, r3
 8028122:	9328      	str	r3, [sp, #160]	@ 0xa0
 8028124:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8028126:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8028128:	3b01      	subs	r3, #1
 802812a:	9316      	str	r3, [sp, #88]	@ 0x58
 802812c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802812e:	bf08      	it	eq
 8028130:	4613      	moveq	r3, r2
 8028132:	9306      	str	r3, [sp, #24]
 8028134:	e622      	b.n	8027d7c <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 8028136:	2900      	cmp	r1, #0
 8028138:	f43f ae92 	beq.w	8027e60 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 802813c:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8028140:	9308      	str	r3, [sp, #32]
 8028142:	0e1b      	lsrs	r3, r3, #24
 8028144:	9310      	str	r3, [sp, #64]	@ 0x40
 8028146:	e68b      	b.n	8027e60 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8028148:	b2c3      	uxtb	r3, r0
 802814a:	2800      	cmp	r0, #0
 802814c:	f43f af7b 	beq.w	8028046 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8028150:	78f8      	ldrb	r0, [r7, #3]
 8028152:	fa5f fc8c 	uxtb.w	ip, ip
 8028156:	9d07      	ldr	r5, [sp, #28]
 8028158:	fb03 f800 	mul.w	r8, r3, r0
 802815c:	4403      	add	r3, r0
 802815e:	f108 0201 	add.w	r2, r8, #1
 8028162:	eb02 2218 	add.w	r2, r2, r8, lsr #8
 8028166:	1212      	asrs	r2, r2, #8
 8028168:	1a80      	subs	r0, r0, r2
 802816a:	1a9b      	subs	r3, r3, r2
 802816c:	783a      	ldrb	r2, [r7, #0]
 802816e:	b2db      	uxtb	r3, r3
 8028170:	4342      	muls	r2, r0
 8028172:	70fb      	strb	r3, [r7, #3]
 8028174:	fb05 220c 	mla	r2, r5, ip, r2
 8028178:	9d07      	ldr	r5, [sp, #28]
 802817a:	fb92 f2f3 	sdiv	r2, r2, r3
 802817e:	fb15 fe0e 	smulbb	lr, r5, lr
 8028182:	2aff      	cmp	r2, #255	@ 0xff
 8028184:	9d07      	ldr	r5, [sp, #28]
 8028186:	bfd4      	ite	le
 8028188:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 802818c:	22ff      	movgt	r2, #255	@ 0xff
 802818e:	fb15 f101 	smulbb	r1, r5, r1
 8028192:	bfd8      	it	le
 8028194:	b2d2      	uxtble	r2, r2
 8028196:	703a      	strb	r2, [r7, #0]
 8028198:	787a      	ldrb	r2, [r7, #1]
 802819a:	fb00 e202 	mla	r2, r0, r2, lr
 802819e:	fb92 f2f3 	sdiv	r2, r2, r3
 80281a2:	2aff      	cmp	r2, #255	@ 0xff
 80281a4:	bfd6      	itet	le
 80281a6:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 80281aa:	22ff      	movgt	r2, #255	@ 0xff
 80281ac:	b2d2      	uxtble	r2, r2
 80281ae:	707a      	strb	r2, [r7, #1]
 80281b0:	78ba      	ldrb	r2, [r7, #2]
 80281b2:	fb00 1202 	mla	r2, r0, r2, r1
 80281b6:	fb92 f2f3 	sdiv	r2, r2, r3
 80281ba:	2aff      	cmp	r2, #255	@ 0xff
 80281bc:	bfd6      	itet	le
 80281be:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 80281c2:	22ff      	movgt	r2, #255	@ 0xff
 80281c4:	b2d2      	uxtble	r2, r2
 80281c6:	70ba      	strb	r2, [r7, #2]
 80281c8:	e73d      	b.n	8028046 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 80281ca:	f112 0801 	adds.w	r8, r2, #1
 80281ce:	f53f af3a 	bmi.w	8028046 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 80281d2:	4543      	cmp	r3, r8
 80281d4:	f6ff af37 	blt.w	8028046 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 80281d8:	f11c 0801 	adds.w	r8, ip, #1
 80281dc:	f53f af33 	bmi.w	8028046 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 80281e0:	45c6      	cmp	lr, r8
 80281e2:	f6ff af30 	blt.w	8028046 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 80281e6:	9d07      	ldr	r5, [sp, #28]
 80281e8:	b21b      	sxth	r3, r3
 80281ea:	9201      	str	r2, [sp, #4]
 80281ec:	fa0f f28e 	sxth.w	r2, lr
 80281f0:	e9cd 1504 	strd	r1, r5, [sp, #16]
 80281f4:	e9cd c002 	strd	ip, r0, [sp, #8]
 80281f8:	9200      	str	r2, [sp, #0]
 80281fa:	4639      	mov	r1, r7
 80281fc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80281fe:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8028200:	f7ff fc4e 	bl	8027aa0 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh>
 8028204:	e71f      	b.n	8028046 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8028206:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8028208:	ea4f 4c24 	mov.w	ip, r4, asr #16
 802820c:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 802820e:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8028212:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8028216:	1433      	asrs	r3, r6, #16
 8028218:	f3c6 3703 	ubfx	r7, r6, #12, #4
 802821c:	fb00 c303 	mla	r3, r0, r3, ip
 8028220:	eb05 0c83 	add.w	ip, r5, r3, lsl #2
 8028224:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8028228:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 802822c:	2a00      	cmp	r2, #0
 802822e:	f000 8111 	beq.w	8028454 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70a>
 8028232:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8028236:	950d      	str	r5, [sp, #52]	@ 0x34
 8028238:	0e2d      	lsrs	r5, r5, #24
 802823a:	9514      	str	r5, [sp, #80]	@ 0x50
 802823c:	b187      	cbz	r7, 8028260 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x516>
 802823e:	f100 4080 	add.w	r0, r0, #1073741824	@ 0x40000000
 8028242:	3801      	subs	r0, #1
 8028244:	0080      	lsls	r0, r0, #2
 8028246:	3004      	adds	r0, #4
 8028248:	eb0c 0800 	add.w	r8, ip, r0
 802824c:	f85c 0000 	ldr.w	r0, [ip, r0]
 8028250:	9009      	str	r0, [sp, #36]	@ 0x24
 8028252:	0e00      	lsrs	r0, r0, #24
 8028254:	9011      	str	r0, [sp, #68]	@ 0x44
 8028256:	f8d8 0004 	ldr.w	r0, [r8, #4]
 802825a:	900e      	str	r0, [sp, #56]	@ 0x38
 802825c:	0e00      	lsrs	r0, r0, #24
 802825e:	9015      	str	r0, [sp, #84]	@ 0x54
 8028260:	b292      	uxth	r2, r2
 8028262:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8028264:	b2bf      	uxth	r7, r7
 8028266:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8028268:	fb02 f907 	mul.w	r9, r2, r7
 802826c:	0112      	lsls	r2, r2, #4
 802826e:	ebc9 1707 	rsb	r7, r9, r7, lsl #4
 8028272:	eba2 0809 	sub.w	r8, r2, r9
 8028276:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 802827a:	b2bf      	uxth	r7, r7
 802827c:	fa1f f888 	uxth.w	r8, r8
 8028280:	1bd2      	subs	r2, r2, r7
 8028282:	fb08 f000 	mul.w	r0, r8, r0
 8028286:	b292      	uxth	r2, r2
 8028288:	fb02 000e 	mla	r0, r2, lr, r0
 802828c:	fb07 0005 	mla	r0, r7, r5, r0
 8028290:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8028292:	fb09 0005 	mla	r0, r9, r5, r0
 8028296:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802829a:	2800      	cmp	r0, #0
 802829c:	f000 80d2 	beq.w	8028444 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
 80282a0:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 80282a4:	d01b      	beq.n	80282de <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x594>
 80282a6:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 80282aa:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80282ae:	fb0e fa0a 	mul.w	sl, lr, sl
 80282b2:	fb0e fe03 	mul.w	lr, lr, r3
 80282b6:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80282ba:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 80282be:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 80282c2:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80282c6:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80282ca:	4453      	add	r3, sl
 80282cc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80282d0:	0a1b      	lsrs	r3, r3, #8
 80282d2:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 80282d6:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80282da:	ea43 030c 	orr.w	r3, r3, ip
 80282de:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80282e0:	2dff      	cmp	r5, #255	@ 0xff
 80282e2:	d021      	beq.n	8028328 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5de>
 80282e4:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80282e6:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 80282ea:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80282ec:	fb05 fc0c 	mul.w	ip, r5, ip
 80282f0:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80282f2:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80282f6:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 80282fa:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80282fc:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8028300:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8028304:	fb05 fa0a 	mul.w	sl, r5, sl
 8028308:	44e6      	add	lr, ip
 802830a:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 802830e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028312:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8028316:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802831a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802831e:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8028322:	ea4e 050a 	orr.w	r5, lr, sl
 8028326:	950d      	str	r5, [sp, #52]	@ 0x34
 8028328:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 802832a:	2dff      	cmp	r5, #255	@ 0xff
 802832c:	d021      	beq.n	8028372 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x628>
 802832e:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8028330:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8028334:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8028336:	fb05 fc0c 	mul.w	ip, r5, ip
 802833a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 802833c:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8028340:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8028344:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8028346:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 802834a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802834e:	fb05 fa0a 	mul.w	sl, r5, sl
 8028352:	44e6      	add	lr, ip
 8028354:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8028358:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802835c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8028360:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8028364:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028368:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802836c:	ea4e 050a 	orr.w	r5, lr, sl
 8028370:	9509      	str	r5, [sp, #36]	@ 0x24
 8028372:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8028374:	2dff      	cmp	r5, #255	@ 0xff
 8028376:	d021      	beq.n	80283bc <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x672>
 8028378:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 802837a:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 802837e:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8028380:	fb05 fc0c 	mul.w	ip, r5, ip
 8028384:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8028386:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 802838a:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 802838e:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8028390:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8028394:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8028398:	fb05 fa0a 	mul.w	sl, r5, sl
 802839c:	44e6      	add	lr, ip
 802839e:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80283a2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80283a6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80283aa:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80283ae:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80283b2:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80283b6:	ea4e 050a 	orr.w	r5, lr, sl
 80283ba:	950e      	str	r5, [sp, #56]	@ 0x38
 80283bc:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80283be:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 80283c2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80283c6:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 80283ca:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80283cc:	fb08 fc0c 	mul.w	ip, r8, ip
 80283d0:	fb02 cc0e 	mla	ip, r2, lr, ip
 80283d4:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 80283d8:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 80283da:	fb07 cc0e 	mla	ip, r7, lr, ip
 80283de:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 80283e2:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80283e4:	fb09 cc0e 	mla	ip, r9, lr, ip
 80283e8:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 80283ec:	fb08 f80e 	mul.w	r8, r8, lr
 80283f0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80283f4:	fb02 8303 	mla	r3, r2, r3, r8
 80283f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80283fa:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80283fe:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 8028402:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8028404:	fb07 330a 	mla	r3, r7, sl, r3
 8028408:	f402 4e7f 	and.w	lr, r2, #65280	@ 0xff00
 802840c:	fb09 3e0e 	mla	lr, r9, lr, r3
 8028410:	9b07      	ldr	r3, [sp, #28]
 8028412:	4358      	muls	r0, r3
 8028414:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028418:	1c43      	adds	r3, r0, #1
 802841a:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 802841e:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8028422:	ea4c 0c0e 	orr.w	ip, ip, lr
 8028426:	1200      	asrs	r0, r0, #8
 8028428:	f3cc 4307 	ubfx	r3, ip, #16, #8
 802842c:	f3cc 2207 	ubfx	r2, ip, #8, #8
 8028430:	28ff      	cmp	r0, #255	@ 0xff
 8028432:	b2df      	uxtb	r7, r3
 8028434:	fa5f fe82 	uxtb.w	lr, r2
 8028438:	d115      	bne.n	8028466 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71c>
 802843a:	f881 c000 	strb.w	ip, [r1]
 802843e:	704a      	strb	r2, [r1, #1]
 8028440:	708b      	strb	r3, [r1, #2]
 8028442:	70c8      	strb	r0, [r1, #3]
 8028444:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8028446:	3104      	adds	r1, #4
 8028448:	f10b 3bff 	add.w	fp, fp, #4294967295
 802844c:	441c      	add	r4, r3
 802844e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8028450:	441e      	add	r6, r3
 8028452:	e626      	b.n	80280a2 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8028454:	2f00      	cmp	r7, #0
 8028456:	f43f af03 	beq.w	8028260 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x516>
 802845a:	f85c 0020 	ldr.w	r0, [ip, r0, lsl #2]
 802845e:	9009      	str	r0, [sp, #36]	@ 0x24
 8028460:	0e00      	lsrs	r0, r0, #24
 8028462:	9011      	str	r0, [sp, #68]	@ 0x44
 8028464:	e6fc      	b.n	8028260 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x516>
 8028466:	b2c3      	uxtb	r3, r0
 8028468:	2800      	cmp	r0, #0
 802846a:	d0eb      	beq.n	8028444 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
 802846c:	78c8      	ldrb	r0, [r1, #3]
 802846e:	fa5f fc8c 	uxtb.w	ip, ip
 8028472:	9d07      	ldr	r5, [sp, #28]
 8028474:	fb03 f800 	mul.w	r8, r3, r0
 8028478:	4403      	add	r3, r0
 802847a:	f108 0201 	add.w	r2, r8, #1
 802847e:	eb02 2218 	add.w	r2, r2, r8, lsr #8
 8028482:	1212      	asrs	r2, r2, #8
 8028484:	1a9b      	subs	r3, r3, r2
 8028486:	1a82      	subs	r2, r0, r2
 8028488:	7808      	ldrb	r0, [r1, #0]
 802848a:	b2db      	uxtb	r3, r3
 802848c:	4350      	muls	r0, r2
 802848e:	70cb      	strb	r3, [r1, #3]
 8028490:	fb05 0c0c 	mla	ip, r5, ip, r0
 8028494:	9d07      	ldr	r5, [sp, #28]
 8028496:	7848      	ldrb	r0, [r1, #1]
 8028498:	fb15 fe0e 	smulbb	lr, r5, lr
 802849c:	9d07      	ldr	r5, [sp, #28]
 802849e:	fb9c fcf3 	sdiv	ip, ip, r3
 80284a2:	fb02 e000 	mla	r0, r2, r0, lr
 80284a6:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 80284aa:	fb15 f707 	smulbb	r7, r5, r7
 80284ae:	bfd4      	ite	le
 80284b0:	ea2c 7cec 	bicle.w	ip, ip, ip, asr #31
 80284b4:	f04f 0cff 	movgt.w	ip, #255	@ 0xff
 80284b8:	fb90 f0f3 	sdiv	r0, r0, r3
 80284bc:	bfd8      	it	le
 80284be:	fa5f fc8c 	uxtble.w	ip, ip
 80284c2:	28ff      	cmp	r0, #255	@ 0xff
 80284c4:	bfd4      	ite	le
 80284c6:	ea20 70e0 	bicle.w	r0, r0, r0, asr #31
 80284ca:	20ff      	movgt	r0, #255	@ 0xff
 80284cc:	f881 c000 	strb.w	ip, [r1]
 80284d0:	bfd8      	it	le
 80284d2:	b2c0      	uxtble	r0, r0
 80284d4:	7048      	strb	r0, [r1, #1]
 80284d6:	7888      	ldrb	r0, [r1, #2]
 80284d8:	fb02 7200 	mla	r2, r2, r0, r7
 80284dc:	fb92 f2f3 	sdiv	r2, r2, r3
 80284e0:	2aff      	cmp	r2, #255	@ 0xff
 80284e2:	bfd6      	itet	le
 80284e4:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 80284e8:	22ff      	movgt	r2, #255	@ 0xff
 80284ea:	b2d2      	uxtble	r2, r2
 80284ec:	708a      	strb	r2, [r1, #2]
 80284ee:	e7a9      	b.n	8028444 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
 80284f0:	b01b      	add	sp, #108	@ 0x6c
 80284f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080284f8 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh>:
 80284f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80284fc:	e9dd 400b 	ldrd	r4, r0, [sp, #44]	@ 0x2c
 8028500:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 8028504:	2c00      	cmp	r4, #0
 8028506:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	@ 0x28
 802850a:	f89d 7034 	ldrb.w	r7, [sp, #52]	@ 0x34
 802850e:	fb00 4e03 	mla	lr, r0, r3, r4
 8028512:	f89d c038 	ldrb.w	ip, [sp, #56]	@ 0x38
 8028516:	f2c0 808f 	blt.w	8028638 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x140>
 802851a:	45a1      	cmp	r9, r4
 802851c:	f340 808c 	ble.w	8028638 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x140>
 8028520:	2800      	cmp	r0, #0
 8028522:	f2c0 8089 	blt.w	8028638 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x140>
 8028526:	4580      	cmp	r8, r0
 8028528:	f340 8086 	ble.w	8028638 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x140>
 802852c:	ea4f 055e 	mov.w	r5, lr, lsr #1
 8028530:	f01e 0f01 	tst.w	lr, #1
 8028534:	5d56      	ldrb	r6, [r2, r5]
 8028536:	bf0c      	ite	eq
 8028538:	f006 060f 	andeq.w	r6, r6, #15
 802853c:	1136      	asrne	r6, r6, #4
 802853e:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8028542:	b2f6      	uxtb	r6, r6
 8028544:	f114 0a01 	adds.w	sl, r4, #1
 8028548:	d478      	bmi.n	802863c <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x144>
 802854a:	45d1      	cmp	r9, sl
 802854c:	dd76      	ble.n	802863c <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x144>
 802854e:	2800      	cmp	r0, #0
 8028550:	db74      	blt.n	802863c <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x144>
 8028552:	4580      	cmp	r8, r0
 8028554:	dd72      	ble.n	802863c <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x144>
 8028556:	2f00      	cmp	r7, #0
 8028558:	d072      	beq.n	8028640 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x148>
 802855a:	f10e 0b01 	add.w	fp, lr, #1
 802855e:	ea4f 055b 	mov.w	r5, fp, lsr #1
 8028562:	f01b 0f01 	tst.w	fp, #1
 8028566:	5d55      	ldrb	r5, [r2, r5]
 8028568:	bf0c      	ite	eq
 802856a:	f005 050f 	andeq.w	r5, r5, #15
 802856e:	112d      	asrne	r5, r5, #4
 8028570:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8028574:	b2ed      	uxtb	r5, r5
 8028576:	f1bc 0f00 	cmp.w	ip, #0
 802857a:	d065      	beq.n	8028648 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x150>
 802857c:	2c00      	cmp	r4, #0
 802857e:	f100 0001 	add.w	r0, r0, #1
 8028582:	db5f      	blt.n	8028644 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x14c>
 8028584:	45a1      	cmp	r9, r4
 8028586:	dd5d      	ble.n	8028644 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x14c>
 8028588:	2800      	cmp	r0, #0
 802858a:	db5b      	blt.n	8028644 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x14c>
 802858c:	4580      	cmp	r8, r0
 802858e:	dd59      	ble.n	8028644 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x14c>
 8028590:	eb03 0b0e 	add.w	fp, r3, lr
 8028594:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8028598:	f01b 0f01 	tst.w	fp, #1
 802859c:	5d14      	ldrb	r4, [r2, r4]
 802859e:	bf0c      	ite	eq
 80285a0:	f004 040f 	andeq.w	r4, r4, #15
 80285a4:	1124      	asrne	r4, r4, #4
 80285a6:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80285aa:	b2e4      	uxtb	r4, r4
 80285ac:	f1ba 0f00 	cmp.w	sl, #0
 80285b0:	db4d      	blt.n	802864e <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x156>
 80285b2:	45d1      	cmp	r9, sl
 80285b4:	dd4b      	ble.n	802864e <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x156>
 80285b6:	2800      	cmp	r0, #0
 80285b8:	db49      	blt.n	802864e <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x156>
 80285ba:	4580      	cmp	r8, r0
 80285bc:	dd47      	ble.n	802864e <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x156>
 80285be:	2f00      	cmp	r7, #0
 80285c0:	d047      	beq.n	8028652 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x15a>
 80285c2:	3301      	adds	r3, #1
 80285c4:	449e      	add	lr, r3
 80285c6:	ea4f 035e 	mov.w	r3, lr, lsr #1
 80285ca:	f01e 0f01 	tst.w	lr, #1
 80285ce:	5cd0      	ldrb	r0, [r2, r3]
 80285d0:	bf0c      	ite	eq
 80285d2:	f000 000f 	andeq.w	r0, r0, #15
 80285d6:	1100      	asrne	r0, r0, #4
 80285d8:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80285dc:	b2c3      	uxtb	r3, r0
 80285de:	b2ba      	uxth	r2, r7
 80285e0:	fa1f fc8c 	uxth.w	ip, ip
 80285e4:	fb02 f00c 	mul.w	r0, r2, ip
 80285e8:	0112      	lsls	r2, r2, #4
 80285ea:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 80285ee:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 80285f2:	1a12      	subs	r2, r2, r0
 80285f4:	fa1f fc8c 	uxth.w	ip, ip
 80285f8:	b292      	uxth	r2, r2
 80285fa:	eba7 070c 	sub.w	r7, r7, ip
 80285fe:	436a      	muls	r2, r5
 8028600:	b2bf      	uxth	r7, r7
 8028602:	fb06 2207 	mla	r2, r6, r7, r2
 8028606:	fb0c 2404 	mla	r4, ip, r4, r2
 802860a:	f89d 203c 	ldrb.w	r2, [sp, #60]	@ 0x3c
 802860e:	fb00 4303 	mla	r3, r0, r3, r4
 8028612:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8028616:	4353      	muls	r3, r2
 8028618:	1c5a      	adds	r2, r3, #1
 802861a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802861e:	4a21      	ldr	r2, [pc, #132]	@ (80286a4 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x1ac>)
 8028620:	121b      	asrs	r3, r3, #8
 8028622:	7895      	ldrb	r5, [r2, #2]
 8028624:	7857      	ldrb	r7, [r2, #1]
 8028626:	2bff      	cmp	r3, #255	@ 0xff
 8028628:	7814      	ldrb	r4, [r2, #0]
 802862a:	d114      	bne.n	8028656 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x15e>
 802862c:	700c      	strb	r4, [r1, #0]
 802862e:	704f      	strb	r7, [r1, #1]
 8028630:	708d      	strb	r5, [r1, #2]
 8028632:	70cb      	strb	r3, [r1, #3]
 8028634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028638:	2600      	movs	r6, #0
 802863a:	e783      	b.n	8028544 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x4c>
 802863c:	2500      	movs	r5, #0
 802863e:	e79a      	b.n	8028576 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x7e>
 8028640:	463d      	mov	r5, r7
 8028642:	e798      	b.n	8028576 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x7e>
 8028644:	2400      	movs	r4, #0
 8028646:	e7b1      	b.n	80285ac <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0xb4>
 8028648:	4663      	mov	r3, ip
 802864a:	4664      	mov	r4, ip
 802864c:	e7c7      	b.n	80285de <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0xe6>
 802864e:	2300      	movs	r3, #0
 8028650:	e7c5      	b.n	80285de <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0xe6>
 8028652:	463b      	mov	r3, r7
 8028654:	e7c3      	b.n	80285de <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0xe6>
 8028656:	b2da      	uxtb	r2, r3
 8028658:	2b00      	cmp	r3, #0
 802865a:	d0eb      	beq.n	8028634 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x13c>
 802865c:	78ce      	ldrb	r6, [r1, #3]
 802865e:	435c      	muls	r4, r3
 8028660:	435f      	muls	r7, r3
 8028662:	fb02 fc06 	mul.w	ip, r2, r6
 8028666:	4432      	add	r2, r6
 8028668:	436b      	muls	r3, r5
 802866a:	f10c 0001 	add.w	r0, ip, #1
 802866e:	eb00 201c 	add.w	r0, r0, ip, lsr #8
 8028672:	1200      	asrs	r0, r0, #8
 8028674:	1a12      	subs	r2, r2, r0
 8028676:	1a30      	subs	r0, r6, r0
 8028678:	780e      	ldrb	r6, [r1, #0]
 802867a:	b2d2      	uxtb	r2, r2
 802867c:	fb00 4606 	mla	r6, r0, r6, r4
 8028680:	784c      	ldrb	r4, [r1, #1]
 8028682:	70ca      	strb	r2, [r1, #3]
 8028684:	fb00 7404 	mla	r4, r0, r4, r7
 8028688:	fb94 f4f2 	sdiv	r4, r4, r2
 802868c:	704c      	strb	r4, [r1, #1]
 802868e:	788c      	ldrb	r4, [r1, #2]
 8028690:	fb00 3304 	mla	r3, r0, r4, r3
 8028694:	fb96 f6f2 	sdiv	r6, r6, r2
 8028698:	fb93 f3f2 	sdiv	r3, r3, r2
 802869c:	700e      	strb	r6, [r1, #0]
 802869e:	708b      	strb	r3, [r1, #2]
 80286a0:	e7c8      	b.n	8028634 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x13c>
 80286a2:	bf00      	nop
 80286a4:	20029ee8 	.word	0x20029ee8

080286a8 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80286a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80286ac:	b097      	sub	sp, #92	@ 0x5c
 80286ae:	9214      	str	r2, [sp, #80]	@ 0x50
 80286b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80286b2:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 80286b4:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 80286b8:	9015      	str	r0, [sp, #84]	@ 0x54
 80286ba:	910d      	str	r1, [sp, #52]	@ 0x34
 80286bc:	6850      	ldr	r0, [r2, #4]
 80286be:	930e      	str	r3, [sp, #56]	@ 0x38
 80286c0:	6812      	ldr	r2, [r2, #0]
 80286c2:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	@ 0x98
 80286c6:	e9dd a521 	ldrd	sl, r5, [sp, #132]	@ 0x84
 80286ca:	fb00 1303 	mla	r3, r0, r3, r1
 80286ce:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80286d2:	930a      	str	r3, [sp, #40]	@ 0x28
 80286d4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80286d6:	689b      	ldr	r3, [r3, #8]
 80286d8:	3301      	adds	r3, #1
 80286da:	f023 0301 	bic.w	r3, r3, #1
 80286de:	930f      	str	r3, [sp, #60]	@ 0x3c
 80286e0:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80286e2:	681e      	ldr	r6, [r3, #0]
 80286e4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80286e6:	2b00      	cmp	r3, #0
 80286e8:	dc03      	bgt.n	80286f2 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 80286ea:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80286ec:	2b00      	cmp	r3, #0
 80286ee:	f340 8255 	ble.w	8028b9c <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 80286f2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80286f4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80286f8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80286fc:	1e48      	subs	r0, r1, #1
 80286fe:	1e57      	subs	r7, r2, #1
 8028700:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8028702:	2b00      	cmp	r3, #0
 8028704:	f340 80bb 	ble.w	802887e <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8028708:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 802870c:	ea4f 4325 	mov.w	r3, r5, asr #16
 8028710:	d406      	bmi.n	8028720 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8028712:	4584      	cmp	ip, r0
 8028714:	da04      	bge.n	8028720 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8028716:	2b00      	cmp	r3, #0
 8028718:	db02      	blt.n	8028720 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802871a:	42bb      	cmp	r3, r7
 802871c:	f2c0 80b0 	blt.w	8028880 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8028720:	f11c 0c01 	adds.w	ip, ip, #1
 8028724:	f100 80a0 	bmi.w	8028868 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 8028728:	4561      	cmp	r1, ip
 802872a:	f2c0 809d 	blt.w	8028868 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 802872e:	3301      	adds	r3, #1
 8028730:	f100 809a 	bmi.w	8028868 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 8028734:	429a      	cmp	r2, r3
 8028736:	f2c0 8097 	blt.w	8028868 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 802873a:	e9dd b709 	ldrd	fp, r7, [sp, #36]	@ 0x24
 802873e:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	@ 0x3c
 8028742:	f1bb 0f00 	cmp.w	fp, #0
 8028746:	f340 80bb 	ble.w	80288c0 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 802874a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802874c:	1428      	asrs	r0, r5, #16
 802874e:	f3ca 3203 	ubfx	r2, sl, #12, #4
 8028752:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8028756:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 802875a:	ea5f 432a 	movs.w	r3, sl, asr #16
 802875e:	f100 8134 	bmi.w	80289ca <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8028762:	f10c 39ff 	add.w	r9, ip, #4294967295
 8028766:	454b      	cmp	r3, r9
 8028768:	f280 812f 	bge.w	80289ca <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 802876c:	2800      	cmp	r0, #0
 802876e:	f2c0 812c 	blt.w	80289ca <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8028772:	f10e 39ff 	add.w	r9, lr, #4294967295
 8028776:	4548      	cmp	r0, r9
 8028778:	f280 8127 	bge.w	80289ca <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 802877c:	fb00 3308 	mla	r3, r0, r8, r3
 8028780:	0858      	lsrs	r0, r3, #1
 8028782:	07dc      	lsls	r4, r3, #31
 8028784:	f816 c000 	ldrb.w	ip, [r6, r0]
 8028788:	bf54      	ite	pl
 802878a:	f00c 0c0f 	andpl.w	ip, ip, #15
 802878e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8028792:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8028796:	fa5f fc8c 	uxtb.w	ip, ip
 802879a:	2a00      	cmp	r2, #0
 802879c:	f000 80d6 	beq.w	802894c <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 80287a0:	1c58      	adds	r0, r3, #1
 80287a2:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 80287a6:	07c0      	lsls	r0, r0, #31
 80287a8:	f816 e00e 	ldrb.w	lr, [r6, lr]
 80287ac:	bf54      	ite	pl
 80287ae:	f00e 0e0f 	andpl.w	lr, lr, #15
 80287b2:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 80287b6:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 80287ba:	fa5f f08e 	uxtb.w	r0, lr
 80287be:	9010      	str	r0, [sp, #64]	@ 0x40
 80287c0:	b1d9      	cbz	r1, 80287fa <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80287c2:	4443      	add	r3, r8
 80287c4:	0858      	lsrs	r0, r3, #1
 80287c6:	07dc      	lsls	r4, r3, #31
 80287c8:	f103 0301 	add.w	r3, r3, #1
 80287cc:	5c30      	ldrb	r0, [r6, r0]
 80287ce:	bf54      	ite	pl
 80287d0:	f000 000f 	andpl.w	r0, r0, #15
 80287d4:	1100      	asrmi	r0, r0, #4
 80287d6:	07dc      	lsls	r4, r3, #31
 80287d8:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80287dc:	b2c0      	uxtb	r0, r0
 80287de:	900b      	str	r0, [sp, #44]	@ 0x2c
 80287e0:	ea4f 0053 	mov.w	r0, r3, lsr #1
 80287e4:	f816 e000 	ldrb.w	lr, [r6, r0]
 80287e8:	bf54      	ite	pl
 80287ea:	f00e 030f 	andpl.w	r3, lr, #15
 80287ee:	ea4f 132e 	movmi.w	r3, lr, asr #4
 80287f2:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80287f6:	b2db      	uxtb	r3, r3
 80287f8:	9311      	str	r3, [sp, #68]	@ 0x44
 80287fa:	b292      	uxth	r2, r2
 80287fc:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80287fe:	b289      	uxth	r1, r1
 8028800:	fb02 f301 	mul.w	r3, r2, r1
 8028804:	0112      	lsls	r2, r2, #4
 8028806:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 802880a:	f5c2 7080 	rsb	r0, r2, #256	@ 0x100
 802880e:	1ad2      	subs	r2, r2, r3
 8028810:	b289      	uxth	r1, r1
 8028812:	b292      	uxth	r2, r2
 8028814:	1a40      	subs	r0, r0, r1
 8028816:	4362      	muls	r2, r4
 8028818:	b280      	uxth	r0, r0
 802881a:	fb0c 2c00 	mla	ip, ip, r0, r2
 802881e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8028820:	fb01 c102 	mla	r1, r1, r2, ip
 8028824:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8028826:	fb03 1302 	mla	r3, r3, r2, r1
 802882a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802882c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8028830:	4353      	muls	r3, r2
 8028832:	1c5a      	adds	r2, r3, #1
 8028834:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8028838:	4abf      	ldr	r2, [pc, #764]	@ (8028b38 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>)
 802883a:	121b      	asrs	r3, r3, #8
 802883c:	f892 9002 	ldrb.w	r9, [r2, #2]
 8028840:	7850      	ldrb	r0, [r2, #1]
 8028842:	2bff      	cmp	r3, #255	@ 0xff
 8028844:	f892 c000 	ldrb.w	ip, [r2]
 8028848:	f040 8091 	bne.w	802896e <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 802884c:	f887 c000 	strb.w	ip, [r7]
 8028850:	7078      	strb	r0, [r7, #1]
 8028852:	f887 9002 	strb.w	r9, [r7, #2]
 8028856:	70fb      	strb	r3, [r7, #3]
 8028858:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802885a:	3704      	adds	r7, #4
 802885c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8028860:	449a      	add	sl, r3
 8028862:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8028864:	441d      	add	r5, r3
 8028866:	e76c      	b.n	8028742 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8028868:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802886a:	449a      	add	sl, r3
 802886c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802886e:	441d      	add	r5, r3
 8028870:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8028872:	3b01      	subs	r3, #1
 8028874:	9309      	str	r3, [sp, #36]	@ 0x24
 8028876:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8028878:	3304      	adds	r3, #4
 802887a:	930a      	str	r3, [sp, #40]	@ 0x28
 802887c:	e740      	b.n	8028700 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 802887e:	d026      	beq.n	80288ce <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 8028880:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8028882:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 8028884:	3b01      	subs	r3, #1
 8028886:	fb00 a003 	mla	r0, r0, r3, sl
 802888a:	1400      	asrs	r0, r0, #16
 802888c:	f53f af55 	bmi.w	802873a <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8028890:	3901      	subs	r1, #1
 8028892:	4288      	cmp	r0, r1
 8028894:	f6bf af51 	bge.w	802873a <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8028898:	9924      	ldr	r1, [sp, #144]	@ 0x90
 802889a:	fb01 5303 	mla	r3, r1, r3, r5
 802889e:	141b      	asrs	r3, r3, #16
 80288a0:	f53f af4b 	bmi.w	802873a <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80288a4:	3a01      	subs	r2, #1
 80288a6:	4293      	cmp	r3, r2
 80288a8:	f6bf af47 	bge.w	802873a <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80288ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80288ae:	f8dd e024 	ldr.w	lr, [sp, #36]	@ 0x24
 80288b2:	3304      	adds	r3, #4
 80288b4:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	@ 0x3c
 80288b8:	f1be 0f00 	cmp.w	lr, #0
 80288bc:	f300 80a6 	bgt.w	8028a0c <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x364>
 80288c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80288c2:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80288c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80288c8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80288cc:	930a      	str	r3, [sp, #40]	@ 0x28
 80288ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80288d0:	2b00      	cmp	r3, #0
 80288d2:	f340 8163 	ble.w	8028b9c <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 80288d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80288da:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80288dc:	ee30 0a04 	vadd.f32	s0, s0, s8
 80288e0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80288e4:	eef0 6a62 	vmov.f32	s13, s5
 80288e8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80288ec:	ee31 1a05 	vadd.f32	s2, s2, s10
 80288f0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80288f4:	ee16 aa90 	vmov	sl, s13
 80288f8:	eef0 6a43 	vmov.f32	s13, s6
 80288fc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028900:	ee16 5a90 	vmov	r5, s13
 8028904:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8028908:	ee61 7a27 	vmul.f32	s15, s2, s15
 802890c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8028910:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8028914:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8028918:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802891c:	ee12 2a90 	vmov	r2, s5
 8028920:	eef0 2a47 	vmov.f32	s5, s14
 8028924:	fb92 f3f3 	sdiv	r3, r2, r3
 8028928:	ee13 2a10 	vmov	r2, s6
 802892c:	9323      	str	r3, [sp, #140]	@ 0x8c
 802892e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8028930:	eeb0 3a67 	vmov.f32	s6, s15
 8028934:	fb92 f3f3 	sdiv	r3, r2, r3
 8028938:	9324      	str	r3, [sp, #144]	@ 0x90
 802893a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802893c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 802893e:	3b01      	subs	r3, #1
 8028940:	930d      	str	r3, [sp, #52]	@ 0x34
 8028942:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8028944:	bf08      	it	eq
 8028946:	4613      	moveq	r3, r2
 8028948:	9309      	str	r3, [sp, #36]	@ 0x24
 802894a:	e6cb      	b.n	80286e4 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 802894c:	2900      	cmp	r1, #0
 802894e:	f43f af54 	beq.w	80287fa <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8028952:	eb08 0003 	add.w	r0, r8, r3
 8028956:	0843      	lsrs	r3, r0, #1
 8028958:	07c0      	lsls	r0, r0, #31
 802895a:	5cf3      	ldrb	r3, [r6, r3]
 802895c:	bf54      	ite	pl
 802895e:	f003 030f 	andpl.w	r3, r3, #15
 8028962:	111b      	asrmi	r3, r3, #4
 8028964:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8028968:	b2db      	uxtb	r3, r3
 802896a:	930b      	str	r3, [sp, #44]	@ 0x2c
 802896c:	e745      	b.n	80287fa <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 802896e:	b2da      	uxtb	r2, r3
 8028970:	2b00      	cmp	r3, #0
 8028972:	f43f af71 	beq.w	8028858 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8028976:	f897 e003 	ldrb.w	lr, [r7, #3]
 802897a:	fb03 fc0c 	mul.w	ip, r3, ip
 802897e:	4358      	muls	r0, r3
 8028980:	fb02 f10e 	mul.w	r1, r2, lr
 8028984:	4472      	add	r2, lr
 8028986:	fb03 f309 	mul.w	r3, r3, r9
 802898a:	1c4c      	adds	r4, r1, #1
 802898c:	eb04 2111 	add.w	r1, r4, r1, lsr #8
 8028990:	1209      	asrs	r1, r1, #8
 8028992:	1a52      	subs	r2, r2, r1
 8028994:	ebae 0101 	sub.w	r1, lr, r1
 8028998:	f897 e000 	ldrb.w	lr, [r7]
 802899c:	b2d2      	uxtb	r2, r2
 802899e:	fb01 cc0e 	mla	ip, r1, lr, ip
 80289a2:	f897 e002 	ldrb.w	lr, [r7, #2]
 80289a6:	70fa      	strb	r2, [r7, #3]
 80289a8:	fb9c fcf2 	sdiv	ip, ip, r2
 80289ac:	f887 c000 	strb.w	ip, [r7]
 80289b0:	f897 c001 	ldrb.w	ip, [r7, #1]
 80289b4:	fb01 000c 	mla	r0, r1, ip, r0
 80289b8:	fb01 310e 	mla	r1, r1, lr, r3
 80289bc:	fb90 f0f2 	sdiv	r0, r0, r2
 80289c0:	fb91 f1f2 	sdiv	r1, r1, r2
 80289c4:	7078      	strb	r0, [r7, #1]
 80289c6:	70b9      	strb	r1, [r7, #2]
 80289c8:	e746      	b.n	8028858 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 80289ca:	f113 0901 	adds.w	r9, r3, #1
 80289ce:	f53f af43 	bmi.w	8028858 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 80289d2:	45cc      	cmp	ip, r9
 80289d4:	f6ff af40 	blt.w	8028858 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 80289d8:	f110 0901 	adds.w	r9, r0, #1
 80289dc:	f53f af3c 	bmi.w	8028858 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 80289e0:	45ce      	cmp	lr, r9
 80289e2:	f6ff af39 	blt.w	8028858 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 80289e6:	9302      	str	r3, [sp, #8]
 80289e8:	fa0f f38e 	sxth.w	r3, lr
 80289ec:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80289ee:	9301      	str	r3, [sp, #4]
 80289f0:	fa0f f38c 	sxth.w	r3, ip
 80289f4:	e9cd 0203 	strd	r0, r2, [sp, #12]
 80289f8:	e9cd 1405 	strd	r1, r4, [sp, #20]
 80289fc:	9300      	str	r3, [sp, #0]
 80289fe:	4632      	mov	r2, r6
 8028a00:	4643      	mov	r3, r8
 8028a02:	4639      	mov	r1, r7
 8028a04:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8028a06:	f7ff fd77 	bl	80284f8 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh>
 8028a0a:	e725      	b.n	8028858 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8028a0c:	ea4f 412a 	mov.w	r1, sl, asr #16
 8028a10:	f3ca 3003 	ubfx	r0, sl, #12, #4
 8028a14:	142a      	asrs	r2, r5, #16
 8028a16:	f3c5 3703 	ubfx	r7, r5, #12, #4
 8028a1a:	fb08 1202 	mla	r2, r8, r2, r1
 8028a1e:	0851      	lsrs	r1, r2, #1
 8028a20:	07d4      	lsls	r4, r2, #31
 8028a22:	5c71      	ldrb	r1, [r6, r1]
 8028a24:	bf54      	ite	pl
 8028a26:	f001 010f 	andpl.w	r1, r1, #15
 8028a2a:	1109      	asrmi	r1, r1, #4
 8028a2c:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8028a30:	b2c9      	uxtb	r1, r1
 8028a32:	2800      	cmp	r0, #0
 8028a34:	d06d      	beq.n	8028b12 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46a>
 8028a36:	f102 0901 	add.w	r9, r2, #1
 8028a3a:	ea4f 0c59 	mov.w	ip, r9, lsr #1
 8028a3e:	f019 0f01 	tst.w	r9, #1
 8028a42:	f816 c00c 	ldrb.w	ip, [r6, ip]
 8028a46:	bf0c      	ite	eq
 8028a48:	f00c 0c0f 	andeq.w	ip, ip, #15
 8028a4c:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8028a50:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8028a54:	fa5f f48c 	uxtb.w	r4, ip
 8028a58:	9412      	str	r4, [sp, #72]	@ 0x48
 8028a5a:	b307      	cbz	r7, 8028a9e <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 8028a5c:	4442      	add	r2, r8
 8028a5e:	ea4f 0c52 	mov.w	ip, r2, lsr #1
 8028a62:	07d4      	lsls	r4, r2, #31
 8028a64:	f102 0201 	add.w	r2, r2, #1
 8028a68:	f816 c00c 	ldrb.w	ip, [r6, ip]
 8028a6c:	bf54      	ite	pl
 8028a6e:	f00c 0c0f 	andpl.w	ip, ip, #15
 8028a72:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8028a76:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8028a7a:	fa5f f48c 	uxtb.w	r4, ip
 8028a7e:	ea4f 0c52 	mov.w	ip, r2, lsr #1
 8028a82:	940c      	str	r4, [sp, #48]	@ 0x30
 8028a84:	07d4      	lsls	r4, r2, #31
 8028a86:	f816 c00c 	ldrb.w	ip, [r6, ip]
 8028a8a:	bf54      	ite	pl
 8028a8c:	f00c 0c0f 	andpl.w	ip, ip, #15
 8028a90:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8028a94:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8028a98:	fa5f f28c 	uxtb.w	r2, ip
 8028a9c:	9213      	str	r2, [sp, #76]	@ 0x4c
 8028a9e:	b280      	uxth	r0, r0
 8028aa0:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8028aa2:	b2bf      	uxth	r7, r7
 8028aa4:	fb00 f207 	mul.w	r2, r0, r7
 8028aa8:	0100      	lsls	r0, r0, #4
 8028aaa:	ebc2 1707 	rsb	r7, r2, r7, lsl #4
 8028aae:	f5c0 7c80 	rsb	ip, r0, #256	@ 0x100
 8028ab2:	1a80      	subs	r0, r0, r2
 8028ab4:	b2bf      	uxth	r7, r7
 8028ab6:	b280      	uxth	r0, r0
 8028ab8:	ebac 0c07 	sub.w	ip, ip, r7
 8028abc:	4360      	muls	r0, r4
 8028abe:	fa1f fc8c 	uxth.w	ip, ip
 8028ac2:	fb01 010c 	mla	r1, r1, ip, r0
 8028ac6:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8028ac8:	fb07 1700 	mla	r7, r7, r0, r1
 8028acc:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8028ace:	fb02 7201 	mla	r2, r2, r1, r7
 8028ad2:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8028ad4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8028ad8:	434a      	muls	r2, r1
 8028ada:	1c51      	adds	r1, r2, #1
 8028adc:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8028ae0:	4915      	ldr	r1, [pc, #84]	@ (8028b38 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>)
 8028ae2:	1212      	asrs	r2, r2, #8
 8028ae4:	7888      	ldrb	r0, [r1, #2]
 8028ae6:	784f      	ldrb	r7, [r1, #1]
 8028ae8:	2aff      	cmp	r2, #255	@ 0xff
 8028aea:	4604      	mov	r4, r0
 8028aec:	f891 c000 	ldrb.w	ip, [r1]
 8028af0:	d124      	bne.n	8028b3c <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 8028af2:	f803 cc04 	strb.w	ip, [r3, #-4]
 8028af6:	f803 7c03 	strb.w	r7, [r3, #-3]
 8028afa:	f803 0c02 	strb.w	r0, [r3, #-2]
 8028afe:	f803 2c01 	strb.w	r2, [r3, #-1]
 8028b02:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8028b04:	3304      	adds	r3, #4
 8028b06:	f10e 3eff 	add.w	lr, lr, #4294967295
 8028b0a:	4492      	add	sl, r2
 8028b0c:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8028b0e:	4415      	add	r5, r2
 8028b10:	e6d2      	b.n	80288b8 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 8028b12:	2f00      	cmp	r7, #0
 8028b14:	d0c3      	beq.n	8028a9e <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 8028b16:	4442      	add	r2, r8
 8028b18:	ea4f 0c52 	mov.w	ip, r2, lsr #1
 8028b1c:	07d2      	lsls	r2, r2, #31
 8028b1e:	f816 c00c 	ldrb.w	ip, [r6, ip]
 8028b22:	bf54      	ite	pl
 8028b24:	f00c 0c0f 	andpl.w	ip, ip, #15
 8028b28:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8028b2c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8028b30:	fa5f f28c 	uxtb.w	r2, ip
 8028b34:	920c      	str	r2, [sp, #48]	@ 0x30
 8028b36:	e7b2      	b.n	8028a9e <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 8028b38:	20029ee8 	.word	0x20029ee8
 8028b3c:	b2d1      	uxtb	r1, r2
 8028b3e:	2a00      	cmp	r2, #0
 8028b40:	d0df      	beq.n	8028b02 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45a>
 8028b42:	f813 9c01 	ldrb.w	r9, [r3, #-1]
 8028b46:	fb02 fc0c 	mul.w	ip, r2, ip
 8028b4a:	4357      	muls	r7, r2
 8028b4c:	fb01 fb09 	mul.w	fp, r1, r9
 8028b50:	4449      	add	r1, r9
 8028b52:	4362      	muls	r2, r4
 8028b54:	f10b 0001 	add.w	r0, fp, #1
 8028b58:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8028b5c:	f813 bc04 	ldrb.w	fp, [r3, #-4]
 8028b60:	1200      	asrs	r0, r0, #8
 8028b62:	1a09      	subs	r1, r1, r0
 8028b64:	eba9 0000 	sub.w	r0, r9, r0
 8028b68:	f813 9c02 	ldrb.w	r9, [r3, #-2]
 8028b6c:	b2c9      	uxtb	r1, r1
 8028b6e:	fb00 cc0b 	mla	ip, r0, fp, ip
 8028b72:	fb9c fcf1 	sdiv	ip, ip, r1
 8028b76:	f803 cc04 	strb.w	ip, [r3, #-4]
 8028b7a:	f813 cc03 	ldrb.w	ip, [r3, #-3]
 8028b7e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8028b82:	fb00 770c 	mla	r7, r0, ip, r7
 8028b86:	fb00 2009 	mla	r0, r0, r9, r2
 8028b8a:	fb97 f7f1 	sdiv	r7, r7, r1
 8028b8e:	fb90 f0f1 	sdiv	r0, r0, r1
 8028b92:	f803 7c03 	strb.w	r7, [r3, #-3]
 8028b96:	f803 0c02 	strb.w	r0, [r3, #-2]
 8028b9a:	e7b2      	b.n	8028b02 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45a>
 8028b9c:	b017      	add	sp, #92	@ 0x5c
 8028b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028ba2:	bf00      	nop

08028ba4 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh>:
 8028ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028ba8:	e9dd 0c0b 	ldrd	r0, ip, [sp, #44]	@ 0x2c
 8028bac:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 8028bb0:	2800      	cmp	r0, #0
 8028bb2:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	@ 0x28
 8028bb6:	f89d 6034 	ldrb.w	r6, [sp, #52]	@ 0x34
 8028bba:	fb0c 0e03 	mla	lr, ip, r3, r0
 8028bbe:	f89d 7038 	ldrb.w	r7, [sp, #56]	@ 0x38
 8028bc2:	f2c0 8088 	blt.w	8028cd6 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x132>
 8028bc6:	4581      	cmp	r9, r0
 8028bc8:	f340 8085 	ble.w	8028cd6 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x132>
 8028bcc:	f1bc 0f00 	cmp.w	ip, #0
 8028bd0:	f2c0 8081 	blt.w	8028cd6 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x132>
 8028bd4:	45e0      	cmp	r8, ip
 8028bd6:	dd7e      	ble.n	8028cd6 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x132>
 8028bd8:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8028bdc:	f01e 0f01 	tst.w	lr, #1
 8028be0:	5d15      	ldrb	r5, [r2, r4]
 8028be2:	bf0c      	ite	eq
 8028be4:	f005 050f 	andeq.w	r5, r5, #15
 8028be8:	112d      	asrne	r5, r5, #4
 8028bea:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8028bee:	b2ed      	uxtb	r5, r5
 8028bf0:	f110 0a01 	adds.w	sl, r0, #1
 8028bf4:	d471      	bmi.n	8028cda <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x136>
 8028bf6:	45d1      	cmp	r9, sl
 8028bf8:	dd6f      	ble.n	8028cda <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x136>
 8028bfa:	f1bc 0f00 	cmp.w	ip, #0
 8028bfe:	db6c      	blt.n	8028cda <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x136>
 8028c00:	45e0      	cmp	r8, ip
 8028c02:	dd6a      	ble.n	8028cda <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x136>
 8028c04:	2e00      	cmp	r6, #0
 8028c06:	d06a      	beq.n	8028cde <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x13a>
 8028c08:	f10e 0b01 	add.w	fp, lr, #1
 8028c0c:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8028c10:	f01b 0f01 	tst.w	fp, #1
 8028c14:	5d14      	ldrb	r4, [r2, r4]
 8028c16:	bf0c      	ite	eq
 8028c18:	f004 040f 	andeq.w	r4, r4, #15
 8028c1c:	1124      	asrne	r4, r4, #4
 8028c1e:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8028c22:	b2e4      	uxtb	r4, r4
 8028c24:	2f00      	cmp	r7, #0
 8028c26:	d05e      	beq.n	8028ce6 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x142>
 8028c28:	2800      	cmp	r0, #0
 8028c2a:	f10c 0c01 	add.w	ip, ip, #1
 8028c2e:	db58      	blt.n	8028ce2 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x13e>
 8028c30:	4581      	cmp	r9, r0
 8028c32:	dd56      	ble.n	8028ce2 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x13e>
 8028c34:	f1bc 0f00 	cmp.w	ip, #0
 8028c38:	db53      	blt.n	8028ce2 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x13e>
 8028c3a:	45e0      	cmp	r8, ip
 8028c3c:	dd51      	ble.n	8028ce2 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x13e>
 8028c3e:	eb03 0b0e 	add.w	fp, r3, lr
 8028c42:	ea4f 005b 	mov.w	r0, fp, lsr #1
 8028c46:	f01b 0f01 	tst.w	fp, #1
 8028c4a:	5c10      	ldrb	r0, [r2, r0]
 8028c4c:	bf0c      	ite	eq
 8028c4e:	f000 000f 	andeq.w	r0, r0, #15
 8028c52:	1100      	asrne	r0, r0, #4
 8028c54:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8028c58:	b2c0      	uxtb	r0, r0
 8028c5a:	f1ba 0f00 	cmp.w	sl, #0
 8028c5e:	db45      	blt.n	8028cec <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x148>
 8028c60:	45d1      	cmp	r9, sl
 8028c62:	dd43      	ble.n	8028cec <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x148>
 8028c64:	f1bc 0f00 	cmp.w	ip, #0
 8028c68:	db40      	blt.n	8028cec <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x148>
 8028c6a:	45e0      	cmp	r8, ip
 8028c6c:	dd3e      	ble.n	8028cec <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x148>
 8028c6e:	2e00      	cmp	r6, #0
 8028c70:	d03e      	beq.n	8028cf0 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x14c>
 8028c72:	3301      	adds	r3, #1
 8028c74:	449e      	add	lr, r3
 8028c76:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8028c7a:	f01e 0f01 	tst.w	lr, #1
 8028c7e:	5cd3      	ldrb	r3, [r2, r3]
 8028c80:	bf0c      	ite	eq
 8028c82:	f003 030f 	andeq.w	r3, r3, #15
 8028c86:	111b      	asrne	r3, r3, #4
 8028c88:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8028c8c:	b2db      	uxtb	r3, r3
 8028c8e:	b2b2      	uxth	r2, r6
 8028c90:	b2bf      	uxth	r7, r7
 8028c92:	fb02 f607 	mul.w	r6, r2, r7
 8028c96:	0112      	lsls	r2, r2, #4
 8028c98:	ebc6 1707 	rsb	r7, r6, r7, lsl #4
 8028c9c:	f5c2 7c80 	rsb	ip, r2, #256	@ 0x100
 8028ca0:	1b92      	subs	r2, r2, r6
 8028ca2:	b2bf      	uxth	r7, r7
 8028ca4:	b292      	uxth	r2, r2
 8028ca6:	ebac 0c07 	sub.w	ip, ip, r7
 8028caa:	4362      	muls	r2, r4
 8028cac:	fa1f fc8c 	uxth.w	ip, ip
 8028cb0:	fb05 220c 	mla	r2, r5, ip, r2
 8028cb4:	fb07 2000 	mla	r0, r7, r0, r2
 8028cb8:	4a22      	ldr	r2, [pc, #136]	@ (8028d44 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x1a0>)
 8028cba:	fb06 0303 	mla	r3, r6, r3, r0
 8028cbe:	7817      	ldrb	r7, [r2, #0]
 8028cc0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8028cc4:	2bff      	cmp	r3, #255	@ 0xff
 8028cc6:	d115      	bne.n	8028cf4 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x150>
 8028cc8:	700f      	strb	r7, [r1, #0]
 8028cca:	7853      	ldrb	r3, [r2, #1]
 8028ccc:	704b      	strb	r3, [r1, #1]
 8028cce:	7893      	ldrb	r3, [r2, #2]
 8028cd0:	708b      	strb	r3, [r1, #2]
 8028cd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028cd6:	2500      	movs	r5, #0
 8028cd8:	e78a      	b.n	8028bf0 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x4c>
 8028cda:	2400      	movs	r4, #0
 8028cdc:	e7a2      	b.n	8028c24 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x80>
 8028cde:	4634      	mov	r4, r6
 8028ce0:	e7a0      	b.n	8028c24 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x80>
 8028ce2:	2000      	movs	r0, #0
 8028ce4:	e7b9      	b.n	8028c5a <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0xb6>
 8028ce6:	463b      	mov	r3, r7
 8028ce8:	4638      	mov	r0, r7
 8028cea:	e7d0      	b.n	8028c8e <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0xea>
 8028cec:	2300      	movs	r3, #0
 8028cee:	e7ce      	b.n	8028c8e <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0xea>
 8028cf0:	4633      	mov	r3, r6
 8028cf2:	e7cc      	b.n	8028c8e <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0xea>
 8028cf4:	2b00      	cmp	r3, #0
 8028cf6:	d0ec      	beq.n	8028cd2 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x12e>
 8028cf8:	78cc      	ldrb	r4, [r1, #3]
 8028cfa:	435f      	muls	r7, r3
 8028cfc:	7896      	ldrb	r6, [r2, #2]
 8028cfe:	f892 c001 	ldrb.w	ip, [r2, #1]
 8028d02:	fb03 f204 	mul.w	r2, r3, r4
 8028d06:	780d      	ldrb	r5, [r1, #0]
 8028d08:	1c50      	adds	r0, r2, #1
 8028d0a:	fb03 fc0c 	mul.w	ip, r3, ip
 8028d0e:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8028d12:	191a      	adds	r2, r3, r4
 8028d14:	4373      	muls	r3, r6
 8028d16:	1200      	asrs	r0, r0, #8
 8028d18:	1a12      	subs	r2, r2, r0
 8028d1a:	1a20      	subs	r0, r4, r0
 8028d1c:	784c      	ldrb	r4, [r1, #1]
 8028d1e:	b2d2      	uxtb	r2, r2
 8028d20:	fb00 7505 	mla	r5, r0, r5, r7
 8028d24:	fb00 c404 	mla	r4, r0, r4, ip
 8028d28:	70ca      	strb	r2, [r1, #3]
 8028d2a:	fb94 f4f2 	sdiv	r4, r4, r2
 8028d2e:	704c      	strb	r4, [r1, #1]
 8028d30:	788c      	ldrb	r4, [r1, #2]
 8028d32:	fb00 3304 	mla	r3, r0, r4, r3
 8028d36:	fb95 f5f2 	sdiv	r5, r5, r2
 8028d3a:	fb93 f3f2 	sdiv	r3, r3, r2
 8028d3e:	700d      	strb	r5, [r1, #0]
 8028d40:	708b      	strb	r3, [r1, #2]
 8028d42:	e7c6      	b.n	8028cd2 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x12e>
 8028d44:	20029ee8 	.word	0x20029ee8

08028d48 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8028d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028d4c:	b095      	sub	sp, #84	@ 0x54
 8028d4e:	461c      	mov	r4, r3
 8028d50:	4fc4      	ldr	r7, [pc, #784]	@ (8029064 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>)
 8028d52:	920d      	str	r2, [sp, #52]	@ 0x34
 8028d54:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8028d56:	9013      	str	r0, [sp, #76]	@ 0x4c
 8028d58:	9108      	str	r1, [sp, #32]
 8028d5a:	6850      	ldr	r0, [r2, #4]
 8028d5c:	6812      	ldr	r2, [r2, #0]
 8028d5e:	e9dd 1324 	ldrd	r1, r3, [sp, #144]	@ 0x90
 8028d62:	e9dd b51f 	ldrd	fp, r5, [sp, #124]	@ 0x7c
 8028d66:	fb00 1303 	mla	r3, r0, r3, r1
 8028d6a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8028d6e:	9307      	str	r3, [sp, #28]
 8028d70:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8028d72:	689b      	ldr	r3, [r3, #8]
 8028d74:	3301      	adds	r3, #1
 8028d76:	f023 0301 	bic.w	r3, r3, #1
 8028d7a:	930a      	str	r3, [sp, #40]	@ 0x28
 8028d7c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8028d7e:	681e      	ldr	r6, [r3, #0]
 8028d80:	9b08      	ldr	r3, [sp, #32]
 8028d82:	2b00      	cmp	r3, #0
 8028d84:	dc03      	bgt.n	8028d8e <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8028d86:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8028d88:	2b00      	cmp	r3, #0
 8028d8a:	f340 824e 	ble.w	802922a <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8028d8e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8028d90:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8028d94:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8028d98:	1e48      	subs	r0, r1, #1
 8028d9a:	f102 3cff 	add.w	ip, r2, #4294967295
 8028d9e:	2c00      	cmp	r4, #0
 8028da0:	f340 80b3 	ble.w	8028f0a <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8028da4:	ea5f 4e2b 	movs.w	lr, fp, asr #16
 8028da8:	ea4f 4325 	mov.w	r3, r5, asr #16
 8028dac:	d406      	bmi.n	8028dbc <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8028dae:	4586      	cmp	lr, r0
 8028db0:	da04      	bge.n	8028dbc <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8028db2:	2b00      	cmp	r3, #0
 8028db4:	db02      	blt.n	8028dbc <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8028db6:	4563      	cmp	r3, ip
 8028db8:	f2c0 80a8 	blt.w	8028f0c <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
 8028dbc:	f11e 0e01 	adds.w	lr, lr, #1
 8028dc0:	f100 809a 	bmi.w	8028ef8 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8028dc4:	4571      	cmp	r1, lr
 8028dc6:	f2c0 8097 	blt.w	8028ef8 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8028dca:	3301      	adds	r3, #1
 8028dcc:	f100 8094 	bmi.w	8028ef8 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8028dd0:	429a      	cmp	r2, r3
 8028dd2:	f2c0 8091 	blt.w	8028ef8 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8028dd6:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8028dda:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	@ 0x28
 8028dde:	9409      	str	r4, [sp, #36]	@ 0x24
 8028de0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8028de2:	2b00      	cmp	r3, #0
 8028de4:	f340 80b0 	ble.w	8028f48 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8028de8:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8028dea:	1428      	asrs	r0, r5, #16
 8028dec:	f3cb 3203 	ubfx	r2, fp, #12, #4
 8028df0:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8028df4:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8028df8:	ea5f 432b 	movs.w	r3, fp, asr #16
 8028dfc:	f100 8134 	bmi.w	8029068 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 8028e00:	f10c 3aff 	add.w	sl, ip, #4294967295
 8028e04:	4553      	cmp	r3, sl
 8028e06:	f280 812f 	bge.w	8029068 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 8028e0a:	2800      	cmp	r0, #0
 8028e0c:	f2c0 812c 	blt.w	8029068 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 8028e10:	f10e 3aff 	add.w	sl, lr, #4294967295
 8028e14:	4550      	cmp	r0, sl
 8028e16:	f280 8127 	bge.w	8029068 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 8028e1a:	fb00 3309 	mla	r3, r0, r9, r3
 8028e1e:	0858      	lsrs	r0, r3, #1
 8028e20:	f816 c000 	ldrb.w	ip, [r6, r0]
 8028e24:	07d8      	lsls	r0, r3, #31
 8028e26:	bf54      	ite	pl
 8028e28:	f00c 0c0f 	andpl.w	ip, ip, #15
 8028e2c:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8028e30:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8028e34:	fa5f fc8c 	uxtb.w	ip, ip
 8028e38:	2a00      	cmp	r2, #0
 8028e3a:	f000 80cb 	beq.w	8028fd4 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8028e3e:	1c58      	adds	r0, r3, #1
 8028e40:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8028e44:	07c0      	lsls	r0, r0, #31
 8028e46:	f816 e00e 	ldrb.w	lr, [r6, lr]
 8028e4a:	bf54      	ite	pl
 8028e4c:	f00e 0e0f 	andpl.w	lr, lr, #15
 8028e50:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8028e54:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8028e58:	fa5f fe8e 	uxtb.w	lr, lr
 8028e5c:	f8cd e038 	str.w	lr, [sp, #56]	@ 0x38
 8028e60:	b1c1      	cbz	r1, 8028e94 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8028e62:	444b      	add	r3, r9
 8028e64:	0858      	lsrs	r0, r3, #1
 8028e66:	f013 0f01 	tst.w	r3, #1
 8028e6a:	5c30      	ldrb	r0, [r6, r0]
 8028e6c:	bf0c      	ite	eq
 8028e6e:	f000 000f 	andeq.w	r0, r0, #15
 8028e72:	1100      	asrne	r0, r0, #4
 8028e74:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8028e78:	b2c0      	uxtb	r0, r0
 8028e7a:	900b      	str	r0, [sp, #44]	@ 0x2c
 8028e7c:	1c58      	adds	r0, r3, #1
 8028e7e:	0843      	lsrs	r3, r0, #1
 8028e80:	07c0      	lsls	r0, r0, #31
 8028e82:	5cf3      	ldrb	r3, [r6, r3]
 8028e84:	bf54      	ite	pl
 8028e86:	f003 030f 	andpl.w	r3, r3, #15
 8028e8a:	111b      	asrmi	r3, r3, #4
 8028e8c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8028e90:	b2db      	uxtb	r3, r3
 8028e92:	930f      	str	r3, [sp, #60]	@ 0x3c
 8028e94:	b292      	uxth	r2, r2
 8028e96:	b289      	uxth	r1, r1
 8028e98:	fb02 f301 	mul.w	r3, r2, r1
 8028e9c:	0112      	lsls	r2, r2, #4
 8028e9e:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8028ea2:	f5c2 7080 	rsb	r0, r2, #256	@ 0x100
 8028ea6:	1ad2      	subs	r2, r2, r3
 8028ea8:	b289      	uxth	r1, r1
 8028eaa:	b292      	uxth	r2, r2
 8028eac:	1a40      	subs	r0, r0, r1
 8028eae:	fa1f fe80 	uxth.w	lr, r0
 8028eb2:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8028eb4:	4342      	muls	r2, r0
 8028eb6:	fb0c 2c0e 	mla	ip, ip, lr, r2
 8028eba:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8028ebc:	fb01 c102 	mla	r1, r1, r2, ip
 8028ec0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8028ec2:	f897 c000 	ldrb.w	ip, [r7]
 8028ec6:	fb03 1302 	mla	r3, r3, r2, r1
 8028eca:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8028ece:	2bff      	cmp	r3, #255	@ 0xff
 8028ed0:	f040 8091 	bne.w	8028ff6 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 8028ed4:	f888 c000 	strb.w	ip, [r8]
 8028ed8:	787b      	ldrb	r3, [r7, #1]
 8028eda:	f888 3001 	strb.w	r3, [r8, #1]
 8028ede:	78bb      	ldrb	r3, [r7, #2]
 8028ee0:	f888 3002 	strb.w	r3, [r8, #2]
 8028ee4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8028ee6:	f108 0804 	add.w	r8, r8, #4
 8028eea:	449b      	add	fp, r3
 8028eec:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8028eee:	441d      	add	r5, r3
 8028ef0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8028ef2:	3b01      	subs	r3, #1
 8028ef4:	9309      	str	r3, [sp, #36]	@ 0x24
 8028ef6:	e773      	b.n	8028de0 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8028ef8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8028efa:	3c01      	subs	r4, #1
 8028efc:	449b      	add	fp, r3
 8028efe:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8028f00:	441d      	add	r5, r3
 8028f02:	9b07      	ldr	r3, [sp, #28]
 8028f04:	3304      	adds	r3, #4
 8028f06:	9307      	str	r3, [sp, #28]
 8028f08:	e749      	b.n	8028d9e <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8028f0a:	d023      	beq.n	8028f54 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8028f0c:	1e63      	subs	r3, r4, #1
 8028f0e:	9821      	ldr	r0, [sp, #132]	@ 0x84
 8028f10:	fb00 b003 	mla	r0, r0, r3, fp
 8028f14:	1400      	asrs	r0, r0, #16
 8028f16:	f53f af5e 	bmi.w	8028dd6 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8028f1a:	3901      	subs	r1, #1
 8028f1c:	4288      	cmp	r0, r1
 8028f1e:	f6bf af5a 	bge.w	8028dd6 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8028f22:	9922      	ldr	r1, [sp, #136]	@ 0x88
 8028f24:	fb01 5303 	mla	r3, r1, r3, r5
 8028f28:	141b      	asrs	r3, r3, #16
 8028f2a:	f53f af54 	bmi.w	8028dd6 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8028f2e:	3a01      	subs	r2, #1
 8028f30:	4293      	cmp	r3, r2
 8028f32:	f6bf af50 	bge.w	8028dd6 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8028f36:	9b07      	ldr	r3, [sp, #28]
 8028f38:	46a0      	mov	r8, r4
 8028f3a:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	@ 0x28
 8028f3e:	1d1a      	adds	r2, r3, #4
 8028f40:	f1b8 0f00 	cmp.w	r8, #0
 8028f44:	f300 80af 	bgt.w	80290a6 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 8028f48:	9b07      	ldr	r3, [sp, #28]
 8028f4a:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8028f4e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8028f52:	9307      	str	r3, [sp, #28]
 8028f54:	9b08      	ldr	r3, [sp, #32]
 8028f56:	2b00      	cmp	r3, #0
 8028f58:	f340 8167 	ble.w	802922a <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8028f5c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8028f60:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8028f62:	ee30 0a04 	vadd.f32	s0, s0, s8
 8028f66:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8028f6a:	eef0 6a62 	vmov.f32	s13, s5
 8028f6e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8028f72:	ee31 1a05 	vadd.f32	s2, s2, s10
 8028f76:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028f7a:	ee16 ba90 	vmov	fp, s13
 8028f7e:	eef0 6a43 	vmov.f32	s13, s6
 8028f82:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028f86:	ee16 5a90 	vmov	r5, s13
 8028f8a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8028f8e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8028f92:	ee77 2a62 	vsub.f32	s5, s14, s5
 8028f96:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8028f9a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8028f9e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8028fa2:	ee12 2a90 	vmov	r2, s5
 8028fa6:	eef0 2a47 	vmov.f32	s5, s14
 8028faa:	fb92 f3f3 	sdiv	r3, r2, r3
 8028fae:	ee13 2a10 	vmov	r2, s6
 8028fb2:	9321      	str	r3, [sp, #132]	@ 0x84
 8028fb4:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8028fb6:	eeb0 3a67 	vmov.f32	s6, s15
 8028fba:	fb92 f3f3 	sdiv	r3, r2, r3
 8028fbe:	9322      	str	r3, [sp, #136]	@ 0x88
 8028fc0:	9b08      	ldr	r3, [sp, #32]
 8028fc2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8028fc4:	3b01      	subs	r3, #1
 8028fc6:	9308      	str	r3, [sp, #32]
 8028fc8:	bf08      	it	eq
 8028fca:	4614      	moveq	r4, r2
 8028fcc:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8028fce:	bf18      	it	ne
 8028fd0:	461c      	movne	r4, r3
 8028fd2:	e6d5      	b.n	8028d80 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8028fd4:	2900      	cmp	r1, #0
 8028fd6:	f43f af5d 	beq.w	8028e94 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8028fda:	eb09 0003 	add.w	r0, r9, r3
 8028fde:	0843      	lsrs	r3, r0, #1
 8028fe0:	07c0      	lsls	r0, r0, #31
 8028fe2:	5cf3      	ldrb	r3, [r6, r3]
 8028fe4:	bf54      	ite	pl
 8028fe6:	f003 030f 	andpl.w	r3, r3, #15
 8028fea:	111b      	asrmi	r3, r3, #4
 8028fec:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8028ff0:	b2db      	uxtb	r3, r3
 8028ff2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8028ff4:	e74e      	b.n	8028e94 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8028ff6:	2b00      	cmp	r3, #0
 8028ff8:	f43f af74 	beq.w	8028ee4 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 8028ffc:	f898 a003 	ldrb.w	sl, [r8, #3]
 8029000:	fb03 fc0c 	mul.w	ip, r3, ip
 8029004:	78ba      	ldrb	r2, [r7, #2]
 8029006:	fb03 f00a 	mul.w	r0, r3, sl
 802900a:	f897 e001 	ldrb.w	lr, [r7, #1]
 802900e:	9210      	str	r2, [sp, #64]	@ 0x40
 8029010:	eb03 020a 	add.w	r2, r3, sl
 8029014:	1c41      	adds	r1, r0, #1
 8029016:	fb03 fe0e 	mul.w	lr, r3, lr
 802901a:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 802901e:	1208      	asrs	r0, r1, #8
 8029020:	ebaa 0100 	sub.w	r1, sl, r0
 8029024:	1a12      	subs	r2, r2, r0
 8029026:	f898 0000 	ldrb.w	r0, [r8]
 802902a:	b2d2      	uxtb	r2, r2
 802902c:	fb01 cc00 	mla	ip, r1, r0, ip
 8029030:	f898 0001 	ldrb.w	r0, [r8, #1]
 8029034:	f888 2003 	strb.w	r2, [r8, #3]
 8029038:	fb01 ee00 	mla	lr, r1, r0, lr
 802903c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802903e:	fb9c fcf2 	sdiv	ip, ip, r2
 8029042:	4343      	muls	r3, r0
 8029044:	f888 c000 	strb.w	ip, [r8]
 8029048:	f898 c002 	ldrb.w	ip, [r8, #2]
 802904c:	fb01 330c 	mla	r3, r1, ip, r3
 8029050:	fb9e fef2 	sdiv	lr, lr, r2
 8029054:	fb93 f3f2 	sdiv	r3, r3, r2
 8029058:	f888 e001 	strb.w	lr, [r8, #1]
 802905c:	f888 3002 	strb.w	r3, [r8, #2]
 8029060:	e740      	b.n	8028ee4 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 8029062:	bf00      	nop
 8029064:	20029ee8 	.word	0x20029ee8
 8029068:	f113 0a01 	adds.w	sl, r3, #1
 802906c:	f53f af3a 	bmi.w	8028ee4 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 8029070:	45d4      	cmp	ip, sl
 8029072:	f6ff af37 	blt.w	8028ee4 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 8029076:	f110 0a01 	adds.w	sl, r0, #1
 802907a:	f53f af33 	bmi.w	8028ee4 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 802907e:	45d6      	cmp	lr, sl
 8029080:	f6ff af30 	blt.w	8028ee4 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 8029084:	e9cd 3002 	strd	r3, r0, [sp, #8]
 8029088:	fa0f f38e 	sxth.w	r3, lr
 802908c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 802908e:	9301      	str	r3, [sp, #4]
 8029090:	fa0f f38c 	sxth.w	r3, ip
 8029094:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8029098:	9300      	str	r3, [sp, #0]
 802909a:	4632      	mov	r2, r6
 802909c:	464b      	mov	r3, r9
 802909e:	4641      	mov	r1, r8
 80290a0:	f7ff fd80 	bl	8028ba4 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh>
 80290a4:	e71e      	b.n	8028ee4 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 80290a6:	ea4f 412b 	mov.w	r1, fp, asr #16
 80290aa:	f3cb 3c03 	ubfx	ip, fp, #12, #4
 80290ae:	142b      	asrs	r3, r5, #16
 80290b0:	f3c5 3e03 	ubfx	lr, r5, #12, #4
 80290b4:	fb09 1303 	mla	r3, r9, r3, r1
 80290b8:	0859      	lsrs	r1, r3, #1
 80290ba:	07d8      	lsls	r0, r3, #31
 80290bc:	5c71      	ldrb	r1, [r6, r1]
 80290be:	bf54      	ite	pl
 80290c0:	f001 010f 	andpl.w	r1, r1, #15
 80290c4:	1109      	asrmi	r1, r1, #4
 80290c6:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80290ca:	b2c9      	uxtb	r1, r1
 80290cc:	f1bc 0f00 	cmp.w	ip, #0
 80290d0:	d062      	beq.n	8029198 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x450>
 80290d2:	f103 0a01 	add.w	sl, r3, #1
 80290d6:	ea4f 005a 	mov.w	r0, sl, lsr #1
 80290da:	f01a 0f01 	tst.w	sl, #1
 80290de:	5c30      	ldrb	r0, [r6, r0]
 80290e0:	bf0c      	ite	eq
 80290e2:	f000 000f 	andeq.w	r0, r0, #15
 80290e6:	1100      	asrne	r0, r0, #4
 80290e8:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80290ec:	b2c0      	uxtb	r0, r0
 80290ee:	9011      	str	r0, [sp, #68]	@ 0x44
 80290f0:	f1be 0f00 	cmp.w	lr, #0
 80290f4:	d019      	beq.n	802912a <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e2>
 80290f6:	444b      	add	r3, r9
 80290f8:	0858      	lsrs	r0, r3, #1
 80290fa:	f013 0f01 	tst.w	r3, #1
 80290fe:	f103 0301 	add.w	r3, r3, #1
 8029102:	5c30      	ldrb	r0, [r6, r0]
 8029104:	bf0c      	ite	eq
 8029106:	f000 000f 	andeq.w	r0, r0, #15
 802910a:	1100      	asrne	r0, r0, #4
 802910c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8029110:	b2c0      	uxtb	r0, r0
 8029112:	900c      	str	r0, [sp, #48]	@ 0x30
 8029114:	0858      	lsrs	r0, r3, #1
 8029116:	07db      	lsls	r3, r3, #31
 8029118:	5c30      	ldrb	r0, [r6, r0]
 802911a:	bf54      	ite	pl
 802911c:	f000 000f 	andpl.w	r0, r0, #15
 8029120:	1100      	asrmi	r0, r0, #4
 8029122:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8029126:	b2c0      	uxtb	r0, r0
 8029128:	9012      	str	r0, [sp, #72]	@ 0x48
 802912a:	fa1f fc8c 	uxth.w	ip, ip
 802912e:	fa1f fe8e 	uxth.w	lr, lr
 8029132:	fb0c f30e 	mul.w	r3, ip, lr
 8029136:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 802913a:	ebc3 1e0e 	rsb	lr, r3, lr, lsl #4
 802913e:	f5cc 7080 	rsb	r0, ip, #256	@ 0x100
 8029142:	ebac 0c03 	sub.w	ip, ip, r3
 8029146:	fa1f fe8e 	uxth.w	lr, lr
 802914a:	fa1f fc8c 	uxth.w	ip, ip
 802914e:	eba0 000e 	sub.w	r0, r0, lr
 8029152:	fa1f fa80 	uxth.w	sl, r0
 8029156:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8029158:	fb00 fc0c 	mul.w	ip, r0, ip
 802915c:	980c      	ldr	r0, [sp, #48]	@ 0x30
 802915e:	fb01 c10a 	mla	r1, r1, sl, ip
 8029162:	fb0e 1e00 	mla	lr, lr, r0, r1
 8029166:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8029168:	fb03 e301 	mla	r3, r3, r1, lr
 802916c:	f897 e000 	ldrb.w	lr, [r7]
 8029170:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8029174:	2bff      	cmp	r3, #255	@ 0xff
 8029176:	d11f      	bne.n	80291b8 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 8029178:	f802 ec04 	strb.w	lr, [r2, #-4]
 802917c:	787b      	ldrb	r3, [r7, #1]
 802917e:	f802 3c03 	strb.w	r3, [r2, #-3]
 8029182:	78bb      	ldrb	r3, [r7, #2]
 8029184:	f802 3c02 	strb.w	r3, [r2, #-2]
 8029188:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 802918a:	3204      	adds	r2, #4
 802918c:	f108 38ff 	add.w	r8, r8, #4294967295
 8029190:	449b      	add	fp, r3
 8029192:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8029194:	441d      	add	r5, r3
 8029196:	e6d3      	b.n	8028f40 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 8029198:	f1be 0f00 	cmp.w	lr, #0
 802919c:	d0c5      	beq.n	802912a <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e2>
 802919e:	444b      	add	r3, r9
 80291a0:	0858      	lsrs	r0, r3, #1
 80291a2:	07db      	lsls	r3, r3, #31
 80291a4:	5c30      	ldrb	r0, [r6, r0]
 80291a6:	bf54      	ite	pl
 80291a8:	f000 000f 	andpl.w	r0, r0, #15
 80291ac:	1100      	asrmi	r0, r0, #4
 80291ae:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80291b2:	b2c0      	uxtb	r0, r0
 80291b4:	900c      	str	r0, [sp, #48]	@ 0x30
 80291b6:	e7b8      	b.n	802912a <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e2>
 80291b8:	2b00      	cmp	r3, #0
 80291ba:	d0e5      	beq.n	8029188 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x440>
 80291bc:	78b9      	ldrb	r1, [r7, #2]
 80291be:	fb03 fe0e 	mul.w	lr, r3, lr
 80291c2:	f812 0c01 	ldrb.w	r0, [r2, #-1]
 80291c6:	9110      	str	r1, [sp, #64]	@ 0x40
 80291c8:	fb03 f100 	mul.w	r1, r3, r0
 80291cc:	f897 a001 	ldrb.w	sl, [r7, #1]
 80291d0:	f101 0c01 	add.w	ip, r1, #1
 80291d4:	fb03 fa0a 	mul.w	sl, r3, sl
 80291d8:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 80291dc:	1819      	adds	r1, r3, r0
 80291de:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80291e2:	eba0 000c 	sub.w	r0, r0, ip
 80291e6:	eba1 010c 	sub.w	r1, r1, ip
 80291ea:	f812 cc04 	ldrb.w	ip, [r2, #-4]
 80291ee:	9009      	str	r0, [sp, #36]	@ 0x24
 80291f0:	b2c9      	uxtb	r1, r1
 80291f2:	fb00 ee0c 	mla	lr, r0, ip, lr
 80291f6:	f812 cc03 	ldrb.w	ip, [r2, #-3]
 80291fa:	f802 1c01 	strb.w	r1, [r2, #-1]
 80291fe:	fb00 aa0c 	mla	sl, r0, ip, sl
 8029202:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8029204:	f812 cc02 	ldrb.w	ip, [r2, #-2]
 8029208:	4343      	muls	r3, r0
 802920a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802920c:	fb00 330c 	mla	r3, r0, ip, r3
 8029210:	fb9e fef1 	sdiv	lr, lr, r1
 8029214:	fb9a faf1 	sdiv	sl, sl, r1
 8029218:	fb93 f3f1 	sdiv	r3, r3, r1
 802921c:	f802 ec04 	strb.w	lr, [r2, #-4]
 8029220:	f802 ac03 	strb.w	sl, [r2, #-3]
 8029224:	f802 3c02 	strb.w	r3, [r2, #-2]
 8029228:	e7ae      	b.n	8029188 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x440>
 802922a:	b015      	add	sp, #84	@ 0x54
 802922c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08029230 <_ZNK8touchgfx8LCD32bpp17DecompressorL8_L416blendPixelRGB565EtPmh>:
 8029230:	b5f0      	push	{r4, r5, r6, r7, lr}
 8029232:	6810      	ldr	r0, [r2, #0]
 8029234:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
 8029238:	10cc      	asrs	r4, r1, #3
 802923a:	120d      	asrs	r5, r1, #8
 802923c:	fa5f fc8c 	uxtb.w	ip, ip
 8029240:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 8029244:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8029248:	0e07      	lsrs	r7, r0, #24
 802924a:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 802924e:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 8029252:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 8029256:	d108      	bne.n	802926a <_ZNK8touchgfx8LCD32bpp17DecompressorL8_L416blendPixelRGB565EtPmh+0x3a>
 8029258:	0224      	lsls	r4, r4, #8
 802925a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 802925e:	ea45 0c0c 	orr.w	ip, r5, ip
 8029262:	ea4c 6303 	orr.w	r3, ip, r3, lsl #24
 8029266:	6013      	str	r3, [r2, #0]
 8029268:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802926a:	fb13 f505 	smulbb	r5, r3, r5
 802926e:	fb03 f607 	mul.w	r6, r3, r7
 8029272:	fb1c fc03 	smulbb	ip, ip, r3
 8029276:	1c71      	adds	r1, r6, #1
 8029278:	eb01 2126 	add.w	r1, r1, r6, asr #8
 802927c:	19de      	adds	r6, r3, r7
 802927e:	fb13 f304 	smulbb	r3, r3, r4
 8029282:	1209      	asrs	r1, r1, #8
 8029284:	1a7f      	subs	r7, r7, r1
 8029286:	1a76      	subs	r6, r6, r1
 8029288:	f3c0 4107 	ubfx	r1, r0, #16, #8
 802928c:	b2f6      	uxtb	r6, r6
 802928e:	fb07 5101 	mla	r1, r7, r1, r5
 8029292:	b2c5      	uxtb	r5, r0
 8029294:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8029298:	fb07 c505 	mla	r5, r7, r5, ip
 802929c:	fb07 3300 	mla	r3, r7, r0, r3
 80292a0:	fbb1 f1f6 	udiv	r1, r1, r6
 80292a4:	fbb5 f5f6 	udiv	r5, r5, r6
 80292a8:	fbb3 f3f6 	udiv	r3, r3, r6
 80292ac:	0409      	lsls	r1, r1, #16
 80292ae:	b2ed      	uxtb	r5, r5
 80292b0:	f401 017f 	and.w	r1, r1, #16711680	@ 0xff0000
 80292b4:	021b      	lsls	r3, r3, #8
 80292b6:	ea45 6506 	orr.w	r5, r5, r6, lsl #24
 80292ba:	b29b      	uxth	r3, r3
 80292bc:	4329      	orrs	r1, r5
 80292be:	430b      	orrs	r3, r1
 80292c0:	e7d1      	b.n	8029266 <_ZNK8touchgfx8LCD32bpp17DecompressorL8_L416blendPixelRGB565EtPmh+0x36>
	...

080292c4 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 80292c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80292c8:	461c      	mov	r4, r3
 80292ca:	b08b      	sub	sp, #44	@ 0x2c
 80292cc:	460d      	mov	r5, r1
 80292ce:	4616      	mov	r6, r2
 80292d0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80292d2:	4682      	mov	sl, r0
 80292d4:	6861      	ldr	r1, [r4, #4]
 80292d6:	aa06      	add	r2, sp, #24
 80292d8:	6820      	ldr	r0, [r4, #0]
 80292da:	2702      	movs	r7, #2
 80292dc:	f89d 9054 	ldrb.w	r9, [sp, #84]	@ 0x54
 80292e0:	3604      	adds	r6, #4
 80292e2:	c203      	stmia	r2!, {r0, r1}
 80292e4:	6818      	ldr	r0, [r3, #0]
 80292e6:	aa08      	add	r2, sp, #32
 80292e8:	6859      	ldr	r1, [r3, #4]
 80292ea:	c203      	stmia	r2!, {r0, r1}
 80292ec:	a806      	add	r0, sp, #24
 80292ee:	f7ef fbb5 	bl	8018a5c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80292f2:	4621      	mov	r1, r4
 80292f4:	a808      	add	r0, sp, #32
 80292f6:	f7ef fbd9 	bl	8018aac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80292fa:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80292fe:	f9bd b026 	ldrsh.w	fp, [sp, #38]	@ 0x26
 8029302:	f002 0301 	and.w	r3, r2, #1
 8029306:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 802930a:	9302      	str	r3, [sp, #8]
 802930c:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8029310:	f003 0101 	and.w	r1, r3, #1
 8029314:	9101      	str	r1, [sp, #4]
 8029316:	9801      	ldr	r0, [sp, #4]
 8029318:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	@ 0x22
 802931c:	4403      	add	r3, r0
 802931e:	fb01 2303 	mla	r3, r1, r3, r2
 8029322:	fb93 f3f7 	sdiv	r3, r3, r7
 8029326:	441d      	add	r5, r3
 8029328:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 802932c:	441a      	add	r2, r3
 802932e:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 8029332:	4419      	add	r1, r3
 8029334:	4b84      	ldr	r3, [pc, #528]	@ (8029548 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x284>)
 8029336:	f8ad 2020 	strh.w	r2, [sp, #32]
 802933a:	6818      	ldr	r0, [r3, #0]
 802933c:	f8ad 1022 	strh.w	r1, [sp, #34]	@ 0x22
 8029340:	6803      	ldr	r3, [r0, #0]
 8029342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8029344:	4798      	blx	r3
 8029346:	4b81      	ldr	r3, [pc, #516]	@ (802954c <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x288>)
 8029348:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	@ 0x22
 802934c:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8029350:	881a      	ldrh	r2, [r3, #0]
 8029352:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8029356:	fb0b fb02 	mul.w	fp, fp, r2
 802935a:	fb02 1404 	mla	r4, r2, r4, r1
 802935e:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8029362:	eb04 028b 	add.w	r2, r4, fp, lsl #2
 8029366:	9203      	str	r2, [sp, #12]
 8029368:	461a      	mov	r2, r3
 802936a:	d033      	beq.n	80293d4 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x110>
 802936c:	e9cd 3704 	strd	r3, r7, [sp, #16]
 8029370:	9b03      	ldr	r3, [sp, #12]
 8029372:	429c      	cmp	r4, r3
 8029374:	f080 80df 	bcs.w	8029536 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x272>
 8029378:	9b02      	ldr	r3, [sp, #8]
 802937a:	2b00      	cmp	r3, #0
 802937c:	f000 80be 	beq.w	80294fc <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x238>
 8029380:	7829      	ldrb	r1, [r5, #0]
 8029382:	4622      	mov	r2, r4
 8029384:	1c6f      	adds	r7, r5, #1
 8029386:	3404      	adds	r4, #4
 8029388:	f001 010f 	and.w	r1, r1, #15
 802938c:	f108 3bff 	add.w	fp, r8, #4294967295
 8029390:	464b      	mov	r3, r9
 8029392:	4650      	mov	r0, sl
 8029394:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 8029398:	f7ff ff4a 	bl	8029230 <_ZNK8touchgfx8LCD32bpp17DecompressorL8_L416blendPixelRGB565EtPmh>
 802939c:	f1bb 0f01 	cmp.w	fp, #1
 80293a0:	f340 80af 	ble.w	8029502 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x23e>
 80293a4:	7839      	ldrb	r1, [r7, #0]
 80293a6:	4622      	mov	r2, r4
 80293a8:	464b      	mov	r3, r9
 80293aa:	4650      	mov	r0, sl
 80293ac:	0909      	lsrs	r1, r1, #4
 80293ae:	f1ab 0b02 	sub.w	fp, fp, #2
 80293b2:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 80293b6:	f7ff ff3b 	bl	8029230 <_ZNK8touchgfx8LCD32bpp17DecompressorL8_L416blendPixelRGB565EtPmh>
 80293ba:	f817 1b01 	ldrb.w	r1, [r7], #1
 80293be:	1d22      	adds	r2, r4, #4
 80293c0:	464b      	mov	r3, r9
 80293c2:	f001 010f 	and.w	r1, r1, #15
 80293c6:	4650      	mov	r0, sl
 80293c8:	3408      	adds	r4, #8
 80293ca:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 80293ce:	f7ff ff2f 	bl	8029230 <_ZNK8touchgfx8LCD32bpp17DecompressorL8_L416blendPixelRGB565EtPmh>
 80293d2:	e7e3      	b.n	802939c <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xd8>
 80293d4:	4639      	mov	r1, r7
 80293d6:	9b03      	ldr	r3, [sp, #12]
 80293d8:	429c      	cmp	r4, r3
 80293da:	f080 80ac 	bcs.w	8029536 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x272>
 80293de:	9b02      	ldr	r3, [sp, #8]
 80293e0:	2b00      	cmp	r3, #0
 80293e2:	d05f      	beq.n	80294a4 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1e0>
 80293e4:	782b      	ldrb	r3, [r5, #0]
 80293e6:	1c6f      	adds	r7, r5, #1
 80293e8:	f003 030f 	and.w	r3, r3, #15
 80293ec:	f836 0013 	ldrh.w	r0, [r6, r3, lsl #1]
 80293f0:	10c3      	asrs	r3, r0, #3
 80293f2:	ea4f 2c20 	mov.w	ip, r0, asr #8
 80293f6:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 80293fa:	00c0      	lsls	r0, r0, #3
 80293fc:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8029400:	ea43 1393 	orr.w	r3, r3, r3, lsr #6
 8029404:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 8029408:	b2c0      	uxtb	r0, r0
 802940a:	021b      	lsls	r3, r3, #8
 802940c:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 8029410:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 8029414:	f108 3cff 	add.w	ip, r8, #4294967295
 8029418:	4303      	orrs	r3, r0
 802941a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 802941e:	f844 3b04 	str.w	r3, [r4], #4
 8029422:	f1bc 0f01 	cmp.w	ip, #1
 8029426:	4620      	mov	r0, r4
 8029428:	f104 0408 	add.w	r4, r4, #8
 802942c:	dd3d      	ble.n	80294aa <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1e6>
 802942e:	783b      	ldrb	r3, [r7, #0]
 8029430:	f1ac 0c02 	sub.w	ip, ip, #2
 8029434:	091b      	lsrs	r3, r3, #4
 8029436:	f836 0013 	ldrh.w	r0, [r6, r3, lsl #1]
 802943a:	10c3      	asrs	r3, r0, #3
 802943c:	ea4f 2e20 	mov.w	lr, r0, asr #8
 8029440:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 8029444:	00c0      	lsls	r0, r0, #3
 8029446:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 802944a:	ea43 1393 	orr.w	r3, r3, r3, lsr #6
 802944e:	ea4e 1e5e 	orr.w	lr, lr, lr, lsr #5
 8029452:	b2c0      	uxtb	r0, r0
 8029454:	021b      	lsls	r3, r3, #8
 8029456:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 802945a:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 802945e:	4303      	orrs	r3, r0
 8029460:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8029464:	f844 3c08 	str.w	r3, [r4, #-8]
 8029468:	f817 3b01 	ldrb.w	r3, [r7], #1
 802946c:	f003 030f 	and.w	r3, r3, #15
 8029470:	f836 0013 	ldrh.w	r0, [r6, r3, lsl #1]
 8029474:	10c3      	asrs	r3, r0, #3
 8029476:	ea4f 2e20 	mov.w	lr, r0, asr #8
 802947a:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 802947e:	00c0      	lsls	r0, r0, #3
 8029480:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 8029484:	ea43 1393 	orr.w	r3, r3, r3, lsr #6
 8029488:	b2c0      	uxtb	r0, r0
 802948a:	ea4e 1e5e 	orr.w	lr, lr, lr, lsr #5
 802948e:	021b      	lsls	r3, r3, #8
 8029490:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 8029494:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8029498:	4303      	orrs	r3, r0
 802949a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 802949e:	f844 3c04 	str.w	r3, [r4, #-4]
 80294a2:	e7be      	b.n	8029422 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x15e>
 80294a4:	462f      	mov	r7, r5
 80294a6:	46c4      	mov	ip, r8
 80294a8:	e7bb      	b.n	8029422 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x15e>
 80294aa:	d11a      	bne.n	80294e2 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x21e>
 80294ac:	783b      	ldrb	r3, [r7, #0]
 80294ae:	3004      	adds	r0, #4
 80294b0:	091b      	lsrs	r3, r3, #4
 80294b2:	f836 4013 	ldrh.w	r4, [r6, r3, lsl #1]
 80294b6:	10e3      	asrs	r3, r4, #3
 80294b8:	1227      	asrs	r7, r4, #8
 80294ba:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 80294be:	00e4      	lsls	r4, r4, #3
 80294c0:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 80294c4:	ea43 1393 	orr.w	r3, r3, r3, lsr #6
 80294c8:	b2e4      	uxtb	r4, r4
 80294ca:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 80294ce:	021b      	lsls	r3, r3, #8
 80294d0:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 80294d4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80294d8:	4323      	orrs	r3, r4
 80294da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80294de:	f840 3c04 	str.w	r3, [r0, #-4]
 80294e2:	8814      	ldrh	r4, [r2, #0]
 80294e4:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80294e8:	eba4 0408 	sub.w	r4, r4, r8
 80294ec:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 80294f0:	9801      	ldr	r0, [sp, #4]
 80294f2:	4403      	add	r3, r0
 80294f4:	fb93 f3f1 	sdiv	r3, r3, r1
 80294f8:	441d      	add	r5, r3
 80294fa:	e76c      	b.n	80293d6 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x112>
 80294fc:	462f      	mov	r7, r5
 80294fe:	46c3      	mov	fp, r8
 8029500:	e74c      	b.n	802939c <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xd8>
 8029502:	d109      	bne.n	8029518 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x254>
 8029504:	7839      	ldrb	r1, [r7, #0]
 8029506:	4622      	mov	r2, r4
 8029508:	3404      	adds	r4, #4
 802950a:	464b      	mov	r3, r9
 802950c:	0909      	lsrs	r1, r1, #4
 802950e:	4650      	mov	r0, sl
 8029510:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 8029514:	f7ff fe8c 	bl	8029230 <_ZNK8touchgfx8LCD32bpp17DecompressorL8_L416blendPixelRGB565EtPmh>
 8029518:	9b04      	ldr	r3, [sp, #16]
 802951a:	9a01      	ldr	r2, [sp, #4]
 802951c:	881b      	ldrh	r3, [r3, #0]
 802951e:	eba3 0308 	sub.w	r3, r3, r8
 8029522:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8029526:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 802952a:	4413      	add	r3, r2
 802952c:	9a05      	ldr	r2, [sp, #20]
 802952e:	fb93 f3f2 	sdiv	r3, r3, r2
 8029532:	441d      	add	r5, r3
 8029534:	e71c      	b.n	8029370 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xac>
 8029536:	4b04      	ldr	r3, [pc, #16]	@ (8029548 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x284>)
 8029538:	6818      	ldr	r0, [r3, #0]
 802953a:	6803      	ldr	r3, [r0, #0]
 802953c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802953e:	4798      	blx	r3
 8029540:	b00b      	add	sp, #44	@ 0x2c
 8029542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029546:	bf00      	nop
 8029548:	20029ed8 	.word	0x20029ed8
 802954c:	20029ed2 	.word	0x20029ed2

08029550 <_ZNK8touchgfx8LCD32bpp17DecompressorL8_L418blendPixelARGB8888EPKhPmhh>:
 8029550:	b5f0      	push	{r4, r5, r6, r7, lr}
 8029552:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8029556:	436b      	muls	r3, r5
 8029558:	1c5d      	adds	r5, r3, #1
 802955a:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 802955e:	121d      	asrs	r5, r3, #8
 8029560:	2dff      	cmp	r5, #255	@ 0xff
 8029562:	d002      	beq.n	802956a <_ZNK8touchgfx8LCD32bpp17DecompressorL8_L418blendPixelARGB8888EPKhPmhh+0x1a>
 8029564:	6810      	ldr	r0, [r2, #0]
 8029566:	0e03      	lsrs	r3, r0, #24
 8029568:	d10a      	bne.n	8029580 <_ZNK8touchgfx8LCD32bpp17DecompressorL8_L418blendPixelARGB8888EPKhPmhh+0x30>
 802956a:	784b      	ldrb	r3, [r1, #1]
 802956c:	7888      	ldrb	r0, [r1, #2]
 802956e:	021b      	lsls	r3, r3, #8
 8029570:	7809      	ldrb	r1, [r1, #0]
 8029572:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8029576:	430b      	orrs	r3, r1
 8029578:	ea43 6505 	orr.w	r5, r3, r5, lsl #24
 802957c:	6015      	str	r5, [r2, #0]
 802957e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8029580:	b2ee      	uxtb	r6, r5
 8029582:	2d00      	cmp	r5, #0
 8029584:	d0fb      	beq.n	802957e <_ZNK8touchgfx8LCD32bpp17DecompressorL8_L418blendPixelARGB8888EPKhPmhh+0x2e>
 8029586:	fb06 f703 	mul.w	r7, r6, r3
 802958a:	441e      	add	r6, r3
 802958c:	fa5f fc80 	uxtb.w	ip, r0
 8029590:	1c7c      	adds	r4, r7, #1
 8029592:	eb04 2427 	add.w	r4, r4, r7, asr #8
 8029596:	1224      	asrs	r4, r4, #8
 8029598:	1b1f      	subs	r7, r3, r4
 802959a:	788b      	ldrb	r3, [r1, #2]
 802959c:	1b36      	subs	r6, r6, r4
 802959e:	f3c0 4407 	ubfx	r4, r0, #16, #8
 80295a2:	436b      	muls	r3, r5
 80295a4:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80295a8:	fb07 fc0c 	mul.w	ip, r7, ip
 80295ac:	b2f6      	uxtb	r6, r6
 80295ae:	fb07 3404 	mla	r4, r7, r4, r3
 80295b2:	780b      	ldrb	r3, [r1, #0]
 80295b4:	fb05 c303 	mla	r3, r5, r3, ip
 80295b8:	fbb4 f4f6 	udiv	r4, r4, r6
 80295bc:	fbb3 f3f6 	udiv	r3, r3, r6
 80295c0:	0424      	lsls	r4, r4, #16
 80295c2:	b2db      	uxtb	r3, r3
 80295c4:	f404 047f 	and.w	r4, r4, #16711680	@ 0xff0000
 80295c8:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 80295cc:	431c      	orrs	r4, r3
 80295ce:	784b      	ldrb	r3, [r1, #1]
 80295d0:	436b      	muls	r3, r5
 80295d2:	fb07 3300 	mla	r3, r7, r0, r3
 80295d6:	fbb3 f3f6 	udiv	r3, r3, r6
 80295da:	021b      	lsls	r3, r3, #8
 80295dc:	b29b      	uxth	r3, r3
 80295de:	4323      	orrs	r3, r4
 80295e0:	6013      	str	r3, [r2, #0]
 80295e2:	e7cc      	b.n	802957e <_ZNK8touchgfx8LCD32bpp17DecompressorL8_L418blendPixelARGB8888EPKhPmhh+0x2e>

080295e4 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 80295e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80295e8:	461d      	mov	r5, r3
 80295ea:	b08f      	sub	sp, #60	@ 0x3c
 80295ec:	460c      	mov	r4, r1
 80295ee:	4616      	mov	r6, r2
 80295f0:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80295f2:	4680      	mov	r8, r0
 80295f4:	6869      	ldr	r1, [r5, #4]
 80295f6:	aa0a      	add	r2, sp, #40	@ 0x28
 80295f8:	6828      	ldr	r0, [r5, #0]
 80295fa:	3604      	adds	r6, #4
 80295fc:	f89d 9064 	ldrb.w	r9, [sp, #100]	@ 0x64
 8029600:	f8df a15c 	ldr.w	sl, [pc, #348]	@ 8029760 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x17c>
 8029604:	c203      	stmia	r2!, {r0, r1}
 8029606:	6818      	ldr	r0, [r3, #0]
 8029608:	aa0c      	add	r2, sp, #48	@ 0x30
 802960a:	6859      	ldr	r1, [r3, #4]
 802960c:	c203      	stmia	r2!, {r0, r1}
 802960e:	a80a      	add	r0, sp, #40	@ 0x28
 8029610:	f7ef fa24 	bl	8018a5c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8029614:	4629      	mov	r1, r5
 8029616:	a80c      	add	r0, sp, #48	@ 0x30
 8029618:	2502      	movs	r5, #2
 802961a:	f7ef fa47 	bl	8018aac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802961e:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8029622:	f9bd 7036 	ldrsh.w	r7, [sp, #54]	@ 0x36
 8029626:	f002 0301 	and.w	r3, r2, #1
 802962a:	f9bd b034 	ldrsh.w	fp, [sp, #52]	@ 0x34
 802962e:	9304      	str	r3, [sp, #16]
 8029630:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8029634:	f003 0101 	and.w	r1, r3, #1
 8029638:	9103      	str	r1, [sp, #12]
 802963a:	9803      	ldr	r0, [sp, #12]
 802963c:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 8029640:	4403      	add	r3, r0
 8029642:	f8da 0000 	ldr.w	r0, [sl]
 8029646:	fb01 2303 	mla	r3, r1, r3, r2
 802964a:	fb93 f3f5 	sdiv	r3, r3, r5
 802964e:	18e5      	adds	r5, r4, r3
 8029650:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8029654:	441a      	add	r2, r3
 8029656:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 802965a:	4419      	add	r1, r3
 802965c:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8029660:	f8ad 1032 	strh.w	r1, [sp, #50]	@ 0x32
 8029664:	6803      	ldr	r3, [r0, #0]
 8029666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8029668:	4798      	blx	r3
 802966a:	4b3c      	ldr	r3, [pc, #240]	@ (802975c <_ZN8touchgfx8LCD32bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x178>)
 802966c:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	@ 0x32
 8029670:	881a      	ldrh	r2, [r3, #0]
 8029672:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 8029676:	4357      	muls	r7, r2
 8029678:	fb02 1404 	mla	r4, r2, r4, r1
 802967c:	9307      	str	r3, [sp, #28]
 802967e:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8029682:	eb04 0287 	add.w	r2, r4, r7, lsl #2
 8029686:	e9cd 2a05 	strd	r2, sl, [sp, #20]
 802968a:	9b05      	ldr	r3, [sp, #20]
 802968c:	429c      	cmp	r4, r3
 802968e:	d25c      	bcs.n	802974a <_ZN8touchgfx8LCD32bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x166>
 8029690:	9b04      	ldr	r3, [sp, #16]
 8029692:	2b00      	cmp	r3, #0
 8029694:	d037      	beq.n	8029706 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x122>
 8029696:	782b      	ldrb	r3, [r5, #0]
 8029698:	1c6f      	adds	r7, r5, #1
 802969a:	f003 030f 	and.w	r3, r3, #15
 802969e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80296a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80296a4:	0e1b      	lsrs	r3, r3, #24
 80296a6:	d006      	beq.n	80296b6 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd2>
 80296a8:	9300      	str	r3, [sp, #0]
 80296aa:	4622      	mov	r2, r4
 80296ac:	464b      	mov	r3, r9
 80296ae:	a909      	add	r1, sp, #36	@ 0x24
 80296b0:	4640      	mov	r0, r8
 80296b2:	f7ff ff4d 	bl	8029550 <_ZNK8touchgfx8LCD32bpp17DecompressorL8_L418blendPixelARGB8888EPKhPmhh>
 80296b6:	3404      	adds	r4, #4
 80296b8:	f10b 3aff 	add.w	sl, fp, #4294967295
 80296bc:	f1ba 0f01 	cmp.w	sl, #1
 80296c0:	dd24      	ble.n	802970c <_ZN8touchgfx8LCD32bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x128>
 80296c2:	783b      	ldrb	r3, [r7, #0]
 80296c4:	091b      	lsrs	r3, r3, #4
 80296c6:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80296ca:	9308      	str	r3, [sp, #32]
 80296cc:	0e1b      	lsrs	r3, r3, #24
 80296ce:	d006      	beq.n	80296de <_ZN8touchgfx8LCD32bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xfa>
 80296d0:	9300      	str	r3, [sp, #0]
 80296d2:	4622      	mov	r2, r4
 80296d4:	464b      	mov	r3, r9
 80296d6:	a908      	add	r1, sp, #32
 80296d8:	4640      	mov	r0, r8
 80296da:	f7ff ff39 	bl	8029550 <_ZNK8touchgfx8LCD32bpp17DecompressorL8_L418blendPixelARGB8888EPKhPmhh>
 80296de:	f817 3b01 	ldrb.w	r3, [r7], #1
 80296e2:	f003 030f 	and.w	r3, r3, #15
 80296e6:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80296ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80296ec:	0e1b      	lsrs	r3, r3, #24
 80296ee:	d006      	beq.n	80296fe <_ZN8touchgfx8LCD32bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x11a>
 80296f0:	9300      	str	r3, [sp, #0]
 80296f2:	1d22      	adds	r2, r4, #4
 80296f4:	464b      	mov	r3, r9
 80296f6:	a909      	add	r1, sp, #36	@ 0x24
 80296f8:	4640      	mov	r0, r8
 80296fa:	f7ff ff29 	bl	8029550 <_ZNK8touchgfx8LCD32bpp17DecompressorL8_L418blendPixelARGB8888EPKhPmhh>
 80296fe:	3408      	adds	r4, #8
 8029700:	f1aa 0a02 	sub.w	sl, sl, #2
 8029704:	e7da      	b.n	80296bc <_ZN8touchgfx8LCD32bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd8>
 8029706:	462f      	mov	r7, r5
 8029708:	46da      	mov	sl, fp
 802970a:	e7d7      	b.n	80296bc <_ZN8touchgfx8LCD32bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd8>
 802970c:	d10e      	bne.n	802972c <_ZN8touchgfx8LCD32bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x148>
 802970e:	783b      	ldrb	r3, [r7, #0]
 8029710:	091b      	lsrs	r3, r3, #4
 8029712:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8029716:	9309      	str	r3, [sp, #36]	@ 0x24
 8029718:	0e1b      	lsrs	r3, r3, #24
 802971a:	d006      	beq.n	802972a <_ZN8touchgfx8LCD32bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x146>
 802971c:	9300      	str	r3, [sp, #0]
 802971e:	4622      	mov	r2, r4
 8029720:	464b      	mov	r3, r9
 8029722:	a909      	add	r1, sp, #36	@ 0x24
 8029724:	4640      	mov	r0, r8
 8029726:	f7ff ff13 	bl	8029550 <_ZNK8touchgfx8LCD32bpp17DecompressorL8_L418blendPixelARGB8888EPKhPmhh>
 802972a:	3404      	adds	r4, #4
 802972c:	9b07      	ldr	r3, [sp, #28]
 802972e:	9a03      	ldr	r2, [sp, #12]
 8029730:	881b      	ldrh	r3, [r3, #0]
 8029732:	eba3 030b 	sub.w	r3, r3, fp
 8029736:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 802973a:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 802973e:	4413      	add	r3, r2
 8029740:	2202      	movs	r2, #2
 8029742:	fb93 f3f2 	sdiv	r3, r3, r2
 8029746:	441d      	add	r5, r3
 8029748:	e79f      	b.n	802968a <_ZN8touchgfx8LCD32bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xa6>
 802974a:	9b06      	ldr	r3, [sp, #24]
 802974c:	6818      	ldr	r0, [r3, #0]
 802974e:	6803      	ldr	r3, [r0, #0]
 8029750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8029752:	4798      	blx	r3
 8029754:	b00f      	add	sp, #60	@ 0x3c
 8029756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802975a:	bf00      	nop
 802975c:	20029ed2 	.word	0x20029ed2
 8029760:	20029ed8 	.word	0x20029ed8

08029764 <_ZNK8touchgfx8LCD32bpp17DecompressorL8_L416blendPixelRGB888EPKhPmh>:
 8029764:	6810      	ldr	r0, [r2, #0]
 8029766:	b5f0      	push	{r4, r5, r6, r7, lr}
 8029768:	0e06      	lsrs	r6, r0, #24
 802976a:	f891 c000 	ldrb.w	ip, [r1]
 802976e:	784f      	ldrb	r7, [r1, #1]
 8029770:	788c      	ldrb	r4, [r1, #2]
 8029772:	d108      	bne.n	8029786 <_ZNK8touchgfx8LCD32bpp17DecompressorL8_L416blendPixelRGB888EPKhPmh+0x22>
 8029774:	0424      	lsls	r4, r4, #16
 8029776:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
 802977a:	ea43 030c 	orr.w	r3, r3, ip
 802977e:	ea43 2707 	orr.w	r7, r3, r7, lsl #8
 8029782:	6017      	str	r7, [r2, #0]
 8029784:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8029786:	fb13 f404 	smulbb	r4, r3, r4
 802978a:	fb03 f506 	mul.w	r5, r3, r6
 802978e:	fb1c fc03 	smulbb	ip, ip, r3
 8029792:	1c69      	adds	r1, r5, #1
 8029794:	eb01 2125 	add.w	r1, r1, r5, asr #8
 8029798:	199d      	adds	r5, r3, r6
 802979a:	fb13 f307 	smulbb	r3, r3, r7
 802979e:	1209      	asrs	r1, r1, #8
 80297a0:	1a76      	subs	r6, r6, r1
 80297a2:	1a6d      	subs	r5, r5, r1
 80297a4:	f3c0 4107 	ubfx	r1, r0, #16, #8
 80297a8:	b2ed      	uxtb	r5, r5
 80297aa:	fb06 4101 	mla	r1, r6, r1, r4
 80297ae:	b2c4      	uxtb	r4, r0
 80297b0:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80297b4:	fb06 c404 	mla	r4, r6, r4, ip
 80297b8:	fb06 3300 	mla	r3, r6, r0, r3
 80297bc:	fbb1 f1f5 	udiv	r1, r1, r5
 80297c0:	fbb4 f4f5 	udiv	r4, r4, r5
 80297c4:	fbb3 f3f5 	udiv	r3, r3, r5
 80297c8:	0409      	lsls	r1, r1, #16
 80297ca:	b2e4      	uxtb	r4, r4
 80297cc:	f401 017f 	and.w	r1, r1, #16711680	@ 0xff0000
 80297d0:	021b      	lsls	r3, r3, #8
 80297d2:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
 80297d6:	b29b      	uxth	r3, r3
 80297d8:	4321      	orrs	r1, r4
 80297da:	430b      	orrs	r3, r1
 80297dc:	6013      	str	r3, [r2, #0]
 80297de:	e7d1      	b.n	8029784 <_ZNK8touchgfx8LCD32bpp17DecompressorL8_L416blendPixelRGB888EPKhPmh+0x20>

080297e0 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 80297e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80297e4:	461e      	mov	r6, r3
 80297e6:	b08b      	sub	sp, #44	@ 0x2c
 80297e8:	460c      	mov	r4, r1
 80297ea:	4615      	mov	r5, r2
 80297ec:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80297ee:	4682      	mov	sl, r0
 80297f0:	6871      	ldr	r1, [r6, #4]
 80297f2:	aa06      	add	r2, sp, #24
 80297f4:	6830      	ldr	r0, [r6, #0]
 80297f6:	2702      	movs	r7, #2
 80297f8:	f89d 9054 	ldrb.w	r9, [sp, #84]	@ 0x54
 80297fc:	3504      	adds	r5, #4
 80297fe:	c203      	stmia	r2!, {r0, r1}
 8029800:	6818      	ldr	r0, [r3, #0]
 8029802:	aa08      	add	r2, sp, #32
 8029804:	6859      	ldr	r1, [r3, #4]
 8029806:	c203      	stmia	r2!, {r0, r1}
 8029808:	a806      	add	r0, sp, #24
 802980a:	f7ef f927 	bl	8018a5c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802980e:	4631      	mov	r1, r6
 8029810:	a808      	add	r0, sp, #32
 8029812:	f7ef f94b 	bl	8018aac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8029816:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 802981a:	f9bd b026 	ldrsh.w	fp, [sp, #38]	@ 0x26
 802981e:	f002 0301 	and.w	r3, r2, #1
 8029822:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 8029826:	9302      	str	r3, [sp, #8]
 8029828:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 802982c:	f003 0101 	and.w	r1, r3, #1
 8029830:	9101      	str	r1, [sp, #4]
 8029832:	9801      	ldr	r0, [sp, #4]
 8029834:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	@ 0x22
 8029838:	4403      	add	r3, r0
 802983a:	fb01 2303 	mla	r3, r1, r3, r2
 802983e:	fb93 f3f7 	sdiv	r3, r3, r7
 8029842:	18e6      	adds	r6, r4, r3
 8029844:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8029848:	441a      	add	r2, r3
 802984a:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 802984e:	4419      	add	r1, r3
 8029850:	4b71      	ldr	r3, [pc, #452]	@ (8029a18 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>)
 8029852:	f8ad 2020 	strh.w	r2, [sp, #32]
 8029856:	6818      	ldr	r0, [r3, #0]
 8029858:	f8ad 1022 	strh.w	r1, [sp, #34]	@ 0x22
 802985c:	6803      	ldr	r3, [r0, #0]
 802985e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8029860:	4798      	blx	r3
 8029862:	4b6e      	ldr	r3, [pc, #440]	@ (8029a1c <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x23c>)
 8029864:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	@ 0x22
 8029868:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 802986c:	881a      	ldrh	r2, [r3, #0]
 802986e:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8029872:	fb0b fb02 	mul.w	fp, fp, r2
 8029876:	fb02 1404 	mla	r4, r2, r4, r1
 802987a:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 802987e:	eb04 028b 	add.w	r2, r4, fp, lsl #2
 8029882:	9203      	str	r2, [sp, #12]
 8029884:	461a      	mov	r2, r3
 8029886:	d056      	beq.n	8029936 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x156>
 8029888:	e9cd 3704 	strd	r3, r7, [sp, #16]
 802988c:	9b03      	ldr	r3, [sp, #12]
 802988e:	429c      	cmp	r4, r3
 8029890:	f080 80b9 	bcs.w	8029a06 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x226>
 8029894:	9b02      	ldr	r3, [sp, #8]
 8029896:	2b00      	cmp	r3, #0
 8029898:	f000 8097 	beq.w	80299ca <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ea>
 802989c:	7831      	ldrb	r1, [r6, #0]
 802989e:	4622      	mov	r2, r4
 80298a0:	1c77      	adds	r7, r6, #1
 80298a2:	3404      	adds	r4, #4
 80298a4:	f001 010f 	and.w	r1, r1, #15
 80298a8:	f108 3bff 	add.w	fp, r8, #4294967295
 80298ac:	464b      	mov	r3, r9
 80298ae:	4650      	mov	r0, sl
 80298b0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80298b4:	4429      	add	r1, r5
 80298b6:	f7ff ff55 	bl	8029764 <_ZNK8touchgfx8LCD32bpp17DecompressorL8_L416blendPixelRGB888EPKhPmh>
 80298ba:	f1bb 0f01 	cmp.w	fp, #1
 80298be:	f340 8087 	ble.w	80299d0 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1f0>
 80298c2:	7839      	ldrb	r1, [r7, #0]
 80298c4:	4622      	mov	r2, r4
 80298c6:	464b      	mov	r3, r9
 80298c8:	4650      	mov	r0, sl
 80298ca:	0909      	lsrs	r1, r1, #4
 80298cc:	f1ab 0b02 	sub.w	fp, fp, #2
 80298d0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80298d4:	4429      	add	r1, r5
 80298d6:	f7ff ff45 	bl	8029764 <_ZNK8touchgfx8LCD32bpp17DecompressorL8_L416blendPixelRGB888EPKhPmh>
 80298da:	f817 1b01 	ldrb.w	r1, [r7], #1
 80298de:	1d22      	adds	r2, r4, #4
 80298e0:	464b      	mov	r3, r9
 80298e2:	f001 010f 	and.w	r1, r1, #15
 80298e6:	4650      	mov	r0, sl
 80298e8:	3408      	adds	r4, #8
 80298ea:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80298ee:	4429      	add	r1, r5
 80298f0:	f7ff ff38 	bl	8029764 <_ZNK8touchgfx8LCD32bpp17DecompressorL8_L416blendPixelRGB888EPKhPmh>
 80298f4:	e7e1      	b.n	80298ba <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xda>
 80298f6:	4633      	mov	r3, r6
 80298f8:	4640      	mov	r0, r8
 80298fa:	e037      	b.n	802996c <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x18c>
 80298fc:	d10f      	bne.n	802991e <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x13e>
 80298fe:	781b      	ldrb	r3, [r3, #0]
 8029900:	091b      	lsrs	r3, r3, #4
 8029902:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8029906:	18e8      	adds	r0, r5, r3
 8029908:	5ceb      	ldrb	r3, [r5, r3]
 802990a:	7884      	ldrb	r4, [r0, #2]
 802990c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8029910:	7840      	ldrb	r0, [r0, #1]
 8029912:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8029916:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 802991a:	f841 3b04 	str.w	r3, [r1], #4
 802991e:	8814      	ldrh	r4, [r2, #0]
 8029920:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8029924:	eba4 0408 	sub.w	r4, r4, r8
 8029928:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 802992c:	9901      	ldr	r1, [sp, #4]
 802992e:	440b      	add	r3, r1
 8029930:	fb93 f3f7 	sdiv	r3, r3, r7
 8029934:	441e      	add	r6, r3
 8029936:	9b03      	ldr	r3, [sp, #12]
 8029938:	429c      	cmp	r4, r3
 802993a:	d264      	bcs.n	8029a06 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x226>
 802993c:	9b02      	ldr	r3, [sp, #8]
 802993e:	2b00      	cmp	r3, #0
 8029940:	d0d9      	beq.n	80298f6 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x116>
 8029942:	7831      	ldrb	r1, [r6, #0]
 8029944:	1c73      	adds	r3, r6, #1
 8029946:	f001 010f 	and.w	r1, r1, #15
 802994a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802994e:	1868      	adds	r0, r5, r1
 8029950:	5c69      	ldrb	r1, [r5, r1]
 8029952:	f890 c002 	ldrb.w	ip, [r0, #2]
 8029956:	f041 417f 	orr.w	r1, r1, #4278190080	@ 0xff000000
 802995a:	7840      	ldrb	r0, [r0, #1]
 802995c:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8029960:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8029964:	f108 30ff 	add.w	r0, r8, #4294967295
 8029968:	f844 1b04 	str.w	r1, [r4], #4
 802996c:	2801      	cmp	r0, #1
 802996e:	4621      	mov	r1, r4
 8029970:	f104 0408 	add.w	r4, r4, #8
 8029974:	ddc2      	ble.n	80298fc <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11c>
 8029976:	7819      	ldrb	r1, [r3, #0]
 8029978:	3802      	subs	r0, #2
 802997a:	0909      	lsrs	r1, r1, #4
 802997c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8029980:	eb05 0c01 	add.w	ip, r5, r1
 8029984:	5c69      	ldrb	r1, [r5, r1]
 8029986:	f89c e002 	ldrb.w	lr, [ip, #2]
 802998a:	f041 417f 	orr.w	r1, r1, #4278190080	@ 0xff000000
 802998e:	f89c c001 	ldrb.w	ip, [ip, #1]
 8029992:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8029996:	ea41 210c 	orr.w	r1, r1, ip, lsl #8
 802999a:	f844 1c08 	str.w	r1, [r4, #-8]
 802999e:	f813 1b01 	ldrb.w	r1, [r3], #1
 80299a2:	f001 010f 	and.w	r1, r1, #15
 80299a6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80299aa:	eb05 0c01 	add.w	ip, r5, r1
 80299ae:	5c69      	ldrb	r1, [r5, r1]
 80299b0:	f89c e002 	ldrb.w	lr, [ip, #2]
 80299b4:	f041 417f 	orr.w	r1, r1, #4278190080	@ 0xff000000
 80299b8:	f89c c001 	ldrb.w	ip, [ip, #1]
 80299bc:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80299c0:	ea41 210c 	orr.w	r1, r1, ip, lsl #8
 80299c4:	f844 1c04 	str.w	r1, [r4, #-4]
 80299c8:	e7d0      	b.n	802996c <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x18c>
 80299ca:	4637      	mov	r7, r6
 80299cc:	46c3      	mov	fp, r8
 80299ce:	e774      	b.n	80298ba <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xda>
 80299d0:	d10a      	bne.n	80299e8 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x208>
 80299d2:	7839      	ldrb	r1, [r7, #0]
 80299d4:	4622      	mov	r2, r4
 80299d6:	3404      	adds	r4, #4
 80299d8:	464b      	mov	r3, r9
 80299da:	0909      	lsrs	r1, r1, #4
 80299dc:	4650      	mov	r0, sl
 80299de:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80299e2:	4429      	add	r1, r5
 80299e4:	f7ff febe 	bl	8029764 <_ZNK8touchgfx8LCD32bpp17DecompressorL8_L416blendPixelRGB888EPKhPmh>
 80299e8:	9b04      	ldr	r3, [sp, #16]
 80299ea:	9a01      	ldr	r2, [sp, #4]
 80299ec:	881b      	ldrh	r3, [r3, #0]
 80299ee:	eba3 0308 	sub.w	r3, r3, r8
 80299f2:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80299f6:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80299fa:	4413      	add	r3, r2
 80299fc:	9a05      	ldr	r2, [sp, #20]
 80299fe:	fb93 f3f2 	sdiv	r3, r3, r2
 8029a02:	441e      	add	r6, r3
 8029a04:	e742      	b.n	802988c <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xac>
 8029a06:	4b04      	ldr	r3, [pc, #16]	@ (8029a18 <_ZN8touchgfx8LCD32bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>)
 8029a08:	6818      	ldr	r0, [r3, #0]
 8029a0a:	6803      	ldr	r3, [r0, #0]
 8029a0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8029a0e:	4798      	blx	r3
 8029a10:	b00b      	add	sp, #44	@ 0x2c
 8029a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029a16:	bf00      	nop
 8029a18:	20029ed8 	.word	0x20029ed8
 8029a1c:	20029ed2 	.word	0x20029ed2

08029a20 <CRC_Lock>:
 8029a20:	4a20      	ldr	r2, [pc, #128]	@ (8029aa4 <CRC_Lock+0x84>)
 8029a22:	b530      	push	{r4, r5, lr}
 8029a24:	6813      	ldr	r3, [r2, #0]
 8029a26:	f64f 74f0 	movw	r4, #65520	@ 0xfff0
 8029a2a:	f24c 2540 	movw	r5, #49728	@ 0xc240
 8029a2e:	f023 0301 	bic.w	r3, r3, #1
 8029a32:	6013      	str	r3, [r2, #0]
 8029a34:	4b1c      	ldr	r3, [pc, #112]	@ (8029aa8 <CRC_Lock+0x88>)
 8029a36:	681a      	ldr	r2, [r3, #0]
 8029a38:	4022      	ands	r2, r4
 8029a3a:	42aa      	cmp	r2, r5
 8029a3c:	d005      	beq.n	8029a4a <CRC_Lock+0x2a>
 8029a3e:	681b      	ldr	r3, [r3, #0]
 8029a40:	f24c 2270 	movw	r2, #49776	@ 0xc270
 8029a44:	4023      	ands	r3, r4
 8029a46:	4293      	cmp	r3, r2
 8029a48:	d124      	bne.n	8029a94 <CRC_Lock+0x74>
 8029a4a:	4b18      	ldr	r3, [pc, #96]	@ (8029aac <CRC_Lock+0x8c>)
 8029a4c:	681b      	ldr	r3, [r3, #0]
 8029a4e:	bb0b      	cbnz	r3, 8029a94 <CRC_Lock+0x74>
 8029a50:	4b17      	ldr	r3, [pc, #92]	@ (8029ab0 <CRC_Lock+0x90>)
 8029a52:	681a      	ldr	r2, [r3, #0]
 8029a54:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8029a58:	f5b2 6f8a 	cmp.w	r2, #1104	@ 0x450
 8029a5c:	d00d      	beq.n	8029a7a <CRC_Lock+0x5a>
 8029a5e:	681a      	ldr	r2, [r3, #0]
 8029a60:	f240 4483 	movw	r4, #1155	@ 0x483
 8029a64:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8029a68:	42a2      	cmp	r2, r4
 8029a6a:	d006      	beq.n	8029a7a <CRC_Lock+0x5a>
 8029a6c:	681b      	ldr	r3, [r3, #0]
 8029a6e:	f240 4285 	movw	r2, #1157	@ 0x485
 8029a72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8029a76:	4293      	cmp	r3, r2
 8029a78:	d10c      	bne.n	8029a94 <CRC_Lock+0x74>
 8029a7a:	4b0e      	ldr	r3, [pc, #56]	@ (8029ab4 <CRC_Lock+0x94>)
 8029a7c:	2201      	movs	r2, #1
 8029a7e:	601a      	str	r2, [r3, #0]
 8029a80:	681a      	ldr	r2, [r3, #0]
 8029a82:	2a00      	cmp	r2, #0
 8029a84:	d1fc      	bne.n	8029a80 <CRC_Lock+0x60>
 8029a86:	4b0c      	ldr	r3, [pc, #48]	@ (8029ab8 <CRC_Lock+0x98>)
 8029a88:	6018      	str	r0, [r3, #0]
 8029a8a:	6818      	ldr	r0, [r3, #0]
 8029a8c:	1a43      	subs	r3, r0, r1
 8029a8e:	4258      	negs	r0, r3
 8029a90:	4158      	adcs	r0, r3
 8029a92:	bd30      	pop	{r4, r5, pc}
 8029a94:	4b09      	ldr	r3, [pc, #36]	@ (8029abc <CRC_Lock+0x9c>)
 8029a96:	2201      	movs	r2, #1
 8029a98:	601a      	str	r2, [r3, #0]
 8029a9a:	681a      	ldr	r2, [r3, #0]
 8029a9c:	2a00      	cmp	r2, #0
 8029a9e:	d1fc      	bne.n	8029a9a <CRC_Lock+0x7a>
 8029aa0:	4b07      	ldr	r3, [pc, #28]	@ (8029ac0 <CRC_Lock+0xa0>)
 8029aa2:	e7f1      	b.n	8029a88 <CRC_Lock+0x68>
 8029aa4:	e0002000 	.word	0xe0002000
 8029aa8:	e000ed00 	.word	0xe000ed00
 8029aac:	e0042000 	.word	0xe0042000
 8029ab0:	5c001000 	.word	0x5c001000
 8029ab4:	58024c08 	.word	0x58024c08
 8029ab8:	58024c00 	.word	0x58024c00
 8029abc:	40023008 	.word	0x40023008
 8029ac0:	40023000 	.word	0x40023000

08029ac4 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8029ac4:	6101      	str	r1, [r0, #16]
 8029ac6:	4770      	bx	lr

08029ac8 <_ZN8touchgfx8Gestures4tickEv>:
 8029ac8:	7b83      	ldrb	r3, [r0, #14]
 8029aca:	b14b      	cbz	r3, 8029ae0 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8029acc:	8903      	ldrh	r3, [r0, #8]
 8029ace:	3301      	adds	r3, #1
 8029ad0:	b29b      	uxth	r3, r3
 8029ad2:	2b07      	cmp	r3, #7
 8029ad4:	8103      	strh	r3, [r0, #8]
 8029ad6:	bf81      	itttt	hi
 8029ad8:	2300      	movhi	r3, #0
 8029ada:	8143      	strhhi	r3, [r0, #10]
 8029adc:	8183      	strhhi	r3, [r0, #12]
 8029ade:	7383      	strbhi	r3, [r0, #14]
 8029ae0:	4770      	bx	lr
	...

08029ae4 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8029ae4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8029ae8:	4698      	mov	r8, r3
 8029aea:	8883      	ldrh	r3, [r0, #4]
 8029aec:	4604      	mov	r4, r0
 8029aee:	4617      	mov	r7, r2
 8029af0:	f8ad 3006 	strh.w	r3, [sp, #6]
 8029af4:	eba8 0303 	sub.w	r3, r8, r3
 8029af8:	4a19      	ldr	r2, [pc, #100]	@ (8029b60 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 8029afa:	460e      	mov	r6, r1
 8029afc:	b21b      	sxth	r3, r3
 8029afe:	88c1      	ldrh	r1, [r0, #6]
 8029b00:	9200      	str	r2, [sp, #0]
 8029b02:	2000      	movs	r0, #0
 8029b04:	2b00      	cmp	r3, #0
 8029b06:	8aa2      	ldrh	r2, [r4, #20]
 8029b08:	f8bd 5028 	ldrh.w	r5, [sp, #40]	@ 0x28
 8029b0c:	bfb8      	it	lt
 8029b0e:	425b      	neglt	r3, r3
 8029b10:	f88d 0004 	strb.w	r0, [sp, #4]
 8029b14:	f8ad 1008 	strh.w	r1, [sp, #8]
 8029b18:	b21b      	sxth	r3, r3
 8029b1a:	f8ad 800a 	strh.w	r8, [sp, #10]
 8029b1e:	f8ad 500c 	strh.w	r5, [sp, #12]
 8029b22:	4293      	cmp	r3, r2
 8029b24:	dc07      	bgt.n	8029b36 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 8029b26:	1a69      	subs	r1, r5, r1
 8029b28:	b209      	sxth	r1, r1
 8029b2a:	2900      	cmp	r1, #0
 8029b2c:	bfb8      	it	lt
 8029b2e:	4249      	neglt	r1, r1
 8029b30:	b209      	sxth	r1, r1
 8029b32:	428a      	cmp	r2, r1
 8029b34:	da10      	bge.n	8029b58 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 8029b36:	6920      	ldr	r0, [r4, #16]
 8029b38:	4669      	mov	r1, sp
 8029b3a:	eba8 0606 	sub.w	r6, r8, r6
 8029b3e:	1bef      	subs	r7, r5, r7
 8029b40:	6803      	ldr	r3, [r0, #0]
 8029b42:	685b      	ldr	r3, [r3, #4]
 8029b44:	4798      	blx	r3
 8029b46:	2300      	movs	r3, #0
 8029b48:	2001      	movs	r0, #1
 8029b4a:	8166      	strh	r6, [r4, #10]
 8029b4c:	8123      	strh	r3, [r4, #8]
 8029b4e:	81a7      	strh	r7, [r4, #12]
 8029b50:	f8a4 8004 	strh.w	r8, [r4, #4]
 8029b54:	80e5      	strh	r5, [r4, #6]
 8029b56:	73a0      	strb	r0, [r4, #14]
 8029b58:	b004      	add	sp, #16
 8029b5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8029b5e:	bf00      	nop
 8029b60:	080427fc 	.word	0x080427fc

08029b64 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8029b64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8029b66:	461e      	mov	r6, r3
 8029b68:	1e4b      	subs	r3, r1, #1
 8029b6a:	b085      	sub	sp, #20
 8029b6c:	4604      	mov	r4, r0
 8029b6e:	2b01      	cmp	r3, #1
 8029b70:	460d      	mov	r5, r1
 8029b72:	4617      	mov	r7, r2
 8029b74:	d84b      	bhi.n	8029c0e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8029b76:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8029b7a:	1cd3      	adds	r3, r2, #3
 8029b7c:	b29b      	uxth	r3, r3
 8029b7e:	2b06      	cmp	r3, #6
 8029b80:	d916      	bls.n	8029bb0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8029b82:	f8df c0a0 	ldr.w	ip, [pc, #160]	@ 8029c24 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8029b86:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8029b8a:	f8cd c004 	str.w	ip, [sp, #4]
 8029b8e:	f04f 0c00 	mov.w	ip, #0
 8029b92:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8029b96:	6900      	ldr	r0, [r0, #16]
 8029b98:	f8ad 100c 	strh.w	r1, [sp, #12]
 8029b9c:	a901      	add	r1, sp, #4
 8029b9e:	f88d c008 	strb.w	ip, [sp, #8]
 8029ba2:	f8ad 200a 	strh.w	r2, [sp, #10]
 8029ba6:	f8ad 300e 	strh.w	r3, [sp, #14]
 8029baa:	6803      	ldr	r3, [r0, #0]
 8029bac:	689b      	ldr	r3, [r3, #8]
 8029bae:	4798      	blx	r3
 8029bb0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8029bb4:	1cd3      	adds	r3, r2, #3
 8029bb6:	b29b      	uxth	r3, r3
 8029bb8:	2b06      	cmp	r3, #6
 8029bba:	d916      	bls.n	8029bea <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8029bbc:	f8df c064 	ldr.w	ip, [pc, #100]	@ 8029c24 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8029bc0:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8029bc4:	f8cd c004 	str.w	ip, [sp, #4]
 8029bc8:	f04f 0c01 	mov.w	ip, #1
 8029bcc:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8029bd0:	6920      	ldr	r0, [r4, #16]
 8029bd2:	f8ad 100c 	strh.w	r1, [sp, #12]
 8029bd6:	a901      	add	r1, sp, #4
 8029bd8:	f88d c008 	strb.w	ip, [sp, #8]
 8029bdc:	f8ad 200a 	strh.w	r2, [sp, #10]
 8029be0:	f8ad 300e 	strh.w	r3, [sp, #14]
 8029be4:	6803      	ldr	r3, [r0, #0]
 8029be6:	689b      	ldr	r3, [r3, #8]
 8029be8:	4798      	blx	r3
 8029bea:	4b0d      	ldr	r3, [pc, #52]	@ (8029c20 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8029bec:	a901      	add	r1, sp, #4
 8029bee:	6920      	ldr	r0, [r4, #16]
 8029bf0:	9301      	str	r3, [sp, #4]
 8029bf2:	2300      	movs	r3, #0
 8029bf4:	f88d 5008 	strb.w	r5, [sp, #8]
 8029bf8:	f8ad 700a 	strh.w	r7, [sp, #10]
 8029bfc:	f8ad 600c 	strh.w	r6, [sp, #12]
 8029c00:	f8ad 300e 	strh.w	r3, [sp, #14]
 8029c04:	6803      	ldr	r3, [r0, #0]
 8029c06:	681b      	ldr	r3, [r3, #0]
 8029c08:	4798      	blx	r3
 8029c0a:	b005      	add	sp, #20
 8029c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8029c0e:	2900      	cmp	r1, #0
 8029c10:	d1eb      	bne.n	8029bea <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8029c12:	80a2      	strh	r2, [r4, #4]
 8029c14:	80c6      	strh	r6, [r0, #6]
 8029c16:	60a1      	str	r1, [r4, #8]
 8029c18:	81a1      	strh	r1, [r4, #12]
 8029c1a:	73a1      	strb	r1, [r4, #14]
 8029c1c:	e7e5      	b.n	8029bea <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8029c1e:	bf00      	nop
 8029c20:	080427e8 	.word	0x080427e8
 8029c24:	08042810 	.word	0x08042810

08029c28 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>:
 8029c28:	10c9      	asrs	r1, r1, #3
 8029c2a:	2900      	cmp	r1, #0
 8029c2c:	bfb8      	it	lt
 8029c2e:	4249      	neglt	r1, r1
 8029c30:	2801      	cmp	r0, #1
 8029c32:	d108      	bne.n	8029c46 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5+0x1e>
 8029c34:	f3c1 0008 	ubfx	r0, r1, #0, #9
 8029c38:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8029c3c:	4601      	mov	r1, r0
 8029c3e:	dd02      	ble.n	8029c46 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5+0x1e>
 8029c40:	f5c0 7000 	rsb	r0, r0, #512	@ 0x200
 8029c44:	4770      	bx	lr
 8029c46:	29ff      	cmp	r1, #255	@ 0xff
 8029c48:	bfa8      	it	ge
 8029c4a:	21ff      	movge	r1, #255	@ 0xff
 8029c4c:	4608      	mov	r0, r1
 8029c4e:	4770      	bx	lr

08029c50 <_ZN8touchgfx10Rasterizer6lineToEii>:
 8029c50:	b410      	push	{r4}
 8029c52:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8029c56:	429c      	cmp	r4, r3
 8029c58:	d803      	bhi.n	8029c62 <_ZN8touchgfx10Rasterizer6lineToEii+0x12>
 8029c5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8029c5e:	f7ec be13 	b.w	8016888 <_ZN8touchgfx7Outline6lineToEii>
 8029c62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8029c66:	4770      	bx	lr

08029c68 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>:
 8029c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029c6c:	b08b      	sub	sp, #44	@ 0x2c
 8029c6e:	4606      	mov	r6, r0
 8029c70:	468a      	mov	sl, r1
 8029c72:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8029c76:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8029c7a:	9308      	str	r3, [sp, #32]
 8029c7c:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 8029c80:	9309      	str	r3, [sp, #36]	@ 0x24
 8029c82:	f7ec ff6c 	bl	8016b5e <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>
 8029c86:	68b5      	ldr	r5, [r6, #8]
 8029c88:	4604      	mov	r4, r0
 8029c8a:	2d00      	cmp	r5, #0
 8029c8c:	d044      	beq.n	8029d18 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 8029c8e:	6873      	ldr	r3, [r6, #4]
 8029c90:	42ab      	cmp	r3, r5
 8029c92:	d33d      	bcc.n	8029d10 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa8>
 8029c94:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8029c98:	f04f 0800 	mov.w	r8, #0
 8029c9c:	f9b6 2034 	ldrsh.w	r2, [r6, #52]	@ 0x34
 8029ca0:	eb02 0b03 	add.w	fp, r2, r3
 8029ca4:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8029ca8:	fb02 1203 	mla	r2, r2, r3, r1
 8029cac:	9205      	str	r2, [sp, #20]
 8029cae:	1e6a      	subs	r2, r5, #1
 8029cb0:	9204      	str	r2, [sp, #16]
 8029cb2:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
 8029cb6:	f9b4 7000 	ldrsh.w	r7, [r4]
 8029cba:	454b      	cmp	r3, r9
 8029cbc:	463a      	mov	r2, r7
 8029cbe:	d008      	beq.n	8029cd2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x6a>
 8029cc0:	f9b6 3034 	ldrsh.w	r3, [r6, #52]	@ 0x34
 8029cc4:	eb03 0b09 	add.w	fp, r3, r9
 8029cc8:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
 8029ccc:	fb03 1309 	mla	r3, r3, r9, r1
 8029cd0:	9305      	str	r3, [sp, #20]
 8029cd2:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8029cd6:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8029cda:	4498      	add	r8, r3
 8029cdc:	9b04      	ldr	r3, [sp, #16]
 8029cde:	3b01      	subs	r3, #1
 8029ce0:	9304      	str	r3, [sp, #16]
 8029ce2:	9b04      	ldr	r3, [sp, #16]
 8029ce4:	3301      	adds	r3, #1
 8029ce6:	d015      	beq.n	8029d14 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xac>
 8029ce8:	f934 3f08 	ldrsh.w	r3, [r4, #8]!
 8029cec:	42bb      	cmp	r3, r7
 8029cee:	d117      	bne.n	8029d20 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb8>
 8029cf0:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 8029cf4:	9b04      	ldr	r3, [sp, #16]
 8029cf6:	4548      	cmp	r0, r9
 8029cf8:	f103 33ff 	add.w	r3, r3, #4294967295
 8029cfc:	d17d      	bne.n	8029dfa <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x192>
 8029cfe:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 8029d02:	4401      	add	r1, r0
 8029d04:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8029d08:	4480      	add	r8, r0
 8029d0a:	e7e9      	b.n	8029ce0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x78>
 8029d0c:	461f      	mov	r7, r3
 8029d0e:	e042      	b.n	8029d96 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x12e>
 8029d10:	2000      	movs	r0, #0
 8029d12:	e002      	b.n	8029d1a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb2>
 8029d14:	2900      	cmp	r1, #0
 8029d16:	d16d      	bne.n	8029df4 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 8029d18:	2001      	movs	r0, #1
 8029d1a:	b00b      	add	sp, #44	@ 0x2c
 8029d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029d20:	b379      	cbz	r1, 8029d82 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x11a>
 8029d22:	2f00      	cmp	r7, #0
 8029d24:	db29      	blt.n	8029d7a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 8029d26:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	@ 0x36
 8029d2a:	42bb      	cmp	r3, r7
 8029d2c:	dd25      	ble.n	8029d7a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 8029d2e:	ebc1 1188 	rsb	r1, r1, r8, lsl #6
 8029d32:	f896 0030 	ldrb.w	r0, [r6, #48]	@ 0x30
 8029d36:	f7ff ff77 	bl	8029c28 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>
 8029d3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029d3c:	fb10 f003 	smulbb	r0, r0, r3
 8029d40:	b280      	uxth	r0, r0
 8029d42:	1c41      	adds	r1, r0, #1
 8029d44:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8029d48:	1209      	asrs	r1, r1, #8
 8029d4a:	f011 0fff 	tst.w	r1, #255	@ 0xff
 8029d4e:	d014      	beq.n	8029d7a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 8029d50:	b2c9      	uxtb	r1, r1
 8029d52:	9808      	ldr	r0, [sp, #32]
 8029d54:	b2ba      	uxth	r2, r7
 8029d56:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 8029d58:	9102      	str	r1, [sp, #8]
 8029d5a:	2101      	movs	r1, #1
 8029d5c:	4413      	add	r3, r2
 8029d5e:	4402      	add	r2, r0
 8029d60:	9101      	str	r1, [sp, #4]
 8029d62:	fa0f f18b 	sxth.w	r1, fp
 8029d66:	f8da 0000 	ldr.w	r0, [sl]
 8029d6a:	b21b      	sxth	r3, r3
 8029d6c:	9100      	str	r1, [sp, #0]
 8029d6e:	b212      	sxth	r2, r2
 8029d70:	6941      	ldr	r1, [r0, #20]
 8029d72:	4650      	mov	r0, sl
 8029d74:	460d      	mov	r5, r1
 8029d76:	9905      	ldr	r1, [sp, #20]
 8029d78:	47a8      	blx	r5
 8029d7a:	9b04      	ldr	r3, [sp, #16]
 8029d7c:	1c7a      	adds	r2, r7, #1
 8029d7e:	3301      	adds	r3, #1
 8029d80:	d0ca      	beq.n	8029d18 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 8029d82:	f9b4 7000 	ldrsh.w	r7, [r4]
 8029d86:	1abb      	subs	r3, r7, r2
 8029d88:	2b00      	cmp	r3, #0
 8029d8a:	dd31      	ble.n	8029df0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8029d8c:	2a00      	cmp	r2, #0
 8029d8e:	dabd      	bge.n	8029d0c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa4>
 8029d90:	2f00      	cmp	r7, #0
 8029d92:	dd2d      	ble.n	8029df0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8029d94:	2200      	movs	r2, #0
 8029d96:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	@ 0x36
 8029d9a:	19d1      	adds	r1, r2, r7
 8029d9c:	4299      	cmp	r1, r3
 8029d9e:	db02      	blt.n	8029da6 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x13e>
 8029da0:	1a9f      	subs	r7, r3, r2
 8029da2:	2f00      	cmp	r7, #0
 8029da4:	dd24      	ble.n	8029df0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8029da6:	ea4f 1188 	mov.w	r1, r8, lsl #6
 8029daa:	f896 0030 	ldrb.w	r0, [r6, #48]	@ 0x30
 8029dae:	f7ff ff3b 	bl	8029c28 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>
 8029db2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029db4:	fb10 f003 	smulbb	r0, r0, r3
 8029db8:	b280      	uxth	r0, r0
 8029dba:	1c41      	adds	r1, r0, #1
 8029dbc:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8029dc0:	1209      	asrs	r1, r1, #8
 8029dc2:	f011 0fff 	tst.w	r1, #255	@ 0xff
 8029dc6:	d013      	beq.n	8029df0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8029dc8:	b292      	uxth	r2, r2
 8029dca:	9808      	ldr	r0, [sp, #32]
 8029dcc:	b2c9      	uxtb	r1, r1
 8029dce:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 8029dd0:	b23f      	sxth	r7, r7
 8029dd2:	4413      	add	r3, r2
 8029dd4:	9102      	str	r1, [sp, #8]
 8029dd6:	4402      	add	r2, r0
 8029dd8:	fa0f f18b 	sxth.w	r1, fp
 8029ddc:	f8da 0000 	ldr.w	r0, [sl]
 8029de0:	b21b      	sxth	r3, r3
 8029de2:	9100      	str	r1, [sp, #0]
 8029de4:	b212      	sxth	r2, r2
 8029de6:	9701      	str	r7, [sp, #4]
 8029de8:	9905      	ldr	r1, [sp, #20]
 8029dea:	6947      	ldr	r7, [r0, #20]
 8029dec:	4650      	mov	r0, sl
 8029dee:	47b8      	blx	r7
 8029df0:	464b      	mov	r3, r9
 8029df2:	e75e      	b.n	8029cb2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x4a>
 8029df4:	2f00      	cmp	r7, #0
 8029df6:	da96      	bge.n	8029d26 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xbe>
 8029df8:	e78e      	b.n	8029d18 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 8029dfa:	2900      	cmp	r1, #0
 8029dfc:	d0f8      	beq.n	8029df0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8029dfe:	e790      	b.n	8029d22 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xba>

08029e00 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:
 8029e00:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8029e04:	4b4a      	ldr	r3, [pc, #296]	@ (8029f30 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x130>)
 8029e06:	2500      	movs	r5, #0
 8029e08:	f100 0620 	add.w	r6, r0, #32
 8029e0c:	4604      	mov	r4, r0
 8029e0e:	4690      	mov	r8, r2
 8029e10:	f100 0718 	add.w	r7, r0, #24
 8029e14:	e9c0 3100 	strd	r3, r1, [r0]
 8029e18:	e9c0 5502 	strd	r5, r5, [r0, #8]
 8029e1c:	e9c0 5504 	strd	r5, r5, [r0, #16]
 8029e20:	e9c0 5506 	strd	r5, r5, [r0, #24]
 8029e24:	4630      	mov	r0, r6
 8029e26:	f7ec f875 	bl	8015f14 <_ZN8touchgfx7OutlineC1Ev>
 8029e2a:	f884 5050 	strb.w	r5, [r4, #80]	@ 0x50
 8029e2e:	f8a4 5052 	strh.w	r5, [r4, #82]	@ 0x52
 8029e32:	f8a4 5054 	strh.w	r5, [r4, #84]	@ 0x54
 8029e36:	f8a4 5056 	strh.w	r5, [r4, #86]	@ 0x56
 8029e3a:	f884 5058 	strb.w	r5, [r4, #88]	@ 0x58
 8029e3e:	f884 5059 	strb.w	r5, [r4, #89]	@ 0x59
 8029e42:	f8a4 5064 	strh.w	r5, [r4, #100]	@ 0x64
 8029e46:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8029e4a:	9500      	str	r5, [sp, #0]
 8029e4c:	e9c4 5517 	strd	r5, r5, [r4, #92]	@ 0x5c
 8029e50:	e9c4 551a 	strd	r5, r5, [r4, #104]	@ 0x68
 8029e54:	f9b8 2000 	ldrsh.w	r2, [r8]
 8029e58:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 8029e5c:	f9bc 9008 	ldrsh.w	r9, [ip, #8]
 8029e60:	4410      	add	r0, r2
 8029e62:	f9bc e00a 	ldrsh.w	lr, [ip, #10]
 8029e66:	b280      	uxth	r0, r0
 8029e68:	fa0f fa80 	sxth.w	sl, r0
 8029e6c:	45aa      	cmp	sl, r5
 8029e6e:	dd5c      	ble.n	8029f2a <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12a>
 8029e70:	4591      	cmp	r9, r2
 8029e72:	dd5a      	ble.n	8029f2a <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12a>
 8029e74:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 8029e78:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8029e7c:	440b      	add	r3, r1
 8029e7e:	b29b      	uxth	r3, r3
 8029e80:	b21d      	sxth	r5, r3
 8029e82:	2d00      	cmp	r5, #0
 8029e84:	dd51      	ble.n	8029f2a <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12a>
 8029e86:	458e      	cmp	lr, r1
 8029e88:	dd4f      	ble.n	8029f2a <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12a>
 8029e8a:	45d1      	cmp	r9, sl
 8029e8c:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8029e90:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8029e94:	bfb8      	it	lt
 8029e96:	fa1f f089 	uxthlt.w	r0, r9
 8029e9a:	45ae      	cmp	lr, r5
 8029e9c:	f8ad 2000 	strh.w	r2, [sp]
 8029ea0:	bfb8      	it	lt
 8029ea2:	fa1f f38e 	uxthlt.w	r3, lr
 8029ea6:	1a80      	subs	r0, r0, r2
 8029ea8:	f8ad 1002 	strh.w	r1, [sp, #2]
 8029eac:	1a5b      	subs	r3, r3, r1
 8029eae:	f8ad 0004 	strh.w	r0, [sp, #4]
 8029eb2:	f8ad 3006 	strh.w	r3, [sp, #6]
 8029eb6:	466d      	mov	r5, sp
 8029eb8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8029ebc:	e887 0003 	stmia.w	r7, {r0, r1}
 8029ec0:	f8dc 3000 	ldr.w	r3, [ip]
 8029ec4:	4660      	mov	r0, ip
 8029ec6:	4639      	mov	r1, r7
 8029ec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8029eca:	4798      	blx	r3
 8029ecc:	6861      	ldr	r1, [r4, #4]
 8029ece:	4628      	mov	r0, r5
 8029ed0:	3104      	adds	r1, #4
 8029ed2:	f7ee fdeb 	bl	8018aac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8029ed6:	4638      	mov	r0, r7
 8029ed8:	f7ee fdc0 	bl	8018a5c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8029edc:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8029ee0:	f8bd 2000 	ldrh.w	r2, [sp]
 8029ee4:	4630      	mov	r0, r6
 8029ee6:	f8a4 3054 	strh.w	r3, [r4, #84]	@ 0x54
 8029eea:	f8a4 2052 	strh.w	r2, [r4, #82]	@ 0x52
 8029eee:	f7eb fff5 	bl	8015edc <_ZN8touchgfx7Outline5resetEv>
 8029ef2:	f9bd 3000 	ldrsh.w	r3, [sp]
 8029ef6:	f9b4 201e 	ldrsh.w	r2, [r4, #30]
 8029efa:	4620      	mov	r0, r4
 8029efc:	015b      	lsls	r3, r3, #5
 8029efe:	60a3      	str	r3, [r4, #8]
 8029f00:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8029f04:	015b      	lsls	r3, r3, #5
 8029f06:	60e3      	str	r3, [r4, #12]
 8029f08:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8029f0c:	015b      	lsls	r3, r3, #5
 8029f0e:	6123      	str	r3, [r4, #16]
 8029f10:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8029f14:	015b      	lsls	r3, r3, #5
 8029f16:	6163      	str	r3, [r4, #20]
 8029f18:	f9b4 301c 	ldrsh.w	r3, [r4, #28]
 8029f1c:	f8a4 3056 	strh.w	r3, [r4, #86]	@ 0x56
 8029f20:	e9c4 3212 	strd	r3, r2, [r4, #72]	@ 0x48
 8029f24:	b002      	add	sp, #8
 8029f26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8029f2a:	2300      	movs	r3, #0
 8029f2c:	9301      	str	r3, [sp, #4]
 8029f2e:	e7c2      	b.n	8029eb6 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xb6>
 8029f30:	08042b34 	.word	0x08042b34

08029f34 <_ZN8touchgfx6Canvas5closeEv>:
 8029f34:	b538      	push	{r3, r4, r5, lr}
 8029f36:	f890 3058 	ldrb.w	r3, [r0, #88]	@ 0x58
 8029f3a:	4604      	mov	r4, r0
 8029f3c:	b193      	cbz	r3, 8029f64 <_ZN8touchgfx6Canvas5closeEv+0x30>
 8029f3e:	f890 3064 	ldrb.w	r3, [r0, #100]	@ 0x64
 8029f42:	f890 2065 	ldrb.w	r2, [r0, #101]	@ 0x65
 8029f46:	4213      	tst	r3, r2
 8029f48:	d10c      	bne.n	8029f64 <_ZN8touchgfx6Canvas5closeEv+0x30>
 8029f4a:	f100 0520 	add.w	r5, r0, #32
 8029f4e:	b123      	cbz	r3, 8029f5a <_ZN8touchgfx6Canvas5closeEv+0x26>
 8029f50:	e9d0 1217 	ldrd	r1, r2, [r0, #92]	@ 0x5c
 8029f54:	4628      	mov	r0, r5
 8029f56:	f7ff fe7b 	bl	8029c50 <_ZN8touchgfx10Rasterizer6lineToEii>
 8029f5a:	4628      	mov	r0, r5
 8029f5c:	e9d4 121a 	ldrd	r1, r2, [r4, #104]	@ 0x68
 8029f60:	f7ff fe76 	bl	8029c50 <_ZN8touchgfx10Rasterizer6lineToEii>
 8029f64:	2300      	movs	r3, #0
 8029f66:	f884 3058 	strb.w	r3, [r4, #88]	@ 0x58
 8029f6a:	e9d4 0309 	ldrd	r0, r3, [r4, #36]	@ 0x24
 8029f6e:	4298      	cmp	r0, r3
 8029f70:	bf34      	ite	cc
 8029f72:	2000      	movcc	r0, #0
 8029f74:	2001      	movcs	r0, #1
 8029f76:	bd38      	pop	{r3, r4, r5, pc}

08029f78 <_ZN8touchgfx6Canvas6renderEh>:
 8029f78:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8029f7c:	4604      	mov	r4, r0
 8029f7e:	6840      	ldr	r0, [r0, #4]
 8029f80:	460d      	mov	r5, r1
 8029f82:	6803      	ldr	r3, [r0, #0]
 8029f84:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8029f86:	4798      	blx	r3
 8029f88:	fb10 f105 	smulbb	r1, r0, r5
 8029f8c:	b289      	uxth	r1, r1
 8029f8e:	1c4d      	adds	r5, r1, #1
 8029f90:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 8029f94:	122d      	asrs	r5, r5, #8
 8029f96:	f000 809c 	beq.w	802a0d2 <_ZN8touchgfx6Canvas6renderEh+0x15a>
 8029f9a:	f894 3059 	ldrb.w	r3, [r4, #89]	@ 0x59
 8029f9e:	2b00      	cmp	r3, #0
 8029fa0:	f000 8097 	beq.w	802a0d2 <_ZN8touchgfx6Canvas6renderEh+0x15a>
 8029fa4:	4620      	mov	r0, r4
 8029fa6:	f7ff ffc5 	bl	8029f34 <_ZN8touchgfx6Canvas5closeEv>
 8029faa:	4607      	mov	r7, r0
 8029fac:	2800      	cmp	r0, #0
 8029fae:	d048      	beq.n	802a042 <_ZN8touchgfx6Canvas6renderEh+0xca>
 8029fb0:	6863      	ldr	r3, [r4, #4]
 8029fb2:	4e49      	ldr	r6, [pc, #292]	@ (802a0d8 <_ZN8touchgfx6Canvas6renderEh+0x160>)
 8029fb4:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8029fb6:	6837      	ldr	r7, [r6, #0]
 8029fb8:	6803      	ldr	r3, [r0, #0]
 8029fba:	689b      	ldr	r3, [r3, #8]
 8029fbc:	4798      	blx	r3
 8029fbe:	4601      	mov	r1, r0
 8029fc0:	4638      	mov	r0, r7
 8029fc2:	f7e9 fa6d 	bl	80134a0 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>
 8029fc6:	4607      	mov	r7, r0
 8029fc8:	f7da fabe 	bl	8004548 <_ZN8touchgfx3HAL3lcdEv>
 8029fcc:	6803      	ldr	r3, [r0, #0]
 8029fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8029fd0:	4798      	blx	r3
 8029fd2:	4680      	mov	r8, r0
 8029fd4:	f7da fab8 	bl	8004548 <_ZN8touchgfx3HAL3lcdEv>
 8029fd8:	6803      	ldr	r3, [r0, #0]
 8029fda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8029fdc:	4798      	blx	r3
 8029fde:	280b      	cmp	r0, #11
 8029fe0:	d85c      	bhi.n	802a09c <_ZN8touchgfx6Canvas6renderEh+0x124>
 8029fe2:	e8df f000 	tbb	[pc, r0]
 8029fe6:	5d52      	.short	0x5d52
 8029fe8:	325b066d 	.word	0x325b066d
 8029fec:	66666642 	.word	0x66666642
 8029ff0:	6666      	.short	0x6666
 8029ff2:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 8029ff6:	2208      	movs	r2, #8
 8029ff8:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8029ffc:	fb91 f2f2 	sdiv	r2, r1, r2
 802a000:	fb08 2303 	mla	r3, r8, r3, r2
 802a004:	441f      	add	r7, r3
 802a006:	424b      	negs	r3, r1
 802a008:	f001 0107 	and.w	r1, r1, #7
 802a00c:	f003 0307 	and.w	r3, r3, #7
 802a010:	bf58      	it	pl
 802a012:	4259      	negpl	r1, r3
 802a014:	b2c9      	uxtb	r1, r1
 802a016:	6860      	ldr	r0, [r4, #4]
 802a018:	b2ed      	uxtb	r5, r5
 802a01a:	463a      	mov	r2, r7
 802a01c:	fa0f f388 	sxth.w	r3, r8
 802a020:	e9cd 1500 	strd	r1, r5, [sp]
 802a024:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 802a026:	f104 0020 	add.w	r0, r4, #32
 802a02a:	f7ff fe1d 	bl	8029c68 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>
 802a02e:	6863      	ldr	r3, [r4, #4]
 802a030:	4607      	mov	r7, r0
 802a032:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 802a034:	6803      	ldr	r3, [r0, #0]
 802a036:	691b      	ldr	r3, [r3, #16]
 802a038:	4798      	blx	r3
 802a03a:	6830      	ldr	r0, [r6, #0]
 802a03c:	6803      	ldr	r3, [r0, #0]
 802a03e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802a040:	4798      	blx	r3
 802a042:	4638      	mov	r0, r7
 802a044:	b002      	add	sp, #8
 802a046:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802a04a:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 802a04e:	2204      	movs	r2, #4
 802a050:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 802a054:	fb91 f2f2 	sdiv	r2, r1, r2
 802a058:	fb08 2303 	mla	r3, r8, r3, r2
 802a05c:	441f      	add	r7, r3
 802a05e:	424b      	negs	r3, r1
 802a060:	f001 0103 	and.w	r1, r1, #3
 802a064:	f003 0303 	and.w	r3, r3, #3
 802a068:	e7d2      	b.n	802a010 <_ZN8touchgfx6Canvas6renderEh+0x98>
 802a06a:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 802a06e:	2202      	movs	r2, #2
 802a070:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 802a074:	2900      	cmp	r1, #0
 802a076:	fb91 f2f2 	sdiv	r2, r1, r2
 802a07a:	f001 0101 	and.w	r1, r1, #1
 802a07e:	fb08 2303 	mla	r3, r8, r3, r2
 802a082:	bfb8      	it	lt
 802a084:	4249      	neglt	r1, r1
 802a086:	441f      	add	r7, r3
 802a088:	e7c4      	b.n	802a014 <_ZN8touchgfx6Canvas6renderEh+0x9c>
 802a08a:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 802a08e:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 802a092:	fb08 f303 	mul.w	r3, r8, r3
 802a096:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 802a09a:	441f      	add	r7, r3
 802a09c:	2100      	movs	r1, #0
 802a09e:	e7ba      	b.n	802a016 <_ZN8touchgfx6Canvas6renderEh+0x9e>
 802a0a0:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 802a0a4:	2103      	movs	r1, #3
 802a0a6:	fb08 f203 	mul.w	r2, r8, r3
 802a0aa:	8b23      	ldrh	r3, [r4, #24]
 802a0ac:	fb13 2301 	smlabb	r3, r3, r1, r2
 802a0b0:	e7f3      	b.n	802a09a <_ZN8touchgfx6Canvas6renderEh+0x122>
 802a0b2:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 802a0b6:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 802a0ba:	fb08 2303 	mla	r3, r8, r3, r2
 802a0be:	e7ec      	b.n	802a09a <_ZN8touchgfx6Canvas6renderEh+0x122>
 802a0c0:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 802a0c4:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 802a0c8:	fb08 f303 	mul.w	r3, r8, r3
 802a0cc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 802a0d0:	e7e3      	b.n	802a09a <_ZN8touchgfx6Canvas6renderEh+0x122>
 802a0d2:	2701      	movs	r7, #1
 802a0d4:	e7b5      	b.n	802a042 <_ZN8touchgfx6Canvas6renderEh+0xca>
 802a0d6:	bf00      	nop
 802a0d8:	20029ed8 	.word	0x20029ed8

0802a0dc <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 802a0dc:	4b07      	ldr	r3, [pc, #28]	@ (802a0fc <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x20>)
 802a0de:	b510      	push	{r4, lr}
 802a0e0:	781b      	ldrb	r3, [r3, #0]
 802a0e2:	2b01      	cmp	r3, #1
 802a0e4:	d108      	bne.n	802a0f8 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>
 802a0e6:	6843      	ldr	r3, [r0, #4]
 802a0e8:	6814      	ldr	r4, [r2, #0]
 802a0ea:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 802a0ee:	680b      	ldr	r3, [r1, #0]
 802a0f0:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 802a0f4:	6013      	str	r3, [r2, #0]
 802a0f6:	600c      	str	r4, [r1, #0]
 802a0f8:	bd10      	pop	{r4, pc}
 802a0fa:	bf00      	nop
 802a0fc:	20029ed0 	.word	0x20029ed0

0802a100 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 802a100:	b513      	push	{r0, r1, r4, lr}
 802a102:	f890 3058 	ldrb.w	r3, [r0, #88]	@ 0x58
 802a106:	4604      	mov	r4, r0
 802a108:	e9cd 2100 	strd	r2, r1, [sp]
 802a10c:	b9a3      	cbnz	r3, 802a138 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x38>
 802a10e:	466a      	mov	r2, sp
 802a110:	a901      	add	r1, sp, #4
 802a112:	4620      	mov	r0, r4
 802a114:	f7ff ffe2 	bl	802a0dc <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 802a118:	68a3      	ldr	r3, [r4, #8]
 802a11a:	9901      	ldr	r1, [sp, #4]
 802a11c:	9a00      	ldr	r2, [sp, #0]
 802a11e:	1ac9      	subs	r1, r1, r3
 802a120:	68e3      	ldr	r3, [r4, #12]
 802a122:	1ad2      	subs	r2, r2, r3
 802a124:	9101      	str	r1, [sp, #4]
 802a126:	2a00      	cmp	r2, #0
 802a128:	9200      	str	r2, [sp, #0]
 802a12a:	da0b      	bge.n	802a144 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x44>
 802a12c:	2301      	movs	r3, #1
 802a12e:	2900      	cmp	r1, #0
 802a130:	da0e      	bge.n	802a150 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x50>
 802a132:	f043 0304 	orr.w	r3, r3, #4
 802a136:	e013      	b.n	802a160 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x60>
 802a138:	f7ff fefc 	bl	8029f34 <_ZN8touchgfx6Canvas5closeEv>
 802a13c:	2800      	cmp	r0, #0
 802a13e:	d1e6      	bne.n	802a10e <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0xe>
 802a140:	b002      	add	sp, #8
 802a142:	bd10      	pop	{r4, pc}
 802a144:	6963      	ldr	r3, [r4, #20]
 802a146:	429a      	cmp	r2, r3
 802a148:	bfac      	ite	ge
 802a14a:	2302      	movge	r3, #2
 802a14c:	2300      	movlt	r3, #0
 802a14e:	e7ee      	b.n	802a12e <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x2e>
 802a150:	6920      	ldr	r0, [r4, #16]
 802a152:	4281      	cmp	r1, r0
 802a154:	bfac      	ite	ge
 802a156:	2008      	movge	r0, #8
 802a158:	2000      	movlt	r0, #0
 802a15a:	4318      	orrs	r0, r3
 802a15c:	b2c3      	uxtb	r3, r0
 802a15e:	b158      	cbz	r0, 802a178 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x78>
 802a160:	2200      	movs	r2, #0
 802a162:	f884 2058 	strb.w	r2, [r4, #88]	@ 0x58
 802a166:	9901      	ldr	r1, [sp, #4]
 802a168:	9a00      	ldr	r2, [sp, #0]
 802a16a:	66a1      	str	r1, [r4, #104]	@ 0x68
 802a16c:	66e2      	str	r2, [r4, #108]	@ 0x6c
 802a16e:	f884 3064 	strb.w	r3, [r4, #100]	@ 0x64
 802a172:	e9c4 1217 	strd	r1, r2, [r4, #92]	@ 0x5c
 802a176:	e7e3      	b.n	802a140 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x40>
 802a178:	f884 0065 	strb.w	r0, [r4, #101]	@ 0x65
 802a17c:	e9d4 3009 	ldrd	r3, r0, [r4, #36]	@ 0x24
 802a180:	4298      	cmp	r0, r3
 802a182:	d803      	bhi.n	802a18c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x8c>
 802a184:	f104 0020 	add.w	r0, r4, #32
 802a188:	f7ec fb98 	bl	80168bc <_ZN8touchgfx7Outline6moveToEii>
 802a18c:	2301      	movs	r3, #1
 802a18e:	f884 3058 	strb.w	r3, [r4, #88]	@ 0x58
 802a192:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 802a196:	2300      	movs	r3, #0
 802a198:	e7e5      	b.n	802a166 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>

0802a19a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 802a19a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802a19c:	ab02      	add	r3, sp, #8
 802a19e:	4604      	mov	r4, r0
 802a1a0:	9101      	str	r1, [sp, #4]
 802a1a2:	a901      	add	r1, sp, #4
 802a1a4:	f843 2d08 	str.w	r2, [r3, #-8]!
 802a1a8:	461a      	mov	r2, r3
 802a1aa:	f7ff ff97 	bl	802a0dc <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 802a1ae:	68a3      	ldr	r3, [r4, #8]
 802a1b0:	9901      	ldr	r1, [sp, #4]
 802a1b2:	9a00      	ldr	r2, [sp, #0]
 802a1b4:	1ac9      	subs	r1, r1, r3
 802a1b6:	68e3      	ldr	r3, [r4, #12]
 802a1b8:	1ad2      	subs	r2, r2, r3
 802a1ba:	9101      	str	r1, [sp, #4]
 802a1bc:	2a00      	cmp	r2, #0
 802a1be:	9200      	str	r2, [sp, #0]
 802a1c0:	db1c      	blt.n	802a1fc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x62>
 802a1c2:	6963      	ldr	r3, [r4, #20]
 802a1c4:	429a      	cmp	r2, r3
 802a1c6:	bfac      	ite	ge
 802a1c8:	2002      	movge	r0, #2
 802a1ca:	2000      	movlt	r0, #0
 802a1cc:	2900      	cmp	r1, #0
 802a1ce:	db17      	blt.n	802a200 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x66>
 802a1d0:	6923      	ldr	r3, [r4, #16]
 802a1d2:	4299      	cmp	r1, r3
 802a1d4:	bfac      	ite	ge
 802a1d6:	2308      	movge	r3, #8
 802a1d8:	2300      	movlt	r3, #0
 802a1da:	4303      	orrs	r3, r0
 802a1dc:	f894 0064 	ldrb.w	r0, [r4, #100]	@ 0x64
 802a1e0:	b2dd      	uxtb	r5, r3
 802a1e2:	b978      	cbnz	r0, 802a204 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6a>
 802a1e4:	f104 0020 	add.w	r0, r4, #32
 802a1e8:	f7ff fd32 	bl	8029c50 <_ZN8touchgfx10Rasterizer6lineToEii>
 802a1ec:	9b01      	ldr	r3, [sp, #4]
 802a1ee:	f884 5064 	strb.w	r5, [r4, #100]	@ 0x64
 802a1f2:	65e3      	str	r3, [r4, #92]	@ 0x5c
 802a1f4:	9b00      	ldr	r3, [sp, #0]
 802a1f6:	6623      	str	r3, [r4, #96]	@ 0x60
 802a1f8:	b002      	add	sp, #8
 802a1fa:	bd70      	pop	{r4, r5, r6, pc}
 802a1fc:	2001      	movs	r0, #1
 802a1fe:	e7e5      	b.n	802a1cc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x32>
 802a200:	2304      	movs	r3, #4
 802a202:	e7ea      	b.n	802a1da <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x40>
 802a204:	b113      	cbz	r3, 802a20c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x72>
 802a206:	ea10 0305 	ands.w	r3, r0, r5
 802a20a:	d11c      	bne.n	802a246 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xac>
 802a20c:	f894 3058 	ldrb.w	r3, [r4, #88]	@ 0x58
 802a210:	f104 0620 	add.w	r6, r4, #32
 802a214:	e9d4 1217 	ldrd	r1, r2, [r4, #92]	@ 0x5c
 802a218:	b98b      	cbnz	r3, 802a23e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa4>
 802a21a:	f884 0065 	strb.w	r0, [r4, #101]	@ 0x65
 802a21e:	e9d4 3009 	ldrd	r3, r0, [r4, #36]	@ 0x24
 802a222:	4298      	cmp	r0, r3
 802a224:	d802      	bhi.n	802a22c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x92>
 802a226:	4630      	mov	r0, r6
 802a228:	f7ec fb48 	bl	80168bc <_ZN8touchgfx7Outline6moveToEii>
 802a22c:	2301      	movs	r3, #1
 802a22e:	f884 3058 	strb.w	r3, [r4, #88]	@ 0x58
 802a232:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 802a236:	4630      	mov	r0, r6
 802a238:	e9dd 2100 	ldrd	r2, r1, [sp]
 802a23c:	e7d4      	b.n	802a1e8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4e>
 802a23e:	4630      	mov	r0, r6
 802a240:	f7ff fd06 	bl	8029c50 <_ZN8touchgfx10Rasterizer6lineToEii>
 802a244:	e7f7      	b.n	802a236 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9c>
 802a246:	461d      	mov	r5, r3
 802a248:	e7d0      	b.n	802a1ec <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x52>
	...

0802a24c <_ZN8touchgfx6CanvasD1Ev>:
 802a24c:	4b04      	ldr	r3, [pc, #16]	@ (802a260 <_ZN8touchgfx6CanvasD1Ev+0x14>)
 802a24e:	b510      	push	{r4, lr}
 802a250:	4604      	mov	r4, r0
 802a252:	f840 3b20 	str.w	r3, [r0], #32
 802a256:	f7eb fe39 	bl	8015ecc <_ZN8touchgfx7OutlineD1Ev>
 802a25a:	4620      	mov	r0, r4
 802a25c:	bd10      	pop	{r4, pc}
 802a25e:	bf00      	nop
 802a260:	08042b34 	.word	0x08042b34

0802a264 <_ZN8touchgfx6CanvasD0Ev>:
 802a264:	b510      	push	{r4, lr}
 802a266:	4604      	mov	r4, r0
 802a268:	f7ff fff0 	bl	802a24c <_ZN8touchgfx6CanvasD1Ev>
 802a26c:	2170      	movs	r1, #112	@ 0x70
 802a26e:	4620      	mov	r0, r4
 802a270:	f000 f826 	bl	802a2c0 <_ZdlPvj>
 802a274:	4620      	mov	r0, r4
 802a276:	bd10      	pop	{r4, pc}

0802a278 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 802a278:	790b      	ldrb	r3, [r1, #4]
 802a27a:	2b00      	cmp	r3, #0
 802a27c:	bf0c      	ite	eq
 802a27e:	2301      	moveq	r3, #1
 802a280:	2300      	movne	r3, #0
 802a282:	b570      	push	{r4, r5, r6, lr}
 802a284:	4604      	mov	r4, r0
 802a286:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 802a28a:	460e      	mov	r6, r1
 802a28c:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
 802a290:	d109      	bne.n	802a2a6 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 802a292:	b14d      	cbz	r5, 802a2a8 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 802a294:	7933      	ldrb	r3, [r6, #4]
 802a296:	2b01      	cmp	r3, #1
 802a298:	d10c      	bne.n	802a2b4 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 802a29a:	6823      	ldr	r3, [r4, #0]
 802a29c:	4620      	mov	r0, r4
 802a29e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 802a2a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802a2a4:	4718      	bx	r3
 802a2a6:	b12d      	cbz	r5, 802a2b4 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 802a2a8:	6823      	ldr	r3, [r4, #0]
 802a2aa:	4620      	mov	r0, r4
 802a2ac:	695b      	ldr	r3, [r3, #20]
 802a2ae:	4798      	blx	r3
 802a2b0:	2d00      	cmp	r5, #0
 802a2b2:	d1ef      	bne.n	802a294 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 802a2b4:	bd70      	pop	{r4, r5, r6, pc}

0802a2b6 <__aeabi_atexit>:
 802a2b6:	460b      	mov	r3, r1
 802a2b8:	4601      	mov	r1, r0
 802a2ba:	4618      	mov	r0, r3
 802a2bc:	f000 ba60 	b.w	802a780 <__cxa_atexit>

0802a2c0 <_ZdlPvj>:
 802a2c0:	f000 b823 	b.w	802a30a <_ZdlPv>

0802a2c4 <__cxa_guard_acquire>:
 802a2c4:	6802      	ldr	r2, [r0, #0]
 802a2c6:	07d2      	lsls	r2, r2, #31
 802a2c8:	4603      	mov	r3, r0
 802a2ca:	d405      	bmi.n	802a2d8 <__cxa_guard_acquire+0x14>
 802a2cc:	7842      	ldrb	r2, [r0, #1]
 802a2ce:	b102      	cbz	r2, 802a2d2 <__cxa_guard_acquire+0xe>
 802a2d0:	deff      	udf	#255	@ 0xff
 802a2d2:	2001      	movs	r0, #1
 802a2d4:	7058      	strb	r0, [r3, #1]
 802a2d6:	4770      	bx	lr
 802a2d8:	2000      	movs	r0, #0
 802a2da:	4770      	bx	lr

0802a2dc <__cxa_guard_release>:
 802a2dc:	2301      	movs	r3, #1
 802a2de:	6003      	str	r3, [r0, #0]
 802a2e0:	4770      	bx	lr

0802a2e2 <_Znwj>:
 802a2e2:	2801      	cmp	r0, #1
 802a2e4:	bf38      	it	cc
 802a2e6:	2001      	movcc	r0, #1
 802a2e8:	b510      	push	{r4, lr}
 802a2ea:	4604      	mov	r4, r0
 802a2ec:	4620      	mov	r0, r4
 802a2ee:	f000 f989 	bl	802a604 <malloc>
 802a2f2:	b100      	cbz	r0, 802a2f6 <_Znwj+0x14>
 802a2f4:	bd10      	pop	{r4, pc}
 802a2f6:	f000 f81d 	bl	802a334 <_ZSt15get_new_handlerv>
 802a2fa:	b908      	cbnz	r0, 802a300 <_Znwj+0x1e>
 802a2fc:	f000 f956 	bl	802a5ac <abort>
 802a300:	4780      	blx	r0
 802a302:	e7f3      	b.n	802a2ec <_Znwj+0xa>

0802a304 <__cxa_pure_virtual>:
 802a304:	b508      	push	{r3, lr}
 802a306:	f000 f80f 	bl	802a328 <_ZSt9terminatev>

0802a30a <_ZdlPv>:
 802a30a:	f000 b983 	b.w	802a614 <free>

0802a30e <_ZN10__cxxabiv111__terminateEPFvvE>:
 802a30e:	b508      	push	{r3, lr}
 802a310:	4780      	blx	r0
 802a312:	f000 f94b 	bl	802a5ac <abort>
	...

0802a318 <_ZSt13get_terminatev>:
 802a318:	4b02      	ldr	r3, [pc, #8]	@ (802a324 <_ZSt13get_terminatev+0xc>)
 802a31a:	6818      	ldr	r0, [r3, #0]
 802a31c:	f3bf 8f5b 	dmb	ish
 802a320:	4770      	bx	lr
 802a322:	bf00      	nop
 802a324:	20007b2c 	.word	0x20007b2c

0802a328 <_ZSt9terminatev>:
 802a328:	b508      	push	{r3, lr}
 802a32a:	f7ff fff5 	bl	802a318 <_ZSt13get_terminatev>
 802a32e:	f7ff ffee 	bl	802a30e <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0802a334 <_ZSt15get_new_handlerv>:
 802a334:	4b02      	ldr	r3, [pc, #8]	@ (802a340 <_ZSt15get_new_handlerv+0xc>)
 802a336:	6818      	ldr	r0, [r3, #0]
 802a338:	f3bf 8f5b 	dmb	ish
 802a33c:	4770      	bx	lr
 802a33e:	bf00      	nop
 802a340:	2002a82c 	.word	0x2002a82c

0802a344 <expf>:
 802a344:	b508      	push	{r3, lr}
 802a346:	ed2d 8b02 	vpush	{d8}
 802a34a:	eef0 8a40 	vmov.f32	s17, s0
 802a34e:	f000 f839 	bl	802a3c4 <__ieee754_expf>
 802a352:	eeb0 8a40 	vmov.f32	s16, s0
 802a356:	eeb0 0a68 	vmov.f32	s0, s17
 802a35a:	f000 f829 	bl	802a3b0 <finitef>
 802a35e:	b160      	cbz	r0, 802a37a <expf+0x36>
 802a360:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 802a3a0 <expf+0x5c>
 802a364:	eef4 8ae7 	vcmpe.f32	s17, s15
 802a368:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a36c:	dd0a      	ble.n	802a384 <expf+0x40>
 802a36e:	f001 f9d3 	bl	802b718 <__errno>
 802a372:	ed9f 8a0c 	vldr	s16, [pc, #48]	@ 802a3a4 <expf+0x60>
 802a376:	2322      	movs	r3, #34	@ 0x22
 802a378:	6003      	str	r3, [r0, #0]
 802a37a:	eeb0 0a48 	vmov.f32	s0, s16
 802a37e:	ecbd 8b02 	vpop	{d8}
 802a382:	bd08      	pop	{r3, pc}
 802a384:	eddf 7a08 	vldr	s15, [pc, #32]	@ 802a3a8 <expf+0x64>
 802a388:	eef4 8ae7 	vcmpe.f32	s17, s15
 802a38c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a390:	d5f3      	bpl.n	802a37a <expf+0x36>
 802a392:	f001 f9c1 	bl	802b718 <__errno>
 802a396:	2322      	movs	r3, #34	@ 0x22
 802a398:	ed9f 8a04 	vldr	s16, [pc, #16]	@ 802a3ac <expf+0x68>
 802a39c:	6003      	str	r3, [r0, #0]
 802a39e:	e7ec      	b.n	802a37a <expf+0x36>
 802a3a0:	42b17217 	.word	0x42b17217
 802a3a4:	7f800000 	.word	0x7f800000
 802a3a8:	c2cff1b5 	.word	0xc2cff1b5
 802a3ac:	00000000 	.word	0x00000000

0802a3b0 <finitef>:
 802a3b0:	ee10 3a10 	vmov	r3, s0
 802a3b4:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 802a3b8:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 802a3bc:	bfac      	ite	ge
 802a3be:	2000      	movge	r0, #0
 802a3c0:	2001      	movlt	r0, #1
 802a3c2:	4770      	bx	lr

0802a3c4 <__ieee754_expf>:
 802a3c4:	ee10 2a10 	vmov	r2, s0
 802a3c8:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 802a3cc:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 802a3d0:	d902      	bls.n	802a3d8 <__ieee754_expf+0x14>
 802a3d2:	ee30 0a00 	vadd.f32	s0, s0, s0
 802a3d6:	4770      	bx	lr
 802a3d8:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 802a3dc:	d106      	bne.n	802a3ec <__ieee754_expf+0x28>
 802a3de:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 802a518 <__ieee754_expf+0x154>
 802a3e2:	2900      	cmp	r1, #0
 802a3e4:	bf18      	it	ne
 802a3e6:	eeb0 0a67 	vmovne.f32	s0, s15
 802a3ea:	4770      	bx	lr
 802a3ec:	484b      	ldr	r0, [pc, #300]	@ (802a51c <__ieee754_expf+0x158>)
 802a3ee:	4282      	cmp	r2, r0
 802a3f0:	dd02      	ble.n	802a3f8 <__ieee754_expf+0x34>
 802a3f2:	2000      	movs	r0, #0
 802a3f4:	f000 b8d4 	b.w	802a5a0 <__math_oflowf>
 802a3f8:	2a00      	cmp	r2, #0
 802a3fa:	da05      	bge.n	802a408 <__ieee754_expf+0x44>
 802a3fc:	4a48      	ldr	r2, [pc, #288]	@ (802a520 <__ieee754_expf+0x15c>)
 802a3fe:	4293      	cmp	r3, r2
 802a400:	d902      	bls.n	802a408 <__ieee754_expf+0x44>
 802a402:	2000      	movs	r0, #0
 802a404:	f000 b8c6 	b.w	802a594 <__math_uflowf>
 802a408:	4a46      	ldr	r2, [pc, #280]	@ (802a524 <__ieee754_expf+0x160>)
 802a40a:	4293      	cmp	r3, r2
 802a40c:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 802a410:	d952      	bls.n	802a4b8 <__ieee754_expf+0xf4>
 802a412:	4a45      	ldr	r2, [pc, #276]	@ (802a528 <__ieee754_expf+0x164>)
 802a414:	4293      	cmp	r3, r2
 802a416:	ea4f 0281 	mov.w	r2, r1, lsl #2
 802a41a:	d834      	bhi.n	802a486 <__ieee754_expf+0xc2>
 802a41c:	4b43      	ldr	r3, [pc, #268]	@ (802a52c <__ieee754_expf+0x168>)
 802a41e:	4413      	add	r3, r2
 802a420:	ed93 7a00 	vldr	s14, [r3]
 802a424:	4b42      	ldr	r3, [pc, #264]	@ (802a530 <__ieee754_expf+0x16c>)
 802a426:	4413      	add	r3, r2
 802a428:	ee30 7a47 	vsub.f32	s14, s0, s14
 802a42c:	f1c1 0201 	rsb	r2, r1, #1
 802a430:	edd3 7a00 	vldr	s15, [r3]
 802a434:	1a52      	subs	r2, r2, r1
 802a436:	ee37 0a67 	vsub.f32	s0, s14, s15
 802a43a:	ee20 6a00 	vmul.f32	s12, s0, s0
 802a43e:	ed9f 5a3d 	vldr	s10, [pc, #244]	@ 802a534 <__ieee754_expf+0x170>
 802a442:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 802a538 <__ieee754_expf+0x174>
 802a446:	eee6 6a05 	vfma.f32	s13, s12, s10
 802a44a:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 802a53c <__ieee754_expf+0x178>
 802a44e:	eea6 5a86 	vfma.f32	s10, s13, s12
 802a452:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 802a540 <__ieee754_expf+0x17c>
 802a456:	eee5 6a06 	vfma.f32	s13, s10, s12
 802a45a:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 802a544 <__ieee754_expf+0x180>
 802a45e:	eea6 5a86 	vfma.f32	s10, s13, s12
 802a462:	eef0 6a40 	vmov.f32	s13, s0
 802a466:	eee5 6a46 	vfms.f32	s13, s10, s12
 802a46a:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 802a46e:	ee20 5a26 	vmul.f32	s10, s0, s13
 802a472:	bb92      	cbnz	r2, 802a4da <__ieee754_expf+0x116>
 802a474:	ee76 6ac6 	vsub.f32	s13, s13, s12
 802a478:	eec5 7a26 	vdiv.f32	s15, s10, s13
 802a47c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 802a480:	ee35 0ac0 	vsub.f32	s0, s11, s0
 802a484:	4770      	bx	lr
 802a486:	4b30      	ldr	r3, [pc, #192]	@ (802a548 <__ieee754_expf+0x184>)
 802a488:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 802a54c <__ieee754_expf+0x188>
 802a48c:	eddf 6a30 	vldr	s13, [pc, #192]	@ 802a550 <__ieee754_expf+0x18c>
 802a490:	4413      	add	r3, r2
 802a492:	edd3 7a00 	vldr	s15, [r3]
 802a496:	eee0 7a07 	vfma.f32	s15, s0, s14
 802a49a:	eeb0 7a40 	vmov.f32	s14, s0
 802a49e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802a4a2:	ee17 2a90 	vmov	r2, s15
 802a4a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802a4aa:	eea7 7ae6 	vfms.f32	s14, s15, s13
 802a4ae:	eddf 6a29 	vldr	s13, [pc, #164]	@ 802a554 <__ieee754_expf+0x190>
 802a4b2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 802a4b6:	e7be      	b.n	802a436 <__ieee754_expf+0x72>
 802a4b8:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 802a4bc:	d20b      	bcs.n	802a4d6 <__ieee754_expf+0x112>
 802a4be:	eddf 6a26 	vldr	s13, [pc, #152]	@ 802a558 <__ieee754_expf+0x194>
 802a4c2:	ee70 6a26 	vadd.f32	s13, s0, s13
 802a4c6:	eef4 6ae5 	vcmpe.f32	s13, s11
 802a4ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a4ce:	dd02      	ble.n	802a4d6 <__ieee754_expf+0x112>
 802a4d0:	ee30 0a25 	vadd.f32	s0, s0, s11
 802a4d4:	4770      	bx	lr
 802a4d6:	2200      	movs	r2, #0
 802a4d8:	e7af      	b.n	802a43a <__ieee754_expf+0x76>
 802a4da:	ee36 6a66 	vsub.f32	s12, s12, s13
 802a4de:	f112 0f7d 	cmn.w	r2, #125	@ 0x7d
 802a4e2:	eec5 6a06 	vdiv.f32	s13, s10, s12
 802a4e6:	bfb8      	it	lt
 802a4e8:	3264      	addlt	r2, #100	@ 0x64
 802a4ea:	ee77 7ae6 	vsub.f32	s15, s15, s13
 802a4ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802a4f2:	ee75 7ae7 	vsub.f32	s15, s11, s15
 802a4f6:	ee17 3a90 	vmov	r3, s15
 802a4fa:	bfab      	itete	ge
 802a4fc:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 802a500:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 802a504:	ee00 3a10 	vmovge	s0, r3
 802a508:	eddf 7a14 	vldrlt	s15, [pc, #80]	@ 802a55c <__ieee754_expf+0x198>
 802a50c:	bfbc      	itt	lt
 802a50e:	ee00 3a10 	vmovlt	s0, r3
 802a512:	ee20 0a27 	vmullt.f32	s0, s0, s15
 802a516:	4770      	bx	lr
 802a518:	00000000 	.word	0x00000000
 802a51c:	42b17217 	.word	0x42b17217
 802a520:	42cff1b5 	.word	0x42cff1b5
 802a524:	3eb17218 	.word	0x3eb17218
 802a528:	3f851591 	.word	0x3f851591
 802a52c:	08042b48 	.word	0x08042b48
 802a530:	08042b40 	.word	0x08042b40
 802a534:	3331bb4c 	.word	0x3331bb4c
 802a538:	b5ddea0e 	.word	0xb5ddea0e
 802a53c:	388ab355 	.word	0x388ab355
 802a540:	bb360b61 	.word	0xbb360b61
 802a544:	3e2aaaab 	.word	0x3e2aaaab
 802a548:	08042b50 	.word	0x08042b50
 802a54c:	3fb8aa3b 	.word	0x3fb8aa3b
 802a550:	3f317180 	.word	0x3f317180
 802a554:	3717f7d1 	.word	0x3717f7d1
 802a558:	7149f2ca 	.word	0x7149f2ca
 802a55c:	0d800000 	.word	0x0d800000

0802a560 <with_errnof>:
 802a560:	b510      	push	{r4, lr}
 802a562:	ed2d 8b02 	vpush	{d8}
 802a566:	eeb0 8a40 	vmov.f32	s16, s0
 802a56a:	4604      	mov	r4, r0
 802a56c:	f001 f8d4 	bl	802b718 <__errno>
 802a570:	eeb0 0a48 	vmov.f32	s0, s16
 802a574:	ecbd 8b02 	vpop	{d8}
 802a578:	6004      	str	r4, [r0, #0]
 802a57a:	bd10      	pop	{r4, pc}

0802a57c <xflowf>:
 802a57c:	b130      	cbz	r0, 802a58c <xflowf+0x10>
 802a57e:	eef1 7a40 	vneg.f32	s15, s0
 802a582:	ee27 0a80 	vmul.f32	s0, s15, s0
 802a586:	2022      	movs	r0, #34	@ 0x22
 802a588:	f7ff bfea 	b.w	802a560 <with_errnof>
 802a58c:	eef0 7a40 	vmov.f32	s15, s0
 802a590:	e7f7      	b.n	802a582 <xflowf+0x6>
	...

0802a594 <__math_uflowf>:
 802a594:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 802a59c <__math_uflowf+0x8>
 802a598:	f7ff bff0 	b.w	802a57c <xflowf>
 802a59c:	10000000 	.word	0x10000000

0802a5a0 <__math_oflowf>:
 802a5a0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 802a5a8 <__math_oflowf+0x8>
 802a5a4:	f7ff bfea 	b.w	802a57c <xflowf>
 802a5a8:	70000000 	.word	0x70000000

0802a5ac <abort>:
 802a5ac:	b508      	push	{r3, lr}
 802a5ae:	2006      	movs	r0, #6
 802a5b0:	f000 ffe6 	bl	802b580 <raise>
 802a5b4:	2001      	movs	r0, #1
 802a5b6:	f7d8 fd4b 	bl	8003050 <_exit>
	...

0802a5bc <__assert_func>:
 802a5bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802a5be:	4614      	mov	r4, r2
 802a5c0:	461a      	mov	r2, r3
 802a5c2:	4b09      	ldr	r3, [pc, #36]	@ (802a5e8 <__assert_func+0x2c>)
 802a5c4:	681b      	ldr	r3, [r3, #0]
 802a5c6:	4605      	mov	r5, r0
 802a5c8:	68d8      	ldr	r0, [r3, #12]
 802a5ca:	b954      	cbnz	r4, 802a5e2 <__assert_func+0x26>
 802a5cc:	4b07      	ldr	r3, [pc, #28]	@ (802a5ec <__assert_func+0x30>)
 802a5ce:	461c      	mov	r4, r3
 802a5d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802a5d4:	9100      	str	r1, [sp, #0]
 802a5d6:	462b      	mov	r3, r5
 802a5d8:	4905      	ldr	r1, [pc, #20]	@ (802a5f0 <__assert_func+0x34>)
 802a5da:	f000 fe87 	bl	802b2ec <fiprintf>
 802a5de:	f7ff ffe5 	bl	802a5ac <abort>
 802a5e2:	4b04      	ldr	r3, [pc, #16]	@ (802a5f4 <__assert_func+0x38>)
 802a5e4:	e7f4      	b.n	802a5d0 <__assert_func+0x14>
 802a5e6:	bf00      	nop
 802a5e8:	20007b3c 	.word	0x20007b3c
 802a5ec:	0802d550 	.word	0x0802d550
 802a5f0:	08042b65 	.word	0x08042b65
 802a5f4:	08042b58 	.word	0x08042b58

0802a5f8 <atexit>:
 802a5f8:	2300      	movs	r3, #0
 802a5fa:	4601      	mov	r1, r0
 802a5fc:	461a      	mov	r2, r3
 802a5fe:	4618      	mov	r0, r3
 802a600:	f001 b8c6 	b.w	802b790 <__register_exitproc>

0802a604 <malloc>:
 802a604:	4b02      	ldr	r3, [pc, #8]	@ (802a610 <malloc+0xc>)
 802a606:	4601      	mov	r1, r0
 802a608:	6818      	ldr	r0, [r3, #0]
 802a60a:	f000 b82d 	b.w	802a668 <_malloc_r>
 802a60e:	bf00      	nop
 802a610:	20007b3c 	.word	0x20007b3c

0802a614 <free>:
 802a614:	4b02      	ldr	r3, [pc, #8]	@ (802a620 <free+0xc>)
 802a616:	4601      	mov	r1, r0
 802a618:	6818      	ldr	r0, [r3, #0]
 802a61a:	f001 bf61 	b.w	802c4e0 <_free_r>
 802a61e:	bf00      	nop
 802a620:	20007b3c 	.word	0x20007b3c

0802a624 <sbrk_aligned>:
 802a624:	b570      	push	{r4, r5, r6, lr}
 802a626:	4e0f      	ldr	r6, [pc, #60]	@ (802a664 <sbrk_aligned+0x40>)
 802a628:	460c      	mov	r4, r1
 802a62a:	6831      	ldr	r1, [r6, #0]
 802a62c:	4605      	mov	r5, r0
 802a62e:	b911      	cbnz	r1, 802a636 <sbrk_aligned+0x12>
 802a630:	f001 f850 	bl	802b6d4 <_sbrk_r>
 802a634:	6030      	str	r0, [r6, #0]
 802a636:	4621      	mov	r1, r4
 802a638:	4628      	mov	r0, r5
 802a63a:	f001 f84b 	bl	802b6d4 <_sbrk_r>
 802a63e:	1c43      	adds	r3, r0, #1
 802a640:	d103      	bne.n	802a64a <sbrk_aligned+0x26>
 802a642:	f04f 34ff 	mov.w	r4, #4294967295
 802a646:	4620      	mov	r0, r4
 802a648:	bd70      	pop	{r4, r5, r6, pc}
 802a64a:	1cc4      	adds	r4, r0, #3
 802a64c:	f024 0403 	bic.w	r4, r4, #3
 802a650:	42a0      	cmp	r0, r4
 802a652:	d0f8      	beq.n	802a646 <sbrk_aligned+0x22>
 802a654:	1a21      	subs	r1, r4, r0
 802a656:	4628      	mov	r0, r5
 802a658:	f001 f83c 	bl	802b6d4 <_sbrk_r>
 802a65c:	3001      	adds	r0, #1
 802a65e:	d1f2      	bne.n	802a646 <sbrk_aligned+0x22>
 802a660:	e7ef      	b.n	802a642 <sbrk_aligned+0x1e>
 802a662:	bf00      	nop
 802a664:	2002a830 	.word	0x2002a830

0802a668 <_malloc_r>:
 802a668:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802a66c:	1ccd      	adds	r5, r1, #3
 802a66e:	f025 0503 	bic.w	r5, r5, #3
 802a672:	3508      	adds	r5, #8
 802a674:	2d0c      	cmp	r5, #12
 802a676:	bf38      	it	cc
 802a678:	250c      	movcc	r5, #12
 802a67a:	2d00      	cmp	r5, #0
 802a67c:	4606      	mov	r6, r0
 802a67e:	db01      	blt.n	802a684 <_malloc_r+0x1c>
 802a680:	42a9      	cmp	r1, r5
 802a682:	d904      	bls.n	802a68e <_malloc_r+0x26>
 802a684:	230c      	movs	r3, #12
 802a686:	6033      	str	r3, [r6, #0]
 802a688:	2000      	movs	r0, #0
 802a68a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802a68e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 802a764 <_malloc_r+0xfc>
 802a692:	f000 f869 	bl	802a768 <__malloc_lock>
 802a696:	f8d8 3000 	ldr.w	r3, [r8]
 802a69a:	461c      	mov	r4, r3
 802a69c:	bb44      	cbnz	r4, 802a6f0 <_malloc_r+0x88>
 802a69e:	4629      	mov	r1, r5
 802a6a0:	4630      	mov	r0, r6
 802a6a2:	f7ff ffbf 	bl	802a624 <sbrk_aligned>
 802a6a6:	1c43      	adds	r3, r0, #1
 802a6a8:	4604      	mov	r4, r0
 802a6aa:	d158      	bne.n	802a75e <_malloc_r+0xf6>
 802a6ac:	f8d8 4000 	ldr.w	r4, [r8]
 802a6b0:	4627      	mov	r7, r4
 802a6b2:	2f00      	cmp	r7, #0
 802a6b4:	d143      	bne.n	802a73e <_malloc_r+0xd6>
 802a6b6:	2c00      	cmp	r4, #0
 802a6b8:	d04b      	beq.n	802a752 <_malloc_r+0xea>
 802a6ba:	6823      	ldr	r3, [r4, #0]
 802a6bc:	4639      	mov	r1, r7
 802a6be:	4630      	mov	r0, r6
 802a6c0:	eb04 0903 	add.w	r9, r4, r3
 802a6c4:	f001 f806 	bl	802b6d4 <_sbrk_r>
 802a6c8:	4581      	cmp	r9, r0
 802a6ca:	d142      	bne.n	802a752 <_malloc_r+0xea>
 802a6cc:	6821      	ldr	r1, [r4, #0]
 802a6ce:	1a6d      	subs	r5, r5, r1
 802a6d0:	4629      	mov	r1, r5
 802a6d2:	4630      	mov	r0, r6
 802a6d4:	f7ff ffa6 	bl	802a624 <sbrk_aligned>
 802a6d8:	3001      	adds	r0, #1
 802a6da:	d03a      	beq.n	802a752 <_malloc_r+0xea>
 802a6dc:	6823      	ldr	r3, [r4, #0]
 802a6de:	442b      	add	r3, r5
 802a6e0:	6023      	str	r3, [r4, #0]
 802a6e2:	f8d8 3000 	ldr.w	r3, [r8]
 802a6e6:	685a      	ldr	r2, [r3, #4]
 802a6e8:	bb62      	cbnz	r2, 802a744 <_malloc_r+0xdc>
 802a6ea:	f8c8 7000 	str.w	r7, [r8]
 802a6ee:	e00f      	b.n	802a710 <_malloc_r+0xa8>
 802a6f0:	6822      	ldr	r2, [r4, #0]
 802a6f2:	1b52      	subs	r2, r2, r5
 802a6f4:	d420      	bmi.n	802a738 <_malloc_r+0xd0>
 802a6f6:	2a0b      	cmp	r2, #11
 802a6f8:	d917      	bls.n	802a72a <_malloc_r+0xc2>
 802a6fa:	1961      	adds	r1, r4, r5
 802a6fc:	42a3      	cmp	r3, r4
 802a6fe:	6025      	str	r5, [r4, #0]
 802a700:	bf18      	it	ne
 802a702:	6059      	strne	r1, [r3, #4]
 802a704:	6863      	ldr	r3, [r4, #4]
 802a706:	bf08      	it	eq
 802a708:	f8c8 1000 	streq.w	r1, [r8]
 802a70c:	5162      	str	r2, [r4, r5]
 802a70e:	604b      	str	r3, [r1, #4]
 802a710:	4630      	mov	r0, r6
 802a712:	f000 f82f 	bl	802a774 <__malloc_unlock>
 802a716:	f104 000b 	add.w	r0, r4, #11
 802a71a:	1d23      	adds	r3, r4, #4
 802a71c:	f020 0007 	bic.w	r0, r0, #7
 802a720:	1ac2      	subs	r2, r0, r3
 802a722:	bf1c      	itt	ne
 802a724:	1a1b      	subne	r3, r3, r0
 802a726:	50a3      	strne	r3, [r4, r2]
 802a728:	e7af      	b.n	802a68a <_malloc_r+0x22>
 802a72a:	6862      	ldr	r2, [r4, #4]
 802a72c:	42a3      	cmp	r3, r4
 802a72e:	bf0c      	ite	eq
 802a730:	f8c8 2000 	streq.w	r2, [r8]
 802a734:	605a      	strne	r2, [r3, #4]
 802a736:	e7eb      	b.n	802a710 <_malloc_r+0xa8>
 802a738:	4623      	mov	r3, r4
 802a73a:	6864      	ldr	r4, [r4, #4]
 802a73c:	e7ae      	b.n	802a69c <_malloc_r+0x34>
 802a73e:	463c      	mov	r4, r7
 802a740:	687f      	ldr	r7, [r7, #4]
 802a742:	e7b6      	b.n	802a6b2 <_malloc_r+0x4a>
 802a744:	461a      	mov	r2, r3
 802a746:	685b      	ldr	r3, [r3, #4]
 802a748:	42a3      	cmp	r3, r4
 802a74a:	d1fb      	bne.n	802a744 <_malloc_r+0xdc>
 802a74c:	2300      	movs	r3, #0
 802a74e:	6053      	str	r3, [r2, #4]
 802a750:	e7de      	b.n	802a710 <_malloc_r+0xa8>
 802a752:	230c      	movs	r3, #12
 802a754:	6033      	str	r3, [r6, #0]
 802a756:	4630      	mov	r0, r6
 802a758:	f000 f80c 	bl	802a774 <__malloc_unlock>
 802a75c:	e794      	b.n	802a688 <_malloc_r+0x20>
 802a75e:	6005      	str	r5, [r0, #0]
 802a760:	e7d6      	b.n	802a710 <_malloc_r+0xa8>
 802a762:	bf00      	nop
 802a764:	2002a834 	.word	0x2002a834

0802a768 <__malloc_lock>:
 802a768:	4801      	ldr	r0, [pc, #4]	@ (802a770 <__malloc_lock+0x8>)
 802a76a:	f001 b800 	b.w	802b76e <__retarget_lock_acquire_recursive>
 802a76e:	bf00      	nop
 802a770:	2002a978 	.word	0x2002a978

0802a774 <__malloc_unlock>:
 802a774:	4801      	ldr	r0, [pc, #4]	@ (802a77c <__malloc_unlock+0x8>)
 802a776:	f000 bffb 	b.w	802b770 <__retarget_lock_release_recursive>
 802a77a:	bf00      	nop
 802a77c:	2002a978 	.word	0x2002a978

0802a780 <__cxa_atexit>:
 802a780:	b510      	push	{r4, lr}
 802a782:	4604      	mov	r4, r0
 802a784:	4804      	ldr	r0, [pc, #16]	@ (802a798 <__cxa_atexit+0x18>)
 802a786:	4613      	mov	r3, r2
 802a788:	b120      	cbz	r0, 802a794 <__cxa_atexit+0x14>
 802a78a:	460a      	mov	r2, r1
 802a78c:	2002      	movs	r0, #2
 802a78e:	4621      	mov	r1, r4
 802a790:	f000 fffe 	bl	802b790 <__register_exitproc>
 802a794:	bd10      	pop	{r4, pc}
 802a796:	bf00      	nop
 802a798:	0802b791 	.word	0x0802b791

0802a79c <__cvt>:
 802a79c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802a7a0:	ec57 6b10 	vmov	r6, r7, d0
 802a7a4:	2f00      	cmp	r7, #0
 802a7a6:	460c      	mov	r4, r1
 802a7a8:	4619      	mov	r1, r3
 802a7aa:	463b      	mov	r3, r7
 802a7ac:	bfbb      	ittet	lt
 802a7ae:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 802a7b2:	461f      	movlt	r7, r3
 802a7b4:	2300      	movge	r3, #0
 802a7b6:	232d      	movlt	r3, #45	@ 0x2d
 802a7b8:	700b      	strb	r3, [r1, #0]
 802a7ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802a7bc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 802a7c0:	4691      	mov	r9, r2
 802a7c2:	f023 0820 	bic.w	r8, r3, #32
 802a7c6:	bfbc      	itt	lt
 802a7c8:	4632      	movlt	r2, r6
 802a7ca:	4616      	movlt	r6, r2
 802a7cc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 802a7d0:	d005      	beq.n	802a7de <__cvt+0x42>
 802a7d2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 802a7d6:	d100      	bne.n	802a7da <__cvt+0x3e>
 802a7d8:	3401      	adds	r4, #1
 802a7da:	2102      	movs	r1, #2
 802a7dc:	e000      	b.n	802a7e0 <__cvt+0x44>
 802a7de:	2103      	movs	r1, #3
 802a7e0:	ab03      	add	r3, sp, #12
 802a7e2:	9301      	str	r3, [sp, #4]
 802a7e4:	ab02      	add	r3, sp, #8
 802a7e6:	9300      	str	r3, [sp, #0]
 802a7e8:	ec47 6b10 	vmov	d0, r6, r7
 802a7ec:	4653      	mov	r3, sl
 802a7ee:	4622      	mov	r2, r4
 802a7f0:	f001 f8b2 	bl	802b958 <_dtoa_r>
 802a7f4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 802a7f8:	4605      	mov	r5, r0
 802a7fa:	d119      	bne.n	802a830 <__cvt+0x94>
 802a7fc:	f019 0f01 	tst.w	r9, #1
 802a800:	d00e      	beq.n	802a820 <__cvt+0x84>
 802a802:	eb00 0904 	add.w	r9, r0, r4
 802a806:	2200      	movs	r2, #0
 802a808:	2300      	movs	r3, #0
 802a80a:	4630      	mov	r0, r6
 802a80c:	4639      	mov	r1, r7
 802a80e:	f7d6 f97b 	bl	8000b08 <__aeabi_dcmpeq>
 802a812:	b108      	cbz	r0, 802a818 <__cvt+0x7c>
 802a814:	f8cd 900c 	str.w	r9, [sp, #12]
 802a818:	2230      	movs	r2, #48	@ 0x30
 802a81a:	9b03      	ldr	r3, [sp, #12]
 802a81c:	454b      	cmp	r3, r9
 802a81e:	d31e      	bcc.n	802a85e <__cvt+0xc2>
 802a820:	9b03      	ldr	r3, [sp, #12]
 802a822:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802a824:	1b5b      	subs	r3, r3, r5
 802a826:	4628      	mov	r0, r5
 802a828:	6013      	str	r3, [r2, #0]
 802a82a:	b004      	add	sp, #16
 802a82c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802a830:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 802a834:	eb00 0904 	add.w	r9, r0, r4
 802a838:	d1e5      	bne.n	802a806 <__cvt+0x6a>
 802a83a:	7803      	ldrb	r3, [r0, #0]
 802a83c:	2b30      	cmp	r3, #48	@ 0x30
 802a83e:	d10a      	bne.n	802a856 <__cvt+0xba>
 802a840:	2200      	movs	r2, #0
 802a842:	2300      	movs	r3, #0
 802a844:	4630      	mov	r0, r6
 802a846:	4639      	mov	r1, r7
 802a848:	f7d6 f95e 	bl	8000b08 <__aeabi_dcmpeq>
 802a84c:	b918      	cbnz	r0, 802a856 <__cvt+0xba>
 802a84e:	f1c4 0401 	rsb	r4, r4, #1
 802a852:	f8ca 4000 	str.w	r4, [sl]
 802a856:	f8da 3000 	ldr.w	r3, [sl]
 802a85a:	4499      	add	r9, r3
 802a85c:	e7d3      	b.n	802a806 <__cvt+0x6a>
 802a85e:	1c59      	adds	r1, r3, #1
 802a860:	9103      	str	r1, [sp, #12]
 802a862:	701a      	strb	r2, [r3, #0]
 802a864:	e7d9      	b.n	802a81a <__cvt+0x7e>

0802a866 <__exponent>:
 802a866:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802a868:	2900      	cmp	r1, #0
 802a86a:	bfba      	itte	lt
 802a86c:	4249      	neglt	r1, r1
 802a86e:	232d      	movlt	r3, #45	@ 0x2d
 802a870:	232b      	movge	r3, #43	@ 0x2b
 802a872:	2909      	cmp	r1, #9
 802a874:	7002      	strb	r2, [r0, #0]
 802a876:	7043      	strb	r3, [r0, #1]
 802a878:	dd29      	ble.n	802a8ce <__exponent+0x68>
 802a87a:	f10d 0307 	add.w	r3, sp, #7
 802a87e:	461d      	mov	r5, r3
 802a880:	270a      	movs	r7, #10
 802a882:	461a      	mov	r2, r3
 802a884:	fbb1 f6f7 	udiv	r6, r1, r7
 802a888:	fb07 1416 	mls	r4, r7, r6, r1
 802a88c:	3430      	adds	r4, #48	@ 0x30
 802a88e:	f802 4c01 	strb.w	r4, [r2, #-1]
 802a892:	460c      	mov	r4, r1
 802a894:	2c63      	cmp	r4, #99	@ 0x63
 802a896:	f103 33ff 	add.w	r3, r3, #4294967295
 802a89a:	4631      	mov	r1, r6
 802a89c:	dcf1      	bgt.n	802a882 <__exponent+0x1c>
 802a89e:	3130      	adds	r1, #48	@ 0x30
 802a8a0:	1e94      	subs	r4, r2, #2
 802a8a2:	f803 1c01 	strb.w	r1, [r3, #-1]
 802a8a6:	1c41      	adds	r1, r0, #1
 802a8a8:	4623      	mov	r3, r4
 802a8aa:	42ab      	cmp	r3, r5
 802a8ac:	d30a      	bcc.n	802a8c4 <__exponent+0x5e>
 802a8ae:	f10d 0309 	add.w	r3, sp, #9
 802a8b2:	1a9b      	subs	r3, r3, r2
 802a8b4:	42ac      	cmp	r4, r5
 802a8b6:	bf88      	it	hi
 802a8b8:	2300      	movhi	r3, #0
 802a8ba:	3302      	adds	r3, #2
 802a8bc:	4403      	add	r3, r0
 802a8be:	1a18      	subs	r0, r3, r0
 802a8c0:	b003      	add	sp, #12
 802a8c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802a8c4:	f813 6b01 	ldrb.w	r6, [r3], #1
 802a8c8:	f801 6f01 	strb.w	r6, [r1, #1]!
 802a8cc:	e7ed      	b.n	802a8aa <__exponent+0x44>
 802a8ce:	2330      	movs	r3, #48	@ 0x30
 802a8d0:	3130      	adds	r1, #48	@ 0x30
 802a8d2:	7083      	strb	r3, [r0, #2]
 802a8d4:	70c1      	strb	r1, [r0, #3]
 802a8d6:	1d03      	adds	r3, r0, #4
 802a8d8:	e7f1      	b.n	802a8be <__exponent+0x58>
	...

0802a8dc <_printf_float>:
 802a8dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a8e0:	b08d      	sub	sp, #52	@ 0x34
 802a8e2:	460c      	mov	r4, r1
 802a8e4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 802a8e8:	4616      	mov	r6, r2
 802a8ea:	461f      	mov	r7, r3
 802a8ec:	4605      	mov	r5, r0
 802a8ee:	f000 fe4f 	bl	802b590 <_localeconv_r>
 802a8f2:	6803      	ldr	r3, [r0, #0]
 802a8f4:	9304      	str	r3, [sp, #16]
 802a8f6:	4618      	mov	r0, r3
 802a8f8:	f7d5 fcda 	bl	80002b0 <strlen>
 802a8fc:	2300      	movs	r3, #0
 802a8fe:	930a      	str	r3, [sp, #40]	@ 0x28
 802a900:	f8d8 3000 	ldr.w	r3, [r8]
 802a904:	9005      	str	r0, [sp, #20]
 802a906:	3307      	adds	r3, #7
 802a908:	f023 0307 	bic.w	r3, r3, #7
 802a90c:	f103 0208 	add.w	r2, r3, #8
 802a910:	f894 a018 	ldrb.w	sl, [r4, #24]
 802a914:	f8d4 b000 	ldr.w	fp, [r4]
 802a918:	f8c8 2000 	str.w	r2, [r8]
 802a91c:	e9d3 8900 	ldrd	r8, r9, [r3]
 802a920:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 802a924:	9307      	str	r3, [sp, #28]
 802a926:	f8cd 8018 	str.w	r8, [sp, #24]
 802a92a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 802a92e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 802a932:	4b9c      	ldr	r3, [pc, #624]	@ (802aba4 <_printf_float+0x2c8>)
 802a934:	f04f 32ff 	mov.w	r2, #4294967295
 802a938:	f7d6 f918 	bl	8000b6c <__aeabi_dcmpun>
 802a93c:	bb70      	cbnz	r0, 802a99c <_printf_float+0xc0>
 802a93e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 802a942:	4b98      	ldr	r3, [pc, #608]	@ (802aba4 <_printf_float+0x2c8>)
 802a944:	f04f 32ff 	mov.w	r2, #4294967295
 802a948:	f7d6 f8f2 	bl	8000b30 <__aeabi_dcmple>
 802a94c:	bb30      	cbnz	r0, 802a99c <_printf_float+0xc0>
 802a94e:	2200      	movs	r2, #0
 802a950:	2300      	movs	r3, #0
 802a952:	4640      	mov	r0, r8
 802a954:	4649      	mov	r1, r9
 802a956:	f7d6 f8e1 	bl	8000b1c <__aeabi_dcmplt>
 802a95a:	b110      	cbz	r0, 802a962 <_printf_float+0x86>
 802a95c:	232d      	movs	r3, #45	@ 0x2d
 802a95e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802a962:	4a91      	ldr	r2, [pc, #580]	@ (802aba8 <_printf_float+0x2cc>)
 802a964:	4b91      	ldr	r3, [pc, #580]	@ (802abac <_printf_float+0x2d0>)
 802a966:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 802a96a:	bf94      	ite	ls
 802a96c:	4690      	movls	r8, r2
 802a96e:	4698      	movhi	r8, r3
 802a970:	2303      	movs	r3, #3
 802a972:	6123      	str	r3, [r4, #16]
 802a974:	f02b 0304 	bic.w	r3, fp, #4
 802a978:	6023      	str	r3, [r4, #0]
 802a97a:	f04f 0900 	mov.w	r9, #0
 802a97e:	9700      	str	r7, [sp, #0]
 802a980:	4633      	mov	r3, r6
 802a982:	aa0b      	add	r2, sp, #44	@ 0x2c
 802a984:	4621      	mov	r1, r4
 802a986:	4628      	mov	r0, r5
 802a988:	f000 f9d2 	bl	802ad30 <_printf_common>
 802a98c:	3001      	adds	r0, #1
 802a98e:	f040 808d 	bne.w	802aaac <_printf_float+0x1d0>
 802a992:	f04f 30ff 	mov.w	r0, #4294967295
 802a996:	b00d      	add	sp, #52	@ 0x34
 802a998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a99c:	4642      	mov	r2, r8
 802a99e:	464b      	mov	r3, r9
 802a9a0:	4640      	mov	r0, r8
 802a9a2:	4649      	mov	r1, r9
 802a9a4:	f7d6 f8e2 	bl	8000b6c <__aeabi_dcmpun>
 802a9a8:	b140      	cbz	r0, 802a9bc <_printf_float+0xe0>
 802a9aa:	464b      	mov	r3, r9
 802a9ac:	2b00      	cmp	r3, #0
 802a9ae:	bfbc      	itt	lt
 802a9b0:	232d      	movlt	r3, #45	@ 0x2d
 802a9b2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 802a9b6:	4a7e      	ldr	r2, [pc, #504]	@ (802abb0 <_printf_float+0x2d4>)
 802a9b8:	4b7e      	ldr	r3, [pc, #504]	@ (802abb4 <_printf_float+0x2d8>)
 802a9ba:	e7d4      	b.n	802a966 <_printf_float+0x8a>
 802a9bc:	6863      	ldr	r3, [r4, #4]
 802a9be:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 802a9c2:	9206      	str	r2, [sp, #24]
 802a9c4:	1c5a      	adds	r2, r3, #1
 802a9c6:	d13b      	bne.n	802aa40 <_printf_float+0x164>
 802a9c8:	2306      	movs	r3, #6
 802a9ca:	6063      	str	r3, [r4, #4]
 802a9cc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 802a9d0:	2300      	movs	r3, #0
 802a9d2:	6022      	str	r2, [r4, #0]
 802a9d4:	9303      	str	r3, [sp, #12]
 802a9d6:	ab0a      	add	r3, sp, #40	@ 0x28
 802a9d8:	e9cd a301 	strd	sl, r3, [sp, #4]
 802a9dc:	ab09      	add	r3, sp, #36	@ 0x24
 802a9de:	9300      	str	r3, [sp, #0]
 802a9e0:	6861      	ldr	r1, [r4, #4]
 802a9e2:	ec49 8b10 	vmov	d0, r8, r9
 802a9e6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 802a9ea:	4628      	mov	r0, r5
 802a9ec:	f7ff fed6 	bl	802a79c <__cvt>
 802a9f0:	9b06      	ldr	r3, [sp, #24]
 802a9f2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802a9f4:	2b47      	cmp	r3, #71	@ 0x47
 802a9f6:	4680      	mov	r8, r0
 802a9f8:	d129      	bne.n	802aa4e <_printf_float+0x172>
 802a9fa:	1cc8      	adds	r0, r1, #3
 802a9fc:	db02      	blt.n	802aa04 <_printf_float+0x128>
 802a9fe:	6863      	ldr	r3, [r4, #4]
 802aa00:	4299      	cmp	r1, r3
 802aa02:	dd41      	ble.n	802aa88 <_printf_float+0x1ac>
 802aa04:	f1aa 0a02 	sub.w	sl, sl, #2
 802aa08:	fa5f fa8a 	uxtb.w	sl, sl
 802aa0c:	3901      	subs	r1, #1
 802aa0e:	4652      	mov	r2, sl
 802aa10:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 802aa14:	9109      	str	r1, [sp, #36]	@ 0x24
 802aa16:	f7ff ff26 	bl	802a866 <__exponent>
 802aa1a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802aa1c:	1813      	adds	r3, r2, r0
 802aa1e:	2a01      	cmp	r2, #1
 802aa20:	4681      	mov	r9, r0
 802aa22:	6123      	str	r3, [r4, #16]
 802aa24:	dc02      	bgt.n	802aa2c <_printf_float+0x150>
 802aa26:	6822      	ldr	r2, [r4, #0]
 802aa28:	07d2      	lsls	r2, r2, #31
 802aa2a:	d501      	bpl.n	802aa30 <_printf_float+0x154>
 802aa2c:	3301      	adds	r3, #1
 802aa2e:	6123      	str	r3, [r4, #16]
 802aa30:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 802aa34:	2b00      	cmp	r3, #0
 802aa36:	d0a2      	beq.n	802a97e <_printf_float+0xa2>
 802aa38:	232d      	movs	r3, #45	@ 0x2d
 802aa3a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802aa3e:	e79e      	b.n	802a97e <_printf_float+0xa2>
 802aa40:	9a06      	ldr	r2, [sp, #24]
 802aa42:	2a47      	cmp	r2, #71	@ 0x47
 802aa44:	d1c2      	bne.n	802a9cc <_printf_float+0xf0>
 802aa46:	2b00      	cmp	r3, #0
 802aa48:	d1c0      	bne.n	802a9cc <_printf_float+0xf0>
 802aa4a:	2301      	movs	r3, #1
 802aa4c:	e7bd      	b.n	802a9ca <_printf_float+0xee>
 802aa4e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 802aa52:	d9db      	bls.n	802aa0c <_printf_float+0x130>
 802aa54:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 802aa58:	d118      	bne.n	802aa8c <_printf_float+0x1b0>
 802aa5a:	2900      	cmp	r1, #0
 802aa5c:	6863      	ldr	r3, [r4, #4]
 802aa5e:	dd0b      	ble.n	802aa78 <_printf_float+0x19c>
 802aa60:	6121      	str	r1, [r4, #16]
 802aa62:	b913      	cbnz	r3, 802aa6a <_printf_float+0x18e>
 802aa64:	6822      	ldr	r2, [r4, #0]
 802aa66:	07d0      	lsls	r0, r2, #31
 802aa68:	d502      	bpl.n	802aa70 <_printf_float+0x194>
 802aa6a:	3301      	adds	r3, #1
 802aa6c:	440b      	add	r3, r1
 802aa6e:	6123      	str	r3, [r4, #16]
 802aa70:	65a1      	str	r1, [r4, #88]	@ 0x58
 802aa72:	f04f 0900 	mov.w	r9, #0
 802aa76:	e7db      	b.n	802aa30 <_printf_float+0x154>
 802aa78:	b913      	cbnz	r3, 802aa80 <_printf_float+0x1a4>
 802aa7a:	6822      	ldr	r2, [r4, #0]
 802aa7c:	07d2      	lsls	r2, r2, #31
 802aa7e:	d501      	bpl.n	802aa84 <_printf_float+0x1a8>
 802aa80:	3302      	adds	r3, #2
 802aa82:	e7f4      	b.n	802aa6e <_printf_float+0x192>
 802aa84:	2301      	movs	r3, #1
 802aa86:	e7f2      	b.n	802aa6e <_printf_float+0x192>
 802aa88:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 802aa8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802aa8e:	4299      	cmp	r1, r3
 802aa90:	db05      	blt.n	802aa9e <_printf_float+0x1c2>
 802aa92:	6823      	ldr	r3, [r4, #0]
 802aa94:	6121      	str	r1, [r4, #16]
 802aa96:	07d8      	lsls	r0, r3, #31
 802aa98:	d5ea      	bpl.n	802aa70 <_printf_float+0x194>
 802aa9a:	1c4b      	adds	r3, r1, #1
 802aa9c:	e7e7      	b.n	802aa6e <_printf_float+0x192>
 802aa9e:	2900      	cmp	r1, #0
 802aaa0:	bfd4      	ite	le
 802aaa2:	f1c1 0202 	rsble	r2, r1, #2
 802aaa6:	2201      	movgt	r2, #1
 802aaa8:	4413      	add	r3, r2
 802aaaa:	e7e0      	b.n	802aa6e <_printf_float+0x192>
 802aaac:	6823      	ldr	r3, [r4, #0]
 802aaae:	055a      	lsls	r2, r3, #21
 802aab0:	d407      	bmi.n	802aac2 <_printf_float+0x1e6>
 802aab2:	6923      	ldr	r3, [r4, #16]
 802aab4:	4642      	mov	r2, r8
 802aab6:	4631      	mov	r1, r6
 802aab8:	4628      	mov	r0, r5
 802aaba:	47b8      	blx	r7
 802aabc:	3001      	adds	r0, #1
 802aabe:	d12b      	bne.n	802ab18 <_printf_float+0x23c>
 802aac0:	e767      	b.n	802a992 <_printf_float+0xb6>
 802aac2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 802aac6:	f240 80dd 	bls.w	802ac84 <_printf_float+0x3a8>
 802aaca:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 802aace:	2200      	movs	r2, #0
 802aad0:	2300      	movs	r3, #0
 802aad2:	f7d6 f819 	bl	8000b08 <__aeabi_dcmpeq>
 802aad6:	2800      	cmp	r0, #0
 802aad8:	d033      	beq.n	802ab42 <_printf_float+0x266>
 802aada:	4a37      	ldr	r2, [pc, #220]	@ (802abb8 <_printf_float+0x2dc>)
 802aadc:	2301      	movs	r3, #1
 802aade:	4631      	mov	r1, r6
 802aae0:	4628      	mov	r0, r5
 802aae2:	47b8      	blx	r7
 802aae4:	3001      	adds	r0, #1
 802aae6:	f43f af54 	beq.w	802a992 <_printf_float+0xb6>
 802aaea:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 802aaee:	4543      	cmp	r3, r8
 802aaf0:	db02      	blt.n	802aaf8 <_printf_float+0x21c>
 802aaf2:	6823      	ldr	r3, [r4, #0]
 802aaf4:	07d8      	lsls	r0, r3, #31
 802aaf6:	d50f      	bpl.n	802ab18 <_printf_float+0x23c>
 802aaf8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802aafc:	4631      	mov	r1, r6
 802aafe:	4628      	mov	r0, r5
 802ab00:	47b8      	blx	r7
 802ab02:	3001      	adds	r0, #1
 802ab04:	f43f af45 	beq.w	802a992 <_printf_float+0xb6>
 802ab08:	f04f 0900 	mov.w	r9, #0
 802ab0c:	f108 38ff 	add.w	r8, r8, #4294967295
 802ab10:	f104 0a1a 	add.w	sl, r4, #26
 802ab14:	45c8      	cmp	r8, r9
 802ab16:	dc09      	bgt.n	802ab2c <_printf_float+0x250>
 802ab18:	6823      	ldr	r3, [r4, #0]
 802ab1a:	079b      	lsls	r3, r3, #30
 802ab1c:	f100 8103 	bmi.w	802ad26 <_printf_float+0x44a>
 802ab20:	68e0      	ldr	r0, [r4, #12]
 802ab22:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802ab24:	4298      	cmp	r0, r3
 802ab26:	bfb8      	it	lt
 802ab28:	4618      	movlt	r0, r3
 802ab2a:	e734      	b.n	802a996 <_printf_float+0xba>
 802ab2c:	2301      	movs	r3, #1
 802ab2e:	4652      	mov	r2, sl
 802ab30:	4631      	mov	r1, r6
 802ab32:	4628      	mov	r0, r5
 802ab34:	47b8      	blx	r7
 802ab36:	3001      	adds	r0, #1
 802ab38:	f43f af2b 	beq.w	802a992 <_printf_float+0xb6>
 802ab3c:	f109 0901 	add.w	r9, r9, #1
 802ab40:	e7e8      	b.n	802ab14 <_printf_float+0x238>
 802ab42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802ab44:	2b00      	cmp	r3, #0
 802ab46:	dc39      	bgt.n	802abbc <_printf_float+0x2e0>
 802ab48:	4a1b      	ldr	r2, [pc, #108]	@ (802abb8 <_printf_float+0x2dc>)
 802ab4a:	2301      	movs	r3, #1
 802ab4c:	4631      	mov	r1, r6
 802ab4e:	4628      	mov	r0, r5
 802ab50:	47b8      	blx	r7
 802ab52:	3001      	adds	r0, #1
 802ab54:	f43f af1d 	beq.w	802a992 <_printf_float+0xb6>
 802ab58:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 802ab5c:	ea59 0303 	orrs.w	r3, r9, r3
 802ab60:	d102      	bne.n	802ab68 <_printf_float+0x28c>
 802ab62:	6823      	ldr	r3, [r4, #0]
 802ab64:	07d9      	lsls	r1, r3, #31
 802ab66:	d5d7      	bpl.n	802ab18 <_printf_float+0x23c>
 802ab68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802ab6c:	4631      	mov	r1, r6
 802ab6e:	4628      	mov	r0, r5
 802ab70:	47b8      	blx	r7
 802ab72:	3001      	adds	r0, #1
 802ab74:	f43f af0d 	beq.w	802a992 <_printf_float+0xb6>
 802ab78:	f04f 0a00 	mov.w	sl, #0
 802ab7c:	f104 0b1a 	add.w	fp, r4, #26
 802ab80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802ab82:	425b      	negs	r3, r3
 802ab84:	4553      	cmp	r3, sl
 802ab86:	dc01      	bgt.n	802ab8c <_printf_float+0x2b0>
 802ab88:	464b      	mov	r3, r9
 802ab8a:	e793      	b.n	802aab4 <_printf_float+0x1d8>
 802ab8c:	2301      	movs	r3, #1
 802ab8e:	465a      	mov	r2, fp
 802ab90:	4631      	mov	r1, r6
 802ab92:	4628      	mov	r0, r5
 802ab94:	47b8      	blx	r7
 802ab96:	3001      	adds	r0, #1
 802ab98:	f43f aefb 	beq.w	802a992 <_printf_float+0xb6>
 802ab9c:	f10a 0a01 	add.w	sl, sl, #1
 802aba0:	e7ee      	b.n	802ab80 <_printf_float+0x2a4>
 802aba2:	bf00      	nop
 802aba4:	7fefffff 	.word	0x7fefffff
 802aba8:	08042b94 	.word	0x08042b94
 802abac:	08042b98 	.word	0x08042b98
 802abb0:	08042b9c 	.word	0x08042b9c
 802abb4:	08042ba0 	.word	0x08042ba0
 802abb8:	08040b1b 	.word	0x08040b1b
 802abbc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 802abbe:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 802abc2:	4553      	cmp	r3, sl
 802abc4:	bfa8      	it	ge
 802abc6:	4653      	movge	r3, sl
 802abc8:	2b00      	cmp	r3, #0
 802abca:	4699      	mov	r9, r3
 802abcc:	dc36      	bgt.n	802ac3c <_printf_float+0x360>
 802abce:	f04f 0b00 	mov.w	fp, #0
 802abd2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 802abd6:	f104 021a 	add.w	r2, r4, #26
 802abda:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 802abdc:	9306      	str	r3, [sp, #24]
 802abde:	eba3 0309 	sub.w	r3, r3, r9
 802abe2:	455b      	cmp	r3, fp
 802abe4:	dc31      	bgt.n	802ac4a <_printf_float+0x36e>
 802abe6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802abe8:	459a      	cmp	sl, r3
 802abea:	dc3a      	bgt.n	802ac62 <_printf_float+0x386>
 802abec:	6823      	ldr	r3, [r4, #0]
 802abee:	07da      	lsls	r2, r3, #31
 802abf0:	d437      	bmi.n	802ac62 <_printf_float+0x386>
 802abf2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802abf4:	ebaa 0903 	sub.w	r9, sl, r3
 802abf8:	9b06      	ldr	r3, [sp, #24]
 802abfa:	ebaa 0303 	sub.w	r3, sl, r3
 802abfe:	4599      	cmp	r9, r3
 802ac00:	bfa8      	it	ge
 802ac02:	4699      	movge	r9, r3
 802ac04:	f1b9 0f00 	cmp.w	r9, #0
 802ac08:	dc33      	bgt.n	802ac72 <_printf_float+0x396>
 802ac0a:	f04f 0800 	mov.w	r8, #0
 802ac0e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 802ac12:	f104 0b1a 	add.w	fp, r4, #26
 802ac16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802ac18:	ebaa 0303 	sub.w	r3, sl, r3
 802ac1c:	eba3 0309 	sub.w	r3, r3, r9
 802ac20:	4543      	cmp	r3, r8
 802ac22:	f77f af79 	ble.w	802ab18 <_printf_float+0x23c>
 802ac26:	2301      	movs	r3, #1
 802ac28:	465a      	mov	r2, fp
 802ac2a:	4631      	mov	r1, r6
 802ac2c:	4628      	mov	r0, r5
 802ac2e:	47b8      	blx	r7
 802ac30:	3001      	adds	r0, #1
 802ac32:	f43f aeae 	beq.w	802a992 <_printf_float+0xb6>
 802ac36:	f108 0801 	add.w	r8, r8, #1
 802ac3a:	e7ec      	b.n	802ac16 <_printf_float+0x33a>
 802ac3c:	4642      	mov	r2, r8
 802ac3e:	4631      	mov	r1, r6
 802ac40:	4628      	mov	r0, r5
 802ac42:	47b8      	blx	r7
 802ac44:	3001      	adds	r0, #1
 802ac46:	d1c2      	bne.n	802abce <_printf_float+0x2f2>
 802ac48:	e6a3      	b.n	802a992 <_printf_float+0xb6>
 802ac4a:	2301      	movs	r3, #1
 802ac4c:	4631      	mov	r1, r6
 802ac4e:	4628      	mov	r0, r5
 802ac50:	9206      	str	r2, [sp, #24]
 802ac52:	47b8      	blx	r7
 802ac54:	3001      	adds	r0, #1
 802ac56:	f43f ae9c 	beq.w	802a992 <_printf_float+0xb6>
 802ac5a:	9a06      	ldr	r2, [sp, #24]
 802ac5c:	f10b 0b01 	add.w	fp, fp, #1
 802ac60:	e7bb      	b.n	802abda <_printf_float+0x2fe>
 802ac62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802ac66:	4631      	mov	r1, r6
 802ac68:	4628      	mov	r0, r5
 802ac6a:	47b8      	blx	r7
 802ac6c:	3001      	adds	r0, #1
 802ac6e:	d1c0      	bne.n	802abf2 <_printf_float+0x316>
 802ac70:	e68f      	b.n	802a992 <_printf_float+0xb6>
 802ac72:	9a06      	ldr	r2, [sp, #24]
 802ac74:	464b      	mov	r3, r9
 802ac76:	4442      	add	r2, r8
 802ac78:	4631      	mov	r1, r6
 802ac7a:	4628      	mov	r0, r5
 802ac7c:	47b8      	blx	r7
 802ac7e:	3001      	adds	r0, #1
 802ac80:	d1c3      	bne.n	802ac0a <_printf_float+0x32e>
 802ac82:	e686      	b.n	802a992 <_printf_float+0xb6>
 802ac84:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 802ac88:	f1ba 0f01 	cmp.w	sl, #1
 802ac8c:	dc01      	bgt.n	802ac92 <_printf_float+0x3b6>
 802ac8e:	07db      	lsls	r3, r3, #31
 802ac90:	d536      	bpl.n	802ad00 <_printf_float+0x424>
 802ac92:	2301      	movs	r3, #1
 802ac94:	4642      	mov	r2, r8
 802ac96:	4631      	mov	r1, r6
 802ac98:	4628      	mov	r0, r5
 802ac9a:	47b8      	blx	r7
 802ac9c:	3001      	adds	r0, #1
 802ac9e:	f43f ae78 	beq.w	802a992 <_printf_float+0xb6>
 802aca2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802aca6:	4631      	mov	r1, r6
 802aca8:	4628      	mov	r0, r5
 802acaa:	47b8      	blx	r7
 802acac:	3001      	adds	r0, #1
 802acae:	f43f ae70 	beq.w	802a992 <_printf_float+0xb6>
 802acb2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 802acb6:	2200      	movs	r2, #0
 802acb8:	2300      	movs	r3, #0
 802acba:	f10a 3aff 	add.w	sl, sl, #4294967295
 802acbe:	f7d5 ff23 	bl	8000b08 <__aeabi_dcmpeq>
 802acc2:	b9c0      	cbnz	r0, 802acf6 <_printf_float+0x41a>
 802acc4:	4653      	mov	r3, sl
 802acc6:	f108 0201 	add.w	r2, r8, #1
 802acca:	4631      	mov	r1, r6
 802accc:	4628      	mov	r0, r5
 802acce:	47b8      	blx	r7
 802acd0:	3001      	adds	r0, #1
 802acd2:	d10c      	bne.n	802acee <_printf_float+0x412>
 802acd4:	e65d      	b.n	802a992 <_printf_float+0xb6>
 802acd6:	2301      	movs	r3, #1
 802acd8:	465a      	mov	r2, fp
 802acda:	4631      	mov	r1, r6
 802acdc:	4628      	mov	r0, r5
 802acde:	47b8      	blx	r7
 802ace0:	3001      	adds	r0, #1
 802ace2:	f43f ae56 	beq.w	802a992 <_printf_float+0xb6>
 802ace6:	f108 0801 	add.w	r8, r8, #1
 802acea:	45d0      	cmp	r8, sl
 802acec:	dbf3      	blt.n	802acd6 <_printf_float+0x3fa>
 802acee:	464b      	mov	r3, r9
 802acf0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 802acf4:	e6df      	b.n	802aab6 <_printf_float+0x1da>
 802acf6:	f04f 0800 	mov.w	r8, #0
 802acfa:	f104 0b1a 	add.w	fp, r4, #26
 802acfe:	e7f4      	b.n	802acea <_printf_float+0x40e>
 802ad00:	2301      	movs	r3, #1
 802ad02:	4642      	mov	r2, r8
 802ad04:	e7e1      	b.n	802acca <_printf_float+0x3ee>
 802ad06:	2301      	movs	r3, #1
 802ad08:	464a      	mov	r2, r9
 802ad0a:	4631      	mov	r1, r6
 802ad0c:	4628      	mov	r0, r5
 802ad0e:	47b8      	blx	r7
 802ad10:	3001      	adds	r0, #1
 802ad12:	f43f ae3e 	beq.w	802a992 <_printf_float+0xb6>
 802ad16:	f108 0801 	add.w	r8, r8, #1
 802ad1a:	68e3      	ldr	r3, [r4, #12]
 802ad1c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802ad1e:	1a5b      	subs	r3, r3, r1
 802ad20:	4543      	cmp	r3, r8
 802ad22:	dcf0      	bgt.n	802ad06 <_printf_float+0x42a>
 802ad24:	e6fc      	b.n	802ab20 <_printf_float+0x244>
 802ad26:	f04f 0800 	mov.w	r8, #0
 802ad2a:	f104 0919 	add.w	r9, r4, #25
 802ad2e:	e7f4      	b.n	802ad1a <_printf_float+0x43e>

0802ad30 <_printf_common>:
 802ad30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802ad34:	4616      	mov	r6, r2
 802ad36:	4698      	mov	r8, r3
 802ad38:	688a      	ldr	r2, [r1, #8]
 802ad3a:	690b      	ldr	r3, [r1, #16]
 802ad3c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 802ad40:	4293      	cmp	r3, r2
 802ad42:	bfb8      	it	lt
 802ad44:	4613      	movlt	r3, r2
 802ad46:	6033      	str	r3, [r6, #0]
 802ad48:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 802ad4c:	4607      	mov	r7, r0
 802ad4e:	460c      	mov	r4, r1
 802ad50:	b10a      	cbz	r2, 802ad56 <_printf_common+0x26>
 802ad52:	3301      	adds	r3, #1
 802ad54:	6033      	str	r3, [r6, #0]
 802ad56:	6823      	ldr	r3, [r4, #0]
 802ad58:	0699      	lsls	r1, r3, #26
 802ad5a:	bf42      	ittt	mi
 802ad5c:	6833      	ldrmi	r3, [r6, #0]
 802ad5e:	3302      	addmi	r3, #2
 802ad60:	6033      	strmi	r3, [r6, #0]
 802ad62:	6825      	ldr	r5, [r4, #0]
 802ad64:	f015 0506 	ands.w	r5, r5, #6
 802ad68:	d106      	bne.n	802ad78 <_printf_common+0x48>
 802ad6a:	f104 0a19 	add.w	sl, r4, #25
 802ad6e:	68e3      	ldr	r3, [r4, #12]
 802ad70:	6832      	ldr	r2, [r6, #0]
 802ad72:	1a9b      	subs	r3, r3, r2
 802ad74:	42ab      	cmp	r3, r5
 802ad76:	dc26      	bgt.n	802adc6 <_printf_common+0x96>
 802ad78:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 802ad7c:	6822      	ldr	r2, [r4, #0]
 802ad7e:	3b00      	subs	r3, #0
 802ad80:	bf18      	it	ne
 802ad82:	2301      	movne	r3, #1
 802ad84:	0692      	lsls	r2, r2, #26
 802ad86:	d42b      	bmi.n	802ade0 <_printf_common+0xb0>
 802ad88:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 802ad8c:	4641      	mov	r1, r8
 802ad8e:	4638      	mov	r0, r7
 802ad90:	47c8      	blx	r9
 802ad92:	3001      	adds	r0, #1
 802ad94:	d01e      	beq.n	802add4 <_printf_common+0xa4>
 802ad96:	6823      	ldr	r3, [r4, #0]
 802ad98:	6922      	ldr	r2, [r4, #16]
 802ad9a:	f003 0306 	and.w	r3, r3, #6
 802ad9e:	2b04      	cmp	r3, #4
 802ada0:	bf02      	ittt	eq
 802ada2:	68e5      	ldreq	r5, [r4, #12]
 802ada4:	6833      	ldreq	r3, [r6, #0]
 802ada6:	1aed      	subeq	r5, r5, r3
 802ada8:	68a3      	ldr	r3, [r4, #8]
 802adaa:	bf0c      	ite	eq
 802adac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802adb0:	2500      	movne	r5, #0
 802adb2:	4293      	cmp	r3, r2
 802adb4:	bfc4      	itt	gt
 802adb6:	1a9b      	subgt	r3, r3, r2
 802adb8:	18ed      	addgt	r5, r5, r3
 802adba:	2600      	movs	r6, #0
 802adbc:	341a      	adds	r4, #26
 802adbe:	42b5      	cmp	r5, r6
 802adc0:	d11a      	bne.n	802adf8 <_printf_common+0xc8>
 802adc2:	2000      	movs	r0, #0
 802adc4:	e008      	b.n	802add8 <_printf_common+0xa8>
 802adc6:	2301      	movs	r3, #1
 802adc8:	4652      	mov	r2, sl
 802adca:	4641      	mov	r1, r8
 802adcc:	4638      	mov	r0, r7
 802adce:	47c8      	blx	r9
 802add0:	3001      	adds	r0, #1
 802add2:	d103      	bne.n	802addc <_printf_common+0xac>
 802add4:	f04f 30ff 	mov.w	r0, #4294967295
 802add8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802addc:	3501      	adds	r5, #1
 802adde:	e7c6      	b.n	802ad6e <_printf_common+0x3e>
 802ade0:	18e1      	adds	r1, r4, r3
 802ade2:	1c5a      	adds	r2, r3, #1
 802ade4:	2030      	movs	r0, #48	@ 0x30
 802ade6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 802adea:	4422      	add	r2, r4
 802adec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 802adf0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 802adf4:	3302      	adds	r3, #2
 802adf6:	e7c7      	b.n	802ad88 <_printf_common+0x58>
 802adf8:	2301      	movs	r3, #1
 802adfa:	4622      	mov	r2, r4
 802adfc:	4641      	mov	r1, r8
 802adfe:	4638      	mov	r0, r7
 802ae00:	47c8      	blx	r9
 802ae02:	3001      	adds	r0, #1
 802ae04:	d0e6      	beq.n	802add4 <_printf_common+0xa4>
 802ae06:	3601      	adds	r6, #1
 802ae08:	e7d9      	b.n	802adbe <_printf_common+0x8e>
	...

0802ae0c <_printf_i>:
 802ae0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802ae10:	7e0f      	ldrb	r7, [r1, #24]
 802ae12:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 802ae14:	2f78      	cmp	r7, #120	@ 0x78
 802ae16:	4691      	mov	r9, r2
 802ae18:	4680      	mov	r8, r0
 802ae1a:	460c      	mov	r4, r1
 802ae1c:	469a      	mov	sl, r3
 802ae1e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 802ae22:	d807      	bhi.n	802ae34 <_printf_i+0x28>
 802ae24:	2f62      	cmp	r7, #98	@ 0x62
 802ae26:	d80a      	bhi.n	802ae3e <_printf_i+0x32>
 802ae28:	2f00      	cmp	r7, #0
 802ae2a:	f000 80d2 	beq.w	802afd2 <_printf_i+0x1c6>
 802ae2e:	2f58      	cmp	r7, #88	@ 0x58
 802ae30:	f000 80b9 	beq.w	802afa6 <_printf_i+0x19a>
 802ae34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 802ae38:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 802ae3c:	e03a      	b.n	802aeb4 <_printf_i+0xa8>
 802ae3e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 802ae42:	2b15      	cmp	r3, #21
 802ae44:	d8f6      	bhi.n	802ae34 <_printf_i+0x28>
 802ae46:	a101      	add	r1, pc, #4	@ (adr r1, 802ae4c <_printf_i+0x40>)
 802ae48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802ae4c:	0802aea5 	.word	0x0802aea5
 802ae50:	0802aeb9 	.word	0x0802aeb9
 802ae54:	0802ae35 	.word	0x0802ae35
 802ae58:	0802ae35 	.word	0x0802ae35
 802ae5c:	0802ae35 	.word	0x0802ae35
 802ae60:	0802ae35 	.word	0x0802ae35
 802ae64:	0802aeb9 	.word	0x0802aeb9
 802ae68:	0802ae35 	.word	0x0802ae35
 802ae6c:	0802ae35 	.word	0x0802ae35
 802ae70:	0802ae35 	.word	0x0802ae35
 802ae74:	0802ae35 	.word	0x0802ae35
 802ae78:	0802afb9 	.word	0x0802afb9
 802ae7c:	0802aee3 	.word	0x0802aee3
 802ae80:	0802af73 	.word	0x0802af73
 802ae84:	0802ae35 	.word	0x0802ae35
 802ae88:	0802ae35 	.word	0x0802ae35
 802ae8c:	0802afdb 	.word	0x0802afdb
 802ae90:	0802ae35 	.word	0x0802ae35
 802ae94:	0802aee3 	.word	0x0802aee3
 802ae98:	0802ae35 	.word	0x0802ae35
 802ae9c:	0802ae35 	.word	0x0802ae35
 802aea0:	0802af7b 	.word	0x0802af7b
 802aea4:	6833      	ldr	r3, [r6, #0]
 802aea6:	1d1a      	adds	r2, r3, #4
 802aea8:	681b      	ldr	r3, [r3, #0]
 802aeaa:	6032      	str	r2, [r6, #0]
 802aeac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 802aeb0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 802aeb4:	2301      	movs	r3, #1
 802aeb6:	e09d      	b.n	802aff4 <_printf_i+0x1e8>
 802aeb8:	6833      	ldr	r3, [r6, #0]
 802aeba:	6820      	ldr	r0, [r4, #0]
 802aebc:	1d19      	adds	r1, r3, #4
 802aebe:	6031      	str	r1, [r6, #0]
 802aec0:	0606      	lsls	r6, r0, #24
 802aec2:	d501      	bpl.n	802aec8 <_printf_i+0xbc>
 802aec4:	681d      	ldr	r5, [r3, #0]
 802aec6:	e003      	b.n	802aed0 <_printf_i+0xc4>
 802aec8:	0645      	lsls	r5, r0, #25
 802aeca:	d5fb      	bpl.n	802aec4 <_printf_i+0xb8>
 802aecc:	f9b3 5000 	ldrsh.w	r5, [r3]
 802aed0:	2d00      	cmp	r5, #0
 802aed2:	da03      	bge.n	802aedc <_printf_i+0xd0>
 802aed4:	232d      	movs	r3, #45	@ 0x2d
 802aed6:	426d      	negs	r5, r5
 802aed8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802aedc:	4859      	ldr	r0, [pc, #356]	@ (802b044 <_printf_i+0x238>)
 802aede:	230a      	movs	r3, #10
 802aee0:	e011      	b.n	802af06 <_printf_i+0xfa>
 802aee2:	6821      	ldr	r1, [r4, #0]
 802aee4:	6833      	ldr	r3, [r6, #0]
 802aee6:	0608      	lsls	r0, r1, #24
 802aee8:	f853 5b04 	ldr.w	r5, [r3], #4
 802aeec:	d402      	bmi.n	802aef4 <_printf_i+0xe8>
 802aeee:	0649      	lsls	r1, r1, #25
 802aef0:	bf48      	it	mi
 802aef2:	b2ad      	uxthmi	r5, r5
 802aef4:	2f6f      	cmp	r7, #111	@ 0x6f
 802aef6:	4853      	ldr	r0, [pc, #332]	@ (802b044 <_printf_i+0x238>)
 802aef8:	6033      	str	r3, [r6, #0]
 802aefa:	bf14      	ite	ne
 802aefc:	230a      	movne	r3, #10
 802aefe:	2308      	moveq	r3, #8
 802af00:	2100      	movs	r1, #0
 802af02:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 802af06:	6866      	ldr	r6, [r4, #4]
 802af08:	60a6      	str	r6, [r4, #8]
 802af0a:	2e00      	cmp	r6, #0
 802af0c:	bfa2      	ittt	ge
 802af0e:	6821      	ldrge	r1, [r4, #0]
 802af10:	f021 0104 	bicge.w	r1, r1, #4
 802af14:	6021      	strge	r1, [r4, #0]
 802af16:	b90d      	cbnz	r5, 802af1c <_printf_i+0x110>
 802af18:	2e00      	cmp	r6, #0
 802af1a:	d04b      	beq.n	802afb4 <_printf_i+0x1a8>
 802af1c:	4616      	mov	r6, r2
 802af1e:	fbb5 f1f3 	udiv	r1, r5, r3
 802af22:	fb03 5711 	mls	r7, r3, r1, r5
 802af26:	5dc7      	ldrb	r7, [r0, r7]
 802af28:	f806 7d01 	strb.w	r7, [r6, #-1]!
 802af2c:	462f      	mov	r7, r5
 802af2e:	42bb      	cmp	r3, r7
 802af30:	460d      	mov	r5, r1
 802af32:	d9f4      	bls.n	802af1e <_printf_i+0x112>
 802af34:	2b08      	cmp	r3, #8
 802af36:	d10b      	bne.n	802af50 <_printf_i+0x144>
 802af38:	6823      	ldr	r3, [r4, #0]
 802af3a:	07df      	lsls	r7, r3, #31
 802af3c:	d508      	bpl.n	802af50 <_printf_i+0x144>
 802af3e:	6923      	ldr	r3, [r4, #16]
 802af40:	6861      	ldr	r1, [r4, #4]
 802af42:	4299      	cmp	r1, r3
 802af44:	bfde      	ittt	le
 802af46:	2330      	movle	r3, #48	@ 0x30
 802af48:	f806 3c01 	strble.w	r3, [r6, #-1]
 802af4c:	f106 36ff 	addle.w	r6, r6, #4294967295
 802af50:	1b92      	subs	r2, r2, r6
 802af52:	6122      	str	r2, [r4, #16]
 802af54:	f8cd a000 	str.w	sl, [sp]
 802af58:	464b      	mov	r3, r9
 802af5a:	aa03      	add	r2, sp, #12
 802af5c:	4621      	mov	r1, r4
 802af5e:	4640      	mov	r0, r8
 802af60:	f7ff fee6 	bl	802ad30 <_printf_common>
 802af64:	3001      	adds	r0, #1
 802af66:	d14a      	bne.n	802affe <_printf_i+0x1f2>
 802af68:	f04f 30ff 	mov.w	r0, #4294967295
 802af6c:	b004      	add	sp, #16
 802af6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802af72:	6823      	ldr	r3, [r4, #0]
 802af74:	f043 0320 	orr.w	r3, r3, #32
 802af78:	6023      	str	r3, [r4, #0]
 802af7a:	4833      	ldr	r0, [pc, #204]	@ (802b048 <_printf_i+0x23c>)
 802af7c:	2778      	movs	r7, #120	@ 0x78
 802af7e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 802af82:	6823      	ldr	r3, [r4, #0]
 802af84:	6831      	ldr	r1, [r6, #0]
 802af86:	061f      	lsls	r7, r3, #24
 802af88:	f851 5b04 	ldr.w	r5, [r1], #4
 802af8c:	d402      	bmi.n	802af94 <_printf_i+0x188>
 802af8e:	065f      	lsls	r7, r3, #25
 802af90:	bf48      	it	mi
 802af92:	b2ad      	uxthmi	r5, r5
 802af94:	6031      	str	r1, [r6, #0]
 802af96:	07d9      	lsls	r1, r3, #31
 802af98:	bf44      	itt	mi
 802af9a:	f043 0320 	orrmi.w	r3, r3, #32
 802af9e:	6023      	strmi	r3, [r4, #0]
 802afa0:	b11d      	cbz	r5, 802afaa <_printf_i+0x19e>
 802afa2:	2310      	movs	r3, #16
 802afa4:	e7ac      	b.n	802af00 <_printf_i+0xf4>
 802afa6:	4827      	ldr	r0, [pc, #156]	@ (802b044 <_printf_i+0x238>)
 802afa8:	e7e9      	b.n	802af7e <_printf_i+0x172>
 802afaa:	6823      	ldr	r3, [r4, #0]
 802afac:	f023 0320 	bic.w	r3, r3, #32
 802afb0:	6023      	str	r3, [r4, #0]
 802afb2:	e7f6      	b.n	802afa2 <_printf_i+0x196>
 802afb4:	4616      	mov	r6, r2
 802afb6:	e7bd      	b.n	802af34 <_printf_i+0x128>
 802afb8:	6833      	ldr	r3, [r6, #0]
 802afba:	6825      	ldr	r5, [r4, #0]
 802afbc:	6961      	ldr	r1, [r4, #20]
 802afbe:	1d18      	adds	r0, r3, #4
 802afc0:	6030      	str	r0, [r6, #0]
 802afc2:	062e      	lsls	r6, r5, #24
 802afc4:	681b      	ldr	r3, [r3, #0]
 802afc6:	d501      	bpl.n	802afcc <_printf_i+0x1c0>
 802afc8:	6019      	str	r1, [r3, #0]
 802afca:	e002      	b.n	802afd2 <_printf_i+0x1c6>
 802afcc:	0668      	lsls	r0, r5, #25
 802afce:	d5fb      	bpl.n	802afc8 <_printf_i+0x1bc>
 802afd0:	8019      	strh	r1, [r3, #0]
 802afd2:	2300      	movs	r3, #0
 802afd4:	6123      	str	r3, [r4, #16]
 802afd6:	4616      	mov	r6, r2
 802afd8:	e7bc      	b.n	802af54 <_printf_i+0x148>
 802afda:	6833      	ldr	r3, [r6, #0]
 802afdc:	1d1a      	adds	r2, r3, #4
 802afde:	6032      	str	r2, [r6, #0]
 802afe0:	681e      	ldr	r6, [r3, #0]
 802afe2:	6862      	ldr	r2, [r4, #4]
 802afe4:	2100      	movs	r1, #0
 802afe6:	4630      	mov	r0, r6
 802afe8:	f7d5 f912 	bl	8000210 <memchr>
 802afec:	b108      	cbz	r0, 802aff2 <_printf_i+0x1e6>
 802afee:	1b80      	subs	r0, r0, r6
 802aff0:	6060      	str	r0, [r4, #4]
 802aff2:	6863      	ldr	r3, [r4, #4]
 802aff4:	6123      	str	r3, [r4, #16]
 802aff6:	2300      	movs	r3, #0
 802aff8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802affc:	e7aa      	b.n	802af54 <_printf_i+0x148>
 802affe:	6923      	ldr	r3, [r4, #16]
 802b000:	4632      	mov	r2, r6
 802b002:	4649      	mov	r1, r9
 802b004:	4640      	mov	r0, r8
 802b006:	47d0      	blx	sl
 802b008:	3001      	adds	r0, #1
 802b00a:	d0ad      	beq.n	802af68 <_printf_i+0x15c>
 802b00c:	6823      	ldr	r3, [r4, #0]
 802b00e:	079b      	lsls	r3, r3, #30
 802b010:	d413      	bmi.n	802b03a <_printf_i+0x22e>
 802b012:	68e0      	ldr	r0, [r4, #12]
 802b014:	9b03      	ldr	r3, [sp, #12]
 802b016:	4298      	cmp	r0, r3
 802b018:	bfb8      	it	lt
 802b01a:	4618      	movlt	r0, r3
 802b01c:	e7a6      	b.n	802af6c <_printf_i+0x160>
 802b01e:	2301      	movs	r3, #1
 802b020:	4632      	mov	r2, r6
 802b022:	4649      	mov	r1, r9
 802b024:	4640      	mov	r0, r8
 802b026:	47d0      	blx	sl
 802b028:	3001      	adds	r0, #1
 802b02a:	d09d      	beq.n	802af68 <_printf_i+0x15c>
 802b02c:	3501      	adds	r5, #1
 802b02e:	68e3      	ldr	r3, [r4, #12]
 802b030:	9903      	ldr	r1, [sp, #12]
 802b032:	1a5b      	subs	r3, r3, r1
 802b034:	42ab      	cmp	r3, r5
 802b036:	dcf2      	bgt.n	802b01e <_printf_i+0x212>
 802b038:	e7eb      	b.n	802b012 <_printf_i+0x206>
 802b03a:	2500      	movs	r5, #0
 802b03c:	f104 0619 	add.w	r6, r4, #25
 802b040:	e7f5      	b.n	802b02e <_printf_i+0x222>
 802b042:	bf00      	nop
 802b044:	08042ba4 	.word	0x08042ba4
 802b048:	08042bb5 	.word	0x08042bb5

0802b04c <__sflush_r>:
 802b04c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 802b050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802b054:	0716      	lsls	r6, r2, #28
 802b056:	4605      	mov	r5, r0
 802b058:	460c      	mov	r4, r1
 802b05a:	d454      	bmi.n	802b106 <__sflush_r+0xba>
 802b05c:	684b      	ldr	r3, [r1, #4]
 802b05e:	2b00      	cmp	r3, #0
 802b060:	dc02      	bgt.n	802b068 <__sflush_r+0x1c>
 802b062:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 802b064:	2b00      	cmp	r3, #0
 802b066:	dd48      	ble.n	802b0fa <__sflush_r+0xae>
 802b068:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802b06a:	2e00      	cmp	r6, #0
 802b06c:	d045      	beq.n	802b0fa <__sflush_r+0xae>
 802b06e:	2300      	movs	r3, #0
 802b070:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 802b074:	682f      	ldr	r7, [r5, #0]
 802b076:	6a21      	ldr	r1, [r4, #32]
 802b078:	602b      	str	r3, [r5, #0]
 802b07a:	d030      	beq.n	802b0de <__sflush_r+0x92>
 802b07c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 802b07e:	89a3      	ldrh	r3, [r4, #12]
 802b080:	0759      	lsls	r1, r3, #29
 802b082:	d505      	bpl.n	802b090 <__sflush_r+0x44>
 802b084:	6863      	ldr	r3, [r4, #4]
 802b086:	1ad2      	subs	r2, r2, r3
 802b088:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802b08a:	b10b      	cbz	r3, 802b090 <__sflush_r+0x44>
 802b08c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 802b08e:	1ad2      	subs	r2, r2, r3
 802b090:	2300      	movs	r3, #0
 802b092:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802b094:	6a21      	ldr	r1, [r4, #32]
 802b096:	4628      	mov	r0, r5
 802b098:	47b0      	blx	r6
 802b09a:	1c43      	adds	r3, r0, #1
 802b09c:	89a3      	ldrh	r3, [r4, #12]
 802b09e:	d106      	bne.n	802b0ae <__sflush_r+0x62>
 802b0a0:	6829      	ldr	r1, [r5, #0]
 802b0a2:	291d      	cmp	r1, #29
 802b0a4:	d82b      	bhi.n	802b0fe <__sflush_r+0xb2>
 802b0a6:	4a2a      	ldr	r2, [pc, #168]	@ (802b150 <__sflush_r+0x104>)
 802b0a8:	410a      	asrs	r2, r1
 802b0aa:	07d6      	lsls	r6, r2, #31
 802b0ac:	d427      	bmi.n	802b0fe <__sflush_r+0xb2>
 802b0ae:	2200      	movs	r2, #0
 802b0b0:	6062      	str	r2, [r4, #4]
 802b0b2:	04d9      	lsls	r1, r3, #19
 802b0b4:	6922      	ldr	r2, [r4, #16]
 802b0b6:	6022      	str	r2, [r4, #0]
 802b0b8:	d504      	bpl.n	802b0c4 <__sflush_r+0x78>
 802b0ba:	1c42      	adds	r2, r0, #1
 802b0bc:	d101      	bne.n	802b0c2 <__sflush_r+0x76>
 802b0be:	682b      	ldr	r3, [r5, #0]
 802b0c0:	b903      	cbnz	r3, 802b0c4 <__sflush_r+0x78>
 802b0c2:	6560      	str	r0, [r4, #84]	@ 0x54
 802b0c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802b0c6:	602f      	str	r7, [r5, #0]
 802b0c8:	b1b9      	cbz	r1, 802b0fa <__sflush_r+0xae>
 802b0ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802b0ce:	4299      	cmp	r1, r3
 802b0d0:	d002      	beq.n	802b0d8 <__sflush_r+0x8c>
 802b0d2:	4628      	mov	r0, r5
 802b0d4:	f001 fa04 	bl	802c4e0 <_free_r>
 802b0d8:	2300      	movs	r3, #0
 802b0da:	6363      	str	r3, [r4, #52]	@ 0x34
 802b0dc:	e00d      	b.n	802b0fa <__sflush_r+0xae>
 802b0de:	2301      	movs	r3, #1
 802b0e0:	4628      	mov	r0, r5
 802b0e2:	47b0      	blx	r6
 802b0e4:	4602      	mov	r2, r0
 802b0e6:	1c50      	adds	r0, r2, #1
 802b0e8:	d1c9      	bne.n	802b07e <__sflush_r+0x32>
 802b0ea:	682b      	ldr	r3, [r5, #0]
 802b0ec:	2b00      	cmp	r3, #0
 802b0ee:	d0c6      	beq.n	802b07e <__sflush_r+0x32>
 802b0f0:	2b1d      	cmp	r3, #29
 802b0f2:	d001      	beq.n	802b0f8 <__sflush_r+0xac>
 802b0f4:	2b16      	cmp	r3, #22
 802b0f6:	d11e      	bne.n	802b136 <__sflush_r+0xea>
 802b0f8:	602f      	str	r7, [r5, #0]
 802b0fa:	2000      	movs	r0, #0
 802b0fc:	e022      	b.n	802b144 <__sflush_r+0xf8>
 802b0fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802b102:	b21b      	sxth	r3, r3
 802b104:	e01b      	b.n	802b13e <__sflush_r+0xf2>
 802b106:	690f      	ldr	r7, [r1, #16]
 802b108:	2f00      	cmp	r7, #0
 802b10a:	d0f6      	beq.n	802b0fa <__sflush_r+0xae>
 802b10c:	0793      	lsls	r3, r2, #30
 802b10e:	680e      	ldr	r6, [r1, #0]
 802b110:	bf08      	it	eq
 802b112:	694b      	ldreq	r3, [r1, #20]
 802b114:	600f      	str	r7, [r1, #0]
 802b116:	bf18      	it	ne
 802b118:	2300      	movne	r3, #0
 802b11a:	eba6 0807 	sub.w	r8, r6, r7
 802b11e:	608b      	str	r3, [r1, #8]
 802b120:	f1b8 0f00 	cmp.w	r8, #0
 802b124:	dde9      	ble.n	802b0fa <__sflush_r+0xae>
 802b126:	6a21      	ldr	r1, [r4, #32]
 802b128:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 802b12a:	4643      	mov	r3, r8
 802b12c:	463a      	mov	r2, r7
 802b12e:	4628      	mov	r0, r5
 802b130:	47b0      	blx	r6
 802b132:	2800      	cmp	r0, #0
 802b134:	dc08      	bgt.n	802b148 <__sflush_r+0xfc>
 802b136:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802b13a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802b13e:	81a3      	strh	r3, [r4, #12]
 802b140:	f04f 30ff 	mov.w	r0, #4294967295
 802b144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802b148:	4407      	add	r7, r0
 802b14a:	eba8 0800 	sub.w	r8, r8, r0
 802b14e:	e7e7      	b.n	802b120 <__sflush_r+0xd4>
 802b150:	dfbffffe 	.word	0xdfbffffe

0802b154 <_fflush_r>:
 802b154:	b538      	push	{r3, r4, r5, lr}
 802b156:	690b      	ldr	r3, [r1, #16]
 802b158:	4605      	mov	r5, r0
 802b15a:	460c      	mov	r4, r1
 802b15c:	b913      	cbnz	r3, 802b164 <_fflush_r+0x10>
 802b15e:	2500      	movs	r5, #0
 802b160:	4628      	mov	r0, r5
 802b162:	bd38      	pop	{r3, r4, r5, pc}
 802b164:	b118      	cbz	r0, 802b16e <_fflush_r+0x1a>
 802b166:	6a03      	ldr	r3, [r0, #32]
 802b168:	b90b      	cbnz	r3, 802b16e <_fflush_r+0x1a>
 802b16a:	f000 f8a7 	bl	802b2bc <__sinit>
 802b16e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802b172:	2b00      	cmp	r3, #0
 802b174:	d0f3      	beq.n	802b15e <_fflush_r+0xa>
 802b176:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 802b178:	07d0      	lsls	r0, r2, #31
 802b17a:	d404      	bmi.n	802b186 <_fflush_r+0x32>
 802b17c:	0599      	lsls	r1, r3, #22
 802b17e:	d402      	bmi.n	802b186 <_fflush_r+0x32>
 802b180:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802b182:	f000 faf4 	bl	802b76e <__retarget_lock_acquire_recursive>
 802b186:	4628      	mov	r0, r5
 802b188:	4621      	mov	r1, r4
 802b18a:	f7ff ff5f 	bl	802b04c <__sflush_r>
 802b18e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802b190:	07da      	lsls	r2, r3, #31
 802b192:	4605      	mov	r5, r0
 802b194:	d4e4      	bmi.n	802b160 <_fflush_r+0xc>
 802b196:	89a3      	ldrh	r3, [r4, #12]
 802b198:	059b      	lsls	r3, r3, #22
 802b19a:	d4e1      	bmi.n	802b160 <_fflush_r+0xc>
 802b19c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802b19e:	f000 fae7 	bl	802b770 <__retarget_lock_release_recursive>
 802b1a2:	e7dd      	b.n	802b160 <_fflush_r+0xc>

0802b1a4 <std>:
 802b1a4:	2300      	movs	r3, #0
 802b1a6:	b510      	push	{r4, lr}
 802b1a8:	4604      	mov	r4, r0
 802b1aa:	e9c0 3300 	strd	r3, r3, [r0]
 802b1ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802b1b2:	6083      	str	r3, [r0, #8]
 802b1b4:	8181      	strh	r1, [r0, #12]
 802b1b6:	6643      	str	r3, [r0, #100]	@ 0x64
 802b1b8:	81c2      	strh	r2, [r0, #14]
 802b1ba:	6183      	str	r3, [r0, #24]
 802b1bc:	4619      	mov	r1, r3
 802b1be:	2208      	movs	r2, #8
 802b1c0:	305c      	adds	r0, #92	@ 0x5c
 802b1c2:	f000 f9ad 	bl	802b520 <memset>
 802b1c6:	4b0d      	ldr	r3, [pc, #52]	@ (802b1fc <std+0x58>)
 802b1c8:	6263      	str	r3, [r4, #36]	@ 0x24
 802b1ca:	4b0d      	ldr	r3, [pc, #52]	@ (802b200 <std+0x5c>)
 802b1cc:	62a3      	str	r3, [r4, #40]	@ 0x28
 802b1ce:	4b0d      	ldr	r3, [pc, #52]	@ (802b204 <std+0x60>)
 802b1d0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 802b1d2:	4b0d      	ldr	r3, [pc, #52]	@ (802b208 <std+0x64>)
 802b1d4:	6323      	str	r3, [r4, #48]	@ 0x30
 802b1d6:	4b0d      	ldr	r3, [pc, #52]	@ (802b20c <std+0x68>)
 802b1d8:	6224      	str	r4, [r4, #32]
 802b1da:	429c      	cmp	r4, r3
 802b1dc:	d006      	beq.n	802b1ec <std+0x48>
 802b1de:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 802b1e2:	4294      	cmp	r4, r2
 802b1e4:	d002      	beq.n	802b1ec <std+0x48>
 802b1e6:	33d0      	adds	r3, #208	@ 0xd0
 802b1e8:	429c      	cmp	r4, r3
 802b1ea:	d105      	bne.n	802b1f8 <std+0x54>
 802b1ec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 802b1f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802b1f4:	f000 baba 	b.w	802b76c <__retarget_lock_init_recursive>
 802b1f8:	bd10      	pop	{r4, pc}
 802b1fa:	bf00      	nop
 802b1fc:	0802b371 	.word	0x0802b371
 802b200:	0802b393 	.word	0x0802b393
 802b204:	0802b3cb 	.word	0x0802b3cb
 802b208:	0802b3ef 	.word	0x0802b3ef
 802b20c:	2002a838 	.word	0x2002a838

0802b210 <stdio_exit_handler>:
 802b210:	4a02      	ldr	r2, [pc, #8]	@ (802b21c <stdio_exit_handler+0xc>)
 802b212:	4903      	ldr	r1, [pc, #12]	@ (802b220 <stdio_exit_handler+0x10>)
 802b214:	4803      	ldr	r0, [pc, #12]	@ (802b224 <stdio_exit_handler+0x14>)
 802b216:	f000 b87b 	b.w	802b310 <_fwalk_sglue>
 802b21a:	bf00      	nop
 802b21c:	20007b30 	.word	0x20007b30
 802b220:	0802b155 	.word	0x0802b155
 802b224:	20007b40 	.word	0x20007b40

0802b228 <cleanup_stdio>:
 802b228:	6841      	ldr	r1, [r0, #4]
 802b22a:	4b0c      	ldr	r3, [pc, #48]	@ (802b25c <cleanup_stdio+0x34>)
 802b22c:	4299      	cmp	r1, r3
 802b22e:	b510      	push	{r4, lr}
 802b230:	4604      	mov	r4, r0
 802b232:	d001      	beq.n	802b238 <cleanup_stdio+0x10>
 802b234:	f7ff ff8e 	bl	802b154 <_fflush_r>
 802b238:	68a1      	ldr	r1, [r4, #8]
 802b23a:	4b09      	ldr	r3, [pc, #36]	@ (802b260 <cleanup_stdio+0x38>)
 802b23c:	4299      	cmp	r1, r3
 802b23e:	d002      	beq.n	802b246 <cleanup_stdio+0x1e>
 802b240:	4620      	mov	r0, r4
 802b242:	f7ff ff87 	bl	802b154 <_fflush_r>
 802b246:	68e1      	ldr	r1, [r4, #12]
 802b248:	4b06      	ldr	r3, [pc, #24]	@ (802b264 <cleanup_stdio+0x3c>)
 802b24a:	4299      	cmp	r1, r3
 802b24c:	d004      	beq.n	802b258 <cleanup_stdio+0x30>
 802b24e:	4620      	mov	r0, r4
 802b250:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802b254:	f7ff bf7e 	b.w	802b154 <_fflush_r>
 802b258:	bd10      	pop	{r4, pc}
 802b25a:	bf00      	nop
 802b25c:	2002a838 	.word	0x2002a838
 802b260:	2002a8a0 	.word	0x2002a8a0
 802b264:	2002a908 	.word	0x2002a908

0802b268 <global_stdio_init.part.0>:
 802b268:	b510      	push	{r4, lr}
 802b26a:	4b0b      	ldr	r3, [pc, #44]	@ (802b298 <global_stdio_init.part.0+0x30>)
 802b26c:	4c0b      	ldr	r4, [pc, #44]	@ (802b29c <global_stdio_init.part.0+0x34>)
 802b26e:	4a0c      	ldr	r2, [pc, #48]	@ (802b2a0 <global_stdio_init.part.0+0x38>)
 802b270:	601a      	str	r2, [r3, #0]
 802b272:	4620      	mov	r0, r4
 802b274:	2200      	movs	r2, #0
 802b276:	2104      	movs	r1, #4
 802b278:	f7ff ff94 	bl	802b1a4 <std>
 802b27c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 802b280:	2201      	movs	r2, #1
 802b282:	2109      	movs	r1, #9
 802b284:	f7ff ff8e 	bl	802b1a4 <std>
 802b288:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 802b28c:	2202      	movs	r2, #2
 802b28e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802b292:	2112      	movs	r1, #18
 802b294:	f7ff bf86 	b.w	802b1a4 <std>
 802b298:	2002a970 	.word	0x2002a970
 802b29c:	2002a838 	.word	0x2002a838
 802b2a0:	0802b211 	.word	0x0802b211

0802b2a4 <__sfp_lock_acquire>:
 802b2a4:	4801      	ldr	r0, [pc, #4]	@ (802b2ac <__sfp_lock_acquire+0x8>)
 802b2a6:	f000 ba62 	b.w	802b76e <__retarget_lock_acquire_recursive>
 802b2aa:	bf00      	nop
 802b2ac:	2002a97a 	.word	0x2002a97a

0802b2b0 <__sfp_lock_release>:
 802b2b0:	4801      	ldr	r0, [pc, #4]	@ (802b2b8 <__sfp_lock_release+0x8>)
 802b2b2:	f000 ba5d 	b.w	802b770 <__retarget_lock_release_recursive>
 802b2b6:	bf00      	nop
 802b2b8:	2002a97a 	.word	0x2002a97a

0802b2bc <__sinit>:
 802b2bc:	b510      	push	{r4, lr}
 802b2be:	4604      	mov	r4, r0
 802b2c0:	f7ff fff0 	bl	802b2a4 <__sfp_lock_acquire>
 802b2c4:	6a23      	ldr	r3, [r4, #32]
 802b2c6:	b11b      	cbz	r3, 802b2d0 <__sinit+0x14>
 802b2c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802b2cc:	f7ff bff0 	b.w	802b2b0 <__sfp_lock_release>
 802b2d0:	4b04      	ldr	r3, [pc, #16]	@ (802b2e4 <__sinit+0x28>)
 802b2d2:	6223      	str	r3, [r4, #32]
 802b2d4:	4b04      	ldr	r3, [pc, #16]	@ (802b2e8 <__sinit+0x2c>)
 802b2d6:	681b      	ldr	r3, [r3, #0]
 802b2d8:	2b00      	cmp	r3, #0
 802b2da:	d1f5      	bne.n	802b2c8 <__sinit+0xc>
 802b2dc:	f7ff ffc4 	bl	802b268 <global_stdio_init.part.0>
 802b2e0:	e7f2      	b.n	802b2c8 <__sinit+0xc>
 802b2e2:	bf00      	nop
 802b2e4:	0802b229 	.word	0x0802b229
 802b2e8:	2002a970 	.word	0x2002a970

0802b2ec <fiprintf>:
 802b2ec:	b40e      	push	{r1, r2, r3}
 802b2ee:	b503      	push	{r0, r1, lr}
 802b2f0:	4601      	mov	r1, r0
 802b2f2:	ab03      	add	r3, sp, #12
 802b2f4:	4805      	ldr	r0, [pc, #20]	@ (802b30c <fiprintf+0x20>)
 802b2f6:	f853 2b04 	ldr.w	r2, [r3], #4
 802b2fa:	6800      	ldr	r0, [r0, #0]
 802b2fc:	9301      	str	r3, [sp, #4]
 802b2fe:	f001 fce5 	bl	802cccc <_vfiprintf_r>
 802b302:	b002      	add	sp, #8
 802b304:	f85d eb04 	ldr.w	lr, [sp], #4
 802b308:	b003      	add	sp, #12
 802b30a:	4770      	bx	lr
 802b30c:	20007b3c 	.word	0x20007b3c

0802b310 <_fwalk_sglue>:
 802b310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802b314:	4607      	mov	r7, r0
 802b316:	4688      	mov	r8, r1
 802b318:	4614      	mov	r4, r2
 802b31a:	2600      	movs	r6, #0
 802b31c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802b320:	f1b9 0901 	subs.w	r9, r9, #1
 802b324:	d505      	bpl.n	802b332 <_fwalk_sglue+0x22>
 802b326:	6824      	ldr	r4, [r4, #0]
 802b328:	2c00      	cmp	r4, #0
 802b32a:	d1f7      	bne.n	802b31c <_fwalk_sglue+0xc>
 802b32c:	4630      	mov	r0, r6
 802b32e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802b332:	89ab      	ldrh	r3, [r5, #12]
 802b334:	2b01      	cmp	r3, #1
 802b336:	d907      	bls.n	802b348 <_fwalk_sglue+0x38>
 802b338:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802b33c:	3301      	adds	r3, #1
 802b33e:	d003      	beq.n	802b348 <_fwalk_sglue+0x38>
 802b340:	4629      	mov	r1, r5
 802b342:	4638      	mov	r0, r7
 802b344:	47c0      	blx	r8
 802b346:	4306      	orrs	r6, r0
 802b348:	3568      	adds	r5, #104	@ 0x68
 802b34a:	e7e9      	b.n	802b320 <_fwalk_sglue+0x10>

0802b34c <iprintf>:
 802b34c:	b40f      	push	{r0, r1, r2, r3}
 802b34e:	b507      	push	{r0, r1, r2, lr}
 802b350:	4906      	ldr	r1, [pc, #24]	@ (802b36c <iprintf+0x20>)
 802b352:	ab04      	add	r3, sp, #16
 802b354:	6808      	ldr	r0, [r1, #0]
 802b356:	f853 2b04 	ldr.w	r2, [r3], #4
 802b35a:	6881      	ldr	r1, [r0, #8]
 802b35c:	9301      	str	r3, [sp, #4]
 802b35e:	f001 fcb5 	bl	802cccc <_vfiprintf_r>
 802b362:	b003      	add	sp, #12
 802b364:	f85d eb04 	ldr.w	lr, [sp], #4
 802b368:	b004      	add	sp, #16
 802b36a:	4770      	bx	lr
 802b36c:	20007b3c 	.word	0x20007b3c

0802b370 <__sread>:
 802b370:	b510      	push	{r4, lr}
 802b372:	460c      	mov	r4, r1
 802b374:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b378:	f000 f986 	bl	802b688 <_read_r>
 802b37c:	2800      	cmp	r0, #0
 802b37e:	bfab      	itete	ge
 802b380:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 802b382:	89a3      	ldrhlt	r3, [r4, #12]
 802b384:	181b      	addge	r3, r3, r0
 802b386:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 802b38a:	bfac      	ite	ge
 802b38c:	6563      	strge	r3, [r4, #84]	@ 0x54
 802b38e:	81a3      	strhlt	r3, [r4, #12]
 802b390:	bd10      	pop	{r4, pc}

0802b392 <__swrite>:
 802b392:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802b396:	461f      	mov	r7, r3
 802b398:	898b      	ldrh	r3, [r1, #12]
 802b39a:	05db      	lsls	r3, r3, #23
 802b39c:	4605      	mov	r5, r0
 802b39e:	460c      	mov	r4, r1
 802b3a0:	4616      	mov	r6, r2
 802b3a2:	d505      	bpl.n	802b3b0 <__swrite+0x1e>
 802b3a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b3a8:	2302      	movs	r3, #2
 802b3aa:	2200      	movs	r2, #0
 802b3ac:	f000 f95a 	bl	802b664 <_lseek_r>
 802b3b0:	89a3      	ldrh	r3, [r4, #12]
 802b3b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802b3b6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 802b3ba:	81a3      	strh	r3, [r4, #12]
 802b3bc:	4632      	mov	r2, r6
 802b3be:	463b      	mov	r3, r7
 802b3c0:	4628      	mov	r0, r5
 802b3c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802b3c6:	f000 b995 	b.w	802b6f4 <_write_r>

0802b3ca <__sseek>:
 802b3ca:	b510      	push	{r4, lr}
 802b3cc:	460c      	mov	r4, r1
 802b3ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b3d2:	f000 f947 	bl	802b664 <_lseek_r>
 802b3d6:	1c43      	adds	r3, r0, #1
 802b3d8:	89a3      	ldrh	r3, [r4, #12]
 802b3da:	bf15      	itete	ne
 802b3dc:	6560      	strne	r0, [r4, #84]	@ 0x54
 802b3de:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 802b3e2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 802b3e6:	81a3      	strheq	r3, [r4, #12]
 802b3e8:	bf18      	it	ne
 802b3ea:	81a3      	strhne	r3, [r4, #12]
 802b3ec:	bd10      	pop	{r4, pc}

0802b3ee <__sclose>:
 802b3ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b3f2:	f000 b8d1 	b.w	802b598 <_close_r>

0802b3f6 <__swbuf_r>:
 802b3f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802b3f8:	460e      	mov	r6, r1
 802b3fa:	4614      	mov	r4, r2
 802b3fc:	4605      	mov	r5, r0
 802b3fe:	b118      	cbz	r0, 802b408 <__swbuf_r+0x12>
 802b400:	6a03      	ldr	r3, [r0, #32]
 802b402:	b90b      	cbnz	r3, 802b408 <__swbuf_r+0x12>
 802b404:	f7ff ff5a 	bl	802b2bc <__sinit>
 802b408:	69a3      	ldr	r3, [r4, #24]
 802b40a:	60a3      	str	r3, [r4, #8]
 802b40c:	89a3      	ldrh	r3, [r4, #12]
 802b40e:	071a      	lsls	r2, r3, #28
 802b410:	d501      	bpl.n	802b416 <__swbuf_r+0x20>
 802b412:	6923      	ldr	r3, [r4, #16]
 802b414:	b943      	cbnz	r3, 802b428 <__swbuf_r+0x32>
 802b416:	4621      	mov	r1, r4
 802b418:	4628      	mov	r0, r5
 802b41a:	f000 f82b 	bl	802b474 <__swsetup_r>
 802b41e:	b118      	cbz	r0, 802b428 <__swbuf_r+0x32>
 802b420:	f04f 37ff 	mov.w	r7, #4294967295
 802b424:	4638      	mov	r0, r7
 802b426:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802b428:	6823      	ldr	r3, [r4, #0]
 802b42a:	6922      	ldr	r2, [r4, #16]
 802b42c:	1a98      	subs	r0, r3, r2
 802b42e:	6963      	ldr	r3, [r4, #20]
 802b430:	b2f6      	uxtb	r6, r6
 802b432:	4283      	cmp	r3, r0
 802b434:	4637      	mov	r7, r6
 802b436:	dc05      	bgt.n	802b444 <__swbuf_r+0x4e>
 802b438:	4621      	mov	r1, r4
 802b43a:	4628      	mov	r0, r5
 802b43c:	f7ff fe8a 	bl	802b154 <_fflush_r>
 802b440:	2800      	cmp	r0, #0
 802b442:	d1ed      	bne.n	802b420 <__swbuf_r+0x2a>
 802b444:	68a3      	ldr	r3, [r4, #8]
 802b446:	3b01      	subs	r3, #1
 802b448:	60a3      	str	r3, [r4, #8]
 802b44a:	6823      	ldr	r3, [r4, #0]
 802b44c:	1c5a      	adds	r2, r3, #1
 802b44e:	6022      	str	r2, [r4, #0]
 802b450:	701e      	strb	r6, [r3, #0]
 802b452:	6962      	ldr	r2, [r4, #20]
 802b454:	1c43      	adds	r3, r0, #1
 802b456:	429a      	cmp	r2, r3
 802b458:	d004      	beq.n	802b464 <__swbuf_r+0x6e>
 802b45a:	89a3      	ldrh	r3, [r4, #12]
 802b45c:	07db      	lsls	r3, r3, #31
 802b45e:	d5e1      	bpl.n	802b424 <__swbuf_r+0x2e>
 802b460:	2e0a      	cmp	r6, #10
 802b462:	d1df      	bne.n	802b424 <__swbuf_r+0x2e>
 802b464:	4621      	mov	r1, r4
 802b466:	4628      	mov	r0, r5
 802b468:	f7ff fe74 	bl	802b154 <_fflush_r>
 802b46c:	2800      	cmp	r0, #0
 802b46e:	d0d9      	beq.n	802b424 <__swbuf_r+0x2e>
 802b470:	e7d6      	b.n	802b420 <__swbuf_r+0x2a>
	...

0802b474 <__swsetup_r>:
 802b474:	b538      	push	{r3, r4, r5, lr}
 802b476:	4b29      	ldr	r3, [pc, #164]	@ (802b51c <__swsetup_r+0xa8>)
 802b478:	4605      	mov	r5, r0
 802b47a:	6818      	ldr	r0, [r3, #0]
 802b47c:	460c      	mov	r4, r1
 802b47e:	b118      	cbz	r0, 802b488 <__swsetup_r+0x14>
 802b480:	6a03      	ldr	r3, [r0, #32]
 802b482:	b90b      	cbnz	r3, 802b488 <__swsetup_r+0x14>
 802b484:	f7ff ff1a 	bl	802b2bc <__sinit>
 802b488:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802b48c:	0719      	lsls	r1, r3, #28
 802b48e:	d422      	bmi.n	802b4d6 <__swsetup_r+0x62>
 802b490:	06da      	lsls	r2, r3, #27
 802b492:	d407      	bmi.n	802b4a4 <__swsetup_r+0x30>
 802b494:	2209      	movs	r2, #9
 802b496:	602a      	str	r2, [r5, #0]
 802b498:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802b49c:	81a3      	strh	r3, [r4, #12]
 802b49e:	f04f 30ff 	mov.w	r0, #4294967295
 802b4a2:	e033      	b.n	802b50c <__swsetup_r+0x98>
 802b4a4:	0758      	lsls	r0, r3, #29
 802b4a6:	d512      	bpl.n	802b4ce <__swsetup_r+0x5a>
 802b4a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802b4aa:	b141      	cbz	r1, 802b4be <__swsetup_r+0x4a>
 802b4ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802b4b0:	4299      	cmp	r1, r3
 802b4b2:	d002      	beq.n	802b4ba <__swsetup_r+0x46>
 802b4b4:	4628      	mov	r0, r5
 802b4b6:	f001 f813 	bl	802c4e0 <_free_r>
 802b4ba:	2300      	movs	r3, #0
 802b4bc:	6363      	str	r3, [r4, #52]	@ 0x34
 802b4be:	89a3      	ldrh	r3, [r4, #12]
 802b4c0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 802b4c4:	81a3      	strh	r3, [r4, #12]
 802b4c6:	2300      	movs	r3, #0
 802b4c8:	6063      	str	r3, [r4, #4]
 802b4ca:	6923      	ldr	r3, [r4, #16]
 802b4cc:	6023      	str	r3, [r4, #0]
 802b4ce:	89a3      	ldrh	r3, [r4, #12]
 802b4d0:	f043 0308 	orr.w	r3, r3, #8
 802b4d4:	81a3      	strh	r3, [r4, #12]
 802b4d6:	6923      	ldr	r3, [r4, #16]
 802b4d8:	b94b      	cbnz	r3, 802b4ee <__swsetup_r+0x7a>
 802b4da:	89a3      	ldrh	r3, [r4, #12]
 802b4dc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 802b4e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 802b4e4:	d003      	beq.n	802b4ee <__swsetup_r+0x7a>
 802b4e6:	4621      	mov	r1, r4
 802b4e8:	4628      	mov	r0, r5
 802b4ea:	f001 fd2d 	bl	802cf48 <__smakebuf_r>
 802b4ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802b4f2:	f013 0201 	ands.w	r2, r3, #1
 802b4f6:	d00a      	beq.n	802b50e <__swsetup_r+0x9a>
 802b4f8:	2200      	movs	r2, #0
 802b4fa:	60a2      	str	r2, [r4, #8]
 802b4fc:	6962      	ldr	r2, [r4, #20]
 802b4fe:	4252      	negs	r2, r2
 802b500:	61a2      	str	r2, [r4, #24]
 802b502:	6922      	ldr	r2, [r4, #16]
 802b504:	b942      	cbnz	r2, 802b518 <__swsetup_r+0xa4>
 802b506:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 802b50a:	d1c5      	bne.n	802b498 <__swsetup_r+0x24>
 802b50c:	bd38      	pop	{r3, r4, r5, pc}
 802b50e:	0799      	lsls	r1, r3, #30
 802b510:	bf58      	it	pl
 802b512:	6962      	ldrpl	r2, [r4, #20]
 802b514:	60a2      	str	r2, [r4, #8]
 802b516:	e7f4      	b.n	802b502 <__swsetup_r+0x8e>
 802b518:	2000      	movs	r0, #0
 802b51a:	e7f7      	b.n	802b50c <__swsetup_r+0x98>
 802b51c:	20007b3c 	.word	0x20007b3c

0802b520 <memset>:
 802b520:	4402      	add	r2, r0
 802b522:	4603      	mov	r3, r0
 802b524:	4293      	cmp	r3, r2
 802b526:	d100      	bne.n	802b52a <memset+0xa>
 802b528:	4770      	bx	lr
 802b52a:	f803 1b01 	strb.w	r1, [r3], #1
 802b52e:	e7f9      	b.n	802b524 <memset+0x4>

0802b530 <_raise_r>:
 802b530:	291f      	cmp	r1, #31
 802b532:	b538      	push	{r3, r4, r5, lr}
 802b534:	4605      	mov	r5, r0
 802b536:	460c      	mov	r4, r1
 802b538:	d904      	bls.n	802b544 <_raise_r+0x14>
 802b53a:	2316      	movs	r3, #22
 802b53c:	6003      	str	r3, [r0, #0]
 802b53e:	f04f 30ff 	mov.w	r0, #4294967295
 802b542:	bd38      	pop	{r3, r4, r5, pc}
 802b544:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 802b546:	b112      	cbz	r2, 802b54e <_raise_r+0x1e>
 802b548:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802b54c:	b94b      	cbnz	r3, 802b562 <_raise_r+0x32>
 802b54e:	4628      	mov	r0, r5
 802b550:	f000 f8be 	bl	802b6d0 <_getpid_r>
 802b554:	4622      	mov	r2, r4
 802b556:	4601      	mov	r1, r0
 802b558:	4628      	mov	r0, r5
 802b55a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802b55e:	f000 b8a5 	b.w	802b6ac <_kill_r>
 802b562:	2b01      	cmp	r3, #1
 802b564:	d00a      	beq.n	802b57c <_raise_r+0x4c>
 802b566:	1c59      	adds	r1, r3, #1
 802b568:	d103      	bne.n	802b572 <_raise_r+0x42>
 802b56a:	2316      	movs	r3, #22
 802b56c:	6003      	str	r3, [r0, #0]
 802b56e:	2001      	movs	r0, #1
 802b570:	e7e7      	b.n	802b542 <_raise_r+0x12>
 802b572:	2100      	movs	r1, #0
 802b574:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 802b578:	4620      	mov	r0, r4
 802b57a:	4798      	blx	r3
 802b57c:	2000      	movs	r0, #0
 802b57e:	e7e0      	b.n	802b542 <_raise_r+0x12>

0802b580 <raise>:
 802b580:	4b02      	ldr	r3, [pc, #8]	@ (802b58c <raise+0xc>)
 802b582:	4601      	mov	r1, r0
 802b584:	6818      	ldr	r0, [r3, #0]
 802b586:	f7ff bfd3 	b.w	802b530 <_raise_r>
 802b58a:	bf00      	nop
 802b58c:	20007b3c 	.word	0x20007b3c

0802b590 <_localeconv_r>:
 802b590:	4800      	ldr	r0, [pc, #0]	@ (802b594 <_localeconv_r+0x4>)
 802b592:	4770      	bx	lr
 802b594:	20007c80 	.word	0x20007c80

0802b598 <_close_r>:
 802b598:	b538      	push	{r3, r4, r5, lr}
 802b59a:	4d06      	ldr	r5, [pc, #24]	@ (802b5b4 <_close_r+0x1c>)
 802b59c:	2300      	movs	r3, #0
 802b59e:	4604      	mov	r4, r0
 802b5a0:	4608      	mov	r0, r1
 802b5a2:	602b      	str	r3, [r5, #0]
 802b5a4:	f7d7 fd76 	bl	8003094 <_close>
 802b5a8:	1c43      	adds	r3, r0, #1
 802b5aa:	d102      	bne.n	802b5b2 <_close_r+0x1a>
 802b5ac:	682b      	ldr	r3, [r5, #0]
 802b5ae:	b103      	cbz	r3, 802b5b2 <_close_r+0x1a>
 802b5b0:	6023      	str	r3, [r4, #0]
 802b5b2:	bd38      	pop	{r3, r4, r5, pc}
 802b5b4:	2002a974 	.word	0x2002a974

0802b5b8 <_reclaim_reent>:
 802b5b8:	4b29      	ldr	r3, [pc, #164]	@ (802b660 <_reclaim_reent+0xa8>)
 802b5ba:	681b      	ldr	r3, [r3, #0]
 802b5bc:	4283      	cmp	r3, r0
 802b5be:	b570      	push	{r4, r5, r6, lr}
 802b5c0:	4604      	mov	r4, r0
 802b5c2:	d04b      	beq.n	802b65c <_reclaim_reent+0xa4>
 802b5c4:	69c3      	ldr	r3, [r0, #28]
 802b5c6:	b1ab      	cbz	r3, 802b5f4 <_reclaim_reent+0x3c>
 802b5c8:	68db      	ldr	r3, [r3, #12]
 802b5ca:	b16b      	cbz	r3, 802b5e8 <_reclaim_reent+0x30>
 802b5cc:	2500      	movs	r5, #0
 802b5ce:	69e3      	ldr	r3, [r4, #28]
 802b5d0:	68db      	ldr	r3, [r3, #12]
 802b5d2:	5959      	ldr	r1, [r3, r5]
 802b5d4:	2900      	cmp	r1, #0
 802b5d6:	d13b      	bne.n	802b650 <_reclaim_reent+0x98>
 802b5d8:	3504      	adds	r5, #4
 802b5da:	2d80      	cmp	r5, #128	@ 0x80
 802b5dc:	d1f7      	bne.n	802b5ce <_reclaim_reent+0x16>
 802b5de:	69e3      	ldr	r3, [r4, #28]
 802b5e0:	4620      	mov	r0, r4
 802b5e2:	68d9      	ldr	r1, [r3, #12]
 802b5e4:	f000 ff7c 	bl	802c4e0 <_free_r>
 802b5e8:	69e3      	ldr	r3, [r4, #28]
 802b5ea:	6819      	ldr	r1, [r3, #0]
 802b5ec:	b111      	cbz	r1, 802b5f4 <_reclaim_reent+0x3c>
 802b5ee:	4620      	mov	r0, r4
 802b5f0:	f000 ff76 	bl	802c4e0 <_free_r>
 802b5f4:	6961      	ldr	r1, [r4, #20]
 802b5f6:	b111      	cbz	r1, 802b5fe <_reclaim_reent+0x46>
 802b5f8:	4620      	mov	r0, r4
 802b5fa:	f000 ff71 	bl	802c4e0 <_free_r>
 802b5fe:	69e1      	ldr	r1, [r4, #28]
 802b600:	b111      	cbz	r1, 802b608 <_reclaim_reent+0x50>
 802b602:	4620      	mov	r0, r4
 802b604:	f000 ff6c 	bl	802c4e0 <_free_r>
 802b608:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 802b60a:	b111      	cbz	r1, 802b612 <_reclaim_reent+0x5a>
 802b60c:	4620      	mov	r0, r4
 802b60e:	f000 ff67 	bl	802c4e0 <_free_r>
 802b612:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802b614:	b111      	cbz	r1, 802b61c <_reclaim_reent+0x64>
 802b616:	4620      	mov	r0, r4
 802b618:	f000 ff62 	bl	802c4e0 <_free_r>
 802b61c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 802b61e:	b111      	cbz	r1, 802b626 <_reclaim_reent+0x6e>
 802b620:	4620      	mov	r0, r4
 802b622:	f000 ff5d 	bl	802c4e0 <_free_r>
 802b626:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 802b628:	b111      	cbz	r1, 802b630 <_reclaim_reent+0x78>
 802b62a:	4620      	mov	r0, r4
 802b62c:	f000 ff58 	bl	802c4e0 <_free_r>
 802b630:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 802b632:	b111      	cbz	r1, 802b63a <_reclaim_reent+0x82>
 802b634:	4620      	mov	r0, r4
 802b636:	f000 ff53 	bl	802c4e0 <_free_r>
 802b63a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 802b63c:	b111      	cbz	r1, 802b644 <_reclaim_reent+0x8c>
 802b63e:	4620      	mov	r0, r4
 802b640:	f000 ff4e 	bl	802c4e0 <_free_r>
 802b644:	6a23      	ldr	r3, [r4, #32]
 802b646:	b14b      	cbz	r3, 802b65c <_reclaim_reent+0xa4>
 802b648:	4620      	mov	r0, r4
 802b64a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802b64e:	4718      	bx	r3
 802b650:	680e      	ldr	r6, [r1, #0]
 802b652:	4620      	mov	r0, r4
 802b654:	f000 ff44 	bl	802c4e0 <_free_r>
 802b658:	4631      	mov	r1, r6
 802b65a:	e7bb      	b.n	802b5d4 <_reclaim_reent+0x1c>
 802b65c:	bd70      	pop	{r4, r5, r6, pc}
 802b65e:	bf00      	nop
 802b660:	20007b3c 	.word	0x20007b3c

0802b664 <_lseek_r>:
 802b664:	b538      	push	{r3, r4, r5, lr}
 802b666:	4d07      	ldr	r5, [pc, #28]	@ (802b684 <_lseek_r+0x20>)
 802b668:	4604      	mov	r4, r0
 802b66a:	4608      	mov	r0, r1
 802b66c:	4611      	mov	r1, r2
 802b66e:	2200      	movs	r2, #0
 802b670:	602a      	str	r2, [r5, #0]
 802b672:	461a      	mov	r2, r3
 802b674:	f7d7 fd18 	bl	80030a8 <_lseek>
 802b678:	1c43      	adds	r3, r0, #1
 802b67a:	d102      	bne.n	802b682 <_lseek_r+0x1e>
 802b67c:	682b      	ldr	r3, [r5, #0]
 802b67e:	b103      	cbz	r3, 802b682 <_lseek_r+0x1e>
 802b680:	6023      	str	r3, [r4, #0]
 802b682:	bd38      	pop	{r3, r4, r5, pc}
 802b684:	2002a974 	.word	0x2002a974

0802b688 <_read_r>:
 802b688:	b538      	push	{r3, r4, r5, lr}
 802b68a:	4d07      	ldr	r5, [pc, #28]	@ (802b6a8 <_read_r+0x20>)
 802b68c:	4604      	mov	r4, r0
 802b68e:	4608      	mov	r0, r1
 802b690:	4611      	mov	r1, r2
 802b692:	2200      	movs	r2, #0
 802b694:	602a      	str	r2, [r5, #0]
 802b696:	461a      	mov	r2, r3
 802b698:	f7d7 fce0 	bl	800305c <_read>
 802b69c:	1c43      	adds	r3, r0, #1
 802b69e:	d102      	bne.n	802b6a6 <_read_r+0x1e>
 802b6a0:	682b      	ldr	r3, [r5, #0]
 802b6a2:	b103      	cbz	r3, 802b6a6 <_read_r+0x1e>
 802b6a4:	6023      	str	r3, [r4, #0]
 802b6a6:	bd38      	pop	{r3, r4, r5, pc}
 802b6a8:	2002a974 	.word	0x2002a974

0802b6ac <_kill_r>:
 802b6ac:	b538      	push	{r3, r4, r5, lr}
 802b6ae:	4d07      	ldr	r5, [pc, #28]	@ (802b6cc <_kill_r+0x20>)
 802b6b0:	2300      	movs	r3, #0
 802b6b2:	4604      	mov	r4, r0
 802b6b4:	4608      	mov	r0, r1
 802b6b6:	4611      	mov	r1, r2
 802b6b8:	602b      	str	r3, [r5, #0]
 802b6ba:	f7d7 fcc1 	bl	8003040 <_kill>
 802b6be:	1c43      	adds	r3, r0, #1
 802b6c0:	d102      	bne.n	802b6c8 <_kill_r+0x1c>
 802b6c2:	682b      	ldr	r3, [r5, #0]
 802b6c4:	b103      	cbz	r3, 802b6c8 <_kill_r+0x1c>
 802b6c6:	6023      	str	r3, [r4, #0]
 802b6c8:	bd38      	pop	{r3, r4, r5, pc}
 802b6ca:	bf00      	nop
 802b6cc:	2002a974 	.word	0x2002a974

0802b6d0 <_getpid_r>:
 802b6d0:	f7d7 bcb4 	b.w	800303c <_getpid>

0802b6d4 <_sbrk_r>:
 802b6d4:	b538      	push	{r3, r4, r5, lr}
 802b6d6:	4d06      	ldr	r5, [pc, #24]	@ (802b6f0 <_sbrk_r+0x1c>)
 802b6d8:	2300      	movs	r3, #0
 802b6da:	4604      	mov	r4, r0
 802b6dc:	4608      	mov	r0, r1
 802b6de:	602b      	str	r3, [r5, #0]
 802b6e0:	f7d7 fce4 	bl	80030ac <_sbrk>
 802b6e4:	1c43      	adds	r3, r0, #1
 802b6e6:	d102      	bne.n	802b6ee <_sbrk_r+0x1a>
 802b6e8:	682b      	ldr	r3, [r5, #0]
 802b6ea:	b103      	cbz	r3, 802b6ee <_sbrk_r+0x1a>
 802b6ec:	6023      	str	r3, [r4, #0]
 802b6ee:	bd38      	pop	{r3, r4, r5, pc}
 802b6f0:	2002a974 	.word	0x2002a974

0802b6f4 <_write_r>:
 802b6f4:	b538      	push	{r3, r4, r5, lr}
 802b6f6:	4d07      	ldr	r5, [pc, #28]	@ (802b714 <_write_r+0x20>)
 802b6f8:	4604      	mov	r4, r0
 802b6fa:	4608      	mov	r0, r1
 802b6fc:	4611      	mov	r1, r2
 802b6fe:	2200      	movs	r2, #0
 802b700:	602a      	str	r2, [r5, #0]
 802b702:	461a      	mov	r2, r3
 802b704:	f7d7 fcb8 	bl	8003078 <_write>
 802b708:	1c43      	adds	r3, r0, #1
 802b70a:	d102      	bne.n	802b712 <_write_r+0x1e>
 802b70c:	682b      	ldr	r3, [r5, #0]
 802b70e:	b103      	cbz	r3, 802b712 <_write_r+0x1e>
 802b710:	6023      	str	r3, [r4, #0]
 802b712:	bd38      	pop	{r3, r4, r5, pc}
 802b714:	2002a974 	.word	0x2002a974

0802b718 <__errno>:
 802b718:	4b01      	ldr	r3, [pc, #4]	@ (802b720 <__errno+0x8>)
 802b71a:	6818      	ldr	r0, [r3, #0]
 802b71c:	4770      	bx	lr
 802b71e:	bf00      	nop
 802b720:	20007b3c 	.word	0x20007b3c

0802b724 <__libc_init_array>:
 802b724:	b570      	push	{r4, r5, r6, lr}
 802b726:	4d0d      	ldr	r5, [pc, #52]	@ (802b75c <__libc_init_array+0x38>)
 802b728:	4c0d      	ldr	r4, [pc, #52]	@ (802b760 <__libc_init_array+0x3c>)
 802b72a:	1b64      	subs	r4, r4, r5
 802b72c:	10a4      	asrs	r4, r4, #2
 802b72e:	2600      	movs	r6, #0
 802b730:	42a6      	cmp	r6, r4
 802b732:	d109      	bne.n	802b748 <__libc_init_array+0x24>
 802b734:	4d0b      	ldr	r5, [pc, #44]	@ (802b764 <__libc_init_array+0x40>)
 802b736:	4c0c      	ldr	r4, [pc, #48]	@ (802b768 <__libc_init_array+0x44>)
 802b738:	f001 fc98 	bl	802d06c <_init>
 802b73c:	1b64      	subs	r4, r4, r5
 802b73e:	10a4      	asrs	r4, r4, #2
 802b740:	2600      	movs	r6, #0
 802b742:	42a6      	cmp	r6, r4
 802b744:	d105      	bne.n	802b752 <__libc_init_array+0x2e>
 802b746:	bd70      	pop	{r4, r5, r6, pc}
 802b748:	f855 3b04 	ldr.w	r3, [r5], #4
 802b74c:	4798      	blx	r3
 802b74e:	3601      	adds	r6, #1
 802b750:	e7ee      	b.n	802b730 <__libc_init_array+0xc>
 802b752:	f855 3b04 	ldr.w	r3, [r5], #4
 802b756:	4798      	blx	r3
 802b758:	3601      	adds	r6, #1
 802b75a:	e7f2      	b.n	802b742 <__libc_init_array+0x1e>
 802b75c:	08044594 	.word	0x08044594
 802b760:	08044594 	.word	0x08044594
 802b764:	08044594 	.word	0x08044594
 802b768:	080445b4 	.word	0x080445b4

0802b76c <__retarget_lock_init_recursive>:
 802b76c:	4770      	bx	lr

0802b76e <__retarget_lock_acquire_recursive>:
 802b76e:	4770      	bx	lr

0802b770 <__retarget_lock_release_recursive>:
 802b770:	4770      	bx	lr

0802b772 <memcpy>:
 802b772:	440a      	add	r2, r1
 802b774:	4291      	cmp	r1, r2
 802b776:	f100 33ff 	add.w	r3, r0, #4294967295
 802b77a:	d100      	bne.n	802b77e <memcpy+0xc>
 802b77c:	4770      	bx	lr
 802b77e:	b510      	push	{r4, lr}
 802b780:	f811 4b01 	ldrb.w	r4, [r1], #1
 802b784:	f803 4f01 	strb.w	r4, [r3, #1]!
 802b788:	4291      	cmp	r1, r2
 802b78a:	d1f9      	bne.n	802b780 <memcpy+0xe>
 802b78c:	bd10      	pop	{r4, pc}
	...

0802b790 <__register_exitproc>:
 802b790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802b794:	4d27      	ldr	r5, [pc, #156]	@ (802b834 <__register_exitproc+0xa4>)
 802b796:	4607      	mov	r7, r0
 802b798:	6828      	ldr	r0, [r5, #0]
 802b79a:	4691      	mov	r9, r2
 802b79c:	460e      	mov	r6, r1
 802b79e:	4698      	mov	r8, r3
 802b7a0:	f7ff ffe5 	bl	802b76e <__retarget_lock_acquire_recursive>
 802b7a4:	4a24      	ldr	r2, [pc, #144]	@ (802b838 <__register_exitproc+0xa8>)
 802b7a6:	6814      	ldr	r4, [r2, #0]
 802b7a8:	b93c      	cbnz	r4, 802b7ba <__register_exitproc+0x2a>
 802b7aa:	4b24      	ldr	r3, [pc, #144]	@ (802b83c <__register_exitproc+0xac>)
 802b7ac:	6013      	str	r3, [r2, #0]
 802b7ae:	4a24      	ldr	r2, [pc, #144]	@ (802b840 <__register_exitproc+0xb0>)
 802b7b0:	b112      	cbz	r2, 802b7b8 <__register_exitproc+0x28>
 802b7b2:	6812      	ldr	r2, [r2, #0]
 802b7b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 802b7b8:	4c20      	ldr	r4, [pc, #128]	@ (802b83c <__register_exitproc+0xac>)
 802b7ba:	6863      	ldr	r3, [r4, #4]
 802b7bc:	2b1f      	cmp	r3, #31
 802b7be:	dd06      	ble.n	802b7ce <__register_exitproc+0x3e>
 802b7c0:	6828      	ldr	r0, [r5, #0]
 802b7c2:	f7ff ffd5 	bl	802b770 <__retarget_lock_release_recursive>
 802b7c6:	f04f 30ff 	mov.w	r0, #4294967295
 802b7ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802b7ce:	b32f      	cbz	r7, 802b81c <__register_exitproc+0x8c>
 802b7d0:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 802b7d4:	b968      	cbnz	r0, 802b7f2 <__register_exitproc+0x62>
 802b7d6:	4b1b      	ldr	r3, [pc, #108]	@ (802b844 <__register_exitproc+0xb4>)
 802b7d8:	2b00      	cmp	r3, #0
 802b7da:	d0f1      	beq.n	802b7c0 <__register_exitproc+0x30>
 802b7dc:	f44f 7084 	mov.w	r0, #264	@ 0x108
 802b7e0:	f7fe ff10 	bl	802a604 <malloc>
 802b7e4:	2800      	cmp	r0, #0
 802b7e6:	d0eb      	beq.n	802b7c0 <__register_exitproc+0x30>
 802b7e8:	2300      	movs	r3, #0
 802b7ea:	e9c0 3340 	strd	r3, r3, [r0, #256]	@ 0x100
 802b7ee:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 802b7f2:	6863      	ldr	r3, [r4, #4]
 802b7f4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 802b7f8:	2201      	movs	r2, #1
 802b7fa:	409a      	lsls	r2, r3
 802b7fc:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 802b800:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 802b804:	4313      	orrs	r3, r2
 802b806:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
 802b80a:	2f02      	cmp	r7, #2
 802b80c:	f8c1 8080 	str.w	r8, [r1, #128]	@ 0x80
 802b810:	bf02      	ittt	eq
 802b812:	f8d0 3104 	ldreq.w	r3, [r0, #260]	@ 0x104
 802b816:	4313      	orreq	r3, r2
 802b818:	f8c0 3104 	streq.w	r3, [r0, #260]	@ 0x104
 802b81c:	6863      	ldr	r3, [r4, #4]
 802b81e:	6828      	ldr	r0, [r5, #0]
 802b820:	1c5a      	adds	r2, r3, #1
 802b822:	3302      	adds	r3, #2
 802b824:	6062      	str	r2, [r4, #4]
 802b826:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 802b82a:	f7ff ffa1 	bl	802b770 <__retarget_lock_release_recursive>
 802b82e:	2000      	movs	r0, #0
 802b830:	e7cb      	b.n	802b7ca <__register_exitproc+0x3a>
 802b832:	bf00      	nop
 802b834:	20007b8c 	.word	0x20007b8c
 802b838:	2002aa08 	.word	0x2002aa08
 802b83c:	2002a97c 	.word	0x2002a97c
 802b840:	08042da8 	.word	0x08042da8
 802b844:	0802a605 	.word	0x0802a605

0802b848 <quorem>:
 802b848:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b84c:	6903      	ldr	r3, [r0, #16]
 802b84e:	690c      	ldr	r4, [r1, #16]
 802b850:	42a3      	cmp	r3, r4
 802b852:	4607      	mov	r7, r0
 802b854:	db7e      	blt.n	802b954 <quorem+0x10c>
 802b856:	3c01      	subs	r4, #1
 802b858:	f101 0814 	add.w	r8, r1, #20
 802b85c:	00a3      	lsls	r3, r4, #2
 802b85e:	f100 0514 	add.w	r5, r0, #20
 802b862:	9300      	str	r3, [sp, #0]
 802b864:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802b868:	9301      	str	r3, [sp, #4]
 802b86a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 802b86e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 802b872:	3301      	adds	r3, #1
 802b874:	429a      	cmp	r2, r3
 802b876:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 802b87a:	fbb2 f6f3 	udiv	r6, r2, r3
 802b87e:	d32e      	bcc.n	802b8de <quorem+0x96>
 802b880:	f04f 0a00 	mov.w	sl, #0
 802b884:	46c4      	mov	ip, r8
 802b886:	46ae      	mov	lr, r5
 802b888:	46d3      	mov	fp, sl
 802b88a:	f85c 3b04 	ldr.w	r3, [ip], #4
 802b88e:	b298      	uxth	r0, r3
 802b890:	fb06 a000 	mla	r0, r6, r0, sl
 802b894:	0c02      	lsrs	r2, r0, #16
 802b896:	0c1b      	lsrs	r3, r3, #16
 802b898:	fb06 2303 	mla	r3, r6, r3, r2
 802b89c:	f8de 2000 	ldr.w	r2, [lr]
 802b8a0:	b280      	uxth	r0, r0
 802b8a2:	b292      	uxth	r2, r2
 802b8a4:	1a12      	subs	r2, r2, r0
 802b8a6:	445a      	add	r2, fp
 802b8a8:	f8de 0000 	ldr.w	r0, [lr]
 802b8ac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 802b8b0:	b29b      	uxth	r3, r3
 802b8b2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 802b8b6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 802b8ba:	b292      	uxth	r2, r2
 802b8bc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 802b8c0:	45e1      	cmp	r9, ip
 802b8c2:	f84e 2b04 	str.w	r2, [lr], #4
 802b8c6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 802b8ca:	d2de      	bcs.n	802b88a <quorem+0x42>
 802b8cc:	9b00      	ldr	r3, [sp, #0]
 802b8ce:	58eb      	ldr	r3, [r5, r3]
 802b8d0:	b92b      	cbnz	r3, 802b8de <quorem+0x96>
 802b8d2:	9b01      	ldr	r3, [sp, #4]
 802b8d4:	3b04      	subs	r3, #4
 802b8d6:	429d      	cmp	r5, r3
 802b8d8:	461a      	mov	r2, r3
 802b8da:	d32f      	bcc.n	802b93c <quorem+0xf4>
 802b8dc:	613c      	str	r4, [r7, #16]
 802b8de:	4638      	mov	r0, r7
 802b8e0:	f001 f8c2 	bl	802ca68 <__mcmp>
 802b8e4:	2800      	cmp	r0, #0
 802b8e6:	db25      	blt.n	802b934 <quorem+0xec>
 802b8e8:	4629      	mov	r1, r5
 802b8ea:	2000      	movs	r0, #0
 802b8ec:	f858 2b04 	ldr.w	r2, [r8], #4
 802b8f0:	f8d1 c000 	ldr.w	ip, [r1]
 802b8f4:	fa1f fe82 	uxth.w	lr, r2
 802b8f8:	fa1f f38c 	uxth.w	r3, ip
 802b8fc:	eba3 030e 	sub.w	r3, r3, lr
 802b900:	4403      	add	r3, r0
 802b902:	0c12      	lsrs	r2, r2, #16
 802b904:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 802b908:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 802b90c:	b29b      	uxth	r3, r3
 802b90e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802b912:	45c1      	cmp	r9, r8
 802b914:	f841 3b04 	str.w	r3, [r1], #4
 802b918:	ea4f 4022 	mov.w	r0, r2, asr #16
 802b91c:	d2e6      	bcs.n	802b8ec <quorem+0xa4>
 802b91e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 802b922:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802b926:	b922      	cbnz	r2, 802b932 <quorem+0xea>
 802b928:	3b04      	subs	r3, #4
 802b92a:	429d      	cmp	r5, r3
 802b92c:	461a      	mov	r2, r3
 802b92e:	d30b      	bcc.n	802b948 <quorem+0x100>
 802b930:	613c      	str	r4, [r7, #16]
 802b932:	3601      	adds	r6, #1
 802b934:	4630      	mov	r0, r6
 802b936:	b003      	add	sp, #12
 802b938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b93c:	6812      	ldr	r2, [r2, #0]
 802b93e:	3b04      	subs	r3, #4
 802b940:	2a00      	cmp	r2, #0
 802b942:	d1cb      	bne.n	802b8dc <quorem+0x94>
 802b944:	3c01      	subs	r4, #1
 802b946:	e7c6      	b.n	802b8d6 <quorem+0x8e>
 802b948:	6812      	ldr	r2, [r2, #0]
 802b94a:	3b04      	subs	r3, #4
 802b94c:	2a00      	cmp	r2, #0
 802b94e:	d1ef      	bne.n	802b930 <quorem+0xe8>
 802b950:	3c01      	subs	r4, #1
 802b952:	e7ea      	b.n	802b92a <quorem+0xe2>
 802b954:	2000      	movs	r0, #0
 802b956:	e7ee      	b.n	802b936 <quorem+0xee>

0802b958 <_dtoa_r>:
 802b958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b95c:	69c7      	ldr	r7, [r0, #28]
 802b95e:	b099      	sub	sp, #100	@ 0x64
 802b960:	ed8d 0b02 	vstr	d0, [sp, #8]
 802b964:	ec55 4b10 	vmov	r4, r5, d0
 802b968:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 802b96a:	9109      	str	r1, [sp, #36]	@ 0x24
 802b96c:	4683      	mov	fp, r0
 802b96e:	920e      	str	r2, [sp, #56]	@ 0x38
 802b970:	9313      	str	r3, [sp, #76]	@ 0x4c
 802b972:	b97f      	cbnz	r7, 802b994 <_dtoa_r+0x3c>
 802b974:	2010      	movs	r0, #16
 802b976:	f7fe fe45 	bl	802a604 <malloc>
 802b97a:	4602      	mov	r2, r0
 802b97c:	f8cb 001c 	str.w	r0, [fp, #28]
 802b980:	b920      	cbnz	r0, 802b98c <_dtoa_r+0x34>
 802b982:	4ba7      	ldr	r3, [pc, #668]	@ (802bc20 <_dtoa_r+0x2c8>)
 802b984:	21ef      	movs	r1, #239	@ 0xef
 802b986:	48a7      	ldr	r0, [pc, #668]	@ (802bc24 <_dtoa_r+0x2cc>)
 802b988:	f7fe fe18 	bl	802a5bc <__assert_func>
 802b98c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 802b990:	6007      	str	r7, [r0, #0]
 802b992:	60c7      	str	r7, [r0, #12]
 802b994:	f8db 301c 	ldr.w	r3, [fp, #28]
 802b998:	6819      	ldr	r1, [r3, #0]
 802b99a:	b159      	cbz	r1, 802b9b4 <_dtoa_r+0x5c>
 802b99c:	685a      	ldr	r2, [r3, #4]
 802b99e:	604a      	str	r2, [r1, #4]
 802b9a0:	2301      	movs	r3, #1
 802b9a2:	4093      	lsls	r3, r2
 802b9a4:	608b      	str	r3, [r1, #8]
 802b9a6:	4658      	mov	r0, fp
 802b9a8:	f000 fe24 	bl	802c5f4 <_Bfree>
 802b9ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 802b9b0:	2200      	movs	r2, #0
 802b9b2:	601a      	str	r2, [r3, #0]
 802b9b4:	1e2b      	subs	r3, r5, #0
 802b9b6:	bfb9      	ittee	lt
 802b9b8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 802b9bc:	9303      	strlt	r3, [sp, #12]
 802b9be:	2300      	movge	r3, #0
 802b9c0:	6033      	strge	r3, [r6, #0]
 802b9c2:	9f03      	ldr	r7, [sp, #12]
 802b9c4:	4b98      	ldr	r3, [pc, #608]	@ (802bc28 <_dtoa_r+0x2d0>)
 802b9c6:	bfbc      	itt	lt
 802b9c8:	2201      	movlt	r2, #1
 802b9ca:	6032      	strlt	r2, [r6, #0]
 802b9cc:	43bb      	bics	r3, r7
 802b9ce:	d112      	bne.n	802b9f6 <_dtoa_r+0x9e>
 802b9d0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802b9d2:	f242 730f 	movw	r3, #9999	@ 0x270f
 802b9d6:	6013      	str	r3, [r2, #0]
 802b9d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 802b9dc:	4323      	orrs	r3, r4
 802b9de:	f000 854d 	beq.w	802c47c <_dtoa_r+0xb24>
 802b9e2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802b9e4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 802bc3c <_dtoa_r+0x2e4>
 802b9e8:	2b00      	cmp	r3, #0
 802b9ea:	f000 854f 	beq.w	802c48c <_dtoa_r+0xb34>
 802b9ee:	f10a 0303 	add.w	r3, sl, #3
 802b9f2:	f000 bd49 	b.w	802c488 <_dtoa_r+0xb30>
 802b9f6:	ed9d 7b02 	vldr	d7, [sp, #8]
 802b9fa:	2200      	movs	r2, #0
 802b9fc:	ec51 0b17 	vmov	r0, r1, d7
 802ba00:	2300      	movs	r3, #0
 802ba02:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 802ba06:	f7d5 f87f 	bl	8000b08 <__aeabi_dcmpeq>
 802ba0a:	4680      	mov	r8, r0
 802ba0c:	b158      	cbz	r0, 802ba26 <_dtoa_r+0xce>
 802ba0e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802ba10:	2301      	movs	r3, #1
 802ba12:	6013      	str	r3, [r2, #0]
 802ba14:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802ba16:	b113      	cbz	r3, 802ba1e <_dtoa_r+0xc6>
 802ba18:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 802ba1a:	4b84      	ldr	r3, [pc, #528]	@ (802bc2c <_dtoa_r+0x2d4>)
 802ba1c:	6013      	str	r3, [r2, #0]
 802ba1e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 802bc40 <_dtoa_r+0x2e8>
 802ba22:	f000 bd33 	b.w	802c48c <_dtoa_r+0xb34>
 802ba26:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 802ba2a:	aa16      	add	r2, sp, #88	@ 0x58
 802ba2c:	a917      	add	r1, sp, #92	@ 0x5c
 802ba2e:	4658      	mov	r0, fp
 802ba30:	f001 f8ca 	bl	802cbc8 <__d2b>
 802ba34:	f3c7 560a 	ubfx	r6, r7, #20, #11
 802ba38:	4681      	mov	r9, r0
 802ba3a:	2e00      	cmp	r6, #0
 802ba3c:	d077      	beq.n	802bb2e <_dtoa_r+0x1d6>
 802ba3e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802ba40:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 802ba44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802ba48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 802ba4c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 802ba50:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 802ba54:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 802ba58:	4619      	mov	r1, r3
 802ba5a:	2200      	movs	r2, #0
 802ba5c:	4b74      	ldr	r3, [pc, #464]	@ (802bc30 <_dtoa_r+0x2d8>)
 802ba5e:	f7d4 fc33 	bl	80002c8 <__aeabi_dsub>
 802ba62:	a369      	add	r3, pc, #420	@ (adr r3, 802bc08 <_dtoa_r+0x2b0>)
 802ba64:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ba68:	f7d4 fde6 	bl	8000638 <__aeabi_dmul>
 802ba6c:	a368      	add	r3, pc, #416	@ (adr r3, 802bc10 <_dtoa_r+0x2b8>)
 802ba6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ba72:	f7d4 fc2b 	bl	80002cc <__adddf3>
 802ba76:	4604      	mov	r4, r0
 802ba78:	4630      	mov	r0, r6
 802ba7a:	460d      	mov	r5, r1
 802ba7c:	f7d4 fd72 	bl	8000564 <__aeabi_i2d>
 802ba80:	a365      	add	r3, pc, #404	@ (adr r3, 802bc18 <_dtoa_r+0x2c0>)
 802ba82:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ba86:	f7d4 fdd7 	bl	8000638 <__aeabi_dmul>
 802ba8a:	4602      	mov	r2, r0
 802ba8c:	460b      	mov	r3, r1
 802ba8e:	4620      	mov	r0, r4
 802ba90:	4629      	mov	r1, r5
 802ba92:	f7d4 fc1b 	bl	80002cc <__adddf3>
 802ba96:	4604      	mov	r4, r0
 802ba98:	460d      	mov	r5, r1
 802ba9a:	f7d5 f87d 	bl	8000b98 <__aeabi_d2iz>
 802ba9e:	2200      	movs	r2, #0
 802baa0:	4607      	mov	r7, r0
 802baa2:	2300      	movs	r3, #0
 802baa4:	4620      	mov	r0, r4
 802baa6:	4629      	mov	r1, r5
 802baa8:	f7d5 f838 	bl	8000b1c <__aeabi_dcmplt>
 802baac:	b140      	cbz	r0, 802bac0 <_dtoa_r+0x168>
 802baae:	4638      	mov	r0, r7
 802bab0:	f7d4 fd58 	bl	8000564 <__aeabi_i2d>
 802bab4:	4622      	mov	r2, r4
 802bab6:	462b      	mov	r3, r5
 802bab8:	f7d5 f826 	bl	8000b08 <__aeabi_dcmpeq>
 802babc:	b900      	cbnz	r0, 802bac0 <_dtoa_r+0x168>
 802babe:	3f01      	subs	r7, #1
 802bac0:	2f16      	cmp	r7, #22
 802bac2:	d851      	bhi.n	802bb68 <_dtoa_r+0x210>
 802bac4:	4b5b      	ldr	r3, [pc, #364]	@ (802bc34 <_dtoa_r+0x2dc>)
 802bac6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 802baca:	e9d3 2300 	ldrd	r2, r3, [r3]
 802bace:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 802bad2:	f7d5 f823 	bl	8000b1c <__aeabi_dcmplt>
 802bad6:	2800      	cmp	r0, #0
 802bad8:	d048      	beq.n	802bb6c <_dtoa_r+0x214>
 802bada:	3f01      	subs	r7, #1
 802badc:	2300      	movs	r3, #0
 802bade:	9312      	str	r3, [sp, #72]	@ 0x48
 802bae0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802bae2:	1b9b      	subs	r3, r3, r6
 802bae4:	1e5a      	subs	r2, r3, #1
 802bae6:	bf44      	itt	mi
 802bae8:	f1c3 0801 	rsbmi	r8, r3, #1
 802baec:	2300      	movmi	r3, #0
 802baee:	9208      	str	r2, [sp, #32]
 802baf0:	bf54      	ite	pl
 802baf2:	f04f 0800 	movpl.w	r8, #0
 802baf6:	9308      	strmi	r3, [sp, #32]
 802baf8:	2f00      	cmp	r7, #0
 802bafa:	db39      	blt.n	802bb70 <_dtoa_r+0x218>
 802bafc:	9b08      	ldr	r3, [sp, #32]
 802bafe:	970f      	str	r7, [sp, #60]	@ 0x3c
 802bb00:	443b      	add	r3, r7
 802bb02:	9308      	str	r3, [sp, #32]
 802bb04:	2300      	movs	r3, #0
 802bb06:	930a      	str	r3, [sp, #40]	@ 0x28
 802bb08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802bb0a:	2b09      	cmp	r3, #9
 802bb0c:	d864      	bhi.n	802bbd8 <_dtoa_r+0x280>
 802bb0e:	2b05      	cmp	r3, #5
 802bb10:	bfc4      	itt	gt
 802bb12:	3b04      	subgt	r3, #4
 802bb14:	9309      	strgt	r3, [sp, #36]	@ 0x24
 802bb16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802bb18:	f1a3 0302 	sub.w	r3, r3, #2
 802bb1c:	bfcc      	ite	gt
 802bb1e:	2400      	movgt	r4, #0
 802bb20:	2401      	movle	r4, #1
 802bb22:	2b03      	cmp	r3, #3
 802bb24:	d863      	bhi.n	802bbee <_dtoa_r+0x296>
 802bb26:	e8df f003 	tbb	[pc, r3]
 802bb2a:	372a      	.short	0x372a
 802bb2c:	5535      	.short	0x5535
 802bb2e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 802bb32:	441e      	add	r6, r3
 802bb34:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 802bb38:	2b20      	cmp	r3, #32
 802bb3a:	bfc1      	itttt	gt
 802bb3c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 802bb40:	409f      	lslgt	r7, r3
 802bb42:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 802bb46:	fa24 f303 	lsrgt.w	r3, r4, r3
 802bb4a:	bfd6      	itet	le
 802bb4c:	f1c3 0320 	rsble	r3, r3, #32
 802bb50:	ea47 0003 	orrgt.w	r0, r7, r3
 802bb54:	fa04 f003 	lslle.w	r0, r4, r3
 802bb58:	f7d4 fcf4 	bl	8000544 <__aeabi_ui2d>
 802bb5c:	2201      	movs	r2, #1
 802bb5e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 802bb62:	3e01      	subs	r6, #1
 802bb64:	9214      	str	r2, [sp, #80]	@ 0x50
 802bb66:	e777      	b.n	802ba58 <_dtoa_r+0x100>
 802bb68:	2301      	movs	r3, #1
 802bb6a:	e7b8      	b.n	802bade <_dtoa_r+0x186>
 802bb6c:	9012      	str	r0, [sp, #72]	@ 0x48
 802bb6e:	e7b7      	b.n	802bae0 <_dtoa_r+0x188>
 802bb70:	427b      	negs	r3, r7
 802bb72:	930a      	str	r3, [sp, #40]	@ 0x28
 802bb74:	2300      	movs	r3, #0
 802bb76:	eba8 0807 	sub.w	r8, r8, r7
 802bb7a:	930f      	str	r3, [sp, #60]	@ 0x3c
 802bb7c:	e7c4      	b.n	802bb08 <_dtoa_r+0x1b0>
 802bb7e:	2300      	movs	r3, #0
 802bb80:	930b      	str	r3, [sp, #44]	@ 0x2c
 802bb82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802bb84:	2b00      	cmp	r3, #0
 802bb86:	dc35      	bgt.n	802bbf4 <_dtoa_r+0x29c>
 802bb88:	2301      	movs	r3, #1
 802bb8a:	9300      	str	r3, [sp, #0]
 802bb8c:	9307      	str	r3, [sp, #28]
 802bb8e:	461a      	mov	r2, r3
 802bb90:	920e      	str	r2, [sp, #56]	@ 0x38
 802bb92:	e00b      	b.n	802bbac <_dtoa_r+0x254>
 802bb94:	2301      	movs	r3, #1
 802bb96:	e7f3      	b.n	802bb80 <_dtoa_r+0x228>
 802bb98:	2300      	movs	r3, #0
 802bb9a:	930b      	str	r3, [sp, #44]	@ 0x2c
 802bb9c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802bb9e:	18fb      	adds	r3, r7, r3
 802bba0:	9300      	str	r3, [sp, #0]
 802bba2:	3301      	adds	r3, #1
 802bba4:	2b01      	cmp	r3, #1
 802bba6:	9307      	str	r3, [sp, #28]
 802bba8:	bfb8      	it	lt
 802bbaa:	2301      	movlt	r3, #1
 802bbac:	f8db 001c 	ldr.w	r0, [fp, #28]
 802bbb0:	2100      	movs	r1, #0
 802bbb2:	2204      	movs	r2, #4
 802bbb4:	f102 0514 	add.w	r5, r2, #20
 802bbb8:	429d      	cmp	r5, r3
 802bbba:	d91f      	bls.n	802bbfc <_dtoa_r+0x2a4>
 802bbbc:	6041      	str	r1, [r0, #4]
 802bbbe:	4658      	mov	r0, fp
 802bbc0:	f000 fcd8 	bl	802c574 <_Balloc>
 802bbc4:	4682      	mov	sl, r0
 802bbc6:	2800      	cmp	r0, #0
 802bbc8:	d13c      	bne.n	802bc44 <_dtoa_r+0x2ec>
 802bbca:	4b1b      	ldr	r3, [pc, #108]	@ (802bc38 <_dtoa_r+0x2e0>)
 802bbcc:	4602      	mov	r2, r0
 802bbce:	f240 11af 	movw	r1, #431	@ 0x1af
 802bbd2:	e6d8      	b.n	802b986 <_dtoa_r+0x2e>
 802bbd4:	2301      	movs	r3, #1
 802bbd6:	e7e0      	b.n	802bb9a <_dtoa_r+0x242>
 802bbd8:	2401      	movs	r4, #1
 802bbda:	2300      	movs	r3, #0
 802bbdc:	9309      	str	r3, [sp, #36]	@ 0x24
 802bbde:	940b      	str	r4, [sp, #44]	@ 0x2c
 802bbe0:	f04f 33ff 	mov.w	r3, #4294967295
 802bbe4:	9300      	str	r3, [sp, #0]
 802bbe6:	9307      	str	r3, [sp, #28]
 802bbe8:	2200      	movs	r2, #0
 802bbea:	2312      	movs	r3, #18
 802bbec:	e7d0      	b.n	802bb90 <_dtoa_r+0x238>
 802bbee:	2301      	movs	r3, #1
 802bbf0:	930b      	str	r3, [sp, #44]	@ 0x2c
 802bbf2:	e7f5      	b.n	802bbe0 <_dtoa_r+0x288>
 802bbf4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802bbf6:	9300      	str	r3, [sp, #0]
 802bbf8:	9307      	str	r3, [sp, #28]
 802bbfa:	e7d7      	b.n	802bbac <_dtoa_r+0x254>
 802bbfc:	3101      	adds	r1, #1
 802bbfe:	0052      	lsls	r2, r2, #1
 802bc00:	e7d8      	b.n	802bbb4 <_dtoa_r+0x25c>
 802bc02:	bf00      	nop
 802bc04:	f3af 8000 	nop.w
 802bc08:	636f4361 	.word	0x636f4361
 802bc0c:	3fd287a7 	.word	0x3fd287a7
 802bc10:	8b60c8b3 	.word	0x8b60c8b3
 802bc14:	3fc68a28 	.word	0x3fc68a28
 802bc18:	509f79fb 	.word	0x509f79fb
 802bc1c:	3fd34413 	.word	0x3fd34413
 802bc20:	08042bd3 	.word	0x08042bd3
 802bc24:	08042bea 	.word	0x08042bea
 802bc28:	7ff00000 	.word	0x7ff00000
 802bc2c:	08040b1c 	.word	0x08040b1c
 802bc30:	3ff80000 	.word	0x3ff80000
 802bc34:	08042ce0 	.word	0x08042ce0
 802bc38:	08042c42 	.word	0x08042c42
 802bc3c:	08042bcf 	.word	0x08042bcf
 802bc40:	08040b1b 	.word	0x08040b1b
 802bc44:	f8db 301c 	ldr.w	r3, [fp, #28]
 802bc48:	6018      	str	r0, [r3, #0]
 802bc4a:	9b07      	ldr	r3, [sp, #28]
 802bc4c:	2b0e      	cmp	r3, #14
 802bc4e:	f200 80a4 	bhi.w	802bd9a <_dtoa_r+0x442>
 802bc52:	2c00      	cmp	r4, #0
 802bc54:	f000 80a1 	beq.w	802bd9a <_dtoa_r+0x442>
 802bc58:	2f00      	cmp	r7, #0
 802bc5a:	dd33      	ble.n	802bcc4 <_dtoa_r+0x36c>
 802bc5c:	4bad      	ldr	r3, [pc, #692]	@ (802bf14 <_dtoa_r+0x5bc>)
 802bc5e:	f007 020f 	and.w	r2, r7, #15
 802bc62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802bc66:	ed93 7b00 	vldr	d7, [r3]
 802bc6a:	05f8      	lsls	r0, r7, #23
 802bc6c:	ed8d 7b04 	vstr	d7, [sp, #16]
 802bc70:	ea4f 1427 	mov.w	r4, r7, asr #4
 802bc74:	d516      	bpl.n	802bca4 <_dtoa_r+0x34c>
 802bc76:	4ba8      	ldr	r3, [pc, #672]	@ (802bf18 <_dtoa_r+0x5c0>)
 802bc78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 802bc7c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 802bc80:	f7d4 fe04 	bl	800088c <__aeabi_ddiv>
 802bc84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802bc88:	f004 040f 	and.w	r4, r4, #15
 802bc8c:	2603      	movs	r6, #3
 802bc8e:	4da2      	ldr	r5, [pc, #648]	@ (802bf18 <_dtoa_r+0x5c0>)
 802bc90:	b954      	cbnz	r4, 802bca8 <_dtoa_r+0x350>
 802bc92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802bc96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802bc9a:	f7d4 fdf7 	bl	800088c <__aeabi_ddiv>
 802bc9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802bca2:	e028      	b.n	802bcf6 <_dtoa_r+0x39e>
 802bca4:	2602      	movs	r6, #2
 802bca6:	e7f2      	b.n	802bc8e <_dtoa_r+0x336>
 802bca8:	07e1      	lsls	r1, r4, #31
 802bcaa:	d508      	bpl.n	802bcbe <_dtoa_r+0x366>
 802bcac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802bcb0:	e9d5 2300 	ldrd	r2, r3, [r5]
 802bcb4:	f7d4 fcc0 	bl	8000638 <__aeabi_dmul>
 802bcb8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 802bcbc:	3601      	adds	r6, #1
 802bcbe:	1064      	asrs	r4, r4, #1
 802bcc0:	3508      	adds	r5, #8
 802bcc2:	e7e5      	b.n	802bc90 <_dtoa_r+0x338>
 802bcc4:	f000 80d2 	beq.w	802be6c <_dtoa_r+0x514>
 802bcc8:	427c      	negs	r4, r7
 802bcca:	4b92      	ldr	r3, [pc, #584]	@ (802bf14 <_dtoa_r+0x5bc>)
 802bccc:	4d92      	ldr	r5, [pc, #584]	@ (802bf18 <_dtoa_r+0x5c0>)
 802bcce:	f004 020f 	and.w	r2, r4, #15
 802bcd2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802bcd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 802bcda:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 802bcde:	f7d4 fcab 	bl	8000638 <__aeabi_dmul>
 802bce2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802bce6:	1124      	asrs	r4, r4, #4
 802bce8:	2300      	movs	r3, #0
 802bcea:	2602      	movs	r6, #2
 802bcec:	2c00      	cmp	r4, #0
 802bcee:	f040 80b2 	bne.w	802be56 <_dtoa_r+0x4fe>
 802bcf2:	2b00      	cmp	r3, #0
 802bcf4:	d1d3      	bne.n	802bc9e <_dtoa_r+0x346>
 802bcf6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802bcf8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 802bcfc:	2b00      	cmp	r3, #0
 802bcfe:	f000 80b7 	beq.w	802be70 <_dtoa_r+0x518>
 802bd02:	4b86      	ldr	r3, [pc, #536]	@ (802bf1c <_dtoa_r+0x5c4>)
 802bd04:	2200      	movs	r2, #0
 802bd06:	4620      	mov	r0, r4
 802bd08:	4629      	mov	r1, r5
 802bd0a:	f7d4 ff07 	bl	8000b1c <__aeabi_dcmplt>
 802bd0e:	2800      	cmp	r0, #0
 802bd10:	f000 80ae 	beq.w	802be70 <_dtoa_r+0x518>
 802bd14:	9b07      	ldr	r3, [sp, #28]
 802bd16:	2b00      	cmp	r3, #0
 802bd18:	f000 80aa 	beq.w	802be70 <_dtoa_r+0x518>
 802bd1c:	9b00      	ldr	r3, [sp, #0]
 802bd1e:	2b00      	cmp	r3, #0
 802bd20:	dd37      	ble.n	802bd92 <_dtoa_r+0x43a>
 802bd22:	1e7b      	subs	r3, r7, #1
 802bd24:	9304      	str	r3, [sp, #16]
 802bd26:	4620      	mov	r0, r4
 802bd28:	4b7d      	ldr	r3, [pc, #500]	@ (802bf20 <_dtoa_r+0x5c8>)
 802bd2a:	2200      	movs	r2, #0
 802bd2c:	4629      	mov	r1, r5
 802bd2e:	f7d4 fc83 	bl	8000638 <__aeabi_dmul>
 802bd32:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802bd36:	9c00      	ldr	r4, [sp, #0]
 802bd38:	3601      	adds	r6, #1
 802bd3a:	4630      	mov	r0, r6
 802bd3c:	f7d4 fc12 	bl	8000564 <__aeabi_i2d>
 802bd40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802bd44:	f7d4 fc78 	bl	8000638 <__aeabi_dmul>
 802bd48:	4b76      	ldr	r3, [pc, #472]	@ (802bf24 <_dtoa_r+0x5cc>)
 802bd4a:	2200      	movs	r2, #0
 802bd4c:	f7d4 fabe 	bl	80002cc <__adddf3>
 802bd50:	4605      	mov	r5, r0
 802bd52:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 802bd56:	2c00      	cmp	r4, #0
 802bd58:	f040 808d 	bne.w	802be76 <_dtoa_r+0x51e>
 802bd5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802bd60:	4b71      	ldr	r3, [pc, #452]	@ (802bf28 <_dtoa_r+0x5d0>)
 802bd62:	2200      	movs	r2, #0
 802bd64:	f7d4 fab0 	bl	80002c8 <__aeabi_dsub>
 802bd68:	4602      	mov	r2, r0
 802bd6a:	460b      	mov	r3, r1
 802bd6c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 802bd70:	462a      	mov	r2, r5
 802bd72:	4633      	mov	r3, r6
 802bd74:	f7d4 fef0 	bl	8000b58 <__aeabi_dcmpgt>
 802bd78:	2800      	cmp	r0, #0
 802bd7a:	f040 828b 	bne.w	802c294 <_dtoa_r+0x93c>
 802bd7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802bd82:	462a      	mov	r2, r5
 802bd84:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 802bd88:	f7d4 fec8 	bl	8000b1c <__aeabi_dcmplt>
 802bd8c:	2800      	cmp	r0, #0
 802bd8e:	f040 8128 	bne.w	802bfe2 <_dtoa_r+0x68a>
 802bd92:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 802bd96:	e9cd 3402 	strd	r3, r4, [sp, #8]
 802bd9a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802bd9c:	2b00      	cmp	r3, #0
 802bd9e:	f2c0 815a 	blt.w	802c056 <_dtoa_r+0x6fe>
 802bda2:	2f0e      	cmp	r7, #14
 802bda4:	f300 8157 	bgt.w	802c056 <_dtoa_r+0x6fe>
 802bda8:	4b5a      	ldr	r3, [pc, #360]	@ (802bf14 <_dtoa_r+0x5bc>)
 802bdaa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 802bdae:	ed93 7b00 	vldr	d7, [r3]
 802bdb2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802bdb4:	2b00      	cmp	r3, #0
 802bdb6:	ed8d 7b00 	vstr	d7, [sp]
 802bdba:	da03      	bge.n	802bdc4 <_dtoa_r+0x46c>
 802bdbc:	9b07      	ldr	r3, [sp, #28]
 802bdbe:	2b00      	cmp	r3, #0
 802bdc0:	f340 8101 	ble.w	802bfc6 <_dtoa_r+0x66e>
 802bdc4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 802bdc8:	4656      	mov	r6, sl
 802bdca:	e9dd 2300 	ldrd	r2, r3, [sp]
 802bdce:	4620      	mov	r0, r4
 802bdd0:	4629      	mov	r1, r5
 802bdd2:	f7d4 fd5b 	bl	800088c <__aeabi_ddiv>
 802bdd6:	f7d4 fedf 	bl	8000b98 <__aeabi_d2iz>
 802bdda:	4680      	mov	r8, r0
 802bddc:	f7d4 fbc2 	bl	8000564 <__aeabi_i2d>
 802bde0:	e9dd 2300 	ldrd	r2, r3, [sp]
 802bde4:	f7d4 fc28 	bl	8000638 <__aeabi_dmul>
 802bde8:	4602      	mov	r2, r0
 802bdea:	460b      	mov	r3, r1
 802bdec:	4620      	mov	r0, r4
 802bdee:	4629      	mov	r1, r5
 802bdf0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 802bdf4:	f7d4 fa68 	bl	80002c8 <__aeabi_dsub>
 802bdf8:	f806 4b01 	strb.w	r4, [r6], #1
 802bdfc:	9d07      	ldr	r5, [sp, #28]
 802bdfe:	eba6 040a 	sub.w	r4, r6, sl
 802be02:	42a5      	cmp	r5, r4
 802be04:	4602      	mov	r2, r0
 802be06:	460b      	mov	r3, r1
 802be08:	f040 8117 	bne.w	802c03a <_dtoa_r+0x6e2>
 802be0c:	f7d4 fa5e 	bl	80002cc <__adddf3>
 802be10:	e9dd 2300 	ldrd	r2, r3, [sp]
 802be14:	4604      	mov	r4, r0
 802be16:	460d      	mov	r5, r1
 802be18:	f7d4 fe9e 	bl	8000b58 <__aeabi_dcmpgt>
 802be1c:	2800      	cmp	r0, #0
 802be1e:	f040 80f9 	bne.w	802c014 <_dtoa_r+0x6bc>
 802be22:	e9dd 2300 	ldrd	r2, r3, [sp]
 802be26:	4620      	mov	r0, r4
 802be28:	4629      	mov	r1, r5
 802be2a:	f7d4 fe6d 	bl	8000b08 <__aeabi_dcmpeq>
 802be2e:	b118      	cbz	r0, 802be38 <_dtoa_r+0x4e0>
 802be30:	f018 0f01 	tst.w	r8, #1
 802be34:	f040 80ee 	bne.w	802c014 <_dtoa_r+0x6bc>
 802be38:	4649      	mov	r1, r9
 802be3a:	4658      	mov	r0, fp
 802be3c:	f000 fbda 	bl	802c5f4 <_Bfree>
 802be40:	2300      	movs	r3, #0
 802be42:	7033      	strb	r3, [r6, #0]
 802be44:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802be46:	3701      	adds	r7, #1
 802be48:	601f      	str	r7, [r3, #0]
 802be4a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802be4c:	2b00      	cmp	r3, #0
 802be4e:	f000 831d 	beq.w	802c48c <_dtoa_r+0xb34>
 802be52:	601e      	str	r6, [r3, #0]
 802be54:	e31a      	b.n	802c48c <_dtoa_r+0xb34>
 802be56:	07e2      	lsls	r2, r4, #31
 802be58:	d505      	bpl.n	802be66 <_dtoa_r+0x50e>
 802be5a:	e9d5 2300 	ldrd	r2, r3, [r5]
 802be5e:	f7d4 fbeb 	bl	8000638 <__aeabi_dmul>
 802be62:	3601      	adds	r6, #1
 802be64:	2301      	movs	r3, #1
 802be66:	1064      	asrs	r4, r4, #1
 802be68:	3508      	adds	r5, #8
 802be6a:	e73f      	b.n	802bcec <_dtoa_r+0x394>
 802be6c:	2602      	movs	r6, #2
 802be6e:	e742      	b.n	802bcf6 <_dtoa_r+0x39e>
 802be70:	9c07      	ldr	r4, [sp, #28]
 802be72:	9704      	str	r7, [sp, #16]
 802be74:	e761      	b.n	802bd3a <_dtoa_r+0x3e2>
 802be76:	4b27      	ldr	r3, [pc, #156]	@ (802bf14 <_dtoa_r+0x5bc>)
 802be78:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802be7a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 802be7e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 802be82:	4454      	add	r4, sl
 802be84:	2900      	cmp	r1, #0
 802be86:	d053      	beq.n	802bf30 <_dtoa_r+0x5d8>
 802be88:	4928      	ldr	r1, [pc, #160]	@ (802bf2c <_dtoa_r+0x5d4>)
 802be8a:	2000      	movs	r0, #0
 802be8c:	f7d4 fcfe 	bl	800088c <__aeabi_ddiv>
 802be90:	4633      	mov	r3, r6
 802be92:	462a      	mov	r2, r5
 802be94:	f7d4 fa18 	bl	80002c8 <__aeabi_dsub>
 802be98:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 802be9c:	4656      	mov	r6, sl
 802be9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802bea2:	f7d4 fe79 	bl	8000b98 <__aeabi_d2iz>
 802bea6:	4605      	mov	r5, r0
 802bea8:	f7d4 fb5c 	bl	8000564 <__aeabi_i2d>
 802beac:	4602      	mov	r2, r0
 802beae:	460b      	mov	r3, r1
 802beb0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802beb4:	f7d4 fa08 	bl	80002c8 <__aeabi_dsub>
 802beb8:	3530      	adds	r5, #48	@ 0x30
 802beba:	4602      	mov	r2, r0
 802bebc:	460b      	mov	r3, r1
 802bebe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 802bec2:	f806 5b01 	strb.w	r5, [r6], #1
 802bec6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 802beca:	f7d4 fe27 	bl	8000b1c <__aeabi_dcmplt>
 802bece:	2800      	cmp	r0, #0
 802bed0:	d171      	bne.n	802bfb6 <_dtoa_r+0x65e>
 802bed2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802bed6:	4911      	ldr	r1, [pc, #68]	@ (802bf1c <_dtoa_r+0x5c4>)
 802bed8:	2000      	movs	r0, #0
 802beda:	f7d4 f9f5 	bl	80002c8 <__aeabi_dsub>
 802bede:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 802bee2:	f7d4 fe1b 	bl	8000b1c <__aeabi_dcmplt>
 802bee6:	2800      	cmp	r0, #0
 802bee8:	f040 8095 	bne.w	802c016 <_dtoa_r+0x6be>
 802beec:	42a6      	cmp	r6, r4
 802beee:	f43f af50 	beq.w	802bd92 <_dtoa_r+0x43a>
 802bef2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 802bef6:	4b0a      	ldr	r3, [pc, #40]	@ (802bf20 <_dtoa_r+0x5c8>)
 802bef8:	2200      	movs	r2, #0
 802befa:	f7d4 fb9d 	bl	8000638 <__aeabi_dmul>
 802befe:	4b08      	ldr	r3, [pc, #32]	@ (802bf20 <_dtoa_r+0x5c8>)
 802bf00:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 802bf04:	2200      	movs	r2, #0
 802bf06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802bf0a:	f7d4 fb95 	bl	8000638 <__aeabi_dmul>
 802bf0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802bf12:	e7c4      	b.n	802be9e <_dtoa_r+0x546>
 802bf14:	08042ce0 	.word	0x08042ce0
 802bf18:	08042cb8 	.word	0x08042cb8
 802bf1c:	3ff00000 	.word	0x3ff00000
 802bf20:	40240000 	.word	0x40240000
 802bf24:	401c0000 	.word	0x401c0000
 802bf28:	40140000 	.word	0x40140000
 802bf2c:	3fe00000 	.word	0x3fe00000
 802bf30:	4631      	mov	r1, r6
 802bf32:	4628      	mov	r0, r5
 802bf34:	f7d4 fb80 	bl	8000638 <__aeabi_dmul>
 802bf38:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 802bf3c:	9415      	str	r4, [sp, #84]	@ 0x54
 802bf3e:	4656      	mov	r6, sl
 802bf40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802bf44:	f7d4 fe28 	bl	8000b98 <__aeabi_d2iz>
 802bf48:	4605      	mov	r5, r0
 802bf4a:	f7d4 fb0b 	bl	8000564 <__aeabi_i2d>
 802bf4e:	4602      	mov	r2, r0
 802bf50:	460b      	mov	r3, r1
 802bf52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802bf56:	f7d4 f9b7 	bl	80002c8 <__aeabi_dsub>
 802bf5a:	3530      	adds	r5, #48	@ 0x30
 802bf5c:	f806 5b01 	strb.w	r5, [r6], #1
 802bf60:	4602      	mov	r2, r0
 802bf62:	460b      	mov	r3, r1
 802bf64:	42a6      	cmp	r6, r4
 802bf66:	e9cd 2302 	strd	r2, r3, [sp, #8]
 802bf6a:	f04f 0200 	mov.w	r2, #0
 802bf6e:	d124      	bne.n	802bfba <_dtoa_r+0x662>
 802bf70:	4bac      	ldr	r3, [pc, #688]	@ (802c224 <_dtoa_r+0x8cc>)
 802bf72:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 802bf76:	f7d4 f9a9 	bl	80002cc <__adddf3>
 802bf7a:	4602      	mov	r2, r0
 802bf7c:	460b      	mov	r3, r1
 802bf7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802bf82:	f7d4 fde9 	bl	8000b58 <__aeabi_dcmpgt>
 802bf86:	2800      	cmp	r0, #0
 802bf88:	d145      	bne.n	802c016 <_dtoa_r+0x6be>
 802bf8a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 802bf8e:	49a5      	ldr	r1, [pc, #660]	@ (802c224 <_dtoa_r+0x8cc>)
 802bf90:	2000      	movs	r0, #0
 802bf92:	f7d4 f999 	bl	80002c8 <__aeabi_dsub>
 802bf96:	4602      	mov	r2, r0
 802bf98:	460b      	mov	r3, r1
 802bf9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802bf9e:	f7d4 fdbd 	bl	8000b1c <__aeabi_dcmplt>
 802bfa2:	2800      	cmp	r0, #0
 802bfa4:	f43f aef5 	beq.w	802bd92 <_dtoa_r+0x43a>
 802bfa8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 802bfaa:	1e73      	subs	r3, r6, #1
 802bfac:	9315      	str	r3, [sp, #84]	@ 0x54
 802bfae:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 802bfb2:	2b30      	cmp	r3, #48	@ 0x30
 802bfb4:	d0f8      	beq.n	802bfa8 <_dtoa_r+0x650>
 802bfb6:	9f04      	ldr	r7, [sp, #16]
 802bfb8:	e73e      	b.n	802be38 <_dtoa_r+0x4e0>
 802bfba:	4b9b      	ldr	r3, [pc, #620]	@ (802c228 <_dtoa_r+0x8d0>)
 802bfbc:	f7d4 fb3c 	bl	8000638 <__aeabi_dmul>
 802bfc0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802bfc4:	e7bc      	b.n	802bf40 <_dtoa_r+0x5e8>
 802bfc6:	d10c      	bne.n	802bfe2 <_dtoa_r+0x68a>
 802bfc8:	4b98      	ldr	r3, [pc, #608]	@ (802c22c <_dtoa_r+0x8d4>)
 802bfca:	2200      	movs	r2, #0
 802bfcc:	e9dd 0100 	ldrd	r0, r1, [sp]
 802bfd0:	f7d4 fb32 	bl	8000638 <__aeabi_dmul>
 802bfd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802bfd8:	f7d4 fdb4 	bl	8000b44 <__aeabi_dcmpge>
 802bfdc:	2800      	cmp	r0, #0
 802bfde:	f000 8157 	beq.w	802c290 <_dtoa_r+0x938>
 802bfe2:	2400      	movs	r4, #0
 802bfe4:	4625      	mov	r5, r4
 802bfe6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802bfe8:	43db      	mvns	r3, r3
 802bfea:	9304      	str	r3, [sp, #16]
 802bfec:	4656      	mov	r6, sl
 802bfee:	2700      	movs	r7, #0
 802bff0:	4621      	mov	r1, r4
 802bff2:	4658      	mov	r0, fp
 802bff4:	f000 fafe 	bl	802c5f4 <_Bfree>
 802bff8:	2d00      	cmp	r5, #0
 802bffa:	d0dc      	beq.n	802bfb6 <_dtoa_r+0x65e>
 802bffc:	b12f      	cbz	r7, 802c00a <_dtoa_r+0x6b2>
 802bffe:	42af      	cmp	r7, r5
 802c000:	d003      	beq.n	802c00a <_dtoa_r+0x6b2>
 802c002:	4639      	mov	r1, r7
 802c004:	4658      	mov	r0, fp
 802c006:	f000 faf5 	bl	802c5f4 <_Bfree>
 802c00a:	4629      	mov	r1, r5
 802c00c:	4658      	mov	r0, fp
 802c00e:	f000 faf1 	bl	802c5f4 <_Bfree>
 802c012:	e7d0      	b.n	802bfb6 <_dtoa_r+0x65e>
 802c014:	9704      	str	r7, [sp, #16]
 802c016:	4633      	mov	r3, r6
 802c018:	461e      	mov	r6, r3
 802c01a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802c01e:	2a39      	cmp	r2, #57	@ 0x39
 802c020:	d107      	bne.n	802c032 <_dtoa_r+0x6da>
 802c022:	459a      	cmp	sl, r3
 802c024:	d1f8      	bne.n	802c018 <_dtoa_r+0x6c0>
 802c026:	9a04      	ldr	r2, [sp, #16]
 802c028:	3201      	adds	r2, #1
 802c02a:	9204      	str	r2, [sp, #16]
 802c02c:	2230      	movs	r2, #48	@ 0x30
 802c02e:	f88a 2000 	strb.w	r2, [sl]
 802c032:	781a      	ldrb	r2, [r3, #0]
 802c034:	3201      	adds	r2, #1
 802c036:	701a      	strb	r2, [r3, #0]
 802c038:	e7bd      	b.n	802bfb6 <_dtoa_r+0x65e>
 802c03a:	4b7b      	ldr	r3, [pc, #492]	@ (802c228 <_dtoa_r+0x8d0>)
 802c03c:	2200      	movs	r2, #0
 802c03e:	f7d4 fafb 	bl	8000638 <__aeabi_dmul>
 802c042:	2200      	movs	r2, #0
 802c044:	2300      	movs	r3, #0
 802c046:	4604      	mov	r4, r0
 802c048:	460d      	mov	r5, r1
 802c04a:	f7d4 fd5d 	bl	8000b08 <__aeabi_dcmpeq>
 802c04e:	2800      	cmp	r0, #0
 802c050:	f43f aebb 	beq.w	802bdca <_dtoa_r+0x472>
 802c054:	e6f0      	b.n	802be38 <_dtoa_r+0x4e0>
 802c056:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 802c058:	2a00      	cmp	r2, #0
 802c05a:	f000 80db 	beq.w	802c214 <_dtoa_r+0x8bc>
 802c05e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802c060:	2a01      	cmp	r2, #1
 802c062:	f300 80bf 	bgt.w	802c1e4 <_dtoa_r+0x88c>
 802c066:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 802c068:	2a00      	cmp	r2, #0
 802c06a:	f000 80b7 	beq.w	802c1dc <_dtoa_r+0x884>
 802c06e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 802c072:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 802c074:	4646      	mov	r6, r8
 802c076:	9a08      	ldr	r2, [sp, #32]
 802c078:	2101      	movs	r1, #1
 802c07a:	441a      	add	r2, r3
 802c07c:	4658      	mov	r0, fp
 802c07e:	4498      	add	r8, r3
 802c080:	9208      	str	r2, [sp, #32]
 802c082:	f000 fb6b 	bl	802c75c <__i2b>
 802c086:	4605      	mov	r5, r0
 802c088:	b15e      	cbz	r6, 802c0a2 <_dtoa_r+0x74a>
 802c08a:	9b08      	ldr	r3, [sp, #32]
 802c08c:	2b00      	cmp	r3, #0
 802c08e:	dd08      	ble.n	802c0a2 <_dtoa_r+0x74a>
 802c090:	42b3      	cmp	r3, r6
 802c092:	9a08      	ldr	r2, [sp, #32]
 802c094:	bfa8      	it	ge
 802c096:	4633      	movge	r3, r6
 802c098:	eba8 0803 	sub.w	r8, r8, r3
 802c09c:	1af6      	subs	r6, r6, r3
 802c09e:	1ad3      	subs	r3, r2, r3
 802c0a0:	9308      	str	r3, [sp, #32]
 802c0a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802c0a4:	b1f3      	cbz	r3, 802c0e4 <_dtoa_r+0x78c>
 802c0a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802c0a8:	2b00      	cmp	r3, #0
 802c0aa:	f000 80b7 	beq.w	802c21c <_dtoa_r+0x8c4>
 802c0ae:	b18c      	cbz	r4, 802c0d4 <_dtoa_r+0x77c>
 802c0b0:	4629      	mov	r1, r5
 802c0b2:	4622      	mov	r2, r4
 802c0b4:	4658      	mov	r0, fp
 802c0b6:	f000 fc11 	bl	802c8dc <__pow5mult>
 802c0ba:	464a      	mov	r2, r9
 802c0bc:	4601      	mov	r1, r0
 802c0be:	4605      	mov	r5, r0
 802c0c0:	4658      	mov	r0, fp
 802c0c2:	f000 fb61 	bl	802c788 <__multiply>
 802c0c6:	4649      	mov	r1, r9
 802c0c8:	9004      	str	r0, [sp, #16]
 802c0ca:	4658      	mov	r0, fp
 802c0cc:	f000 fa92 	bl	802c5f4 <_Bfree>
 802c0d0:	9b04      	ldr	r3, [sp, #16]
 802c0d2:	4699      	mov	r9, r3
 802c0d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802c0d6:	1b1a      	subs	r2, r3, r4
 802c0d8:	d004      	beq.n	802c0e4 <_dtoa_r+0x78c>
 802c0da:	4649      	mov	r1, r9
 802c0dc:	4658      	mov	r0, fp
 802c0de:	f000 fbfd 	bl	802c8dc <__pow5mult>
 802c0e2:	4681      	mov	r9, r0
 802c0e4:	2101      	movs	r1, #1
 802c0e6:	4658      	mov	r0, fp
 802c0e8:	f000 fb38 	bl	802c75c <__i2b>
 802c0ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802c0ee:	4604      	mov	r4, r0
 802c0f0:	2b00      	cmp	r3, #0
 802c0f2:	f000 81cf 	beq.w	802c494 <_dtoa_r+0xb3c>
 802c0f6:	461a      	mov	r2, r3
 802c0f8:	4601      	mov	r1, r0
 802c0fa:	4658      	mov	r0, fp
 802c0fc:	f000 fbee 	bl	802c8dc <__pow5mult>
 802c100:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802c102:	2b01      	cmp	r3, #1
 802c104:	4604      	mov	r4, r0
 802c106:	f300 8095 	bgt.w	802c234 <_dtoa_r+0x8dc>
 802c10a:	9b02      	ldr	r3, [sp, #8]
 802c10c:	2b00      	cmp	r3, #0
 802c10e:	f040 8087 	bne.w	802c220 <_dtoa_r+0x8c8>
 802c112:	9b03      	ldr	r3, [sp, #12]
 802c114:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802c118:	2b00      	cmp	r3, #0
 802c11a:	f040 8089 	bne.w	802c230 <_dtoa_r+0x8d8>
 802c11e:	9b03      	ldr	r3, [sp, #12]
 802c120:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 802c124:	0d1b      	lsrs	r3, r3, #20
 802c126:	051b      	lsls	r3, r3, #20
 802c128:	b12b      	cbz	r3, 802c136 <_dtoa_r+0x7de>
 802c12a:	9b08      	ldr	r3, [sp, #32]
 802c12c:	3301      	adds	r3, #1
 802c12e:	9308      	str	r3, [sp, #32]
 802c130:	f108 0801 	add.w	r8, r8, #1
 802c134:	2301      	movs	r3, #1
 802c136:	930a      	str	r3, [sp, #40]	@ 0x28
 802c138:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802c13a:	2b00      	cmp	r3, #0
 802c13c:	f000 81b0 	beq.w	802c4a0 <_dtoa_r+0xb48>
 802c140:	6923      	ldr	r3, [r4, #16]
 802c142:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 802c146:	6918      	ldr	r0, [r3, #16]
 802c148:	f000 fabc 	bl	802c6c4 <__hi0bits>
 802c14c:	f1c0 0020 	rsb	r0, r0, #32
 802c150:	9b08      	ldr	r3, [sp, #32]
 802c152:	4418      	add	r0, r3
 802c154:	f010 001f 	ands.w	r0, r0, #31
 802c158:	d077      	beq.n	802c24a <_dtoa_r+0x8f2>
 802c15a:	f1c0 0320 	rsb	r3, r0, #32
 802c15e:	2b04      	cmp	r3, #4
 802c160:	dd6b      	ble.n	802c23a <_dtoa_r+0x8e2>
 802c162:	9b08      	ldr	r3, [sp, #32]
 802c164:	f1c0 001c 	rsb	r0, r0, #28
 802c168:	4403      	add	r3, r0
 802c16a:	4480      	add	r8, r0
 802c16c:	4406      	add	r6, r0
 802c16e:	9308      	str	r3, [sp, #32]
 802c170:	f1b8 0f00 	cmp.w	r8, #0
 802c174:	dd05      	ble.n	802c182 <_dtoa_r+0x82a>
 802c176:	4649      	mov	r1, r9
 802c178:	4642      	mov	r2, r8
 802c17a:	4658      	mov	r0, fp
 802c17c:	f000 fc08 	bl	802c990 <__lshift>
 802c180:	4681      	mov	r9, r0
 802c182:	9b08      	ldr	r3, [sp, #32]
 802c184:	2b00      	cmp	r3, #0
 802c186:	dd05      	ble.n	802c194 <_dtoa_r+0x83c>
 802c188:	4621      	mov	r1, r4
 802c18a:	461a      	mov	r2, r3
 802c18c:	4658      	mov	r0, fp
 802c18e:	f000 fbff 	bl	802c990 <__lshift>
 802c192:	4604      	mov	r4, r0
 802c194:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802c196:	2b00      	cmp	r3, #0
 802c198:	d059      	beq.n	802c24e <_dtoa_r+0x8f6>
 802c19a:	4621      	mov	r1, r4
 802c19c:	4648      	mov	r0, r9
 802c19e:	f000 fc63 	bl	802ca68 <__mcmp>
 802c1a2:	2800      	cmp	r0, #0
 802c1a4:	da53      	bge.n	802c24e <_dtoa_r+0x8f6>
 802c1a6:	1e7b      	subs	r3, r7, #1
 802c1a8:	9304      	str	r3, [sp, #16]
 802c1aa:	4649      	mov	r1, r9
 802c1ac:	2300      	movs	r3, #0
 802c1ae:	220a      	movs	r2, #10
 802c1b0:	4658      	mov	r0, fp
 802c1b2:	f000 fa41 	bl	802c638 <__multadd>
 802c1b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802c1b8:	4681      	mov	r9, r0
 802c1ba:	2b00      	cmp	r3, #0
 802c1bc:	f000 8172 	beq.w	802c4a4 <_dtoa_r+0xb4c>
 802c1c0:	2300      	movs	r3, #0
 802c1c2:	4629      	mov	r1, r5
 802c1c4:	220a      	movs	r2, #10
 802c1c6:	4658      	mov	r0, fp
 802c1c8:	f000 fa36 	bl	802c638 <__multadd>
 802c1cc:	9b00      	ldr	r3, [sp, #0]
 802c1ce:	2b00      	cmp	r3, #0
 802c1d0:	4605      	mov	r5, r0
 802c1d2:	dc67      	bgt.n	802c2a4 <_dtoa_r+0x94c>
 802c1d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802c1d6:	2b02      	cmp	r3, #2
 802c1d8:	dc41      	bgt.n	802c25e <_dtoa_r+0x906>
 802c1da:	e063      	b.n	802c2a4 <_dtoa_r+0x94c>
 802c1dc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802c1de:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 802c1e2:	e746      	b.n	802c072 <_dtoa_r+0x71a>
 802c1e4:	9b07      	ldr	r3, [sp, #28]
 802c1e6:	1e5c      	subs	r4, r3, #1
 802c1e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802c1ea:	42a3      	cmp	r3, r4
 802c1ec:	bfbf      	itttt	lt
 802c1ee:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 802c1f0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 802c1f2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 802c1f4:	1ae3      	sublt	r3, r4, r3
 802c1f6:	bfb4      	ite	lt
 802c1f8:	18d2      	addlt	r2, r2, r3
 802c1fa:	1b1c      	subge	r4, r3, r4
 802c1fc:	9b07      	ldr	r3, [sp, #28]
 802c1fe:	bfbc      	itt	lt
 802c200:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 802c202:	2400      	movlt	r4, #0
 802c204:	2b00      	cmp	r3, #0
 802c206:	bfb5      	itete	lt
 802c208:	eba8 0603 	sublt.w	r6, r8, r3
 802c20c:	9b07      	ldrge	r3, [sp, #28]
 802c20e:	2300      	movlt	r3, #0
 802c210:	4646      	movge	r6, r8
 802c212:	e730      	b.n	802c076 <_dtoa_r+0x71e>
 802c214:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 802c216:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 802c218:	4646      	mov	r6, r8
 802c21a:	e735      	b.n	802c088 <_dtoa_r+0x730>
 802c21c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802c21e:	e75c      	b.n	802c0da <_dtoa_r+0x782>
 802c220:	2300      	movs	r3, #0
 802c222:	e788      	b.n	802c136 <_dtoa_r+0x7de>
 802c224:	3fe00000 	.word	0x3fe00000
 802c228:	40240000 	.word	0x40240000
 802c22c:	40140000 	.word	0x40140000
 802c230:	9b02      	ldr	r3, [sp, #8]
 802c232:	e780      	b.n	802c136 <_dtoa_r+0x7de>
 802c234:	2300      	movs	r3, #0
 802c236:	930a      	str	r3, [sp, #40]	@ 0x28
 802c238:	e782      	b.n	802c140 <_dtoa_r+0x7e8>
 802c23a:	d099      	beq.n	802c170 <_dtoa_r+0x818>
 802c23c:	9a08      	ldr	r2, [sp, #32]
 802c23e:	331c      	adds	r3, #28
 802c240:	441a      	add	r2, r3
 802c242:	4498      	add	r8, r3
 802c244:	441e      	add	r6, r3
 802c246:	9208      	str	r2, [sp, #32]
 802c248:	e792      	b.n	802c170 <_dtoa_r+0x818>
 802c24a:	4603      	mov	r3, r0
 802c24c:	e7f6      	b.n	802c23c <_dtoa_r+0x8e4>
 802c24e:	9b07      	ldr	r3, [sp, #28]
 802c250:	9704      	str	r7, [sp, #16]
 802c252:	2b00      	cmp	r3, #0
 802c254:	dc20      	bgt.n	802c298 <_dtoa_r+0x940>
 802c256:	9300      	str	r3, [sp, #0]
 802c258:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802c25a:	2b02      	cmp	r3, #2
 802c25c:	dd1e      	ble.n	802c29c <_dtoa_r+0x944>
 802c25e:	9b00      	ldr	r3, [sp, #0]
 802c260:	2b00      	cmp	r3, #0
 802c262:	f47f aec0 	bne.w	802bfe6 <_dtoa_r+0x68e>
 802c266:	4621      	mov	r1, r4
 802c268:	2205      	movs	r2, #5
 802c26a:	4658      	mov	r0, fp
 802c26c:	f000 f9e4 	bl	802c638 <__multadd>
 802c270:	4601      	mov	r1, r0
 802c272:	4604      	mov	r4, r0
 802c274:	4648      	mov	r0, r9
 802c276:	f000 fbf7 	bl	802ca68 <__mcmp>
 802c27a:	2800      	cmp	r0, #0
 802c27c:	f77f aeb3 	ble.w	802bfe6 <_dtoa_r+0x68e>
 802c280:	4656      	mov	r6, sl
 802c282:	2331      	movs	r3, #49	@ 0x31
 802c284:	f806 3b01 	strb.w	r3, [r6], #1
 802c288:	9b04      	ldr	r3, [sp, #16]
 802c28a:	3301      	adds	r3, #1
 802c28c:	9304      	str	r3, [sp, #16]
 802c28e:	e6ae      	b.n	802bfee <_dtoa_r+0x696>
 802c290:	9c07      	ldr	r4, [sp, #28]
 802c292:	9704      	str	r7, [sp, #16]
 802c294:	4625      	mov	r5, r4
 802c296:	e7f3      	b.n	802c280 <_dtoa_r+0x928>
 802c298:	9b07      	ldr	r3, [sp, #28]
 802c29a:	9300      	str	r3, [sp, #0]
 802c29c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802c29e:	2b00      	cmp	r3, #0
 802c2a0:	f000 8104 	beq.w	802c4ac <_dtoa_r+0xb54>
 802c2a4:	2e00      	cmp	r6, #0
 802c2a6:	dd05      	ble.n	802c2b4 <_dtoa_r+0x95c>
 802c2a8:	4629      	mov	r1, r5
 802c2aa:	4632      	mov	r2, r6
 802c2ac:	4658      	mov	r0, fp
 802c2ae:	f000 fb6f 	bl	802c990 <__lshift>
 802c2b2:	4605      	mov	r5, r0
 802c2b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802c2b6:	2b00      	cmp	r3, #0
 802c2b8:	d05a      	beq.n	802c370 <_dtoa_r+0xa18>
 802c2ba:	6869      	ldr	r1, [r5, #4]
 802c2bc:	4658      	mov	r0, fp
 802c2be:	f000 f959 	bl	802c574 <_Balloc>
 802c2c2:	4606      	mov	r6, r0
 802c2c4:	b928      	cbnz	r0, 802c2d2 <_dtoa_r+0x97a>
 802c2c6:	4b84      	ldr	r3, [pc, #528]	@ (802c4d8 <_dtoa_r+0xb80>)
 802c2c8:	4602      	mov	r2, r0
 802c2ca:	f240 21ef 	movw	r1, #751	@ 0x2ef
 802c2ce:	f7ff bb5a 	b.w	802b986 <_dtoa_r+0x2e>
 802c2d2:	692a      	ldr	r2, [r5, #16]
 802c2d4:	3202      	adds	r2, #2
 802c2d6:	0092      	lsls	r2, r2, #2
 802c2d8:	f105 010c 	add.w	r1, r5, #12
 802c2dc:	300c      	adds	r0, #12
 802c2de:	f7ff fa48 	bl	802b772 <memcpy>
 802c2e2:	2201      	movs	r2, #1
 802c2e4:	4631      	mov	r1, r6
 802c2e6:	4658      	mov	r0, fp
 802c2e8:	f000 fb52 	bl	802c990 <__lshift>
 802c2ec:	f10a 0301 	add.w	r3, sl, #1
 802c2f0:	9307      	str	r3, [sp, #28]
 802c2f2:	9b00      	ldr	r3, [sp, #0]
 802c2f4:	4453      	add	r3, sl
 802c2f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 802c2f8:	9b02      	ldr	r3, [sp, #8]
 802c2fa:	f003 0301 	and.w	r3, r3, #1
 802c2fe:	462f      	mov	r7, r5
 802c300:	930a      	str	r3, [sp, #40]	@ 0x28
 802c302:	4605      	mov	r5, r0
 802c304:	9b07      	ldr	r3, [sp, #28]
 802c306:	4621      	mov	r1, r4
 802c308:	3b01      	subs	r3, #1
 802c30a:	4648      	mov	r0, r9
 802c30c:	9300      	str	r3, [sp, #0]
 802c30e:	f7ff fa9b 	bl	802b848 <quorem>
 802c312:	4639      	mov	r1, r7
 802c314:	9002      	str	r0, [sp, #8]
 802c316:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 802c31a:	4648      	mov	r0, r9
 802c31c:	f000 fba4 	bl	802ca68 <__mcmp>
 802c320:	462a      	mov	r2, r5
 802c322:	9008      	str	r0, [sp, #32]
 802c324:	4621      	mov	r1, r4
 802c326:	4658      	mov	r0, fp
 802c328:	f000 fbba 	bl	802caa0 <__mdiff>
 802c32c:	68c2      	ldr	r2, [r0, #12]
 802c32e:	4606      	mov	r6, r0
 802c330:	bb02      	cbnz	r2, 802c374 <_dtoa_r+0xa1c>
 802c332:	4601      	mov	r1, r0
 802c334:	4648      	mov	r0, r9
 802c336:	f000 fb97 	bl	802ca68 <__mcmp>
 802c33a:	4602      	mov	r2, r0
 802c33c:	4631      	mov	r1, r6
 802c33e:	4658      	mov	r0, fp
 802c340:	920e      	str	r2, [sp, #56]	@ 0x38
 802c342:	f000 f957 	bl	802c5f4 <_Bfree>
 802c346:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802c348:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802c34a:	9e07      	ldr	r6, [sp, #28]
 802c34c:	ea43 0102 	orr.w	r1, r3, r2
 802c350:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802c352:	4319      	orrs	r1, r3
 802c354:	d110      	bne.n	802c378 <_dtoa_r+0xa20>
 802c356:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 802c35a:	d029      	beq.n	802c3b0 <_dtoa_r+0xa58>
 802c35c:	9b08      	ldr	r3, [sp, #32]
 802c35e:	2b00      	cmp	r3, #0
 802c360:	dd02      	ble.n	802c368 <_dtoa_r+0xa10>
 802c362:	9b02      	ldr	r3, [sp, #8]
 802c364:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 802c368:	9b00      	ldr	r3, [sp, #0]
 802c36a:	f883 8000 	strb.w	r8, [r3]
 802c36e:	e63f      	b.n	802bff0 <_dtoa_r+0x698>
 802c370:	4628      	mov	r0, r5
 802c372:	e7bb      	b.n	802c2ec <_dtoa_r+0x994>
 802c374:	2201      	movs	r2, #1
 802c376:	e7e1      	b.n	802c33c <_dtoa_r+0x9e4>
 802c378:	9b08      	ldr	r3, [sp, #32]
 802c37a:	2b00      	cmp	r3, #0
 802c37c:	db04      	blt.n	802c388 <_dtoa_r+0xa30>
 802c37e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802c380:	430b      	orrs	r3, r1
 802c382:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802c384:	430b      	orrs	r3, r1
 802c386:	d120      	bne.n	802c3ca <_dtoa_r+0xa72>
 802c388:	2a00      	cmp	r2, #0
 802c38a:	dded      	ble.n	802c368 <_dtoa_r+0xa10>
 802c38c:	4649      	mov	r1, r9
 802c38e:	2201      	movs	r2, #1
 802c390:	4658      	mov	r0, fp
 802c392:	f000 fafd 	bl	802c990 <__lshift>
 802c396:	4621      	mov	r1, r4
 802c398:	4681      	mov	r9, r0
 802c39a:	f000 fb65 	bl	802ca68 <__mcmp>
 802c39e:	2800      	cmp	r0, #0
 802c3a0:	dc03      	bgt.n	802c3aa <_dtoa_r+0xa52>
 802c3a2:	d1e1      	bne.n	802c368 <_dtoa_r+0xa10>
 802c3a4:	f018 0f01 	tst.w	r8, #1
 802c3a8:	d0de      	beq.n	802c368 <_dtoa_r+0xa10>
 802c3aa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 802c3ae:	d1d8      	bne.n	802c362 <_dtoa_r+0xa0a>
 802c3b0:	9a00      	ldr	r2, [sp, #0]
 802c3b2:	2339      	movs	r3, #57	@ 0x39
 802c3b4:	7013      	strb	r3, [r2, #0]
 802c3b6:	4633      	mov	r3, r6
 802c3b8:	461e      	mov	r6, r3
 802c3ba:	3b01      	subs	r3, #1
 802c3bc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 802c3c0:	2a39      	cmp	r2, #57	@ 0x39
 802c3c2:	d052      	beq.n	802c46a <_dtoa_r+0xb12>
 802c3c4:	3201      	adds	r2, #1
 802c3c6:	701a      	strb	r2, [r3, #0]
 802c3c8:	e612      	b.n	802bff0 <_dtoa_r+0x698>
 802c3ca:	2a00      	cmp	r2, #0
 802c3cc:	dd07      	ble.n	802c3de <_dtoa_r+0xa86>
 802c3ce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 802c3d2:	d0ed      	beq.n	802c3b0 <_dtoa_r+0xa58>
 802c3d4:	9a00      	ldr	r2, [sp, #0]
 802c3d6:	f108 0301 	add.w	r3, r8, #1
 802c3da:	7013      	strb	r3, [r2, #0]
 802c3dc:	e608      	b.n	802bff0 <_dtoa_r+0x698>
 802c3de:	9b07      	ldr	r3, [sp, #28]
 802c3e0:	9a07      	ldr	r2, [sp, #28]
 802c3e2:	f803 8c01 	strb.w	r8, [r3, #-1]
 802c3e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802c3e8:	4293      	cmp	r3, r2
 802c3ea:	d028      	beq.n	802c43e <_dtoa_r+0xae6>
 802c3ec:	4649      	mov	r1, r9
 802c3ee:	2300      	movs	r3, #0
 802c3f0:	220a      	movs	r2, #10
 802c3f2:	4658      	mov	r0, fp
 802c3f4:	f000 f920 	bl	802c638 <__multadd>
 802c3f8:	42af      	cmp	r7, r5
 802c3fa:	4681      	mov	r9, r0
 802c3fc:	f04f 0300 	mov.w	r3, #0
 802c400:	f04f 020a 	mov.w	r2, #10
 802c404:	4639      	mov	r1, r7
 802c406:	4658      	mov	r0, fp
 802c408:	d107      	bne.n	802c41a <_dtoa_r+0xac2>
 802c40a:	f000 f915 	bl	802c638 <__multadd>
 802c40e:	4607      	mov	r7, r0
 802c410:	4605      	mov	r5, r0
 802c412:	9b07      	ldr	r3, [sp, #28]
 802c414:	3301      	adds	r3, #1
 802c416:	9307      	str	r3, [sp, #28]
 802c418:	e774      	b.n	802c304 <_dtoa_r+0x9ac>
 802c41a:	f000 f90d 	bl	802c638 <__multadd>
 802c41e:	4629      	mov	r1, r5
 802c420:	4607      	mov	r7, r0
 802c422:	2300      	movs	r3, #0
 802c424:	220a      	movs	r2, #10
 802c426:	4658      	mov	r0, fp
 802c428:	f000 f906 	bl	802c638 <__multadd>
 802c42c:	4605      	mov	r5, r0
 802c42e:	e7f0      	b.n	802c412 <_dtoa_r+0xaba>
 802c430:	9b00      	ldr	r3, [sp, #0]
 802c432:	2b00      	cmp	r3, #0
 802c434:	bfcc      	ite	gt
 802c436:	461e      	movgt	r6, r3
 802c438:	2601      	movle	r6, #1
 802c43a:	4456      	add	r6, sl
 802c43c:	2700      	movs	r7, #0
 802c43e:	4649      	mov	r1, r9
 802c440:	2201      	movs	r2, #1
 802c442:	4658      	mov	r0, fp
 802c444:	f000 faa4 	bl	802c990 <__lshift>
 802c448:	4621      	mov	r1, r4
 802c44a:	4681      	mov	r9, r0
 802c44c:	f000 fb0c 	bl	802ca68 <__mcmp>
 802c450:	2800      	cmp	r0, #0
 802c452:	dcb0      	bgt.n	802c3b6 <_dtoa_r+0xa5e>
 802c454:	d102      	bne.n	802c45c <_dtoa_r+0xb04>
 802c456:	f018 0f01 	tst.w	r8, #1
 802c45a:	d1ac      	bne.n	802c3b6 <_dtoa_r+0xa5e>
 802c45c:	4633      	mov	r3, r6
 802c45e:	461e      	mov	r6, r3
 802c460:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802c464:	2a30      	cmp	r2, #48	@ 0x30
 802c466:	d0fa      	beq.n	802c45e <_dtoa_r+0xb06>
 802c468:	e5c2      	b.n	802bff0 <_dtoa_r+0x698>
 802c46a:	459a      	cmp	sl, r3
 802c46c:	d1a4      	bne.n	802c3b8 <_dtoa_r+0xa60>
 802c46e:	9b04      	ldr	r3, [sp, #16]
 802c470:	3301      	adds	r3, #1
 802c472:	9304      	str	r3, [sp, #16]
 802c474:	2331      	movs	r3, #49	@ 0x31
 802c476:	f88a 3000 	strb.w	r3, [sl]
 802c47a:	e5b9      	b.n	802bff0 <_dtoa_r+0x698>
 802c47c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802c47e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 802c4dc <_dtoa_r+0xb84>
 802c482:	b11b      	cbz	r3, 802c48c <_dtoa_r+0xb34>
 802c484:	f10a 0308 	add.w	r3, sl, #8
 802c488:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 802c48a:	6013      	str	r3, [r2, #0]
 802c48c:	4650      	mov	r0, sl
 802c48e:	b019      	add	sp, #100	@ 0x64
 802c490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c494:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802c496:	2b01      	cmp	r3, #1
 802c498:	f77f ae37 	ble.w	802c10a <_dtoa_r+0x7b2>
 802c49c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802c49e:	930a      	str	r3, [sp, #40]	@ 0x28
 802c4a0:	2001      	movs	r0, #1
 802c4a2:	e655      	b.n	802c150 <_dtoa_r+0x7f8>
 802c4a4:	9b00      	ldr	r3, [sp, #0]
 802c4a6:	2b00      	cmp	r3, #0
 802c4a8:	f77f aed6 	ble.w	802c258 <_dtoa_r+0x900>
 802c4ac:	4656      	mov	r6, sl
 802c4ae:	4621      	mov	r1, r4
 802c4b0:	4648      	mov	r0, r9
 802c4b2:	f7ff f9c9 	bl	802b848 <quorem>
 802c4b6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 802c4ba:	f806 8b01 	strb.w	r8, [r6], #1
 802c4be:	9b00      	ldr	r3, [sp, #0]
 802c4c0:	eba6 020a 	sub.w	r2, r6, sl
 802c4c4:	4293      	cmp	r3, r2
 802c4c6:	ddb3      	ble.n	802c430 <_dtoa_r+0xad8>
 802c4c8:	4649      	mov	r1, r9
 802c4ca:	2300      	movs	r3, #0
 802c4cc:	220a      	movs	r2, #10
 802c4ce:	4658      	mov	r0, fp
 802c4d0:	f000 f8b2 	bl	802c638 <__multadd>
 802c4d4:	4681      	mov	r9, r0
 802c4d6:	e7ea      	b.n	802c4ae <_dtoa_r+0xb56>
 802c4d8:	08042c42 	.word	0x08042c42
 802c4dc:	08042bc6 	.word	0x08042bc6

0802c4e0 <_free_r>:
 802c4e0:	b538      	push	{r3, r4, r5, lr}
 802c4e2:	4605      	mov	r5, r0
 802c4e4:	2900      	cmp	r1, #0
 802c4e6:	d041      	beq.n	802c56c <_free_r+0x8c>
 802c4e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802c4ec:	1f0c      	subs	r4, r1, #4
 802c4ee:	2b00      	cmp	r3, #0
 802c4f0:	bfb8      	it	lt
 802c4f2:	18e4      	addlt	r4, r4, r3
 802c4f4:	f7fe f938 	bl	802a768 <__malloc_lock>
 802c4f8:	4a1d      	ldr	r2, [pc, #116]	@ (802c570 <_free_r+0x90>)
 802c4fa:	6813      	ldr	r3, [r2, #0]
 802c4fc:	b933      	cbnz	r3, 802c50c <_free_r+0x2c>
 802c4fe:	6063      	str	r3, [r4, #4]
 802c500:	6014      	str	r4, [r2, #0]
 802c502:	4628      	mov	r0, r5
 802c504:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802c508:	f7fe b934 	b.w	802a774 <__malloc_unlock>
 802c50c:	42a3      	cmp	r3, r4
 802c50e:	d908      	bls.n	802c522 <_free_r+0x42>
 802c510:	6820      	ldr	r0, [r4, #0]
 802c512:	1821      	adds	r1, r4, r0
 802c514:	428b      	cmp	r3, r1
 802c516:	bf01      	itttt	eq
 802c518:	6819      	ldreq	r1, [r3, #0]
 802c51a:	685b      	ldreq	r3, [r3, #4]
 802c51c:	1809      	addeq	r1, r1, r0
 802c51e:	6021      	streq	r1, [r4, #0]
 802c520:	e7ed      	b.n	802c4fe <_free_r+0x1e>
 802c522:	461a      	mov	r2, r3
 802c524:	685b      	ldr	r3, [r3, #4]
 802c526:	b10b      	cbz	r3, 802c52c <_free_r+0x4c>
 802c528:	42a3      	cmp	r3, r4
 802c52a:	d9fa      	bls.n	802c522 <_free_r+0x42>
 802c52c:	6811      	ldr	r1, [r2, #0]
 802c52e:	1850      	adds	r0, r2, r1
 802c530:	42a0      	cmp	r0, r4
 802c532:	d10b      	bne.n	802c54c <_free_r+0x6c>
 802c534:	6820      	ldr	r0, [r4, #0]
 802c536:	4401      	add	r1, r0
 802c538:	1850      	adds	r0, r2, r1
 802c53a:	4283      	cmp	r3, r0
 802c53c:	6011      	str	r1, [r2, #0]
 802c53e:	d1e0      	bne.n	802c502 <_free_r+0x22>
 802c540:	6818      	ldr	r0, [r3, #0]
 802c542:	685b      	ldr	r3, [r3, #4]
 802c544:	6053      	str	r3, [r2, #4]
 802c546:	4408      	add	r0, r1
 802c548:	6010      	str	r0, [r2, #0]
 802c54a:	e7da      	b.n	802c502 <_free_r+0x22>
 802c54c:	d902      	bls.n	802c554 <_free_r+0x74>
 802c54e:	230c      	movs	r3, #12
 802c550:	602b      	str	r3, [r5, #0]
 802c552:	e7d6      	b.n	802c502 <_free_r+0x22>
 802c554:	6820      	ldr	r0, [r4, #0]
 802c556:	1821      	adds	r1, r4, r0
 802c558:	428b      	cmp	r3, r1
 802c55a:	bf04      	itt	eq
 802c55c:	6819      	ldreq	r1, [r3, #0]
 802c55e:	685b      	ldreq	r3, [r3, #4]
 802c560:	6063      	str	r3, [r4, #4]
 802c562:	bf04      	itt	eq
 802c564:	1809      	addeq	r1, r1, r0
 802c566:	6021      	streq	r1, [r4, #0]
 802c568:	6054      	str	r4, [r2, #4]
 802c56a:	e7ca      	b.n	802c502 <_free_r+0x22>
 802c56c:	bd38      	pop	{r3, r4, r5, pc}
 802c56e:	bf00      	nop
 802c570:	2002a834 	.word	0x2002a834

0802c574 <_Balloc>:
 802c574:	b570      	push	{r4, r5, r6, lr}
 802c576:	69c6      	ldr	r6, [r0, #28]
 802c578:	4604      	mov	r4, r0
 802c57a:	460d      	mov	r5, r1
 802c57c:	b976      	cbnz	r6, 802c59c <_Balloc+0x28>
 802c57e:	2010      	movs	r0, #16
 802c580:	f7fe f840 	bl	802a604 <malloc>
 802c584:	4602      	mov	r2, r0
 802c586:	61e0      	str	r0, [r4, #28]
 802c588:	b920      	cbnz	r0, 802c594 <_Balloc+0x20>
 802c58a:	4b18      	ldr	r3, [pc, #96]	@ (802c5ec <_Balloc+0x78>)
 802c58c:	4818      	ldr	r0, [pc, #96]	@ (802c5f0 <_Balloc+0x7c>)
 802c58e:	216b      	movs	r1, #107	@ 0x6b
 802c590:	f7fe f814 	bl	802a5bc <__assert_func>
 802c594:	e9c0 6601 	strd	r6, r6, [r0, #4]
 802c598:	6006      	str	r6, [r0, #0]
 802c59a:	60c6      	str	r6, [r0, #12]
 802c59c:	69e6      	ldr	r6, [r4, #28]
 802c59e:	68f3      	ldr	r3, [r6, #12]
 802c5a0:	b183      	cbz	r3, 802c5c4 <_Balloc+0x50>
 802c5a2:	69e3      	ldr	r3, [r4, #28]
 802c5a4:	68db      	ldr	r3, [r3, #12]
 802c5a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 802c5aa:	b9b8      	cbnz	r0, 802c5dc <_Balloc+0x68>
 802c5ac:	2101      	movs	r1, #1
 802c5ae:	fa01 f605 	lsl.w	r6, r1, r5
 802c5b2:	1d72      	adds	r2, r6, #5
 802c5b4:	0092      	lsls	r2, r2, #2
 802c5b6:	4620      	mov	r0, r4
 802c5b8:	f000 fd24 	bl	802d004 <_calloc_r>
 802c5bc:	b160      	cbz	r0, 802c5d8 <_Balloc+0x64>
 802c5be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 802c5c2:	e00e      	b.n	802c5e2 <_Balloc+0x6e>
 802c5c4:	2221      	movs	r2, #33	@ 0x21
 802c5c6:	2104      	movs	r1, #4
 802c5c8:	4620      	mov	r0, r4
 802c5ca:	f000 fd1b 	bl	802d004 <_calloc_r>
 802c5ce:	69e3      	ldr	r3, [r4, #28]
 802c5d0:	60f0      	str	r0, [r6, #12]
 802c5d2:	68db      	ldr	r3, [r3, #12]
 802c5d4:	2b00      	cmp	r3, #0
 802c5d6:	d1e4      	bne.n	802c5a2 <_Balloc+0x2e>
 802c5d8:	2000      	movs	r0, #0
 802c5da:	bd70      	pop	{r4, r5, r6, pc}
 802c5dc:	6802      	ldr	r2, [r0, #0]
 802c5de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 802c5e2:	2300      	movs	r3, #0
 802c5e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802c5e8:	e7f7      	b.n	802c5da <_Balloc+0x66>
 802c5ea:	bf00      	nop
 802c5ec:	08042bd3 	.word	0x08042bd3
 802c5f0:	08042c53 	.word	0x08042c53

0802c5f4 <_Bfree>:
 802c5f4:	b570      	push	{r4, r5, r6, lr}
 802c5f6:	69c6      	ldr	r6, [r0, #28]
 802c5f8:	4605      	mov	r5, r0
 802c5fa:	460c      	mov	r4, r1
 802c5fc:	b976      	cbnz	r6, 802c61c <_Bfree+0x28>
 802c5fe:	2010      	movs	r0, #16
 802c600:	f7fe f800 	bl	802a604 <malloc>
 802c604:	4602      	mov	r2, r0
 802c606:	61e8      	str	r0, [r5, #28]
 802c608:	b920      	cbnz	r0, 802c614 <_Bfree+0x20>
 802c60a:	4b09      	ldr	r3, [pc, #36]	@ (802c630 <_Bfree+0x3c>)
 802c60c:	4809      	ldr	r0, [pc, #36]	@ (802c634 <_Bfree+0x40>)
 802c60e:	218f      	movs	r1, #143	@ 0x8f
 802c610:	f7fd ffd4 	bl	802a5bc <__assert_func>
 802c614:	e9c0 6601 	strd	r6, r6, [r0, #4]
 802c618:	6006      	str	r6, [r0, #0]
 802c61a:	60c6      	str	r6, [r0, #12]
 802c61c:	b13c      	cbz	r4, 802c62e <_Bfree+0x3a>
 802c61e:	69eb      	ldr	r3, [r5, #28]
 802c620:	6862      	ldr	r2, [r4, #4]
 802c622:	68db      	ldr	r3, [r3, #12]
 802c624:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 802c628:	6021      	str	r1, [r4, #0]
 802c62a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 802c62e:	bd70      	pop	{r4, r5, r6, pc}
 802c630:	08042bd3 	.word	0x08042bd3
 802c634:	08042c53 	.word	0x08042c53

0802c638 <__multadd>:
 802c638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802c63c:	690d      	ldr	r5, [r1, #16]
 802c63e:	4607      	mov	r7, r0
 802c640:	460c      	mov	r4, r1
 802c642:	461e      	mov	r6, r3
 802c644:	f101 0c14 	add.w	ip, r1, #20
 802c648:	2000      	movs	r0, #0
 802c64a:	f8dc 3000 	ldr.w	r3, [ip]
 802c64e:	b299      	uxth	r1, r3
 802c650:	fb02 6101 	mla	r1, r2, r1, r6
 802c654:	0c1e      	lsrs	r6, r3, #16
 802c656:	0c0b      	lsrs	r3, r1, #16
 802c658:	fb02 3306 	mla	r3, r2, r6, r3
 802c65c:	b289      	uxth	r1, r1
 802c65e:	3001      	adds	r0, #1
 802c660:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 802c664:	4285      	cmp	r5, r0
 802c666:	f84c 1b04 	str.w	r1, [ip], #4
 802c66a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 802c66e:	dcec      	bgt.n	802c64a <__multadd+0x12>
 802c670:	b30e      	cbz	r6, 802c6b6 <__multadd+0x7e>
 802c672:	68a3      	ldr	r3, [r4, #8]
 802c674:	42ab      	cmp	r3, r5
 802c676:	dc19      	bgt.n	802c6ac <__multadd+0x74>
 802c678:	6861      	ldr	r1, [r4, #4]
 802c67a:	4638      	mov	r0, r7
 802c67c:	3101      	adds	r1, #1
 802c67e:	f7ff ff79 	bl	802c574 <_Balloc>
 802c682:	4680      	mov	r8, r0
 802c684:	b928      	cbnz	r0, 802c692 <__multadd+0x5a>
 802c686:	4602      	mov	r2, r0
 802c688:	4b0c      	ldr	r3, [pc, #48]	@ (802c6bc <__multadd+0x84>)
 802c68a:	480d      	ldr	r0, [pc, #52]	@ (802c6c0 <__multadd+0x88>)
 802c68c:	21ba      	movs	r1, #186	@ 0xba
 802c68e:	f7fd ff95 	bl	802a5bc <__assert_func>
 802c692:	6922      	ldr	r2, [r4, #16]
 802c694:	3202      	adds	r2, #2
 802c696:	f104 010c 	add.w	r1, r4, #12
 802c69a:	0092      	lsls	r2, r2, #2
 802c69c:	300c      	adds	r0, #12
 802c69e:	f7ff f868 	bl	802b772 <memcpy>
 802c6a2:	4621      	mov	r1, r4
 802c6a4:	4638      	mov	r0, r7
 802c6a6:	f7ff ffa5 	bl	802c5f4 <_Bfree>
 802c6aa:	4644      	mov	r4, r8
 802c6ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 802c6b0:	3501      	adds	r5, #1
 802c6b2:	615e      	str	r6, [r3, #20]
 802c6b4:	6125      	str	r5, [r4, #16]
 802c6b6:	4620      	mov	r0, r4
 802c6b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802c6bc:	08042c42 	.word	0x08042c42
 802c6c0:	08042c53 	.word	0x08042c53

0802c6c4 <__hi0bits>:
 802c6c4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 802c6c8:	4603      	mov	r3, r0
 802c6ca:	bf36      	itet	cc
 802c6cc:	0403      	lslcc	r3, r0, #16
 802c6ce:	2000      	movcs	r0, #0
 802c6d0:	2010      	movcc	r0, #16
 802c6d2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 802c6d6:	bf3c      	itt	cc
 802c6d8:	021b      	lslcc	r3, r3, #8
 802c6da:	3008      	addcc	r0, #8
 802c6dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 802c6e0:	bf3c      	itt	cc
 802c6e2:	011b      	lslcc	r3, r3, #4
 802c6e4:	3004      	addcc	r0, #4
 802c6e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 802c6ea:	bf3c      	itt	cc
 802c6ec:	009b      	lslcc	r3, r3, #2
 802c6ee:	3002      	addcc	r0, #2
 802c6f0:	2b00      	cmp	r3, #0
 802c6f2:	db05      	blt.n	802c700 <__hi0bits+0x3c>
 802c6f4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 802c6f8:	f100 0001 	add.w	r0, r0, #1
 802c6fc:	bf08      	it	eq
 802c6fe:	2020      	moveq	r0, #32
 802c700:	4770      	bx	lr

0802c702 <__lo0bits>:
 802c702:	6803      	ldr	r3, [r0, #0]
 802c704:	4602      	mov	r2, r0
 802c706:	f013 0007 	ands.w	r0, r3, #7
 802c70a:	d00b      	beq.n	802c724 <__lo0bits+0x22>
 802c70c:	07d9      	lsls	r1, r3, #31
 802c70e:	d421      	bmi.n	802c754 <__lo0bits+0x52>
 802c710:	0798      	lsls	r0, r3, #30
 802c712:	bf49      	itett	mi
 802c714:	085b      	lsrmi	r3, r3, #1
 802c716:	089b      	lsrpl	r3, r3, #2
 802c718:	2001      	movmi	r0, #1
 802c71a:	6013      	strmi	r3, [r2, #0]
 802c71c:	bf5c      	itt	pl
 802c71e:	6013      	strpl	r3, [r2, #0]
 802c720:	2002      	movpl	r0, #2
 802c722:	4770      	bx	lr
 802c724:	b299      	uxth	r1, r3
 802c726:	b909      	cbnz	r1, 802c72c <__lo0bits+0x2a>
 802c728:	0c1b      	lsrs	r3, r3, #16
 802c72a:	2010      	movs	r0, #16
 802c72c:	b2d9      	uxtb	r1, r3
 802c72e:	b909      	cbnz	r1, 802c734 <__lo0bits+0x32>
 802c730:	3008      	adds	r0, #8
 802c732:	0a1b      	lsrs	r3, r3, #8
 802c734:	0719      	lsls	r1, r3, #28
 802c736:	bf04      	itt	eq
 802c738:	091b      	lsreq	r3, r3, #4
 802c73a:	3004      	addeq	r0, #4
 802c73c:	0799      	lsls	r1, r3, #30
 802c73e:	bf04      	itt	eq
 802c740:	089b      	lsreq	r3, r3, #2
 802c742:	3002      	addeq	r0, #2
 802c744:	07d9      	lsls	r1, r3, #31
 802c746:	d403      	bmi.n	802c750 <__lo0bits+0x4e>
 802c748:	085b      	lsrs	r3, r3, #1
 802c74a:	f100 0001 	add.w	r0, r0, #1
 802c74e:	d003      	beq.n	802c758 <__lo0bits+0x56>
 802c750:	6013      	str	r3, [r2, #0]
 802c752:	4770      	bx	lr
 802c754:	2000      	movs	r0, #0
 802c756:	4770      	bx	lr
 802c758:	2020      	movs	r0, #32
 802c75a:	4770      	bx	lr

0802c75c <__i2b>:
 802c75c:	b510      	push	{r4, lr}
 802c75e:	460c      	mov	r4, r1
 802c760:	2101      	movs	r1, #1
 802c762:	f7ff ff07 	bl	802c574 <_Balloc>
 802c766:	4602      	mov	r2, r0
 802c768:	b928      	cbnz	r0, 802c776 <__i2b+0x1a>
 802c76a:	4b05      	ldr	r3, [pc, #20]	@ (802c780 <__i2b+0x24>)
 802c76c:	4805      	ldr	r0, [pc, #20]	@ (802c784 <__i2b+0x28>)
 802c76e:	f240 1145 	movw	r1, #325	@ 0x145
 802c772:	f7fd ff23 	bl	802a5bc <__assert_func>
 802c776:	2301      	movs	r3, #1
 802c778:	6144      	str	r4, [r0, #20]
 802c77a:	6103      	str	r3, [r0, #16]
 802c77c:	bd10      	pop	{r4, pc}
 802c77e:	bf00      	nop
 802c780:	08042c42 	.word	0x08042c42
 802c784:	08042c53 	.word	0x08042c53

0802c788 <__multiply>:
 802c788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c78c:	4614      	mov	r4, r2
 802c78e:	690a      	ldr	r2, [r1, #16]
 802c790:	6923      	ldr	r3, [r4, #16]
 802c792:	429a      	cmp	r2, r3
 802c794:	bfa8      	it	ge
 802c796:	4623      	movge	r3, r4
 802c798:	460f      	mov	r7, r1
 802c79a:	bfa4      	itt	ge
 802c79c:	460c      	movge	r4, r1
 802c79e:	461f      	movge	r7, r3
 802c7a0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 802c7a4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 802c7a8:	68a3      	ldr	r3, [r4, #8]
 802c7aa:	6861      	ldr	r1, [r4, #4]
 802c7ac:	eb0a 0609 	add.w	r6, sl, r9
 802c7b0:	42b3      	cmp	r3, r6
 802c7b2:	b085      	sub	sp, #20
 802c7b4:	bfb8      	it	lt
 802c7b6:	3101      	addlt	r1, #1
 802c7b8:	f7ff fedc 	bl	802c574 <_Balloc>
 802c7bc:	b930      	cbnz	r0, 802c7cc <__multiply+0x44>
 802c7be:	4602      	mov	r2, r0
 802c7c0:	4b44      	ldr	r3, [pc, #272]	@ (802c8d4 <__multiply+0x14c>)
 802c7c2:	4845      	ldr	r0, [pc, #276]	@ (802c8d8 <__multiply+0x150>)
 802c7c4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 802c7c8:	f7fd fef8 	bl	802a5bc <__assert_func>
 802c7cc:	f100 0514 	add.w	r5, r0, #20
 802c7d0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 802c7d4:	462b      	mov	r3, r5
 802c7d6:	2200      	movs	r2, #0
 802c7d8:	4543      	cmp	r3, r8
 802c7da:	d321      	bcc.n	802c820 <__multiply+0x98>
 802c7dc:	f107 0114 	add.w	r1, r7, #20
 802c7e0:	f104 0214 	add.w	r2, r4, #20
 802c7e4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 802c7e8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 802c7ec:	9302      	str	r3, [sp, #8]
 802c7ee:	1b13      	subs	r3, r2, r4
 802c7f0:	3b15      	subs	r3, #21
 802c7f2:	f023 0303 	bic.w	r3, r3, #3
 802c7f6:	3304      	adds	r3, #4
 802c7f8:	f104 0715 	add.w	r7, r4, #21
 802c7fc:	42ba      	cmp	r2, r7
 802c7fe:	bf38      	it	cc
 802c800:	2304      	movcc	r3, #4
 802c802:	9301      	str	r3, [sp, #4]
 802c804:	9b02      	ldr	r3, [sp, #8]
 802c806:	9103      	str	r1, [sp, #12]
 802c808:	428b      	cmp	r3, r1
 802c80a:	d80c      	bhi.n	802c826 <__multiply+0x9e>
 802c80c:	2e00      	cmp	r6, #0
 802c80e:	dd03      	ble.n	802c818 <__multiply+0x90>
 802c810:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 802c814:	2b00      	cmp	r3, #0
 802c816:	d05b      	beq.n	802c8d0 <__multiply+0x148>
 802c818:	6106      	str	r6, [r0, #16]
 802c81a:	b005      	add	sp, #20
 802c81c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c820:	f843 2b04 	str.w	r2, [r3], #4
 802c824:	e7d8      	b.n	802c7d8 <__multiply+0x50>
 802c826:	f8b1 a000 	ldrh.w	sl, [r1]
 802c82a:	f1ba 0f00 	cmp.w	sl, #0
 802c82e:	d024      	beq.n	802c87a <__multiply+0xf2>
 802c830:	f104 0e14 	add.w	lr, r4, #20
 802c834:	46a9      	mov	r9, r5
 802c836:	f04f 0c00 	mov.w	ip, #0
 802c83a:	f85e 7b04 	ldr.w	r7, [lr], #4
 802c83e:	f8d9 3000 	ldr.w	r3, [r9]
 802c842:	fa1f fb87 	uxth.w	fp, r7
 802c846:	b29b      	uxth	r3, r3
 802c848:	fb0a 330b 	mla	r3, sl, fp, r3
 802c84c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 802c850:	f8d9 7000 	ldr.w	r7, [r9]
 802c854:	4463      	add	r3, ip
 802c856:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 802c85a:	fb0a c70b 	mla	r7, sl, fp, ip
 802c85e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 802c862:	b29b      	uxth	r3, r3
 802c864:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 802c868:	4572      	cmp	r2, lr
 802c86a:	f849 3b04 	str.w	r3, [r9], #4
 802c86e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 802c872:	d8e2      	bhi.n	802c83a <__multiply+0xb2>
 802c874:	9b01      	ldr	r3, [sp, #4]
 802c876:	f845 c003 	str.w	ip, [r5, r3]
 802c87a:	9b03      	ldr	r3, [sp, #12]
 802c87c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 802c880:	3104      	adds	r1, #4
 802c882:	f1b9 0f00 	cmp.w	r9, #0
 802c886:	d021      	beq.n	802c8cc <__multiply+0x144>
 802c888:	682b      	ldr	r3, [r5, #0]
 802c88a:	f104 0c14 	add.w	ip, r4, #20
 802c88e:	46ae      	mov	lr, r5
 802c890:	f04f 0a00 	mov.w	sl, #0
 802c894:	f8bc b000 	ldrh.w	fp, [ip]
 802c898:	f8be 7002 	ldrh.w	r7, [lr, #2]
 802c89c:	fb09 770b 	mla	r7, r9, fp, r7
 802c8a0:	4457      	add	r7, sl
 802c8a2:	b29b      	uxth	r3, r3
 802c8a4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 802c8a8:	f84e 3b04 	str.w	r3, [lr], #4
 802c8ac:	f85c 3b04 	ldr.w	r3, [ip], #4
 802c8b0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 802c8b4:	f8be 3000 	ldrh.w	r3, [lr]
 802c8b8:	fb09 330a 	mla	r3, r9, sl, r3
 802c8bc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 802c8c0:	4562      	cmp	r2, ip
 802c8c2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 802c8c6:	d8e5      	bhi.n	802c894 <__multiply+0x10c>
 802c8c8:	9f01      	ldr	r7, [sp, #4]
 802c8ca:	51eb      	str	r3, [r5, r7]
 802c8cc:	3504      	adds	r5, #4
 802c8ce:	e799      	b.n	802c804 <__multiply+0x7c>
 802c8d0:	3e01      	subs	r6, #1
 802c8d2:	e79b      	b.n	802c80c <__multiply+0x84>
 802c8d4:	08042c42 	.word	0x08042c42
 802c8d8:	08042c53 	.word	0x08042c53

0802c8dc <__pow5mult>:
 802c8dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802c8e0:	4615      	mov	r5, r2
 802c8e2:	f012 0203 	ands.w	r2, r2, #3
 802c8e6:	4607      	mov	r7, r0
 802c8e8:	460e      	mov	r6, r1
 802c8ea:	d007      	beq.n	802c8fc <__pow5mult+0x20>
 802c8ec:	4c25      	ldr	r4, [pc, #148]	@ (802c984 <__pow5mult+0xa8>)
 802c8ee:	3a01      	subs	r2, #1
 802c8f0:	2300      	movs	r3, #0
 802c8f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 802c8f6:	f7ff fe9f 	bl	802c638 <__multadd>
 802c8fa:	4606      	mov	r6, r0
 802c8fc:	10ad      	asrs	r5, r5, #2
 802c8fe:	d03d      	beq.n	802c97c <__pow5mult+0xa0>
 802c900:	69fc      	ldr	r4, [r7, #28]
 802c902:	b97c      	cbnz	r4, 802c924 <__pow5mult+0x48>
 802c904:	2010      	movs	r0, #16
 802c906:	f7fd fe7d 	bl	802a604 <malloc>
 802c90a:	4602      	mov	r2, r0
 802c90c:	61f8      	str	r0, [r7, #28]
 802c90e:	b928      	cbnz	r0, 802c91c <__pow5mult+0x40>
 802c910:	4b1d      	ldr	r3, [pc, #116]	@ (802c988 <__pow5mult+0xac>)
 802c912:	481e      	ldr	r0, [pc, #120]	@ (802c98c <__pow5mult+0xb0>)
 802c914:	f240 11b3 	movw	r1, #435	@ 0x1b3
 802c918:	f7fd fe50 	bl	802a5bc <__assert_func>
 802c91c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 802c920:	6004      	str	r4, [r0, #0]
 802c922:	60c4      	str	r4, [r0, #12]
 802c924:	f8d7 801c 	ldr.w	r8, [r7, #28]
 802c928:	f8d8 4008 	ldr.w	r4, [r8, #8]
 802c92c:	b94c      	cbnz	r4, 802c942 <__pow5mult+0x66>
 802c92e:	f240 2171 	movw	r1, #625	@ 0x271
 802c932:	4638      	mov	r0, r7
 802c934:	f7ff ff12 	bl	802c75c <__i2b>
 802c938:	2300      	movs	r3, #0
 802c93a:	f8c8 0008 	str.w	r0, [r8, #8]
 802c93e:	4604      	mov	r4, r0
 802c940:	6003      	str	r3, [r0, #0]
 802c942:	f04f 0900 	mov.w	r9, #0
 802c946:	07eb      	lsls	r3, r5, #31
 802c948:	d50a      	bpl.n	802c960 <__pow5mult+0x84>
 802c94a:	4631      	mov	r1, r6
 802c94c:	4622      	mov	r2, r4
 802c94e:	4638      	mov	r0, r7
 802c950:	f7ff ff1a 	bl	802c788 <__multiply>
 802c954:	4631      	mov	r1, r6
 802c956:	4680      	mov	r8, r0
 802c958:	4638      	mov	r0, r7
 802c95a:	f7ff fe4b 	bl	802c5f4 <_Bfree>
 802c95e:	4646      	mov	r6, r8
 802c960:	106d      	asrs	r5, r5, #1
 802c962:	d00b      	beq.n	802c97c <__pow5mult+0xa0>
 802c964:	6820      	ldr	r0, [r4, #0]
 802c966:	b938      	cbnz	r0, 802c978 <__pow5mult+0x9c>
 802c968:	4622      	mov	r2, r4
 802c96a:	4621      	mov	r1, r4
 802c96c:	4638      	mov	r0, r7
 802c96e:	f7ff ff0b 	bl	802c788 <__multiply>
 802c972:	6020      	str	r0, [r4, #0]
 802c974:	f8c0 9000 	str.w	r9, [r0]
 802c978:	4604      	mov	r4, r0
 802c97a:	e7e4      	b.n	802c946 <__pow5mult+0x6a>
 802c97c:	4630      	mov	r0, r6
 802c97e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802c982:	bf00      	nop
 802c984:	08042cac 	.word	0x08042cac
 802c988:	08042bd3 	.word	0x08042bd3
 802c98c:	08042c53 	.word	0x08042c53

0802c990 <__lshift>:
 802c990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802c994:	460c      	mov	r4, r1
 802c996:	6849      	ldr	r1, [r1, #4]
 802c998:	6923      	ldr	r3, [r4, #16]
 802c99a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 802c99e:	68a3      	ldr	r3, [r4, #8]
 802c9a0:	4607      	mov	r7, r0
 802c9a2:	4691      	mov	r9, r2
 802c9a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 802c9a8:	f108 0601 	add.w	r6, r8, #1
 802c9ac:	42b3      	cmp	r3, r6
 802c9ae:	db0b      	blt.n	802c9c8 <__lshift+0x38>
 802c9b0:	4638      	mov	r0, r7
 802c9b2:	f7ff fddf 	bl	802c574 <_Balloc>
 802c9b6:	4605      	mov	r5, r0
 802c9b8:	b948      	cbnz	r0, 802c9ce <__lshift+0x3e>
 802c9ba:	4602      	mov	r2, r0
 802c9bc:	4b28      	ldr	r3, [pc, #160]	@ (802ca60 <__lshift+0xd0>)
 802c9be:	4829      	ldr	r0, [pc, #164]	@ (802ca64 <__lshift+0xd4>)
 802c9c0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 802c9c4:	f7fd fdfa 	bl	802a5bc <__assert_func>
 802c9c8:	3101      	adds	r1, #1
 802c9ca:	005b      	lsls	r3, r3, #1
 802c9cc:	e7ee      	b.n	802c9ac <__lshift+0x1c>
 802c9ce:	2300      	movs	r3, #0
 802c9d0:	f100 0114 	add.w	r1, r0, #20
 802c9d4:	f100 0210 	add.w	r2, r0, #16
 802c9d8:	4618      	mov	r0, r3
 802c9da:	4553      	cmp	r3, sl
 802c9dc:	db33      	blt.n	802ca46 <__lshift+0xb6>
 802c9de:	6920      	ldr	r0, [r4, #16]
 802c9e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 802c9e4:	f104 0314 	add.w	r3, r4, #20
 802c9e8:	f019 091f 	ands.w	r9, r9, #31
 802c9ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 802c9f0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 802c9f4:	d02b      	beq.n	802ca4e <__lshift+0xbe>
 802c9f6:	f1c9 0e20 	rsb	lr, r9, #32
 802c9fa:	468a      	mov	sl, r1
 802c9fc:	2200      	movs	r2, #0
 802c9fe:	6818      	ldr	r0, [r3, #0]
 802ca00:	fa00 f009 	lsl.w	r0, r0, r9
 802ca04:	4310      	orrs	r0, r2
 802ca06:	f84a 0b04 	str.w	r0, [sl], #4
 802ca0a:	f853 2b04 	ldr.w	r2, [r3], #4
 802ca0e:	459c      	cmp	ip, r3
 802ca10:	fa22 f20e 	lsr.w	r2, r2, lr
 802ca14:	d8f3      	bhi.n	802c9fe <__lshift+0x6e>
 802ca16:	ebac 0304 	sub.w	r3, ip, r4
 802ca1a:	3b15      	subs	r3, #21
 802ca1c:	f023 0303 	bic.w	r3, r3, #3
 802ca20:	3304      	adds	r3, #4
 802ca22:	f104 0015 	add.w	r0, r4, #21
 802ca26:	4584      	cmp	ip, r0
 802ca28:	bf38      	it	cc
 802ca2a:	2304      	movcc	r3, #4
 802ca2c:	50ca      	str	r2, [r1, r3]
 802ca2e:	b10a      	cbz	r2, 802ca34 <__lshift+0xa4>
 802ca30:	f108 0602 	add.w	r6, r8, #2
 802ca34:	3e01      	subs	r6, #1
 802ca36:	4638      	mov	r0, r7
 802ca38:	612e      	str	r6, [r5, #16]
 802ca3a:	4621      	mov	r1, r4
 802ca3c:	f7ff fdda 	bl	802c5f4 <_Bfree>
 802ca40:	4628      	mov	r0, r5
 802ca42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802ca46:	f842 0f04 	str.w	r0, [r2, #4]!
 802ca4a:	3301      	adds	r3, #1
 802ca4c:	e7c5      	b.n	802c9da <__lshift+0x4a>
 802ca4e:	3904      	subs	r1, #4
 802ca50:	f853 2b04 	ldr.w	r2, [r3], #4
 802ca54:	f841 2f04 	str.w	r2, [r1, #4]!
 802ca58:	459c      	cmp	ip, r3
 802ca5a:	d8f9      	bhi.n	802ca50 <__lshift+0xc0>
 802ca5c:	e7ea      	b.n	802ca34 <__lshift+0xa4>
 802ca5e:	bf00      	nop
 802ca60:	08042c42 	.word	0x08042c42
 802ca64:	08042c53 	.word	0x08042c53

0802ca68 <__mcmp>:
 802ca68:	690a      	ldr	r2, [r1, #16]
 802ca6a:	4603      	mov	r3, r0
 802ca6c:	6900      	ldr	r0, [r0, #16]
 802ca6e:	1a80      	subs	r0, r0, r2
 802ca70:	b530      	push	{r4, r5, lr}
 802ca72:	d10e      	bne.n	802ca92 <__mcmp+0x2a>
 802ca74:	3314      	adds	r3, #20
 802ca76:	3114      	adds	r1, #20
 802ca78:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 802ca7c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 802ca80:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 802ca84:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 802ca88:	4295      	cmp	r5, r2
 802ca8a:	d003      	beq.n	802ca94 <__mcmp+0x2c>
 802ca8c:	d205      	bcs.n	802ca9a <__mcmp+0x32>
 802ca8e:	f04f 30ff 	mov.w	r0, #4294967295
 802ca92:	bd30      	pop	{r4, r5, pc}
 802ca94:	42a3      	cmp	r3, r4
 802ca96:	d3f3      	bcc.n	802ca80 <__mcmp+0x18>
 802ca98:	e7fb      	b.n	802ca92 <__mcmp+0x2a>
 802ca9a:	2001      	movs	r0, #1
 802ca9c:	e7f9      	b.n	802ca92 <__mcmp+0x2a>
	...

0802caa0 <__mdiff>:
 802caa0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802caa4:	4689      	mov	r9, r1
 802caa6:	4606      	mov	r6, r0
 802caa8:	4611      	mov	r1, r2
 802caaa:	4648      	mov	r0, r9
 802caac:	4614      	mov	r4, r2
 802caae:	f7ff ffdb 	bl	802ca68 <__mcmp>
 802cab2:	1e05      	subs	r5, r0, #0
 802cab4:	d112      	bne.n	802cadc <__mdiff+0x3c>
 802cab6:	4629      	mov	r1, r5
 802cab8:	4630      	mov	r0, r6
 802caba:	f7ff fd5b 	bl	802c574 <_Balloc>
 802cabe:	4602      	mov	r2, r0
 802cac0:	b928      	cbnz	r0, 802cace <__mdiff+0x2e>
 802cac2:	4b3f      	ldr	r3, [pc, #252]	@ (802cbc0 <__mdiff+0x120>)
 802cac4:	f240 2137 	movw	r1, #567	@ 0x237
 802cac8:	483e      	ldr	r0, [pc, #248]	@ (802cbc4 <__mdiff+0x124>)
 802caca:	f7fd fd77 	bl	802a5bc <__assert_func>
 802cace:	2301      	movs	r3, #1
 802cad0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 802cad4:	4610      	mov	r0, r2
 802cad6:	b003      	add	sp, #12
 802cad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802cadc:	bfbc      	itt	lt
 802cade:	464b      	movlt	r3, r9
 802cae0:	46a1      	movlt	r9, r4
 802cae2:	4630      	mov	r0, r6
 802cae4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 802cae8:	bfba      	itte	lt
 802caea:	461c      	movlt	r4, r3
 802caec:	2501      	movlt	r5, #1
 802caee:	2500      	movge	r5, #0
 802caf0:	f7ff fd40 	bl	802c574 <_Balloc>
 802caf4:	4602      	mov	r2, r0
 802caf6:	b918      	cbnz	r0, 802cb00 <__mdiff+0x60>
 802caf8:	4b31      	ldr	r3, [pc, #196]	@ (802cbc0 <__mdiff+0x120>)
 802cafa:	f240 2145 	movw	r1, #581	@ 0x245
 802cafe:	e7e3      	b.n	802cac8 <__mdiff+0x28>
 802cb00:	f8d9 7010 	ldr.w	r7, [r9, #16]
 802cb04:	6926      	ldr	r6, [r4, #16]
 802cb06:	60c5      	str	r5, [r0, #12]
 802cb08:	f109 0310 	add.w	r3, r9, #16
 802cb0c:	f109 0514 	add.w	r5, r9, #20
 802cb10:	f104 0e14 	add.w	lr, r4, #20
 802cb14:	f100 0b14 	add.w	fp, r0, #20
 802cb18:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 802cb1c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 802cb20:	9301      	str	r3, [sp, #4]
 802cb22:	46d9      	mov	r9, fp
 802cb24:	f04f 0c00 	mov.w	ip, #0
 802cb28:	9b01      	ldr	r3, [sp, #4]
 802cb2a:	f85e 0b04 	ldr.w	r0, [lr], #4
 802cb2e:	f853 af04 	ldr.w	sl, [r3, #4]!
 802cb32:	9301      	str	r3, [sp, #4]
 802cb34:	fa1f f38a 	uxth.w	r3, sl
 802cb38:	4619      	mov	r1, r3
 802cb3a:	b283      	uxth	r3, r0
 802cb3c:	1acb      	subs	r3, r1, r3
 802cb3e:	0c00      	lsrs	r0, r0, #16
 802cb40:	4463      	add	r3, ip
 802cb42:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 802cb46:	eb00 4023 	add.w	r0, r0, r3, asr #16
 802cb4a:	b29b      	uxth	r3, r3
 802cb4c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 802cb50:	4576      	cmp	r6, lr
 802cb52:	f849 3b04 	str.w	r3, [r9], #4
 802cb56:	ea4f 4c20 	mov.w	ip, r0, asr #16
 802cb5a:	d8e5      	bhi.n	802cb28 <__mdiff+0x88>
 802cb5c:	1b33      	subs	r3, r6, r4
 802cb5e:	3b15      	subs	r3, #21
 802cb60:	f023 0303 	bic.w	r3, r3, #3
 802cb64:	3415      	adds	r4, #21
 802cb66:	3304      	adds	r3, #4
 802cb68:	42a6      	cmp	r6, r4
 802cb6a:	bf38      	it	cc
 802cb6c:	2304      	movcc	r3, #4
 802cb6e:	441d      	add	r5, r3
 802cb70:	445b      	add	r3, fp
 802cb72:	461e      	mov	r6, r3
 802cb74:	462c      	mov	r4, r5
 802cb76:	4544      	cmp	r4, r8
 802cb78:	d30e      	bcc.n	802cb98 <__mdiff+0xf8>
 802cb7a:	f108 0103 	add.w	r1, r8, #3
 802cb7e:	1b49      	subs	r1, r1, r5
 802cb80:	f021 0103 	bic.w	r1, r1, #3
 802cb84:	3d03      	subs	r5, #3
 802cb86:	45a8      	cmp	r8, r5
 802cb88:	bf38      	it	cc
 802cb8a:	2100      	movcc	r1, #0
 802cb8c:	440b      	add	r3, r1
 802cb8e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 802cb92:	b191      	cbz	r1, 802cbba <__mdiff+0x11a>
 802cb94:	6117      	str	r7, [r2, #16]
 802cb96:	e79d      	b.n	802cad4 <__mdiff+0x34>
 802cb98:	f854 1b04 	ldr.w	r1, [r4], #4
 802cb9c:	46e6      	mov	lr, ip
 802cb9e:	0c08      	lsrs	r0, r1, #16
 802cba0:	fa1c fc81 	uxtah	ip, ip, r1
 802cba4:	4471      	add	r1, lr
 802cba6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 802cbaa:	b289      	uxth	r1, r1
 802cbac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 802cbb0:	f846 1b04 	str.w	r1, [r6], #4
 802cbb4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 802cbb8:	e7dd      	b.n	802cb76 <__mdiff+0xd6>
 802cbba:	3f01      	subs	r7, #1
 802cbbc:	e7e7      	b.n	802cb8e <__mdiff+0xee>
 802cbbe:	bf00      	nop
 802cbc0:	08042c42 	.word	0x08042c42
 802cbc4:	08042c53 	.word	0x08042c53

0802cbc8 <__d2b>:
 802cbc8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802cbcc:	460f      	mov	r7, r1
 802cbce:	2101      	movs	r1, #1
 802cbd0:	ec59 8b10 	vmov	r8, r9, d0
 802cbd4:	4616      	mov	r6, r2
 802cbd6:	f7ff fccd 	bl	802c574 <_Balloc>
 802cbda:	4604      	mov	r4, r0
 802cbdc:	b930      	cbnz	r0, 802cbec <__d2b+0x24>
 802cbde:	4602      	mov	r2, r0
 802cbe0:	4b23      	ldr	r3, [pc, #140]	@ (802cc70 <__d2b+0xa8>)
 802cbe2:	4824      	ldr	r0, [pc, #144]	@ (802cc74 <__d2b+0xac>)
 802cbe4:	f240 310f 	movw	r1, #783	@ 0x30f
 802cbe8:	f7fd fce8 	bl	802a5bc <__assert_func>
 802cbec:	f3c9 550a 	ubfx	r5, r9, #20, #11
 802cbf0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 802cbf4:	b10d      	cbz	r5, 802cbfa <__d2b+0x32>
 802cbf6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 802cbfa:	9301      	str	r3, [sp, #4]
 802cbfc:	f1b8 0300 	subs.w	r3, r8, #0
 802cc00:	d023      	beq.n	802cc4a <__d2b+0x82>
 802cc02:	4668      	mov	r0, sp
 802cc04:	9300      	str	r3, [sp, #0]
 802cc06:	f7ff fd7c 	bl	802c702 <__lo0bits>
 802cc0a:	e9dd 1200 	ldrd	r1, r2, [sp]
 802cc0e:	b1d0      	cbz	r0, 802cc46 <__d2b+0x7e>
 802cc10:	f1c0 0320 	rsb	r3, r0, #32
 802cc14:	fa02 f303 	lsl.w	r3, r2, r3
 802cc18:	430b      	orrs	r3, r1
 802cc1a:	40c2      	lsrs	r2, r0
 802cc1c:	6163      	str	r3, [r4, #20]
 802cc1e:	9201      	str	r2, [sp, #4]
 802cc20:	9b01      	ldr	r3, [sp, #4]
 802cc22:	61a3      	str	r3, [r4, #24]
 802cc24:	2b00      	cmp	r3, #0
 802cc26:	bf0c      	ite	eq
 802cc28:	2201      	moveq	r2, #1
 802cc2a:	2202      	movne	r2, #2
 802cc2c:	6122      	str	r2, [r4, #16]
 802cc2e:	b1a5      	cbz	r5, 802cc5a <__d2b+0x92>
 802cc30:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 802cc34:	4405      	add	r5, r0
 802cc36:	603d      	str	r5, [r7, #0]
 802cc38:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 802cc3c:	6030      	str	r0, [r6, #0]
 802cc3e:	4620      	mov	r0, r4
 802cc40:	b003      	add	sp, #12
 802cc42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802cc46:	6161      	str	r1, [r4, #20]
 802cc48:	e7ea      	b.n	802cc20 <__d2b+0x58>
 802cc4a:	a801      	add	r0, sp, #4
 802cc4c:	f7ff fd59 	bl	802c702 <__lo0bits>
 802cc50:	9b01      	ldr	r3, [sp, #4]
 802cc52:	6163      	str	r3, [r4, #20]
 802cc54:	3020      	adds	r0, #32
 802cc56:	2201      	movs	r2, #1
 802cc58:	e7e8      	b.n	802cc2c <__d2b+0x64>
 802cc5a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 802cc5e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 802cc62:	6038      	str	r0, [r7, #0]
 802cc64:	6918      	ldr	r0, [r3, #16]
 802cc66:	f7ff fd2d 	bl	802c6c4 <__hi0bits>
 802cc6a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 802cc6e:	e7e5      	b.n	802cc3c <__d2b+0x74>
 802cc70:	08042c42 	.word	0x08042c42
 802cc74:	08042c53 	.word	0x08042c53

0802cc78 <__sfputc_r>:
 802cc78:	6893      	ldr	r3, [r2, #8]
 802cc7a:	3b01      	subs	r3, #1
 802cc7c:	2b00      	cmp	r3, #0
 802cc7e:	b410      	push	{r4}
 802cc80:	6093      	str	r3, [r2, #8]
 802cc82:	da08      	bge.n	802cc96 <__sfputc_r+0x1e>
 802cc84:	6994      	ldr	r4, [r2, #24]
 802cc86:	42a3      	cmp	r3, r4
 802cc88:	db01      	blt.n	802cc8e <__sfputc_r+0x16>
 802cc8a:	290a      	cmp	r1, #10
 802cc8c:	d103      	bne.n	802cc96 <__sfputc_r+0x1e>
 802cc8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 802cc92:	f7fe bbb0 	b.w	802b3f6 <__swbuf_r>
 802cc96:	6813      	ldr	r3, [r2, #0]
 802cc98:	1c58      	adds	r0, r3, #1
 802cc9a:	6010      	str	r0, [r2, #0]
 802cc9c:	7019      	strb	r1, [r3, #0]
 802cc9e:	4608      	mov	r0, r1
 802cca0:	f85d 4b04 	ldr.w	r4, [sp], #4
 802cca4:	4770      	bx	lr

0802cca6 <__sfputs_r>:
 802cca6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802cca8:	4606      	mov	r6, r0
 802ccaa:	460f      	mov	r7, r1
 802ccac:	4614      	mov	r4, r2
 802ccae:	18d5      	adds	r5, r2, r3
 802ccb0:	42ac      	cmp	r4, r5
 802ccb2:	d101      	bne.n	802ccb8 <__sfputs_r+0x12>
 802ccb4:	2000      	movs	r0, #0
 802ccb6:	e007      	b.n	802ccc8 <__sfputs_r+0x22>
 802ccb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 802ccbc:	463a      	mov	r2, r7
 802ccbe:	4630      	mov	r0, r6
 802ccc0:	f7ff ffda 	bl	802cc78 <__sfputc_r>
 802ccc4:	1c43      	adds	r3, r0, #1
 802ccc6:	d1f3      	bne.n	802ccb0 <__sfputs_r+0xa>
 802ccc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802cccc <_vfiprintf_r>:
 802cccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ccd0:	460d      	mov	r5, r1
 802ccd2:	b09d      	sub	sp, #116	@ 0x74
 802ccd4:	4614      	mov	r4, r2
 802ccd6:	4698      	mov	r8, r3
 802ccd8:	4606      	mov	r6, r0
 802ccda:	b118      	cbz	r0, 802cce4 <_vfiprintf_r+0x18>
 802ccdc:	6a03      	ldr	r3, [r0, #32]
 802ccde:	b90b      	cbnz	r3, 802cce4 <_vfiprintf_r+0x18>
 802cce0:	f7fe faec 	bl	802b2bc <__sinit>
 802cce4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802cce6:	07d9      	lsls	r1, r3, #31
 802cce8:	d405      	bmi.n	802ccf6 <_vfiprintf_r+0x2a>
 802ccea:	89ab      	ldrh	r3, [r5, #12]
 802ccec:	059a      	lsls	r2, r3, #22
 802ccee:	d402      	bmi.n	802ccf6 <_vfiprintf_r+0x2a>
 802ccf0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802ccf2:	f7fe fd3c 	bl	802b76e <__retarget_lock_acquire_recursive>
 802ccf6:	89ab      	ldrh	r3, [r5, #12]
 802ccf8:	071b      	lsls	r3, r3, #28
 802ccfa:	d501      	bpl.n	802cd00 <_vfiprintf_r+0x34>
 802ccfc:	692b      	ldr	r3, [r5, #16]
 802ccfe:	b99b      	cbnz	r3, 802cd28 <_vfiprintf_r+0x5c>
 802cd00:	4629      	mov	r1, r5
 802cd02:	4630      	mov	r0, r6
 802cd04:	f7fe fbb6 	bl	802b474 <__swsetup_r>
 802cd08:	b170      	cbz	r0, 802cd28 <_vfiprintf_r+0x5c>
 802cd0a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802cd0c:	07dc      	lsls	r4, r3, #31
 802cd0e:	d504      	bpl.n	802cd1a <_vfiprintf_r+0x4e>
 802cd10:	f04f 30ff 	mov.w	r0, #4294967295
 802cd14:	b01d      	add	sp, #116	@ 0x74
 802cd16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802cd1a:	89ab      	ldrh	r3, [r5, #12]
 802cd1c:	0598      	lsls	r0, r3, #22
 802cd1e:	d4f7      	bmi.n	802cd10 <_vfiprintf_r+0x44>
 802cd20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802cd22:	f7fe fd25 	bl	802b770 <__retarget_lock_release_recursive>
 802cd26:	e7f3      	b.n	802cd10 <_vfiprintf_r+0x44>
 802cd28:	2300      	movs	r3, #0
 802cd2a:	9309      	str	r3, [sp, #36]	@ 0x24
 802cd2c:	2320      	movs	r3, #32
 802cd2e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 802cd32:	f8cd 800c 	str.w	r8, [sp, #12]
 802cd36:	2330      	movs	r3, #48	@ 0x30
 802cd38:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 802cee8 <_vfiprintf_r+0x21c>
 802cd3c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 802cd40:	f04f 0901 	mov.w	r9, #1
 802cd44:	4623      	mov	r3, r4
 802cd46:	469a      	mov	sl, r3
 802cd48:	f813 2b01 	ldrb.w	r2, [r3], #1
 802cd4c:	b10a      	cbz	r2, 802cd52 <_vfiprintf_r+0x86>
 802cd4e:	2a25      	cmp	r2, #37	@ 0x25
 802cd50:	d1f9      	bne.n	802cd46 <_vfiprintf_r+0x7a>
 802cd52:	ebba 0b04 	subs.w	fp, sl, r4
 802cd56:	d00b      	beq.n	802cd70 <_vfiprintf_r+0xa4>
 802cd58:	465b      	mov	r3, fp
 802cd5a:	4622      	mov	r2, r4
 802cd5c:	4629      	mov	r1, r5
 802cd5e:	4630      	mov	r0, r6
 802cd60:	f7ff ffa1 	bl	802cca6 <__sfputs_r>
 802cd64:	3001      	adds	r0, #1
 802cd66:	f000 80a7 	beq.w	802ceb8 <_vfiprintf_r+0x1ec>
 802cd6a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802cd6c:	445a      	add	r2, fp
 802cd6e:	9209      	str	r2, [sp, #36]	@ 0x24
 802cd70:	f89a 3000 	ldrb.w	r3, [sl]
 802cd74:	2b00      	cmp	r3, #0
 802cd76:	f000 809f 	beq.w	802ceb8 <_vfiprintf_r+0x1ec>
 802cd7a:	2300      	movs	r3, #0
 802cd7c:	f04f 32ff 	mov.w	r2, #4294967295
 802cd80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802cd84:	f10a 0a01 	add.w	sl, sl, #1
 802cd88:	9304      	str	r3, [sp, #16]
 802cd8a:	9307      	str	r3, [sp, #28]
 802cd8c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 802cd90:	931a      	str	r3, [sp, #104]	@ 0x68
 802cd92:	4654      	mov	r4, sl
 802cd94:	2205      	movs	r2, #5
 802cd96:	f814 1b01 	ldrb.w	r1, [r4], #1
 802cd9a:	4853      	ldr	r0, [pc, #332]	@ (802cee8 <_vfiprintf_r+0x21c>)
 802cd9c:	f7d3 fa38 	bl	8000210 <memchr>
 802cda0:	9a04      	ldr	r2, [sp, #16]
 802cda2:	b9d8      	cbnz	r0, 802cddc <_vfiprintf_r+0x110>
 802cda4:	06d1      	lsls	r1, r2, #27
 802cda6:	bf44      	itt	mi
 802cda8:	2320      	movmi	r3, #32
 802cdaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802cdae:	0713      	lsls	r3, r2, #28
 802cdb0:	bf44      	itt	mi
 802cdb2:	232b      	movmi	r3, #43	@ 0x2b
 802cdb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802cdb8:	f89a 3000 	ldrb.w	r3, [sl]
 802cdbc:	2b2a      	cmp	r3, #42	@ 0x2a
 802cdbe:	d015      	beq.n	802cdec <_vfiprintf_r+0x120>
 802cdc0:	9a07      	ldr	r2, [sp, #28]
 802cdc2:	4654      	mov	r4, sl
 802cdc4:	2000      	movs	r0, #0
 802cdc6:	f04f 0c0a 	mov.w	ip, #10
 802cdca:	4621      	mov	r1, r4
 802cdcc:	f811 3b01 	ldrb.w	r3, [r1], #1
 802cdd0:	3b30      	subs	r3, #48	@ 0x30
 802cdd2:	2b09      	cmp	r3, #9
 802cdd4:	d94b      	bls.n	802ce6e <_vfiprintf_r+0x1a2>
 802cdd6:	b1b0      	cbz	r0, 802ce06 <_vfiprintf_r+0x13a>
 802cdd8:	9207      	str	r2, [sp, #28]
 802cdda:	e014      	b.n	802ce06 <_vfiprintf_r+0x13a>
 802cddc:	eba0 0308 	sub.w	r3, r0, r8
 802cde0:	fa09 f303 	lsl.w	r3, r9, r3
 802cde4:	4313      	orrs	r3, r2
 802cde6:	9304      	str	r3, [sp, #16]
 802cde8:	46a2      	mov	sl, r4
 802cdea:	e7d2      	b.n	802cd92 <_vfiprintf_r+0xc6>
 802cdec:	9b03      	ldr	r3, [sp, #12]
 802cdee:	1d19      	adds	r1, r3, #4
 802cdf0:	681b      	ldr	r3, [r3, #0]
 802cdf2:	9103      	str	r1, [sp, #12]
 802cdf4:	2b00      	cmp	r3, #0
 802cdf6:	bfbb      	ittet	lt
 802cdf8:	425b      	neglt	r3, r3
 802cdfa:	f042 0202 	orrlt.w	r2, r2, #2
 802cdfe:	9307      	strge	r3, [sp, #28]
 802ce00:	9307      	strlt	r3, [sp, #28]
 802ce02:	bfb8      	it	lt
 802ce04:	9204      	strlt	r2, [sp, #16]
 802ce06:	7823      	ldrb	r3, [r4, #0]
 802ce08:	2b2e      	cmp	r3, #46	@ 0x2e
 802ce0a:	d10a      	bne.n	802ce22 <_vfiprintf_r+0x156>
 802ce0c:	7863      	ldrb	r3, [r4, #1]
 802ce0e:	2b2a      	cmp	r3, #42	@ 0x2a
 802ce10:	d132      	bne.n	802ce78 <_vfiprintf_r+0x1ac>
 802ce12:	9b03      	ldr	r3, [sp, #12]
 802ce14:	1d1a      	adds	r2, r3, #4
 802ce16:	681b      	ldr	r3, [r3, #0]
 802ce18:	9203      	str	r2, [sp, #12]
 802ce1a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802ce1e:	3402      	adds	r4, #2
 802ce20:	9305      	str	r3, [sp, #20]
 802ce22:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 802cef8 <_vfiprintf_r+0x22c>
 802ce26:	7821      	ldrb	r1, [r4, #0]
 802ce28:	2203      	movs	r2, #3
 802ce2a:	4650      	mov	r0, sl
 802ce2c:	f7d3 f9f0 	bl	8000210 <memchr>
 802ce30:	b138      	cbz	r0, 802ce42 <_vfiprintf_r+0x176>
 802ce32:	9b04      	ldr	r3, [sp, #16]
 802ce34:	eba0 000a 	sub.w	r0, r0, sl
 802ce38:	2240      	movs	r2, #64	@ 0x40
 802ce3a:	4082      	lsls	r2, r0
 802ce3c:	4313      	orrs	r3, r2
 802ce3e:	3401      	adds	r4, #1
 802ce40:	9304      	str	r3, [sp, #16]
 802ce42:	f814 1b01 	ldrb.w	r1, [r4], #1
 802ce46:	4829      	ldr	r0, [pc, #164]	@ (802ceec <_vfiprintf_r+0x220>)
 802ce48:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 802ce4c:	2206      	movs	r2, #6
 802ce4e:	f7d3 f9df 	bl	8000210 <memchr>
 802ce52:	2800      	cmp	r0, #0
 802ce54:	d03f      	beq.n	802ced6 <_vfiprintf_r+0x20a>
 802ce56:	4b26      	ldr	r3, [pc, #152]	@ (802cef0 <_vfiprintf_r+0x224>)
 802ce58:	bb1b      	cbnz	r3, 802cea2 <_vfiprintf_r+0x1d6>
 802ce5a:	9b03      	ldr	r3, [sp, #12]
 802ce5c:	3307      	adds	r3, #7
 802ce5e:	f023 0307 	bic.w	r3, r3, #7
 802ce62:	3308      	adds	r3, #8
 802ce64:	9303      	str	r3, [sp, #12]
 802ce66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802ce68:	443b      	add	r3, r7
 802ce6a:	9309      	str	r3, [sp, #36]	@ 0x24
 802ce6c:	e76a      	b.n	802cd44 <_vfiprintf_r+0x78>
 802ce6e:	fb0c 3202 	mla	r2, ip, r2, r3
 802ce72:	460c      	mov	r4, r1
 802ce74:	2001      	movs	r0, #1
 802ce76:	e7a8      	b.n	802cdca <_vfiprintf_r+0xfe>
 802ce78:	2300      	movs	r3, #0
 802ce7a:	3401      	adds	r4, #1
 802ce7c:	9305      	str	r3, [sp, #20]
 802ce7e:	4619      	mov	r1, r3
 802ce80:	f04f 0c0a 	mov.w	ip, #10
 802ce84:	4620      	mov	r0, r4
 802ce86:	f810 2b01 	ldrb.w	r2, [r0], #1
 802ce8a:	3a30      	subs	r2, #48	@ 0x30
 802ce8c:	2a09      	cmp	r2, #9
 802ce8e:	d903      	bls.n	802ce98 <_vfiprintf_r+0x1cc>
 802ce90:	2b00      	cmp	r3, #0
 802ce92:	d0c6      	beq.n	802ce22 <_vfiprintf_r+0x156>
 802ce94:	9105      	str	r1, [sp, #20]
 802ce96:	e7c4      	b.n	802ce22 <_vfiprintf_r+0x156>
 802ce98:	fb0c 2101 	mla	r1, ip, r1, r2
 802ce9c:	4604      	mov	r4, r0
 802ce9e:	2301      	movs	r3, #1
 802cea0:	e7f0      	b.n	802ce84 <_vfiprintf_r+0x1b8>
 802cea2:	ab03      	add	r3, sp, #12
 802cea4:	9300      	str	r3, [sp, #0]
 802cea6:	462a      	mov	r2, r5
 802cea8:	4b12      	ldr	r3, [pc, #72]	@ (802cef4 <_vfiprintf_r+0x228>)
 802ceaa:	a904      	add	r1, sp, #16
 802ceac:	4630      	mov	r0, r6
 802ceae:	f7fd fd15 	bl	802a8dc <_printf_float>
 802ceb2:	4607      	mov	r7, r0
 802ceb4:	1c78      	adds	r0, r7, #1
 802ceb6:	d1d6      	bne.n	802ce66 <_vfiprintf_r+0x19a>
 802ceb8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802ceba:	07d9      	lsls	r1, r3, #31
 802cebc:	d405      	bmi.n	802ceca <_vfiprintf_r+0x1fe>
 802cebe:	89ab      	ldrh	r3, [r5, #12]
 802cec0:	059a      	lsls	r2, r3, #22
 802cec2:	d402      	bmi.n	802ceca <_vfiprintf_r+0x1fe>
 802cec4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802cec6:	f7fe fc53 	bl	802b770 <__retarget_lock_release_recursive>
 802ceca:	89ab      	ldrh	r3, [r5, #12]
 802cecc:	065b      	lsls	r3, r3, #25
 802cece:	f53f af1f 	bmi.w	802cd10 <_vfiprintf_r+0x44>
 802ced2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802ced4:	e71e      	b.n	802cd14 <_vfiprintf_r+0x48>
 802ced6:	ab03      	add	r3, sp, #12
 802ced8:	9300      	str	r3, [sp, #0]
 802ceda:	462a      	mov	r2, r5
 802cedc:	4b05      	ldr	r3, [pc, #20]	@ (802cef4 <_vfiprintf_r+0x228>)
 802cede:	a904      	add	r1, sp, #16
 802cee0:	4630      	mov	r0, r6
 802cee2:	f7fd ff93 	bl	802ae0c <_printf_i>
 802cee6:	e7e4      	b.n	802ceb2 <_vfiprintf_r+0x1e6>
 802cee8:	08042dac 	.word	0x08042dac
 802ceec:	08042db6 	.word	0x08042db6
 802cef0:	0802a8dd 	.word	0x0802a8dd
 802cef4:	0802cca7 	.word	0x0802cca7
 802cef8:	08042db2 	.word	0x08042db2

0802cefc <__swhatbuf_r>:
 802cefc:	b570      	push	{r4, r5, r6, lr}
 802cefe:	460c      	mov	r4, r1
 802cf00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802cf04:	2900      	cmp	r1, #0
 802cf06:	b096      	sub	sp, #88	@ 0x58
 802cf08:	4615      	mov	r5, r2
 802cf0a:	461e      	mov	r6, r3
 802cf0c:	da0d      	bge.n	802cf2a <__swhatbuf_r+0x2e>
 802cf0e:	89a3      	ldrh	r3, [r4, #12]
 802cf10:	f013 0f80 	tst.w	r3, #128	@ 0x80
 802cf14:	f04f 0100 	mov.w	r1, #0
 802cf18:	bf14      	ite	ne
 802cf1a:	2340      	movne	r3, #64	@ 0x40
 802cf1c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 802cf20:	2000      	movs	r0, #0
 802cf22:	6031      	str	r1, [r6, #0]
 802cf24:	602b      	str	r3, [r5, #0]
 802cf26:	b016      	add	sp, #88	@ 0x58
 802cf28:	bd70      	pop	{r4, r5, r6, pc}
 802cf2a:	466a      	mov	r2, sp
 802cf2c:	f000 f848 	bl	802cfc0 <_fstat_r>
 802cf30:	2800      	cmp	r0, #0
 802cf32:	dbec      	blt.n	802cf0e <__swhatbuf_r+0x12>
 802cf34:	9901      	ldr	r1, [sp, #4]
 802cf36:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 802cf3a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 802cf3e:	4259      	negs	r1, r3
 802cf40:	4159      	adcs	r1, r3
 802cf42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802cf46:	e7eb      	b.n	802cf20 <__swhatbuf_r+0x24>

0802cf48 <__smakebuf_r>:
 802cf48:	898b      	ldrh	r3, [r1, #12]
 802cf4a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802cf4c:	079d      	lsls	r5, r3, #30
 802cf4e:	4606      	mov	r6, r0
 802cf50:	460c      	mov	r4, r1
 802cf52:	d507      	bpl.n	802cf64 <__smakebuf_r+0x1c>
 802cf54:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 802cf58:	6023      	str	r3, [r4, #0]
 802cf5a:	6123      	str	r3, [r4, #16]
 802cf5c:	2301      	movs	r3, #1
 802cf5e:	6163      	str	r3, [r4, #20]
 802cf60:	b003      	add	sp, #12
 802cf62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802cf64:	ab01      	add	r3, sp, #4
 802cf66:	466a      	mov	r2, sp
 802cf68:	f7ff ffc8 	bl	802cefc <__swhatbuf_r>
 802cf6c:	9f00      	ldr	r7, [sp, #0]
 802cf6e:	4605      	mov	r5, r0
 802cf70:	4639      	mov	r1, r7
 802cf72:	4630      	mov	r0, r6
 802cf74:	f7fd fb78 	bl	802a668 <_malloc_r>
 802cf78:	b948      	cbnz	r0, 802cf8e <__smakebuf_r+0x46>
 802cf7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802cf7e:	059a      	lsls	r2, r3, #22
 802cf80:	d4ee      	bmi.n	802cf60 <__smakebuf_r+0x18>
 802cf82:	f023 0303 	bic.w	r3, r3, #3
 802cf86:	f043 0302 	orr.w	r3, r3, #2
 802cf8a:	81a3      	strh	r3, [r4, #12]
 802cf8c:	e7e2      	b.n	802cf54 <__smakebuf_r+0xc>
 802cf8e:	89a3      	ldrh	r3, [r4, #12]
 802cf90:	6020      	str	r0, [r4, #0]
 802cf92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802cf96:	81a3      	strh	r3, [r4, #12]
 802cf98:	9b01      	ldr	r3, [sp, #4]
 802cf9a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 802cf9e:	b15b      	cbz	r3, 802cfb8 <__smakebuf_r+0x70>
 802cfa0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802cfa4:	4630      	mov	r0, r6
 802cfa6:	f000 f81d 	bl	802cfe4 <_isatty_r>
 802cfaa:	b128      	cbz	r0, 802cfb8 <__smakebuf_r+0x70>
 802cfac:	89a3      	ldrh	r3, [r4, #12]
 802cfae:	f023 0303 	bic.w	r3, r3, #3
 802cfb2:	f043 0301 	orr.w	r3, r3, #1
 802cfb6:	81a3      	strh	r3, [r4, #12]
 802cfb8:	89a3      	ldrh	r3, [r4, #12]
 802cfba:	431d      	orrs	r5, r3
 802cfbc:	81a5      	strh	r5, [r4, #12]
 802cfbe:	e7cf      	b.n	802cf60 <__smakebuf_r+0x18>

0802cfc0 <_fstat_r>:
 802cfc0:	b538      	push	{r3, r4, r5, lr}
 802cfc2:	4d07      	ldr	r5, [pc, #28]	@ (802cfe0 <_fstat_r+0x20>)
 802cfc4:	2300      	movs	r3, #0
 802cfc6:	4604      	mov	r4, r0
 802cfc8:	4608      	mov	r0, r1
 802cfca:	4611      	mov	r1, r2
 802cfcc:	602b      	str	r3, [r5, #0]
 802cfce:	f7d6 f864 	bl	800309a <_fstat>
 802cfd2:	1c43      	adds	r3, r0, #1
 802cfd4:	d102      	bne.n	802cfdc <_fstat_r+0x1c>
 802cfd6:	682b      	ldr	r3, [r5, #0]
 802cfd8:	b103      	cbz	r3, 802cfdc <_fstat_r+0x1c>
 802cfda:	6023      	str	r3, [r4, #0]
 802cfdc:	bd38      	pop	{r3, r4, r5, pc}
 802cfde:	bf00      	nop
 802cfe0:	2002a974 	.word	0x2002a974

0802cfe4 <_isatty_r>:
 802cfe4:	b538      	push	{r3, r4, r5, lr}
 802cfe6:	4d06      	ldr	r5, [pc, #24]	@ (802d000 <_isatty_r+0x1c>)
 802cfe8:	2300      	movs	r3, #0
 802cfea:	4604      	mov	r4, r0
 802cfec:	4608      	mov	r0, r1
 802cfee:	602b      	str	r3, [r5, #0]
 802cff0:	f7d6 f858 	bl	80030a4 <_isatty>
 802cff4:	1c43      	adds	r3, r0, #1
 802cff6:	d102      	bne.n	802cffe <_isatty_r+0x1a>
 802cff8:	682b      	ldr	r3, [r5, #0]
 802cffa:	b103      	cbz	r3, 802cffe <_isatty_r+0x1a>
 802cffc:	6023      	str	r3, [r4, #0]
 802cffe:	bd38      	pop	{r3, r4, r5, pc}
 802d000:	2002a974 	.word	0x2002a974

0802d004 <_calloc_r>:
 802d004:	b570      	push	{r4, r5, r6, lr}
 802d006:	fba1 5402 	umull	r5, r4, r1, r2
 802d00a:	b93c      	cbnz	r4, 802d01c <_calloc_r+0x18>
 802d00c:	4629      	mov	r1, r5
 802d00e:	f7fd fb2b 	bl	802a668 <_malloc_r>
 802d012:	4606      	mov	r6, r0
 802d014:	b928      	cbnz	r0, 802d022 <_calloc_r+0x1e>
 802d016:	2600      	movs	r6, #0
 802d018:	4630      	mov	r0, r6
 802d01a:	bd70      	pop	{r4, r5, r6, pc}
 802d01c:	220c      	movs	r2, #12
 802d01e:	6002      	str	r2, [r0, #0]
 802d020:	e7f9      	b.n	802d016 <_calloc_r+0x12>
 802d022:	462a      	mov	r2, r5
 802d024:	4621      	mov	r1, r4
 802d026:	f7fe fa7b 	bl	802b520 <memset>
 802d02a:	e7f5      	b.n	802d018 <_calloc_r+0x14>

0802d02c <__ascii_mbtowc>:
 802d02c:	b082      	sub	sp, #8
 802d02e:	b901      	cbnz	r1, 802d032 <__ascii_mbtowc+0x6>
 802d030:	a901      	add	r1, sp, #4
 802d032:	b142      	cbz	r2, 802d046 <__ascii_mbtowc+0x1a>
 802d034:	b14b      	cbz	r3, 802d04a <__ascii_mbtowc+0x1e>
 802d036:	7813      	ldrb	r3, [r2, #0]
 802d038:	600b      	str	r3, [r1, #0]
 802d03a:	7812      	ldrb	r2, [r2, #0]
 802d03c:	1e10      	subs	r0, r2, #0
 802d03e:	bf18      	it	ne
 802d040:	2001      	movne	r0, #1
 802d042:	b002      	add	sp, #8
 802d044:	4770      	bx	lr
 802d046:	4610      	mov	r0, r2
 802d048:	e7fb      	b.n	802d042 <__ascii_mbtowc+0x16>
 802d04a:	f06f 0001 	mvn.w	r0, #1
 802d04e:	e7f8      	b.n	802d042 <__ascii_mbtowc+0x16>

0802d050 <__ascii_wctomb>:
 802d050:	4603      	mov	r3, r0
 802d052:	4608      	mov	r0, r1
 802d054:	b141      	cbz	r1, 802d068 <__ascii_wctomb+0x18>
 802d056:	2aff      	cmp	r2, #255	@ 0xff
 802d058:	d904      	bls.n	802d064 <__ascii_wctomb+0x14>
 802d05a:	228a      	movs	r2, #138	@ 0x8a
 802d05c:	601a      	str	r2, [r3, #0]
 802d05e:	f04f 30ff 	mov.w	r0, #4294967295
 802d062:	4770      	bx	lr
 802d064:	700a      	strb	r2, [r1, #0]
 802d066:	2001      	movs	r0, #1
 802d068:	4770      	bx	lr
	...

0802d06c <_init>:
 802d06c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802d06e:	bf00      	nop
 802d070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802d072:	bc08      	pop	{r3}
 802d074:	469e      	mov	lr, r3
 802d076:	4770      	bx	lr

0802d078 <_fini>:
 802d078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802d07a:	bf00      	nop
 802d07c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802d07e:	bc08      	pop	{r3}
 802d080:	469e      	mov	lr, r3
 802d082:	4770      	bx	lr
